
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800a778  0800a778  0001a778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa48  0800aa48  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa48  0800aa48  0001aa48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa50  0800aa50  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa50  0800aa50  0001aa50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa54  0800aa54  0001aa54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800aa58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a0  20000358  0800adb0  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001cf8  0800adb0  00021cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197e8  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003492  00000000  00000000  00039b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001338  00000000  00000000  0003d008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003e340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022880  00000000  00000000  0003f518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115b2  00000000  00000000  00061d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3307  00000000  00000000  0007334a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136651  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aac  00000000  00000000  001366cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a760 	.word	0x0800a760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800a760 	.word	0x0800a760

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2130      	movs	r1, #48	; 0x30
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 f8ee 	bl	80020ac <HAL_I2C_Mem_Read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	2b1e      	cmp	r3, #30
 8000ede:	d001      	beq.n	8000ee4 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	21d0      	movs	r1, #208	; 0xd0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f001 f8d6 	bl	80020ac <HAL_I2C_Mem_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000f0a:	7a3b      	ldrb	r3, [r7, #8]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d001      	beq.n	8000f14 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <BMI088_I2C_CORGI_INIT>:

/* CUSTOM SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_CORGI_INIT(I2C_HandleTypeDef *hi2c)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	//uint8_t buf[1]; // Tx Buffer
	ret = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]

	// SET ACCELEROMETER LPF:

	// SET GYROSCOPE LPF:

	return ret;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <BMI088_I2C_Read_Gyro>:
	return HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
}

/* READ ALL GYROSCOPE DATA */
HAL_StatusTypeDef BMI088_I2C_Read_Gyro(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2306      	movs	r3, #6
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	2202      	movs	r2, #2
 8000f54:	21d0      	movs	r1, #208	; 0xd0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 f8a8 	bl	80020ac <HAL_I2C_Mem_Read>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	b0a9      	sub	sp, #164	; 0xa4
 8000f6c:	af04      	add	r7, sp, #16
  char    tx_buf[64];
  /* TEMPVAR FOR GYROSCOPE CONVERSIONS */
  int16_t temp;

  //for pwm output
  int32_t CH2_DC = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int32_t CH1_DC = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f000 fc05 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f935 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 fa31 	bl	80013e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f86:	f000 f99d 	bl	80012c4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f8a:	f006 fe5d 	bl	8007c48 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000f8e:	f000 f9c7 	bl	8001320 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f92:	2104      	movs	r1, #4
 8000f94:	4890      	ldr	r0, [pc, #576]	; (80011d8 <main+0x270>)
 8000f96:	f003 fb2f 	bl	80045f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	488e      	ldr	r0, [pc, #568]	; (80011d8 <main+0x270>)
 8000f9e:	f003 fb2b 	bl	80045f8 <HAL_TIM_PWM_Start>
  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 8000fa2:	488e      	ldr	r0, [pc, #568]	; (80011dc <main+0x274>)
 8000fa4:	f7ff ff80 	bl	8000ea8 <BMI088_I2C_Read_CHIP_IDS>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <main+0x4a>
 8000fae:	f000 fa5f 	bl	8001470 <Error_Handler>

  // RUN BMI088 INITIALIZATION
  if ( BMI088_I2C_CORGI_INIT(&hi2c1) != HAL_OK ) { Error_Handler(); };
 8000fb2:	488a      	ldr	r0, [pc, #552]	; (80011dc <main+0x274>)
 8000fb4:	f7ff ffb3 	bl	8000f1e <BMI088_I2C_CORGI_INIT>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <main+0x5a>
 8000fbe:	f000 fa57 	bl	8001470 <Error_Handler>

  // Get starting time

  // Initialize Orientation
  double rot[] = {0.0, 0.0, 0.0};
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	f04f 0400 	mov.w	r4, #0
 8000fca:	e9c7 3400 	strd	r3, r4, [r7]
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	f04f 0400 	mov.w	r4, #0
 8000fd6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	f04f 0400 	mov.w	r4, #0
 8000fe2:	e9c7 3404 	strd	r3, r4, [r7, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	  HAL_Delay(20);
 8000fe6:	2014      	movs	r0, #20
 8000fe8:	f000 fc40 	bl	800186c <HAL_Delay>
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);

	  // if ( BMI088_I2C_Read_Accel(&hi2c1, abuf) != HAL_OK ) { Error_Handler(); }
	  if ( BMI088_I2C_Read_Gyro (&hi2c1, gyro_buf) != HAL_OK ) { Error_Handler(); }
 8000fec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	487a      	ldr	r0, [pc, #488]	; (80011dc <main+0x274>)
 8000ff4:	f7ff ffa0 	bl	8000f38 <BMI088_I2C_Read_Gyro>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <main+0x9a>
 8000ffe:	f000 fa37 	bl	8001470 <Error_Handler>

	  // Convert to signed integer and scale to get final values
	  double max_rate = 2000.0; // DEPENDS ON GYRO CONFIG
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	4c76      	ldr	r4, [pc, #472]	; (80011e0 <main+0x278>)
 8001008:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	  for (int i = 0; i < 3; i++){
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001012:	e06b      	b.n	80010ec <main+0x184>
		  // Assemble unsigned integer data
		  temp = gyro_buf[2*i + 1] << 8 | gyro_buf[2*i];
 8001014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	3301      	adds	r3, #1
 800101c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001020:	4413      	add	r3, r2
 8001022:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001034:	440b      	add	r3, r1
 8001036:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  // Convert to rad/s
		  rate_buf[i] = ((double)temp*max_rate*pi)/(32767.0*180.0);
 8001042:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa6c 	bl	8000524 <__aeabi_i2d>
 800104c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001050:	f7ff fad2 	bl	80005f8 <__aeabi_dmul>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	a458      	add	r4, pc, #352	; (adr r4, 80011c0 <main+0x258>)
 800105e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001062:	461a      	mov	r2, r3
 8001064:	4623      	mov	r3, r4
 8001066:	f7ff fac7 	bl	80005f8 <__aeabi_dmul>
 800106a:	4603      	mov	r3, r0
 800106c:	460c      	mov	r4, r1
 800106e:	4618      	mov	r0, r3
 8001070:	4621      	mov	r1, r4
 8001072:	a355      	add	r3, pc, #340	; (adr r3, 80011c8 <main+0x260>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fbe8 	bl	800084c <__aeabi_ddiv>
 800107c:	4603      	mov	r3, r0
 800107e:	460c      	mov	r4, r1
 8001080:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001084:	00d2      	lsls	r2, r2, #3
 8001086:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800108a:	440a      	add	r2, r1
 800108c:	3a38      	subs	r2, #56	; 0x38
 800108e:	e9c2 3400 	strd	r3, r4, [r2]
		  // Integrate
		  rot[i] = rot[i] + 0.02*rate_buf[i];
 8001092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800109c:	4413      	add	r3, r2
 800109e:	3b90      	subs	r3, #144	; 0x90
 80010a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80010ae:	4413      	add	r3, r2
 80010b0:	3b38      	subs	r3, #56	; 0x38
 80010b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b6:	a346      	add	r3, pc, #280	; (adr r3, 80011d0 <main+0x268>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa9c 	bl	80005f8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff f8e0 	bl	800028c <__adddf3>
 80010cc:	4603      	mov	r3, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80010d4:	00d2      	lsls	r2, r2, #3
 80010d6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80010da:	440a      	add	r2, r1
 80010dc:	3a90      	subs	r2, #144	; 0x90
 80010de:	e9c2 3400 	strd	r3, r4, [r2]
	  for (int i = 0; i < 3; i++){
 80010e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010e6:	3301      	adds	r3, #1
 80010e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80010ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	dd8f      	ble.n	8001014 <main+0xac>
	  }

	  sprintf(tx_buf, "%f\t%f\t%f\n", rot[0], rot[1], rot[2]);
 80010f4:	e9d7 5600 	ldrd	r5, r6, [r7]
 80010f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80010fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001100:	f107 0018 	add.w	r0, r7, #24
 8001104:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001108:	e9cd 3400 	strd	r3, r4, [sp]
 800110c:	462a      	mov	r2, r5
 800110e:	4633      	mov	r3, r6
 8001110:	4934      	ldr	r1, [pc, #208]	; (80011e4 <main+0x27c>)
 8001112:	f008 f803 	bl	800911c <siprintf>
	  CDC_Transmit_FS((uint8_t*)tx_buf, strlen(tx_buf));
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f858 	bl	80001d0 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f006 fe5e 	bl	8007dec <CDC_Transmit_FS>

	  while(CH2_DC < 65535)
 8001130:	e01c      	b.n	800116c <main+0x204>
	  {
		  if(rot[2] > 0){
 8001132:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	f7ff fceb 	bl	8000b18 <__aeabi_dcmpgt>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d100      	bne.n	800114a <main+0x1e2>
 8001148:	e010      	b.n	800116c <main+0x204>
			  TIM3->CCR2 = CH2_DC;
 800114a:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <main+0x280>)
 800114c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001150:	6393      	str	r3, [r2, #56]	; 0x38
		  CH1_DC += 70;
 8001152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001156:	3346      	adds	r3, #70	; 0x46
 8001158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  CH2_DC += 70;
 800115c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001160:	3346      	adds	r3, #70	; 0x46
 8001162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fb80 	bl	800186c <HAL_Delay>
	  while(CH2_DC < 65535)
 800116c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001170:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001174:	4293      	cmp	r3, r2
 8001176:	dddc      	ble.n	8001132 <main+0x1ca>
		  }

	  }
	  while(CH1_DC > 0)
 8001178:	e01c      	b.n	80011b4 <main+0x24c>
	  {
		  if(rot[1] < 0){
 800117a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	f7ff fca9 	bl	8000adc <__aeabi_dcmplt>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <main+0x22a>
 8001190:	e010      	b.n	80011b4 <main+0x24c>
		  TIM3->CCR1 = CH1_DC;
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <main+0x280>)
 8001194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001198:	6353      	str	r3, [r2, #52]	; 0x34
		  CH1_DC -= 70;
 800119a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800119e:	3b46      	subs	r3, #70	; 0x46
 80011a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  CH1_DC -= 70;
 80011a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011a8:	3b46      	subs	r3, #70	; 0x46
 80011aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  HAL_Delay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 fb5c 	bl	800186c <HAL_Delay>
	  while(CH1_DC > 0)
 80011b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dcde      	bgt.n	800117a <main+0x212>
  {
 80011bc:	e713      	b.n	8000fe6 <main+0x7e>
 80011be:	bf00      	nop
 80011c0:	53c8d4f1 	.word	0x53c8d4f1
 80011c4:	400921fb 	.word	0x400921fb
 80011c8:	00000000 	.word	0x00000000
 80011cc:	41567fd3 	.word	0x41567fd3
 80011d0:	47ae147b 	.word	0x47ae147b
 80011d4:	3f947ae1 	.word	0x3f947ae1
 80011d8:	200003d8 	.word	0x200003d8
 80011dc:	20000384 	.word	0x20000384
 80011e0:	409f4000 	.word	0x409f4000
 80011e4:	0800a778 	.word	0x0800a778
 80011e8:	40000400 	.word	0x40000400

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f007 fa72 	bl	80086e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <SystemClock_Config+0xd0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <SystemClock_Config+0xd0>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <SystemClock_Config+0xd0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <SystemClock_Config+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <SystemClock_Config+0xd4>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <SystemClock_Config+0xd4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001252:	2301      	movs	r3, #1
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001256:	2310      	movs	r3, #16
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001264:	2310      	movs	r3, #16
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001268:	23c0      	movs	r3, #192	; 0xc0
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fd45 	bl	8003d08 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001284:	f000 f8f4 	bl	8001470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 ffa0 	bl	80041e8 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ae:	f000 f8df 	bl	8001470 <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	; 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <MX_I2C1_Init+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_I2C1_Init+0x58>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_I2C1_Init+0x50>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_I2C1_Init+0x50>)
 8001302:	f000 fd9b 	bl	8001e3c <HAL_I2C_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800130c:	f000 f8b0 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000384 	.word	0x20000384
 8001318:	40005400 	.word	0x40005400
 800131c:	000186a0 	.word	0x000186a0

08001320 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <MX_TIM3_Init+0xc0>)
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <MX_TIM3_Init+0xc4>)
 8001346:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <MX_TIM3_Init+0xc0>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <MX_TIM3_Init+0xc0>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <MX_TIM3_Init+0xc0>)
 8001356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <MX_TIM3_Init+0xc0>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_TIM3_Init+0xc0>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001368:	481d      	ldr	r0, [pc, #116]	; (80013e0 <MX_TIM3_Init+0xc0>)
 800136a:	f003 f919 	bl	80045a0 <HAL_TIM_PWM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001374:	f000 f87c 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	4619      	mov	r1, r3
 8001386:	4816      	ldr	r0, [pc, #88]	; (80013e0 <MX_TIM3_Init+0xc0>)
 8001388:	f003 fcb0 	bl	8004cec <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001392:	f000 f86d 	bl	8001470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_TIM3_Init+0xc0>)
 80013ae:	f003 f961 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013b8:	f000 f85a 	bl	8001470 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2204      	movs	r2, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_TIM3_Init+0xc0>)
 80013c4:	f003 f956 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013ce:	f000 f84f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013d2:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_TIM3_Init+0xc0>)
 80013d4:	f000 f8f4 	bl	80015c0 <HAL_TIM_MspPostInit>

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200003d8 	.word	0x200003d8
 80013e4:	40000400 	.word	0x40000400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_GPIO_Init+0x84>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <MX_GPIO_Init+0x84>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_GPIO_Init+0x84>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_GPIO_Init+0x84>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a16      	ldr	r2, [pc, #88]	; (800146c <MX_GPIO_Init+0x84>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_GPIO_Init+0x84>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_GPIO_Init+0x84>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <MX_GPIO_Init+0x84>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <MX_GPIO_Init+0x84>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_GPIO_Init+0x84>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <MX_GPIO_Init+0x84>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_GPIO_Init+0x84>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <Error_Handler+0x24>)
 800147c:	f000 fcc4 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <Error_Handler+0x24>)
 8001486:	f000 fcbf 	bl	8001e08 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 800148a:	2106      	movs	r1, #6
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <Error_Handler+0x28>)
 800148e:	f006 fcad 	bl	8007dec <CDC_Transmit_FS>
  while (1)
 8001492:	e7fe      	b.n	8001492 <Error_Handler+0x22>
 8001494:	40020800 	.word	0x40020800
 8001498:	0800a784 	.word	0x0800a784

0800149c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_MspInit+0x4c>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_I2C_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12c      	bne.n	8001568 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001530:	2312      	movs	r3, #18
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	2301      	movs	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153c:	2304      	movs	r3, #4
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_I2C_MspInit+0x8c>)
 8001548:	f000 fac4 	bl	8001ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_I2C_MspInit+0x88>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400

0800157c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10d      	bne.n	80015aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_TIM_PWM_MspInit+0x40>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_TIM_PWM_MspInit+0x40>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_TIM_PWM_MspInit+0x40>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40000400 	.word	0x40000400
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_TIM_MspPostInit+0x68>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d11d      	bne.n	800161e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fe:	23c0      	movs	r3, #192	; 0xc0
 8001600:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800160e:	2302      	movs	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_TIM_MspPostInit+0x70>)
 800161a:	f000 fa5b 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40000400 	.word	0x40000400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020800 	.word	0x40020800

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 f8d4 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <OTG_FS_IRQHandler+0x10>)
 800168e:	f001 fb07 	bl	8002ca0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200018ec 	.word	0x200018ec

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f006 ffd0 	bl	8008670 <__errno>
 80016d0:	4602      	mov	r2, r0
 80016d2:	230c      	movs	r3, #12
 80016d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000374 	.word	0x20000374
 8001704:	20001cf8 	.word	0x20001cf8

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <SystemInit+0x28>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <SystemInit+0x28>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SystemInit+0x28>)
 800171e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001722:	609a      	str	r2, [r3, #8]
#endif
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800176c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800173a:	e003      	b.n	8001744 <LoopCopyDataInit>

0800173c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800173e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001742:	3104      	adds	r1, #4

08001744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800174a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800174c:	d3f6      	bcc.n	800173c <CopyDataInit>
  ldr  r2, =_sbss
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001750:	e002      	b.n	8001758 <LoopFillZerobss>

08001752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001754:	f842 3b04 	str.w	r3, [r2], #4

08001758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800175a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800175c:	d3f9      	bcc.n	8001752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800175e:	f7ff ffd3 	bl	8001708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001762:	f006 ff8b 	bl	800867c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7ff fbff 	bl	8000f68 <main>
  bx  lr    
 800176a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800176c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001770:	0800aa58 	.word	0x0800aa58
  ldr  r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001778:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 800177c:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8001780:	20001cf8 	.word	0x20001cf8

08001784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <HAL_Init+0x40>)
 8001792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_Init+0x40>)
 800179e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_Init+0x40>)
 80017aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f94d 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 f808 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017bc:	f7ff fe6e 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00

080017cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x54>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x58>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f965 	bl	8001aba <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00e      	b.n	8001818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d80a      	bhi.n	8001816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f000 f92d 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_InitTick+0x5c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000000 	.word	0x20000000
 8001824:	20000008 	.word	0x20000008
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008
 8001850:	20000418 	.word	0x20000418

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000418 	.word	0x20000418

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_Delay+0x40>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	; (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff3e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff8e 	bl	80019a4 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5d 	bl	8001950 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff31 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e16b      	b.n	8001dc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 815a 	bne.w	8001dc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d00b      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d130      	bne.n	8001b90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0201 	and.w	r2, r3, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0xfc>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80b4 	beq.w	8001dc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <HAL_GPIO_Init+0x308>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a5e      	ldr	r2, [pc, #376]	; (8001ddc <HAL_GPIO_Init+0x308>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b5c      	ldr	r3, [pc, #368]	; (8001ddc <HAL_GPIO_Init+0x308>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a5a      	ldr	r2, [pc, #360]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a51      	ldr	r2, [pc, #324]	; (8001de4 <HAL_GPIO_Init+0x310>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02b      	beq.n	8001cfa <HAL_GPIO_Init+0x226>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a50      	ldr	r2, [pc, #320]	; (8001de8 <HAL_GPIO_Init+0x314>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d025      	beq.n	8001cf6 <HAL_GPIO_Init+0x222>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4f      	ldr	r2, [pc, #316]	; (8001dec <HAL_GPIO_Init+0x318>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_GPIO_Init+0x21e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4e      	ldr	r2, [pc, #312]	; (8001df0 <HAL_GPIO_Init+0x31c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_Init+0x21a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4d      	ldr	r2, [pc, #308]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0x216>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4c      	ldr	r2, [pc, #304]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_Init+0x212>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4b      	ldr	r2, [pc, #300]	; (8001dfc <HAL_GPIO_Init+0x328>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_Init+0x20e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4a      	ldr	r2, [pc, #296]	; (8001e00 <HAL_GPIO_Init+0x32c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_Init+0x20a>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e00e      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cde:	2308      	movs	r3, #8
 8001ce0:	e00c      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e00a      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x228>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	f002 0203 	and.w	r2, r2, #3
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d0c:	4934      	ldr	r1, [pc, #208]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3e:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	f67f ae90 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3724      	adds	r7, #36	; 0x24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021c00 	.word	0x40021c00
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e11f      	b.n	800208e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fb42 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2224      	movs	r2, #36	; 0x24
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea0:	f002 fb6a 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8001ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a7b      	ldr	r2, [pc, #492]	; (8002098 <HAL_I2C_Init+0x25c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d807      	bhi.n	8001ec0 <HAL_I2C_Init+0x84>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a7a      	ldr	r2, [pc, #488]	; (800209c <HAL_I2C_Init+0x260>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e006      	b.n	8001ece <HAL_I2C_Init+0x92>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a77      	ldr	r2, [pc, #476]	; (80020a0 <HAL_I2C_Init+0x264>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	bf94      	ite	ls
 8001ec8:	2301      	movls	r3, #1
 8001eca:	2300      	movhi	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0db      	b.n	800208e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a72      	ldr	r2, [pc, #456]	; (80020a4 <HAL_I2C_Init+0x268>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a64      	ldr	r2, [pc, #400]	; (8002098 <HAL_I2C_Init+0x25c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d802      	bhi.n	8001f10 <HAL_I2C_Init+0xd4>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	e009      	b.n	8001f24 <HAL_I2C_Init+0xe8>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	4a63      	ldr	r2, [pc, #396]	; (80020a8 <HAL_I2C_Init+0x26c>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	3301      	adds	r3, #1
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4956      	ldr	r1, [pc, #344]	; (8002098 <HAL_I2C_Init+0x25c>)
 8001f40:	428b      	cmp	r3, r1
 8001f42:	d80d      	bhi.n	8001f60 <HAL_I2C_Init+0x124>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e59      	subs	r1, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	bf38      	it	cc
 8001f5c:	2304      	movcc	r3, #4
 8001f5e:	e04f      	b.n	8002000 <HAL_I2C_Init+0x1c4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d111      	bne.n	8001f8c <HAL_I2C_Init+0x150>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e58      	subs	r0, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	440b      	add	r3, r1
 8001f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	e012      	b.n	8001fb2 <HAL_I2C_Init+0x176>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	0099      	lsls	r1, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Init+0x17e>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e022      	b.n	8002000 <HAL_I2C_Init+0x1c4>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_I2C_Init+0x1a4>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1e58      	subs	r0, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6859      	ldr	r1, [r3, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	440b      	add	r3, r1
 8001fd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fde:	e00f      	b.n	8002000 <HAL_I2C_Init+0x1c4>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	0099      	lsls	r1, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	6809      	ldr	r1, [r1, #0]
 8002004:	4313      	orrs	r3, r2
 8002006:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800202e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6911      	ldr	r1, [r2, #16]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68d2      	ldr	r2, [r2, #12]
 800203a:	4311      	orrs	r1, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	430b      	orrs	r3, r1
 8002042:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	000186a0 	.word	0x000186a0
 800209c:	001e847f 	.word	0x001e847f
 80020a0:	003d08ff 	.word	0x003d08ff
 80020a4:	431bde83 	.word	0x431bde83
 80020a8:	10624dd3 	.word	0x10624dd3

080020ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	817b      	strh	r3, [r7, #10]
 80020be:	460b      	mov	r3, r1
 80020c0:	813b      	strh	r3, [r7, #8]
 80020c2:	4613      	mov	r3, r2
 80020c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020c6:	f7ff fbc5 	bl	8001854 <HAL_GetTick>
 80020ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	f040 8208 	bne.w	80024ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2319      	movs	r3, #25
 80020e0:	2201      	movs	r2, #1
 80020e2:	497b      	ldr	r1, [pc, #492]	; (80022d0 <HAL_I2C_Mem_Read+0x224>)
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 faef 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020f0:	2302      	movs	r3, #2
 80020f2:	e1fb      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_I2C_Mem_Read+0x56>
 80020fe:	2302      	movs	r3, #2
 8002100:	e1f4      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d007      	beq.n	8002128 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002136:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2222      	movs	r2, #34	; 0x22
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <HAL_I2C_Mem_Read+0x228>)
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800216a:	88f8      	ldrh	r0, [r7, #6]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	8979      	ldrh	r1, [r7, #10]
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	4603      	mov	r3, r0
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f9bc 	bl	80024f8 <I2C_RequestMemoryRead>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1b0      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	d113      	bne.n	80021ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	623b      	str	r3, [r7, #32]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	623b      	str	r3, [r7, #32]
 80021a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e184      	b.n	80024c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d11b      	bne.n	80021fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e164      	b.n	80024c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d11b      	bne.n	800223a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002210:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	e144      	b.n	80024c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002250:	e138      	b.n	80024c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	2b03      	cmp	r3, #3
 8002258:	f200 80f1 	bhi.w	800243e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b01      	cmp	r3, #1
 8002262:	d123      	bne.n	80022ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 fb44 	bl	80028f6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e139      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022aa:	e10b      	b.n	80024c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d14e      	bne.n	8002352 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ba:	2200      	movs	r2, #0
 80022bc:	4906      	ldr	r1, [pc, #24]	; (80022d8 <HAL_I2C_Mem_Read+0x22c>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 fa02 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e10e      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
 80022ce:	bf00      	nop
 80022d0:	00100002 	.word	0x00100002
 80022d4:	ffff0000 	.word	0xffff0000
 80022d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002350:	e0b8      	b.n	80024c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	2200      	movs	r2, #0
 800235a:	4966      	ldr	r1, [pc, #408]	; (80024f4 <HAL_I2C_Mem_Read+0x448>)
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f9b3 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0bf      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b4:	2200      	movs	r2, #0
 80023b6:	494f      	ldr	r1, [pc, #316]	; (80024f4 <HAL_I2C_Mem_Read+0x448>)
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f985 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e091      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800243c:	e042      	b.n	80024c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fa57 	bl	80028f6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e04c      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d118      	bne.n	80024c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f aec2 	bne.w	8002252 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3728      	adds	r7, #40	; 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	00010004 	.word	0x00010004

080024f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4603      	mov	r3, r0
 8002508:	817b      	strh	r3, [r7, #10]
 800250a:	460b      	mov	r3, r1
 800250c:	813b      	strh	r3, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002520:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002530:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	2200      	movs	r2, #0
 800253a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f8c2 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002558:	d103      	bne.n	8002562 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0aa      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002566:	897b      	ldrh	r3, [r7, #10]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002574:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	4952      	ldr	r1, [pc, #328]	; (80026c4 <I2C_RequestMemoryRead+0x1cc>)
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f8fa 	bl	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e097      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	6a39      	ldr	r1, [r7, #32]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f964 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d107      	bne.n	80025ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e076      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025d4:	893b      	ldrh	r3, [r7, #8]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e021      	b.n	8002624 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025e0:	893b      	ldrh	r3, [r7, #8]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	6a39      	ldr	r1, [r7, #32]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f93e 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b04      	cmp	r3, #4
 8002604:	d107      	bne.n	8002616 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002614:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e050      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800261a:	893b      	ldrh	r3, [r7, #8]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	6a39      	ldr	r1, [r7, #32]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f923 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2b04      	cmp	r3, #4
 800263a:	d107      	bne.n	800264c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e035      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2200      	movs	r2, #0
 8002668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f82b 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00d      	beq.n	8002694 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002686:	d103      	bne.n	8002690 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e013      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002694:	897b      	ldrh	r3, [r7, #10]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	6a3a      	ldr	r2, [r7, #32]
 80026a8:	4906      	ldr	r1, [pc, #24]	; (80026c4 <I2C_RequestMemoryRead+0x1cc>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f863 	bl	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	00010002 	.word	0x00010002

080026c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d8:	e025      	b.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d021      	beq.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7ff f8b7 	bl	8001854 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d116      	bne.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f043 0220 	orr.w	r2, r3, #32
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e023      	b.n	800276e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d10d      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	e00c      	b.n	8002766 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4013      	ands	r3, r2
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	429a      	cmp	r2, r3
 800276a:	d0b6      	beq.n	80026da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002784:	e051      	b.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002794:	d123      	bne.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e046      	b.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d021      	beq.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7ff f835 	bl	8001854 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e020      	b.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10c      	bne.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e00b      	b.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	43da      	mvns	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4013      	ands	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d18d      	bne.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002880:	e02d      	b.n	80028de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f88d 	bl	80029a2 <I2C_IsAcknowledgeFailed>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e02d      	b.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d021      	beq.n	80028de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289a:	f7fe ffdb 	bl	8001854 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d302      	bcc.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d116      	bne.n	80028de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f043 0220 	orr.w	r2, r3, #32
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e007      	b.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e8:	2b80      	cmp	r3, #128	; 0x80
 80028ea:	d1ca      	bne.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002902:	e042      	b.n	800298a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b10      	cmp	r3, #16
 8002910:	d119      	bne.n	8002946 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f06f 0210 	mvn.w	r2, #16
 800291a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e029      	b.n	800299a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002946:	f7fe ff85 	bl	8001854 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	d302      	bcc.n	800295c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d116      	bne.n	800298a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e007      	b.n	800299a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d1b5      	bne.n	8002904 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b8:	d11b      	bne.n	80029f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a02:	b08f      	sub	sp, #60	; 0x3c
 8002a04:	af0a      	add	r7, sp, #40	; 0x28
 8002a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e10f      	b.n	8002c32 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f005 fb23 	bl	8008078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fadc 	bl	800500e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	687e      	ldr	r6, [r7, #4]
 8002a5e:	466d      	mov	r5, sp
 8002a60:	f106 0410 	add.w	r4, r6, #16
 8002a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a74:	1d33      	adds	r3, r6, #4
 8002a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a78:	6838      	ldr	r0, [r7, #0]
 8002a7a:	f002 f9b3 	bl	8004de4 <USB_CoreInit>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0d0      	b.n	8002c32 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 faca 	bl	8005030 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	e04a      	b.n	8002b38 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	333d      	adds	r3, #61	; 0x3d
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	333c      	adds	r3, #60	; 0x3c
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	b298      	uxth	r0, r3
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3342      	adds	r3, #66	; 0x42
 8002ade:	4602      	mov	r2, r0
 8002ae0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	333f      	adds	r3, #63	; 0x3f
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3344      	adds	r3, #68	; 0x44
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3348      	adds	r3, #72	; 0x48
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3350      	adds	r3, #80	; 0x50
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	3301      	adds	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d3af      	bcc.n	8002aa2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e044      	b.n	8002bd2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3b5      	bcc.n	8002b48 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	687e      	ldr	r6, [r7, #4]
 8002be4:	466d      	mov	r5, sp
 8002be6:	f106 0410 	add.w	r4, r6, #16
 8002bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bfa:	1d33      	adds	r3, r6, #4
 8002bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfe:	6838      	ldr	r0, [r7, #0]
 8002c00:	f002 fa40 	bl	8005084 <USB_DevInit>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00d      	b.n	8002c32 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 fa88 	bl	8006140 <USB_DevDisconnect>

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_PCD_Start+0x1c>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e020      	b.n	8002c98 <HAL_PCD_Start+0x5e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d109      	bne.n	8002c7a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d005      	beq.n	8002c7a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f002 f9b4 	bl	8004fec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fa38 	bl	80060fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b08d      	sub	sp, #52	; 0x34
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 faf6 	bl	80062a8 <USB_GetMode>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 839d 	bne.w	80033fe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fa5a 	bl	8006182 <USB_ReadInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8393 	beq.w	80033fc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fa51 	bl	8006182 <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d107      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 0202 	and.w	r2, r2, #2
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fa3f 	bl	8006182 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d161      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0210 	bic.w	r2, r2, #16
 8002d1c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	0c5b      	lsrs	r3, r3, #17
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d124      	bne.n	8002d94 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d035      	beq.n	8002dc2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	6a38      	ldr	r0, [r7, #32]
 8002d6a:	f003 f8a5 	bl	8005eb8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7a:	441a      	add	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8c:	441a      	add	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	619a      	str	r2, [r3, #24]
 8002d92:	e016      	b.n	8002dc2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	0c5b      	lsrs	r3, r3, #17
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d110      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002da6:	2208      	movs	r2, #8
 8002da8:	4619      	mov	r1, r3
 8002daa:	6a38      	ldr	r0, [r7, #32]
 8002dac:	f003 f884 	bl	8005eb8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dbc:	441a      	add	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0210 	orr.w	r2, r2, #16
 8002dd0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 f9d3 	bl	8006182 <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002de6:	d16e      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 f9d9 	bl	80061a8 <USB_ReadDevAllOutEpInterrupt>
 8002df6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002df8:	e062      	b.n	8002ec0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d057      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 f9fe 	bl	8006210 <USB_ReadDevOutEPInterrupt>
 8002e14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2301      	movs	r3, #1
 8002e30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fdb1 	bl	800399c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e50:	461a      	mov	r2, r3
 8002e52:	2308      	movs	r3, #8
 8002e54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 feab 	bl	8003bb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e74:	461a      	mov	r2, r3
 8002e76:	2310      	movs	r3, #16
 8002e78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e90:	461a      	mov	r2, r3
 8002e92:	2320      	movs	r3, #32
 8002e94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eac:	461a      	mov	r2, r3
 8002eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d199      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 f959 	bl	8006182 <USB_ReadInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eda:	f040 80c0 	bne.w	800305e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 f97a 	bl	80061dc <USB_ReadDevAllInEpInterrupt>
 8002ee8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002eee:	e0b2      	b.n	8003056 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a7 	beq.w	800304a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 f9a0 	bl	800624c <USB_ReadDevInEPInterrupt>
 8002f0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d057      	beq.n	8002fc8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	2201      	movs	r2, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69f9      	ldr	r1, [r7, #28]
 8002f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f38:	4013      	ands	r3, r2
 8002f3a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d132      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3348      	adds	r3, #72	; 0x48
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4403      	add	r3, r0
 8002f76:	3344      	adds	r3, #68	; 0x44
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4419      	add	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4403      	add	r3, r0
 8002f8a:	3348      	adds	r3, #72	; 0x48
 8002f8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d113      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x31c>
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3350      	adds	r3, #80	; 0x50
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d108      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f003 f9a8 	bl	800630c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f005 f8d9 	bl	800817a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003016:	461a      	mov	r2, r3
 8003018:	2340      	movs	r3, #64	; 0x40
 800301a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003032:	461a      	mov	r2, r3
 8003034:	2302      	movs	r3, #2
 8003036:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fc1b 	bl	8003880 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	3301      	adds	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f af49 	bne.w	8002ef0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f88d 	bl	8006182 <USB_ReadInterrupts>
 8003068:	4603      	mov	r3, r0
 800306a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800306e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003072:	d122      	bne.n	80030ba <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800309a:	2100      	movs	r1, #0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fe27 	bl	8003cf0 <HAL_PCDEx_LPM_Callback>
 80030a2:	e002      	b.n	80030aa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f005 f8df 	bl	8008268 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 f85f 	bl	8006182 <USB_ReadInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ce:	d112      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d102      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f005 f89b 	bl	800821c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030f4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 f841 	bl	8006182 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	f040 80c7 	bne.w	800329c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2110      	movs	r1, #16
 8003128:	4618      	mov	r0, r3
 800312a:	f002 f90f 	bl	800534c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003132:	e056      	b.n	80031e2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003140:	461a      	mov	r2, r3
 8003142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003146:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003158:	0151      	lsls	r1, r2, #5
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	440a      	add	r2, r1
 800315e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003166:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003178:	0151      	lsls	r1, r2, #5
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	440a      	add	r2, r1
 800317e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800319a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031cc:	0151      	lsls	r1, r2, #5
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	440a      	add	r2, r1
 80031d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	3301      	adds	r3, #1
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3a3      	bcc.n	8003134 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	2b00      	cmp	r3, #0
 8003206:	d016      	beq.n	8003236 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003218:	f043 030b 	orr.w	r3, r3, #11
 800321c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322e:	f043 030b 	orr.w	r3, r3, #11
 8003232:	6453      	str	r3, [r2, #68]	; 0x44
 8003234:	e015      	b.n	8003262 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003248:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800324c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800325c:	f043 030b 	orr.w	r3, r3, #11
 8003260:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003270:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003274:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003286:	461a      	mov	r2, r3
 8003288:	f003 f840 	bl	800630c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800329a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 ff6e 	bl	8006182 <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b0:	d124      	bne.n	80032fc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 f804 	bl	80062c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 f8a4 	bl	800540e <USB_GetDevSpeed>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681c      	ldr	r4, [r3, #0]
 80032d2:	f001 f945 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80032d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	4620      	mov	r0, r4
 80032e2:	f001 fde1 	bl	8004ea8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f004 ff6f 	bl	80081ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f002 ff3e 	bl	8006182 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d10a      	bne.n	8003326 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f004 ff4c 	bl	80081ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f002 0208 	and.w	r2, r2, #8
 8003324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f002 ff29 	bl	8006182 <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333a:	d10f      	bne.n	800335c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	b2db      	uxtb	r3, r3
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f004 ffae 	bl	80082a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800335a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f002 ff0e 	bl	8006182 <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003370:	d10f      	bne.n	8003392 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	b2db      	uxtb	r3, r3
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f004 ff81 	bl	8008284 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fef3 	bl	8006182 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d10a      	bne.n	80033be <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f004 ff8f 	bl	80082cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 fedd 	bl	8006182 <USB_ReadInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d115      	bne.n	80033fe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f004 ff7f 	bl	80082e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	e000      	b.n	80033fe <HAL_PCD_IRQHandler+0x75e>
      return;
 80033fc:	bf00      	nop
    }
  }
}
 80033fe:	3734      	adds	r7, #52	; 0x34
 8003400:	46bd      	mov	sp, r7
 8003402:	bd90      	pop	{r4, r7, pc}

08003404 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_PCD_SetAddress+0x1a>
 800341a:	2302      	movs	r3, #2
 800341c:	e013      	b.n	8003446 <HAL_PCD_SetAddress+0x42>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f002 fe3b 	bl	80060b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	4608      	mov	r0, r1
 8003458:	4611      	mov	r1, r2
 800345a:	461a      	mov	r2, r3
 800345c:	4603      	mov	r3, r0
 800345e:	70fb      	strb	r3, [r7, #3]
 8003460:	460b      	mov	r3, r1
 8003462:	803b      	strh	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800346c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da0f      	bge.n	8003494 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	3338      	adds	r3, #56	; 0x38
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	705a      	strb	r2, [r3, #1]
 8003492:	e00f      	b.n	80034b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034c0:	883a      	ldrh	r2, [r7, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	78ba      	ldrb	r2, [r7, #2]
 80034ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034de:	78bb      	ldrb	r3, [r7, #2]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d102      	bne.n	80034ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_PCD_EP_Open+0xaa>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e00e      	b.n	8003516 <HAL_PCD_EP_Open+0xc8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68f9      	ldr	r1, [r7, #12]
 8003506:	4618      	mov	r0, r3
 8003508:	f001 ffa6 	bl	8005458 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003514:	7afb      	ldrb	r3, [r7, #11]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800352a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da0f      	bge.n	8003552 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3338      	adds	r3, #56	; 0x38
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	705a      	strb	r2, [r3, #1]
 8003550:	e00f      	b.n	8003572 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_PCD_EP_Close+0x6e>
 8003588:	2302      	movs	r3, #2
 800358a:	e00e      	b.n	80035aa <HAL_PCD_EP_Close+0x8c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	4618      	mov	r0, r3
 800359c:	f001 ffe4 	bl	8005568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	460b      	mov	r3, r1
 80035c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c2:	7afb      	ldrb	r3, [r7, #11]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d102      	bne.n	800360e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	f002 fabf 	bl	8005ba8 <USB_EP0StartXfer>
 800362a:	e008      	b.n	800363e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	f002 f871 	bl	8005720 <USB_EPStartXfer>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 020f 	and.w	r2, r3, #15
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	460b      	mov	r3, r1
 8003686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	3338      	adds	r3, #56	; 0x38
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2200      	movs	r2, #0
 80036b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2201      	movs	r2, #1
 80036b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d102      	bne.n	80036d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	6979      	ldr	r1, [r7, #20]
 80036ea:	f002 fa5d 	bl	8005ba8 <USB_EP0StartXfer>
 80036ee:	e008      	b.n	8003702 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	6979      	ldr	r1, [r7, #20]
 80036fe:	f002 f80f 	bl	8005720 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d901      	bls.n	800372a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e050      	b.n	80037cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800372a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800372e:	2b00      	cmp	r3, #0
 8003730:	da0f      	bge.n	8003752 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	3338      	adds	r3, #56	; 0x38
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	3304      	adds	r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	705a      	strb	r2, [r3, #1]
 8003750:	e00d      	b.n	800376e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_PCD_EP_SetStall+0x82>
 800378a:	2302      	movs	r3, #2
 800378c:	e01e      	b.n	80037cc <HAL_PCD_EP_SetStall+0xc0>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fbb4 	bl	8005f0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	b2d9      	uxtb	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037bc:	461a      	mov	r2, r3
 80037be:	f002 fda5 	bl	800630c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d901      	bls.n	80037f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e042      	b.n	8003878 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da0f      	bge.n	800381a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	3338      	adds	r3, #56	; 0x38
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	3304      	adds	r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	705a      	strb	r2, [r3, #1]
 8003818:	e00f      	b.n	800383a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_EP_ClrStall+0x86>
 8003856:	2302      	movs	r3, #2
 8003858:	e00e      	b.n	8003878 <HAL_PCD_EP_ClrStall+0xa4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fbbc 	bl	8005fe6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	3338      	adds	r3, #56	; 0x38
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d901      	bls.n	80038b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e06c      	b.n	8003992 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d902      	bls.n	80038d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3303      	adds	r3, #3
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038dc:	e02b      	b.n	8003936 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d902      	bls.n	80038fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3303      	adds	r3, #3
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68d9      	ldr	r1, [r3, #12]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003912:	b2db      	uxtb	r3, r3
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4603      	mov	r3, r0
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f002 fa98 	bl	8005e4e <USB_WritePacket>

    ep->xfer_buff  += len;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	b29b      	uxth	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d809      	bhi.n	8003960 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003954:	429a      	cmp	r2, r3
 8003956:	d203      	bcs.n	8003960 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1be      	bne.n	80038de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	429a      	cmp	r2, r3
 800396a:	d811      	bhi.n	8003990 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	43db      	mvns	r3, r3
 8003986:	6939      	ldr	r1, [r7, #16]
 8003988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800398c:	4013      	ands	r3, r2
 800398e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	333c      	adds	r3, #60	; 0x3c
 80039b4:	3304      	adds	r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	f040 80a0 	bne.w	8003b14 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d015      	beq.n	8003a0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a72      	ldr	r2, [pc, #456]	; (8003bac <PCD_EP_OutXfrComplete_int+0x210>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	f240 80dd 	bls.w	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80d7 	beq.w	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	461a      	mov	r2, r3
 8003a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a06:	6093      	str	r3, [r2, #8]
 8003a08:	e0cb      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2320      	movs	r3, #32
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	e0bc      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 80b7 	bne.w	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <PCD_EP_OutXfrComplete_int+0x210>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d90f      	bls.n	8003a5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	461a      	mov	r2, r3
 8003a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a58:	6093      	str	r3, [r2, #8]
 8003a5a:	e0a2      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	0159      	lsls	r1, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	440b      	add	r3, r1
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aaa:	6819      	ldr	r1, [r3, #0]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4403      	add	r3, r0
 8003aba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4419      	add	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4403      	add	r3, r0
 8003ad0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ad4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d114      	bne.n	8003b06 <PCD_EP_OutXfrComplete_int+0x16a>
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d108      	bne.n	8003b06 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003afe:	461a      	mov	r2, r3
 8003b00:	2101      	movs	r1, #1
 8003b02:	f002 fc03 	bl	800630c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f004 fb19 	bl	8008144 <HAL_PCD_DataOutStageCallback>
 8003b12:	e046      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a26      	ldr	r2, [pc, #152]	; (8003bb0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d124      	bne.n	8003b66 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	461a      	mov	r2, r3
 8003b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b38:	6093      	str	r3, [r2, #8]
 8003b3a:	e032      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b52:	461a      	mov	r2, r3
 8003b54:	2320      	movs	r3, #32
 8003b56:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f004 faf0 	bl	8008144 <HAL_PCD_DataOutStageCallback>
 8003b64:	e01d      	b.n	8003ba2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d114      	bne.n	8003b96 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d108      	bne.n	8003b96 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2100      	movs	r1, #0
 8003b92:	f002 fbbb 	bl	800630c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f004 fad1 	bl	8008144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	4f54300a 	.word	0x4f54300a
 8003bb0:	4f54310a 	.word	0x4f54310a

08003bb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	333c      	adds	r3, #60	; 0x3c
 8003bcc:	3304      	adds	r3, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <PCD_EP_OutSetupPacket_int+0x88>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d90e      	bls.n	8003c08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	461a      	mov	r2, r3
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f004 fa89 	bl	8008120 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d90c      	bls.n	8003c30 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f002 fb6e 	bl	800630c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	4f54300a 	.word	0x4f54300a

08003c40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c5e:	883b      	ldrh	r3, [r7, #0]
 8003c60:	0419      	lsls	r1, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c6c:	e028      	b.n	8003cc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4413      	add	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e00d      	b.n	8003c9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3340      	adds	r3, #64	; 0x40
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d3ec      	bcc.n	8003c82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ca8:	883b      	ldrh	r3, [r7, #0]
 8003caa:	0418      	lsls	r0, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	4302      	orrs	r2, r0
 8003cb8:	3340      	adds	r3, #64	; 0x40
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e25b      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	4ba3      	ldr	r3, [pc, #652]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4ba0      	ldr	r3, [pc, #640]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b9d      	ldr	r3, [pc, #628]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b99      	ldr	r3, [pc, #612]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e236      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x74>
 8003d6e:	4b91      	ldr	r3, [pc, #580]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a90      	ldr	r2, [pc, #576]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x98>
 8003d86:	4b8b      	ldr	r3, [pc, #556]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a8a      	ldr	r2, [pc, #552]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a87      	ldr	r2, [pc, #540]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003da0:	4b84      	ldr	r3, [pc, #528]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a83      	ldr	r2, [pc, #524]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a80      	ldr	r2, [pc, #512]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fd48 	bl	8001854 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fd44 	bl	8001854 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e1fb      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b76      	ldr	r3, [pc, #472]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xc0>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd fd34 	bl	8001854 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fd fd30 	bl	8001854 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1e7      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b6c      	ldr	r3, [pc, #432]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe8>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	4b65      	ldr	r3, [pc, #404]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b5f      	ldr	r3, [pc, #380]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b5c      	ldr	r3, [pc, #368]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1bb      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b56      	ldr	r3, [pc, #344]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4952      	ldr	r1, [pc, #328]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b4f      	ldr	r3, [pc, #316]	; (8003fb8 <HAL_RCC_OscConfig+0x2b0>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fce9 	bl	8001854 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd fce5 	bl	8001854 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e19c      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b43      	ldr	r3, [pc, #268]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4940      	ldr	r1, [pc, #256]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_RCC_OscConfig+0x2b0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fcc8 	bl	8001854 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fcc4 	bl	8001854 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e17b      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d030      	beq.n	8003f54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_RCC_OscConfig+0x2b4>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fd fca8 	bl	8001854 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fd fca4 	bl	8001854 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e15b      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x200>
 8003f26:	e015      	b.n	8003f54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <HAL_RCC_OscConfig+0x2b4>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fc91 	bl	8001854 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fd fc8d 	bl	8001854 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e144      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a0 	beq.w	80040a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d121      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_RCC_OscConfig+0x2b8>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fd fc53 	bl	8001854 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCC_OscConfig+0x2ce>
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	42470000 	.word	0x42470000
 8003fbc:	42470e80 	.word	0x42470e80
 8003fc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc4:	f7fd fc46 	bl	8001854 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e0fd      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4b81      	ldr	r3, [pc, #516]	; (80041dc <HAL_RCC_OscConfig+0x4d4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2f0>
 8003fea:	4b7d      	ldr	r3, [pc, #500]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a7c      	ldr	r2, [pc, #496]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	e01c      	b.n	8004032 <HAL_RCC_OscConfig+0x32a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_OscConfig+0x312>
 8004000:	4b77      	ldr	r3, [pc, #476]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a76      	ldr	r2, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
 800400c:	4b74      	ldr	r3, [pc, #464]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a73      	ldr	r2, [pc, #460]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
 8004018:	e00b      	b.n	8004032 <HAL_RCC_OscConfig+0x32a>
 800401a:	4b71      	ldr	r3, [pc, #452]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a70      	ldr	r2, [pc, #448]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	4b6e      	ldr	r3, [pc, #440]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a6d      	ldr	r2, [pc, #436]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d015      	beq.n	8004066 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fd fc0b 	bl	8001854 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fd fc07 	bl	8001854 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0bc      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ee      	beq.n	8004042 <HAL_RCC_OscConfig+0x33a>
 8004064:	e014      	b.n	8004090 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fd fbf5 	bl	8001854 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd fbf1 	bl	8001854 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0a6      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004084:	4b56      	ldr	r3, [pc, #344]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ee      	bne.n	800406e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b52      	ldr	r3, [pc, #328]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a51      	ldr	r2, [pc, #324]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8092 	beq.w	80041d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ac:	4b4c      	ldr	r3, [pc, #304]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d05c      	beq.n	8004172 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d141      	bne.n	8004144 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b48      	ldr	r3, [pc, #288]	; (80041e4 <HAL_RCC_OscConfig+0x4dc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fd fbc5 	bl	8001854 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fd fbc1 	bl	8001854 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e078      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e0:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	019b      	lsls	r3, r3, #6
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	3b01      	subs	r3, #1
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	061b      	lsls	r3, r3, #24
 8004110:	4933      	ldr	r1, [pc, #204]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004116:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_RCC_OscConfig+0x4dc>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fd fb9a 	bl	8001854 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004124:	f7fd fb96 	bl	8001854 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e04d      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x41c>
 8004142:	e045      	b.n	80041d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_RCC_OscConfig+0x4dc>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fd fb83 	bl	8001854 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004152:	f7fd fb7f 	bl	8001854 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e036      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004164:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x44a>
 8004170:	e02e      	b.n	80041d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e029      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <HAL_RCC_OscConfig+0x4d8>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	429a      	cmp	r2, r3
 8004190:	d11c      	bne.n	80041cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d115      	bne.n	80041cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041a6:	4013      	ands	r3, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10d      	bne.n	80041cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d106      	bne.n	80041cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40007000 	.word	0x40007000
 80041e0:	40023800 	.word	0x40023800
 80041e4:	42470060 	.word	0x42470060

080041e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0cc      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041fc:	4b68      	ldr	r3, [pc, #416]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d90c      	bls.n	8004224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420a:	4b65      	ldr	r3, [pc, #404]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b63      	ldr	r3, [pc, #396]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0b8      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800423c:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a58      	ldr	r2, [pc, #352]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004254:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a52      	ldr	r2, [pc, #328]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800425e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004260:	4b50      	ldr	r3, [pc, #320]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	494d      	ldr	r1, [pc, #308]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d044      	beq.n	8004308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d107      	bne.n	8004296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d119      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e07f      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a6:	4b3f      	ldr	r3, [pc, #252]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e06f      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b6:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e067      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 0203 	bic.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	4934      	ldr	r1, [pc, #208]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d8:	f7fd fabc 	bl	8001854 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e0:	f7fd fab8 	bl	8001854 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e04f      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 020c 	and.w	r2, r3, #12
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	429a      	cmp	r2, r3
 8004306:	d1eb      	bne.n	80042e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d20c      	bcs.n	8004330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e032      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4916      	ldr	r1, [pc, #88]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	490e      	ldr	r1, [pc, #56]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800436e:	f000 f821 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8004372:	4601      	mov	r1, r0
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	5cd3      	ldrb	r3, [r2, r3]
 8004382:	fa21 f303 	lsr.w	r3, r1, r3
 8004386:	4a09      	ldr	r2, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fa1c 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023c00 	.word	0x40023c00
 80043a4:	40023800 	.word	0x40023800
 80043a8:	0800a7d4 	.word	0x0800a7d4
 80043ac:	20000000 	.word	0x20000000
 80043b0:	20000004 	.word	0x20000004

080043b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	2300      	movs	r3, #0
 80043c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ca:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d007      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x32>
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d008      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x38>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 80b4 	bne.w	8004548 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e0:	4b5e      	ldr	r3, [pc, #376]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043e2:	60bb      	str	r3, [r7, #8]
       break;
 80043e4:	e0b3      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e6:	4b5d      	ldr	r3, [pc, #372]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043e8:	60bb      	str	r3, [r7, #8]
      break;
 80043ea:	e0b0      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ec:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f6:	4b58      	ldr	r3, [pc, #352]	; (8004558 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d04a      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b55      	ldr	r3, [pc, #340]	; (8004558 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	f04f 0400 	mov.w	r4, #0
 800440c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	ea03 0501 	and.w	r5, r3, r1
 8004418:	ea04 0602 	and.w	r6, r4, r2
 800441c:	4629      	mov	r1, r5
 800441e:	4632      	mov	r2, r6
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	f04f 0400 	mov.w	r4, #0
 8004428:	0154      	lsls	r4, r2, #5
 800442a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800442e:	014b      	lsls	r3, r1, #5
 8004430:	4619      	mov	r1, r3
 8004432:	4622      	mov	r2, r4
 8004434:	1b49      	subs	r1, r1, r5
 8004436:	eb62 0206 	sbc.w	r2, r2, r6
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	f04f 0400 	mov.w	r4, #0
 8004442:	0194      	lsls	r4, r2, #6
 8004444:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004448:	018b      	lsls	r3, r1, #6
 800444a:	1a5b      	subs	r3, r3, r1
 800444c:	eb64 0402 	sbc.w	r4, r4, r2
 8004450:	f04f 0100 	mov.w	r1, #0
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	00e2      	lsls	r2, r4, #3
 800445a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800445e:	00d9      	lsls	r1, r3, #3
 8004460:	460b      	mov	r3, r1
 8004462:	4614      	mov	r4, r2
 8004464:	195b      	adds	r3, r3, r5
 8004466:	eb44 0406 	adc.w	r4, r4, r6
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	02a2      	lsls	r2, r4, #10
 8004474:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004478:	0299      	lsls	r1, r3, #10
 800447a:	460b      	mov	r3, r1
 800447c:	4614      	mov	r4, r2
 800447e:	4618      	mov	r0, r3
 8004480:	4621      	mov	r1, r4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f04f 0400 	mov.w	r4, #0
 8004488:	461a      	mov	r2, r3
 800448a:	4623      	mov	r3, r4
 800448c:	f7fc fb8c 	bl	8000ba8 <__aeabi_uldivmod>
 8004490:	4603      	mov	r3, r0
 8004492:	460c      	mov	r4, r1
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e049      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004498:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	f04f 0400 	mov.w	r4, #0
 80044a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	ea03 0501 	and.w	r5, r3, r1
 80044ae:	ea04 0602 	and.w	r6, r4, r2
 80044b2:	4629      	mov	r1, r5
 80044b4:	4632      	mov	r2, r6
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	f04f 0400 	mov.w	r4, #0
 80044be:	0154      	lsls	r4, r2, #5
 80044c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044c4:	014b      	lsls	r3, r1, #5
 80044c6:	4619      	mov	r1, r3
 80044c8:	4622      	mov	r2, r4
 80044ca:	1b49      	subs	r1, r1, r5
 80044cc:	eb62 0206 	sbc.w	r2, r2, r6
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	f04f 0400 	mov.w	r4, #0
 80044d8:	0194      	lsls	r4, r2, #6
 80044da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044de:	018b      	lsls	r3, r1, #6
 80044e0:	1a5b      	subs	r3, r3, r1
 80044e2:	eb64 0402 	sbc.w	r4, r4, r2
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	00e2      	lsls	r2, r4, #3
 80044f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044f4:	00d9      	lsls	r1, r3, #3
 80044f6:	460b      	mov	r3, r1
 80044f8:	4614      	mov	r4, r2
 80044fa:	195b      	adds	r3, r3, r5
 80044fc:	eb44 0406 	adc.w	r4, r4, r6
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	02a2      	lsls	r2, r4, #10
 800450a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800450e:	0299      	lsls	r1, r3, #10
 8004510:	460b      	mov	r3, r1
 8004512:	4614      	mov	r4, r2
 8004514:	4618      	mov	r0, r3
 8004516:	4621      	mov	r1, r4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f04f 0400 	mov.w	r4, #0
 800451e:	461a      	mov	r2, r3
 8004520:	4623      	mov	r3, r4
 8004522:	f7fc fb41 	bl	8000ba8 <__aeabi_uldivmod>
 8004526:	4603      	mov	r3, r0
 8004528:	460c      	mov	r4, r1
 800452a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	60bb      	str	r3, [r7, #8]
      break;
 8004546:	e002      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800454a:	60bb      	str	r3, [r7, #8]
      break;
 800454c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454e:	68bb      	ldr	r3, [r7, #8]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	00f42400 	.word	0x00f42400

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000000 	.word	0x20000000

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4601      	mov	r1, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4a03      	ldr	r2, [pc, #12]	; (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5cd3      	ldrb	r3, [r2, r3]
 8004590:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	0800a7e4 	.word	0x0800a7e4

080045a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e01d      	b.n	80045ee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc ffd8 	bl	800157c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 f90e 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fb48 	bl	8004ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a15      	ldr	r2, [pc, #84]	; (800466c <HAL_TIM_PWM_Start+0x74>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_TIM_PWM_Start+0x2c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a14      	ldr	r2, [pc, #80]	; (8004670 <HAL_TIM_PWM_Start+0x78>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <HAL_TIM_PWM_Start+0x30>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_TIM_PWM_Start+0x32>
 8004628:	2300      	movs	r3, #0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b06      	cmp	r3, #6
 800464e:	d007      	beq.n	8004660 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40010000 	.word	0x40010000
 8004670:	40010400 	.word	0x40010400

08004674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800468a:	2302      	movs	r3, #2
 800468c:	e0b4      	b.n	80047f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	f200 809f 	bhi.w	80047e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046e1 	.word	0x080046e1
 80046b0:	080047e5 	.word	0x080047e5
 80046b4:	080047e5 	.word	0x080047e5
 80046b8:	080047e5 	.word	0x080047e5
 80046bc:	08004721 	.word	0x08004721
 80046c0:	080047e5 	.word	0x080047e5
 80046c4:	080047e5 	.word	0x080047e5
 80046c8:	080047e5 	.word	0x080047e5
 80046cc:	08004763 	.word	0x08004763
 80046d0:	080047e5 	.word	0x080047e5
 80046d4:	080047e5 	.word	0x080047e5
 80046d8:	080047e5 	.word	0x080047e5
 80046dc:	080047a3 	.word	0x080047a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f92a 	bl	8004940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	619a      	str	r2, [r3, #24]
      break;
 800471e:	e062      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f97a 	bl	8004a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800473a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6999      	ldr	r1, [r3, #24]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	619a      	str	r2, [r3, #24]
      break;
 8004760:	e041      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f9cf 	bl	8004b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0208 	orr.w	r2, r2, #8
 800477c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0204 	bic.w	r2, r2, #4
 800478c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69d9      	ldr	r1, [r3, #28]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	61da      	str	r2, [r3, #28]
      break;
 80047a0:	e021      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fa23 	bl	8004bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69d9      	ldr	r1, [r3, #28]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	021a      	lsls	r2, r3, #8
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	61da      	str	r2, [r3, #28]
      break;
 80047e2:	e000      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80047e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a40      	ldr	r2, [pc, #256]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3d      	ldr	r2, [pc, #244]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3c      	ldr	r2, [pc, #240]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3a      	ldr	r2, [pc, #232]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d108      	bne.n	8004852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d02b      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d027      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d023      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01b      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d017      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <TIM_Base_SetConfig+0x128>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <TIM_Base_SetConfig+0x12c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <TIM_Base_SetConfig+0x130>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <TIM_Base_SetConfig+0x134>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a24      	ldr	r2, [pc, #144]	; (8004938 <TIM_Base_SetConfig+0x138>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a23      	ldr	r2, [pc, #140]	; (800493c <TIM_Base_SetConfig+0x13c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <TIM_Base_SetConfig+0x114>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <TIM_Base_SetConfig+0x124>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	615a      	str	r2, [r3, #20]
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40010000 	.word	0x40010000
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40010400 	.word	0x40010400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800
 8004934:	40001800 	.word	0x40001800
 8004938:	40001c00 	.word	0x40001c00
 800493c:	40002000 	.word	0x40002000

08004940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0303 	bic.w	r3, r3, #3
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 0302 	bic.w	r3, r3, #2
 8004988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a20      	ldr	r2, [pc, #128]	; (8004a18 <TIM_OC1_SetConfig+0xd8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC1_SetConfig+0x64>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <TIM_OC1_SetConfig+0xdc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10c      	bne.n	80049be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0308 	bic.w	r3, r3, #8
 80049aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0304 	bic.w	r3, r3, #4
 80049bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <TIM_OC1_SetConfig+0xd8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_OC1_SetConfig+0x8e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <TIM_OC1_SetConfig+0xdc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d111      	bne.n	80049f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40010400 	.word	0x40010400

08004a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0210 	bic.w	r2, r3, #16
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0320 	bic.w	r3, r3, #32
 8004a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a22      	ldr	r2, [pc, #136]	; (8004b04 <TIM_OC2_SetConfig+0xe4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_OC2_SetConfig+0x68>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <TIM_OC2_SetConfig+0xe8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d10d      	bne.n	8004aa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_OC2_SetConfig+0xe4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_OC2_SetConfig+0x94>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <TIM_OC2_SetConfig+0xe8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d113      	bne.n	8004adc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40010400 	.word	0x40010400

08004b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a21      	ldr	r2, [pc, #132]	; (8004bec <TIM_OC3_SetConfig+0xe0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_OC3_SetConfig+0x66>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <TIM_OC3_SetConfig+0xe4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10d      	bne.n	8004b8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <TIM_OC3_SetConfig+0xe0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_OC3_SetConfig+0x92>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <TIM_OC3_SetConfig+0xe4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d113      	bne.n	8004bc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	621a      	str	r2, [r3, #32]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40010400 	.word	0x40010400

08004bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	031b      	lsls	r3, r3, #12
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <TIM_OC4_SetConfig+0xa4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_OC4_SetConfig+0x68>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <TIM_OC4_SetConfig+0xa8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d109      	bne.n	8004c70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40010400 	.word	0x40010400

08004ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1a      	ldr	r2, [r3, #32]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1a      	ldr	r2, [r3, #32]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e05a      	b.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d022      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d01d      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d018      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d10c      	bne.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40010400 	.word	0x40010400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40001800 	.word	0x40001800

08004de4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004de4:	b084      	sub	sp, #16
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	f107 001c 	add.w	r0, r7, #28
 8004df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d122      	bne.n	8004e42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d105      	bne.n	8004e36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fac6 	bl	80063c8 <USB_CoreReset>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	73fb      	strb	r3, [r7, #15]
 8004e40:	e01a      	b.n	8004e78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f001 faba 	bl	80063c8 <USB_CoreReset>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
 8004e6a:	e005      	b.n	8004e78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d10b      	bne.n	8004e96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f043 0206 	orr.w	r2, r3, #6
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ea2:	b004      	add	sp, #16
 8004ea4:	4770      	bx	lr
	...

08004ea8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d165      	bne.n	8004f88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a41      	ldr	r2, [pc, #260]	; (8004fc4 <USB_SetTurnaroundTime+0x11c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d906      	bls.n	8004ed2 <USB_SetTurnaroundTime+0x2a>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	; (8004fc8 <USB_SetTurnaroundTime+0x120>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d802      	bhi.n	8004ed2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ecc:	230f      	movs	r3, #15
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e062      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a3c      	ldr	r2, [pc, #240]	; (8004fc8 <USB_SetTurnaroundTime+0x120>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d906      	bls.n	8004ee8 <USB_SetTurnaroundTime+0x40>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a3b      	ldr	r2, [pc, #236]	; (8004fcc <USB_SetTurnaroundTime+0x124>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d802      	bhi.n	8004ee8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ee2:	230e      	movs	r3, #14
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e057      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a38      	ldr	r2, [pc, #224]	; (8004fcc <USB_SetTurnaroundTime+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d906      	bls.n	8004efe <USB_SetTurnaroundTime+0x56>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a37      	ldr	r2, [pc, #220]	; (8004fd0 <USB_SetTurnaroundTime+0x128>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d802      	bhi.n	8004efe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ef8:	230d      	movs	r3, #13
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e04c      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4a33      	ldr	r2, [pc, #204]	; (8004fd0 <USB_SetTurnaroundTime+0x128>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d906      	bls.n	8004f14 <USB_SetTurnaroundTime+0x6c>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4a32      	ldr	r2, [pc, #200]	; (8004fd4 <USB_SetTurnaroundTime+0x12c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d802      	bhi.n	8004f14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f0e:	230c      	movs	r3, #12
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e041      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4a2f      	ldr	r2, [pc, #188]	; (8004fd4 <USB_SetTurnaroundTime+0x12c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d906      	bls.n	8004f2a <USB_SetTurnaroundTime+0x82>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a2e      	ldr	r2, [pc, #184]	; (8004fd8 <USB_SetTurnaroundTime+0x130>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d802      	bhi.n	8004f2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f24:	230b      	movs	r3, #11
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e036      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <USB_SetTurnaroundTime+0x130>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d906      	bls.n	8004f40 <USB_SetTurnaroundTime+0x98>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4a29      	ldr	r2, [pc, #164]	; (8004fdc <USB_SetTurnaroundTime+0x134>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d802      	bhi.n	8004f40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e02b      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4a26      	ldr	r2, [pc, #152]	; (8004fdc <USB_SetTurnaroundTime+0x134>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d906      	bls.n	8004f56 <USB_SetTurnaroundTime+0xae>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <USB_SetTurnaroundTime+0x138>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d802      	bhi.n	8004f56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f50:	2309      	movs	r3, #9
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e020      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <USB_SetTurnaroundTime+0x138>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d906      	bls.n	8004f6c <USB_SetTurnaroundTime+0xc4>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <USB_SetTurnaroundTime+0x13c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d802      	bhi.n	8004f6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f66:	2308      	movs	r3, #8
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	e015      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <USB_SetTurnaroundTime+0x13c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d906      	bls.n	8004f82 <USB_SetTurnaroundTime+0xda>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <USB_SetTurnaroundTime+0x140>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d802      	bhi.n	8004f82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f7c:	2307      	movs	r3, #7
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	e00a      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f82:	2306      	movs	r3, #6
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e007      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f8e:	2309      	movs	r3, #9
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	e001      	b.n	8004f98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f94:	2309      	movs	r3, #9
 8004f96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	029b      	lsls	r3, r3, #10
 8004fac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	00d8acbf 	.word	0x00d8acbf
 8004fc8:	00e4e1bf 	.word	0x00e4e1bf
 8004fcc:	00f423ff 	.word	0x00f423ff
 8004fd0:	0106737f 	.word	0x0106737f
 8004fd4:	011a499f 	.word	0x011a499f
 8004fd8:	01312cff 	.word	0x01312cff
 8004fdc:	014ca43f 	.word	0x014ca43f
 8004fe0:	016e35ff 	.word	0x016e35ff
 8004fe4:	01a6ab1f 	.word	0x01a6ab1f
 8004fe8:	01e847ff 	.word	0x01e847ff

08004fec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f043 0201 	orr.w	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 0201 	bic.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d106      	bne.n	800505c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	e00b      	b.n	8005074 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	e001      	b.n	8005074 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e003      	b.n	800507c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005074:	2032      	movs	r0, #50	; 0x32
 8005076:	f7fc fbf9 	bl	800186c <HAL_Delay>

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005084:	b084      	sub	sp, #16
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	e009      	b.n	80050b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	3340      	adds	r3, #64	; 0x40
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	2200      	movs	r2, #0
 80050b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3301      	adds	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b0e      	cmp	r3, #14
 80050bc:	d9f2      	bls.n	80050a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11c      	bne.n	80050fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d2:	f043 0302 	orr.w	r3, r3, #2
 80050d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
 80050fc:	e00b      	b.n	8005116 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800511c:	461a      	mov	r2, r3
 800511e:	2300      	movs	r3, #0
 8005120:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005128:	4619      	mov	r1, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005130:	461a      	mov	r2, r3
 8005132:	680b      	ldr	r3, [r1, #0]
 8005134:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10c      	bne.n	8005156 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005142:	2100      	movs	r1, #0
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f949 	bl	80053dc <USB_SetDevSpeed>
 800514a:	e008      	b.n	800515e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800514c:	2101      	movs	r1, #1
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f944 	bl	80053dc <USB_SetDevSpeed>
 8005154:	e003      	b.n	800515e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005156:	2103      	movs	r1, #3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f93f 	bl	80053dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800515e:	2110      	movs	r1, #16
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8f3 	bl	800534c <USB_FlushTxFifo>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f911 	bl	8005398 <USB_FlushRxFifo>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	e043      	b.n	8005232 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c0:	d118      	bne.n	80051f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	461a      	mov	r2, r3
 80051d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	e013      	b.n	8005206 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	461a      	mov	r2, r3
 80051ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e008      	b.n	8005206 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	461a      	mov	r2, r3
 8005202:	2300      	movs	r3, #0
 8005204:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	461a      	mov	r2, r3
 8005214:	2300      	movs	r3, #0
 8005216:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005224:	461a      	mov	r2, r3
 8005226:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800522a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3301      	adds	r3, #1
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	d3b7      	bcc.n	80051aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	e043      	b.n	80052c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005256:	d118      	bne.n	800528a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e013      	b.n	800529c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	461a      	mov	r2, r3
 8005282:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e008      	b.n	800529c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	461a      	mov	r2, r3
 8005298:	2300      	movs	r3, #0
 800529a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	461a      	mov	r2, r3
 80052aa:	2300      	movs	r3, #0
 80052ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	461a      	mov	r2, r3
 80052bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	3301      	adds	r3, #1
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d3b7      	bcc.n	8005240 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d105      	bne.n	8005304 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f043 0210 	orr.w	r2, r3, #16
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <USB_DevInit+0x2c4>)
 800530a:	4313      	orrs	r3, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f043 0208 	orr.w	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d107      	bne.n	8005338 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005338:	7dfb      	ldrb	r3, [r7, #23]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005344:	b004      	add	sp, #16
 8005346:	4770      	bx	lr
 8005348:	803c3800 	.word	0x803c3800

0800534c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	019b      	lsls	r3, r3, #6
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <USB_FlushTxFifo+0x48>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e006      	b.n	8005386 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b20      	cmp	r3, #32
 8005382:	d0f0      	beq.n	8005366 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	00030d40 	.word	0x00030d40

08005398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2210      	movs	r2, #16
 80053a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <USB_FlushRxFifo+0x40>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e006      	b.n	80053ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d0f0      	beq.n	80053aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	00030d40 	.word	0x00030d40

080053dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0306 	and.w	r3, r3, #6
 8005426:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]
 8005432:	e00a      	b.n	800544a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d002      	beq.n	8005440 <USB_GetDevSpeed+0x32>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b06      	cmp	r3, #6
 800543e:	d102      	bne.n	8005446 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005440:	2302      	movs	r3, #2
 8005442:	75fb      	strb	r3, [r7, #23]
 8005444:	e001      	b.n	800544a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005446:	230f      	movs	r3, #15
 8005448:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d13a      	bne.n	80054ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	b29b      	uxth	r3, r3
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005492:	4313      	orrs	r3, r2
 8005494:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d155      	bne.n	8005558 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	78db      	ldrb	r3, [r3, #3]
 80054c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	059b      	lsls	r3, r3, #22
 80054ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054d0:	4313      	orrs	r3, r2
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e036      	b.n	8005558 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	2101      	movs	r1, #1
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	68f9      	ldr	r1, [r7, #12]
 8005504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005508:	4313      	orrs	r3, r2
 800550a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d11a      	bne.n	8005558 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	78db      	ldrb	r3, [r3, #3]
 800553c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800553e:	430b      	orrs	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005556:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d161      	bne.n	8005648 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559a:	d11f      	bne.n	80055dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055fc:	4013      	ands	r3, r2
 80055fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	2101      	movs	r1, #1
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	b29b      	uxth	r3, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005620:	4013      	ands	r3, r2
 8005622:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	0159      	lsls	r1, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	440b      	add	r3, r1
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	4619      	mov	r1, r3
 8005640:	4b35      	ldr	r3, [pc, #212]	; (8005718 <USB_DeactivateEndpoint+0x1b0>)
 8005642:	4013      	ands	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
 8005646:	e060      	b.n	800570a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800565a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800565e:	d11f      	bne.n	80056a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800567e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	2101      	movs	r1, #1
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	43db      	mvns	r3, r3
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c0:	4013      	ands	r3, r2
 80056c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	041b      	lsls	r3, r3, #16
 80056dc:	43db      	mvns	r3, r3
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e4:	4013      	ands	r3, r2
 80056e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	0159      	lsls	r1, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	440b      	add	r3, r1
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	4619      	mov	r1, r3
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <USB_DeactivateEndpoint+0x1b4>)
 8005706:	4013      	ands	r3, r2
 8005708:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	ec337800 	.word	0xec337800
 800571c:	eff37800 	.word	0xeff37800

08005720 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	f040 815c 	bne.w	80059fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d132      	bne.n	80057b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005764:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005768:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800576c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	440a      	add	r2, r1
 8005784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800578c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a8:	0cdb      	lsrs	r3, r3, #19
 80057aa:	04db      	lsls	r3, r3, #19
 80057ac:	6113      	str	r3, [r2, #16]
 80057ae:	e074      	b.n	800589a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ca:	0cdb      	lsrs	r3, r3, #19
 80057cc:	04db      	lsls	r3, r3, #19
 80057ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6959      	ldr	r1, [r3, #20]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	440b      	add	r3, r1
 800580c:	1e59      	subs	r1, r3, #1
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	fbb1 f3f3 	udiv	r3, r1, r3
 8005816:	04d9      	lsls	r1, r3, #19
 8005818:	4b9d      	ldr	r3, [pc, #628]	; (8005a90 <USB_EPStartXfer+0x370>)
 800581a:	400b      	ands	r3, r1
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	0148      	lsls	r0, r1, #5
 8005820:	69f9      	ldr	r1, [r7, #28]
 8005822:	4401      	add	r1, r0
 8005824:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005828:	4313      	orrs	r3, r2
 800582a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005842:	69b9      	ldr	r1, [r7, #24]
 8005844:	0148      	lsls	r0, r1, #5
 8005846:	69f9      	ldr	r1, [r7, #28]
 8005848:	4401      	add	r1, r0
 800584a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800584e:	4313      	orrs	r3, r2
 8005850:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	78db      	ldrb	r3, [r3, #3]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d11f      	bne.n	800589a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005874:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005878:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005898:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d14b      	bne.n	8005938 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	461a      	mov	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	78db      	ldrb	r3, [r3, #3]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d128      	bne.n	8005916 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d110      	bne.n	80058f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	e00f      	b.n	8005916 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005914:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005930:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e12f      	b.n	8005b98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005956:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	78db      	ldrb	r3, [r3, #3]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d015      	beq.n	800598c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8117 	beq.w	8005b98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	2101      	movs	r1, #1
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	69f9      	ldr	r1, [r7, #28]
 8005982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005986:	4313      	orrs	r3, r2
 8005988:	634b      	str	r3, [r1, #52]	; 0x34
 800598a:	e105      	b.n	8005b98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e00f      	b.n	80059de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68d9      	ldr	r1, [r3, #12]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	b298      	uxth	r0, r3
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	4603      	mov	r3, r0
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fa2b 	bl	8005e4e <USB_WritePacket>
 80059f8:	e0ce      	b.n	8005b98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a14:	0cdb      	lsrs	r3, r3, #19
 8005a16:	04db      	lsls	r3, r3, #19
 8005a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d126      	bne.n	8005a94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	0148      	lsls	r0, r1, #5
 8005a60:	69f9      	ldr	r1, [r7, #28]
 8005a62:	4401      	add	r1, r0
 8005a64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a8a:	6113      	str	r3, [r2, #16]
 8005a8c:	e036      	b.n	8005afc <USB_EPStartXfer+0x3dc>
 8005a8e:	bf00      	nop
 8005a90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	1e5a      	subs	r2, r3, #1
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	8afb      	ldrh	r3, [r7, #22]
 8005aba:	04d9      	lsls	r1, r3, #19
 8005abc:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <USB_EPStartXfer+0x484>)
 8005abe:	400b      	ands	r3, r1
 8005ac0:	69b9      	ldr	r1, [r7, #24]
 8005ac2:	0148      	lsls	r0, r1, #5
 8005ac4:	69f9      	ldr	r1, [r7, #28]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005acc:	4313      	orrs	r3, r2
 8005ace:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	8af9      	ldrh	r1, [r7, #22]
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aec:	69b9      	ldr	r1, [r7, #24]
 8005aee:	0148      	lsls	r0, r1, #5
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	4401      	add	r1, r0
 8005af4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005af8:	4313      	orrs	r3, r2
 8005afa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d10d      	bne.n	8005b1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68d9      	ldr	r1, [r3, #12]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	460a      	mov	r2, r1
 8005b1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	78db      	ldrb	r3, [r3, #3]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d128      	bne.n	8005b78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d110      	bne.n	8005b58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e00f      	b.n	8005b78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	1ff80000 	.word	0x1ff80000

08005ba8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f040 80cd 	bne.w	8005d64 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d132      	bne.n	8005c38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c30:	0cdb      	lsrs	r3, r3, #19
 8005c32:	04db      	lsls	r3, r3, #19
 8005c34:	6113      	str	r3, [r2, #16]
 8005c36:	e04e      	b.n	8005cd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c52:	0cdb      	lsrs	r3, r3, #19
 8005c54:	04db      	lsls	r3, r3, #19
 8005c56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d903      	bls.n	8005c90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc6:	6939      	ldr	r1, [r7, #16]
 8005cc8:	0148      	lsls	r0, r1, #5
 8005cca:	6979      	ldr	r1, [r7, #20]
 8005ccc:	4401      	add	r1, r0
 8005cce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11e      	bne.n	8005d1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d009      	beq.n	8005cf8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	e092      	b.n	8005e40 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d07e      	beq.n	8005e40 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	2101      	movs	r1, #1
 8005d54:	fa01 f303 	lsl.w	r3, r1, r3
 8005d58:	6979      	ldr	r1, [r7, #20]
 8005d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	634b      	str	r3, [r1, #52]	; 0x34
 8005d62:	e06d      	b.n	8005e40 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7e:	0cdb      	lsrs	r3, r3, #19
 8005d80:	04db      	lsls	r3, r3, #19
 8005d82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dee:	6939      	ldr	r1, [r7, #16]
 8005df0:	0148      	lsls	r0, r1, #5
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	4401      	add	r1, r0
 8005df6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10d      	bne.n	8005e20 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	68d9      	ldr	r1, [r3, #12]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	460a      	mov	r2, r1
 8005e1e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b089      	sub	sp, #36	; 0x24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	4611      	mov	r1, r2
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	71fb      	strb	r3, [r7, #7]
 8005e60:	4613      	mov	r3, r2
 8005e62:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d11a      	bne.n	8005eaa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e74:	88bb      	ldrh	r3, [r7, #4]
 8005e76:	3303      	adds	r3, #3
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e00f      	b.n	8005ea2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	031a      	lsls	r2, r3, #12
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8e:	461a      	mov	r2, r3
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d3eb      	bcc.n	8005e82 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3724      	adds	r7, #36	; 0x24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	; 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	3303      	adds	r3, #3
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e00b      	b.n	8005ef4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	3304      	adds	r3, #4
 8005eec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d3ef      	bcc.n	8005edc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005efc:	69fb      	ldr	r3, [r7, #28]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3724      	adds	r7, #36	; 0x24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d12c      	bne.n	8005f80 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	db12      	blt.n	8005f5e <USB_EPSetStall+0x54>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00f      	beq.n	8005f5e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f5c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	e02b      	b.n	8005fd8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	db12      	blt.n	8005fb8 <USB_EPSetStall+0xae>
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00f      	beq.n	8005fb8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fb6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d128      	bne.n	8006054 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006020:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	78db      	ldrb	r3, [r3, #3]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d003      	beq.n	8006032 <USB_EPClearStall+0x4c>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	78db      	ldrb	r3, [r3, #3]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d138      	bne.n	80060a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e027      	b.n	80060a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	78db      	ldrb	r3, [r3, #3]
 8006078:	2b03      	cmp	r3, #3
 800607a:	d003      	beq.n	8006084 <USB_EPClearStall+0x9e>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	78db      	ldrb	r3, [r3, #3]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d10f      	bne.n	80060a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612c:	f023 0302 	bic.w	r3, r3, #2
 8006130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800616e:	f043 0302 	orr.w	r3, r3, #2
 8006172:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4013      	ands	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800619a:	68fb      	ldr	r3, [r7, #12]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	0c1b      	lsrs	r3, r3, #16
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4013      	ands	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	b29b      	uxth	r3, r3
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800623e:	68bb      	ldr	r3, [r7, #8]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
 800627c:	01db      	lsls	r3, r3, #7
 800627e:	b2db      	uxtb	r3, r3
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4013      	ands	r3, r2
 8006298:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800629a:	68bb      	ldr	r3, [r7, #8]
}
 800629c:	4618      	mov	r0, r3
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f003 0301 	and.w	r3, r3, #1
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062e2:	f023 0307 	bic.w	r3, r3, #7
 80062e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	460b      	mov	r3, r1
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	333c      	adds	r3, #60	; 0x3c
 8006322:	3304      	adds	r3, #4
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4a26      	ldr	r2, [pc, #152]	; (80063c4 <USB_EP0_OutStart+0xb8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d90a      	bls.n	8006346 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006340:	d101      	bne.n	8006346 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	e037      	b.n	80063b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	461a      	mov	r2, r3
 800634e:	2300      	movs	r3, #0
 8006350:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006374:	f043 0318 	orr.w	r3, r3, #24
 8006378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006388:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800638c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800638e:	7afb      	ldrb	r3, [r7, #11]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d10f      	bne.n	80063b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80063b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	4f54300a 	.word	0x4f54300a

080063c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4a13      	ldr	r2, [pc, #76]	; (800642c <USB_CoreReset+0x64>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e01b      	b.n	800641e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	daf2      	bge.n	80063d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f043 0201 	orr.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3301      	adds	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <USB_CoreReset+0x64>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d901      	bls.n	8006410 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e006      	b.n	800641e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b01      	cmp	r3, #1
 800641a:	d0f0      	beq.n	80063fe <USB_CoreReset+0x36>

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	00030d40 	.word	0x00030d40

08006430 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800643c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006440:	f002 f940 	bl	80086c4 <malloc>
 8006444:	4603      	mov	r3, r0
 8006446:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d105      	bne.n	800645a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006456:	2302      	movs	r3, #2
 8006458:	e066      	b.n	8006528 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7c1b      	ldrb	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d119      	bne.n	800649e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800646a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800646e:	2202      	movs	r2, #2
 8006470:	2181      	movs	r1, #129	; 0x81
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 ffad 	bl	80083d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800647e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006482:	2202      	movs	r2, #2
 8006484:	2101      	movs	r1, #1
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 ffa3 	bl	80083d2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2210      	movs	r2, #16
 8006498:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800649c:	e016      	b.n	80064cc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800649e:	2340      	movs	r3, #64	; 0x40
 80064a0:	2202      	movs	r2, #2
 80064a2:	2181      	movs	r1, #129	; 0x81
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 ff94 	bl	80083d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064b0:	2340      	movs	r3, #64	; 0x40
 80064b2:	2202      	movs	r2, #2
 80064b4:	2101      	movs	r1, #1
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 ff8b 	bl	80083d2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2210      	movs	r2, #16
 80064c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064cc:	2308      	movs	r3, #8
 80064ce:	2203      	movs	r2, #3
 80064d0:	2182      	movs	r1, #130	; 0x82
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 ff7d 	bl	80083d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	7c1b      	ldrb	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d109      	bne.n	8006516 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800650c:	2101      	movs	r1, #1
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f002 f84e 	bl	80085b0 <USBD_LL_PrepareReceive>
 8006514:	e007      	b.n	8006526 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800651c:	2340      	movs	r3, #64	; 0x40
 800651e:	2101      	movs	r1, #1
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f002 f845 	bl	80085b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006540:	2181      	movs	r1, #129	; 0x81
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 ff6b 	bl	800841e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800654e:	2101      	movs	r1, #1
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 ff64 	bl	800841e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800655e:	2182      	movs	r1, #130	; 0x82
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 ff5c 	bl	800841e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00e      	beq.n	800659e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006590:	4618      	mov	r0, r3
 8006592:	f002 f89f 	bl	80086d4 <free>
    pdev->pClassData = NULL;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800659e:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d03a      	beq.n	8006648 <USBD_CDC_Setup+0xa0>
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	f040 8097 	bne.w	8006706 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	88db      	ldrh	r3, [r3, #6]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d029      	beq.n	8006634 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b25b      	sxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	da11      	bge.n	800660e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80065f6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	88d2      	ldrh	r2, [r2, #6]
 80065fc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80065fe:	6939      	ldr	r1, [r7, #16]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	88db      	ldrh	r3, [r3, #6]
 8006604:	461a      	mov	r2, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fa9d 	bl	8007b46 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800660c:	e082      	b.n	8006714 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	785a      	ldrb	r2, [r3, #1]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	88db      	ldrh	r3, [r3, #6]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006624:	6939      	ldr	r1, [r7, #16]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	88db      	ldrh	r3, [r3, #6]
 800662a:	461a      	mov	r2, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 fab6 	bl	8007b9e <USBD_CtlPrepareRx>
    break;
 8006632:	e06f      	b.n	8006714 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	7850      	ldrb	r0, [r2, #1]
 8006640:	2200      	movs	r2, #0
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	4798      	blx	r3
    break;
 8006646:	e065      	b.n	8006714 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b0b      	cmp	r3, #11
 800664e:	d84f      	bhi.n	80066f0 <USBD_CDC_Setup+0x148>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <USBD_CDC_Setup+0xb0>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006689 	.word	0x08006689
 800665c:	080066ff 	.word	0x080066ff
 8006660:	080066f1 	.word	0x080066f1
 8006664:	080066f1 	.word	0x080066f1
 8006668:	080066f1 	.word	0x080066f1
 800666c:	080066f1 	.word	0x080066f1
 8006670:	080066f1 	.word	0x080066f1
 8006674:	080066f1 	.word	0x080066f1
 8006678:	080066f1 	.word	0x080066f1
 800667c:	080066f1 	.word	0x080066f1
 8006680:	080066b1 	.word	0x080066b1
 8006684:	080066d9 	.word	0x080066d9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668e:	2b03      	cmp	r3, #3
 8006690:	d107      	bne.n	80066a2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006692:	f107 030c 	add.w	r3, r7, #12
 8006696:	2202      	movs	r2, #2
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 fa53 	bl	8007b46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80066a0:	e030      	b.n	8006704 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f9dd 	bl	8007a64 <USBD_CtlError>
        ret = USBD_FAIL;
 80066aa:	2303      	movs	r3, #3
 80066ac:	75fb      	strb	r3, [r7, #23]
      break;
 80066ae:	e029      	b.n	8006704 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d107      	bne.n	80066ca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066ba:	f107 030f 	add.w	r3, r7, #15
 80066be:	2201      	movs	r2, #1
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fa3f 	bl	8007b46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80066c8:	e01c      	b.n	8006704 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 f9c9 	bl	8007a64 <USBD_CtlError>
        ret = USBD_FAIL;
 80066d2:	2303      	movs	r3, #3
 80066d4:	75fb      	strb	r3, [r7, #23]
      break;
 80066d6:	e015      	b.n	8006704 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d00f      	beq.n	8006702 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 f9bd 	bl	8007a64 <USBD_CtlError>
        ret = USBD_FAIL;
 80066ea:	2303      	movs	r3, #3
 80066ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80066ee:	e008      	b.n	8006702 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 f9b6 	bl	8007a64 <USBD_CtlError>
      ret = USBD_FAIL;
 80066f8:	2303      	movs	r3, #3
 80066fa:	75fb      	strb	r3, [r7, #23]
      break;
 80066fc:	e002      	b.n	8006704 <USBD_CDC_Setup+0x15c>
      break;
 80066fe:	bf00      	nop
 8006700:	e008      	b.n	8006714 <USBD_CDC_Setup+0x16c>
      break;
 8006702:	bf00      	nop
    }
    break;
 8006704:	e006      	b.n	8006714 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 f9ab 	bl	8007a64 <USBD_CtlError>
    ret = USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	75fb      	strb	r3, [r7, #23]
    break;
 8006712:	bf00      	nop
  }

  return (uint8_t)ret;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop

08006720 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006732:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800673e:	2303      	movs	r3, #3
 8006740:	e049      	b.n	80067d6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006748:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3318      	adds	r3, #24
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d029      	beq.n	80067b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3318      	adds	r3, #24
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	78f9      	ldrb	r1, [r7, #3]
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	460b      	mov	r3, r1
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	1a5b      	subs	r3, r3, r1
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4403      	add	r3, r0
 8006780:	3344      	adds	r3, #68	; 0x44
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	fbb2 f1f3 	udiv	r1, r2, r3
 8006788:	fb03 f301 	mul.w	r3, r3, r1
 800678c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800678e:	2b00      	cmp	r3, #0
 8006790:	d110      	bne.n	80067b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006792:	78fa      	ldrb	r2, [r7, #3]
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	3318      	adds	r3, #24
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067a6:	78f9      	ldrb	r1, [r7, #3]
 80067a8:	2300      	movs	r3, #0
 80067aa:	2200      	movs	r2, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fede 	bl	800856e <USBD_LL_Transmit>
 80067b2:	e00f      	b.n	80067d4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e015      	b.n	800682c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 fef4 	bl	80085f2 <USBD_LL_GetRxDataSize>
 800680a:	4602      	mov	r2, r0
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006826:	4611      	mov	r1, r2
 8006828:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006842:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d015      	beq.n	800687a <USBD_CDC_EP0_RxReady+0x46>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006854:	2bff      	cmp	r3, #255	; 0xff
 8006856:	d010      	beq.n	800687a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006866:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800686e:	b292      	uxth	r2, r2
 8006870:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2243      	movs	r2, #67	; 0x43
 8006890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006892:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000094 	.word	0x20000094

080068a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2243      	movs	r2, #67	; 0x43
 80068b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80068b2:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20000050 	.word	0x20000050

080068c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2243      	movs	r2, #67	; 0x43
 80068d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80068d2:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	200000d8 	.word	0x200000d8

080068e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	220a      	movs	r2, #10
 80068f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80068f2:	4b03      	ldr	r3, [pc, #12]	; (8006900 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	2000000c 	.word	0x2000000c

08006904 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	e004      	b.n	8006922 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800692e:	b480      	push	{r7}
 8006930:	b087      	sub	sp, #28
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006940:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006970:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006996:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006998:	2301      	movs	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e01a      	b.n	80069e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d114      	bne.n	80069de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069d2:	2181      	movs	r1, #129	; 0x81
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fdca 	bl	800856e <USBD_LL_Transmit>

    ret = USBD_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e016      	b.n	8006a34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7c1b      	ldrb	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a18:	2101      	movs	r1, #1
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fdc8 	bl	80085b0 <USBD_LL_PrepareReceive>
 8006a20:	e007      	b.n	8006a32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a28:	2340      	movs	r3, #64	; 0x40
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fdbf 	bl	80085b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e025      	b.n	8006aa0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	79fa      	ldrb	r2, [r7, #7]
 8006a92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f001 fc35 	bl	8008304 <USBD_LL_Init>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e010      	b.n	8006ae2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad0:	f107 020e 	add.w	r2, r7, #14
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
 8006ad8:	4602      	mov	r2, r0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fc52 	bl	800839c <USBD_LL_Start>
 8006af8:	4603      	mov	r3, r0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b24:	2303      	movs	r3, #3
 8006b26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	4611      	mov	r1, r2
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4798      	blx	r3
  }

  return USBD_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 ff2c 	bl	80079f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d00e      	beq.n	8006bda <USBD_LL_SetupStage+0x5a>
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d302      	bcc.n	8006bc6 <USBD_LL_SetupStage+0x46>
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d014      	beq.n	8006bee <USBD_LL_SetupStage+0x6e>
 8006bc4:	e01d      	b.n	8006c02 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa18 	bl	8007004 <USBD_StdDevReq>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd8:	e020      	b.n	8006c1c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa7c 	bl	80070e0 <USBD_StdItfReq>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
      break;
 8006bec:	e016      	b.n	8006c1c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fab8 	bl	800716c <USBD_StdEPReq>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006c00:	e00c      	b.n	8006c1c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fc23 	bl	800845c <USBD_LL_StallEP>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1a:	bf00      	nop
  }

  return ret;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b086      	sub	sp, #24
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	607a      	str	r2, [r7, #4]
 8006c32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d137      	bne.n	8006caa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d14a      	bne.n	8006ce2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d913      	bls.n	8006c80 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	bf28      	it	cs
 8006c72:	4613      	movcs	r3, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 ffad 	bl	8007bd8 <USBD_CtlContinueRx>
 8006c7e:	e030      	b.n	8006ce2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d105      	bne.n	8006ca2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 ffa9 	bl	8007bfa <USBD_CtlSendStatus>
 8006ca8:	e01b      	b.n	8006ce2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d013      	beq.n	8006cde <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d10e      	bne.n	8006cde <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	7afa      	ldrb	r2, [r7, #11]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	4798      	blx	r3
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	e002      	b.n	8006ce4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e000      	b.n	8006ce4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006cfa:	7afb      	ldrb	r3, [r7, #11]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d16a      	bne.n	8006dd6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3314      	adds	r3, #20
 8006d04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d155      	bne.n	8006dbc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d914      	bls.n	8006d46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	1ad2      	subs	r2, r2, r3
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 ff22 	bl	8007b7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f001 fc36 	bl	80085b0 <USBD_LL_PrepareReceive>
 8006d44:	e03a      	b.n	8006dbc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d11c      	bne.n	8006d8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d316      	bcc.n	8006d8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d20f      	bcs.n	8006d8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2100      	movs	r1, #0
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 ff03 	bl	8007b7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2200      	movs	r2, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f001 fc13 	bl	80085b0 <USBD_LL_PrepareReceive>
 8006d8a:	e017      	b.n	8006dbc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d105      	bne.n	8006dae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dae:	2180      	movs	r1, #128	; 0x80
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f001 fb53 	bl	800845c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 ff32 	bl	8007c20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d123      	bne.n	8006e0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff fe9b 	bl	8006b02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006dd4:	e01b      	b.n	8006e0e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d013      	beq.n	8006e0a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d10e      	bne.n	8006e0a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	7afa      	ldrb	r2, [r7, #11]
 8006df6:	4611      	mov	r1, r2
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	4798      	blx	r3
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	e002      	b.n	8006e10 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e000      	b.n	8006e10 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d009      	beq.n	8006e5c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6852      	ldr	r2, [r2, #4]
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	4611      	mov	r1, r2
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e5c:	2340      	movs	r3, #64	; 0x40
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fab5 	bl	80083d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2240      	movs	r2, #64	; 0x40
 8006e74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e78:	2340      	movs	r3, #64	; 0x40
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 faa7 	bl	80083d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2240      	movs	r2, #64	; 0x40
 8006e8e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d105      	bne.n	8006f02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d10b      	bne.n	8006f3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d009      	beq.n	8006fbc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6852      	ldr	r2, [r2, #4]
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
  }

  return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b087      	sub	sp, #28
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fe4:	8a3b      	ldrh	r3, [r7, #16]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	b21a      	sxth	r2, r3
 8006fea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	b21b      	sxth	r3, r3
 8006ff2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ff4:	89fb      	ldrh	r3, [r7, #14]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800701a:	2b20      	cmp	r3, #32
 800701c:	d004      	beq.n	8007028 <USBD_StdDevReq+0x24>
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d002      	beq.n	8007028 <USBD_StdDevReq+0x24>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <USBD_StdDevReq+0x38>
 8007026:	e050      	b.n	80070ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
    break;
 800703a:	e04b      	b.n	80070d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b09      	cmp	r3, #9
 8007042:	d83c      	bhi.n	80070be <USBD_StdDevReq+0xba>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <USBD_StdDevReq+0x48>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	080070a1 	.word	0x080070a1
 8007050:	080070b5 	.word	0x080070b5
 8007054:	080070bf 	.word	0x080070bf
 8007058:	080070ab 	.word	0x080070ab
 800705c:	080070bf 	.word	0x080070bf
 8007060:	0800707f 	.word	0x0800707f
 8007064:	08007075 	.word	0x08007075
 8007068:	080070bf 	.word	0x080070bf
 800706c:	08007097 	.word	0x08007097
 8007070:	08007089 	.word	0x08007089
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9ce 	bl	8007418 <USBD_GetDescriptor>
      break;
 800707c:	e024      	b.n	80070c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fb33 	bl	80076ec <USBD_SetAddress>
      break;
 8007086:	e01f      	b.n	80070c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fb70 	bl	8007770 <USBD_SetConfig>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
      break;
 8007094:	e018      	b.n	80070c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc0d 	bl	80078b8 <USBD_GetConfig>
      break;
 800709e:	e013      	b.n	80070c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fc3c 	bl	8007920 <USBD_GetStatus>
      break;
 80070a8:	e00e      	b.n	80070c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fc6a 	bl	8007986 <USBD_SetFeature>
      break;
 80070b2:	e009      	b.n	80070c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fc79 	bl	80079ae <USBD_ClrFeature>
      break;
 80070bc:	e004      	b.n	80070c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fccf 	bl	8007a64 <USBD_CtlError>
      break;
 80070c6:	bf00      	nop
    }
    break;
 80070c8:	e004      	b.n	80070d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fcc9 	bl	8007a64 <USBD_CtlError>
    break;
 80070d2:	bf00      	nop
  }

  return ret;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop

080070e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d003      	beq.n	8007102 <USBD_StdItfReq+0x22>
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d001      	beq.n	8007102 <USBD_StdItfReq+0x22>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d12a      	bne.n	8007158 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	3b01      	subs	r3, #1
 800710a:	2b02      	cmp	r3, #2
 800710c:	d81d      	bhi.n	800714a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	889b      	ldrh	r3, [r3, #4]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	d813      	bhi.n	8007140 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d110      	bne.n	8007154 <USBD_StdItfReq+0x74>
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fd5e 	bl	8007bfa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800713e:	e009      	b.n	8007154 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc8e 	bl	8007a64 <USBD_CtlError>
      break;
 8007148:	e004      	b.n	8007154 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fc89 	bl	8007a64 <USBD_CtlError>
      break;
 8007152:	e000      	b.n	8007156 <USBD_StdItfReq+0x76>
      break;
 8007154:	bf00      	nop
    }
    break;
 8007156:	e004      	b.n	8007162 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fc82 	bl	8007a64 <USBD_CtlError>
    break;
 8007160:	bf00      	nop
  }

  return ret;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	889b      	ldrh	r3, [r3, #4]
 800717e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007188:	2b20      	cmp	r3, #32
 800718a:	d004      	beq.n	8007196 <USBD_StdEPReq+0x2a>
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d002      	beq.n	8007196 <USBD_StdEPReq+0x2a>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <USBD_StdEPReq+0x3e>
 8007194:	e135      	b.n	8007402 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]
    break;
 80071a8:	e130      	b.n	800740c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d03e      	beq.n	8007230 <USBD_StdEPReq+0xc4>
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d002      	beq.n	80071bc <USBD_StdEPReq+0x50>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d077      	beq.n	80072aa <USBD_StdEPReq+0x13e>
 80071ba:	e11c      	b.n	80073f6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d002      	beq.n	80071cc <USBD_StdEPReq+0x60>
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d015      	beq.n	80071f6 <USBD_StdEPReq+0x8a>
 80071ca:	e02b      	b.n	8007224 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00c      	beq.n	80071ec <USBD_StdEPReq+0x80>
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b80      	cmp	r3, #128	; 0x80
 80071d6:	d009      	beq.n	80071ec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 f93d 	bl	800845c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071e2:	2180      	movs	r1, #128	; 0x80
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 f939 	bl	800845c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80071ea:	e020      	b.n	800722e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fc38 	bl	8007a64 <USBD_CtlError>
        break;
 80071f4:	e01b      	b.n	800722e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10e      	bne.n	800721c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <USBD_StdEPReq+0xb0>
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	2b80      	cmp	r3, #128	; 0x80
 8007208:	d008      	beq.n	800721c <USBD_StdEPReq+0xb0>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	88db      	ldrh	r3, [r3, #6]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 f920 	bl	800845c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fcec 	bl	8007bfa <USBD_CtlSendStatus>

        break;
 8007222:	e004      	b.n	800722e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fc1c 	bl	8007a64 <USBD_CtlError>
        break;
 800722c:	bf00      	nop
      }
      break;
 800722e:	e0e7      	b.n	8007400 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007236:	2b02      	cmp	r3, #2
 8007238:	d002      	beq.n	8007240 <USBD_StdEPReq+0xd4>
 800723a:	2b03      	cmp	r3, #3
 800723c:	d015      	beq.n	800726a <USBD_StdEPReq+0xfe>
 800723e:	e02d      	b.n	800729c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00c      	beq.n	8007260 <USBD_StdEPReq+0xf4>
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b80      	cmp	r3, #128	; 0x80
 800724a:	d009      	beq.n	8007260 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 f903 	bl	800845c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f8ff 	bl	800845c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800725e:	e023      	b.n	80072a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fbfe 	bl	8007a64 <USBD_CtlError>
        break;
 8007268:	e01e      	b.n	80072a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	885b      	ldrh	r3, [r3, #2]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d119      	bne.n	80072a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 f90a 	bl	800849a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fcb7 	bl	8007bfa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
        }
        break;
 800729a:	e004      	b.n	80072a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fbe0 	bl	8007a64 <USBD_CtlError>
        break;
 80072a4:	e000      	b.n	80072a8 <USBD_StdEPReq+0x13c>
        break;
 80072a6:	bf00      	nop
      }
      break;
 80072a8:	e0aa      	b.n	8007400 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d002      	beq.n	80072ba <USBD_StdEPReq+0x14e>
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d032      	beq.n	800731e <USBD_StdEPReq+0x1b2>
 80072b8:	e097      	b.n	80073ea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <USBD_StdEPReq+0x164>
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b80      	cmp	r3, #128	; 0x80
 80072c4:	d004      	beq.n	80072d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fbcb 	bl	8007a64 <USBD_CtlError>
          break;
 80072ce:	e091      	b.n	80073f4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da0b      	bge.n	80072f0 <USBD_StdEPReq+0x184>
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	3310      	adds	r3, #16
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4413      	add	r3, r2
 80072ec:	3304      	adds	r3, #4
 80072ee:	e00b      	b.n	8007308 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	3304      	adds	r3, #4
 8007308:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2202      	movs	r2, #2
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fc15 	bl	8007b46 <USBD_CtlSendData>
        break;
 800731c:	e06a      	b.n	80073f4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800731e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007322:	2b00      	cmp	r3, #0
 8007324:	da11      	bge.n	800734a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	f003 020f 	and.w	r2, r3, #15
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	3324      	adds	r3, #36	; 0x24
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d117      	bne.n	8007370 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fb8e 	bl	8007a64 <USBD_CtlError>
            break;
 8007348:	e054      	b.n	80073f4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	f003 020f 	and.w	r2, r3, #15
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d104      	bne.n	8007370 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fb7b 	bl	8007a64 <USBD_CtlError>
            break;
 800736e:	e041      	b.n	80073f4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	da0b      	bge.n	8007390 <USBD_StdEPReq+0x224>
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	3310      	adds	r3, #16
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	3304      	adds	r3, #4
 800738e:	e00b      	b.n	80073a8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	4413      	add	r3, r2
 80073a6:	3304      	adds	r3, #4
 80073a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <USBD_StdEPReq+0x24a>
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b80      	cmp	r3, #128	; 0x80
 80073b4:	d103      	bne.n	80073be <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	e00e      	b.n	80073dc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 f888 	bl	80084d8 <USBD_LL_IsStallEP>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2201      	movs	r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	e002      	b.n	80073dc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2202      	movs	r2, #2
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fbaf 	bl	8007b46 <USBD_CtlSendData>
          break;
 80073e8:	e004      	b.n	80073f4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fb39 	bl	8007a64 <USBD_CtlError>
        break;
 80073f2:	bf00      	nop
      }
      break;
 80073f4:	e004      	b.n	8007400 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb33 	bl	8007a64 <USBD_CtlError>
      break;
 80073fe:	bf00      	nop
    }
    break;
 8007400:	e004      	b.n	800740c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fb2d 	bl	8007a64 <USBD_CtlError>
    break;
 800740a:	bf00      	nop
  }

  return ret;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	885b      	ldrh	r3, [r3, #2]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	2b06      	cmp	r3, #6
 800743a:	f200 8128 	bhi.w	800768e <USBD_GetDescriptor+0x276>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <USBD_GetDescriptor+0x2c>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007461 	.word	0x08007461
 8007448:	08007479 	.word	0x08007479
 800744c:	080074b9 	.word	0x080074b9
 8007450:	0800768f 	.word	0x0800768f
 8007454:	0800768f 	.word	0x0800768f
 8007458:	0800762f 	.word	0x0800762f
 800745c:	0800765b 	.word	0x0800765b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	7c12      	ldrb	r2, [r2, #16]
 800746c:	f107 0108 	add.w	r1, r7, #8
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	60f8      	str	r0, [r7, #12]
    break;
 8007476:	e112      	b.n	800769e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	7c1b      	ldrb	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10d      	bne.n	800749c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	f107 0208 	add.w	r2, r7, #8
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3
 8007490:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3301      	adds	r3, #1
 8007496:	2202      	movs	r2, #2
 8007498:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800749a:	e100      	b.n	800769e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	f107 0208 	add.w	r2, r7, #8
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
 80074b2:	2202      	movs	r2, #2
 80074b4:	701a      	strb	r2, [r3, #0]
    break;
 80074b6:	e0f2      	b.n	800769e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	885b      	ldrh	r3, [r3, #2]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b05      	cmp	r3, #5
 80074c0:	f200 80ac 	bhi.w	800761c <USBD_GetDescriptor+0x204>
 80074c4:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <USBD_GetDescriptor+0xb4>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	080074e5 	.word	0x080074e5
 80074d0:	08007519 	.word	0x08007519
 80074d4:	0800754d 	.word	0x0800754d
 80074d8:	08007581 	.word	0x08007581
 80074dc:	080075b5 	.word	0x080075b5
 80074e0:	080075e9 	.word	0x080075e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007506:	e091      	b.n	800762c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 faaa 	bl	8007a64 <USBD_CtlError>
        err++;
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	3301      	adds	r3, #1
 8007514:	72fb      	strb	r3, [r7, #11]
      break;
 8007516:	e089      	b.n	800762c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	7c12      	ldrb	r2, [r2, #16]
 8007530:	f107 0108 	add.w	r1, r7, #8
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800753a:	e077      	b.n	800762c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa90 	bl	8007a64 <USBD_CtlError>
        err++;
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	3301      	adds	r3, #1
 8007548:	72fb      	strb	r3, [r7, #11]
      break;
 800754a:	e06f      	b.n	800762c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7c12      	ldrb	r2, [r2, #16]
 8007564:	f107 0108 	add.w	r1, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800756e:	e05d      	b.n	800762c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa76 	bl	8007a64 <USBD_CtlError>
        err++;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	3301      	adds	r3, #1
 800757c:	72fb      	strb	r3, [r7, #11]
      break;
 800757e:	e055      	b.n	800762c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7c12      	ldrb	r2, [r2, #16]
 8007598:	f107 0108 	add.w	r1, r7, #8
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075a2:	e043      	b.n	800762c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa5c 	bl	8007a64 <USBD_CtlError>
        err++;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3301      	adds	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
      break;
 80075b2:	e03b      	b.n	800762c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7c12      	ldrb	r2, [r2, #16]
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075d6:	e029      	b.n	800762c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa42 	bl	8007a64 <USBD_CtlError>
        err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
      break;
 80075e6:	e021      	b.n	800762c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	7c12      	ldrb	r2, [r2, #16]
 8007600:	f107 0108 	add.w	r1, r7, #8
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800760a:	e00f      	b.n	800762c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa28 	bl	8007a64 <USBD_CtlError>
        err++;
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	3301      	adds	r3, #1
 8007618:	72fb      	strb	r3, [r7, #11]
      break;
 800761a:	e007      	b.n	800762c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa20 	bl	8007a64 <USBD_CtlError>
      err++;
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	3301      	adds	r3, #1
 8007628:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800762a:	bf00      	nop
    }
    break;
 800762c:	e037      	b.n	800769e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7c1b      	ldrb	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763e:	f107 0208 	add.w	r2, r7, #8
 8007642:	4610      	mov	r0, r2
 8007644:	4798      	blx	r3
 8007646:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007648:	e029      	b.n	800769e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa09 	bl	8007a64 <USBD_CtlError>
      err++;
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	3301      	adds	r3, #1
 8007656:	72fb      	strb	r3, [r7, #11]
    break;
 8007658:	e021      	b.n	800769e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7c1b      	ldrb	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10d      	bne.n	800767e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	f107 0208 	add.w	r2, r7, #8
 800766e:	4610      	mov	r0, r2
 8007670:	4798      	blx	r3
 8007672:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	2207      	movs	r2, #7
 800767a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800767c:	e00f      	b.n	800769e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f9ef 	bl	8007a64 <USBD_CtlError>
      err++;
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	3301      	adds	r3, #1
 800768a:	72fb      	strb	r3, [r7, #11]
    break;
 800768c:	e007      	b.n	800769e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f9e7 	bl	8007a64 <USBD_CtlError>
    err++;
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	3301      	adds	r3, #1
 800769a:	72fb      	strb	r3, [r7, #11]
    break;
 800769c:	bf00      	nop
  }

  if (err != 0U)
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11e      	bne.n	80076e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	88db      	ldrh	r3, [r3, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d016      	beq.n	80076da <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80076ac:	893b      	ldrh	r3, [r7, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	88da      	ldrh	r2, [r3, #6]
 80076b6:	893b      	ldrh	r3, [r7, #8]
 80076b8:	4293      	cmp	r3, r2
 80076ba:	bf28      	it	cs
 80076bc:	4613      	movcs	r3, r2
 80076be:	b29b      	uxth	r3, r3
 80076c0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80076c2:	893b      	ldrh	r3, [r7, #8]
 80076c4:	461a      	mov	r2, r3
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fa3c 	bl	8007b46 <USBD_CtlSendData>
 80076ce:	e009      	b.n	80076e4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9c6 	bl	8007a64 <USBD_CtlError>
 80076d8:	e004      	b.n	80076e4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa8d 	bl	8007bfa <USBD_CtlSendStatus>
 80076e0:	e000      	b.n	80076e4 <USBD_GetDescriptor+0x2cc>
    return;
 80076e2:	bf00      	nop
    }
  }
}
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	889b      	ldrh	r3, [r3, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d130      	bne.n	8007760 <USBD_SetAddress+0x74>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d12c      	bne.n	8007760 <USBD_SetAddress+0x74>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	2b7f      	cmp	r3, #127	; 0x7f
 800770c:	d828      	bhi.n	8007760 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	885b      	ldrh	r3, [r3, #2]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007718:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007720:	2b03      	cmp	r3, #3
 8007722:	d104      	bne.n	800772e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f99c 	bl	8007a64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772c:	e01c      	b.n	8007768 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7bfa      	ldrb	r2, [r7, #15]
 8007732:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fef8 	bl	8008530 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa5a 	bl	8007bfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007754:	e008      	b.n	8007768 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775e:	e003      	b.n	8007768 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f97e 	bl	8007a64 <USBD_CtlError>
  }
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	4b4b      	ldr	r3, [pc, #300]	; (80078b4 <USBD_SetConfig+0x144>)
 8007786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007788:	4b4a      	ldr	r3, [pc, #296]	; (80078b4 <USBD_SetConfig+0x144>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d905      	bls.n	800779c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f966 	bl	8007a64 <USBD_CtlError>
    return USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e087      	b.n	80078ac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d002      	beq.n	80077ac <USBD_SetConfig+0x3c>
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d025      	beq.n	80077f6 <USBD_SetConfig+0x86>
 80077aa:	e071      	b.n	8007890 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80077ac:	4b41      	ldr	r3, [pc, #260]	; (80078b4 <USBD_SetConfig+0x144>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01c      	beq.n	80077ee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80077b4:	4b3f      	ldr	r3, [pc, #252]	; (80078b4 <USBD_SetConfig+0x144>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80077be:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <USBD_SetConfig+0x144>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff f9a7 	bl	8006b18 <USBD_SetClassConfig>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f944 	bl	8007a64 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80077dc:	e065      	b.n	80078aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa0b 	bl	8007bfa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2203      	movs	r2, #3
 80077e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80077ec:	e05d      	b.n	80078aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa03 	bl	8007bfa <USBD_CtlSendStatus>
    break;
 80077f4:	e059      	b.n	80078aa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80077f6:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <USBD_SetConfig+0x144>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d112      	bne.n	8007824 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007806:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <USBD_SetConfig+0x144>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007810:	4b28      	ldr	r3, [pc, #160]	; (80078b4 <USBD_SetConfig+0x144>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff f99a 	bl	8006b50 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9ec 	bl	8007bfa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007822:	e042      	b.n	80078aa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007824:	4b23      	ldr	r3, [pc, #140]	; (80078b4 <USBD_SetConfig+0x144>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	429a      	cmp	r2, r3
 8007830:	d02a      	beq.n	8007888 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff f988 	bl	8006b50 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007840:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <USBD_SetConfig+0x144>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800784a:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <USBD_SetConfig+0x144>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff f961 	bl	8006b18 <USBD_SetClassConfig>
 8007856:	4603      	mov	r3, r0
 8007858:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00f      	beq.n	8007880 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8fe 	bl	8007a64 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff f96d 	bl	8006b50 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800787e:	e014      	b.n	80078aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f9ba 	bl	8007bfa <USBD_CtlSendStatus>
    break;
 8007886:	e010      	b.n	80078aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f9b6 	bl	8007bfa <USBD_CtlSendStatus>
    break;
 800788e:	e00c      	b.n	80078aa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f8e6 	bl	8007a64 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007898:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <USBD_SetConfig+0x144>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff f956 	bl	8006b50 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80078a4:	2303      	movs	r3, #3
 80078a6:	73fb      	strb	r3, [r7, #15]
    break;
 80078a8:	bf00      	nop
  }

  return ret;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20000378 	.word	0x20000378

080078b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	88db      	ldrh	r3, [r3, #6]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d004      	beq.n	80078d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f8c9 	bl	8007a64 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80078d2:	e021      	b.n	8007918 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	db17      	blt.n	800790e <USBD_GetConfig+0x56>
 80078de:	2b02      	cmp	r3, #2
 80078e0:	dd02      	ble.n	80078e8 <USBD_GetConfig+0x30>
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d00b      	beq.n	80078fe <USBD_GetConfig+0x46>
 80078e6:	e012      	b.n	800790e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3308      	adds	r3, #8
 80078f2:	2201      	movs	r2, #1
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f925 	bl	8007b46 <USBD_CtlSendData>
      break;
 80078fc:	e00c      	b.n	8007918 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3304      	adds	r3, #4
 8007902:	2201      	movs	r2, #1
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f91d 	bl	8007b46 <USBD_CtlSendData>
      break;
 800790c:	e004      	b.n	8007918 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f8a7 	bl	8007a64 <USBD_CtlError>
      break;
 8007916:	bf00      	nop
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	3b01      	subs	r3, #1
 8007932:	2b02      	cmp	r3, #2
 8007934:	d81e      	bhi.n	8007974 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	88db      	ldrh	r3, [r3, #6]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d004      	beq.n	8007948 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f88f 	bl	8007a64 <USBD_CtlError>
      break;
 8007946:	e01a      	b.n	800797e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f043 0202 	orr.w	r2, r3, #2
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	330c      	adds	r3, #12
 8007968:	2202      	movs	r2, #2
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f8ea 	bl	8007b46 <USBD_CtlSendData>
    break;
 8007972:	e004      	b.n	800797e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f874 	bl	8007a64 <USBD_CtlError>
    break;
 800797c:	bf00      	nop
  }
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	885b      	ldrh	r3, [r3, #2]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d106      	bne.n	80079a6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f92a 	bl	8007bfa <USBD_CtlSendStatus>
  }
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079be:	3b01      	subs	r3, #1
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d80b      	bhi.n	80079dc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10c      	bne.n	80079e6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f910 	bl	8007bfa <USBD_CtlSendStatus>
      }
      break;
 80079da:	e004      	b.n	80079e6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f840 	bl	8007a64 <USBD_CtlError>
      break;
 80079e4:	e000      	b.n	80079e8 <USBD_ClrFeature+0x3a>
      break;
 80079e6:	bf00      	nop
  }
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3301      	adds	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff fad3 	bl	8006fc6 <SWAPBYTE>
 8007a20:	4603      	mov	r3, r0
 8007a22:	461a      	mov	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7ff fac6 	bl	8006fc6 <SWAPBYTE>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3301      	adds	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff fab9 	bl	8006fc6 <SWAPBYTE>
 8007a54:	4603      	mov	r3, r0
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	80da      	strh	r2, [r3, #6]
}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fcf3 	bl	800845c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a76:	2100      	movs	r1, #0
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fcef 	bl	800845c <USBD_LL_StallEP>
}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b086      	sub	sp, #24
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d036      	beq.n	8007b0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007aa0:	6938      	ldr	r0, [r7, #16]
 8007aa2:	f000 f836 	bl	8007b12 <USBD_GetLen>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	4413      	add	r3, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	7812      	ldrb	r2, [r2, #0]
 8007abe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	4413      	add	r3, r2
 8007acc:	2203      	movs	r2, #3
 8007ace:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ad6:	e013      	b.n	8007b00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	7812      	ldrb	r2, [r2, #0]
 8007ae2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	613b      	str	r3, [r7, #16]
    idx++;
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	3301      	adds	r3, #1
 8007aee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4413      	add	r3, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	3301      	adds	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e7      	bne.n	8007ad8 <USBD_GetString+0x52>
 8007b08:	e000      	b.n	8007b0c <USBD_GetString+0x86>
    return;
 8007b0a:	bf00      	nop
  }
}
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b22:	e005      	b.n	8007b30 <USBD_GetLen+0x1e>
  {
    len++;
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	3301      	adds	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1f5      	bne.n	8007b24 <USBD_GetLen+0x12>
  }

  return len;
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2202      	movs	r2, #2
 8007b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fcfe 	bl	800856e <USBD_LL_Transmit>

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fced 	bl	800856e <USBD_LL_Transmit>

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2203      	movs	r2, #3
 8007bae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 fcf1 	bl	80085b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	2100      	movs	r1, #0
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fce0 	bl	80085b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2204      	movs	r2, #4
 8007c06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2100      	movs	r1, #0
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fcac 	bl	800856e <USBD_LL_Transmit>

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2205      	movs	r2, #5
 8007c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c30:	2300      	movs	r3, #0
 8007c32:	2200      	movs	r2, #0
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fcba 	bl	80085b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4912      	ldr	r1, [pc, #72]	; (8007c98 <MX_USB_DEVICE_Init+0x50>)
 8007c50:	4812      	ldr	r0, [pc, #72]	; (8007c9c <MX_USB_DEVICE_Init+0x54>)
 8007c52:	f7fe fef3 	bl	8006a3c <USBD_Init>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c5c:	f7f9 fc08 	bl	8001470 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c60:	490f      	ldr	r1, [pc, #60]	; (8007ca0 <MX_USB_DEVICE_Init+0x58>)
 8007c62:	480e      	ldr	r0, [pc, #56]	; (8007c9c <MX_USB_DEVICE_Init+0x54>)
 8007c64:	f7fe ff20 	bl	8006aa8 <USBD_RegisterClass>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c6e:	f7f9 fbff 	bl	8001470 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c72:	490c      	ldr	r1, [pc, #48]	; (8007ca4 <MX_USB_DEVICE_Init+0x5c>)
 8007c74:	4809      	ldr	r0, [pc, #36]	; (8007c9c <MX_USB_DEVICE_Init+0x54>)
 8007c76:	f7fe fe45 	bl	8006904 <USBD_CDC_RegisterInterface>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c80:	f7f9 fbf6 	bl	8001470 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c84:	4805      	ldr	r0, [pc, #20]	; (8007c9c <MX_USB_DEVICE_Init+0x54>)
 8007c86:	f7fe ff30 	bl	8006aea <USBD_Start>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c90:	f7f9 fbee 	bl	8001470 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c94:	bf00      	nop
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000138 	.word	0x20000138
 8007c9c:	2000041c 	.word	0x2000041c
 8007ca0:	20000018 	.word	0x20000018
 8007ca4:	20000124 	.word	0x20000124

08007ca8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cac:	2200      	movs	r2, #0
 8007cae:	4905      	ldr	r1, [pc, #20]	; (8007cc4 <CDC_Init_FS+0x1c>)
 8007cb0:	4805      	ldr	r0, [pc, #20]	; (8007cc8 <CDC_Init_FS+0x20>)
 8007cb2:	f7fe fe3c 	bl	800692e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cb6:	4905      	ldr	r1, [pc, #20]	; (8007ccc <CDC_Init_FS+0x24>)
 8007cb8:	4803      	ldr	r0, [pc, #12]	; (8007cc8 <CDC_Init_FS+0x20>)
 8007cba:	f7fe fe51 	bl	8006960 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000eec 	.word	0x20000eec
 8007cc8:	2000041c 	.word	0x2000041c
 8007ccc:	200006ec 	.word	0x200006ec

08007cd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	6039      	str	r1, [r7, #0]
 8007cea:	71fb      	strb	r3, [r7, #7]
 8007cec:	4613      	mov	r3, r2
 8007cee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b23      	cmp	r3, #35	; 0x23
 8007cf4:	d85c      	bhi.n	8007db0 <CDC_Control_FS+0xd0>
 8007cf6:	a201      	add	r2, pc, #4	; (adr r2, 8007cfc <CDC_Control_FS+0x1c>)
 8007cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfc:	08007db1 	.word	0x08007db1
 8007d00:	08007db1 	.word	0x08007db1
 8007d04:	08007db1 	.word	0x08007db1
 8007d08:	08007db1 	.word	0x08007db1
 8007d0c:	08007db1 	.word	0x08007db1
 8007d10:	08007db1 	.word	0x08007db1
 8007d14:	08007db1 	.word	0x08007db1
 8007d18:	08007db1 	.word	0x08007db1
 8007d1c:	08007db1 	.word	0x08007db1
 8007d20:	08007db1 	.word	0x08007db1
 8007d24:	08007db1 	.word	0x08007db1
 8007d28:	08007db1 	.word	0x08007db1
 8007d2c:	08007db1 	.word	0x08007db1
 8007d30:	08007db1 	.word	0x08007db1
 8007d34:	08007db1 	.word	0x08007db1
 8007d38:	08007db1 	.word	0x08007db1
 8007d3c:	08007db1 	.word	0x08007db1
 8007d40:	08007db1 	.word	0x08007db1
 8007d44:	08007db1 	.word	0x08007db1
 8007d48:	08007db1 	.word	0x08007db1
 8007d4c:	08007db1 	.word	0x08007db1
 8007d50:	08007db1 	.word	0x08007db1
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007db1 	.word	0x08007db1
 8007d5c:	08007db1 	.word	0x08007db1
 8007d60:	08007db1 	.word	0x08007db1
 8007d64:	08007db1 	.word	0x08007db1
 8007d68:	08007db1 	.word	0x08007db1
 8007d6c:	08007db1 	.word	0x08007db1
 8007d70:	08007db1 	.word	0x08007db1
 8007d74:	08007db1 	.word	0x08007db1
 8007d78:	08007db1 	.word	0x08007db1
 8007d7c:	08007d8d 	.word	0x08007d8d
 8007d80:	08007d9f 	.word	0x08007d9f
 8007d84:	08007db1 	.word	0x08007db1
 8007d88:	08007db1 	.word	0x08007db1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <CDC_Control_FS+0xe0>)
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	6810      	ldr	r0, [r2, #0]
 8007d92:	6018      	str	r0, [r3, #0]
 8007d94:	8891      	ldrh	r1, [r2, #4]
 8007d96:	7992      	ldrb	r2, [r2, #6]
 8007d98:	8099      	strh	r1, [r3, #4]
 8007d9a:	719a      	strb	r2, [r3, #6]
    break;
 8007d9c:	e009      	b.n	8007db2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	4a07      	ldr	r2, [pc, #28]	; (8007dc0 <CDC_Control_FS+0xe0>)
 8007da2:	6810      	ldr	r0, [r2, #0]
 8007da4:	6018      	str	r0, [r3, #0]
 8007da6:	8891      	ldrh	r1, [r2, #4]
 8007da8:	7992      	ldrb	r2, [r2, #6]
 8007daa:	8099      	strh	r1, [r3, #4]
 8007dac:	719a      	strb	r2, [r3, #6]
    break;
 8007dae:	e000      	b.n	8007db2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007db0:	bf00      	nop
  }

  return (USBD_OK);
 8007db2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	2000011c 	.word	0x2000011c

08007dc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4805      	ldr	r0, [pc, #20]	; (8007de8 <CDC_Receive_FS+0x24>)
 8007dd2:	f7fe fdc5 	bl	8006960 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dd6:	4804      	ldr	r0, [pc, #16]	; (8007de8 <CDC_Receive_FS+0x24>)
 8007dd8:	f7fe fe06 	bl	80069e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ddc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	2000041c 	.word	0x2000041c

08007dec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007dfc:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <CDC_Transmit_FS+0x48>)
 8007dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e00b      	b.n	8007e2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e12:	887b      	ldrh	r3, [r7, #2]
 8007e14:	461a      	mov	r2, r3
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4806      	ldr	r0, [pc, #24]	; (8007e34 <CDC_Transmit_FS+0x48>)
 8007e1a:	f7fe fd88 	bl	800692e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e1e:	4805      	ldr	r0, [pc, #20]	; (8007e34 <CDC_Transmit_FS+0x48>)
 8007e20:	f7fe fdb2 	bl	8006988 <USBD_CDC_TransmitPacket>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	2000041c 	.word	0x2000041c

08007e38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4613      	mov	r3, r2
 8007e44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
	...

08007e5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2212      	movs	r2, #18
 8007e6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e6e:	4b03      	ldr	r3, [pc, #12]	; (8007e7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20000154 	.word	0x20000154

08007e80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2204      	movs	r2, #4
 8007e90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e92:	4b03      	ldr	r3, [pc, #12]	; (8007ea0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20000168 	.word	0x20000168

08007ea4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eba:	4808      	ldr	r0, [pc, #32]	; (8007edc <USBD_FS_ProductStrDescriptor+0x38>)
 8007ebc:	f7ff fde3 	bl	8007a86 <USBD_GetString>
 8007ec0:	e004      	b.n	8007ecc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	4904      	ldr	r1, [pc, #16]	; (8007ed8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ec6:	4805      	ldr	r0, [pc, #20]	; (8007edc <USBD_FS_ProductStrDescriptor+0x38>)
 8007ec8:	f7ff fddd 	bl	8007a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	200016ec 	.word	0x200016ec
 8007edc:	0800a78c 	.word	0x0800a78c

08007ee0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	4904      	ldr	r1, [pc, #16]	; (8007f00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ef0:	4804      	ldr	r0, [pc, #16]	; (8007f04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ef2:	f7ff fdc8 	bl	8007a86 <USBD_GetString>
  return USBD_StrDesc;
 8007ef6:	4b02      	ldr	r3, [pc, #8]	; (8007f00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	200016ec 	.word	0x200016ec
 8007f04:	0800a7a4 	.word	0x0800a7a4

08007f08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	6039      	str	r1, [r7, #0]
 8007f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	221a      	movs	r2, #26
 8007f18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f1a:	f000 f843 	bl	8007fa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f1e:	4b02      	ldr	r3, [pc, #8]	; (8007f28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	2000016c 	.word	0x2000016c

08007f2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	4603      	mov	r3, r0
 8007f34:	6039      	str	r1, [r7, #0]
 8007f36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d105      	bne.n	8007f4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	4907      	ldr	r1, [pc, #28]	; (8007f60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f42:	4808      	ldr	r0, [pc, #32]	; (8007f64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f44:	f7ff fd9f 	bl	8007a86 <USBD_GetString>
 8007f48:	e004      	b.n	8007f54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4904      	ldr	r1, [pc, #16]	; (8007f60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f4e:	4805      	ldr	r0, [pc, #20]	; (8007f64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f50:	f7ff fd99 	bl	8007a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f54:	4b02      	ldr	r3, [pc, #8]	; (8007f60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	200016ec 	.word	0x200016ec
 8007f64:	0800a7b8 	.word	0x0800a7b8

08007f68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	4907      	ldr	r1, [pc, #28]	; (8007f9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f7e:	4808      	ldr	r0, [pc, #32]	; (8007fa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f80:	f7ff fd81 	bl	8007a86 <USBD_GetString>
 8007f84:	e004      	b.n	8007f90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	4904      	ldr	r1, [pc, #16]	; (8007f9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f8a:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f8c:	f7ff fd7b 	bl	8007a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200016ec 	.word	0x200016ec
 8007fa0:	0800a7c4 	.word	0x0800a7c4

08007fa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007faa:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <Get_SerialNum+0x44>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <Get_SerialNum+0x48>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <Get_SerialNum+0x4c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fca:	2208      	movs	r2, #8
 8007fcc:	4909      	ldr	r1, [pc, #36]	; (8007ff4 <Get_SerialNum+0x50>)
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f814 	bl	8007ffc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	4908      	ldr	r1, [pc, #32]	; (8007ff8 <Get_SerialNum+0x54>)
 8007fd8:	68b8      	ldr	r0, [r7, #8]
 8007fda:	f000 f80f 	bl	8007ffc <IntToUnicode>
  }
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	1fff7a10 	.word	0x1fff7a10
 8007fec:	1fff7a14 	.word	0x1fff7a14
 8007ff0:	1fff7a18 	.word	0x1fff7a18
 8007ff4:	2000016e 	.word	0x2000016e
 8007ff8:	2000017e 	.word	0x2000017e

08007ffc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800800e:	2300      	movs	r3, #0
 8008010:	75fb      	strb	r3, [r7, #23]
 8008012:	e027      	b.n	8008064 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	0f1b      	lsrs	r3, r3, #28
 8008018:	2b09      	cmp	r3, #9
 800801a:	d80b      	bhi.n	8008034 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	0f1b      	lsrs	r3, r3, #28
 8008020:	b2da      	uxtb	r2, r3
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	4619      	mov	r1, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	440b      	add	r3, r1
 800802c:	3230      	adds	r2, #48	; 0x30
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	e00a      	b.n	800804a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0f1b      	lsrs	r3, r3, #28
 8008038:	b2da      	uxtb	r2, r3
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	4619      	mov	r1, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	440b      	add	r3, r1
 8008044:	3237      	adds	r2, #55	; 0x37
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	3301      	adds	r3, #1
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	4413      	add	r3, r2
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	3301      	adds	r3, #1
 8008062:	75fb      	strb	r3, [r7, #23]
 8008064:	7dfa      	ldrb	r2, [r7, #23]
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	429a      	cmp	r2, r3
 800806a:	d3d3      	bcc.n	8008014 <IntToUnicode+0x18>
  }
}
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08a      	sub	sp, #40	; 0x28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008080:	f107 0314 	add.w	r3, r7, #20
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	605a      	str	r2, [r3, #4]
 800808a:	609a      	str	r2, [r3, #8]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008098:	d13a      	bne.n	8008110 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	4b1e      	ldr	r3, [pc, #120]	; (8008118 <HAL_PCD_MspInit+0xa0>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	4a1d      	ldr	r2, [pc, #116]	; (8008118 <HAL_PCD_MspInit+0xa0>)
 80080a4:	f043 0301 	orr.w	r3, r3, #1
 80080a8:	6313      	str	r3, [r2, #48]	; 0x30
 80080aa:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <HAL_PCD_MspInit+0xa0>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080bc:	2302      	movs	r3, #2
 80080be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080c4:	2303      	movs	r3, #3
 80080c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080c8:	230a      	movs	r3, #10
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080cc:	f107 0314 	add.w	r3, r7, #20
 80080d0:	4619      	mov	r1, r3
 80080d2:	4812      	ldr	r0, [pc, #72]	; (800811c <HAL_PCD_MspInit+0xa4>)
 80080d4:	f7f9 fcfe 	bl	8001ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080d8:	4b0f      	ldr	r3, [pc, #60]	; (8008118 <HAL_PCD_MspInit+0xa0>)
 80080da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080dc:	4a0e      	ldr	r2, [pc, #56]	; (8008118 <HAL_PCD_MspInit+0xa0>)
 80080de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e2:	6353      	str	r3, [r2, #52]	; 0x34
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <HAL_PCD_MspInit+0xa0>)
 80080ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ec:	4a0a      	ldr	r2, [pc, #40]	; (8008118 <HAL_PCD_MspInit+0xa0>)
 80080ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080f2:	6453      	str	r3, [r2, #68]	; 0x44
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <HAL_PCD_MspInit+0xa0>)
 80080f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008100:	2200      	movs	r2, #0
 8008102:	2100      	movs	r1, #0
 8008104:	2043      	movs	r0, #67	; 0x43
 8008106:	f7f9 fcae 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800810a:	2043      	movs	r0, #67	; 0x43
 800810c:	f7f9 fcc7 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008110:	bf00      	nop
 8008112:	3728      	adds	r7, #40	; 0x28
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40023800 	.word	0x40023800
 800811c:	40020000 	.word	0x40020000

08008120 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7fe fd22 	bl	8006b80 <USBD_LL_SetupStage>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	4619      	mov	r1, r3
 800816e:	f7fe fd5a 	bl	8006c26 <USBD_LL_DataOutStage>
}
 8008172:	bf00      	nop
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800818c:	78fa      	ldrb	r2, [r7, #3]
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	4613      	mov	r3, r2
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	3348      	adds	r3, #72	; 0x48
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f7fe fda3 	bl	8006cec <USBD_LL_DataInStage>
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fea7 	bl	8006f10 <USBD_LL_SOF>
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081d2:	2301      	movs	r3, #1
 80081d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d102      	bne.n	80081e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
 80081e2:	e008      	b.n	80081f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d102      	bne.n	80081f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
 80081f0:	e001      	b.n	80081f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80081f2:	f7f9 f93d 	bl	8001470 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081fc:	7bfa      	ldrb	r2, [r7, #15]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f7fe fe4a 	bl	8006e9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe fe03 	bl	8006e18 <USBD_LL_Reset>
}
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fe45 	bl	8006eba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008250:	4b04      	ldr	r3, [pc, #16]	; (8008264 <HAL_PCD_SuspendCallback+0x48>)
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	4a03      	ldr	r2, [pc, #12]	; (8008264 <HAL_PCD_SuspendCallback+0x48>)
 8008256:	f043 0306 	orr.w	r3, r3, #6
 800825a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	e000ed00 	.word	0xe000ed00

08008268 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fe34 	bl	8006ee4 <USBD_LL_Resume>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fe5f 	bl	8006f5e <USBD_LL_IsoOUTIncomplete>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	4611      	mov	r1, r2
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fe40 	bl	8006f44 <USBD_LL_IsoINIncomplete>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fe4c 	bl	8006f78 <USBD_LL_DevConnected>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fe49 	bl	8006f8e <USBD_LL_DevDisconnected>
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d13c      	bne.n	800838e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008314:	4a20      	ldr	r2, [pc, #128]	; (8008398 <USBD_LL_Init+0x94>)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1e      	ldr	r2, [pc, #120]	; (8008398 <USBD_LL_Init+0x94>)
 8008320:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008324:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <USBD_LL_Init+0x94>)
 8008326:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800832a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800832c:	4b1a      	ldr	r3, [pc, #104]	; (8008398 <USBD_LL_Init+0x94>)
 800832e:	2204      	movs	r2, #4
 8008330:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008332:	4b19      	ldr	r3, [pc, #100]	; (8008398 <USBD_LL_Init+0x94>)
 8008334:	2202      	movs	r2, #2
 8008336:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008338:	4b17      	ldr	r3, [pc, #92]	; (8008398 <USBD_LL_Init+0x94>)
 800833a:	2200      	movs	r2, #0
 800833c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <USBD_LL_Init+0x94>)
 8008340:	2202      	movs	r2, #2
 8008342:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008344:	4b14      	ldr	r3, [pc, #80]	; (8008398 <USBD_LL_Init+0x94>)
 8008346:	2200      	movs	r2, #0
 8008348:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800834a:	4b13      	ldr	r3, [pc, #76]	; (8008398 <USBD_LL_Init+0x94>)
 800834c:	2200      	movs	r2, #0
 800834e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008350:	4b11      	ldr	r3, [pc, #68]	; (8008398 <USBD_LL_Init+0x94>)
 8008352:	2200      	movs	r2, #0
 8008354:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008356:	4b10      	ldr	r3, [pc, #64]	; (8008398 <USBD_LL_Init+0x94>)
 8008358:	2200      	movs	r2, #0
 800835a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800835c:	4b0e      	ldr	r3, [pc, #56]	; (8008398 <USBD_LL_Init+0x94>)
 800835e:	2200      	movs	r2, #0
 8008360:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008362:	480d      	ldr	r0, [pc, #52]	; (8008398 <USBD_LL_Init+0x94>)
 8008364:	f7fa fb4c 	bl	8002a00 <HAL_PCD_Init>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800836e:	f7f9 f87f 	bl	8001470 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008372:	2180      	movs	r1, #128	; 0x80
 8008374:	4808      	ldr	r0, [pc, #32]	; (8008398 <USBD_LL_Init+0x94>)
 8008376:	f7fb fcaa 	bl	8003cce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800837a:	2240      	movs	r2, #64	; 0x40
 800837c:	2100      	movs	r1, #0
 800837e:	4806      	ldr	r0, [pc, #24]	; (8008398 <USBD_LL_Init+0x94>)
 8008380:	f7fb fc5e 	bl	8003c40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008384:	2280      	movs	r2, #128	; 0x80
 8008386:	2101      	movs	r1, #1
 8008388:	4803      	ldr	r0, [pc, #12]	; (8008398 <USBD_LL_Init+0x94>)
 800838a:	f7fb fc59 	bl	8003c40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	200018ec 	.word	0x200018ec

0800839c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fa fc41 	bl	8002c3a <HAL_PCD_Start>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 f92a 	bl	8008618 <USBD_Get_USB_Status>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	4608      	mov	r0, r1
 80083dc:	4611      	mov	r1, r2
 80083de:	461a      	mov	r2, r3
 80083e0:	4603      	mov	r3, r0
 80083e2:	70fb      	strb	r3, [r7, #3]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70bb      	strb	r3, [r7, #2]
 80083e8:	4613      	mov	r3, r2
 80083ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083fa:	78bb      	ldrb	r3, [r7, #2]
 80083fc:	883a      	ldrh	r2, [r7, #0]
 80083fe:	78f9      	ldrb	r1, [r7, #3]
 8008400:	f7fb f825 	bl	800344e <HAL_PCD_EP_Open>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f904 	bl	8008618 <USBD_Get_USB_Status>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008414:	7bbb      	ldrb	r3, [r7, #14]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008438:	78fa      	ldrb	r2, [r7, #3]
 800843a:	4611      	mov	r1, r2
 800843c:	4618      	mov	r0, r3
 800843e:	f7fb f86e 	bl	800351e <HAL_PCD_EP_Close>
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	4618      	mov	r0, r3
 800844a:	f000 f8e5 	bl	8008618 <USBD_Get_USB_Status>
 800844e:	4603      	mov	r3, r0
 8008450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008452:	7bbb      	ldrb	r3, [r7, #14]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	4611      	mov	r1, r2
 800847a:	4618      	mov	r0, r3
 800847c:	f7fb f946 	bl	800370c <HAL_PCD_EP_SetStall>
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f8c6 	bl	8008618 <USBD_Get_USB_Status>
 800848c:	4603      	mov	r3, r0
 800848e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008490:	7bbb      	ldrb	r3, [r7, #14]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084b4:	78fa      	ldrb	r2, [r7, #3]
 80084b6:	4611      	mov	r1, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fb f98b 	bl	80037d4 <HAL_PCD_EP_ClrStall>
 80084be:	4603      	mov	r3, r0
 80084c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 f8a7 	bl	8008618 <USBD_Get_USB_Status>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da0b      	bge.n	800850c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084fa:	68f9      	ldr	r1, [r7, #12]
 80084fc:	4613      	mov	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	333e      	adds	r3, #62	; 0x3e
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	e00b      	b.n	8008524 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	4613      	mov	r3, r2
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008522:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f7fa ff58 	bl	8003404 <HAL_PCD_SetAddress>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f85c 	bl	8008618 <USBD_Get_USB_Status>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b086      	sub	sp, #24
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	460b      	mov	r3, r1
 800857c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800858c:	7af9      	ldrb	r1, [r7, #11]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	f7fb f871 	bl	8003678 <HAL_PCD_EP_Transmit>
 8008596:	4603      	mov	r3, r0
 8008598:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f83b 	bl	8008618 <USBD_Get_USB_Status>
 80085a2:	4603      	mov	r3, r0
 80085a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	460b      	mov	r3, r1
 80085be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085ce:	7af9      	ldrb	r1, [r7, #11]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	f7fa ffed 	bl	80035b2 <HAL_PCD_EP_Receive>
 80085d8:	4603      	mov	r3, r0
 80085da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f81a 	bl	8008618 <USBD_Get_USB_Status>
 80085e4:	4603      	mov	r3, r0
 80085e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f7fb f81d 	bl	8003648 <HAL_PCD_EP_GetRxCount>
 800860e:	4603      	mov	r3, r0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	2b03      	cmp	r3, #3
 800862a:	d817      	bhi.n	800865c <USBD_Get_USB_Status+0x44>
 800862c:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <USBD_Get_USB_Status+0x1c>)
 800862e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008632:	bf00      	nop
 8008634:	08008645 	.word	0x08008645
 8008638:	0800864b 	.word	0x0800864b
 800863c:	08008651 	.word	0x08008651
 8008640:	08008657 	.word	0x08008657
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
    break;
 8008648:	e00b      	b.n	8008662 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800864a:	2303      	movs	r3, #3
 800864c:	73fb      	strb	r3, [r7, #15]
    break;
 800864e:	e008      	b.n	8008662 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
    break;
 8008654:	e005      	b.n	8008662 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	73fb      	strb	r3, [r7, #15]
    break;
 800865a:	e002      	b.n	8008662 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800865c:	2303      	movs	r3, #3
 800865e:	73fb      	strb	r3, [r7, #15]
    break;
 8008660:	bf00      	nop
  }
  return usb_status;
 8008662:	7bfb      	ldrb	r3, [r7, #15]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <__errno>:
 8008670:	4b01      	ldr	r3, [pc, #4]	; (8008678 <__errno+0x8>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	20000188 	.word	0x20000188

0800867c <__libc_init_array>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	4e0d      	ldr	r6, [pc, #52]	; (80086b4 <__libc_init_array+0x38>)
 8008680:	4c0d      	ldr	r4, [pc, #52]	; (80086b8 <__libc_init_array+0x3c>)
 8008682:	1ba4      	subs	r4, r4, r6
 8008684:	10a4      	asrs	r4, r4, #2
 8008686:	2500      	movs	r5, #0
 8008688:	42a5      	cmp	r5, r4
 800868a:	d109      	bne.n	80086a0 <__libc_init_array+0x24>
 800868c:	4e0b      	ldr	r6, [pc, #44]	; (80086bc <__libc_init_array+0x40>)
 800868e:	4c0c      	ldr	r4, [pc, #48]	; (80086c0 <__libc_init_array+0x44>)
 8008690:	f002 f866 	bl	800a760 <_init>
 8008694:	1ba4      	subs	r4, r4, r6
 8008696:	10a4      	asrs	r4, r4, #2
 8008698:	2500      	movs	r5, #0
 800869a:	42a5      	cmp	r5, r4
 800869c:	d105      	bne.n	80086aa <__libc_init_array+0x2e>
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086a4:	4798      	blx	r3
 80086a6:	3501      	adds	r5, #1
 80086a8:	e7ee      	b.n	8008688 <__libc_init_array+0xc>
 80086aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086ae:	4798      	blx	r3
 80086b0:	3501      	adds	r5, #1
 80086b2:	e7f2      	b.n	800869a <__libc_init_array+0x1e>
 80086b4:	0800aa50 	.word	0x0800aa50
 80086b8:	0800aa50 	.word	0x0800aa50
 80086bc:	0800aa50 	.word	0x0800aa50
 80086c0:	0800aa54 	.word	0x0800aa54

080086c4 <malloc>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <malloc+0xc>)
 80086c6:	4601      	mov	r1, r0
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	f000 b861 	b.w	8008790 <_malloc_r>
 80086ce:	bf00      	nop
 80086d0:	20000188 	.word	0x20000188

080086d4 <free>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <free+0xc>)
 80086d6:	4601      	mov	r1, r0
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	f000 b80b 	b.w	80086f4 <_free_r>
 80086de:	bf00      	nop
 80086e0:	20000188 	.word	0x20000188

080086e4 <memset>:
 80086e4:	4402      	add	r2, r0
 80086e6:	4603      	mov	r3, r0
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d100      	bne.n	80086ee <memset+0xa>
 80086ec:	4770      	bx	lr
 80086ee:	f803 1b01 	strb.w	r1, [r3], #1
 80086f2:	e7f9      	b.n	80086e8 <memset+0x4>

080086f4 <_free_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4605      	mov	r5, r0
 80086f8:	2900      	cmp	r1, #0
 80086fa:	d045      	beq.n	8008788 <_free_r+0x94>
 80086fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008700:	1f0c      	subs	r4, r1, #4
 8008702:	2b00      	cmp	r3, #0
 8008704:	bfb8      	it	lt
 8008706:	18e4      	addlt	r4, r4, r3
 8008708:	f001 fb87 	bl	8009e1a <__malloc_lock>
 800870c:	4a1f      	ldr	r2, [pc, #124]	; (800878c <_free_r+0x98>)
 800870e:	6813      	ldr	r3, [r2, #0]
 8008710:	4610      	mov	r0, r2
 8008712:	b933      	cbnz	r3, 8008722 <_free_r+0x2e>
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	6014      	str	r4, [r2, #0]
 8008718:	4628      	mov	r0, r5
 800871a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800871e:	f001 bb7d 	b.w	8009e1c <__malloc_unlock>
 8008722:	42a3      	cmp	r3, r4
 8008724:	d90c      	bls.n	8008740 <_free_r+0x4c>
 8008726:	6821      	ldr	r1, [r4, #0]
 8008728:	1862      	adds	r2, r4, r1
 800872a:	4293      	cmp	r3, r2
 800872c:	bf04      	itt	eq
 800872e:	681a      	ldreq	r2, [r3, #0]
 8008730:	685b      	ldreq	r3, [r3, #4]
 8008732:	6063      	str	r3, [r4, #4]
 8008734:	bf04      	itt	eq
 8008736:	1852      	addeq	r2, r2, r1
 8008738:	6022      	streq	r2, [r4, #0]
 800873a:	6004      	str	r4, [r0, #0]
 800873c:	e7ec      	b.n	8008718 <_free_r+0x24>
 800873e:	4613      	mov	r3, r2
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	b10a      	cbz	r2, 8008748 <_free_r+0x54>
 8008744:	42a2      	cmp	r2, r4
 8008746:	d9fa      	bls.n	800873e <_free_r+0x4a>
 8008748:	6819      	ldr	r1, [r3, #0]
 800874a:	1858      	adds	r0, r3, r1
 800874c:	42a0      	cmp	r0, r4
 800874e:	d10b      	bne.n	8008768 <_free_r+0x74>
 8008750:	6820      	ldr	r0, [r4, #0]
 8008752:	4401      	add	r1, r0
 8008754:	1858      	adds	r0, r3, r1
 8008756:	4282      	cmp	r2, r0
 8008758:	6019      	str	r1, [r3, #0]
 800875a:	d1dd      	bne.n	8008718 <_free_r+0x24>
 800875c:	6810      	ldr	r0, [r2, #0]
 800875e:	6852      	ldr	r2, [r2, #4]
 8008760:	605a      	str	r2, [r3, #4]
 8008762:	4401      	add	r1, r0
 8008764:	6019      	str	r1, [r3, #0]
 8008766:	e7d7      	b.n	8008718 <_free_r+0x24>
 8008768:	d902      	bls.n	8008770 <_free_r+0x7c>
 800876a:	230c      	movs	r3, #12
 800876c:	602b      	str	r3, [r5, #0]
 800876e:	e7d3      	b.n	8008718 <_free_r+0x24>
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	1821      	adds	r1, r4, r0
 8008774:	428a      	cmp	r2, r1
 8008776:	bf04      	itt	eq
 8008778:	6811      	ldreq	r1, [r2, #0]
 800877a:	6852      	ldreq	r2, [r2, #4]
 800877c:	6062      	str	r2, [r4, #4]
 800877e:	bf04      	itt	eq
 8008780:	1809      	addeq	r1, r1, r0
 8008782:	6021      	streq	r1, [r4, #0]
 8008784:	605c      	str	r4, [r3, #4]
 8008786:	e7c7      	b.n	8008718 <_free_r+0x24>
 8008788:	bd38      	pop	{r3, r4, r5, pc}
 800878a:	bf00      	nop
 800878c:	2000037c 	.word	0x2000037c

08008790 <_malloc_r>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	1ccd      	adds	r5, r1, #3
 8008794:	f025 0503 	bic.w	r5, r5, #3
 8008798:	3508      	adds	r5, #8
 800879a:	2d0c      	cmp	r5, #12
 800879c:	bf38      	it	cc
 800879e:	250c      	movcc	r5, #12
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	4606      	mov	r6, r0
 80087a4:	db01      	blt.n	80087aa <_malloc_r+0x1a>
 80087a6:	42a9      	cmp	r1, r5
 80087a8:	d903      	bls.n	80087b2 <_malloc_r+0x22>
 80087aa:	230c      	movs	r3, #12
 80087ac:	6033      	str	r3, [r6, #0]
 80087ae:	2000      	movs	r0, #0
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
 80087b2:	f001 fb32 	bl	8009e1a <__malloc_lock>
 80087b6:	4a21      	ldr	r2, [pc, #132]	; (800883c <_malloc_r+0xac>)
 80087b8:	6814      	ldr	r4, [r2, #0]
 80087ba:	4621      	mov	r1, r4
 80087bc:	b991      	cbnz	r1, 80087e4 <_malloc_r+0x54>
 80087be:	4c20      	ldr	r4, [pc, #128]	; (8008840 <_malloc_r+0xb0>)
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	b91b      	cbnz	r3, 80087cc <_malloc_r+0x3c>
 80087c4:	4630      	mov	r0, r6
 80087c6:	f000 fc99 	bl	80090fc <_sbrk_r>
 80087ca:	6020      	str	r0, [r4, #0]
 80087cc:	4629      	mov	r1, r5
 80087ce:	4630      	mov	r0, r6
 80087d0:	f000 fc94 	bl	80090fc <_sbrk_r>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d124      	bne.n	8008822 <_malloc_r+0x92>
 80087d8:	230c      	movs	r3, #12
 80087da:	6033      	str	r3, [r6, #0]
 80087dc:	4630      	mov	r0, r6
 80087de:	f001 fb1d 	bl	8009e1c <__malloc_unlock>
 80087e2:	e7e4      	b.n	80087ae <_malloc_r+0x1e>
 80087e4:	680b      	ldr	r3, [r1, #0]
 80087e6:	1b5b      	subs	r3, r3, r5
 80087e8:	d418      	bmi.n	800881c <_malloc_r+0x8c>
 80087ea:	2b0b      	cmp	r3, #11
 80087ec:	d90f      	bls.n	800880e <_malloc_r+0x7e>
 80087ee:	600b      	str	r3, [r1, #0]
 80087f0:	50cd      	str	r5, [r1, r3]
 80087f2:	18cc      	adds	r4, r1, r3
 80087f4:	4630      	mov	r0, r6
 80087f6:	f001 fb11 	bl	8009e1c <__malloc_unlock>
 80087fa:	f104 000b 	add.w	r0, r4, #11
 80087fe:	1d23      	adds	r3, r4, #4
 8008800:	f020 0007 	bic.w	r0, r0, #7
 8008804:	1ac3      	subs	r3, r0, r3
 8008806:	d0d3      	beq.n	80087b0 <_malloc_r+0x20>
 8008808:	425a      	negs	r2, r3
 800880a:	50e2      	str	r2, [r4, r3]
 800880c:	e7d0      	b.n	80087b0 <_malloc_r+0x20>
 800880e:	428c      	cmp	r4, r1
 8008810:	684b      	ldr	r3, [r1, #4]
 8008812:	bf16      	itet	ne
 8008814:	6063      	strne	r3, [r4, #4]
 8008816:	6013      	streq	r3, [r2, #0]
 8008818:	460c      	movne	r4, r1
 800881a:	e7eb      	b.n	80087f4 <_malloc_r+0x64>
 800881c:	460c      	mov	r4, r1
 800881e:	6849      	ldr	r1, [r1, #4]
 8008820:	e7cc      	b.n	80087bc <_malloc_r+0x2c>
 8008822:	1cc4      	adds	r4, r0, #3
 8008824:	f024 0403 	bic.w	r4, r4, #3
 8008828:	42a0      	cmp	r0, r4
 800882a:	d005      	beq.n	8008838 <_malloc_r+0xa8>
 800882c:	1a21      	subs	r1, r4, r0
 800882e:	4630      	mov	r0, r6
 8008830:	f000 fc64 	bl	80090fc <_sbrk_r>
 8008834:	3001      	adds	r0, #1
 8008836:	d0cf      	beq.n	80087d8 <_malloc_r+0x48>
 8008838:	6025      	str	r5, [r4, #0]
 800883a:	e7db      	b.n	80087f4 <_malloc_r+0x64>
 800883c:	2000037c 	.word	0x2000037c
 8008840:	20000380 	.word	0x20000380

08008844 <__cvt>:
 8008844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	ec55 4b10 	vmov	r4, r5, d0
 800884c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800884e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008852:	2d00      	cmp	r5, #0
 8008854:	460e      	mov	r6, r1
 8008856:	4691      	mov	r9, r2
 8008858:	4619      	mov	r1, r3
 800885a:	bfb8      	it	lt
 800885c:	4622      	movlt	r2, r4
 800885e:	462b      	mov	r3, r5
 8008860:	f027 0720 	bic.w	r7, r7, #32
 8008864:	bfbb      	ittet	lt
 8008866:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800886a:	461d      	movlt	r5, r3
 800886c:	2300      	movge	r3, #0
 800886e:	232d      	movlt	r3, #45	; 0x2d
 8008870:	bfb8      	it	lt
 8008872:	4614      	movlt	r4, r2
 8008874:	2f46      	cmp	r7, #70	; 0x46
 8008876:	700b      	strb	r3, [r1, #0]
 8008878:	d004      	beq.n	8008884 <__cvt+0x40>
 800887a:	2f45      	cmp	r7, #69	; 0x45
 800887c:	d100      	bne.n	8008880 <__cvt+0x3c>
 800887e:	3601      	adds	r6, #1
 8008880:	2102      	movs	r1, #2
 8008882:	e000      	b.n	8008886 <__cvt+0x42>
 8008884:	2103      	movs	r1, #3
 8008886:	ab03      	add	r3, sp, #12
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	ab02      	add	r3, sp, #8
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	4632      	mov	r2, r6
 8008890:	4653      	mov	r3, sl
 8008892:	ec45 4b10 	vmov	d0, r4, r5
 8008896:	f000 fcef 	bl	8009278 <_dtoa_r>
 800889a:	2f47      	cmp	r7, #71	; 0x47
 800889c:	4680      	mov	r8, r0
 800889e:	d102      	bne.n	80088a6 <__cvt+0x62>
 80088a0:	f019 0f01 	tst.w	r9, #1
 80088a4:	d026      	beq.n	80088f4 <__cvt+0xb0>
 80088a6:	2f46      	cmp	r7, #70	; 0x46
 80088a8:	eb08 0906 	add.w	r9, r8, r6
 80088ac:	d111      	bne.n	80088d2 <__cvt+0x8e>
 80088ae:	f898 3000 	ldrb.w	r3, [r8]
 80088b2:	2b30      	cmp	r3, #48	; 0x30
 80088b4:	d10a      	bne.n	80088cc <__cvt+0x88>
 80088b6:	2200      	movs	r2, #0
 80088b8:	2300      	movs	r3, #0
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f8 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c2:	b918      	cbnz	r0, 80088cc <__cvt+0x88>
 80088c4:	f1c6 0601 	rsb	r6, r6, #1
 80088c8:	f8ca 6000 	str.w	r6, [sl]
 80088cc:	f8da 3000 	ldr.w	r3, [sl]
 80088d0:	4499      	add	r9, r3
 80088d2:	2200      	movs	r2, #0
 80088d4:	2300      	movs	r3, #0
 80088d6:	4620      	mov	r0, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	f7f8 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80088de:	b938      	cbnz	r0, 80088f0 <__cvt+0xac>
 80088e0:	2230      	movs	r2, #48	; 0x30
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	454b      	cmp	r3, r9
 80088e6:	d205      	bcs.n	80088f4 <__cvt+0xb0>
 80088e8:	1c59      	adds	r1, r3, #1
 80088ea:	9103      	str	r1, [sp, #12]
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	e7f8      	b.n	80088e2 <__cvt+0x9e>
 80088f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088f8:	eba3 0308 	sub.w	r3, r3, r8
 80088fc:	4640      	mov	r0, r8
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	b004      	add	sp, #16
 8008902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008906 <__exponent>:
 8008906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008908:	2900      	cmp	r1, #0
 800890a:	4604      	mov	r4, r0
 800890c:	bfba      	itte	lt
 800890e:	4249      	neglt	r1, r1
 8008910:	232d      	movlt	r3, #45	; 0x2d
 8008912:	232b      	movge	r3, #43	; 0x2b
 8008914:	2909      	cmp	r1, #9
 8008916:	f804 2b02 	strb.w	r2, [r4], #2
 800891a:	7043      	strb	r3, [r0, #1]
 800891c:	dd20      	ble.n	8008960 <__exponent+0x5a>
 800891e:	f10d 0307 	add.w	r3, sp, #7
 8008922:	461f      	mov	r7, r3
 8008924:	260a      	movs	r6, #10
 8008926:	fb91 f5f6 	sdiv	r5, r1, r6
 800892a:	fb06 1115 	mls	r1, r6, r5, r1
 800892e:	3130      	adds	r1, #48	; 0x30
 8008930:	2d09      	cmp	r5, #9
 8008932:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008936:	f103 32ff 	add.w	r2, r3, #4294967295
 800893a:	4629      	mov	r1, r5
 800893c:	dc09      	bgt.n	8008952 <__exponent+0x4c>
 800893e:	3130      	adds	r1, #48	; 0x30
 8008940:	3b02      	subs	r3, #2
 8008942:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008946:	42bb      	cmp	r3, r7
 8008948:	4622      	mov	r2, r4
 800894a:	d304      	bcc.n	8008956 <__exponent+0x50>
 800894c:	1a10      	subs	r0, r2, r0
 800894e:	b003      	add	sp, #12
 8008950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008952:	4613      	mov	r3, r2
 8008954:	e7e7      	b.n	8008926 <__exponent+0x20>
 8008956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800895a:	f804 2b01 	strb.w	r2, [r4], #1
 800895e:	e7f2      	b.n	8008946 <__exponent+0x40>
 8008960:	2330      	movs	r3, #48	; 0x30
 8008962:	4419      	add	r1, r3
 8008964:	7083      	strb	r3, [r0, #2]
 8008966:	1d02      	adds	r2, r0, #4
 8008968:	70c1      	strb	r1, [r0, #3]
 800896a:	e7ef      	b.n	800894c <__exponent+0x46>

0800896c <_printf_float>:
 800896c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	b08d      	sub	sp, #52	; 0x34
 8008972:	460c      	mov	r4, r1
 8008974:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008978:	4616      	mov	r6, r2
 800897a:	461f      	mov	r7, r3
 800897c:	4605      	mov	r5, r0
 800897e:	f001 fa33 	bl	8009de8 <_localeconv_r>
 8008982:	6803      	ldr	r3, [r0, #0]
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	4618      	mov	r0, r3
 8008988:	f7f7 fc22 	bl	80001d0 <strlen>
 800898c:	2300      	movs	r3, #0
 800898e:	930a      	str	r3, [sp, #40]	; 0x28
 8008990:	f8d8 3000 	ldr.w	r3, [r8]
 8008994:	9005      	str	r0, [sp, #20]
 8008996:	3307      	adds	r3, #7
 8008998:	f023 0307 	bic.w	r3, r3, #7
 800899c:	f103 0208 	add.w	r2, r3, #8
 80089a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089a4:	f8d4 b000 	ldr.w	fp, [r4]
 80089a8:	f8c8 2000 	str.w	r2, [r8]
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80089b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80089b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089bc:	9307      	str	r3, [sp, #28]
 80089be:	f8cd 8018 	str.w	r8, [sp, #24]
 80089c2:	f04f 32ff 	mov.w	r2, #4294967295
 80089c6:	4ba7      	ldr	r3, [pc, #668]	; (8008c64 <_printf_float+0x2f8>)
 80089c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089cc:	f7f8 f8ae 	bl	8000b2c <__aeabi_dcmpun>
 80089d0:	bb70      	cbnz	r0, 8008a30 <_printf_float+0xc4>
 80089d2:	f04f 32ff 	mov.w	r2, #4294967295
 80089d6:	4ba3      	ldr	r3, [pc, #652]	; (8008c64 <_printf_float+0x2f8>)
 80089d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089dc:	f7f8 f888 	bl	8000af0 <__aeabi_dcmple>
 80089e0:	bb30      	cbnz	r0, 8008a30 <_printf_float+0xc4>
 80089e2:	2200      	movs	r2, #0
 80089e4:	2300      	movs	r3, #0
 80089e6:	4640      	mov	r0, r8
 80089e8:	4649      	mov	r1, r9
 80089ea:	f7f8 f877 	bl	8000adc <__aeabi_dcmplt>
 80089ee:	b110      	cbz	r0, 80089f6 <_printf_float+0x8a>
 80089f0:	232d      	movs	r3, #45	; 0x2d
 80089f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f6:	4a9c      	ldr	r2, [pc, #624]	; (8008c68 <_printf_float+0x2fc>)
 80089f8:	4b9c      	ldr	r3, [pc, #624]	; (8008c6c <_printf_float+0x300>)
 80089fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80089fe:	bf8c      	ite	hi
 8008a00:	4690      	movhi	r8, r2
 8008a02:	4698      	movls	r8, r3
 8008a04:	2303      	movs	r3, #3
 8008a06:	f02b 0204 	bic.w	r2, fp, #4
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	6022      	str	r2, [r4, #0]
 8008a0e:	f04f 0900 	mov.w	r9, #0
 8008a12:	9700      	str	r7, [sp, #0]
 8008a14:	4633      	mov	r3, r6
 8008a16:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 f9e6 	bl	8008dec <_printf_common>
 8008a20:	3001      	adds	r0, #1
 8008a22:	f040 808d 	bne.w	8008b40 <_printf_float+0x1d4>
 8008a26:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2a:	b00d      	add	sp, #52	; 0x34
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	4640      	mov	r0, r8
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f8 f878 	bl	8000b2c <__aeabi_dcmpun>
 8008a3c:	b110      	cbz	r0, 8008a44 <_printf_float+0xd8>
 8008a3e:	4a8c      	ldr	r2, [pc, #560]	; (8008c70 <_printf_float+0x304>)
 8008a40:	4b8c      	ldr	r3, [pc, #560]	; (8008c74 <_printf_float+0x308>)
 8008a42:	e7da      	b.n	80089fa <_printf_float+0x8e>
 8008a44:	6861      	ldr	r1, [r4, #4]
 8008a46:	1c4b      	adds	r3, r1, #1
 8008a48:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008a4c:	a80a      	add	r0, sp, #40	; 0x28
 8008a4e:	d13e      	bne.n	8008ace <_printf_float+0x162>
 8008a50:	2306      	movs	r3, #6
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	2300      	movs	r3, #0
 8008a56:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008a5a:	ab09      	add	r3, sp, #36	; 0x24
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	ec49 8b10 	vmov	d0, r8, r9
 8008a62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a66:	6022      	str	r2, [r4, #0]
 8008a68:	f8cd a004 	str.w	sl, [sp, #4]
 8008a6c:	6861      	ldr	r1, [r4, #4]
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f7ff fee8 	bl	8008844 <__cvt>
 8008a74:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008a78:	2b47      	cmp	r3, #71	; 0x47
 8008a7a:	4680      	mov	r8, r0
 8008a7c:	d109      	bne.n	8008a92 <_printf_float+0x126>
 8008a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a80:	1cd8      	adds	r0, r3, #3
 8008a82:	db02      	blt.n	8008a8a <_printf_float+0x11e>
 8008a84:	6862      	ldr	r2, [r4, #4]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	dd47      	ble.n	8008b1a <_printf_float+0x1ae>
 8008a8a:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a8e:	fa5f fa8a 	uxtb.w	sl, sl
 8008a92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a98:	d824      	bhi.n	8008ae4 <_printf_float+0x178>
 8008a9a:	3901      	subs	r1, #1
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008aa2:	9109      	str	r1, [sp, #36]	; 0x24
 8008aa4:	f7ff ff2f 	bl	8008906 <__exponent>
 8008aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aaa:	1813      	adds	r3, r2, r0
 8008aac:	2a01      	cmp	r2, #1
 8008aae:	4681      	mov	r9, r0
 8008ab0:	6123      	str	r3, [r4, #16]
 8008ab2:	dc02      	bgt.n	8008aba <_printf_float+0x14e>
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	07d1      	lsls	r1, r2, #31
 8008ab8:	d501      	bpl.n	8008abe <_printf_float+0x152>
 8008aba:	3301      	adds	r3, #1
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0a5      	beq.n	8008a12 <_printf_float+0xa6>
 8008ac6:	232d      	movs	r3, #45	; 0x2d
 8008ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008acc:	e7a1      	b.n	8008a12 <_printf_float+0xa6>
 8008ace:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008ad2:	f000 8177 	beq.w	8008dc4 <_printf_float+0x458>
 8008ad6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008ada:	d1bb      	bne.n	8008a54 <_printf_float+0xe8>
 8008adc:	2900      	cmp	r1, #0
 8008ade:	d1b9      	bne.n	8008a54 <_printf_float+0xe8>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e7b6      	b.n	8008a52 <_printf_float+0xe6>
 8008ae4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008ae8:	d119      	bne.n	8008b1e <_printf_float+0x1b2>
 8008aea:	2900      	cmp	r1, #0
 8008aec:	6863      	ldr	r3, [r4, #4]
 8008aee:	dd0c      	ble.n	8008b0a <_printf_float+0x19e>
 8008af0:	6121      	str	r1, [r4, #16]
 8008af2:	b913      	cbnz	r3, 8008afa <_printf_float+0x18e>
 8008af4:	6822      	ldr	r2, [r4, #0]
 8008af6:	07d2      	lsls	r2, r2, #31
 8008af8:	d502      	bpl.n	8008b00 <_printf_float+0x194>
 8008afa:	3301      	adds	r3, #1
 8008afc:	440b      	add	r3, r1
 8008afe:	6123      	str	r3, [r4, #16]
 8008b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b02:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b04:	f04f 0900 	mov.w	r9, #0
 8008b08:	e7d9      	b.n	8008abe <_printf_float+0x152>
 8008b0a:	b913      	cbnz	r3, 8008b12 <_printf_float+0x1a6>
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	07d0      	lsls	r0, r2, #31
 8008b10:	d501      	bpl.n	8008b16 <_printf_float+0x1aa>
 8008b12:	3302      	adds	r3, #2
 8008b14:	e7f3      	b.n	8008afe <_printf_float+0x192>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e7f1      	b.n	8008afe <_printf_float+0x192>
 8008b1a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008b1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b22:	4293      	cmp	r3, r2
 8008b24:	db05      	blt.n	8008b32 <_printf_float+0x1c6>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	07d1      	lsls	r1, r2, #31
 8008b2c:	d5e8      	bpl.n	8008b00 <_printf_float+0x194>
 8008b2e:	3301      	adds	r3, #1
 8008b30:	e7e5      	b.n	8008afe <_printf_float+0x192>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bfd4      	ite	le
 8008b36:	f1c3 0302 	rsble	r3, r3, #2
 8008b3a:	2301      	movgt	r3, #1
 8008b3c:	4413      	add	r3, r2
 8008b3e:	e7de      	b.n	8008afe <_printf_float+0x192>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	055a      	lsls	r2, r3, #21
 8008b44:	d407      	bmi.n	8008b56 <_printf_float+0x1ea>
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	4642      	mov	r2, r8
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	d12b      	bne.n	8008bac <_printf_float+0x240>
 8008b54:	e767      	b.n	8008a26 <_printf_float+0xba>
 8008b56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008b5a:	f240 80dc 	bls.w	8008d16 <_printf_float+0x3aa>
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2300      	movs	r3, #0
 8008b62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b66:	f7f7 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d033      	beq.n	8008bd6 <_printf_float+0x26a>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4a41      	ldr	r2, [pc, #260]	; (8008c78 <_printf_float+0x30c>)
 8008b72:	4631      	mov	r1, r6
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b8      	blx	r7
 8008b78:	3001      	adds	r0, #1
 8008b7a:	f43f af54 	beq.w	8008a26 <_printf_float+0xba>
 8008b7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b82:	429a      	cmp	r2, r3
 8008b84:	db02      	blt.n	8008b8c <_printf_float+0x220>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	07d8      	lsls	r0, r3, #31
 8008b8a:	d50f      	bpl.n	8008bac <_printf_float+0x240>
 8008b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f43f af45 	beq.w	8008a26 <_printf_float+0xba>
 8008b9c:	f04f 0800 	mov.w	r8, #0
 8008ba0:	f104 091a 	add.w	r9, r4, #26
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	4543      	cmp	r3, r8
 8008baa:	dc09      	bgt.n	8008bc0 <_printf_float+0x254>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	079b      	lsls	r3, r3, #30
 8008bb0:	f100 8103 	bmi.w	8008dba <_printf_float+0x44e>
 8008bb4:	68e0      	ldr	r0, [r4, #12]
 8008bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb8:	4298      	cmp	r0, r3
 8008bba:	bfb8      	it	lt
 8008bbc:	4618      	movlt	r0, r3
 8008bbe:	e734      	b.n	8008a2a <_printf_float+0xbe>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	464a      	mov	r2, r9
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b8      	blx	r7
 8008bca:	3001      	adds	r0, #1
 8008bcc:	f43f af2b 	beq.w	8008a26 <_printf_float+0xba>
 8008bd0:	f108 0801 	add.w	r8, r8, #1
 8008bd4:	e7e6      	b.n	8008ba4 <_printf_float+0x238>
 8008bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dc2b      	bgt.n	8008c34 <_printf_float+0x2c8>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4a26      	ldr	r2, [pc, #152]	; (8008c78 <_printf_float+0x30c>)
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f af1d 	beq.w	8008a26 <_printf_float+0xba>
 8008bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bee:	b923      	cbnz	r3, 8008bfa <_printf_float+0x28e>
 8008bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf2:	b913      	cbnz	r3, 8008bfa <_printf_float+0x28e>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	07d9      	lsls	r1, r3, #31
 8008bf8:	d5d8      	bpl.n	8008bac <_printf_float+0x240>
 8008bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b8      	blx	r7
 8008c04:	3001      	adds	r0, #1
 8008c06:	f43f af0e 	beq.w	8008a26 <_printf_float+0xba>
 8008c0a:	f04f 0900 	mov.w	r9, #0
 8008c0e:	f104 0a1a 	add.w	sl, r4, #26
 8008c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c14:	425b      	negs	r3, r3
 8008c16:	454b      	cmp	r3, r9
 8008c18:	dc01      	bgt.n	8008c1e <_printf_float+0x2b2>
 8008c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1c:	e794      	b.n	8008b48 <_printf_float+0x1dc>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4652      	mov	r2, sl
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f aefc 	beq.w	8008a26 <_printf_float+0xba>
 8008c2e:	f109 0901 	add.w	r9, r9, #1
 8008c32:	e7ee      	b.n	8008c12 <_printf_float+0x2a6>
 8008c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	bfa8      	it	ge
 8008c3c:	461a      	movge	r2, r3
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	4691      	mov	r9, r2
 8008c42:	dd07      	ble.n	8008c54 <_printf_float+0x2e8>
 8008c44:	4613      	mov	r3, r2
 8008c46:	4631      	mov	r1, r6
 8008c48:	4642      	mov	r2, r8
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	47b8      	blx	r7
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f43f aee9 	beq.w	8008a26 <_printf_float+0xba>
 8008c54:	f104 031a 	add.w	r3, r4, #26
 8008c58:	f04f 0b00 	mov.w	fp, #0
 8008c5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c60:	9306      	str	r3, [sp, #24]
 8008c62:	e015      	b.n	8008c90 <_printf_float+0x324>
 8008c64:	7fefffff 	.word	0x7fefffff
 8008c68:	0800a7f0 	.word	0x0800a7f0
 8008c6c:	0800a7ec 	.word	0x0800a7ec
 8008c70:	0800a7f8 	.word	0x0800a7f8
 8008c74:	0800a7f4 	.word	0x0800a7f4
 8008c78:	0800a7fc 	.word	0x0800a7fc
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	9a06      	ldr	r2, [sp, #24]
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f aecd 	beq.w	8008a26 <_printf_float+0xba>
 8008c8c:	f10b 0b01 	add.w	fp, fp, #1
 8008c90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c94:	ebaa 0309 	sub.w	r3, sl, r9
 8008c98:	455b      	cmp	r3, fp
 8008c9a:	dcef      	bgt.n	8008c7c <_printf_float+0x310>
 8008c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	44d0      	add	r8, sl
 8008ca4:	db15      	blt.n	8008cd2 <_printf_float+0x366>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	07da      	lsls	r2, r3, #31
 8008caa:	d412      	bmi.n	8008cd2 <_printf_float+0x366>
 8008cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cb0:	eba3 020a 	sub.w	r2, r3, sl
 8008cb4:	eba3 0a01 	sub.w	sl, r3, r1
 8008cb8:	4592      	cmp	sl, r2
 8008cba:	bfa8      	it	ge
 8008cbc:	4692      	movge	sl, r2
 8008cbe:	f1ba 0f00 	cmp.w	sl, #0
 8008cc2:	dc0e      	bgt.n	8008ce2 <_printf_float+0x376>
 8008cc4:	f04f 0800 	mov.w	r8, #0
 8008cc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ccc:	f104 091a 	add.w	r9, r4, #26
 8008cd0:	e019      	b.n	8008d06 <_printf_float+0x39a>
 8008cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b8      	blx	r7
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d1e5      	bne.n	8008cac <_printf_float+0x340>
 8008ce0:	e6a1      	b.n	8008a26 <_printf_float+0xba>
 8008ce2:	4653      	mov	r3, sl
 8008ce4:	4642      	mov	r2, r8
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4628      	mov	r0, r5
 8008cea:	47b8      	blx	r7
 8008cec:	3001      	adds	r0, #1
 8008cee:	d1e9      	bne.n	8008cc4 <_printf_float+0x358>
 8008cf0:	e699      	b.n	8008a26 <_printf_float+0xba>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	464a      	mov	r2, r9
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	47b8      	blx	r7
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	f43f ae92 	beq.w	8008a26 <_printf_float+0xba>
 8008d02:	f108 0801 	add.w	r8, r8, #1
 8008d06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	eba3 030a 	sub.w	r3, r3, sl
 8008d10:	4543      	cmp	r3, r8
 8008d12:	dcee      	bgt.n	8008cf2 <_printf_float+0x386>
 8008d14:	e74a      	b.n	8008bac <_printf_float+0x240>
 8008d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d18:	2a01      	cmp	r2, #1
 8008d1a:	dc01      	bgt.n	8008d20 <_printf_float+0x3b4>
 8008d1c:	07db      	lsls	r3, r3, #31
 8008d1e:	d53a      	bpl.n	8008d96 <_printf_float+0x42a>
 8008d20:	2301      	movs	r3, #1
 8008d22:	4642      	mov	r2, r8
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f43f ae7b 	beq.w	8008a26 <_printf_float+0xba>
 8008d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d34:	4631      	mov	r1, r6
 8008d36:	4628      	mov	r0, r5
 8008d38:	47b8      	blx	r7
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	f108 0801 	add.w	r8, r8, #1
 8008d40:	f43f ae71 	beq.w	8008a26 <_printf_float+0xba>
 8008d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d46:	2200      	movs	r2, #0
 8008d48:	f103 3aff 	add.w	sl, r3, #4294967295
 8008d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d50:	2300      	movs	r3, #0
 8008d52:	f7f7 feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d56:	b9c8      	cbnz	r0, 8008d8c <_printf_float+0x420>
 8008d58:	4653      	mov	r3, sl
 8008d5a:	4642      	mov	r2, r8
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	d10e      	bne.n	8008d84 <_printf_float+0x418>
 8008d66:	e65e      	b.n	8008a26 <_printf_float+0xba>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	4652      	mov	r2, sl
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	f43f ae57 	beq.w	8008a26 <_printf_float+0xba>
 8008d78:	f108 0801 	add.w	r8, r8, #1
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	4543      	cmp	r3, r8
 8008d82:	dcf1      	bgt.n	8008d68 <_printf_float+0x3fc>
 8008d84:	464b      	mov	r3, r9
 8008d86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d8a:	e6de      	b.n	8008b4a <_printf_float+0x1de>
 8008d8c:	f04f 0800 	mov.w	r8, #0
 8008d90:	f104 0a1a 	add.w	sl, r4, #26
 8008d94:	e7f2      	b.n	8008d7c <_printf_float+0x410>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e7df      	b.n	8008d5a <_printf_float+0x3ee>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	464a      	mov	r2, r9
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4628      	mov	r0, r5
 8008da2:	47b8      	blx	r7
 8008da4:	3001      	adds	r0, #1
 8008da6:	f43f ae3e 	beq.w	8008a26 <_printf_float+0xba>
 8008daa:	f108 0801 	add.w	r8, r8, #1
 8008dae:	68e3      	ldr	r3, [r4, #12]
 8008db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	4543      	cmp	r3, r8
 8008db6:	dcf0      	bgt.n	8008d9a <_printf_float+0x42e>
 8008db8:	e6fc      	b.n	8008bb4 <_printf_float+0x248>
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	f104 0919 	add.w	r9, r4, #25
 8008dc2:	e7f4      	b.n	8008dae <_printf_float+0x442>
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	f43f ae8b 	beq.w	8008ae0 <_printf_float+0x174>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008dd0:	ab09      	add	r3, sp, #36	; 0x24
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	ec49 8b10 	vmov	d0, r8, r9
 8008dd8:	6022      	str	r2, [r4, #0]
 8008dda:	f8cd a004 	str.w	sl, [sp, #4]
 8008dde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008de2:	4628      	mov	r0, r5
 8008de4:	f7ff fd2e 	bl	8008844 <__cvt>
 8008de8:	4680      	mov	r8, r0
 8008dea:	e648      	b.n	8008a7e <_printf_float+0x112>

08008dec <_printf_common>:
 8008dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	4691      	mov	r9, r2
 8008df2:	461f      	mov	r7, r3
 8008df4:	688a      	ldr	r2, [r1, #8]
 8008df6:	690b      	ldr	r3, [r1, #16]
 8008df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	bfb8      	it	lt
 8008e00:	4613      	movlt	r3, r2
 8008e02:	f8c9 3000 	str.w	r3, [r9]
 8008e06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	b112      	cbz	r2, 8008e16 <_printf_common+0x2a>
 8008e10:	3301      	adds	r3, #1
 8008e12:	f8c9 3000 	str.w	r3, [r9]
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	0699      	lsls	r1, r3, #26
 8008e1a:	bf42      	ittt	mi
 8008e1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e20:	3302      	addmi	r3, #2
 8008e22:	f8c9 3000 	strmi.w	r3, [r9]
 8008e26:	6825      	ldr	r5, [r4, #0]
 8008e28:	f015 0506 	ands.w	r5, r5, #6
 8008e2c:	d107      	bne.n	8008e3e <_printf_common+0x52>
 8008e2e:	f104 0a19 	add.w	sl, r4, #25
 8008e32:	68e3      	ldr	r3, [r4, #12]
 8008e34:	f8d9 2000 	ldr.w	r2, [r9]
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	42ab      	cmp	r3, r5
 8008e3c:	dc28      	bgt.n	8008e90 <_printf_common+0xa4>
 8008e3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	3300      	adds	r3, #0
 8008e46:	bf18      	it	ne
 8008e48:	2301      	movne	r3, #1
 8008e4a:	0692      	lsls	r2, r2, #26
 8008e4c:	d42d      	bmi.n	8008eaa <_printf_common+0xbe>
 8008e4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e52:	4639      	mov	r1, r7
 8008e54:	4630      	mov	r0, r6
 8008e56:	47c0      	blx	r8
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d020      	beq.n	8008e9e <_printf_common+0xb2>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	68e5      	ldr	r5, [r4, #12]
 8008e60:	f8d9 2000 	ldr.w	r2, [r9]
 8008e64:	f003 0306 	and.w	r3, r3, #6
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	bf08      	it	eq
 8008e6c:	1aad      	subeq	r5, r5, r2
 8008e6e:	68a3      	ldr	r3, [r4, #8]
 8008e70:	6922      	ldr	r2, [r4, #16]
 8008e72:	bf0c      	ite	eq
 8008e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e78:	2500      	movne	r5, #0
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	bfc4      	itt	gt
 8008e7e:	1a9b      	subgt	r3, r3, r2
 8008e80:	18ed      	addgt	r5, r5, r3
 8008e82:	f04f 0900 	mov.w	r9, #0
 8008e86:	341a      	adds	r4, #26
 8008e88:	454d      	cmp	r5, r9
 8008e8a:	d11a      	bne.n	8008ec2 <_printf_common+0xd6>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e008      	b.n	8008ea2 <_printf_common+0xb6>
 8008e90:	2301      	movs	r3, #1
 8008e92:	4652      	mov	r2, sl
 8008e94:	4639      	mov	r1, r7
 8008e96:	4630      	mov	r0, r6
 8008e98:	47c0      	blx	r8
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d103      	bne.n	8008ea6 <_printf_common+0xba>
 8008e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea6:	3501      	adds	r5, #1
 8008ea8:	e7c3      	b.n	8008e32 <_printf_common+0x46>
 8008eaa:	18e1      	adds	r1, r4, r3
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	2030      	movs	r0, #48	; 0x30
 8008eb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eb4:	4422      	add	r2, r4
 8008eb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ebe:	3302      	adds	r3, #2
 8008ec0:	e7c5      	b.n	8008e4e <_printf_common+0x62>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	4630      	mov	r0, r6
 8008eca:	47c0      	blx	r8
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d0e6      	beq.n	8008e9e <_printf_common+0xb2>
 8008ed0:	f109 0901 	add.w	r9, r9, #1
 8008ed4:	e7d8      	b.n	8008e88 <_printf_common+0x9c>
	...

08008ed8 <_printf_i>:
 8008ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008edc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	7e09      	ldrb	r1, [r1, #24]
 8008ee4:	b085      	sub	sp, #20
 8008ee6:	296e      	cmp	r1, #110	; 0x6e
 8008ee8:	4617      	mov	r7, r2
 8008eea:	4606      	mov	r6, r0
 8008eec:	4698      	mov	r8, r3
 8008eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ef0:	f000 80b3 	beq.w	800905a <_printf_i+0x182>
 8008ef4:	d822      	bhi.n	8008f3c <_printf_i+0x64>
 8008ef6:	2963      	cmp	r1, #99	; 0x63
 8008ef8:	d036      	beq.n	8008f68 <_printf_i+0x90>
 8008efa:	d80a      	bhi.n	8008f12 <_printf_i+0x3a>
 8008efc:	2900      	cmp	r1, #0
 8008efe:	f000 80b9 	beq.w	8009074 <_printf_i+0x19c>
 8008f02:	2958      	cmp	r1, #88	; 0x58
 8008f04:	f000 8083 	beq.w	800900e <_printf_i+0x136>
 8008f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f10:	e032      	b.n	8008f78 <_printf_i+0xa0>
 8008f12:	2964      	cmp	r1, #100	; 0x64
 8008f14:	d001      	beq.n	8008f1a <_printf_i+0x42>
 8008f16:	2969      	cmp	r1, #105	; 0x69
 8008f18:	d1f6      	bne.n	8008f08 <_printf_i+0x30>
 8008f1a:	6820      	ldr	r0, [r4, #0]
 8008f1c:	6813      	ldr	r3, [r2, #0]
 8008f1e:	0605      	lsls	r5, r0, #24
 8008f20:	f103 0104 	add.w	r1, r3, #4
 8008f24:	d52a      	bpl.n	8008f7c <_printf_i+0xa4>
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6011      	str	r1, [r2, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da03      	bge.n	8008f36 <_printf_i+0x5e>
 8008f2e:	222d      	movs	r2, #45	; 0x2d
 8008f30:	425b      	negs	r3, r3
 8008f32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f36:	486f      	ldr	r0, [pc, #444]	; (80090f4 <_printf_i+0x21c>)
 8008f38:	220a      	movs	r2, #10
 8008f3a:	e039      	b.n	8008fb0 <_printf_i+0xd8>
 8008f3c:	2973      	cmp	r1, #115	; 0x73
 8008f3e:	f000 809d 	beq.w	800907c <_printf_i+0x1a4>
 8008f42:	d808      	bhi.n	8008f56 <_printf_i+0x7e>
 8008f44:	296f      	cmp	r1, #111	; 0x6f
 8008f46:	d020      	beq.n	8008f8a <_printf_i+0xb2>
 8008f48:	2970      	cmp	r1, #112	; 0x70
 8008f4a:	d1dd      	bne.n	8008f08 <_printf_i+0x30>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	f043 0320 	orr.w	r3, r3, #32
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	e003      	b.n	8008f5e <_printf_i+0x86>
 8008f56:	2975      	cmp	r1, #117	; 0x75
 8008f58:	d017      	beq.n	8008f8a <_printf_i+0xb2>
 8008f5a:	2978      	cmp	r1, #120	; 0x78
 8008f5c:	d1d4      	bne.n	8008f08 <_printf_i+0x30>
 8008f5e:	2378      	movs	r3, #120	; 0x78
 8008f60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f64:	4864      	ldr	r0, [pc, #400]	; (80090f8 <_printf_i+0x220>)
 8008f66:	e055      	b.n	8009014 <_printf_i+0x13c>
 8008f68:	6813      	ldr	r3, [r2, #0]
 8008f6a:	1d19      	adds	r1, r3, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6011      	str	r1, [r2, #0]
 8008f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e08c      	b.n	8009096 <_printf_i+0x1be>
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6011      	str	r1, [r2, #0]
 8008f80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f84:	bf18      	it	ne
 8008f86:	b21b      	sxthne	r3, r3
 8008f88:	e7cf      	b.n	8008f2a <_printf_i+0x52>
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	6825      	ldr	r5, [r4, #0]
 8008f8e:	1d18      	adds	r0, r3, #4
 8008f90:	6010      	str	r0, [r2, #0]
 8008f92:	0628      	lsls	r0, r5, #24
 8008f94:	d501      	bpl.n	8008f9a <_printf_i+0xc2>
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	e002      	b.n	8008fa0 <_printf_i+0xc8>
 8008f9a:	0668      	lsls	r0, r5, #25
 8008f9c:	d5fb      	bpl.n	8008f96 <_printf_i+0xbe>
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	4854      	ldr	r0, [pc, #336]	; (80090f4 <_printf_i+0x21c>)
 8008fa2:	296f      	cmp	r1, #111	; 0x6f
 8008fa4:	bf14      	ite	ne
 8008fa6:	220a      	movne	r2, #10
 8008fa8:	2208      	moveq	r2, #8
 8008faa:	2100      	movs	r1, #0
 8008fac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fb0:	6865      	ldr	r5, [r4, #4]
 8008fb2:	60a5      	str	r5, [r4, #8]
 8008fb4:	2d00      	cmp	r5, #0
 8008fb6:	f2c0 8095 	blt.w	80090e4 <_printf_i+0x20c>
 8008fba:	6821      	ldr	r1, [r4, #0]
 8008fbc:	f021 0104 	bic.w	r1, r1, #4
 8008fc0:	6021      	str	r1, [r4, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d13d      	bne.n	8009042 <_printf_i+0x16a>
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	f040 808e 	bne.w	80090e8 <_printf_i+0x210>
 8008fcc:	4665      	mov	r5, ip
 8008fce:	2a08      	cmp	r2, #8
 8008fd0:	d10b      	bne.n	8008fea <_printf_i+0x112>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	07db      	lsls	r3, r3, #31
 8008fd6:	d508      	bpl.n	8008fea <_printf_i+0x112>
 8008fd8:	6923      	ldr	r3, [r4, #16]
 8008fda:	6862      	ldr	r2, [r4, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	bfde      	ittt	le
 8008fe0:	2330      	movle	r3, #48	; 0x30
 8008fe2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fe6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fea:	ebac 0305 	sub.w	r3, ip, r5
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	f8cd 8000 	str.w	r8, [sp]
 8008ff4:	463b      	mov	r3, r7
 8008ff6:	aa03      	add	r2, sp, #12
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff fef6 	bl	8008dec <_printf_common>
 8009000:	3001      	adds	r0, #1
 8009002:	d14d      	bne.n	80090a0 <_printf_i+0x1c8>
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	b005      	add	sp, #20
 800900a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800900e:	4839      	ldr	r0, [pc, #228]	; (80090f4 <_printf_i+0x21c>)
 8009010:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009014:	6813      	ldr	r3, [r2, #0]
 8009016:	6821      	ldr	r1, [r4, #0]
 8009018:	1d1d      	adds	r5, r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6015      	str	r5, [r2, #0]
 800901e:	060a      	lsls	r2, r1, #24
 8009020:	d50b      	bpl.n	800903a <_printf_i+0x162>
 8009022:	07ca      	lsls	r2, r1, #31
 8009024:	bf44      	itt	mi
 8009026:	f041 0120 	orrmi.w	r1, r1, #32
 800902a:	6021      	strmi	r1, [r4, #0]
 800902c:	b91b      	cbnz	r3, 8009036 <_printf_i+0x15e>
 800902e:	6822      	ldr	r2, [r4, #0]
 8009030:	f022 0220 	bic.w	r2, r2, #32
 8009034:	6022      	str	r2, [r4, #0]
 8009036:	2210      	movs	r2, #16
 8009038:	e7b7      	b.n	8008faa <_printf_i+0xd2>
 800903a:	064d      	lsls	r5, r1, #25
 800903c:	bf48      	it	mi
 800903e:	b29b      	uxthmi	r3, r3
 8009040:	e7ef      	b.n	8009022 <_printf_i+0x14a>
 8009042:	4665      	mov	r5, ip
 8009044:	fbb3 f1f2 	udiv	r1, r3, r2
 8009048:	fb02 3311 	mls	r3, r2, r1, r3
 800904c:	5cc3      	ldrb	r3, [r0, r3]
 800904e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009052:	460b      	mov	r3, r1
 8009054:	2900      	cmp	r1, #0
 8009056:	d1f5      	bne.n	8009044 <_printf_i+0x16c>
 8009058:	e7b9      	b.n	8008fce <_printf_i+0xf6>
 800905a:	6813      	ldr	r3, [r2, #0]
 800905c:	6825      	ldr	r5, [r4, #0]
 800905e:	6961      	ldr	r1, [r4, #20]
 8009060:	1d18      	adds	r0, r3, #4
 8009062:	6010      	str	r0, [r2, #0]
 8009064:	0628      	lsls	r0, r5, #24
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	d501      	bpl.n	800906e <_printf_i+0x196>
 800906a:	6019      	str	r1, [r3, #0]
 800906c:	e002      	b.n	8009074 <_printf_i+0x19c>
 800906e:	066a      	lsls	r2, r5, #25
 8009070:	d5fb      	bpl.n	800906a <_printf_i+0x192>
 8009072:	8019      	strh	r1, [r3, #0]
 8009074:	2300      	movs	r3, #0
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	4665      	mov	r5, ip
 800907a:	e7b9      	b.n	8008ff0 <_printf_i+0x118>
 800907c:	6813      	ldr	r3, [r2, #0]
 800907e:	1d19      	adds	r1, r3, #4
 8009080:	6011      	str	r1, [r2, #0]
 8009082:	681d      	ldr	r5, [r3, #0]
 8009084:	6862      	ldr	r2, [r4, #4]
 8009086:	2100      	movs	r1, #0
 8009088:	4628      	mov	r0, r5
 800908a:	f7f7 f8a9 	bl	80001e0 <memchr>
 800908e:	b108      	cbz	r0, 8009094 <_printf_i+0x1bc>
 8009090:	1b40      	subs	r0, r0, r5
 8009092:	6060      	str	r0, [r4, #4]
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	2300      	movs	r3, #0
 800909a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800909e:	e7a7      	b.n	8008ff0 <_printf_i+0x118>
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	462a      	mov	r2, r5
 80090a4:	4639      	mov	r1, r7
 80090a6:	4630      	mov	r0, r6
 80090a8:	47c0      	blx	r8
 80090aa:	3001      	adds	r0, #1
 80090ac:	d0aa      	beq.n	8009004 <_printf_i+0x12c>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	079b      	lsls	r3, r3, #30
 80090b2:	d413      	bmi.n	80090dc <_printf_i+0x204>
 80090b4:	68e0      	ldr	r0, [r4, #12]
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	4298      	cmp	r0, r3
 80090ba:	bfb8      	it	lt
 80090bc:	4618      	movlt	r0, r3
 80090be:	e7a3      	b.n	8009008 <_printf_i+0x130>
 80090c0:	2301      	movs	r3, #1
 80090c2:	464a      	mov	r2, r9
 80090c4:	4639      	mov	r1, r7
 80090c6:	4630      	mov	r0, r6
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d09a      	beq.n	8009004 <_printf_i+0x12c>
 80090ce:	3501      	adds	r5, #1
 80090d0:	68e3      	ldr	r3, [r4, #12]
 80090d2:	9a03      	ldr	r2, [sp, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	42ab      	cmp	r3, r5
 80090d8:	dcf2      	bgt.n	80090c0 <_printf_i+0x1e8>
 80090da:	e7eb      	b.n	80090b4 <_printf_i+0x1dc>
 80090dc:	2500      	movs	r5, #0
 80090de:	f104 0919 	add.w	r9, r4, #25
 80090e2:	e7f5      	b.n	80090d0 <_printf_i+0x1f8>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1ac      	bne.n	8009042 <_printf_i+0x16a>
 80090e8:	7803      	ldrb	r3, [r0, #0]
 80090ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f2:	e76c      	b.n	8008fce <_printf_i+0xf6>
 80090f4:	0800a7fe 	.word	0x0800a7fe
 80090f8:	0800a80f 	.word	0x0800a80f

080090fc <_sbrk_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4c06      	ldr	r4, [pc, #24]	; (8009118 <_sbrk_r+0x1c>)
 8009100:	2300      	movs	r3, #0
 8009102:	4605      	mov	r5, r0
 8009104:	4608      	mov	r0, r1
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	f7f8 fac8 	bl	800169c <_sbrk>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d102      	bne.n	8009116 <_sbrk_r+0x1a>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	b103      	cbz	r3, 8009116 <_sbrk_r+0x1a>
 8009114:	602b      	str	r3, [r5, #0]
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	20001cf4 	.word	0x20001cf4

0800911c <siprintf>:
 800911c:	b40e      	push	{r1, r2, r3}
 800911e:	b500      	push	{lr}
 8009120:	b09c      	sub	sp, #112	; 0x70
 8009122:	ab1d      	add	r3, sp, #116	; 0x74
 8009124:	9002      	str	r0, [sp, #8]
 8009126:	9006      	str	r0, [sp, #24]
 8009128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800912c:	4809      	ldr	r0, [pc, #36]	; (8009154 <siprintf+0x38>)
 800912e:	9107      	str	r1, [sp, #28]
 8009130:	9104      	str	r1, [sp, #16]
 8009132:	4909      	ldr	r1, [pc, #36]	; (8009158 <siprintf+0x3c>)
 8009134:	f853 2b04 	ldr.w	r2, [r3], #4
 8009138:	9105      	str	r1, [sp, #20]
 800913a:	6800      	ldr	r0, [r0, #0]
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	a902      	add	r1, sp, #8
 8009140:	f001 f9b0 	bl	800a4a4 <_svfiprintf_r>
 8009144:	9b02      	ldr	r3, [sp, #8]
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	b01c      	add	sp, #112	; 0x70
 800914c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009150:	b003      	add	sp, #12
 8009152:	4770      	bx	lr
 8009154:	20000188 	.word	0x20000188
 8009158:	ffff0208 	.word	0xffff0208

0800915c <quorem>:
 800915c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	6903      	ldr	r3, [r0, #16]
 8009162:	690c      	ldr	r4, [r1, #16]
 8009164:	42a3      	cmp	r3, r4
 8009166:	4680      	mov	r8, r0
 8009168:	f2c0 8082 	blt.w	8009270 <quorem+0x114>
 800916c:	3c01      	subs	r4, #1
 800916e:	f101 0714 	add.w	r7, r1, #20
 8009172:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009176:	f100 0614 	add.w	r6, r0, #20
 800917a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800917e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009182:	eb06 030c 	add.w	r3, r6, ip
 8009186:	3501      	adds	r5, #1
 8009188:	eb07 090c 	add.w	r9, r7, ip
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009192:	b395      	cbz	r5, 80091fa <quorem+0x9e>
 8009194:	f04f 0a00 	mov.w	sl, #0
 8009198:	4638      	mov	r0, r7
 800919a:	46b6      	mov	lr, r6
 800919c:	46d3      	mov	fp, sl
 800919e:	f850 2b04 	ldr.w	r2, [r0], #4
 80091a2:	b293      	uxth	r3, r2
 80091a4:	fb05 a303 	mla	r3, r5, r3, sl
 80091a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	ebab 0303 	sub.w	r3, fp, r3
 80091b2:	0c12      	lsrs	r2, r2, #16
 80091b4:	f8de b000 	ldr.w	fp, [lr]
 80091b8:	fb05 a202 	mla	r2, r5, r2, sl
 80091bc:	fa13 f38b 	uxtah	r3, r3, fp
 80091c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80091c4:	fa1f fb82 	uxth.w	fp, r2
 80091c8:	f8de 2000 	ldr.w	r2, [lr]
 80091cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80091d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091da:	4581      	cmp	r9, r0
 80091dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80091e0:	f84e 3b04 	str.w	r3, [lr], #4
 80091e4:	d2db      	bcs.n	800919e <quorem+0x42>
 80091e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80091ea:	b933      	cbnz	r3, 80091fa <quorem+0x9e>
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	3b04      	subs	r3, #4
 80091f0:	429e      	cmp	r6, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	d330      	bcc.n	8009258 <quorem+0xfc>
 80091f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80091fa:	4640      	mov	r0, r8
 80091fc:	f001 f824 	bl	800a248 <__mcmp>
 8009200:	2800      	cmp	r0, #0
 8009202:	db25      	blt.n	8009250 <quorem+0xf4>
 8009204:	3501      	adds	r5, #1
 8009206:	4630      	mov	r0, r6
 8009208:	f04f 0c00 	mov.w	ip, #0
 800920c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009210:	f8d0 e000 	ldr.w	lr, [r0]
 8009214:	b293      	uxth	r3, r2
 8009216:	ebac 0303 	sub.w	r3, ip, r3
 800921a:	0c12      	lsrs	r2, r2, #16
 800921c:	fa13 f38e 	uxtah	r3, r3, lr
 8009220:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009228:	b29b      	uxth	r3, r3
 800922a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800922e:	45b9      	cmp	r9, r7
 8009230:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009234:	f840 3b04 	str.w	r3, [r0], #4
 8009238:	d2e8      	bcs.n	800920c <quorem+0xb0>
 800923a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800923e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009242:	b92a      	cbnz	r2, 8009250 <quorem+0xf4>
 8009244:	3b04      	subs	r3, #4
 8009246:	429e      	cmp	r6, r3
 8009248:	461a      	mov	r2, r3
 800924a:	d30b      	bcc.n	8009264 <quorem+0x108>
 800924c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009250:	4628      	mov	r0, r5
 8009252:	b003      	add	sp, #12
 8009254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009258:	6812      	ldr	r2, [r2, #0]
 800925a:	3b04      	subs	r3, #4
 800925c:	2a00      	cmp	r2, #0
 800925e:	d1ca      	bne.n	80091f6 <quorem+0x9a>
 8009260:	3c01      	subs	r4, #1
 8009262:	e7c5      	b.n	80091f0 <quorem+0x94>
 8009264:	6812      	ldr	r2, [r2, #0]
 8009266:	3b04      	subs	r3, #4
 8009268:	2a00      	cmp	r2, #0
 800926a:	d1ef      	bne.n	800924c <quorem+0xf0>
 800926c:	3c01      	subs	r4, #1
 800926e:	e7ea      	b.n	8009246 <quorem+0xea>
 8009270:	2000      	movs	r0, #0
 8009272:	e7ee      	b.n	8009252 <quorem+0xf6>
 8009274:	0000      	movs	r0, r0
	...

08009278 <_dtoa_r>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	ec57 6b10 	vmov	r6, r7, d0
 8009280:	b097      	sub	sp, #92	; 0x5c
 8009282:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009284:	9106      	str	r1, [sp, #24]
 8009286:	4604      	mov	r4, r0
 8009288:	920b      	str	r2, [sp, #44]	; 0x2c
 800928a:	9312      	str	r3, [sp, #72]	; 0x48
 800928c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009290:	e9cd 6700 	strd	r6, r7, [sp]
 8009294:	b93d      	cbnz	r5, 80092a6 <_dtoa_r+0x2e>
 8009296:	2010      	movs	r0, #16
 8009298:	f7ff fa14 	bl	80086c4 <malloc>
 800929c:	6260      	str	r0, [r4, #36]	; 0x24
 800929e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092a2:	6005      	str	r5, [r0, #0]
 80092a4:	60c5      	str	r5, [r0, #12]
 80092a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a8:	6819      	ldr	r1, [r3, #0]
 80092aa:	b151      	cbz	r1, 80092c2 <_dtoa_r+0x4a>
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	604a      	str	r2, [r1, #4]
 80092b0:	2301      	movs	r3, #1
 80092b2:	4093      	lsls	r3, r2
 80092b4:	608b      	str	r3, [r1, #8]
 80092b6:	4620      	mov	r0, r4
 80092b8:	f000 fde5 	bl	8009e86 <_Bfree>
 80092bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	1e3b      	subs	r3, r7, #0
 80092c4:	bfbb      	ittet	lt
 80092c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092ca:	9301      	strlt	r3, [sp, #4]
 80092cc:	2300      	movge	r3, #0
 80092ce:	2201      	movlt	r2, #1
 80092d0:	bfac      	ite	ge
 80092d2:	f8c8 3000 	strge.w	r3, [r8]
 80092d6:	f8c8 2000 	strlt.w	r2, [r8]
 80092da:	4baf      	ldr	r3, [pc, #700]	; (8009598 <_dtoa_r+0x320>)
 80092dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092e0:	ea33 0308 	bics.w	r3, r3, r8
 80092e4:	d114      	bne.n	8009310 <_dtoa_r+0x98>
 80092e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	9b00      	ldr	r3, [sp, #0]
 80092f0:	b923      	cbnz	r3, 80092fc <_dtoa_r+0x84>
 80092f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f000 8542 	beq.w	8009d80 <_dtoa_r+0xb08>
 80092fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80095ac <_dtoa_r+0x334>
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 8544 	beq.w	8009d90 <_dtoa_r+0xb18>
 8009308:	f10b 0303 	add.w	r3, fp, #3
 800930c:	f000 bd3e 	b.w	8009d8c <_dtoa_r+0xb14>
 8009310:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009314:	2200      	movs	r2, #0
 8009316:	2300      	movs	r3, #0
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	f7f7 fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009320:	4681      	mov	r9, r0
 8009322:	b168      	cbz	r0, 8009340 <_dtoa_r+0xc8>
 8009324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009326:	2301      	movs	r3, #1
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8524 	beq.w	8009d7a <_dtoa_r+0xb02>
 8009332:	4b9a      	ldr	r3, [pc, #616]	; (800959c <_dtoa_r+0x324>)
 8009334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009336:	f103 3bff 	add.w	fp, r3, #4294967295
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	f000 bd28 	b.w	8009d90 <_dtoa_r+0xb18>
 8009340:	aa14      	add	r2, sp, #80	; 0x50
 8009342:	a915      	add	r1, sp, #84	; 0x54
 8009344:	ec47 6b10 	vmov	d0, r6, r7
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fff4 	bl	800a336 <__d2b>
 800934e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009352:	9004      	str	r0, [sp, #16]
 8009354:	2d00      	cmp	r5, #0
 8009356:	d07c      	beq.n	8009452 <_dtoa_r+0x1da>
 8009358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800935c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009360:	46b2      	mov	sl, r6
 8009362:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800936a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800936e:	2200      	movs	r2, #0
 8009370:	4b8b      	ldr	r3, [pc, #556]	; (80095a0 <_dtoa_r+0x328>)
 8009372:	4650      	mov	r0, sl
 8009374:	4659      	mov	r1, fp
 8009376:	f7f6 ff87 	bl	8000288 <__aeabi_dsub>
 800937a:	a381      	add	r3, pc, #516	; (adr r3, 8009580 <_dtoa_r+0x308>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f7 f93a 	bl	80005f8 <__aeabi_dmul>
 8009384:	a380      	add	r3, pc, #512	; (adr r3, 8009588 <_dtoa_r+0x310>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f6 ff7f 	bl	800028c <__adddf3>
 800938e:	4606      	mov	r6, r0
 8009390:	4628      	mov	r0, r5
 8009392:	460f      	mov	r7, r1
 8009394:	f7f7 f8c6 	bl	8000524 <__aeabi_i2d>
 8009398:	a37d      	add	r3, pc, #500	; (adr r3, 8009590 <_dtoa_r+0x318>)
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	f7f6 ff6f 	bl	800028c <__adddf3>
 80093ae:	4606      	mov	r6, r0
 80093b0:	460f      	mov	r7, r1
 80093b2:	f7f7 fbd1 	bl	8000b58 <__aeabi_d2iz>
 80093b6:	2200      	movs	r2, #0
 80093b8:	4682      	mov	sl, r0
 80093ba:	2300      	movs	r3, #0
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fb8c 	bl	8000adc <__aeabi_dcmplt>
 80093c4:	b148      	cbz	r0, 80093da <_dtoa_r+0x162>
 80093c6:	4650      	mov	r0, sl
 80093c8:	f7f7 f8ac 	bl	8000524 <__aeabi_i2d>
 80093cc:	4632      	mov	r2, r6
 80093ce:	463b      	mov	r3, r7
 80093d0:	f7f7 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80093d4:	b908      	cbnz	r0, 80093da <_dtoa_r+0x162>
 80093d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093da:	f1ba 0f16 	cmp.w	sl, #22
 80093de:	d859      	bhi.n	8009494 <_dtoa_r+0x21c>
 80093e0:	4970      	ldr	r1, [pc, #448]	; (80095a4 <_dtoa_r+0x32c>)
 80093e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80093e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ee:	f7f7 fb93 	bl	8000b18 <__aeabi_dcmpgt>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d050      	beq.n	8009498 <_dtoa_r+0x220>
 80093f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093fa:	2300      	movs	r3, #0
 80093fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80093fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009400:	1b5d      	subs	r5, r3, r5
 8009402:	f1b5 0801 	subs.w	r8, r5, #1
 8009406:	bf49      	itett	mi
 8009408:	f1c5 0301 	rsbmi	r3, r5, #1
 800940c:	2300      	movpl	r3, #0
 800940e:	9305      	strmi	r3, [sp, #20]
 8009410:	f04f 0800 	movmi.w	r8, #0
 8009414:	bf58      	it	pl
 8009416:	9305      	strpl	r3, [sp, #20]
 8009418:	f1ba 0f00 	cmp.w	sl, #0
 800941c:	db3e      	blt.n	800949c <_dtoa_r+0x224>
 800941e:	2300      	movs	r3, #0
 8009420:	44d0      	add	r8, sl
 8009422:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009426:	9307      	str	r3, [sp, #28]
 8009428:	9b06      	ldr	r3, [sp, #24]
 800942a:	2b09      	cmp	r3, #9
 800942c:	f200 8090 	bhi.w	8009550 <_dtoa_r+0x2d8>
 8009430:	2b05      	cmp	r3, #5
 8009432:	bfc4      	itt	gt
 8009434:	3b04      	subgt	r3, #4
 8009436:	9306      	strgt	r3, [sp, #24]
 8009438:	9b06      	ldr	r3, [sp, #24]
 800943a:	f1a3 0302 	sub.w	r3, r3, #2
 800943e:	bfcc      	ite	gt
 8009440:	2500      	movgt	r5, #0
 8009442:	2501      	movle	r5, #1
 8009444:	2b03      	cmp	r3, #3
 8009446:	f200 808f 	bhi.w	8009568 <_dtoa_r+0x2f0>
 800944a:	e8df f003 	tbb	[pc, r3]
 800944e:	7f7d      	.short	0x7f7d
 8009450:	7131      	.short	0x7131
 8009452:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009456:	441d      	add	r5, r3
 8009458:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800945c:	2820      	cmp	r0, #32
 800945e:	dd13      	ble.n	8009488 <_dtoa_r+0x210>
 8009460:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	fa08 f800 	lsl.w	r8, r8, r0
 800946a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800946e:	fa23 f000 	lsr.w	r0, r3, r0
 8009472:	ea48 0000 	orr.w	r0, r8, r0
 8009476:	f7f7 f845 	bl	8000504 <__aeabi_ui2d>
 800947a:	2301      	movs	r3, #1
 800947c:	4682      	mov	sl, r0
 800947e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009482:	3d01      	subs	r5, #1
 8009484:	9313      	str	r3, [sp, #76]	; 0x4c
 8009486:	e772      	b.n	800936e <_dtoa_r+0xf6>
 8009488:	9b00      	ldr	r3, [sp, #0]
 800948a:	f1c0 0020 	rsb	r0, r0, #32
 800948e:	fa03 f000 	lsl.w	r0, r3, r0
 8009492:	e7f0      	b.n	8009476 <_dtoa_r+0x1fe>
 8009494:	2301      	movs	r3, #1
 8009496:	e7b1      	b.n	80093fc <_dtoa_r+0x184>
 8009498:	900f      	str	r0, [sp, #60]	; 0x3c
 800949a:	e7b0      	b.n	80093fe <_dtoa_r+0x186>
 800949c:	9b05      	ldr	r3, [sp, #20]
 800949e:	eba3 030a 	sub.w	r3, r3, sl
 80094a2:	9305      	str	r3, [sp, #20]
 80094a4:	f1ca 0300 	rsb	r3, sl, #0
 80094a8:	9307      	str	r3, [sp, #28]
 80094aa:	2300      	movs	r3, #0
 80094ac:	930e      	str	r3, [sp, #56]	; 0x38
 80094ae:	e7bb      	b.n	8009428 <_dtoa_r+0x1b0>
 80094b0:	2301      	movs	r3, #1
 80094b2:	930a      	str	r3, [sp, #40]	; 0x28
 80094b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	dd59      	ble.n	800956e <_dtoa_r+0x2f6>
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	4699      	mov	r9, r3
 80094be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094c0:	2200      	movs	r2, #0
 80094c2:	6072      	str	r2, [r6, #4]
 80094c4:	2204      	movs	r2, #4
 80094c6:	f102 0014 	add.w	r0, r2, #20
 80094ca:	4298      	cmp	r0, r3
 80094cc:	6871      	ldr	r1, [r6, #4]
 80094ce:	d953      	bls.n	8009578 <_dtoa_r+0x300>
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fca4 	bl	8009e1e <_Balloc>
 80094d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094d8:	6030      	str	r0, [r6, #0]
 80094da:	f1b9 0f0e 	cmp.w	r9, #14
 80094de:	f8d3 b000 	ldr.w	fp, [r3]
 80094e2:	f200 80e6 	bhi.w	80096b2 <_dtoa_r+0x43a>
 80094e6:	2d00      	cmp	r5, #0
 80094e8:	f000 80e3 	beq.w	80096b2 <_dtoa_r+0x43a>
 80094ec:	ed9d 7b00 	vldr	d7, [sp]
 80094f0:	f1ba 0f00 	cmp.w	sl, #0
 80094f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80094f8:	dd74      	ble.n	80095e4 <_dtoa_r+0x36c>
 80094fa:	4a2a      	ldr	r2, [pc, #168]	; (80095a4 <_dtoa_r+0x32c>)
 80094fc:	f00a 030f 	and.w	r3, sl, #15
 8009500:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009504:	ed93 7b00 	vldr	d7, [r3]
 8009508:	ea4f 162a 	mov.w	r6, sl, asr #4
 800950c:	06f0      	lsls	r0, r6, #27
 800950e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009512:	d565      	bpl.n	80095e0 <_dtoa_r+0x368>
 8009514:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <_dtoa_r+0x330>)
 8009516:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800951a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800951e:	f7f7 f995 	bl	800084c <__aeabi_ddiv>
 8009522:	e9cd 0100 	strd	r0, r1, [sp]
 8009526:	f006 060f 	and.w	r6, r6, #15
 800952a:	2503      	movs	r5, #3
 800952c:	4f1e      	ldr	r7, [pc, #120]	; (80095a8 <_dtoa_r+0x330>)
 800952e:	e04c      	b.n	80095ca <_dtoa_r+0x352>
 8009530:	2301      	movs	r3, #1
 8009532:	930a      	str	r3, [sp, #40]	; 0x28
 8009534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009536:	4453      	add	r3, sl
 8009538:	f103 0901 	add.w	r9, r3, #1
 800953c:	9302      	str	r3, [sp, #8]
 800953e:	464b      	mov	r3, r9
 8009540:	2b01      	cmp	r3, #1
 8009542:	bfb8      	it	lt
 8009544:	2301      	movlt	r3, #1
 8009546:	e7ba      	b.n	80094be <_dtoa_r+0x246>
 8009548:	2300      	movs	r3, #0
 800954a:	e7b2      	b.n	80094b2 <_dtoa_r+0x23a>
 800954c:	2300      	movs	r3, #0
 800954e:	e7f0      	b.n	8009532 <_dtoa_r+0x2ba>
 8009550:	2501      	movs	r5, #1
 8009552:	2300      	movs	r3, #0
 8009554:	9306      	str	r3, [sp, #24]
 8009556:	950a      	str	r5, [sp, #40]	; 0x28
 8009558:	f04f 33ff 	mov.w	r3, #4294967295
 800955c:	9302      	str	r3, [sp, #8]
 800955e:	4699      	mov	r9, r3
 8009560:	2200      	movs	r2, #0
 8009562:	2312      	movs	r3, #18
 8009564:	920b      	str	r2, [sp, #44]	; 0x2c
 8009566:	e7aa      	b.n	80094be <_dtoa_r+0x246>
 8009568:	2301      	movs	r3, #1
 800956a:	930a      	str	r3, [sp, #40]	; 0x28
 800956c:	e7f4      	b.n	8009558 <_dtoa_r+0x2e0>
 800956e:	2301      	movs	r3, #1
 8009570:	9302      	str	r3, [sp, #8]
 8009572:	4699      	mov	r9, r3
 8009574:	461a      	mov	r2, r3
 8009576:	e7f5      	b.n	8009564 <_dtoa_r+0x2ec>
 8009578:	3101      	adds	r1, #1
 800957a:	6071      	str	r1, [r6, #4]
 800957c:	0052      	lsls	r2, r2, #1
 800957e:	e7a2      	b.n	80094c6 <_dtoa_r+0x24e>
 8009580:	636f4361 	.word	0x636f4361
 8009584:	3fd287a7 	.word	0x3fd287a7
 8009588:	8b60c8b3 	.word	0x8b60c8b3
 800958c:	3fc68a28 	.word	0x3fc68a28
 8009590:	509f79fb 	.word	0x509f79fb
 8009594:	3fd34413 	.word	0x3fd34413
 8009598:	7ff00000 	.word	0x7ff00000
 800959c:	0800a7fd 	.word	0x0800a7fd
 80095a0:	3ff80000 	.word	0x3ff80000
 80095a4:	0800a858 	.word	0x0800a858
 80095a8:	0800a830 	.word	0x0800a830
 80095ac:	0800a829 	.word	0x0800a829
 80095b0:	07f1      	lsls	r1, r6, #31
 80095b2:	d508      	bpl.n	80095c6 <_dtoa_r+0x34e>
 80095b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095bc:	f7f7 f81c 	bl	80005f8 <__aeabi_dmul>
 80095c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095c4:	3501      	adds	r5, #1
 80095c6:	1076      	asrs	r6, r6, #1
 80095c8:	3708      	adds	r7, #8
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	d1f0      	bne.n	80095b0 <_dtoa_r+0x338>
 80095ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095d6:	f7f7 f939 	bl	800084c <__aeabi_ddiv>
 80095da:	e9cd 0100 	strd	r0, r1, [sp]
 80095de:	e01a      	b.n	8009616 <_dtoa_r+0x39e>
 80095e0:	2502      	movs	r5, #2
 80095e2:	e7a3      	b.n	800952c <_dtoa_r+0x2b4>
 80095e4:	f000 80a0 	beq.w	8009728 <_dtoa_r+0x4b0>
 80095e8:	f1ca 0600 	rsb	r6, sl, #0
 80095ec:	4b9f      	ldr	r3, [pc, #636]	; (800986c <_dtoa_r+0x5f4>)
 80095ee:	4fa0      	ldr	r7, [pc, #640]	; (8009870 <_dtoa_r+0x5f8>)
 80095f0:	f006 020f 	and.w	r2, r6, #15
 80095f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009600:	f7f6 fffa 	bl	80005f8 <__aeabi_dmul>
 8009604:	e9cd 0100 	strd	r0, r1, [sp]
 8009608:	1136      	asrs	r6, r6, #4
 800960a:	2300      	movs	r3, #0
 800960c:	2502      	movs	r5, #2
 800960e:	2e00      	cmp	r6, #0
 8009610:	d17f      	bne.n	8009712 <_dtoa_r+0x49a>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1e1      	bne.n	80095da <_dtoa_r+0x362>
 8009616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8087 	beq.w	800972c <_dtoa_r+0x4b4>
 800961e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009622:	2200      	movs	r2, #0
 8009624:	4b93      	ldr	r3, [pc, #588]	; (8009874 <_dtoa_r+0x5fc>)
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f7 fa57 	bl	8000adc <__aeabi_dcmplt>
 800962e:	2800      	cmp	r0, #0
 8009630:	d07c      	beq.n	800972c <_dtoa_r+0x4b4>
 8009632:	f1b9 0f00 	cmp.w	r9, #0
 8009636:	d079      	beq.n	800972c <_dtoa_r+0x4b4>
 8009638:	9b02      	ldr	r3, [sp, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dd35      	ble.n	80096aa <_dtoa_r+0x432>
 800963e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	4639      	mov	r1, r7
 8009646:	2200      	movs	r2, #0
 8009648:	4b8b      	ldr	r3, [pc, #556]	; (8009878 <_dtoa_r+0x600>)
 800964a:	4630      	mov	r0, r6
 800964c:	f7f6 ffd4 	bl	80005f8 <__aeabi_dmul>
 8009650:	e9cd 0100 	strd	r0, r1, [sp]
 8009654:	9f02      	ldr	r7, [sp, #8]
 8009656:	3501      	adds	r5, #1
 8009658:	4628      	mov	r0, r5
 800965a:	f7f6 ff63 	bl	8000524 <__aeabi_i2d>
 800965e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009662:	f7f6 ffc9 	bl	80005f8 <__aeabi_dmul>
 8009666:	2200      	movs	r2, #0
 8009668:	4b84      	ldr	r3, [pc, #528]	; (800987c <_dtoa_r+0x604>)
 800966a:	f7f6 fe0f 	bl	800028c <__adddf3>
 800966e:	4605      	mov	r5, r0
 8009670:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009674:	2f00      	cmp	r7, #0
 8009676:	d15d      	bne.n	8009734 <_dtoa_r+0x4bc>
 8009678:	2200      	movs	r2, #0
 800967a:	4b81      	ldr	r3, [pc, #516]	; (8009880 <_dtoa_r+0x608>)
 800967c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009680:	f7f6 fe02 	bl	8000288 <__aeabi_dsub>
 8009684:	462a      	mov	r2, r5
 8009686:	4633      	mov	r3, r6
 8009688:	e9cd 0100 	strd	r0, r1, [sp]
 800968c:	f7f7 fa44 	bl	8000b18 <__aeabi_dcmpgt>
 8009690:	2800      	cmp	r0, #0
 8009692:	f040 8288 	bne.w	8009ba6 <_dtoa_r+0x92e>
 8009696:	462a      	mov	r2, r5
 8009698:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800969c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096a0:	f7f7 fa1c 	bl	8000adc <__aeabi_dcmplt>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f040 827c 	bne.w	8009ba2 <_dtoa_r+0x92a>
 80096aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096ae:	e9cd 2300 	strd	r2, r3, [sp]
 80096b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f2c0 8150 	blt.w	800995a <_dtoa_r+0x6e2>
 80096ba:	f1ba 0f0e 	cmp.w	sl, #14
 80096be:	f300 814c 	bgt.w	800995a <_dtoa_r+0x6e2>
 80096c2:	4b6a      	ldr	r3, [pc, #424]	; (800986c <_dtoa_r+0x5f4>)
 80096c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096c8:	ed93 7b00 	vldr	d7, [r3]
 80096cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096d4:	f280 80d8 	bge.w	8009888 <_dtoa_r+0x610>
 80096d8:	f1b9 0f00 	cmp.w	r9, #0
 80096dc:	f300 80d4 	bgt.w	8009888 <_dtoa_r+0x610>
 80096e0:	f040 825e 	bne.w	8009ba0 <_dtoa_r+0x928>
 80096e4:	2200      	movs	r2, #0
 80096e6:	4b66      	ldr	r3, [pc, #408]	; (8009880 <_dtoa_r+0x608>)
 80096e8:	ec51 0b17 	vmov	r0, r1, d7
 80096ec:	f7f6 ff84 	bl	80005f8 <__aeabi_dmul>
 80096f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096f4:	f7f7 fa06 	bl	8000b04 <__aeabi_dcmpge>
 80096f8:	464f      	mov	r7, r9
 80096fa:	464e      	mov	r6, r9
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f040 8234 	bne.w	8009b6a <_dtoa_r+0x8f2>
 8009702:	2331      	movs	r3, #49	; 0x31
 8009704:	f10b 0501 	add.w	r5, fp, #1
 8009708:	f88b 3000 	strb.w	r3, [fp]
 800970c:	f10a 0a01 	add.w	sl, sl, #1
 8009710:	e22f      	b.n	8009b72 <_dtoa_r+0x8fa>
 8009712:	07f2      	lsls	r2, r6, #31
 8009714:	d505      	bpl.n	8009722 <_dtoa_r+0x4aa>
 8009716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800971a:	f7f6 ff6d 	bl	80005f8 <__aeabi_dmul>
 800971e:	3501      	adds	r5, #1
 8009720:	2301      	movs	r3, #1
 8009722:	1076      	asrs	r6, r6, #1
 8009724:	3708      	adds	r7, #8
 8009726:	e772      	b.n	800960e <_dtoa_r+0x396>
 8009728:	2502      	movs	r5, #2
 800972a:	e774      	b.n	8009616 <_dtoa_r+0x39e>
 800972c:	f8cd a020 	str.w	sl, [sp, #32]
 8009730:	464f      	mov	r7, r9
 8009732:	e791      	b.n	8009658 <_dtoa_r+0x3e0>
 8009734:	4b4d      	ldr	r3, [pc, #308]	; (800986c <_dtoa_r+0x5f4>)
 8009736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800973a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800973e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009740:	2b00      	cmp	r3, #0
 8009742:	d047      	beq.n	80097d4 <_dtoa_r+0x55c>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	2000      	movs	r0, #0
 800974a:	494e      	ldr	r1, [pc, #312]	; (8009884 <_dtoa_r+0x60c>)
 800974c:	f7f7 f87e 	bl	800084c <__aeabi_ddiv>
 8009750:	462a      	mov	r2, r5
 8009752:	4633      	mov	r3, r6
 8009754:	f7f6 fd98 	bl	8000288 <__aeabi_dsub>
 8009758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800975c:	465d      	mov	r5, fp
 800975e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009762:	f7f7 f9f9 	bl	8000b58 <__aeabi_d2iz>
 8009766:	4606      	mov	r6, r0
 8009768:	f7f6 fedc 	bl	8000524 <__aeabi_i2d>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009774:	f7f6 fd88 	bl	8000288 <__aeabi_dsub>
 8009778:	3630      	adds	r6, #48	; 0x30
 800977a:	f805 6b01 	strb.w	r6, [r5], #1
 800977e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009782:	e9cd 0100 	strd	r0, r1, [sp]
 8009786:	f7f7 f9a9 	bl	8000adc <__aeabi_dcmplt>
 800978a:	2800      	cmp	r0, #0
 800978c:	d163      	bne.n	8009856 <_dtoa_r+0x5de>
 800978e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009792:	2000      	movs	r0, #0
 8009794:	4937      	ldr	r1, [pc, #220]	; (8009874 <_dtoa_r+0x5fc>)
 8009796:	f7f6 fd77 	bl	8000288 <__aeabi_dsub>
 800979a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800979e:	f7f7 f99d 	bl	8000adc <__aeabi_dcmplt>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	f040 80b7 	bne.w	8009916 <_dtoa_r+0x69e>
 80097a8:	eba5 030b 	sub.w	r3, r5, fp
 80097ac:	429f      	cmp	r7, r3
 80097ae:	f77f af7c 	ble.w	80096aa <_dtoa_r+0x432>
 80097b2:	2200      	movs	r2, #0
 80097b4:	4b30      	ldr	r3, [pc, #192]	; (8009878 <_dtoa_r+0x600>)
 80097b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097ba:	f7f6 ff1d 	bl	80005f8 <__aeabi_dmul>
 80097be:	2200      	movs	r2, #0
 80097c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097c4:	4b2c      	ldr	r3, [pc, #176]	; (8009878 <_dtoa_r+0x600>)
 80097c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ca:	f7f6 ff15 	bl	80005f8 <__aeabi_dmul>
 80097ce:	e9cd 0100 	strd	r0, r1, [sp]
 80097d2:	e7c4      	b.n	800975e <_dtoa_r+0x4e6>
 80097d4:	462a      	mov	r2, r5
 80097d6:	4633      	mov	r3, r6
 80097d8:	f7f6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80097dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097e0:	eb0b 0507 	add.w	r5, fp, r7
 80097e4:	465e      	mov	r6, fp
 80097e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ea:	f7f7 f9b5 	bl	8000b58 <__aeabi_d2iz>
 80097ee:	4607      	mov	r7, r0
 80097f0:	f7f6 fe98 	bl	8000524 <__aeabi_i2d>
 80097f4:	3730      	adds	r7, #48	; 0x30
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097fe:	f7f6 fd43 	bl	8000288 <__aeabi_dsub>
 8009802:	f806 7b01 	strb.w	r7, [r6], #1
 8009806:	42ae      	cmp	r6, r5
 8009808:	e9cd 0100 	strd	r0, r1, [sp]
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	d126      	bne.n	8009860 <_dtoa_r+0x5e8>
 8009812:	4b1c      	ldr	r3, [pc, #112]	; (8009884 <_dtoa_r+0x60c>)
 8009814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009818:	f7f6 fd38 	bl	800028c <__adddf3>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009824:	f7f7 f978 	bl	8000b18 <__aeabi_dcmpgt>
 8009828:	2800      	cmp	r0, #0
 800982a:	d174      	bne.n	8009916 <_dtoa_r+0x69e>
 800982c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009830:	2000      	movs	r0, #0
 8009832:	4914      	ldr	r1, [pc, #80]	; (8009884 <_dtoa_r+0x60c>)
 8009834:	f7f6 fd28 	bl	8000288 <__aeabi_dsub>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009840:	f7f7 f94c 	bl	8000adc <__aeabi_dcmplt>
 8009844:	2800      	cmp	r0, #0
 8009846:	f43f af30 	beq.w	80096aa <_dtoa_r+0x432>
 800984a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800984e:	2b30      	cmp	r3, #48	; 0x30
 8009850:	f105 32ff 	add.w	r2, r5, #4294967295
 8009854:	d002      	beq.n	800985c <_dtoa_r+0x5e4>
 8009856:	f8dd a020 	ldr.w	sl, [sp, #32]
 800985a:	e04a      	b.n	80098f2 <_dtoa_r+0x67a>
 800985c:	4615      	mov	r5, r2
 800985e:	e7f4      	b.n	800984a <_dtoa_r+0x5d2>
 8009860:	4b05      	ldr	r3, [pc, #20]	; (8009878 <_dtoa_r+0x600>)
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	e9cd 0100 	strd	r0, r1, [sp]
 800986a:	e7bc      	b.n	80097e6 <_dtoa_r+0x56e>
 800986c:	0800a858 	.word	0x0800a858
 8009870:	0800a830 	.word	0x0800a830
 8009874:	3ff00000 	.word	0x3ff00000
 8009878:	40240000 	.word	0x40240000
 800987c:	401c0000 	.word	0x401c0000
 8009880:	40140000 	.word	0x40140000
 8009884:	3fe00000 	.word	0x3fe00000
 8009888:	e9dd 6700 	ldrd	r6, r7, [sp]
 800988c:	465d      	mov	r5, fp
 800988e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 ffd9 	bl	800084c <__aeabi_ddiv>
 800989a:	f7f7 f95d 	bl	8000b58 <__aeabi_d2iz>
 800989e:	4680      	mov	r8, r0
 80098a0:	f7f6 fe40 	bl	8000524 <__aeabi_i2d>
 80098a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098a8:	f7f6 fea6 	bl	80005f8 <__aeabi_dmul>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80098b8:	f7f6 fce6 	bl	8000288 <__aeabi_dsub>
 80098bc:	f805 6b01 	strb.w	r6, [r5], #1
 80098c0:	eba5 060b 	sub.w	r6, r5, fp
 80098c4:	45b1      	cmp	r9, r6
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	d139      	bne.n	8009940 <_dtoa_r+0x6c8>
 80098cc:	f7f6 fcde 	bl	800028c <__adddf3>
 80098d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098d4:	4606      	mov	r6, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	f7f7 f91e 	bl	8000b18 <__aeabi_dcmpgt>
 80098dc:	b9c8      	cbnz	r0, 8009912 <_dtoa_r+0x69a>
 80098de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f7 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ea:	b110      	cbz	r0, 80098f2 <_dtoa_r+0x67a>
 80098ec:	f018 0f01 	tst.w	r8, #1
 80098f0:	d10f      	bne.n	8009912 <_dtoa_r+0x69a>
 80098f2:	9904      	ldr	r1, [sp, #16]
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 fac6 	bl	8009e86 <_Bfree>
 80098fa:	2300      	movs	r3, #0
 80098fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098fe:	702b      	strb	r3, [r5, #0]
 8009900:	f10a 0301 	add.w	r3, sl, #1
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8241 	beq.w	8009d90 <_dtoa_r+0xb18>
 800990e:	601d      	str	r5, [r3, #0]
 8009910:	e23e      	b.n	8009d90 <_dtoa_r+0xb18>
 8009912:	f8cd a020 	str.w	sl, [sp, #32]
 8009916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800991a:	2a39      	cmp	r2, #57	; 0x39
 800991c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009920:	d108      	bne.n	8009934 <_dtoa_r+0x6bc>
 8009922:	459b      	cmp	fp, r3
 8009924:	d10a      	bne.n	800993c <_dtoa_r+0x6c4>
 8009926:	9b08      	ldr	r3, [sp, #32]
 8009928:	3301      	adds	r3, #1
 800992a:	9308      	str	r3, [sp, #32]
 800992c:	2330      	movs	r3, #48	; 0x30
 800992e:	f88b 3000 	strb.w	r3, [fp]
 8009932:	465b      	mov	r3, fp
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	3201      	adds	r2, #1
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e78c      	b.n	8009856 <_dtoa_r+0x5de>
 800993c:	461d      	mov	r5, r3
 800993e:	e7ea      	b.n	8009916 <_dtoa_r+0x69e>
 8009940:	2200      	movs	r2, #0
 8009942:	4b9b      	ldr	r3, [pc, #620]	; (8009bb0 <_dtoa_r+0x938>)
 8009944:	f7f6 fe58 	bl	80005f8 <__aeabi_dmul>
 8009948:	2200      	movs	r2, #0
 800994a:	2300      	movs	r3, #0
 800994c:	4606      	mov	r6, r0
 800994e:	460f      	mov	r7, r1
 8009950:	f7f7 f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009954:	2800      	cmp	r0, #0
 8009956:	d09a      	beq.n	800988e <_dtoa_r+0x616>
 8009958:	e7cb      	b.n	80098f2 <_dtoa_r+0x67a>
 800995a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800995c:	2a00      	cmp	r2, #0
 800995e:	f000 808b 	beq.w	8009a78 <_dtoa_r+0x800>
 8009962:	9a06      	ldr	r2, [sp, #24]
 8009964:	2a01      	cmp	r2, #1
 8009966:	dc6e      	bgt.n	8009a46 <_dtoa_r+0x7ce>
 8009968:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800996a:	2a00      	cmp	r2, #0
 800996c:	d067      	beq.n	8009a3e <_dtoa_r+0x7c6>
 800996e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009972:	9f07      	ldr	r7, [sp, #28]
 8009974:	9d05      	ldr	r5, [sp, #20]
 8009976:	9a05      	ldr	r2, [sp, #20]
 8009978:	2101      	movs	r1, #1
 800997a:	441a      	add	r2, r3
 800997c:	4620      	mov	r0, r4
 800997e:	9205      	str	r2, [sp, #20]
 8009980:	4498      	add	r8, r3
 8009982:	f000 fb20 	bl	8009fc6 <__i2b>
 8009986:	4606      	mov	r6, r0
 8009988:	2d00      	cmp	r5, #0
 800998a:	dd0c      	ble.n	80099a6 <_dtoa_r+0x72e>
 800998c:	f1b8 0f00 	cmp.w	r8, #0
 8009990:	dd09      	ble.n	80099a6 <_dtoa_r+0x72e>
 8009992:	4545      	cmp	r5, r8
 8009994:	9a05      	ldr	r2, [sp, #20]
 8009996:	462b      	mov	r3, r5
 8009998:	bfa8      	it	ge
 800999a:	4643      	movge	r3, r8
 800999c:	1ad2      	subs	r2, r2, r3
 800999e:	9205      	str	r2, [sp, #20]
 80099a0:	1aed      	subs	r5, r5, r3
 80099a2:	eba8 0803 	sub.w	r8, r8, r3
 80099a6:	9b07      	ldr	r3, [sp, #28]
 80099a8:	b1eb      	cbz	r3, 80099e6 <_dtoa_r+0x76e>
 80099aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d067      	beq.n	8009a80 <_dtoa_r+0x808>
 80099b0:	b18f      	cbz	r7, 80099d6 <_dtoa_r+0x75e>
 80099b2:	4631      	mov	r1, r6
 80099b4:	463a      	mov	r2, r7
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fba4 	bl	800a104 <__pow5mult>
 80099bc:	9a04      	ldr	r2, [sp, #16]
 80099be:	4601      	mov	r1, r0
 80099c0:	4606      	mov	r6, r0
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 fb08 	bl	8009fd8 <__multiply>
 80099c8:	9904      	ldr	r1, [sp, #16]
 80099ca:	9008      	str	r0, [sp, #32]
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 fa5a 	bl	8009e86 <_Bfree>
 80099d2:	9b08      	ldr	r3, [sp, #32]
 80099d4:	9304      	str	r3, [sp, #16]
 80099d6:	9b07      	ldr	r3, [sp, #28]
 80099d8:	1bda      	subs	r2, r3, r7
 80099da:	d004      	beq.n	80099e6 <_dtoa_r+0x76e>
 80099dc:	9904      	ldr	r1, [sp, #16]
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 fb90 	bl	800a104 <__pow5mult>
 80099e4:	9004      	str	r0, [sp, #16]
 80099e6:	2101      	movs	r1, #1
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 faec 	bl	8009fc6 <__i2b>
 80099ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099f0:	4607      	mov	r7, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 81d0 	beq.w	8009d98 <_dtoa_r+0xb20>
 80099f8:	461a      	mov	r2, r3
 80099fa:	4601      	mov	r1, r0
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fb81 	bl	800a104 <__pow5mult>
 8009a02:	9b06      	ldr	r3, [sp, #24]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	4607      	mov	r7, r0
 8009a08:	dc40      	bgt.n	8009a8c <_dtoa_r+0x814>
 8009a0a:	9b00      	ldr	r3, [sp, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d139      	bne.n	8009a84 <_dtoa_r+0x80c>
 8009a10:	9b01      	ldr	r3, [sp, #4]
 8009a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d136      	bne.n	8009a88 <_dtoa_r+0x810>
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a20:	0d1b      	lsrs	r3, r3, #20
 8009a22:	051b      	lsls	r3, r3, #20
 8009a24:	b12b      	cbz	r3, 8009a32 <_dtoa_r+0x7ba>
 8009a26:	9b05      	ldr	r3, [sp, #20]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	9305      	str	r3, [sp, #20]
 8009a2c:	f108 0801 	add.w	r8, r8, #1
 8009a30:	2301      	movs	r3, #1
 8009a32:	9307      	str	r3, [sp, #28]
 8009a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d12a      	bne.n	8009a90 <_dtoa_r+0x818>
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	e030      	b.n	8009aa0 <_dtoa_r+0x828>
 8009a3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a44:	e795      	b.n	8009972 <_dtoa_r+0x6fa>
 8009a46:	9b07      	ldr	r3, [sp, #28]
 8009a48:	f109 37ff 	add.w	r7, r9, #4294967295
 8009a4c:	42bb      	cmp	r3, r7
 8009a4e:	bfbf      	itttt	lt
 8009a50:	9b07      	ldrlt	r3, [sp, #28]
 8009a52:	9707      	strlt	r7, [sp, #28]
 8009a54:	1afa      	sublt	r2, r7, r3
 8009a56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009a58:	bfbb      	ittet	lt
 8009a5a:	189b      	addlt	r3, r3, r2
 8009a5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009a5e:	1bdf      	subge	r7, r3, r7
 8009a60:	2700      	movlt	r7, #0
 8009a62:	f1b9 0f00 	cmp.w	r9, #0
 8009a66:	bfb5      	itete	lt
 8009a68:	9b05      	ldrlt	r3, [sp, #20]
 8009a6a:	9d05      	ldrge	r5, [sp, #20]
 8009a6c:	eba3 0509 	sublt.w	r5, r3, r9
 8009a70:	464b      	movge	r3, r9
 8009a72:	bfb8      	it	lt
 8009a74:	2300      	movlt	r3, #0
 8009a76:	e77e      	b.n	8009976 <_dtoa_r+0x6fe>
 8009a78:	9f07      	ldr	r7, [sp, #28]
 8009a7a:	9d05      	ldr	r5, [sp, #20]
 8009a7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009a7e:	e783      	b.n	8009988 <_dtoa_r+0x710>
 8009a80:	9a07      	ldr	r2, [sp, #28]
 8009a82:	e7ab      	b.n	80099dc <_dtoa_r+0x764>
 8009a84:	2300      	movs	r3, #0
 8009a86:	e7d4      	b.n	8009a32 <_dtoa_r+0x7ba>
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	e7d2      	b.n	8009a32 <_dtoa_r+0x7ba>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9307      	str	r3, [sp, #28]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009a96:	6918      	ldr	r0, [r3, #16]
 8009a98:	f000 fa47 	bl	8009f2a <__hi0bits>
 8009a9c:	f1c0 0020 	rsb	r0, r0, #32
 8009aa0:	4440      	add	r0, r8
 8009aa2:	f010 001f 	ands.w	r0, r0, #31
 8009aa6:	d047      	beq.n	8009b38 <_dtoa_r+0x8c0>
 8009aa8:	f1c0 0320 	rsb	r3, r0, #32
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	dd3b      	ble.n	8009b28 <_dtoa_r+0x8b0>
 8009ab0:	9b05      	ldr	r3, [sp, #20]
 8009ab2:	f1c0 001c 	rsb	r0, r0, #28
 8009ab6:	4403      	add	r3, r0
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	4405      	add	r5, r0
 8009abc:	4480      	add	r8, r0
 8009abe:	9b05      	ldr	r3, [sp, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dd05      	ble.n	8009ad0 <_dtoa_r+0x858>
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	9904      	ldr	r1, [sp, #16]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 fb69 	bl	800a1a0 <__lshift>
 8009ace:	9004      	str	r0, [sp, #16]
 8009ad0:	f1b8 0f00 	cmp.w	r8, #0
 8009ad4:	dd05      	ble.n	8009ae2 <_dtoa_r+0x86a>
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	4642      	mov	r2, r8
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 fb60 	bl	800a1a0 <__lshift>
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ae4:	b353      	cbz	r3, 8009b3c <_dtoa_r+0x8c4>
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	9804      	ldr	r0, [sp, #16]
 8009aea:	f000 fbad 	bl	800a248 <__mcmp>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	da24      	bge.n	8009b3c <_dtoa_r+0x8c4>
 8009af2:	2300      	movs	r3, #0
 8009af4:	220a      	movs	r2, #10
 8009af6:	9904      	ldr	r1, [sp, #16]
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 f9db 	bl	8009eb4 <__multadd>
 8009afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b00:	9004      	str	r0, [sp, #16]
 8009b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 814d 	beq.w	8009da6 <_dtoa_r+0xb2e>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4631      	mov	r1, r6
 8009b10:	220a      	movs	r2, #10
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 f9ce 	bl	8009eb4 <__multadd>
 8009b18:	9b02      	ldr	r3, [sp, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	dc4f      	bgt.n	8009bc0 <_dtoa_r+0x948>
 8009b20:	9b06      	ldr	r3, [sp, #24]
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	dd4c      	ble.n	8009bc0 <_dtoa_r+0x948>
 8009b26:	e011      	b.n	8009b4c <_dtoa_r+0x8d4>
 8009b28:	d0c9      	beq.n	8009abe <_dtoa_r+0x846>
 8009b2a:	9a05      	ldr	r2, [sp, #20]
 8009b2c:	331c      	adds	r3, #28
 8009b2e:	441a      	add	r2, r3
 8009b30:	9205      	str	r2, [sp, #20]
 8009b32:	441d      	add	r5, r3
 8009b34:	4498      	add	r8, r3
 8009b36:	e7c2      	b.n	8009abe <_dtoa_r+0x846>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	e7f6      	b.n	8009b2a <_dtoa_r+0x8b2>
 8009b3c:	f1b9 0f00 	cmp.w	r9, #0
 8009b40:	dc38      	bgt.n	8009bb4 <_dtoa_r+0x93c>
 8009b42:	9b06      	ldr	r3, [sp, #24]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	dd35      	ble.n	8009bb4 <_dtoa_r+0x93c>
 8009b48:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b4c:	9b02      	ldr	r3, [sp, #8]
 8009b4e:	b963      	cbnz	r3, 8009b6a <_dtoa_r+0x8f2>
 8009b50:	4639      	mov	r1, r7
 8009b52:	2205      	movs	r2, #5
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 f9ad 	bl	8009eb4 <__multadd>
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	9804      	ldr	r0, [sp, #16]
 8009b60:	f000 fb72 	bl	800a248 <__mcmp>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	f73f adcc 	bgt.w	8009702 <_dtoa_r+0x48a>
 8009b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b6c:	465d      	mov	r5, fp
 8009b6e:	ea6f 0a03 	mvn.w	sl, r3
 8009b72:	f04f 0900 	mov.w	r9, #0
 8009b76:	4639      	mov	r1, r7
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f000 f984 	bl	8009e86 <_Bfree>
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	f43f aeb7 	beq.w	80098f2 <_dtoa_r+0x67a>
 8009b84:	f1b9 0f00 	cmp.w	r9, #0
 8009b88:	d005      	beq.n	8009b96 <_dtoa_r+0x91e>
 8009b8a:	45b1      	cmp	r9, r6
 8009b8c:	d003      	beq.n	8009b96 <_dtoa_r+0x91e>
 8009b8e:	4649      	mov	r1, r9
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 f978 	bl	8009e86 <_Bfree>
 8009b96:	4631      	mov	r1, r6
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 f974 	bl	8009e86 <_Bfree>
 8009b9e:	e6a8      	b.n	80098f2 <_dtoa_r+0x67a>
 8009ba0:	2700      	movs	r7, #0
 8009ba2:	463e      	mov	r6, r7
 8009ba4:	e7e1      	b.n	8009b6a <_dtoa_r+0x8f2>
 8009ba6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009baa:	463e      	mov	r6, r7
 8009bac:	e5a9      	b.n	8009702 <_dtoa_r+0x48a>
 8009bae:	bf00      	nop
 8009bb0:	40240000 	.word	0x40240000
 8009bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 80fa 	beq.w	8009db4 <_dtoa_r+0xb3c>
 8009bc0:	2d00      	cmp	r5, #0
 8009bc2:	dd05      	ble.n	8009bd0 <_dtoa_r+0x958>
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 fae9 	bl	800a1a0 <__lshift>
 8009bce:	4606      	mov	r6, r0
 8009bd0:	9b07      	ldr	r3, [sp, #28]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d04c      	beq.n	8009c70 <_dtoa_r+0x9f8>
 8009bd6:	6871      	ldr	r1, [r6, #4]
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 f920 	bl	8009e1e <_Balloc>
 8009bde:	6932      	ldr	r2, [r6, #16]
 8009be0:	3202      	adds	r2, #2
 8009be2:	4605      	mov	r5, r0
 8009be4:	0092      	lsls	r2, r2, #2
 8009be6:	f106 010c 	add.w	r1, r6, #12
 8009bea:	300c      	adds	r0, #12
 8009bec:	f000 f90a 	bl	8009e04 <memcpy>
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f000 fad3 	bl	800a1a0 <__lshift>
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	f8cd b014 	str.w	fp, [sp, #20]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	46b1      	mov	r9, r6
 8009c06:	9307      	str	r3, [sp, #28]
 8009c08:	4606      	mov	r6, r0
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	9804      	ldr	r0, [sp, #16]
 8009c0e:	f7ff faa5 	bl	800915c <quorem>
 8009c12:	4649      	mov	r1, r9
 8009c14:	4605      	mov	r5, r0
 8009c16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009c1a:	9804      	ldr	r0, [sp, #16]
 8009c1c:	f000 fb14 	bl	800a248 <__mcmp>
 8009c20:	4632      	mov	r2, r6
 8009c22:	9000      	str	r0, [sp, #0]
 8009c24:	4639      	mov	r1, r7
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fb28 	bl	800a27c <__mdiff>
 8009c2c:	68c3      	ldr	r3, [r0, #12]
 8009c2e:	4602      	mov	r2, r0
 8009c30:	bb03      	cbnz	r3, 8009c74 <_dtoa_r+0x9fc>
 8009c32:	4601      	mov	r1, r0
 8009c34:	9008      	str	r0, [sp, #32]
 8009c36:	9804      	ldr	r0, [sp, #16]
 8009c38:	f000 fb06 	bl	800a248 <__mcmp>
 8009c3c:	9a08      	ldr	r2, [sp, #32]
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4611      	mov	r1, r2
 8009c42:	4620      	mov	r0, r4
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	f000 f91e 	bl	8009e86 <_Bfree>
 8009c4a:	9b08      	ldr	r3, [sp, #32]
 8009c4c:	b9a3      	cbnz	r3, 8009c78 <_dtoa_r+0xa00>
 8009c4e:	9a06      	ldr	r2, [sp, #24]
 8009c50:	b992      	cbnz	r2, 8009c78 <_dtoa_r+0xa00>
 8009c52:	9a07      	ldr	r2, [sp, #28]
 8009c54:	b982      	cbnz	r2, 8009c78 <_dtoa_r+0xa00>
 8009c56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c5a:	d029      	beq.n	8009cb0 <_dtoa_r+0xa38>
 8009c5c:	9b00      	ldr	r3, [sp, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	dd01      	ble.n	8009c66 <_dtoa_r+0x9ee>
 8009c62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009c66:	9b05      	ldr	r3, [sp, #20]
 8009c68:	1c5d      	adds	r5, r3, #1
 8009c6a:	f883 8000 	strb.w	r8, [r3]
 8009c6e:	e782      	b.n	8009b76 <_dtoa_r+0x8fe>
 8009c70:	4630      	mov	r0, r6
 8009c72:	e7c2      	b.n	8009bfa <_dtoa_r+0x982>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e7e3      	b.n	8009c40 <_dtoa_r+0x9c8>
 8009c78:	9a00      	ldr	r2, [sp, #0]
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	db04      	blt.n	8009c88 <_dtoa_r+0xa10>
 8009c7e:	d125      	bne.n	8009ccc <_dtoa_r+0xa54>
 8009c80:	9a06      	ldr	r2, [sp, #24]
 8009c82:	bb1a      	cbnz	r2, 8009ccc <_dtoa_r+0xa54>
 8009c84:	9a07      	ldr	r2, [sp, #28]
 8009c86:	bb0a      	cbnz	r2, 8009ccc <_dtoa_r+0xa54>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	ddec      	ble.n	8009c66 <_dtoa_r+0x9ee>
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	9904      	ldr	r1, [sp, #16]
 8009c90:	4620      	mov	r0, r4
 8009c92:	f000 fa85 	bl	800a1a0 <__lshift>
 8009c96:	4639      	mov	r1, r7
 8009c98:	9004      	str	r0, [sp, #16]
 8009c9a:	f000 fad5 	bl	800a248 <__mcmp>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	dc03      	bgt.n	8009caa <_dtoa_r+0xa32>
 8009ca2:	d1e0      	bne.n	8009c66 <_dtoa_r+0x9ee>
 8009ca4:	f018 0f01 	tst.w	r8, #1
 8009ca8:	d0dd      	beq.n	8009c66 <_dtoa_r+0x9ee>
 8009caa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009cae:	d1d8      	bne.n	8009c62 <_dtoa_r+0x9ea>
 8009cb0:	9b05      	ldr	r3, [sp, #20]
 8009cb2:	9a05      	ldr	r2, [sp, #20]
 8009cb4:	1c5d      	adds	r5, r3, #1
 8009cb6:	2339      	movs	r3, #57	; 0x39
 8009cb8:	7013      	strb	r3, [r2, #0]
 8009cba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cbe:	2b39      	cmp	r3, #57	; 0x39
 8009cc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009cc4:	d04f      	beq.n	8009d66 <_dtoa_r+0xaee>
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	7013      	strb	r3, [r2, #0]
 8009cca:	e754      	b.n	8009b76 <_dtoa_r+0x8fe>
 8009ccc:	9a05      	ldr	r2, [sp, #20]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f102 0501 	add.w	r5, r2, #1
 8009cd4:	dd06      	ble.n	8009ce4 <_dtoa_r+0xa6c>
 8009cd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009cda:	d0e9      	beq.n	8009cb0 <_dtoa_r+0xa38>
 8009cdc:	f108 0801 	add.w	r8, r8, #1
 8009ce0:	9b05      	ldr	r3, [sp, #20]
 8009ce2:	e7c2      	b.n	8009c6a <_dtoa_r+0x9f2>
 8009ce4:	9a02      	ldr	r2, [sp, #8]
 8009ce6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009cea:	eba5 030b 	sub.w	r3, r5, fp
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d021      	beq.n	8009d36 <_dtoa_r+0xabe>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	220a      	movs	r2, #10
 8009cf6:	9904      	ldr	r1, [sp, #16]
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 f8db 	bl	8009eb4 <__multadd>
 8009cfe:	45b1      	cmp	r9, r6
 8009d00:	9004      	str	r0, [sp, #16]
 8009d02:	f04f 0300 	mov.w	r3, #0
 8009d06:	f04f 020a 	mov.w	r2, #10
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	d105      	bne.n	8009d1c <_dtoa_r+0xaa4>
 8009d10:	f000 f8d0 	bl	8009eb4 <__multadd>
 8009d14:	4681      	mov	r9, r0
 8009d16:	4606      	mov	r6, r0
 8009d18:	9505      	str	r5, [sp, #20]
 8009d1a:	e776      	b.n	8009c0a <_dtoa_r+0x992>
 8009d1c:	f000 f8ca 	bl	8009eb4 <__multadd>
 8009d20:	4631      	mov	r1, r6
 8009d22:	4681      	mov	r9, r0
 8009d24:	2300      	movs	r3, #0
 8009d26:	220a      	movs	r2, #10
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 f8c3 	bl	8009eb4 <__multadd>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	e7f2      	b.n	8009d18 <_dtoa_r+0xaa0>
 8009d32:	f04f 0900 	mov.w	r9, #0
 8009d36:	2201      	movs	r2, #1
 8009d38:	9904      	ldr	r1, [sp, #16]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 fa30 	bl	800a1a0 <__lshift>
 8009d40:	4639      	mov	r1, r7
 8009d42:	9004      	str	r0, [sp, #16]
 8009d44:	f000 fa80 	bl	800a248 <__mcmp>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	dcb6      	bgt.n	8009cba <_dtoa_r+0xa42>
 8009d4c:	d102      	bne.n	8009d54 <_dtoa_r+0xadc>
 8009d4e:	f018 0f01 	tst.w	r8, #1
 8009d52:	d1b2      	bne.n	8009cba <_dtoa_r+0xa42>
 8009d54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d58:	2b30      	cmp	r3, #48	; 0x30
 8009d5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d5e:	f47f af0a 	bne.w	8009b76 <_dtoa_r+0x8fe>
 8009d62:	4615      	mov	r5, r2
 8009d64:	e7f6      	b.n	8009d54 <_dtoa_r+0xadc>
 8009d66:	4593      	cmp	fp, r2
 8009d68:	d105      	bne.n	8009d76 <_dtoa_r+0xafe>
 8009d6a:	2331      	movs	r3, #49	; 0x31
 8009d6c:	f10a 0a01 	add.w	sl, sl, #1
 8009d70:	f88b 3000 	strb.w	r3, [fp]
 8009d74:	e6ff      	b.n	8009b76 <_dtoa_r+0x8fe>
 8009d76:	4615      	mov	r5, r2
 8009d78:	e79f      	b.n	8009cba <_dtoa_r+0xa42>
 8009d7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009de0 <_dtoa_r+0xb68>
 8009d7e:	e007      	b.n	8009d90 <_dtoa_r+0xb18>
 8009d80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009de4 <_dtoa_r+0xb6c>
 8009d86:	b11b      	cbz	r3, 8009d90 <_dtoa_r+0xb18>
 8009d88:	f10b 0308 	add.w	r3, fp, #8
 8009d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	4658      	mov	r0, fp
 8009d92:	b017      	add	sp, #92	; 0x5c
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d98:	9b06      	ldr	r3, [sp, #24]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	f77f ae35 	ble.w	8009a0a <_dtoa_r+0x792>
 8009da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009da2:	9307      	str	r3, [sp, #28]
 8009da4:	e649      	b.n	8009a3a <_dtoa_r+0x7c2>
 8009da6:	9b02      	ldr	r3, [sp, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dc03      	bgt.n	8009db4 <_dtoa_r+0xb3c>
 8009dac:	9b06      	ldr	r3, [sp, #24]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	f73f aecc 	bgt.w	8009b4c <_dtoa_r+0x8d4>
 8009db4:	465d      	mov	r5, fp
 8009db6:	4639      	mov	r1, r7
 8009db8:	9804      	ldr	r0, [sp, #16]
 8009dba:	f7ff f9cf 	bl	800915c <quorem>
 8009dbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009dc2:	f805 8b01 	strb.w	r8, [r5], #1
 8009dc6:	9a02      	ldr	r2, [sp, #8]
 8009dc8:	eba5 030b 	sub.w	r3, r5, fp
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	ddb0      	ble.n	8009d32 <_dtoa_r+0xaba>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	220a      	movs	r2, #10
 8009dd4:	9904      	ldr	r1, [sp, #16]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 f86c 	bl	8009eb4 <__multadd>
 8009ddc:	9004      	str	r0, [sp, #16]
 8009dde:	e7ea      	b.n	8009db6 <_dtoa_r+0xb3e>
 8009de0:	0800a7fc 	.word	0x0800a7fc
 8009de4:	0800a820 	.word	0x0800a820

08009de8 <_localeconv_r>:
 8009de8:	4b04      	ldr	r3, [pc, #16]	; (8009dfc <_localeconv_r+0x14>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6a18      	ldr	r0, [r3, #32]
 8009dee:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <_localeconv_r+0x18>)
 8009df0:	2800      	cmp	r0, #0
 8009df2:	bf08      	it	eq
 8009df4:	4618      	moveq	r0, r3
 8009df6:	30f0      	adds	r0, #240	; 0xf0
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	20000188 	.word	0x20000188
 8009e00:	200001ec 	.word	0x200001ec

08009e04 <memcpy>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	1e43      	subs	r3, r0, #1
 8009e08:	440a      	add	r2, r1
 8009e0a:	4291      	cmp	r1, r2
 8009e0c:	d100      	bne.n	8009e10 <memcpy+0xc>
 8009e0e:	bd10      	pop	{r4, pc}
 8009e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e18:	e7f7      	b.n	8009e0a <memcpy+0x6>

08009e1a <__malloc_lock>:
 8009e1a:	4770      	bx	lr

08009e1c <__malloc_unlock>:
 8009e1c:	4770      	bx	lr

08009e1e <_Balloc>:
 8009e1e:	b570      	push	{r4, r5, r6, lr}
 8009e20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e22:	4604      	mov	r4, r0
 8009e24:	460e      	mov	r6, r1
 8009e26:	b93d      	cbnz	r5, 8009e38 <_Balloc+0x1a>
 8009e28:	2010      	movs	r0, #16
 8009e2a:	f7fe fc4b 	bl	80086c4 <malloc>
 8009e2e:	6260      	str	r0, [r4, #36]	; 0x24
 8009e30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e34:	6005      	str	r5, [r0, #0]
 8009e36:	60c5      	str	r5, [r0, #12]
 8009e38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009e3a:	68eb      	ldr	r3, [r5, #12]
 8009e3c:	b183      	cbz	r3, 8009e60 <_Balloc+0x42>
 8009e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e46:	b9b8      	cbnz	r0, 8009e78 <_Balloc+0x5a>
 8009e48:	2101      	movs	r1, #1
 8009e4a:	fa01 f506 	lsl.w	r5, r1, r6
 8009e4e:	1d6a      	adds	r2, r5, #5
 8009e50:	0092      	lsls	r2, r2, #2
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 fabe 	bl	800a3d4 <_calloc_r>
 8009e58:	b160      	cbz	r0, 8009e74 <_Balloc+0x56>
 8009e5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009e5e:	e00e      	b.n	8009e7e <_Balloc+0x60>
 8009e60:	2221      	movs	r2, #33	; 0x21
 8009e62:	2104      	movs	r1, #4
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 fab5 	bl	800a3d4 <_calloc_r>
 8009e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e6c:	60e8      	str	r0, [r5, #12]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1e4      	bne.n	8009e3e <_Balloc+0x20>
 8009e74:	2000      	movs	r0, #0
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	6802      	ldr	r2, [r0, #0]
 8009e7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e84:	e7f7      	b.n	8009e76 <_Balloc+0x58>

08009e86 <_Bfree>:
 8009e86:	b570      	push	{r4, r5, r6, lr}
 8009e88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	b93c      	cbnz	r4, 8009ea0 <_Bfree+0x1a>
 8009e90:	2010      	movs	r0, #16
 8009e92:	f7fe fc17 	bl	80086c4 <malloc>
 8009e96:	6270      	str	r0, [r6, #36]	; 0x24
 8009e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e9c:	6004      	str	r4, [r0, #0]
 8009e9e:	60c4      	str	r4, [r0, #12]
 8009ea0:	b13d      	cbz	r5, 8009eb2 <_Bfree+0x2c>
 8009ea2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ea4:	686a      	ldr	r2, [r5, #4]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009eac:	6029      	str	r1, [r5, #0]
 8009eae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}

08009eb4 <__multadd>:
 8009eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb8:	690d      	ldr	r5, [r1, #16]
 8009eba:	461f      	mov	r7, r3
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	f101 0c14 	add.w	ip, r1, #20
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f8dc 0000 	ldr.w	r0, [ip]
 8009eca:	b281      	uxth	r1, r0
 8009ecc:	fb02 7101 	mla	r1, r2, r1, r7
 8009ed0:	0c0f      	lsrs	r7, r1, #16
 8009ed2:	0c00      	lsrs	r0, r0, #16
 8009ed4:	fb02 7000 	mla	r0, r2, r0, r7
 8009ed8:	b289      	uxth	r1, r1
 8009eda:	3301      	adds	r3, #1
 8009edc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009ee0:	429d      	cmp	r5, r3
 8009ee2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009ee6:	f84c 1b04 	str.w	r1, [ip], #4
 8009eea:	dcec      	bgt.n	8009ec6 <__multadd+0x12>
 8009eec:	b1d7      	cbz	r7, 8009f24 <__multadd+0x70>
 8009eee:	68a3      	ldr	r3, [r4, #8]
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	dc12      	bgt.n	8009f1a <__multadd+0x66>
 8009ef4:	6861      	ldr	r1, [r4, #4]
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	3101      	adds	r1, #1
 8009efa:	f7ff ff90 	bl	8009e1e <_Balloc>
 8009efe:	6922      	ldr	r2, [r4, #16]
 8009f00:	3202      	adds	r2, #2
 8009f02:	f104 010c 	add.w	r1, r4, #12
 8009f06:	4680      	mov	r8, r0
 8009f08:	0092      	lsls	r2, r2, #2
 8009f0a:	300c      	adds	r0, #12
 8009f0c:	f7ff ff7a 	bl	8009e04 <memcpy>
 8009f10:	4621      	mov	r1, r4
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ffb7 	bl	8009e86 <_Bfree>
 8009f18:	4644      	mov	r4, r8
 8009f1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f1e:	3501      	adds	r5, #1
 8009f20:	615f      	str	r7, [r3, #20]
 8009f22:	6125      	str	r5, [r4, #16]
 8009f24:	4620      	mov	r0, r4
 8009f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f2a <__hi0bits>:
 8009f2a:	0c02      	lsrs	r2, r0, #16
 8009f2c:	0412      	lsls	r2, r2, #16
 8009f2e:	4603      	mov	r3, r0
 8009f30:	b9b2      	cbnz	r2, 8009f60 <__hi0bits+0x36>
 8009f32:	0403      	lsls	r3, r0, #16
 8009f34:	2010      	movs	r0, #16
 8009f36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009f3a:	bf04      	itt	eq
 8009f3c:	021b      	lsleq	r3, r3, #8
 8009f3e:	3008      	addeq	r0, #8
 8009f40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009f44:	bf04      	itt	eq
 8009f46:	011b      	lsleq	r3, r3, #4
 8009f48:	3004      	addeq	r0, #4
 8009f4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009f4e:	bf04      	itt	eq
 8009f50:	009b      	lsleq	r3, r3, #2
 8009f52:	3002      	addeq	r0, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	db06      	blt.n	8009f66 <__hi0bits+0x3c>
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	d503      	bpl.n	8009f64 <__hi0bits+0x3a>
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	4770      	bx	lr
 8009f60:	2000      	movs	r0, #0
 8009f62:	e7e8      	b.n	8009f36 <__hi0bits+0xc>
 8009f64:	2020      	movs	r0, #32
 8009f66:	4770      	bx	lr

08009f68 <__lo0bits>:
 8009f68:	6803      	ldr	r3, [r0, #0]
 8009f6a:	f013 0207 	ands.w	r2, r3, #7
 8009f6e:	4601      	mov	r1, r0
 8009f70:	d00b      	beq.n	8009f8a <__lo0bits+0x22>
 8009f72:	07da      	lsls	r2, r3, #31
 8009f74:	d423      	bmi.n	8009fbe <__lo0bits+0x56>
 8009f76:	0798      	lsls	r0, r3, #30
 8009f78:	bf49      	itett	mi
 8009f7a:	085b      	lsrmi	r3, r3, #1
 8009f7c:	089b      	lsrpl	r3, r3, #2
 8009f7e:	2001      	movmi	r0, #1
 8009f80:	600b      	strmi	r3, [r1, #0]
 8009f82:	bf5c      	itt	pl
 8009f84:	600b      	strpl	r3, [r1, #0]
 8009f86:	2002      	movpl	r0, #2
 8009f88:	4770      	bx	lr
 8009f8a:	b298      	uxth	r0, r3
 8009f8c:	b9a8      	cbnz	r0, 8009fba <__lo0bits+0x52>
 8009f8e:	0c1b      	lsrs	r3, r3, #16
 8009f90:	2010      	movs	r0, #16
 8009f92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f96:	bf04      	itt	eq
 8009f98:	0a1b      	lsreq	r3, r3, #8
 8009f9a:	3008      	addeq	r0, #8
 8009f9c:	071a      	lsls	r2, r3, #28
 8009f9e:	bf04      	itt	eq
 8009fa0:	091b      	lsreq	r3, r3, #4
 8009fa2:	3004      	addeq	r0, #4
 8009fa4:	079a      	lsls	r2, r3, #30
 8009fa6:	bf04      	itt	eq
 8009fa8:	089b      	lsreq	r3, r3, #2
 8009faa:	3002      	addeq	r0, #2
 8009fac:	07da      	lsls	r2, r3, #31
 8009fae:	d402      	bmi.n	8009fb6 <__lo0bits+0x4e>
 8009fb0:	085b      	lsrs	r3, r3, #1
 8009fb2:	d006      	beq.n	8009fc2 <__lo0bits+0x5a>
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	600b      	str	r3, [r1, #0]
 8009fb8:	4770      	bx	lr
 8009fba:	4610      	mov	r0, r2
 8009fbc:	e7e9      	b.n	8009f92 <__lo0bits+0x2a>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	4770      	bx	lr
 8009fc2:	2020      	movs	r0, #32
 8009fc4:	4770      	bx	lr

08009fc6 <__i2b>:
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	460c      	mov	r4, r1
 8009fca:	2101      	movs	r1, #1
 8009fcc:	f7ff ff27 	bl	8009e1e <_Balloc>
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	6144      	str	r4, [r0, #20]
 8009fd4:	6102      	str	r2, [r0, #16]
 8009fd6:	bd10      	pop	{r4, pc}

08009fd8 <__multiply>:
 8009fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	4614      	mov	r4, r2
 8009fde:	690a      	ldr	r2, [r1, #16]
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	bfb8      	it	lt
 8009fe6:	460b      	movlt	r3, r1
 8009fe8:	4688      	mov	r8, r1
 8009fea:	bfbc      	itt	lt
 8009fec:	46a0      	movlt	r8, r4
 8009fee:	461c      	movlt	r4, r3
 8009ff0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ff4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ff8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ffc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a000:	eb07 0609 	add.w	r6, r7, r9
 800a004:	42b3      	cmp	r3, r6
 800a006:	bfb8      	it	lt
 800a008:	3101      	addlt	r1, #1
 800a00a:	f7ff ff08 	bl	8009e1e <_Balloc>
 800a00e:	f100 0514 	add.w	r5, r0, #20
 800a012:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a016:	462b      	mov	r3, r5
 800a018:	2200      	movs	r2, #0
 800a01a:	4573      	cmp	r3, lr
 800a01c:	d316      	bcc.n	800a04c <__multiply+0x74>
 800a01e:	f104 0214 	add.w	r2, r4, #20
 800a022:	f108 0114 	add.w	r1, r8, #20
 800a026:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a02a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	9b00      	ldr	r3, [sp, #0]
 800a032:	9201      	str	r2, [sp, #4]
 800a034:	4293      	cmp	r3, r2
 800a036:	d80c      	bhi.n	800a052 <__multiply+0x7a>
 800a038:	2e00      	cmp	r6, #0
 800a03a:	dd03      	ble.n	800a044 <__multiply+0x6c>
 800a03c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a040:	2b00      	cmp	r3, #0
 800a042:	d05d      	beq.n	800a100 <__multiply+0x128>
 800a044:	6106      	str	r6, [r0, #16]
 800a046:	b003      	add	sp, #12
 800a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04c:	f843 2b04 	str.w	r2, [r3], #4
 800a050:	e7e3      	b.n	800a01a <__multiply+0x42>
 800a052:	f8b2 b000 	ldrh.w	fp, [r2]
 800a056:	f1bb 0f00 	cmp.w	fp, #0
 800a05a:	d023      	beq.n	800a0a4 <__multiply+0xcc>
 800a05c:	4689      	mov	r9, r1
 800a05e:	46ac      	mov	ip, r5
 800a060:	f04f 0800 	mov.w	r8, #0
 800a064:	f859 4b04 	ldr.w	r4, [r9], #4
 800a068:	f8dc a000 	ldr.w	sl, [ip]
 800a06c:	b2a3      	uxth	r3, r4
 800a06e:	fa1f fa8a 	uxth.w	sl, sl
 800a072:	fb0b a303 	mla	r3, fp, r3, sl
 800a076:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a07a:	f8dc 4000 	ldr.w	r4, [ip]
 800a07e:	4443      	add	r3, r8
 800a080:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a084:	fb0b 840a 	mla	r4, fp, sl, r8
 800a088:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a08c:	46e2      	mov	sl, ip
 800a08e:	b29b      	uxth	r3, r3
 800a090:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a094:	454f      	cmp	r7, r9
 800a096:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a09a:	f84a 3b04 	str.w	r3, [sl], #4
 800a09e:	d82b      	bhi.n	800a0f8 <__multiply+0x120>
 800a0a0:	f8cc 8004 	str.w	r8, [ip, #4]
 800a0a4:	9b01      	ldr	r3, [sp, #4]
 800a0a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a0aa:	3204      	adds	r2, #4
 800a0ac:	f1ba 0f00 	cmp.w	sl, #0
 800a0b0:	d020      	beq.n	800a0f4 <__multiply+0x11c>
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	4689      	mov	r9, r1
 800a0b6:	46a8      	mov	r8, r5
 800a0b8:	f04f 0b00 	mov.w	fp, #0
 800a0bc:	f8b9 c000 	ldrh.w	ip, [r9]
 800a0c0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a0c4:	fb0a 440c 	mla	r4, sl, ip, r4
 800a0c8:	445c      	add	r4, fp
 800a0ca:	46c4      	mov	ip, r8
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a0d2:	f84c 3b04 	str.w	r3, [ip], #4
 800a0d6:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0da:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a0de:	0c1b      	lsrs	r3, r3, #16
 800a0e0:	fb0a b303 	mla	r3, sl, r3, fp
 800a0e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a0e8:	454f      	cmp	r7, r9
 800a0ea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a0ee:	d805      	bhi.n	800a0fc <__multiply+0x124>
 800a0f0:	f8c8 3004 	str.w	r3, [r8, #4]
 800a0f4:	3504      	adds	r5, #4
 800a0f6:	e79b      	b.n	800a030 <__multiply+0x58>
 800a0f8:	46d4      	mov	ip, sl
 800a0fa:	e7b3      	b.n	800a064 <__multiply+0x8c>
 800a0fc:	46e0      	mov	r8, ip
 800a0fe:	e7dd      	b.n	800a0bc <__multiply+0xe4>
 800a100:	3e01      	subs	r6, #1
 800a102:	e799      	b.n	800a038 <__multiply+0x60>

0800a104 <__pow5mult>:
 800a104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a108:	4615      	mov	r5, r2
 800a10a:	f012 0203 	ands.w	r2, r2, #3
 800a10e:	4606      	mov	r6, r0
 800a110:	460f      	mov	r7, r1
 800a112:	d007      	beq.n	800a124 <__pow5mult+0x20>
 800a114:	3a01      	subs	r2, #1
 800a116:	4c21      	ldr	r4, [pc, #132]	; (800a19c <__pow5mult+0x98>)
 800a118:	2300      	movs	r3, #0
 800a11a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a11e:	f7ff fec9 	bl	8009eb4 <__multadd>
 800a122:	4607      	mov	r7, r0
 800a124:	10ad      	asrs	r5, r5, #2
 800a126:	d035      	beq.n	800a194 <__pow5mult+0x90>
 800a128:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a12a:	b93c      	cbnz	r4, 800a13c <__pow5mult+0x38>
 800a12c:	2010      	movs	r0, #16
 800a12e:	f7fe fac9 	bl	80086c4 <malloc>
 800a132:	6270      	str	r0, [r6, #36]	; 0x24
 800a134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a138:	6004      	str	r4, [r0, #0]
 800a13a:	60c4      	str	r4, [r0, #12]
 800a13c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a144:	b94c      	cbnz	r4, 800a15a <__pow5mult+0x56>
 800a146:	f240 2171 	movw	r1, #625	; 0x271
 800a14a:	4630      	mov	r0, r6
 800a14c:	f7ff ff3b 	bl	8009fc6 <__i2b>
 800a150:	2300      	movs	r3, #0
 800a152:	f8c8 0008 	str.w	r0, [r8, #8]
 800a156:	4604      	mov	r4, r0
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	f04f 0800 	mov.w	r8, #0
 800a15e:	07eb      	lsls	r3, r5, #31
 800a160:	d50a      	bpl.n	800a178 <__pow5mult+0x74>
 800a162:	4639      	mov	r1, r7
 800a164:	4622      	mov	r2, r4
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ff36 	bl	8009fd8 <__multiply>
 800a16c:	4639      	mov	r1, r7
 800a16e:	4681      	mov	r9, r0
 800a170:	4630      	mov	r0, r6
 800a172:	f7ff fe88 	bl	8009e86 <_Bfree>
 800a176:	464f      	mov	r7, r9
 800a178:	106d      	asrs	r5, r5, #1
 800a17a:	d00b      	beq.n	800a194 <__pow5mult+0x90>
 800a17c:	6820      	ldr	r0, [r4, #0]
 800a17e:	b938      	cbnz	r0, 800a190 <__pow5mult+0x8c>
 800a180:	4622      	mov	r2, r4
 800a182:	4621      	mov	r1, r4
 800a184:	4630      	mov	r0, r6
 800a186:	f7ff ff27 	bl	8009fd8 <__multiply>
 800a18a:	6020      	str	r0, [r4, #0]
 800a18c:	f8c0 8000 	str.w	r8, [r0]
 800a190:	4604      	mov	r4, r0
 800a192:	e7e4      	b.n	800a15e <__pow5mult+0x5a>
 800a194:	4638      	mov	r0, r7
 800a196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19a:	bf00      	nop
 800a19c:	0800a920 	.word	0x0800a920

0800a1a0 <__lshift>:
 800a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	6849      	ldr	r1, [r1, #4]
 800a1ae:	eb0a 0903 	add.w	r9, sl, r3
 800a1b2:	68a3      	ldr	r3, [r4, #8]
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	4616      	mov	r6, r2
 800a1b8:	f109 0501 	add.w	r5, r9, #1
 800a1bc:	42ab      	cmp	r3, r5
 800a1be:	db32      	blt.n	800a226 <__lshift+0x86>
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff fe2c 	bl	8009e1e <_Balloc>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	f100 0114 	add.w	r1, r0, #20
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4553      	cmp	r3, sl
 800a1d2:	db2b      	blt.n	800a22c <__lshift+0x8c>
 800a1d4:	6920      	ldr	r0, [r4, #16]
 800a1d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1da:	f104 0314 	add.w	r3, r4, #20
 800a1de:	f016 021f 	ands.w	r2, r6, #31
 800a1e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1ea:	d025      	beq.n	800a238 <__lshift+0x98>
 800a1ec:	f1c2 0e20 	rsb	lr, r2, #32
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	681e      	ldr	r6, [r3, #0]
 800a1f4:	468a      	mov	sl, r1
 800a1f6:	4096      	lsls	r6, r2
 800a1f8:	4330      	orrs	r0, r6
 800a1fa:	f84a 0b04 	str.w	r0, [sl], #4
 800a1fe:	f853 0b04 	ldr.w	r0, [r3], #4
 800a202:	459c      	cmp	ip, r3
 800a204:	fa20 f00e 	lsr.w	r0, r0, lr
 800a208:	d814      	bhi.n	800a234 <__lshift+0x94>
 800a20a:	6048      	str	r0, [r1, #4]
 800a20c:	b108      	cbz	r0, 800a212 <__lshift+0x72>
 800a20e:	f109 0502 	add.w	r5, r9, #2
 800a212:	3d01      	subs	r5, #1
 800a214:	4638      	mov	r0, r7
 800a216:	f8c8 5010 	str.w	r5, [r8, #16]
 800a21a:	4621      	mov	r1, r4
 800a21c:	f7ff fe33 	bl	8009e86 <_Bfree>
 800a220:	4640      	mov	r0, r8
 800a222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a226:	3101      	adds	r1, #1
 800a228:	005b      	lsls	r3, r3, #1
 800a22a:	e7c7      	b.n	800a1bc <__lshift+0x1c>
 800a22c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a230:	3301      	adds	r3, #1
 800a232:	e7cd      	b.n	800a1d0 <__lshift+0x30>
 800a234:	4651      	mov	r1, sl
 800a236:	e7dc      	b.n	800a1f2 <__lshift+0x52>
 800a238:	3904      	subs	r1, #4
 800a23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a23e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a242:	459c      	cmp	ip, r3
 800a244:	d8f9      	bhi.n	800a23a <__lshift+0x9a>
 800a246:	e7e4      	b.n	800a212 <__lshift+0x72>

0800a248 <__mcmp>:
 800a248:	6903      	ldr	r3, [r0, #16]
 800a24a:	690a      	ldr	r2, [r1, #16]
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	b530      	push	{r4, r5, lr}
 800a250:	d10c      	bne.n	800a26c <__mcmp+0x24>
 800a252:	0092      	lsls	r2, r2, #2
 800a254:	3014      	adds	r0, #20
 800a256:	3114      	adds	r1, #20
 800a258:	1884      	adds	r4, r0, r2
 800a25a:	4411      	add	r1, r2
 800a25c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a260:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a264:	4295      	cmp	r5, r2
 800a266:	d003      	beq.n	800a270 <__mcmp+0x28>
 800a268:	d305      	bcc.n	800a276 <__mcmp+0x2e>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4618      	mov	r0, r3
 800a26e:	bd30      	pop	{r4, r5, pc}
 800a270:	42a0      	cmp	r0, r4
 800a272:	d3f3      	bcc.n	800a25c <__mcmp+0x14>
 800a274:	e7fa      	b.n	800a26c <__mcmp+0x24>
 800a276:	f04f 33ff 	mov.w	r3, #4294967295
 800a27a:	e7f7      	b.n	800a26c <__mcmp+0x24>

0800a27c <__mdiff>:
 800a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	460d      	mov	r5, r1
 800a282:	4607      	mov	r7, r0
 800a284:	4611      	mov	r1, r2
 800a286:	4628      	mov	r0, r5
 800a288:	4614      	mov	r4, r2
 800a28a:	f7ff ffdd 	bl	800a248 <__mcmp>
 800a28e:	1e06      	subs	r6, r0, #0
 800a290:	d108      	bne.n	800a2a4 <__mdiff+0x28>
 800a292:	4631      	mov	r1, r6
 800a294:	4638      	mov	r0, r7
 800a296:	f7ff fdc2 	bl	8009e1e <_Balloc>
 800a29a:	2301      	movs	r3, #1
 800a29c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a4:	bfa4      	itt	ge
 800a2a6:	4623      	movge	r3, r4
 800a2a8:	462c      	movge	r4, r5
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	6861      	ldr	r1, [r4, #4]
 800a2ae:	bfa6      	itte	ge
 800a2b0:	461d      	movge	r5, r3
 800a2b2:	2600      	movge	r6, #0
 800a2b4:	2601      	movlt	r6, #1
 800a2b6:	f7ff fdb2 	bl	8009e1e <_Balloc>
 800a2ba:	692b      	ldr	r3, [r5, #16]
 800a2bc:	60c6      	str	r6, [r0, #12]
 800a2be:	6926      	ldr	r6, [r4, #16]
 800a2c0:	f105 0914 	add.w	r9, r5, #20
 800a2c4:	f104 0214 	add.w	r2, r4, #20
 800a2c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a2cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a2d0:	f100 0514 	add.w	r5, r0, #20
 800a2d4:	f04f 0e00 	mov.w	lr, #0
 800a2d8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a2dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a2e0:	fa1e f18a 	uxtah	r1, lr, sl
 800a2e4:	b2a3      	uxth	r3, r4
 800a2e6:	1ac9      	subs	r1, r1, r3
 800a2e8:	0c23      	lsrs	r3, r4, #16
 800a2ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a2ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a2f2:	b289      	uxth	r1, r1
 800a2f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a2f8:	45c8      	cmp	r8, r9
 800a2fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a2fe:	4694      	mov	ip, r2
 800a300:	f845 3b04 	str.w	r3, [r5], #4
 800a304:	d8e8      	bhi.n	800a2d8 <__mdiff+0x5c>
 800a306:	45bc      	cmp	ip, r7
 800a308:	d304      	bcc.n	800a314 <__mdiff+0x98>
 800a30a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a30e:	b183      	cbz	r3, 800a332 <__mdiff+0xb6>
 800a310:	6106      	str	r6, [r0, #16]
 800a312:	e7c5      	b.n	800a2a0 <__mdiff+0x24>
 800a314:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a318:	fa1e f381 	uxtah	r3, lr, r1
 800a31c:	141a      	asrs	r2, r3, #16
 800a31e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a322:	b29b      	uxth	r3, r3
 800a324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a328:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a32c:	f845 3b04 	str.w	r3, [r5], #4
 800a330:	e7e9      	b.n	800a306 <__mdiff+0x8a>
 800a332:	3e01      	subs	r6, #1
 800a334:	e7e9      	b.n	800a30a <__mdiff+0x8e>

0800a336 <__d2b>:
 800a336:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a33a:	460e      	mov	r6, r1
 800a33c:	2101      	movs	r1, #1
 800a33e:	ec59 8b10 	vmov	r8, r9, d0
 800a342:	4615      	mov	r5, r2
 800a344:	f7ff fd6b 	bl	8009e1e <_Balloc>
 800a348:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a34c:	4607      	mov	r7, r0
 800a34e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a352:	bb34      	cbnz	r4, 800a3a2 <__d2b+0x6c>
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	f1b8 0300 	subs.w	r3, r8, #0
 800a35a:	d027      	beq.n	800a3ac <__d2b+0x76>
 800a35c:	a802      	add	r0, sp, #8
 800a35e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a362:	f7ff fe01 	bl	8009f68 <__lo0bits>
 800a366:	9900      	ldr	r1, [sp, #0]
 800a368:	b1f0      	cbz	r0, 800a3a8 <__d2b+0x72>
 800a36a:	9a01      	ldr	r2, [sp, #4]
 800a36c:	f1c0 0320 	rsb	r3, r0, #32
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	430b      	orrs	r3, r1
 800a376:	40c2      	lsrs	r2, r0
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	9201      	str	r2, [sp, #4]
 800a37c:	9b01      	ldr	r3, [sp, #4]
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	bf14      	ite	ne
 800a384:	2102      	movne	r1, #2
 800a386:	2101      	moveq	r1, #1
 800a388:	6139      	str	r1, [r7, #16]
 800a38a:	b1c4      	cbz	r4, 800a3be <__d2b+0x88>
 800a38c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a390:	4404      	add	r4, r0
 800a392:	6034      	str	r4, [r6, #0]
 800a394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a398:	6028      	str	r0, [r5, #0]
 800a39a:	4638      	mov	r0, r7
 800a39c:	b003      	add	sp, #12
 800a39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3a6:	e7d5      	b.n	800a354 <__d2b+0x1e>
 800a3a8:	6179      	str	r1, [r7, #20]
 800a3aa:	e7e7      	b.n	800a37c <__d2b+0x46>
 800a3ac:	a801      	add	r0, sp, #4
 800a3ae:	f7ff fddb 	bl	8009f68 <__lo0bits>
 800a3b2:	9b01      	ldr	r3, [sp, #4]
 800a3b4:	617b      	str	r3, [r7, #20]
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	6139      	str	r1, [r7, #16]
 800a3ba:	3020      	adds	r0, #32
 800a3bc:	e7e5      	b.n	800a38a <__d2b+0x54>
 800a3be:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a3c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3c6:	6030      	str	r0, [r6, #0]
 800a3c8:	6918      	ldr	r0, [r3, #16]
 800a3ca:	f7ff fdae 	bl	8009f2a <__hi0bits>
 800a3ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a3d2:	e7e1      	b.n	800a398 <__d2b+0x62>

0800a3d4 <_calloc_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	fb02 f401 	mul.w	r4, r2, r1
 800a3da:	4621      	mov	r1, r4
 800a3dc:	f7fe f9d8 	bl	8008790 <_malloc_r>
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	b118      	cbz	r0, 800a3ec <_calloc_r+0x18>
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	f7fe f97c 	bl	80086e4 <memset>
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}

0800a3f0 <__ssputs_r>:
 800a3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f4:	688e      	ldr	r6, [r1, #8]
 800a3f6:	429e      	cmp	r6, r3
 800a3f8:	4682      	mov	sl, r0
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	4690      	mov	r8, r2
 800a3fe:	4699      	mov	r9, r3
 800a400:	d837      	bhi.n	800a472 <__ssputs_r+0x82>
 800a402:	898a      	ldrh	r2, [r1, #12]
 800a404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a408:	d031      	beq.n	800a46e <__ssputs_r+0x7e>
 800a40a:	6825      	ldr	r5, [r4, #0]
 800a40c:	6909      	ldr	r1, [r1, #16]
 800a40e:	1a6f      	subs	r7, r5, r1
 800a410:	6965      	ldr	r5, [r4, #20]
 800a412:	2302      	movs	r3, #2
 800a414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a418:	fb95 f5f3 	sdiv	r5, r5, r3
 800a41c:	f109 0301 	add.w	r3, r9, #1
 800a420:	443b      	add	r3, r7
 800a422:	429d      	cmp	r5, r3
 800a424:	bf38      	it	cc
 800a426:	461d      	movcc	r5, r3
 800a428:	0553      	lsls	r3, r2, #21
 800a42a:	d530      	bpl.n	800a48e <__ssputs_r+0x9e>
 800a42c:	4629      	mov	r1, r5
 800a42e:	f7fe f9af 	bl	8008790 <_malloc_r>
 800a432:	4606      	mov	r6, r0
 800a434:	b950      	cbnz	r0, 800a44c <__ssputs_r+0x5c>
 800a436:	230c      	movs	r3, #12
 800a438:	f8ca 3000 	str.w	r3, [sl]
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44c:	463a      	mov	r2, r7
 800a44e:	6921      	ldr	r1, [r4, #16]
 800a450:	f7ff fcd8 	bl	8009e04 <memcpy>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a45a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	6126      	str	r6, [r4, #16]
 800a462:	6165      	str	r5, [r4, #20]
 800a464:	443e      	add	r6, r7
 800a466:	1bed      	subs	r5, r5, r7
 800a468:	6026      	str	r6, [r4, #0]
 800a46a:	60a5      	str	r5, [r4, #8]
 800a46c:	464e      	mov	r6, r9
 800a46e:	454e      	cmp	r6, r9
 800a470:	d900      	bls.n	800a474 <__ssputs_r+0x84>
 800a472:	464e      	mov	r6, r9
 800a474:	4632      	mov	r2, r6
 800a476:	4641      	mov	r1, r8
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	f000 f91d 	bl	800a6b8 <memmove>
 800a47e:	68a3      	ldr	r3, [r4, #8]
 800a480:	1b9b      	subs	r3, r3, r6
 800a482:	60a3      	str	r3, [r4, #8]
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	441e      	add	r6, r3
 800a488:	6026      	str	r6, [r4, #0]
 800a48a:	2000      	movs	r0, #0
 800a48c:	e7dc      	b.n	800a448 <__ssputs_r+0x58>
 800a48e:	462a      	mov	r2, r5
 800a490:	f000 f92b 	bl	800a6ea <_realloc_r>
 800a494:	4606      	mov	r6, r0
 800a496:	2800      	cmp	r0, #0
 800a498:	d1e2      	bne.n	800a460 <__ssputs_r+0x70>
 800a49a:	6921      	ldr	r1, [r4, #16]
 800a49c:	4650      	mov	r0, sl
 800a49e:	f7fe f929 	bl	80086f4 <_free_r>
 800a4a2:	e7c8      	b.n	800a436 <__ssputs_r+0x46>

0800a4a4 <_svfiprintf_r>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	461d      	mov	r5, r3
 800a4aa:	898b      	ldrh	r3, [r1, #12]
 800a4ac:	061f      	lsls	r7, r3, #24
 800a4ae:	b09d      	sub	sp, #116	; 0x74
 800a4b0:	4680      	mov	r8, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	d50f      	bpl.n	800a4d8 <_svfiprintf_r+0x34>
 800a4b8:	690b      	ldr	r3, [r1, #16]
 800a4ba:	b96b      	cbnz	r3, 800a4d8 <_svfiprintf_r+0x34>
 800a4bc:	2140      	movs	r1, #64	; 0x40
 800a4be:	f7fe f967 	bl	8008790 <_malloc_r>
 800a4c2:	6020      	str	r0, [r4, #0]
 800a4c4:	6120      	str	r0, [r4, #16]
 800a4c6:	b928      	cbnz	r0, 800a4d4 <_svfiprintf_r+0x30>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	f8c8 3000 	str.w	r3, [r8]
 800a4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d2:	e0c8      	b.n	800a666 <_svfiprintf_r+0x1c2>
 800a4d4:	2340      	movs	r3, #64	; 0x40
 800a4d6:	6163      	str	r3, [r4, #20]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	9309      	str	r3, [sp, #36]	; 0x24
 800a4dc:	2320      	movs	r3, #32
 800a4de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4e2:	2330      	movs	r3, #48	; 0x30
 800a4e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4e8:	9503      	str	r5, [sp, #12]
 800a4ea:	f04f 0b01 	mov.w	fp, #1
 800a4ee:	4637      	mov	r7, r6
 800a4f0:	463d      	mov	r5, r7
 800a4f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4f6:	b10b      	cbz	r3, 800a4fc <_svfiprintf_r+0x58>
 800a4f8:	2b25      	cmp	r3, #37	; 0x25
 800a4fa:	d13e      	bne.n	800a57a <_svfiprintf_r+0xd6>
 800a4fc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a500:	d00b      	beq.n	800a51a <_svfiprintf_r+0x76>
 800a502:	4653      	mov	r3, sl
 800a504:	4632      	mov	r2, r6
 800a506:	4621      	mov	r1, r4
 800a508:	4640      	mov	r0, r8
 800a50a:	f7ff ff71 	bl	800a3f0 <__ssputs_r>
 800a50e:	3001      	adds	r0, #1
 800a510:	f000 80a4 	beq.w	800a65c <_svfiprintf_r+0x1b8>
 800a514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a516:	4453      	add	r3, sl
 800a518:	9309      	str	r3, [sp, #36]	; 0x24
 800a51a:	783b      	ldrb	r3, [r7, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 809d 	beq.w	800a65c <_svfiprintf_r+0x1b8>
 800a522:	2300      	movs	r3, #0
 800a524:	f04f 32ff 	mov.w	r2, #4294967295
 800a528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a52c:	9304      	str	r3, [sp, #16]
 800a52e:	9307      	str	r3, [sp, #28]
 800a530:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a534:	931a      	str	r3, [sp, #104]	; 0x68
 800a536:	462f      	mov	r7, r5
 800a538:	2205      	movs	r2, #5
 800a53a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a53e:	4850      	ldr	r0, [pc, #320]	; (800a680 <_svfiprintf_r+0x1dc>)
 800a540:	f7f5 fe4e 	bl	80001e0 <memchr>
 800a544:	9b04      	ldr	r3, [sp, #16]
 800a546:	b9d0      	cbnz	r0, 800a57e <_svfiprintf_r+0xda>
 800a548:	06d9      	lsls	r1, r3, #27
 800a54a:	bf44      	itt	mi
 800a54c:	2220      	movmi	r2, #32
 800a54e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a552:	071a      	lsls	r2, r3, #28
 800a554:	bf44      	itt	mi
 800a556:	222b      	movmi	r2, #43	; 0x2b
 800a558:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a55c:	782a      	ldrb	r2, [r5, #0]
 800a55e:	2a2a      	cmp	r2, #42	; 0x2a
 800a560:	d015      	beq.n	800a58e <_svfiprintf_r+0xea>
 800a562:	9a07      	ldr	r2, [sp, #28]
 800a564:	462f      	mov	r7, r5
 800a566:	2000      	movs	r0, #0
 800a568:	250a      	movs	r5, #10
 800a56a:	4639      	mov	r1, r7
 800a56c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a570:	3b30      	subs	r3, #48	; 0x30
 800a572:	2b09      	cmp	r3, #9
 800a574:	d94d      	bls.n	800a612 <_svfiprintf_r+0x16e>
 800a576:	b1b8      	cbz	r0, 800a5a8 <_svfiprintf_r+0x104>
 800a578:	e00f      	b.n	800a59a <_svfiprintf_r+0xf6>
 800a57a:	462f      	mov	r7, r5
 800a57c:	e7b8      	b.n	800a4f0 <_svfiprintf_r+0x4c>
 800a57e:	4a40      	ldr	r2, [pc, #256]	; (800a680 <_svfiprintf_r+0x1dc>)
 800a580:	1a80      	subs	r0, r0, r2
 800a582:	fa0b f000 	lsl.w	r0, fp, r0
 800a586:	4318      	orrs	r0, r3
 800a588:	9004      	str	r0, [sp, #16]
 800a58a:	463d      	mov	r5, r7
 800a58c:	e7d3      	b.n	800a536 <_svfiprintf_r+0x92>
 800a58e:	9a03      	ldr	r2, [sp, #12]
 800a590:	1d11      	adds	r1, r2, #4
 800a592:	6812      	ldr	r2, [r2, #0]
 800a594:	9103      	str	r1, [sp, #12]
 800a596:	2a00      	cmp	r2, #0
 800a598:	db01      	blt.n	800a59e <_svfiprintf_r+0xfa>
 800a59a:	9207      	str	r2, [sp, #28]
 800a59c:	e004      	b.n	800a5a8 <_svfiprintf_r+0x104>
 800a59e:	4252      	negs	r2, r2
 800a5a0:	f043 0302 	orr.w	r3, r3, #2
 800a5a4:	9207      	str	r2, [sp, #28]
 800a5a6:	9304      	str	r3, [sp, #16]
 800a5a8:	783b      	ldrb	r3, [r7, #0]
 800a5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ac:	d10c      	bne.n	800a5c8 <_svfiprintf_r+0x124>
 800a5ae:	787b      	ldrb	r3, [r7, #1]
 800a5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b2:	d133      	bne.n	800a61c <_svfiprintf_r+0x178>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	1d1a      	adds	r2, r3, #4
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	9203      	str	r2, [sp, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bfb8      	it	lt
 800a5c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5c4:	3702      	adds	r7, #2
 800a5c6:	9305      	str	r3, [sp, #20]
 800a5c8:	4d2e      	ldr	r5, [pc, #184]	; (800a684 <_svfiprintf_r+0x1e0>)
 800a5ca:	7839      	ldrb	r1, [r7, #0]
 800a5cc:	2203      	movs	r2, #3
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f7f5 fe06 	bl	80001e0 <memchr>
 800a5d4:	b138      	cbz	r0, 800a5e6 <_svfiprintf_r+0x142>
 800a5d6:	2340      	movs	r3, #64	; 0x40
 800a5d8:	1b40      	subs	r0, r0, r5
 800a5da:	fa03 f000 	lsl.w	r0, r3, r0
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	4303      	orrs	r3, r0
 800a5e2:	3701      	adds	r7, #1
 800a5e4:	9304      	str	r3, [sp, #16]
 800a5e6:	7839      	ldrb	r1, [r7, #0]
 800a5e8:	4827      	ldr	r0, [pc, #156]	; (800a688 <_svfiprintf_r+0x1e4>)
 800a5ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5ee:	2206      	movs	r2, #6
 800a5f0:	1c7e      	adds	r6, r7, #1
 800a5f2:	f7f5 fdf5 	bl	80001e0 <memchr>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d038      	beq.n	800a66c <_svfiprintf_r+0x1c8>
 800a5fa:	4b24      	ldr	r3, [pc, #144]	; (800a68c <_svfiprintf_r+0x1e8>)
 800a5fc:	bb13      	cbnz	r3, 800a644 <_svfiprintf_r+0x1a0>
 800a5fe:	9b03      	ldr	r3, [sp, #12]
 800a600:	3307      	adds	r3, #7
 800a602:	f023 0307 	bic.w	r3, r3, #7
 800a606:	3308      	adds	r3, #8
 800a608:	9303      	str	r3, [sp, #12]
 800a60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60c:	444b      	add	r3, r9
 800a60e:	9309      	str	r3, [sp, #36]	; 0x24
 800a610:	e76d      	b.n	800a4ee <_svfiprintf_r+0x4a>
 800a612:	fb05 3202 	mla	r2, r5, r2, r3
 800a616:	2001      	movs	r0, #1
 800a618:	460f      	mov	r7, r1
 800a61a:	e7a6      	b.n	800a56a <_svfiprintf_r+0xc6>
 800a61c:	2300      	movs	r3, #0
 800a61e:	3701      	adds	r7, #1
 800a620:	9305      	str	r3, [sp, #20]
 800a622:	4619      	mov	r1, r3
 800a624:	250a      	movs	r5, #10
 800a626:	4638      	mov	r0, r7
 800a628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a62c:	3a30      	subs	r2, #48	; 0x30
 800a62e:	2a09      	cmp	r2, #9
 800a630:	d903      	bls.n	800a63a <_svfiprintf_r+0x196>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d0c8      	beq.n	800a5c8 <_svfiprintf_r+0x124>
 800a636:	9105      	str	r1, [sp, #20]
 800a638:	e7c6      	b.n	800a5c8 <_svfiprintf_r+0x124>
 800a63a:	fb05 2101 	mla	r1, r5, r1, r2
 800a63e:	2301      	movs	r3, #1
 800a640:	4607      	mov	r7, r0
 800a642:	e7f0      	b.n	800a626 <_svfiprintf_r+0x182>
 800a644:	ab03      	add	r3, sp, #12
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	4622      	mov	r2, r4
 800a64a:	4b11      	ldr	r3, [pc, #68]	; (800a690 <_svfiprintf_r+0x1ec>)
 800a64c:	a904      	add	r1, sp, #16
 800a64e:	4640      	mov	r0, r8
 800a650:	f7fe f98c 	bl	800896c <_printf_float>
 800a654:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a658:	4681      	mov	r9, r0
 800a65a:	d1d6      	bne.n	800a60a <_svfiprintf_r+0x166>
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	065b      	lsls	r3, r3, #25
 800a660:	f53f af35 	bmi.w	800a4ce <_svfiprintf_r+0x2a>
 800a664:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a666:	b01d      	add	sp, #116	; 0x74
 800a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66c:	ab03      	add	r3, sp, #12
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	4622      	mov	r2, r4
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <_svfiprintf_r+0x1ec>)
 800a674:	a904      	add	r1, sp, #16
 800a676:	4640      	mov	r0, r8
 800a678:	f7fe fc2e 	bl	8008ed8 <_printf_i>
 800a67c:	e7ea      	b.n	800a654 <_svfiprintf_r+0x1b0>
 800a67e:	bf00      	nop
 800a680:	0800a92c 	.word	0x0800a92c
 800a684:	0800a932 	.word	0x0800a932
 800a688:	0800a936 	.word	0x0800a936
 800a68c:	0800896d 	.word	0x0800896d
 800a690:	0800a3f1 	.word	0x0800a3f1

0800a694 <__ascii_mbtowc>:
 800a694:	b082      	sub	sp, #8
 800a696:	b901      	cbnz	r1, 800a69a <__ascii_mbtowc+0x6>
 800a698:	a901      	add	r1, sp, #4
 800a69a:	b142      	cbz	r2, 800a6ae <__ascii_mbtowc+0x1a>
 800a69c:	b14b      	cbz	r3, 800a6b2 <__ascii_mbtowc+0x1e>
 800a69e:	7813      	ldrb	r3, [r2, #0]
 800a6a0:	600b      	str	r3, [r1, #0]
 800a6a2:	7812      	ldrb	r2, [r2, #0]
 800a6a4:	1c10      	adds	r0, r2, #0
 800a6a6:	bf18      	it	ne
 800a6a8:	2001      	movne	r0, #1
 800a6aa:	b002      	add	sp, #8
 800a6ac:	4770      	bx	lr
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	e7fb      	b.n	800a6aa <__ascii_mbtowc+0x16>
 800a6b2:	f06f 0001 	mvn.w	r0, #1
 800a6b6:	e7f8      	b.n	800a6aa <__ascii_mbtowc+0x16>

0800a6b8 <memmove>:
 800a6b8:	4288      	cmp	r0, r1
 800a6ba:	b510      	push	{r4, lr}
 800a6bc:	eb01 0302 	add.w	r3, r1, r2
 800a6c0:	d807      	bhi.n	800a6d2 <memmove+0x1a>
 800a6c2:	1e42      	subs	r2, r0, #1
 800a6c4:	4299      	cmp	r1, r3
 800a6c6:	d00a      	beq.n	800a6de <memmove+0x26>
 800a6c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a6d0:	e7f8      	b.n	800a6c4 <memmove+0xc>
 800a6d2:	4283      	cmp	r3, r0
 800a6d4:	d9f5      	bls.n	800a6c2 <memmove+0xa>
 800a6d6:	1881      	adds	r1, r0, r2
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	42d3      	cmn	r3, r2
 800a6dc:	d100      	bne.n	800a6e0 <memmove+0x28>
 800a6de:	bd10      	pop	{r4, pc}
 800a6e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a6e8:	e7f7      	b.n	800a6da <memmove+0x22>

0800a6ea <_realloc_r>:
 800a6ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	460e      	mov	r6, r1
 800a6f2:	b921      	cbnz	r1, 800a6fe <_realloc_r+0x14>
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6fa:	f7fe b849 	b.w	8008790 <_malloc_r>
 800a6fe:	b922      	cbnz	r2, 800a70a <_realloc_r+0x20>
 800a700:	f7fd fff8 	bl	80086f4 <_free_r>
 800a704:	4625      	mov	r5, r4
 800a706:	4628      	mov	r0, r5
 800a708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a70a:	f000 f821 	bl	800a750 <_malloc_usable_size_r>
 800a70e:	42a0      	cmp	r0, r4
 800a710:	d20f      	bcs.n	800a732 <_realloc_r+0x48>
 800a712:	4621      	mov	r1, r4
 800a714:	4638      	mov	r0, r7
 800a716:	f7fe f83b 	bl	8008790 <_malloc_r>
 800a71a:	4605      	mov	r5, r0
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0f2      	beq.n	800a706 <_realloc_r+0x1c>
 800a720:	4631      	mov	r1, r6
 800a722:	4622      	mov	r2, r4
 800a724:	f7ff fb6e 	bl	8009e04 <memcpy>
 800a728:	4631      	mov	r1, r6
 800a72a:	4638      	mov	r0, r7
 800a72c:	f7fd ffe2 	bl	80086f4 <_free_r>
 800a730:	e7e9      	b.n	800a706 <_realloc_r+0x1c>
 800a732:	4635      	mov	r5, r6
 800a734:	e7e7      	b.n	800a706 <_realloc_r+0x1c>

0800a736 <__ascii_wctomb>:
 800a736:	b149      	cbz	r1, 800a74c <__ascii_wctomb+0x16>
 800a738:	2aff      	cmp	r2, #255	; 0xff
 800a73a:	bf85      	ittet	hi
 800a73c:	238a      	movhi	r3, #138	; 0x8a
 800a73e:	6003      	strhi	r3, [r0, #0]
 800a740:	700a      	strbls	r2, [r1, #0]
 800a742:	f04f 30ff 	movhi.w	r0, #4294967295
 800a746:	bf98      	it	ls
 800a748:	2001      	movls	r0, #1
 800a74a:	4770      	bx	lr
 800a74c:	4608      	mov	r0, r1
 800a74e:	4770      	bx	lr

0800a750 <_malloc_usable_size_r>:
 800a750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a754:	1f18      	subs	r0, r3, #4
 800a756:	2b00      	cmp	r3, #0
 800a758:	bfbc      	itt	lt
 800a75a:	580b      	ldrlt	r3, [r1, r0]
 800a75c:	18c0      	addlt	r0, r0, r3
 800a75e:	4770      	bx	lr

0800a760 <_init>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	bf00      	nop
 800a764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a766:	bc08      	pop	{r3}
 800a768:	469e      	mov	lr, r3
 800a76a:	4770      	bx	lr

0800a76c <_fini>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr

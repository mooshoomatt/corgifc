
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800bd68  0800bd68  0001bd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c040  0800c040  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c048  0800c048  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c048  0800c048  0001c048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c04c  0800c04c  0001c04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800c050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  20000358  0800c3a8  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001e2c  0800c3a8  00021e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a236  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000349e  00000000  00000000  0003a5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  0003da60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  0003ee08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002292a  00000000  00000000  00040050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011838  00000000  00000000  0006297a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c344e  00000000  00000000  000741b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c78  00000000  00000000  0013767c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd50 	.word	0x0800bd50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800bd50 	.word	0x0800bd50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2130      	movs	r1, #48	; 0x30
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 febc 	bl	8002c48 <HAL_I2C_Mem_Read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	2b1e      	cmp	r3, #30
 8000ede:	d001      	beq.n	8000ee4 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	21d0      	movs	r1, #208	; 0xd0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f001 fea4 	bl	8002c48 <HAL_I2C_Mem_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000f0a:	7a3b      	ldrb	r3, [r7, #8]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d001      	beq.n	8000f14 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <BMI088_I2C_GYRO_INIT>:

/* CUSTOM GYROSCOPE SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_GYRO_INIT(I2C_HandleTypeDef *hi2c)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	 * WRITING BACK TO THE REGISTER
	 */

	HAL_StatusTypeDef ret;
	uint8_t buf[1]; // Tx/Rx Buffer
	ret = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
	// ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_RANGE, buf));

	// SET GYROSCOPE DATA RATE AND BANDWIDTH
	// DATA RATE: [1000 HZ]    400 HZ
	// BANDWIDTH: [116 Hz]     47 HZ
	buf[0] = 0x82;
 8000f2a:	2382      	movs	r3, #130	; 0x82
 8000f2c:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_BANDWIDTH, buf);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2210      	movs	r2, #16
 8000f34:	2168      	movs	r1, #104	; 0x68
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f861 	bl	8000ffe <BMI088_I2C_Reg_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	73fb      	strb	r3, [r7, #15]

	// SET GYROSCOPE INT3 MODE TO PUSH-PULL
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2216      	movs	r2, #22
 8000f4c:	2168      	movs	r1, #104	; 0x68
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f874 	bl	800103c <BMI088_I2C_Reg_Read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	73fb      	strb	r3, [r7, #15]
	buf[0] &= 0xFD;
 8000f5e:	7b3b      	ldrb	r3, [r7, #12]
 8000f60:	f023 0302 	bic.w	r3, r3, #2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2216      	movs	r2, #22
 8000f6e:	2168      	movs	r1, #104	; 0x68
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f844 	bl	8000ffe <BMI088_I2C_Reg_Write>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]

	// MAP GYROSCOPE DATA-READY INTERRUPT TO INT3
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2218      	movs	r2, #24
 8000f86:	2168      	movs	r1, #104	; 0x68
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f857 	bl	800103c <BMI088_I2C_Reg_Read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x01;
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	2218      	movs	r2, #24
 8000fa8:	2168      	movs	r1, #104	; 0x68
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f827 	bl	8000ffe <BMI088_I2C_Reg_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	73fb      	strb	r3, [r7, #15]

	// ENABLE GYROSCOPE DATA-READY INTERRUPT
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2215      	movs	r2, #21
 8000fc0:	2168      	movs	r1, #104	; 0x68
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f83a 	bl	800103c <BMI088_I2C_Reg_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x80;
 8000fd2:	7b3b      	ldrb	r3, [r7, #12]
 8000fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2215      	movs	r2, #21
 8000fe2:	2168      	movs	r1, #104	; 0x68
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f80a 	bl	8000ffe <BMI088_I2C_Reg_Write>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <BMI088_I2C_Reg_Write>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* WRITE REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b088      	sub	sp, #32
 8001002:	af04      	add	r7, sp, #16
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	4613      	mov	r3, r2
 800100e:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	b29b      	uxth	r3, r3
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	b299      	uxth	r1, r3
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	b29a      	uxth	r2, r3
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2301      	movs	r3, #1
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f001 fd11 	bl	8002a54 <HAL_I2C_Mem_Write>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <BMI088_I2C_Reg_Read>:

/* READ REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	72fb      	strb	r3, [r7, #11]
 800104a:	4613      	mov	r3, r2
 800104c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	b29b      	uxth	r3, r3
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	b299      	uxth	r1, r3
 8001056:	7abb      	ldrb	r3, [r7, #10]
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f001 fdec 	bl	8002c48 <HAL_I2C_Mem_Read>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	b095      	sub	sp, #84	; 0x54
 8001080:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f001 f831 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f8b1 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 faff 	bl	800168c <MX_GPIO_Init>
  MX_I2C1_Init();
 800108e:	f000 f917 	bl	80012c0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001092:	f008 f8d1 	bl	8009238 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8001096:	f000 fac3 	bl	8001620 <MX_TIM7_Init>
  MX_TIM6_Init();
 800109a:	f000 fa8b 	bl	80015b4 <MX_TIM6_Init>
  MX_TIM2_Init();
 800109e:	f000 f93d 	bl	800131c <MX_TIM2_Init>
  MX_TIM3_Init();
 80010a2:	f000 f9b5 	bl	8001410 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010a6:	f000 fa27 	bl	80014f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 80010aa:	4846      	ldr	r0, [pc, #280]	; (80011c4 <main+0x148>)
 80010ac:	f7ff fefc 	bl	8000ea8 <BMI088_I2C_Read_CHIP_IDS>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <main+0x3e>
 80010b6:	f000 fd7f 	bl	8001bb8 <Error_Handler>

  // RUN BMI088 GYROSCOPE INITIALIZATION
  if ( BMI088_I2C_GYRO_INIT(&hi2c1) != HAL_OK ) { Error_Handler(); };
 80010ba:	4842      	ldr	r0, [pc, #264]	; (80011c4 <main+0x148>)
 80010bc:	f7ff ff2f 	bl	8000f1e <BMI088_I2C_GYRO_INIT>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <main+0x4e>
 80010c6:	f000 fd77 	bl	8001bb8 <Error_Handler>

  // START 50Hz SERIAL UPDATE TIMER
  HAL_TIM_Base_Start_IT(&htim7);
 80010ca:	483f      	ldr	r0, [pc, #252]	; (80011c8 <main+0x14c>)
 80010cc:	f004 f95b 	bl	8005386 <HAL_TIM_Base_Start_IT>
  // START TIMEKEEPING TIMER
  HAL_TIM_Base_Start(&htim6);
 80010d0:	483e      	ldr	r0, [pc, #248]	; (80011cc <main+0x150>)
 80010d2:	f004 f934 	bl	800533e <HAL_TIM_Base_Start>
  // START RX INPUT CAPTURE TIMERS
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80010d6:	2100      	movs	r1, #0
 80010d8:	483d      	ldr	r0, [pc, #244]	; (80011d0 <main+0x154>)
 80010da:	f004 fa0d 	bl	80054f8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80010de:	2104      	movs	r1, #4
 80010e0:	483b      	ldr	r0, [pc, #236]	; (80011d0 <main+0x154>)
 80010e2:	f004 fa09 	bl	80054f8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80010e6:	2108      	movs	r1, #8
 80010e8:	4839      	ldr	r0, [pc, #228]	; (80011d0 <main+0x154>)
 80010ea:	f004 fa05 	bl	80054f8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80010ee:	210c      	movs	r1, #12
 80010f0:	4837      	ldr	r0, [pc, #220]	; (80011d0 <main+0x154>)
 80010f2:	f004 fa01 	bl	80054f8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80010f6:	2100      	movs	r1, #0
 80010f8:	4836      	ldr	r0, [pc, #216]	; (80011d4 <main+0x158>)
 80010fa:	f004 f9fd 	bl	80054f8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80010fe:	2104      	movs	r1, #4
 8001100:	4834      	ldr	r0, [pc, #208]	; (80011d4 <main+0x158>)
 8001102:	f004 f9f9 	bl	80054f8 <HAL_TIM_IC_Start_IT>
  // START PWM OUTPUT TIMERS
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001106:	2100      	movs	r1, #0
 8001108:	4833      	ldr	r0, [pc, #204]	; (80011d8 <main+0x15c>)
 800110a:	f004 f98b 	bl	8005424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800110e:	2104      	movs	r1, #4
 8001110:	4831      	ldr	r0, [pc, #196]	; (80011d8 <main+0x15c>)
 8001112:	f004 f987 	bl	8005424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001116:	2108      	movs	r1, #8
 8001118:	482f      	ldr	r0, [pc, #188]	; (80011d8 <main+0x15c>)
 800111a:	f004 f983 	bl	8005424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800111e:	210c      	movs	r1, #12
 8001120:	482d      	ldr	r0, [pc, #180]	; (80011d8 <main+0x15c>)
 8001122:	f004 f97f 	bl	8005424 <HAL_TIM_PWM_Start>

  // TURN ON STATUS LED
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2140      	movs	r1, #64	; 0x40
 800112a:	482c      	ldr	r0, [pc, #176]	; (80011dc <main+0x160>)
 800112c:	f001 fb1c 	bl	8002768 <HAL_GPIO_WritePin>

  TIM2->CCR1 = 9000 - 1;
 8001130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001134:	f242 3227 	movw	r2, #8999	; 0x2327
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 18000 - 1;
 800113a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113e:	f244 624f 	movw	r2, #17999	; 0x464f
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 9000;
 8001144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001148:	f242 3228 	movw	r2, #9000	; 0x2328
 800114c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->CCR4 = 18000;
 800114e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001152:	f244 6250 	movw	r2, #18000	; 0x4650
 8001156:	641a      	str	r2, [r3, #64]	; 0x40

  // Get starting time
  tprev = __HAL_TIM_GET_COUNTER(&htim6);
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <main+0x150>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <main+0x164>)
 8001162:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf((char *)buf, "%i\t%i\t%i\t%i\t%i\t%i\n", IC_Elapsed[0], IC_Elapsed[1], IC_Elapsed[2], IC_Elapsed[3], IC_Elapsed[4], IC_Elapsed[5]);
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <main+0x168>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	461d      	mov	r5, r3
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <main+0x168>)
 800116e:	885b      	ldrh	r3, [r3, #2]
 8001170:	b29b      	uxth	r3, r3
 8001172:	461e      	mov	r6, r3
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <main+0x168>)
 8001176:	889b      	ldrh	r3, [r3, #4]
 8001178:	b29b      	uxth	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <main+0x168>)
 800117e:	88db      	ldrh	r3, [r3, #6]
 8001180:	b29b      	uxth	r3, r3
 8001182:	4619      	mov	r1, r3
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <main+0x168>)
 8001186:	891b      	ldrh	r3, [r3, #8]
 8001188:	b29b      	uxth	r3, r3
 800118a:	461c      	mov	r4, r3
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <main+0x168>)
 800118e:	895b      	ldrh	r3, [r3, #10]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4638      	mov	r0, r7
 8001194:	9303      	str	r3, [sp, #12]
 8001196:	9402      	str	r4, [sp, #8]
 8001198:	9101      	str	r1, [sp, #4]
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	4633      	mov	r3, r6
 800119e:	462a      	mov	r2, r5
 80011a0:	4911      	ldr	r1, [pc, #68]	; (80011e8 <main+0x16c>)
 80011a2:	f009 fab3 	bl	800a70c <siprintf>
	  CDC_Transmit_FS(buf, strlen((char *)buf));
 80011a6:	463b      	mov	r3, r7
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f811 	bl	80001d0 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	463b      	mov	r3, r7
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f008 f910 	bl	80093dc <CDC_Transmit_FS>
	  HAL_Delay(100);
 80011bc:	2064      	movs	r0, #100	; 0x64
 80011be:	f001 f805 	bl	80021cc <HAL_Delay>
	  sprintf((char *)buf, "%i\t%i\t%i\t%i\t%i\t%i\n", IC_Elapsed[0], IC_Elapsed[1], IC_Elapsed[2], IC_Elapsed[3], IC_Elapsed[4], IC_Elapsed[5]);
 80011c2:	e7cf      	b.n	8001164 <main+0xe8>
 80011c4:	200003f4 	.word	0x200003f4
 80011c8:	2000050c 	.word	0x2000050c
 80011cc:	20000488 	.word	0x20000488
 80011d0:	20000448 	.word	0x20000448
 80011d4:	200003b0 	.word	0x200003b0
 80011d8:	200004c8 	.word	0x200004c8
 80011dc:	40020800 	.word	0x40020800
 80011e0:	20000508 	.word	0x20000508
 80011e4:	20000394 	.word	0x20000394
 80011e8:	0800bd68 	.word	0x0800bd68

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f008 fd6a 	bl	8009cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <SystemClock_Config+0xcc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <SystemClock_Config+0xcc>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <SystemClock_Config+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <SystemClock_Config+0xd0>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001248:	2301      	movs	r3, #1
 800124a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800125c:	2310      	movs	r3, #16
 800125e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 8001260:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001266:	2302      	movs	r3, #2
 8001268:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800126a:	2306      	movs	r3, #6
 800126c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fbec 	bl	8004a50 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800127e:	f000 fc9b 	bl	8001bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800128e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001292:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001298:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2104      	movs	r1, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fe45 	bl	8004f30 <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012ac:	f000 fc84 	bl	8001bb8 <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3750      	adds	r7, #80	; 0x50
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f001 fa71 	bl	80027e4 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 fc56 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200003f4 	.word	0x200003f4
 8001314:	40005400 	.word	0x40005400
 8001318:	00061a80 	.word	0x00061a80

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <MX_TIM2_Init+0xf0>)
 8001340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001344:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1 - 1;
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <MX_TIM2_Init+0xf0>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <MX_TIM2_Init+0xf0>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000 - 1;
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <MX_TIM2_Init+0xf0>)
 8001354:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <MX_TIM2_Init+0xf0>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b2a      	ldr	r3, [pc, #168]	; (800140c <MX_TIM2_Init+0xf0>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001366:	4829      	ldr	r0, [pc, #164]	; (800140c <MX_TIM2_Init+0xf0>)
 8001368:	f004 f831 	bl	80053ce <HAL_TIM_PWM_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001372:	f000 fc21 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	4619      	mov	r1, r3
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_TIM2_Init+0xf0>)
 8001386:	f004 ff95 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001390:	f000 fc12 	bl	8001bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001394:	2360      	movs	r3, #96	; 0x60
 8001396:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM2_Init+0xf0>)
 80013ac:	f004 fab0 	bl	8005910 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013b6:	f000 fbff 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2204      	movs	r2, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4812      	ldr	r0, [pc, #72]	; (800140c <MX_TIM2_Init+0xf0>)
 80013c2:	f004 faa5 	bl	8005910 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013cc:	f000 fbf4 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2208      	movs	r2, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_TIM2_Init+0xf0>)
 80013d8:	f004 fa9a 	bl	8005910 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80013e2:	f000 fbe9 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	220c      	movs	r2, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM2_Init+0xf0>)
 80013ee:	f004 fa8f 	bl	8005910 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80013f8:	f000 fbde 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM2_Init+0xf0>)
 80013fe:	f000 fd6b 	bl	8001ed8 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200004c8 	.word	0x200004c8

08001410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_TIM3_Init+0xe0>)
 800142e:	4a31      	ldr	r2, [pc, #196]	; (80014f4 <MX_TIM3_Init+0xe4>)
 8001430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001434:	2247      	movs	r2, #71	; 0x47
 8001436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_TIM3_Init+0xe0>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536 - 1;
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_TIM3_Init+0xe0>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001452:	4827      	ldr	r0, [pc, #156]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001454:	f004 f824 	bl	80054a0 <HAL_TIM_IC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800145e:	f000 fbab 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	481f      	ldr	r0, [pc, #124]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001472:	f004 ff1f 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800147c:	f000 fb9c 	bl	8001bb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001484:	2301      	movs	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	4816      	ldr	r0, [pc, #88]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001498:	f004 f99e 	bl	80057d8 <HAL_TIM_IC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014a2:	f000 fb89 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2204      	movs	r2, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4810      	ldr	r0, [pc, #64]	; (80014f0 <MX_TIM3_Init+0xe0>)
 80014ae:	f004 f993 	bl	80057d8 <HAL_TIM_IC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80014b8:	f000 fb7e 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2208      	movs	r2, #8
 80014c0:	4619      	mov	r1, r3
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <MX_TIM3_Init+0xe0>)
 80014c4:	f004 f988 	bl	80057d8 <HAL_TIM_IC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80014ce:	f000 fb73 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	220c      	movs	r2, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_TIM3_Init+0xe0>)
 80014da:	f004 f97d 	bl	80057d8 <HAL_TIM_IC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014e4:	f000 fb68 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000448 	.word	0x20000448
 80014f4:	40000400 	.word	0x40000400

080014f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <MX_TIM4_Init+0xb4>)
 8001516:	4a26      	ldr	r2, [pc, #152]	; (80015b0 <MX_TIM4_Init+0xb8>)
 8001518:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72 - 1;
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <MX_TIM4_Init+0xb4>)
 800151c:	2247      	movs	r2, #71	; 0x47
 800151e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_TIM4_Init+0xb4>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536 - 1;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_TIM4_Init+0xb4>)
 8001528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_TIM4_Init+0xb4>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM4_Init+0xb4>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800153a:	481c      	ldr	r0, [pc, #112]	; (80015ac <MX_TIM4_Init+0xb4>)
 800153c:	f003 ffb0 	bl	80054a0 <HAL_TIM_IC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001546:	f000 fb37 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	4814      	ldr	r0, [pc, #80]	; (80015ac <MX_TIM4_Init+0xb4>)
 800155a:	f004 feab 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001564:	f000 fb28 	bl	8001bb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	480b      	ldr	r0, [pc, #44]	; (80015ac <MX_TIM4_Init+0xb4>)
 8001580:	f004 f92a 	bl	80057d8 <HAL_TIM_IC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800158a:	f000 fb15 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	2204      	movs	r2, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_TIM4_Init+0xb4>)
 8001596:	f004 f91f 	bl	80057d8 <HAL_TIM_IC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80015a0:	f000 fb0a 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200003b0 	.word	0x200003b0
 80015b0:	40000800 	.word	0x40000800

080015b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ba:	463b      	mov	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_TIM6_Init+0x64>)
 80015c4:	4a15      	ldr	r2, [pc, #84]	; (800161c <MX_TIM6_Init+0x68>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_TIM6_Init+0x64>)
 80015ca:	2247      	movs	r2, #71	; 0x47
 80015cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_TIM6_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_TIM6_Init+0x64>)
 80015d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_TIM6_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015e2:	480d      	ldr	r0, [pc, #52]	; (8001618 <MX_TIM6_Init+0x64>)
 80015e4:	f003 fe80 	bl	80052e8 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015ee:	f000 fae3 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_TIM6_Init+0x64>)
 8001600:	f004 fe58 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800160a:	f000 fad5 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000488 	.word	0x20000488
 800161c:	40001000 	.word	0x40001000

08001620 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM7_Init+0x64>)
 8001630:	4a15      	ldr	r2, [pc, #84]	; (8001688 <MX_TIM7_Init+0x68>)
 8001632:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72 - 1;
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_TIM7_Init+0x64>)
 8001636:	2247      	movs	r2, #71	; 0x47
 8001638:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_TIM7_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_TIM7_Init+0x64>)
 8001642:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001646:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_TIM7_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_TIM7_Init+0x64>)
 8001650:	f003 fe4a 	bl	80052e8 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800165a:	f000 faad 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_TIM7_Init+0x64>)
 800166c:	f004 fe22 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001676:	f000 fa9f 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000050c 	.word	0x2000050c
 8001688:	40001400 	.word	0x40001400

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <MX_GPIO_Init+0xe0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a30      	ldr	r2, [pc, #192]	; (800176c <MX_GPIO_Init+0xe0>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <MX_GPIO_Init+0xe0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <MX_GPIO_Init+0xe0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a29      	ldr	r2, [pc, #164]	; (800176c <MX_GPIO_Init+0xe0>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_GPIO_Init+0xe0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_GPIO_Init+0xe0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <MX_GPIO_Init+0xe0>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_GPIO_Init+0xe0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_GPIO_Init+0xe0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <MX_GPIO_Init+0xe0>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_GPIO_Init+0xe0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	21c0      	movs	r1, #192	; 0xc0
 8001716:	4816      	ldr	r0, [pc, #88]	; (8001770 <MX_GPIO_Init+0xe4>)
 8001718:	f001 f826 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 800171c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_GPIO_Init+0xe8>)
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	480f      	ldr	r0, [pc, #60]	; (8001770 <MX_GPIO_Init+0xe4>)
 8001732:	f000 fe7f 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001736:	23c0      	movs	r3, #192	; 0xc0
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <MX_GPIO_Init+0xe4>)
 800174e:	f000 fe71 	bl	8002434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2028      	movs	r0, #40	; 0x28
 8001758:	f000 fe35 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800175c:	2028      	movs	r0, #40	; 0x28
 800175e:	f000 fe4e 	bl	80023fe <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40020800 	.word	0x40020800
 8001774:	10110000 	.word	0x10110000

08001778 <HAL_TIM_IC_CaptureCallback>:
 * Measures pulse widths on the following channels:
 * TIM3: CH1, CH2, CH3, CH4
 * TIM4: CH1, CH2
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	uint8_t idx     = 0; // CHANNEL INDEX
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
	uint8_t channel = 0; // TIMER CHANNEL
 8001784:	2300      	movs	r3, #0
 8001786:	73bb      	strb	r3, [r7, #14]

	// TIMER 3: 4 CHANNELS
	if (htim == &htim3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a7e      	ldr	r2, [pc, #504]	; (8001984 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	f040 810d 	bne.w	80019ac <HAL_TIM_IC_CaptureCallback+0x234>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7f1b      	ldrb	r3, [r3, #28]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d103      	bne.n	80017a2 <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			idx     = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_1;
 800179e:	2300      	movs	r3, #0
 80017a0:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7f1b      	ldrb	r3, [r3, #28]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d103      	bne.n	80017b2 <HAL_TIM_IC_CaptureCallback+0x3a>
		{
			idx     = 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_2;
 80017ae:	2304      	movs	r3, #4
 80017b0:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7f1b      	ldrb	r3, [r3, #28]
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d103      	bne.n	80017c2 <HAL_TIM_IC_CaptureCallback+0x4a>
		{
			idx     = 2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_3;
 80017be:	2308      	movs	r3, #8
 80017c0:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7f1b      	ldrb	r3, [r3, #28]
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d103      	bne.n	80017d2 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			idx     = 3;
 80017ca:	2303      	movs	r3, #3
 80017cc:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_4;
 80017ce:	230c      	movs	r3, #12
 80017d0:	73bb      	strb	r3, [r7, #14]
		}

		//  PULSE WIDTH CAPTURE
		if (IC_Started[idx] == 0) {
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4a6c      	ldr	r2, [pc, #432]	; (8001988 <HAL_TIM_IC_CaptureCallback+0x210>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d167      	bne.n	80018ae <HAL_TIM_IC_CaptureCallback+0x136>
			IC_ts1[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET FIRST TIMESTAMP
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f004 f95a 	bl	8005a9c <HAL_TIM_ReadCapturedValue>
 80017e8:	4602      	mov	r2, r0
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	b291      	uxth	r1, r2
 80017ee:	4a67      	ldr	r2, [pc, #412]	; (800198c <HAL_TIM_IC_CaptureCallback+0x214>)
 80017f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d108      	bne.n	800180c <HAL_TIM_IC_CaptureCallback+0x94>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 020a 	bic.w	r2, r2, #10
 8001808:	621a      	str	r2, [r3, #32]
 800180a:	e01f      	b.n	800184c <HAL_TIM_IC_CaptureCallback+0xd4>
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b04      	cmp	r3, #4
 8001810:	d108      	bne.n	8001824 <HAL_TIM_IC_CaptureCallback+0xac>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001820:	621a      	str	r2, [r3, #32]
 8001822:	e013      	b.n	800184c <HAL_TIM_IC_CaptureCallback+0xd4>
 8001824:	7bbb      	ldrb	r3, [r7, #14]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d108      	bne.n	800183c <HAL_TIM_IC_CaptureCallback+0xc4>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6a1a      	ldr	r2, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001838:	621a      	str	r2, [r3, #32]
 800183a:	e007      	b.n	800184c <HAL_TIM_IC_CaptureCallback+0xd4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a1a      	ldr	r2, [r3, #32]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800184a:	621a      	str	r2, [r3, #32]
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d108      	bne.n	8001864 <HAL_TIM_IC_CaptureCallback+0xec>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0202 	orr.w	r2, r2, #2
 8001860:	621a      	str	r2, [r3, #32]
 8001862:	e01f      	b.n	80018a4 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	2b04      	cmp	r3, #4
 8001868:	d108      	bne.n	800187c <HAL_TIM_IC_CaptureCallback+0x104>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0220 	orr.w	r2, r2, #32
 8001878:	621a      	str	r2, [r3, #32]
 800187a:	e013      	b.n	80018a4 <HAL_TIM_IC_CaptureCallback+0x12c>
 800187c:	7bbb      	ldrb	r3, [r7, #14]
 800187e:	2b08      	cmp	r3, #8
 8001880:	d108      	bne.n	8001894 <HAL_TIM_IC_CaptureCallback+0x11c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001890:	621a      	str	r2, [r3, #32]
 8001892:	e007      	b.n	80018a4 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6a1a      	ldr	r2, [r3, #32]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018a2:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x1;															// UPDATE STATUS
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	54d1      	strb	r1, [r2, r3]
 80018ac:	e07e      	b.n	80019ac <HAL_TIM_IC_CaptureCallback+0x234>
		} else if (IC_Started[idx] == 1) {
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	4a35      	ldr	r2, [pc, #212]	; (8001988 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d178      	bne.n	80019ac <HAL_TIM_IC_CaptureCallback+0x234>
			IC_ts2[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET SECOND TIMESTAMP
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f004 f8ec 	bl	8005a9c <HAL_TIM_ReadCapturedValue>
 80018c4:	4602      	mov	r2, r0
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	b291      	uxth	r1, r2
 80018ca:	4a31      	ldr	r2, [pc, #196]	; (8001990 <HAL_TIM_IC_CaptureCallback+0x218>)
 80018cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			IC_Elapsed[idx] = IC_ts2[idx] - IC_ts1[idx];									// CALCULATE PULSE WIDTH
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <HAL_TIM_IC_CaptureCallback+0x218>)
 80018d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d8:	b299      	uxth	r1, r3
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	4a2b      	ldr	r2, [pc, #172]	; (800198c <HAL_TIM_IC_CaptureCallback+0x214>)
 80018de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	1a8a      	subs	r2, r1, r2
 80018e8:	b291      	uxth	r1, r2
 80018ea:	4a2a      	ldr	r2, [pc, #168]	; (8001994 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80018ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d108      	bne.n	8001908 <HAL_TIM_IC_CaptureCallback+0x190>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 020a 	bic.w	r2, r2, #10
 8001904:	621a      	str	r2, [r3, #32]
 8001906:	e01f      	b.n	8001948 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	2b04      	cmp	r3, #4
 800190c:	d108      	bne.n	8001920 <HAL_TIM_IC_CaptureCallback+0x1a8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800191c:	621a      	str	r2, [r3, #32]
 800191e:	e013      	b.n	8001948 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	2b08      	cmp	r3, #8
 8001924:	d108      	bne.n	8001938 <HAL_TIM_IC_CaptureCallback+0x1c0>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001934:	621a      	str	r2, [r3, #32]
 8001936:	e007      	b.n	8001948 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a1a      	ldr	r2, [r3, #32]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001946:	621a      	str	r2, [r3, #32]
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_TIM_IC_CaptureCallback+0x1e4>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a12      	ldr	r2, [r2, #32]
 8001958:	621a      	str	r2, [r3, #32]
 800195a:	e023      	b.n	80019a4 <HAL_TIM_IC_CaptureCallback+0x22c>
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d106      	bne.n	8001970 <HAL_TIM_IC_CaptureCallback+0x1f8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a12      	ldr	r2, [r2, #32]
 800196c:	621a      	str	r2, [r3, #32]
 800196e:	e019      	b.n	80019a4 <HAL_TIM_IC_CaptureCallback+0x22c>
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	2b08      	cmp	r3, #8
 8001974:	d110      	bne.n	8001998 <HAL_TIM_IC_CaptureCallback+0x220>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a12      	ldr	r2, [r2, #32]
 8001980:	621a      	str	r2, [r3, #32]
 8001982:	e00f      	b.n	80019a4 <HAL_TIM_IC_CaptureCallback+0x22c>
 8001984:	20000448 	.word	0x20000448
 8001988:	20000374 	.word	0x20000374
 800198c:	2000037c 	.word	0x2000037c
 8001990:	20000388 	.word	0x20000388
 8001994:	20000394 	.word	0x20000394
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a12      	ldr	r2, [r2, #32]
 80019a2:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x0;															// UPDATE STATUS
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	4a7f      	ldr	r2, [pc, #508]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x42c>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	54d1      	strb	r1, [r2, r3]
		}
	}
	// TIMER 4: 2 CHANNELS
	if (htim == &htim4)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a7e      	ldr	r2, [pc, #504]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x430>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	f040 80f3 	bne.w	8001b9c <HAL_TIM_IC_CaptureCallback+0x424>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7f1b      	ldrb	r3, [r3, #28]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d103      	bne.n	80019c6 <HAL_TIM_IC_CaptureCallback+0x24e>
		{
			idx     = 4;
 80019be:	2304      	movs	r3, #4
 80019c0:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7f1b      	ldrb	r3, [r3, #28]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d103      	bne.n	80019d6 <HAL_TIM_IC_CaptureCallback+0x25e>
		{
			idx     = 5;
 80019ce:	2305      	movs	r3, #5
 80019d0:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_2;
 80019d2:	2304      	movs	r3, #4
 80019d4:	73bb      	strb	r3, [r7, #14]
		}

		//  PULSE WIDTH CAPTURE
		if (IC_Started[idx] == 0) {
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	4a72      	ldr	r2, [pc, #456]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x42c>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d167      	bne.n	8001ab2 <HAL_TIM_IC_CaptureCallback+0x33a>
			IC_ts1[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET FIRST TIMESTAMP
 80019e2:	7bbb      	ldrb	r3, [r7, #14]
 80019e4:	4619      	mov	r1, r3
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f004 f858 	bl	8005a9c <HAL_TIM_ReadCapturedValue>
 80019ec:	4602      	mov	r2, r0
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	b291      	uxth	r1, r2
 80019f2:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x434>)
 80019f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <HAL_TIM_IC_CaptureCallback+0x298>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 020a 	bic.w	r2, r2, #10
 8001a0c:	621a      	str	r2, [r3, #32]
 8001a0e:	e01f      	b.n	8001a50 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001a10:	7bbb      	ldrb	r3, [r7, #14]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d108      	bne.n	8001a28 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a1a      	ldr	r2, [r3, #32]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a24:	621a      	str	r2, [r3, #32]
 8001a26:	e013      	b.n	8001a50 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d108      	bne.n	8001a40 <HAL_TIM_IC_CaptureCallback+0x2c8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001a3c:	621a      	str	r2, [r3, #32]
 8001a3e:	e007      	b.n	8001a50 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001a4e:	621a      	str	r2, [r3, #32]
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <HAL_TIM_IC_CaptureCallback+0x2f0>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6a1a      	ldr	r2, [r3, #32]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0202 	orr.w	r2, r2, #2
 8001a64:	621a      	str	r2, [r3, #32]
 8001a66:	e01f      	b.n	8001aa8 <HAL_TIM_IC_CaptureCallback+0x330>
 8001a68:	7bbb      	ldrb	r3, [r7, #14]
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d108      	bne.n	8001a80 <HAL_TIM_IC_CaptureCallback+0x308>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0220 	orr.w	r2, r2, #32
 8001a7c:	621a      	str	r2, [r3, #32]
 8001a7e:	e013      	b.n	8001aa8 <HAL_TIM_IC_CaptureCallback+0x330>
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d108      	bne.n	8001a98 <HAL_TIM_IC_CaptureCallback+0x320>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a94:	621a      	str	r2, [r3, #32]
 8001a96:	e007      	b.n	8001aa8 <HAL_TIM_IC_CaptureCallback+0x330>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aa6:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x1;															// UPDATE STATUS
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	54d1      	strb	r1, [r2, r3]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
			IC_Started[idx] = 0x0;															// UPDATE STATUS
		}
	}

}
 8001ab0:	e074      	b.n	8001b9c <HAL_TIM_IC_CaptureCallback+0x424>
		} else if (IC_Started[idx] == 1) {
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	4a3b      	ldr	r2, [pc, #236]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d16e      	bne.n	8001b9c <HAL_TIM_IC_CaptureCallback+0x424>
			IC_ts2[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET SECOND TIMESTAMP
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f003 ffea 	bl	8005a9c <HAL_TIM_ReadCapturedValue>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	b291      	uxth	r1, r2
 8001ace:	4a38      	ldr	r2, [pc, #224]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x438>)
 8001ad0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			IC_Elapsed[idx] = IC_ts2[idx] - IC_ts1[idx];									// CALCULATE PULSE WIDTH
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	4a36      	ldr	r2, [pc, #216]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x438>)
 8001ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001adc:	b299      	uxth	r1, r3
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	4a32      	ldr	r2, [pc, #200]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x434>)
 8001ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	1a8a      	subs	r2, r1, r2
 8001aec:	b291      	uxth	r1, r2
 8001aee:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001af0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d108      	bne.n	8001b0c <HAL_TIM_IC_CaptureCallback+0x394>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 020a 	bic.w	r2, r2, #10
 8001b08:	621a      	str	r2, [r3, #32]
 8001b0a:	e01f      	b.n	8001b4c <HAL_TIM_IC_CaptureCallback+0x3d4>
 8001b0c:	7bbb      	ldrb	r3, [r7, #14]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d108      	bne.n	8001b24 <HAL_TIM_IC_CaptureCallback+0x3ac>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a1a      	ldr	r2, [r3, #32]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b20:	621a      	str	r2, [r3, #32]
 8001b22:	e013      	b.n	8001b4c <HAL_TIM_IC_CaptureCallback+0x3d4>
 8001b24:	7bbb      	ldrb	r3, [r7, #14]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d108      	bne.n	8001b3c <HAL_TIM_IC_CaptureCallback+0x3c4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a1a      	ldr	r2, [r3, #32]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001b38:	621a      	str	r2, [r3, #32]
 8001b3a:	e007      	b.n	8001b4c <HAL_TIM_IC_CaptureCallback+0x3d4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6a1a      	ldr	r2, [r3, #32]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001b4a:	621a      	str	r2, [r3, #32]
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_IC_CaptureCallback+0x3e8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6a12      	ldr	r2, [r2, #32]
 8001b5c:	621a      	str	r2, [r3, #32]
 8001b5e:	e019      	b.n	8001b94 <HAL_TIM_IC_CaptureCallback+0x41c>
 8001b60:	7bbb      	ldrb	r3, [r7, #14]
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d106      	bne.n	8001b74 <HAL_TIM_IC_CaptureCallback+0x3fc>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a12      	ldr	r2, [r2, #32]
 8001b70:	621a      	str	r2, [r3, #32]
 8001b72:	e00f      	b.n	8001b94 <HAL_TIM_IC_CaptureCallback+0x41c>
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d106      	bne.n	8001b88 <HAL_TIM_IC_CaptureCallback+0x410>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6a12      	ldr	r2, [r2, #32]
 8001b84:	621a      	str	r2, [r3, #32]
 8001b86:	e005      	b.n	8001b94 <HAL_TIM_IC_CaptureCallback+0x41c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a12      	ldr	r2, [r2, #32]
 8001b92:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x0;															// UPDATE STATUS
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	54d1      	strb	r1, [r2, r3]
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000374 	.word	0x20000374
 8001ba8:	200003b0 	.word	0x200003b0
 8001bac:	2000037c 	.word	0x2000037c
 8001bb0:	20000388 	.word	0x20000388
 8001bb4:	20000394 	.word	0x20000394

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i

  __disable_irq();

  // {TODO} SET ALL MOTOR OUTPUTS TO ZERO!

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2140      	movs	r1, #64	; 0x40
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <Error_Handler+0x24>)
 8001bc4:	f000 fdd0 	bl	8002768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <Error_Handler+0x24>)
 8001bce:	f000 fdcb 	bl	8002768 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8001bd2:	2106      	movs	r1, #6
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <Error_Handler+0x28>)
 8001bd6:	f007 fc01 	bl	80093dc <CDC_Transmit_FS>

  while (1)
 8001bda:	e7fe      	b.n	8001bda <Error_Handler+0x22>
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	0800bd7c 	.word	0x0800bd7c

08001be4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_I2C_MspInit+0x84>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d12c      	bne.n	8001cb0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_I2C_MspInit+0x88>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_I2C_MspInit+0x88>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_I2C_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c78:	2312      	movs	r3, #18
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c84:	2304      	movs	r3, #4
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <HAL_I2C_MspInit+0x8c>)
 8001c90:	f000 fbd0 	bl	8002434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_I2C_MspInit+0x88>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_I2C_MspInit+0x88>)
 8001c9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_I2C_MspInit+0x88>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a49      	ldr	r2, [pc, #292]	; (8001e48 <HAL_TIM_IC_MspInit+0x144>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d152      	bne.n	8001dcc <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a47      	ldr	r2, [pc, #284]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b45      	ldr	r3, [pc, #276]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a40      	ldr	r2, [pc, #256]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a39      	ldr	r2, [pc, #228]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d7a:	23c0      	movs	r3, #192	; 0xc0
 8001d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	4619      	mov	r1, r3
 8001d94:	482e      	ldr	r0, [pc, #184]	; (8001e50 <HAL_TIM_IC_MspInit+0x14c>)
 8001d96:	f000 fb4d 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001daa:	2302      	movs	r3, #2
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	4827      	ldr	r0, [pc, #156]	; (8001e54 <HAL_TIM_IC_MspInit+0x150>)
 8001db6:	f000 fb3d 	bl	8002434 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	201d      	movs	r0, #29
 8001dc0:	f000 fb01 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dc4:	201d      	movs	r0, #29
 8001dc6:	f000 fb1a 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dca:	e038      	b.n	8001e3e <HAL_TIM_IC_MspInit+0x13a>
  else if(htim_ic->Instance==TIM4)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <HAL_TIM_IC_MspInit+0x154>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d133      	bne.n	8001e3e <HAL_TIM_IC_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_TIM_IC_MspInit+0x148>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	480a      	ldr	r0, [pc, #40]	; (8001e54 <HAL_TIM_IC_MspInit+0x150>)
 8001e2a:	f000 fb03 	bl	8002434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	201e      	movs	r0, #30
 8001e34:	f000 fac7 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e38:	201e      	movs	r0, #30
 8001e3a:	f000 fae0 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	; 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40000800 	.word	0x40000800

08001e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_TIM_Base_MspInit+0x70>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001e78:	f043 0310 	orr.w	r3, r3, #16
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e8a:	e01a      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_TIM_Base_MspInit+0x78>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d115      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001ea0:	f043 0320 	orr.w	r3, r3, #32
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	2037      	movs	r0, #55	; 0x37
 8001eb8:	f000 fa85 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ebc:	2037      	movs	r0, #55	; 0x37
 8001ebe:	f000 fa9e 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40001000 	.word	0x40001000
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40001400 	.word	0x40001400

08001ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d11d      	bne.n	8001f36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_TIM_MspPostInit+0x68>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <HAL_TIM_MspPostInit+0x68>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_TIM_MspPostInit+0x68>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f16:	230f      	movs	r3, #15
 8001f18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <HAL_TIM_MspPostInit+0x6c>)
 8001f32:	f000 fa7f 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f000 f8fa 	bl	800218c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM3_IRQHandler+0x10>)
 8001fa2:	f003 fb11 	bl	80055c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000448 	.word	0x20000448

08001fb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM4_IRQHandler+0x10>)
 8001fb6:	f003 fb07 	bl	80055c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200003b0 	.word	0x200003b0

08001fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001fc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fcc:	f000 fbe6 	bl	800279c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM7_IRQHandler+0x10>)
 8001fda:	f003 faf5 	bl	80055c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000050c 	.word	0x2000050c

08001fe8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <OTG_FS_IRQHandler+0x10>)
 8001fee:	f001 fcfc 	bl	80039ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20001a20 	.word	0x20001a20

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f007 fe18 	bl	8009c60 <__errno>
 8002030:	4602      	mov	r2, r0
 8002032:	230c      	movs	r3, #12
 8002034:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20020000 	.word	0x20020000
 800205c:	00000400 	.word	0x00000400
 8002060:	200003a0 	.word	0x200003a0
 8002064:	20001e30 	.word	0x20001e30

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <SystemInit+0x28>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	4a07      	ldr	r2, [pc, #28]	; (8002090 <SystemInit+0x28>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SystemInit+0x28>)
 800207e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002082:	609a      	str	r2, [r3, #8]
#endif
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002098:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800209a:	e003      	b.n	80020a4 <LoopCopyDataInit>

0800209c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800209e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020a2:	3104      	adds	r1, #4

080020a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020ac:	d3f6      	bcc.n	800209c <CopyDataInit>
  ldr  r2, =_sbss
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020b0:	e002      	b.n	80020b8 <LoopFillZerobss>

080020b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020b4:	f842 3b04 	str.w	r3, [r2], #4

080020b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020bc:	d3f9      	bcc.n	80020b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020be:	f7ff ffd3 	bl	8002068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f007 fdd3 	bl	8009c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c6:	f7fe ffd9 	bl	800107c <main>
  bx  lr    
 80020ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020d0:	0800c050 	.word	0x0800c050
  ldr  r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020d8:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 80020dc:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 80020e0:	20001e2c 	.word	0x20001e2c

080020e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_Init+0x40>)
 80020f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_Init+0x40>)
 80020fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_Init+0x40>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002110:	2003      	movs	r0, #3
 8002112:	f000 f94d 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002116:	2000      	movs	r0, #0
 8002118:	f000 f808 	bl	800212c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211c:	f7ff fd62 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_InitTick+0x54>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_InitTick+0x58>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002142:	fbb3 f3f1 	udiv	r3, r3, r1
 8002146:	fbb2 f3f3 	udiv	r3, r2, r3
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f965 	bl	800241a <HAL_SYSTICK_Config>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e00e      	b.n	8002178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b0f      	cmp	r3, #15
 800215e:	d80a      	bhi.n	8002176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002160:	2200      	movs	r2, #0
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f000 f92d 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800216c:	4a06      	ldr	r2, [pc, #24]	; (8002188 <HAL_InitTick+0x5c>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e000      	b.n	8002178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000000 	.word	0x20000000
 8002184:	20000008 	.word	0x20000008
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x20>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x24>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4413      	add	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_IncTick+0x24>)
 800219e:	6013      	str	r3, [r2, #0]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000008 	.word	0x20000008
 80021b0:	2000054c 	.word	0x2000054c

080021b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTick+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000054c 	.word	0x2000054c

080021cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ffee 	bl	80021b4 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d005      	beq.n	80021f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_Delay+0x40>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f2:	bf00      	nop
 80021f4:	f7ff ffde 	bl	80021b4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8f7      	bhi.n	80021f4 <HAL_Delay+0x28>
  {
  }
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000008 	.word	0x20000008

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff3e 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff31 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e16b      	b.n	8002728 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	f040 815a 	bne.w	8002722 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d00b      	beq.n	800248e <HAL_GPIO_Init+0x5a>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002482:	2b11      	cmp	r3, #17
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b12      	cmp	r3, #18
 800248c:	d130      	bne.n	80024f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0xfc>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b12      	cmp	r3, #18
 800252e:	d123      	bne.n	8002578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0203 	and.w	r2, r3, #3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80b4 	beq.w	8002722 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_GPIO_Init+0x308>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a5e      	ldr	r2, [pc, #376]	; (800273c <HAL_GPIO_Init+0x308>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_GPIO_Init+0x308>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d6:	4a5a      	ldr	r2, [pc, #360]	; (8002740 <HAL_GPIO_Init+0x30c>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a51      	ldr	r2, [pc, #324]	; (8002744 <HAL_GPIO_Init+0x310>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02b      	beq.n	800265a <HAL_GPIO_Init+0x226>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a50      	ldr	r2, [pc, #320]	; (8002748 <HAL_GPIO_Init+0x314>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d025      	beq.n	8002656 <HAL_GPIO_Init+0x222>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4f      	ldr	r2, [pc, #316]	; (800274c <HAL_GPIO_Init+0x318>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01f      	beq.n	8002652 <HAL_GPIO_Init+0x21e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4e      	ldr	r2, [pc, #312]	; (8002750 <HAL_GPIO_Init+0x31c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x21a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4d      	ldr	r2, [pc, #308]	; (8002754 <HAL_GPIO_Init+0x320>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x216>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <HAL_GPIO_Init+0x324>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x212>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4b      	ldr	r2, [pc, #300]	; (800275c <HAL_GPIO_Init+0x328>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x20e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4a      	ldr	r2, [pc, #296]	; (8002760 <HAL_GPIO_Init+0x32c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x20a>
 800263a:	2307      	movs	r3, #7
 800263c:	e00e      	b.n	800265c <HAL_GPIO_Init+0x228>
 800263e:	2308      	movs	r3, #8
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002642:	2306      	movs	r3, #6
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x228>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x228>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x228>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x228>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4934      	ldr	r1, [pc, #208]	; (8002740 <HAL_GPIO_Init+0x30c>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_GPIO_Init+0x330>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269e:	4a31      	ldr	r2, [pc, #196]	; (8002764 <HAL_GPIO_Init+0x330>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_GPIO_Init+0x330>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c8:	4a26      	ldr	r2, [pc, #152]	; (8002764 <HAL_GPIO_Init+0x330>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_GPIO_Init+0x330>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_GPIO_Init+0x330>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <HAL_GPIO_Init+0x330>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <HAL_GPIO_Init+0x330>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae90 	bls.w	8002450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	3724      	adds	r7, #36	; 0x24
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40023800 	.word	0x40023800
 8002740:	40013800 	.word	0x40013800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	40020800 	.word	0x40020800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40021000 	.word	0x40021000
 8002758:	40021400 	.word	0x40021400
 800275c:	40021800 	.word	0x40021800
 8002760:	40021c00 	.word	0x40021c00
 8002764:	40013c00 	.word	0x40013c00

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002784:	e003      	b.n	800278e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	041a      	lsls	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f806 	bl	80027cc <HAL_GPIO_EXTI_Callback>
  }
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e11f      	b.n	8002a36 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fa12 	bl	8001c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2224      	movs	r2, #36	; 0x24
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002848:	f002 fd3a 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 800284c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a7b      	ldr	r2, [pc, #492]	; (8002a40 <HAL_I2C_Init+0x25c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d807      	bhi.n	8002868 <HAL_I2C_Init+0x84>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a7a      	ldr	r2, [pc, #488]	; (8002a44 <HAL_I2C_Init+0x260>)
 800285c:	4293      	cmp	r3, r2
 800285e:	bf94      	ite	ls
 8002860:	2301      	movls	r3, #1
 8002862:	2300      	movhi	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e006      	b.n	8002876 <HAL_I2C_Init+0x92>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a77      	ldr	r2, [pc, #476]	; (8002a48 <HAL_I2C_Init+0x264>)
 800286c:	4293      	cmp	r3, r2
 800286e:	bf94      	ite	ls
 8002870:	2301      	movls	r3, #1
 8002872:	2300      	movhi	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0db      	b.n	8002a36 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4a72      	ldr	r2, [pc, #456]	; (8002a4c <HAL_I2C_Init+0x268>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0c9b      	lsrs	r3, r3, #18
 8002888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a64      	ldr	r2, [pc, #400]	; (8002a40 <HAL_I2C_Init+0x25c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d802      	bhi.n	80028b8 <HAL_I2C_Init+0xd4>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3301      	adds	r3, #1
 80028b6:	e009      	b.n	80028cc <HAL_I2C_Init+0xe8>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	4a63      	ldr	r2, [pc, #396]	; (8002a50 <HAL_I2C_Init+0x26c>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	3301      	adds	r3, #1
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4956      	ldr	r1, [pc, #344]	; (8002a40 <HAL_I2C_Init+0x25c>)
 80028e8:	428b      	cmp	r3, r1
 80028ea:	d80d      	bhi.n	8002908 <HAL_I2C_Init+0x124>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e59      	subs	r1, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	bf38      	it	cc
 8002904:	2304      	movcc	r3, #4
 8002906:	e04f      	b.n	80029a8 <HAL_I2C_Init+0x1c4>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d111      	bne.n	8002934 <HAL_I2C_Init+0x150>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	440b      	add	r3, r1
 800291e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002922:	3301      	adds	r3, #1
 8002924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e012      	b.n	800295a <HAL_I2C_Init+0x176>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e58      	subs	r0, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	0099      	lsls	r1, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	fbb0 f3f3 	udiv	r3, r0, r3
 800294a:	3301      	adds	r3, #1
 800294c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Init+0x17e>
 800295e:	2301      	movs	r3, #1
 8002960:	e022      	b.n	80029a8 <HAL_I2C_Init+0x1c4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10e      	bne.n	8002988 <HAL_I2C_Init+0x1a4>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1e58      	subs	r0, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	440b      	add	r3, r1
 8002978:	fbb0 f3f3 	udiv	r3, r0, r3
 800297c:	3301      	adds	r3, #1
 800297e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002986:	e00f      	b.n	80029a8 <HAL_I2C_Init+0x1c4>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	0099      	lsls	r1, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	fbb0 f3f3 	udiv	r3, r0, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	6809      	ldr	r1, [r1, #0]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6911      	ldr	r1, [r2, #16]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68d2      	ldr	r2, [r2, #12]
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	000186a0 	.word	0x000186a0
 8002a44:	001e847f 	.word	0x001e847f
 8002a48:	003d08ff 	.word	0x003d08ff
 8002a4c:	431bde83 	.word	0x431bde83
 8002a50:	10624dd3 	.word	0x10624dd3

08002a54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	461a      	mov	r2, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	817b      	strh	r3, [r7, #10]
 8002a66:	460b      	mov	r3, r1
 8002a68:	813b      	strh	r3, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a6e:	f7ff fba1 	bl	80021b4 <HAL_GetTick>
 8002a72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	f040 80d9 	bne.w	8002c34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2319      	movs	r3, #25
 8002a88:	2201      	movs	r2, #1
 8002a8a:	496d      	ldr	r1, [pc, #436]	; (8002c40 <HAL_I2C_Mem_Write+0x1ec>)
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fc7f 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e0cc      	b.n	8002c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_I2C_Mem_Write+0x56>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e0c5      	b.n	8002c36 <HAL_I2C_Mem_Write+0x1e2>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d007      	beq.n	8002ad0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2221      	movs	r2, #33	; 0x21
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2240      	movs	r2, #64	; 0x40
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a3a      	ldr	r2, [r7, #32]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a4d      	ldr	r2, [pc, #308]	; (8002c44 <HAL_I2C_Mem_Write+0x1f0>)
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b12:	88f8      	ldrh	r0, [r7, #6]
 8002b14:	893a      	ldrh	r2, [r7, #8]
 8002b16:	8979      	ldrh	r1, [r7, #10]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	4603      	mov	r3, r0
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fab6 	bl	8003094 <I2C_RequestMemoryWrite>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d052      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e081      	b.n	8002c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fd00 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00d      	beq.n	8002b5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d107      	bne.n	8002b5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e06b      	b.n	8002c36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	781a      	ldrb	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_I2C_Mem_Write+0x180>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d017      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1aa      	bne.n	8002b32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fcec 	bl	80035be <I2C_WaitOnBTFFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d107      	bne.n	8002c04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e016      	b.n	8002c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	00100002 	.word	0x00100002
 8002c44:	ffff0000 	.word	0xffff0000

08002c48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	; 0x30
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	813b      	strh	r3, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c62:	f7ff faa7 	bl	80021b4 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	f040 8208 	bne.w	8003086 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2319      	movs	r3, #25
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	497b      	ldr	r1, [pc, #492]	; (8002e6c <HAL_I2C_Mem_Read+0x224>)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fb85 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e1fb      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2C_Mem_Read+0x56>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e1f4      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d007      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2222      	movs	r2, #34	; 0x22
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a5b      	ldr	r2, [pc, #364]	; (8002e70 <HAL_I2C_Mem_Read+0x228>)
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d06:	88f8      	ldrh	r0, [r7, #6]
 8002d08:	893a      	ldrh	r2, [r7, #8]
 8002d0a:	8979      	ldrh	r1, [r7, #10]
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4603      	mov	r3, r0
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fa52 	bl	80031c0 <I2C_RequestMemoryRead>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e1b0      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d113      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e184      	b.n	8003060 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d11b      	bne.n	8002d96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e164      	b.n	8003060 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d11b      	bne.n	8002dd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	e144      	b.n	8003060 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dec:	e138      	b.n	8003060 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	f200 80f1 	bhi.w	8002fda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d123      	bne.n	8002e48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fc1b 	bl	8003640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e139      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e46:	e10b      	b.n	8003060 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d14e      	bne.n	8002eee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	2200      	movs	r2, #0
 8002e58:	4906      	ldr	r1, [pc, #24]	; (8002e74 <HAL_I2C_Mem_Read+0x22c>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fa98 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e10e      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
 8002e6a:	bf00      	nop
 8002e6c:	00100002 	.word	0x00100002
 8002e70:	ffff0000 	.word	0xffff0000
 8002e74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eec:	e0b8      	b.n	8003060 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4966      	ldr	r1, [pc, #408]	; (8003090 <HAL_I2C_Mem_Read+0x448>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fa49 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0bf      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f50:	2200      	movs	r2, #0
 8002f52:	494f      	ldr	r1, [pc, #316]	; (8003090 <HAL_I2C_Mem_Read+0x448>)
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fa1b 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e091      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd8:	e042      	b.n	8003060 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fb2e 	bl	8003640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e04c      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d118      	bne.n	8003060 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	f47f aec2 	bne.w	8002dee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3728      	adds	r7, #40	; 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	00010004 	.word	0x00010004

08003094 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	460b      	mov	r3, r1
 80030a8:	813b      	strh	r3, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f960 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e4:	d103      	bne.n	80030ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e05f      	b.n	80031b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003100:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	492d      	ldr	r1, [pc, #180]	; (80031bc <I2C_RequestMemoryWrite+0x128>)
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f998 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e04c      	b.n	80031b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003130:	6a39      	ldr	r1, [r7, #32]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fa02 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2b04      	cmp	r3, #4
 8003144:	d107      	bne.n	8003156 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003154:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e02b      	b.n	80031b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003160:	893b      	ldrh	r3, [r7, #8]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	611a      	str	r2, [r3, #16]
 800316a:	e021      	b.n	80031b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800316c:	893b      	ldrh	r3, [r7, #8]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	b29b      	uxth	r3, r3
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	6a39      	ldr	r1, [r7, #32]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f9dc 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00d      	beq.n	80031a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b04      	cmp	r3, #4
 8003190:	d107      	bne.n	80031a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e005      	b.n	80031b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031a6:	893b      	ldrh	r3, [r7, #8]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	00010002 	.word	0x00010002

080031c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	817b      	strh	r3, [r7, #10]
 80031d2:	460b      	mov	r3, r1
 80031d4:	813b      	strh	r3, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	2200      	movs	r2, #0
 8003202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f8c2 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003220:	d103      	bne.n	800322a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0aa      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800323c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	4952      	ldr	r1, [pc, #328]	; (800338c <I2C_RequestMemoryRead+0x1cc>)
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f8fa 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e097      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	6a39      	ldr	r1, [r7, #32]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f964 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b04      	cmp	r3, #4
 8003280:	d107      	bne.n	8003292 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e076      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800329c:	893b      	ldrh	r3, [r7, #8]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]
 80032a6:	e021      	b.n	80032ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032a8:	893b      	ldrh	r3, [r7, #8]
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	6a39      	ldr	r1, [r7, #32]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f93e 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d107      	bne.n	80032de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e050      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	6a39      	ldr	r1, [r7, #32]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f923 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b04      	cmp	r3, #4
 8003302:	d107      	bne.n	8003314 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003312:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e035      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003326:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	2200      	movs	r2, #0
 8003330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f82b 	bl	8003390 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334e:	d103      	bne.n	8003358 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e013      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800335c:	897b      	ldrh	r3, [r7, #10]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	6a3a      	ldr	r2, [r7, #32]
 8003370:	4906      	ldr	r1, [pc, #24]	; (800338c <I2C_RequestMemoryRead+0x1cc>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f863 	bl	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	00010002 	.word	0x00010002

08003390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a0:	e025      	b.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe ff03 	bl	80021b4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e023      	b.n	8003436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10d      	bne.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	e00c      	b.n	800342e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	429a      	cmp	r2, r3
 8003432:	d0b6      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800344c:	e051      	b.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345c:	d123      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e046      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe fe81 	bl	80021b4 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e020      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10c      	bne.n	8003516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e00b      	b.n	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d18d      	bne.n	800344e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003548:	e02d      	b.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f8ce 	bl	80036ec <I2C_IsAcknowledgeFailed>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e02d      	b.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d021      	beq.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe fe27 	bl	80021b4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d116      	bne.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d1ca      	bne.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ca:	e02d      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f88d 	bl	80036ec <I2C_IsAcknowledgeFailed>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e02d      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d021      	beq.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e4:	f7fe fde6 	bl	80021b4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d1ca      	bne.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800364c:	e042      	b.n	80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b10      	cmp	r3, #16
 800365a:	d119      	bne.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0210 	mvn.w	r2, #16
 8003664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e029      	b.n	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fe fd90 	bl	80021b4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d116      	bne.n	80036d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e007      	b.n	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d1b5      	bne.n	800364e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003702:	d11b      	bne.n	800373c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800370c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800374a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374c:	b08f      	sub	sp, #60	; 0x3c
 800374e:	af0a      	add	r7, sp, #40	; 0x28
 8003750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e10f      	b.n	800397c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f005 ff76 	bl	8009668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2203      	movs	r2, #3
 8003780:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f002 ff2f 	bl	80065fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	687e      	ldr	r6, [r7, #4]
 80037a8:	466d      	mov	r5, sp
 80037aa:	f106 0410 	add.w	r4, r6, #16
 80037ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80037be:	1d33      	adds	r3, r6, #4
 80037c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	f002 fe06 	bl	80063d4 <USB_CoreInit>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0d0      	b.n	800397c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f002 ff1d 	bl	8006620 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e04a      	b.n	8003882 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	333d      	adds	r3, #61	; 0x3d
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	333c      	adds	r3, #60	; 0x3c
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	b298      	uxth	r0, r3
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3342      	adds	r3, #66	; 0x42
 8003828:	4602      	mov	r2, r0
 800382a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	333f      	adds	r3, #63	; 0x3f
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3344      	adds	r3, #68	; 0x44
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3348      	adds	r3, #72	; 0x48
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3350      	adds	r3, #80	; 0x50
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	3301      	adds	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	d3af      	bcc.n	80037ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e044      	b.n	800391c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	3301      	adds	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d3b5      	bcc.n	8003892 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	687e      	ldr	r6, [r7, #4]
 800392e:	466d      	mov	r5, sp
 8003930:	f106 0410 	add.w	r4, r6, #16
 8003934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003940:	e885 0003 	stmia.w	r5, {r0, r1}
 8003944:	1d33      	adds	r3, r6, #4
 8003946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003948:	6838      	ldr	r0, [r7, #0]
 800394a:	f002 fe93 	bl	8006674 <USB_DevInit>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e00d      	b.n	800397c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fedb 	bl	8007730 <USB_DevDisconnect>

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003984 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_PCD_Start+0x1c>
 800399c:	2302      	movs	r3, #2
 800399e:	e020      	b.n	80039e2 <HAL_PCD_Start+0x5e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d109      	bne.n	80039c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d005      	beq.n	80039c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 fe07 	bl	80065dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f003 fe8b 	bl	80076ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039ea:	b590      	push	{r4, r7, lr}
 80039ec:	b08d      	sub	sp, #52	; 0x34
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 ff49 	bl	8007898 <USB_GetMode>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f040 839d 	bne.w	8004148 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f003 fead 	bl	8007772 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8393 	beq.w	8004146 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fea4 	bl	8007772 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f002 0202 	and.w	r2, r2, #2
 8003a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 fe92 	bl	8007772 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d161      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0210 	bic.w	r2, r2, #16
 8003a66:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	0c5b      	lsrs	r3, r3, #17
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d124      	bne.n	8003ade <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d035      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6a38      	ldr	r0, [r7, #32]
 8003ab4:	f003 fcf8 	bl	80074a8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac4:	441a      	add	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad6:	441a      	add	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	619a      	str	r2, [r3, #24]
 8003adc:	e016      	b.n	8003b0c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	0c5b      	lsrs	r3, r3, #17
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d110      	bne.n	8003b0c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003af0:	2208      	movs	r2, #8
 8003af2:	4619      	mov	r1, r3
 8003af4:	6a38      	ldr	r0, [r7, #32]
 8003af6:	f003 fcd7 	bl	80074a8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b06:	441a      	add	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0210 	orr.w	r2, r2, #16
 8003b1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fe26 	bl	8007772 <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b30:	d16e      	bne.n	8003c10 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f003 fe2c 	bl	8007798 <USB_ReadDevAllOutEpInterrupt>
 8003b40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b42:	e062      	b.n	8003c0a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d057      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 fe51 	bl	8007800 <USB_ReadDevOutEPInterrupt>
 8003b5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00c      	beq.n	8003b84 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	461a      	mov	r2, r3
 8003b78:	2301      	movs	r3, #1
 8003b7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fdb0 	bl	80046e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 feaa 	bl	80048fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2320      	movs	r3, #32
 8003bde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bfc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	3301      	adds	r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d199      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f003 fdac 	bl	8007772 <USB_ReadInterrupts>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c24:	f040 80c0 	bne.w	8003da8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f003 fdcd 	bl	80077cc <USB_ReadDevAllInEpInterrupt>
 8003c32:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c38:	e0b2      	b.n	8003da0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a7 	beq.w	8003d94 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f003 fdf3 	bl	800783c <USB_ReadDevInEPInterrupt>
 8003c56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d057      	beq.n	8003d12 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2201      	movs	r2, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69f9      	ldr	r1, [r7, #28]
 8003c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c82:	4013      	ands	r3, r2
 8003c84:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	461a      	mov	r2, r3
 8003c94:	2301      	movs	r3, #1
 8003c96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d132      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3348      	adds	r3, #72	; 0x48
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4403      	add	r3, r0
 8003cc0:	3344      	adds	r3, #68	; 0x44
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4419      	add	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4403      	add	r3, r0
 8003cd4:	3348      	adds	r3, #72	; 0x48
 8003cd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d113      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x31c>
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3350      	adds	r3, #80	; 0x50
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2101      	movs	r1, #1
 8003d02:	f003 fdfb 	bl	80078fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f005 fd2c 	bl	800976a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	461a      	mov	r2, r3
 8003d46:	2310      	movs	r3, #16
 8003d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	461a      	mov	r2, r3
 8003d62:	2340      	movs	r3, #64	; 0x40
 8003d64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2302      	movs	r3, #2
 8003d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fc1b 	bl	80045ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	3301      	adds	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f47f af49 	bne.w	8003c3a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f003 fce0 	bl	8007772 <USB_ReadInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dbc:	d122      	bne.n	8003e04 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d108      	bne.n	8003dee <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003de4:	2100      	movs	r1, #0
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fe26 	bl	8004a38 <HAL_PCDEx_LPM_Callback>
 8003dec:	e002      	b.n	8003df4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f005 fd32 	bl	8009858 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f003 fcb2 	bl	8007772 <USB_ReadInterrupts>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e18:	d112      	bne.n	8003e40 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f005 fcee 	bl	800980c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e3e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 fc94 	bl	8007772 <USB_ReadInterrupts>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	f040 80c7 	bne.w	8003fe6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2110      	movs	r1, #16
 8003e72:	4618      	mov	r0, r3
 8003e74:	f002 fd62 	bl	800693c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7c:	e056      	b.n	8003f2c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea2:	0151      	lsls	r1, r2, #5
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	440a      	add	r2, r1
 8003ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ed0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ee4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	3301      	adds	r3, #1
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d3a3      	bcc.n	8003e7e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f44:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f48:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f62:	f043 030b 	orr.w	r3, r3, #11
 8003f66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f78:	f043 030b 	orr.w	r3, r3, #11
 8003f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7e:	e015      	b.n	8003fac <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f92:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f96:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa6:	f043 030b 	orr.w	r3, r3, #11
 8003faa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fbe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f003 fc93 	bl	80078fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fbc1 	bl	8007772 <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	d124      	bne.n	8004046 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f003 fc57 	bl	80078b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f002 fcf7 	bl	80069fe <USB_GetDevSpeed>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681c      	ldr	r4, [r3, #0]
 800401c:	f001 f944 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 8004020:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	4620      	mov	r0, r4
 800402c:	f002 fa34 	bl	8006498 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f005 fbc2 	bl	80097ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004044:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f003 fb91 	bl	8007772 <USB_ReadInterrupts>
 8004050:	4603      	mov	r3, r0
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b08      	cmp	r3, #8
 8004058:	d10a      	bne.n	8004070 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f005 fb9f 	bl	800979e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f002 0208 	and.w	r2, r2, #8
 800406e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f003 fb7c 	bl	8007772 <USB_ReadInterrupts>
 800407a:	4603      	mov	r3, r0
 800407c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004084:	d10f      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f005 fc01 	bl	8009898 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 fb61 	bl	8007772 <USB_ReadInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ba:	d10f      	bne.n	80040dc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f005 fbd4 	bl	8009874 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 fb46 	bl	8007772 <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d10a      	bne.n	8004108 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f005 fbe2 	bl	80098bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f003 fb30 	bl	8007772 <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d115      	bne.n	8004148 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f005 fbd2 	bl	80098d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	e000      	b.n	8004148 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004146:	bf00      	nop
    }
  }
}
 8004148:	3734      	adds	r7, #52	; 0x34
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}

0800414e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_PCD_SetAddress+0x1a>
 8004164:	2302      	movs	r3, #2
 8004166:	e013      	b.n	8004190 <HAL_PCD_SetAddress+0x42>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f003 fa8e 	bl	80076a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	70fb      	strb	r3, [r7, #3]
 80041aa:	460b      	mov	r3, r1
 80041ac:	803b      	strh	r3, [r7, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	da0f      	bge.n	80041de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	f003 020f 	and.w	r2, r3, #15
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	3338      	adds	r3, #56	; 0x38
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	3304      	adds	r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	705a      	strb	r2, [r3, #1]
 80041dc:	e00f      	b.n	80041fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800420a:	883a      	ldrh	r2, [r7, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	78ba      	ldrb	r2, [r7, #2]
 8004214:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004228:	78bb      	ldrb	r3, [r7, #2]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d102      	bne.n	8004234 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_PCD_EP_Open+0xaa>
 800423e:	2302      	movs	r3, #2
 8004240:	e00e      	b.n	8004260 <HAL_PCD_EP_Open+0xc8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	4618      	mov	r0, r3
 8004252:	f002 fbf9 	bl	8006a48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800425e:	7afb      	ldrb	r3, [r7, #11]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004278:	2b00      	cmp	r3, #0
 800427a:	da0f      	bge.n	800429c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	f003 020f 	and.w	r2, r3, #15
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	3338      	adds	r3, #56	; 0x38
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	705a      	strb	r2, [r3, #1]
 800429a:	e00f      	b.n	80042bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	f003 020f 	and.w	r2, r3, #15
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	3304      	adds	r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_PCD_EP_Close+0x6e>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e00e      	b.n	80042f4 <HAL_PCD_EP_Close+0x8c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f002 fc37 	bl	8006b58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	460b      	mov	r3, r1
 800430a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	3304      	adds	r3, #4
 8004324:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2200      	movs	r2, #0
 800433c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	b2da      	uxtb	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d102      	bne.n	8004358 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004358:	7afb      	ldrb	r3, [r7, #11]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	6979      	ldr	r1, [r7, #20]
 8004370:	f002 ff12 	bl	8007198 <USB_EP0StartXfer>
 8004374:	e008      	b.n	8004388 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6979      	ldr	r1, [r7, #20]
 8004384:	f002 fcc4 	bl	8006d10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043b4:	681b      	ldr	r3, [r3, #0]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	460b      	mov	r3, r1
 80043d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d2:	7afb      	ldrb	r3, [r7, #11]
 80043d4:	f003 020f 	and.w	r2, r3, #15
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	3338      	adds	r3, #56	; 0x38
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	3304      	adds	r3, #4
 80043e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2201      	movs	r2, #1
 8004400:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004402:	7afb      	ldrb	r3, [r7, #11]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	b2da      	uxtb	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d102      	bne.n	800441c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800441c:	7afb      	ldrb	r3, [r7, #11]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	6979      	ldr	r1, [r7, #20]
 8004434:	f002 feb0 	bl	8007198 <USB_EP0StartXfer>
 8004438:	e008      	b.n	800444c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	f002 fc62 	bl	8006d10 <USB_EPStartXfer>
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d901      	bls.n	8004474 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e050      	b.n	8004516 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004478:	2b00      	cmp	r3, #0
 800447a:	da0f      	bge.n	800449c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	3338      	adds	r3, #56	; 0x38
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4413      	add	r3, r2
 8004490:	3304      	adds	r3, #4
 8004492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	705a      	strb	r2, [r3, #1]
 800449a:	e00d      	b.n	80044b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_PCD_EP_SetStall+0x82>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e01e      	b.n	8004516 <HAL_PCD_EP_SetStall+0xc0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f003 f807 	bl	80074fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	b2d9      	uxtb	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004506:	461a      	mov	r2, r3
 8004508:	f003 f9f8 	bl	80078fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	f003 020f 	and.w	r2, r3, #15
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d901      	bls.n	800453c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e042      	b.n	80045c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800453c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004540:	2b00      	cmp	r3, #0
 8004542:	da0f      	bge.n	8004564 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	f003 020f 	and.w	r2, r3, #15
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	3338      	adds	r3, #56	; 0x38
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	4413      	add	r3, r2
 8004558:	3304      	adds	r3, #4
 800455a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	705a      	strb	r2, [r3, #1]
 8004562:	e00f      	b.n	8004584 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	3304      	adds	r3, #4
 800457c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_PCD_EP_ClrStall+0x86>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e00e      	b.n	80045c2 <HAL_PCD_EP_ClrStall+0xa4>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68f9      	ldr	r1, [r7, #12]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f003 f80f 	bl	80075d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b08a      	sub	sp, #40	; 0x28
 80045ce:	af02      	add	r7, sp, #8
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	3338      	adds	r3, #56	; 0x38
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	3304      	adds	r3, #4
 80045f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d901      	bls.n	8004602 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e06c      	b.n	80046dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	429a      	cmp	r2, r3
 8004616:	d902      	bls.n	800461e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3303      	adds	r3, #3
 8004622:	089b      	lsrs	r3, r3, #2
 8004624:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004626:	e02b      	b.n	8004680 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	429a      	cmp	r2, r3
 800463c:	d902      	bls.n	8004644 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	3303      	adds	r3, #3
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68d9      	ldr	r1, [r3, #12]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800465c:	b2db      	uxtb	r3, r3
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	4603      	mov	r3, r0
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f002 feeb 	bl	800743e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	441a      	add	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	441a      	add	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	b29b      	uxth	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	429a      	cmp	r2, r3
 8004694:	d809      	bhi.n	80046aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800469e:	429a      	cmp	r2, r3
 80046a0:	d203      	bcs.n	80046aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1be      	bne.n	8004628 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d811      	bhi.n	80046da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	2201      	movs	r2, #1
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	6939      	ldr	r1, [r7, #16]
 80046d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d6:	4013      	ands	r3, r2
 80046d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	333c      	adds	r3, #60	; 0x3c
 80046fc:	3304      	adds	r3, #4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b01      	cmp	r3, #1
 8004718:	f040 80a0 	bne.w	800485c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d015      	beq.n	8004752 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a72      	ldr	r2, [pc, #456]	; (80048f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800472a:	4293      	cmp	r3, r2
 800472c:	f240 80dd 	bls.w	80048ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80d7 	beq.w	80048ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004748:	461a      	mov	r2, r3
 800474a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474e:	6093      	str	r3, [r2, #8]
 8004750:	e0cb      	b.n	80048ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	461a      	mov	r2, r3
 800476a:	2320      	movs	r3, #32
 800476c:	6093      	str	r3, [r2, #8]
 800476e:	e0bc      	b.n	80048ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 80b7 	bne.w	80048ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a5d      	ldr	r2, [pc, #372]	; (80048f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d90f      	bls.n	80047a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a0:	6093      	str	r3, [r2, #8]
 80047a2:	e0a2      	b.n	80048ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	440b      	add	r3, r1
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80047ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4403      	add	r3, r0
 80047da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4403      	add	r3, r0
 8004802:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4419      	add	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4403      	add	r3, r0
 8004818:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800481c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d114      	bne.n	800484e <PCD_EP_OutXfrComplete_int+0x16a>
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d108      	bne.n	800484e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004846:	461a      	mov	r2, r3
 8004848:	2101      	movs	r1, #1
 800484a:	f003 f857 	bl	80078fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f004 ff6d 	bl	8009734 <HAL_PCD_DataOutStageCallback>
 800485a:	e046      	b.n	80048ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d124      	bne.n	80048ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	461a      	mov	r2, r3
 800487c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004880:	6093      	str	r3, [r2, #8]
 8004882:	e032      	b.n	80048ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	461a      	mov	r2, r3
 800489c:	2320      	movs	r3, #32
 800489e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f004 ff44 	bl	8009734 <HAL_PCD_DataOutStageCallback>
 80048ac:	e01d      	b.n	80048ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d114      	bne.n	80048de <PCD_EP_OutXfrComplete_int+0x1fa>
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048d6:	461a      	mov	r2, r3
 80048d8:	2100      	movs	r1, #0
 80048da:	f003 f80f 	bl	80078fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f004 ff25 	bl	8009734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	4f54300a 	.word	0x4f54300a
 80048f8:	4f54310a 	.word	0x4f54310a

080048fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	333c      	adds	r3, #60	; 0x3c
 8004914:	3304      	adds	r3, #4
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <PCD_EP_OutSetupPacket_int+0x88>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d90e      	bls.n	8004950 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	461a      	mov	r2, r3
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f004 fedd 	bl	8009710 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <PCD_EP_OutSetupPacket_int+0x88>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d90c      	bls.n	8004978 <PCD_EP_OutSetupPacket_int+0x7c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d108      	bne.n	8004978 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004970:	461a      	mov	r2, r3
 8004972:	2101      	movs	r1, #1
 8004974:	f002 ffc2 	bl	80078fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	4f54300a 	.word	0x4f54300a

08004988 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
 8004994:	4613      	mov	r3, r2
 8004996:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d107      	bne.n	80049b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049a6:	883b      	ldrh	r3, [r7, #0]
 80049a8:	0419      	lsls	r1, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28
 80049b4:	e028      	b.n	8004a08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	4413      	add	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	e00d      	b.n	80049e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	3340      	adds	r3, #64	; 0x40
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	3301      	adds	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d3ec      	bcc.n	80049ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049f0:	883b      	ldrh	r3, [r7, #0]
 80049f2:	0418      	lsls	r0, r3, #16
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6819      	ldr	r1, [r3, #0]
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	4302      	orrs	r2, r0
 8004a00:	3340      	adds	r3, #64	; 0x40
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e25b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d075      	beq.n	8004b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a6e:	4ba3      	ldr	r3, [pc, #652]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4ba0      	ldr	r3, [pc, #640]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a86:	4b9d      	ldr	r3, [pc, #628]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a92:	d10b      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	4b99      	ldr	r3, [pc, #612]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05b      	beq.n	8004b58 <HAL_RCC_OscConfig+0x108>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d157      	bne.n	8004b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e236      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x74>
 8004ab6:	4b91      	ldr	r3, [pc, #580]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a90      	ldr	r2, [pc, #576]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x98>
 8004ace:	4b8b      	ldr	r3, [pc, #556]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a8a      	ldr	r2, [pc, #552]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b88      	ldr	r3, [pc, #544]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a87      	ldr	r2, [pc, #540]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	4b84      	ldr	r3, [pc, #528]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a83      	ldr	r2, [pc, #524]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b81      	ldr	r3, [pc, #516]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a80      	ldr	r2, [pc, #512]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fd fb54 	bl	80021b4 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fd fb50 	bl	80021b4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e1fb      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b76      	ldr	r3, [pc, #472]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd fb40 	bl	80021b4 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fd fb3c 	bl	80021b4 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1e7      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b6c      	ldr	r3, [pc, #432]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0xe8>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d063      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b66:	4b65      	ldr	r3, [pc, #404]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b62      	ldr	r3, [pc, #392]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1bb      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b56      	ldr	r3, [pc, #344]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4952      	ldr	r1, [pc, #328]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <HAL_RCC_OscConfig+0x2b0>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fd faf5 	bl	80021b4 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fd faf1 	bl	80021b4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e19c      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b46      	ldr	r3, [pc, #280]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b43      	ldr	r3, [pc, #268]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4940      	ldr	r1, [pc, #256]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <HAL_RCC_OscConfig+0x2b0>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fd fad4 	bl	80021b4 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fd fad0 	bl	80021b4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e17b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d030      	beq.n	8004c9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <HAL_RCC_OscConfig+0x2b4>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fd fab4 	bl	80021b4 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fd fab0 	bl	80021b4 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e15b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b26      	ldr	r3, [pc, #152]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x200>
 8004c6e:	e015      	b.n	8004c9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_OscConfig+0x2b4>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fd fa9d 	bl	80021b4 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fd fa99 	bl	80021b4 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e144      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80a0 	beq.w	8004dea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d121      	bne.n	8004d2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf2:	f7fd fa5f 	bl	80021b4 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	e011      	b.n	8004d1e <HAL_RCC_OscConfig+0x2ce>
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	42470000 	.word	0x42470000
 8004d04:	42470e80 	.word	0x42470e80
 8004d08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0c:	f7fd fa52 	bl	80021b4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0fd      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b81      	ldr	r3, [pc, #516]	; (8004f24 <HAL_RCC_OscConfig+0x4d4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d106      	bne.n	8004d40 <HAL_RCC_OscConfig+0x2f0>
 8004d32:	4b7d      	ldr	r3, [pc, #500]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a7c      	ldr	r2, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	e01c      	b.n	8004d7a <HAL_RCC_OscConfig+0x32a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCC_OscConfig+0x312>
 8004d48:	4b77      	ldr	r3, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	4a76      	ldr	r2, [pc, #472]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70
 8004d54:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	4a73      	ldr	r2, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d60:	e00b      	b.n	8004d7a <HAL_RCC_OscConfig+0x32a>
 8004d62:	4b71      	ldr	r3, [pc, #452]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a70      	ldr	r2, [pc, #448]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6e:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a6d      	ldr	r2, [pc, #436]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d015      	beq.n	8004dae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fd fa17 	bl	80021b4 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fd fa13 	bl	80021b4 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e0bc      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ee      	beq.n	8004d8a <HAL_RCC_OscConfig+0x33a>
 8004dac:	e014      	b.n	8004dd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dae:	f7fd fa01 	bl	80021b4 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fd f9fd 	bl	80021b4 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e0a6      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dcc:	4b56      	ldr	r3, [pc, #344]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ee      	bne.n	8004db6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dde:	4b52      	ldr	r3, [pc, #328]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8092 	beq.w	8004f18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df4:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d05c      	beq.n	8004eba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d141      	bne.n	8004e8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b48      	ldr	r3, [pc, #288]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fd f9d1 	bl	80021b4 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fd f9cd 	bl	80021b4 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e078      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e28:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	019b      	lsls	r3, r3, #6
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	4933      	ldr	r1, [pc, #204]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5e:	4b33      	ldr	r3, [pc, #204]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fd f9a6 	bl	80021b4 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fd f9a2 	bl	80021b4 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04d      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7e:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x41c>
 8004e8a:	e045      	b.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8c:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e92:	f7fd f98f 	bl	80021b4 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fd f98b 	bl	80021b4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e036      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eac:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x44a>
 8004eb8:	e02e      	b.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e029      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec6:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d11c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d115      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eee:	4013      	ands	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d106      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40007000 	.word	0x40007000
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	42470060 	.word	0x42470060

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0cc      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b68      	ldr	r3, [pc, #416]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90c      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b65      	ldr	r3, [pc, #404]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b8      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f84:	4b59      	ldr	r3, [pc, #356]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a52      	ldr	r2, [pc, #328]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b50      	ldr	r3, [pc, #320]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	494d      	ldr	r1, [pc, #308]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d044      	beq.n	8005050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d119      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e07f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e067      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4934      	ldr	r1, [pc, #208]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005020:	f7fd f8c8 	bl	80021b4 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7fd f8c4 	bl	80021b4 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e04f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20c      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e032      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005084:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4916      	ldr	r1, [pc, #88]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050b6:	f000 f821 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80050ba:	4601      	mov	r1, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	fa21 f303 	lsr.w	r3, r1, r3
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd f828 	bl	800212c <HAL_InitTick>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023c00 	.word	0x40023c00
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800bdcc 	.word	0x0800bdcc
 80050f4:	20000000 	.word	0x20000000
 80050f8:	20000004 	.word	0x20000004

080050fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	2300      	movs	r3, #0
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005112:	4b63      	ldr	r3, [pc, #396]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d007      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x32>
 800511e:	2b08      	cmp	r3, #8
 8005120:	d008      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x38>
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 80b4 	bne.w	8005290 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005128:	4b5e      	ldr	r3, [pc, #376]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800512a:	60bb      	str	r3, [r7, #8]
       break;
 800512c:	e0b3      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800512e:	4b5d      	ldr	r3, [pc, #372]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005130:	60bb      	str	r3, [r7, #8]
      break;
 8005132:	e0b0      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005134:	4b5a      	ldr	r3, [pc, #360]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800513c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800513e:	4b58      	ldr	r3, [pc, #352]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d04a      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514a:	4b55      	ldr	r3, [pc, #340]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	f04f 0400 	mov.w	r4, #0
 8005154:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	ea03 0501 	and.w	r5, r3, r1
 8005160:	ea04 0602 	and.w	r6, r4, r2
 8005164:	4629      	mov	r1, r5
 8005166:	4632      	mov	r2, r6
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	f04f 0400 	mov.w	r4, #0
 8005170:	0154      	lsls	r4, r2, #5
 8005172:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005176:	014b      	lsls	r3, r1, #5
 8005178:	4619      	mov	r1, r3
 800517a:	4622      	mov	r2, r4
 800517c:	1b49      	subs	r1, r1, r5
 800517e:	eb62 0206 	sbc.w	r2, r2, r6
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 0400 	mov.w	r4, #0
 800518a:	0194      	lsls	r4, r2, #6
 800518c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005190:	018b      	lsls	r3, r1, #6
 8005192:	1a5b      	subs	r3, r3, r1
 8005194:	eb64 0402 	sbc.w	r4, r4, r2
 8005198:	f04f 0100 	mov.w	r1, #0
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	00e2      	lsls	r2, r4, #3
 80051a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051a6:	00d9      	lsls	r1, r3, #3
 80051a8:	460b      	mov	r3, r1
 80051aa:	4614      	mov	r4, r2
 80051ac:	195b      	adds	r3, r3, r5
 80051ae:	eb44 0406 	adc.w	r4, r4, r6
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	02a2      	lsls	r2, r4, #10
 80051bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051c0:	0299      	lsls	r1, r3, #10
 80051c2:	460b      	mov	r3, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	4621      	mov	r1, r4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	461a      	mov	r2, r3
 80051d2:	4623      	mov	r3, r4
 80051d4:	f7fb fce8 	bl	8000ba8 <__aeabi_uldivmod>
 80051d8:	4603      	mov	r3, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e049      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	099b      	lsrs	r3, r3, #6
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	ea03 0501 	and.w	r5, r3, r1
 80051f6:	ea04 0602 	and.w	r6, r4, r2
 80051fa:	4629      	mov	r1, r5
 80051fc:	4632      	mov	r2, r6
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	0154      	lsls	r4, r2, #5
 8005208:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800520c:	014b      	lsls	r3, r1, #5
 800520e:	4619      	mov	r1, r3
 8005210:	4622      	mov	r2, r4
 8005212:	1b49      	subs	r1, r1, r5
 8005214:	eb62 0206 	sbc.w	r2, r2, r6
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	0194      	lsls	r4, r2, #6
 8005222:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005226:	018b      	lsls	r3, r1, #6
 8005228:	1a5b      	subs	r3, r3, r1
 800522a:	eb64 0402 	sbc.w	r4, r4, r2
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	00e2      	lsls	r2, r4, #3
 8005238:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800523c:	00d9      	lsls	r1, r3, #3
 800523e:	460b      	mov	r3, r1
 8005240:	4614      	mov	r4, r2
 8005242:	195b      	adds	r3, r3, r5
 8005244:	eb44 0406 	adc.w	r4, r4, r6
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	02a2      	lsls	r2, r4, #10
 8005252:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005256:	0299      	lsls	r1, r3, #10
 8005258:	460b      	mov	r3, r1
 800525a:	4614      	mov	r4, r2
 800525c:	4618      	mov	r0, r3
 800525e:	4621      	mov	r1, r4
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f04f 0400 	mov.w	r4, #0
 8005266:	461a      	mov	r2, r3
 8005268:	4623      	mov	r3, r4
 800526a:	f7fb fc9d 	bl	8000ba8 <__aeabi_uldivmod>
 800526e:	4603      	mov	r3, r0
 8005270:	460c      	mov	r4, r1
 8005272:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	3301      	adds	r3, #1
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	60bb      	str	r3, [r7, #8]
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005292:	60bb      	str	r3, [r7, #8]
      break;
 8005294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005296:	68bb      	ldr	r3, [r7, #8]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a0:	40023800 	.word	0x40023800
 80052a4:	00f42400 	.word	0x00f42400

080052a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ae:	681b      	ldr	r3, [r3, #0]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000000 	.word	0x20000000

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052c4:	f7ff fff0 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052c8:	4601      	mov	r1, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0a9b      	lsrs	r3, r3, #10
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4a03      	ldr	r2, [pc, #12]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	0800bddc 	.word	0x0800bddc

080052e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e01d      	b.n	8005336 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc fda4 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f000 fc24 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b06      	cmp	r3, #6
 800535e:	d007      	beq.n	8005370 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b06      	cmp	r3, #6
 80053ae:	d007      	beq.n	80053c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e01d      	b.n	800541c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fc fc65 	bl	8001cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3304      	adds	r3, #4
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f000 fbb1 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 ff16 	bl	8006268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a15      	ldr	r2, [pc, #84]	; (8005498 <HAL_TIM_PWM_Start+0x74>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_TIM_PWM_Start+0x2c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a14      	ldr	r2, [pc, #80]	; (800549c <HAL_TIM_PWM_Start+0x78>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_TIM_PWM_Start+0x30>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <HAL_TIM_PWM_Start+0x32>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b06      	cmp	r3, #6
 800547a:	d007      	beq.n	800548c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	40010400 	.word	0x40010400

080054a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e01d      	b.n	80054ee <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc fc1c 	bl	8001d04 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 fb48 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b0c      	cmp	r3, #12
 8005506:	d841      	bhi.n	800558c <HAL_TIM_IC_Start_IT+0x94>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <HAL_TIM_IC_Start_IT+0x18>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005545 	.word	0x08005545
 8005514:	0800558d 	.word	0x0800558d
 8005518:	0800558d 	.word	0x0800558d
 800551c:	0800558d 	.word	0x0800558d
 8005520:	08005557 	.word	0x08005557
 8005524:	0800558d 	.word	0x0800558d
 8005528:	0800558d 	.word	0x0800558d
 800552c:	0800558d 	.word	0x0800558d
 8005530:	08005569 	.word	0x08005569
 8005534:	0800558d 	.word	0x0800558d
 8005538:	0800558d 	.word	0x0800558d
 800553c:	0800558d 	.word	0x0800558d
 8005540:	0800557b 	.word	0x0800557b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0202 	orr.w	r2, r2, #2
 8005552:	60da      	str	r2, [r3, #12]
      break;
 8005554:	e01b      	b.n	800558e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0204 	orr.w	r2, r2, #4
 8005564:	60da      	str	r2, [r3, #12]
      break;
 8005566:	e012      	b.n	800558e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0208 	orr.w	r2, r2, #8
 8005576:	60da      	str	r2, [r3, #12]
      break;
 8005578:	e009      	b.n	800558e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0210 	orr.w	r2, r2, #16
 8005588:	60da      	str	r2, [r3, #12]
      break;
 800558a:	e000      	b.n	800558e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800558c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2201      	movs	r2, #1
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fe66 	bl	8006268 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d007      	beq.n	80055be <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d122      	bne.n	8005624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0202 	mvn.w	r2, #2
 80055f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc f8b4 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fa90 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa97 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b04      	cmp	r3, #4
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0204 	mvn.w	r2, #4
 8005648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fc f88a 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa66 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fa6d 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b08      	cmp	r3, #8
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b08      	cmp	r3, #8
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0208 	mvn.w	r2, #8
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2204      	movs	r2, #4
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc f860 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa3c 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fa43 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b10      	cmp	r3, #16
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0210 	mvn.w	r2, #16
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2208      	movs	r2, #8
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc f836 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa12 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa19 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d10e      	bne.n	800574c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b01      	cmp	r3, #1
 800573a:	d107      	bne.n	800574c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0201 	mvn.w	r2, #1
 8005744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f9ec 	bl	8005b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d10e      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d107      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fe24 	bl	80063c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d10e      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d107      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9de 	bl	8005b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d10e      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d107      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0220 	mvn.w	r2, #32
 80057c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fdee 	bl	80063ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e08a      	b.n	8005908 <HAL_TIM_IC_ConfigChannel+0x130>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f000 fbfc 	bl	8006014 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 020c 	bic.w	r2, r2, #12
 800582a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	619a      	str	r2, [r3, #24]
 800583e:	e05a      	b.n	80058f6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d11c      	bne.n	8005880 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6819      	ldr	r1, [r3, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f000 fc51 	bl	80060fc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005868:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6999      	ldr	r1, [r3, #24]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	021a      	lsls	r2, r3, #8
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	619a      	str	r2, [r3, #24]
 800587e:	e03a      	b.n	80058f6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b08      	cmp	r3, #8
 8005884:	d11b      	bne.n	80058be <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6819      	ldr	r1, [r3, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f000 fc6e 	bl	8006176 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 020c 	bic.w	r2, r2, #12
 80058a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69d9      	ldr	r1, [r3, #28]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	61da      	str	r2, [r3, #28]
 80058bc:	e01b      	b.n	80058f6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6819      	ldr	r1, [r3, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f000 fc8e 	bl	80061ee <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69d9      	ldr	r1, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	021a      	lsls	r2, r3, #8
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005926:	2302      	movs	r3, #2
 8005928:	e0b4      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x184>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	f200 809f 	bhi.w	8005a80 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	0800597d 	.word	0x0800597d
 800594c:	08005a81 	.word	0x08005a81
 8005950:	08005a81 	.word	0x08005a81
 8005954:	08005a81 	.word	0x08005a81
 8005958:	080059bd 	.word	0x080059bd
 800595c:	08005a81 	.word	0x08005a81
 8005960:	08005a81 	.word	0x08005a81
 8005964:	08005a81 	.word	0x08005a81
 8005968:	080059ff 	.word	0x080059ff
 800596c:	08005a81 	.word	0x08005a81
 8005970:	08005a81 	.word	0x08005a81
 8005974:	08005a81 	.word	0x08005a81
 8005978:	08005a3f 	.word	0x08005a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f996 	bl	8005cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0208 	orr.w	r2, r2, #8
 8005996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0204 	bic.w	r2, r2, #4
 80059a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6999      	ldr	r1, [r3, #24]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	619a      	str	r2, [r3, #24]
      break;
 80059ba:	e062      	b.n	8005a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f9e6 	bl	8005d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6999      	ldr	r1, [r3, #24]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	619a      	str	r2, [r3, #24]
      break;
 80059fc:	e041      	b.n	8005a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fa3b 	bl	8005e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0208 	orr.w	r2, r2, #8
 8005a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0204 	bic.w	r2, r2, #4
 8005a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69d9      	ldr	r1, [r3, #28]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	61da      	str	r2, [r3, #28]
      break;
 8005a3c:	e021      	b.n	8005a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fa8f 	bl	8005f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	021a      	lsls	r2, r3, #8
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	61da      	str	r2, [r3, #28]
      break;
 8005a7e:	e000      	b.n	8005a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b0c      	cmp	r3, #12
 8005aae:	d831      	bhi.n	8005b14 <HAL_TIM_ReadCapturedValue+0x78>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005aed 	.word	0x08005aed
 8005abc:	08005b15 	.word	0x08005b15
 8005ac0:	08005b15 	.word	0x08005b15
 8005ac4:	08005b15 	.word	0x08005b15
 8005ac8:	08005af7 	.word	0x08005af7
 8005acc:	08005b15 	.word	0x08005b15
 8005ad0:	08005b15 	.word	0x08005b15
 8005ad4:	08005b15 	.word	0x08005b15
 8005ad8:	08005b01 	.word	0x08005b01
 8005adc:	08005b15 	.word	0x08005b15
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b15 	.word	0x08005b15
 8005ae8:	08005b0b 	.word	0x08005b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	60fb      	str	r3, [r7, #12]

      break;
 8005af4:	e00f      	b.n	8005b16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	60fb      	str	r3, [r7, #12]

      break;
 8005afe:	e00a      	b.n	8005b16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	60fb      	str	r3, [r7, #12]

      break;
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	60fb      	str	r3, [r7, #12]

      break;
 8005b12:	e000      	b.n	8005b16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b14:	bf00      	nop
  }

  return tmpreg;
 8005b16:	68fb      	ldr	r3, [r7, #12]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a40      	ldr	r2, [pc, #256]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d00f      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3d      	ldr	r2, [pc, #244]	; (8005c8c <TIM_Base_SetConfig+0x118>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3c      	ldr	r2, [pc, #240]	; (8005c90 <TIM_Base_SetConfig+0x11c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3b      	ldr	r2, [pc, #236]	; (8005c94 <TIM_Base_SetConfig+0x120>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d108      	bne.n	8005bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2f      	ldr	r2, [pc, #188]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd4:	d027      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <TIM_Base_SetConfig+0x118>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d023      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2b      	ldr	r2, [pc, #172]	; (8005c90 <TIM_Base_SetConfig+0x11c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <TIM_Base_SetConfig+0x120>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d017      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a28      	ldr	r2, [pc, #160]	; (8005c9c <TIM_Base_SetConfig+0x128>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a25      	ldr	r2, [pc, #148]	; (8005ca8 <TIM_Base_SetConfig+0x134>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a24      	ldr	r2, [pc, #144]	; (8005cac <TIM_Base_SetConfig+0x138>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <TIM_Base_SetConfig+0x13c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	615a      	str	r2, [r3, #20]
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800
 8005ca8:	40001800 	.word	0x40001800
 8005cac:	40001c00 	.word	0x40001c00
 8005cb0:	40002000 	.word	0x40002000

08005cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f023 0201 	bic.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 0302 	bic.w	r3, r3, #2
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <TIM_OC1_SetConfig+0xd8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC1_SetConfig+0x64>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <TIM_OC1_SetConfig+0xdc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d10c      	bne.n	8005d32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0308 	bic.w	r3, r3, #8
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 0304 	bic.w	r3, r3, #4
 8005d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <TIM_OC1_SetConfig+0xd8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC1_SetConfig+0x8e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a14      	ldr	r2, [pc, #80]	; (8005d90 <TIM_OC1_SetConfig+0xdc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d111      	bne.n	8005d66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	621a      	str	r2, [r3, #32]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40010400 	.word	0x40010400

08005d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0210 	bic.w	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 0320 	bic.w	r3, r3, #32
 8005dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <TIM_OC2_SetConfig+0xe4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC2_SetConfig+0x68>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <TIM_OC2_SetConfig+0xe8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d10d      	bne.n	8005e18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a17      	ldr	r2, [pc, #92]	; (8005e78 <TIM_OC2_SetConfig+0xe4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_OC2_SetConfig+0x94>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a16      	ldr	r2, [pc, #88]	; (8005e7c <TIM_OC2_SetConfig+0xe8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d113      	bne.n	8005e50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40010400 	.word	0x40010400

08005e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <TIM_OC3_SetConfig+0xe0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC3_SetConfig+0x66>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <TIM_OC3_SetConfig+0xe4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d10d      	bne.n	8005f02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a16      	ldr	r2, [pc, #88]	; (8005f60 <TIM_OC3_SetConfig+0xe0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_OC3_SetConfig+0x92>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <TIM_OC3_SetConfig+0xe4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d113      	bne.n	8005f3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400

08005f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	031b      	lsls	r3, r3, #12
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a12      	ldr	r2, [pc, #72]	; (800600c <TIM_OC4_SetConfig+0xa4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d003      	beq.n	8005fd0 <TIM_OC4_SetConfig+0x68>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a11      	ldr	r2, [pc, #68]	; (8006010 <TIM_OC4_SetConfig+0xa8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d109      	bne.n	8005fe4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	019b      	lsls	r3, r3, #6
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40010400 	.word	0x40010400

08006014 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f023 0201 	bic.w	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a28      	ldr	r2, [pc, #160]	; (80060e0 <TIM_TI1_SetConfig+0xcc>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01b      	beq.n	800607a <TIM_TI1_SetConfig+0x66>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006048:	d017      	beq.n	800607a <TIM_TI1_SetConfig+0x66>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a25      	ldr	r2, [pc, #148]	; (80060e4 <TIM_TI1_SetConfig+0xd0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <TIM_TI1_SetConfig+0x66>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a24      	ldr	r2, [pc, #144]	; (80060e8 <TIM_TI1_SetConfig+0xd4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00f      	beq.n	800607a <TIM_TI1_SetConfig+0x66>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a23      	ldr	r2, [pc, #140]	; (80060ec <TIM_TI1_SetConfig+0xd8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00b      	beq.n	800607a <TIM_TI1_SetConfig+0x66>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a22      	ldr	r2, [pc, #136]	; (80060f0 <TIM_TI1_SetConfig+0xdc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d007      	beq.n	800607a <TIM_TI1_SetConfig+0x66>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <TIM_TI1_SetConfig+0xe0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <TIM_TI1_SetConfig+0x66>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <TIM_TI1_SetConfig+0xe4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <TIM_TI1_SetConfig+0x6a>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <TIM_TI1_SetConfig+0x6c>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d008      	beq.n	8006096 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e003      	b.n	800609e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f023 030a 	bic.w	r3, r3, #10
 80060b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f003 030a 	and.w	r3, r3, #10
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40001800 	.word	0x40001800

080060fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0210 	bic.w	r2, r3, #16
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800613a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	031b      	lsls	r3, r3, #12
 8006140:	b29b      	uxth	r3, r3
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800614e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b087      	sub	sp, #28
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800622c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	031b      	lsls	r3, r3, #12
 8006232:	b29b      	uxth	r3, r3
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006240:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	031b      	lsls	r3, r3, #12
 8006246:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	621a      	str	r2, [r3, #32]
}
 800625c:	bf00      	nop
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2201      	movs	r2, #1
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	43db      	mvns	r3, r3
 800628a:	401a      	ands	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1a      	ldr	r2, [r3, #32]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e05a      	b.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a21      	ldr	r2, [pc, #132]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d022      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006318:	d01d      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d018      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1a      	ldr	r2, [pc, #104]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a17      	ldr	r2, [pc, #92]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10c      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40010400 	.word	0x40010400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40001800 	.word	0x40001800

080063ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063d4:	b084      	sub	sp, #16
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	f107 001c 	add.w	r0, r7, #28
 80063e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d122      	bne.n	8006432 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d105      	bne.n	8006426 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fac6 	bl	80079b8 <USB_CoreReset>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
 8006430:	e01a      	b.n	8006468 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f001 faba 	bl	80079b8 <USB_CoreReset>
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
 800645a:	e005      	b.n	8006468 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10b      	bne.n	8006486 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f043 0206 	orr.w	r2, r3, #6
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006486:	7bfb      	ldrb	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006492:	b004      	add	sp, #16
 8006494:	4770      	bx	lr
	...

08006498 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d165      	bne.n	8006578 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4a41      	ldr	r2, [pc, #260]	; (80065b4 <USB_SetTurnaroundTime+0x11c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d906      	bls.n	80064c2 <USB_SetTurnaroundTime+0x2a>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4a40      	ldr	r2, [pc, #256]	; (80065b8 <USB_SetTurnaroundTime+0x120>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d802      	bhi.n	80064c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064bc:	230f      	movs	r3, #15
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e062      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4a3c      	ldr	r2, [pc, #240]	; (80065b8 <USB_SetTurnaroundTime+0x120>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d906      	bls.n	80064d8 <USB_SetTurnaroundTime+0x40>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4a3b      	ldr	r2, [pc, #236]	; (80065bc <USB_SetTurnaroundTime+0x124>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d802      	bhi.n	80064d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064d2:	230e      	movs	r3, #14
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e057      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a38      	ldr	r2, [pc, #224]	; (80065bc <USB_SetTurnaroundTime+0x124>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d906      	bls.n	80064ee <USB_SetTurnaroundTime+0x56>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a37      	ldr	r2, [pc, #220]	; (80065c0 <USB_SetTurnaroundTime+0x128>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d802      	bhi.n	80064ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064e8:	230d      	movs	r3, #13
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e04c      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4a33      	ldr	r2, [pc, #204]	; (80065c0 <USB_SetTurnaroundTime+0x128>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d906      	bls.n	8006504 <USB_SetTurnaroundTime+0x6c>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a32      	ldr	r2, [pc, #200]	; (80065c4 <USB_SetTurnaroundTime+0x12c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d802      	bhi.n	8006504 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064fe:	230c      	movs	r3, #12
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	e041      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a2f      	ldr	r2, [pc, #188]	; (80065c4 <USB_SetTurnaroundTime+0x12c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d906      	bls.n	800651a <USB_SetTurnaroundTime+0x82>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a2e      	ldr	r2, [pc, #184]	; (80065c8 <USB_SetTurnaroundTime+0x130>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d802      	bhi.n	800651a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006514:	230b      	movs	r3, #11
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e036      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4a2a      	ldr	r2, [pc, #168]	; (80065c8 <USB_SetTurnaroundTime+0x130>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d906      	bls.n	8006530 <USB_SetTurnaroundTime+0x98>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a29      	ldr	r2, [pc, #164]	; (80065cc <USB_SetTurnaroundTime+0x134>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d802      	bhi.n	8006530 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800652a:	230a      	movs	r3, #10
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e02b      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a26      	ldr	r2, [pc, #152]	; (80065cc <USB_SetTurnaroundTime+0x134>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d906      	bls.n	8006546 <USB_SetTurnaroundTime+0xae>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a25      	ldr	r2, [pc, #148]	; (80065d0 <USB_SetTurnaroundTime+0x138>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d802      	bhi.n	8006546 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006540:	2309      	movs	r3, #9
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e020      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <USB_SetTurnaroundTime+0x138>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d906      	bls.n	800655c <USB_SetTurnaroundTime+0xc4>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <USB_SetTurnaroundTime+0x13c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d802      	bhi.n	800655c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006556:	2308      	movs	r3, #8
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e015      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <USB_SetTurnaroundTime+0x13c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d906      	bls.n	8006572 <USB_SetTurnaroundTime+0xda>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <USB_SetTurnaroundTime+0x140>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d802      	bhi.n	8006572 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800656c:	2307      	movs	r3, #7
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e00a      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006572:	2306      	movs	r3, #6
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e007      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800657e:	2309      	movs	r3, #9
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	e001      	b.n	8006588 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006584:	2309      	movs	r3, #9
 8006586:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	029b      	lsls	r3, r3, #10
 800659c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	00d8acbf 	.word	0x00d8acbf
 80065b8:	00e4e1bf 	.word	0x00e4e1bf
 80065bc:	00f423ff 	.word	0x00f423ff
 80065c0:	0106737f 	.word	0x0106737f
 80065c4:	011a499f 	.word	0x011a499f
 80065c8:	01312cff 	.word	0x01312cff
 80065cc:	014ca43f 	.word	0x014ca43f
 80065d0:	016e35ff 	.word	0x016e35ff
 80065d4:	01a6ab1f 	.word	0x01a6ab1f
 80065d8:	01e847ff 	.word	0x01e847ff

080065dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f043 0201 	orr.w	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f023 0201 	bic.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d106      	bne.n	800664c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	e00b      	b.n	8006664 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60da      	str	r2, [r3, #12]
 800665e:	e001      	b.n	8006664 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e003      	b.n	800666c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006664:	2032      	movs	r0, #50	; 0x32
 8006666:	f7fb fdb1 	bl	80021cc <HAL_Delay>

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006674:	b084      	sub	sp, #16
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	e009      	b.n	80066a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	3340      	adds	r3, #64	; 0x40
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	3301      	adds	r3, #1
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b0e      	cmp	r3, #14
 80066ac:	d9f2      	bls.n	8006694 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d11c      	bne.n	80066ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066c2:	f043 0302 	orr.w	r3, r3, #2
 80066c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38
 80066ec:	e00b      	b.n	8006706 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800670c:	461a      	mov	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006718:	4619      	mov	r1, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	461a      	mov	r2, r3
 8006722:	680b      	ldr	r3, [r1, #0]
 8006724:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10c      	bne.n	8006746 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d104      	bne.n	800673c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006732:	2100      	movs	r1, #0
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f949 	bl	80069cc <USB_SetDevSpeed>
 800673a:	e008      	b.n	800674e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800673c:	2101      	movs	r1, #1
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f944 	bl	80069cc <USB_SetDevSpeed>
 8006744:	e003      	b.n	800674e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006746:	2103      	movs	r1, #3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f93f 	bl	80069cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800674e:	2110      	movs	r1, #16
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8f3 	bl	800693c <USB_FlushTxFifo>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f911 	bl	8006988 <USB_FlushRxFifo>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	461a      	mov	r2, r3
 8006778:	2300      	movs	r3, #0
 800677a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	461a      	mov	r2, r3
 8006784:	2300      	movs	r3, #0
 8006786:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	461a      	mov	r2, r3
 8006790:	2300      	movs	r3, #0
 8006792:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	e043      	b.n	8006822 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b0:	d118      	bne.n	80067e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	e013      	b.n	80067f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067da:	461a      	mov	r2, r3
 80067dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	e008      	b.n	80067f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	461a      	mov	r2, r3
 8006816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800681a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3301      	adds	r3, #1
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d3b7      	bcc.n	800679a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	e043      	b.n	80068b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006846:	d118      	bne.n	800687a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e013      	b.n	800688c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	461a      	mov	r2, r3
 8006872:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e008      	b.n	800688c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006886:	461a      	mov	r2, r3
 8006888:	2300      	movs	r3, #0
 800688a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	461a      	mov	r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068aa:	461a      	mov	r2, r3
 80068ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3301      	adds	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3b7      	bcc.n	8006830 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f043 0210 	orr.w	r2, r3, #16
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <USB_DevInit+0x2c4>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f043 0208 	orr.w	r2, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d107      	bne.n	8006928 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006920:	f043 0304 	orr.w	r3, r3, #4
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006934:	b004      	add	sp, #16
 8006936:	4770      	bx	lr
 8006938:	803c3800 	.word	0x803c3800

0800693c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	019b      	lsls	r3, r3, #6
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3301      	adds	r3, #1
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4a09      	ldr	r2, [pc, #36]	; (8006984 <USB_FlushTxFifo+0x48>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d901      	bls.n	8006968 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e006      	b.n	8006976 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b20      	cmp	r3, #32
 8006972:	d0f0      	beq.n	8006956 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	00030d40 	.word	0x00030d40

08006988 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2210      	movs	r2, #16
 8006998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3301      	adds	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4a09      	ldr	r2, [pc, #36]	; (80069c8 <USB_FlushRxFifo+0x40>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d901      	bls.n	80069ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e006      	b.n	80069ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d0f0      	beq.n	800699a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	00030d40 	.word	0x00030d40

080069cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	68f9      	ldr	r1, [r7, #12]
 80069e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ec:	4313      	orrs	r3, r2
 80069ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 0306 	and.w	r3, r3, #6
 8006a16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	75fb      	strb	r3, [r7, #23]
 8006a22:	e00a      	b.n	8006a3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d002      	beq.n	8006a30 <USB_GetDevSpeed+0x32>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b06      	cmp	r3, #6
 8006a2e:	d102      	bne.n	8006a36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a30:	2302      	movs	r3, #2
 8006a32:	75fb      	strb	r3, [r7, #23]
 8006a34:	e001      	b.n	8006a3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a36:	230f      	movs	r3, #15
 8006a38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d13a      	bne.n	8006ada <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6a:	69da      	ldr	r2, [r3, #28]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	2101      	movs	r1, #1
 8006a76:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a82:	4313      	orrs	r3, r2
 8006a84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d155      	bne.n	8006b48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	78db      	ldrb	r3, [r3, #3]
 8006ab6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	059b      	lsls	r3, r3, #22
 8006abe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	e036      	b.n	8006b48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae0:	69da      	ldr	r2, [r3, #28]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	2101      	movs	r1, #1
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	041b      	lsls	r3, r3, #16
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af8:	4313      	orrs	r3, r2
 8006afa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d11a      	bne.n	8006b48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	78db      	ldrb	r3, [r3, #3]
 8006b2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	4313      	orrs	r3, r2
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
	...

08006b58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	785b      	ldrb	r3, [r3, #1]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d161      	bne.n	8006c38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b8a:	d11f      	bne.n	8006bcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	0151      	lsls	r1, r2, #5
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	440a      	add	r2, r1
 8006ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006baa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	2101      	movs	r1, #1
 8006bde:	fa01 f303 	lsl.w	r3, r1, r3
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	43db      	mvns	r3, r3
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bec:	4013      	ands	r3, r2
 8006bee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	2101      	movs	r1, #1
 8006c02:	fa01 f303 	lsl.w	r3, r1, r3
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c10:	4013      	ands	r3, r2
 8006c12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	0159      	lsls	r1, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	440b      	add	r3, r1
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4b35      	ldr	r3, [pc, #212]	; (8006d08 <USB_DeactivateEndpoint+0x1b0>)
 8006c32:	4013      	ands	r3, r2
 8006c34:	600b      	str	r3, [r1, #0]
 8006c36:	e060      	b.n	8006cfa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4e:	d11f      	bne.n	8006c90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	68f9      	ldr	r1, [r7, #12]
 8006cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cca:	041b      	lsls	r3, r3, #16
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	0159      	lsls	r1, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	440b      	add	r3, r1
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <USB_DeactivateEndpoint+0x1b4>)
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	ec337800 	.word	0xec337800
 8006d0c:	eff37800 	.word	0xeff37800

08006d10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	f040 815c 	bne.w	8006fea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d132      	bne.n	8006da0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d98:	0cdb      	lsrs	r3, r3, #19
 8006d9a:	04db      	lsls	r3, r3, #19
 8006d9c:	6113      	str	r3, [r2, #16]
 8006d9e:	e074      	b.n	8006e8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dba:	0cdb      	lsrs	r3, r3, #19
 8006dbc:	04db      	lsls	r3, r3, #19
 8006dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6959      	ldr	r1, [r3, #20]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	440b      	add	r3, r1
 8006dfc:	1e59      	subs	r1, r3, #1
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e06:	04d9      	lsls	r1, r3, #19
 8006e08:	4b9d      	ldr	r3, [pc, #628]	; (8007080 <USB_EPStartXfer+0x370>)
 8006e0a:	400b      	ands	r3, r1
 8006e0c:	69b9      	ldr	r1, [r7, #24]
 8006e0e:	0148      	lsls	r0, r1, #5
 8006e10:	69f9      	ldr	r1, [r7, #28]
 8006e12:	4401      	add	r1, r0
 8006e14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e32:	69b9      	ldr	r1, [r7, #24]
 8006e34:	0148      	lsls	r0, r1, #5
 8006e36:	69f9      	ldr	r1, [r7, #28]
 8006e38:	4401      	add	r1, r0
 8006e3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	78db      	ldrb	r3, [r3, #3]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d11f      	bne.n	8006e8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d14b      	bne.n	8006f28 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d009      	beq.n	8006eac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	78db      	ldrb	r3, [r3, #3]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d128      	bne.n	8006f06 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d110      	bne.n	8006ee6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	e00f      	b.n	8006f06 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e12f      	b.n	8007188 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	78db      	ldrb	r3, [r3, #3]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d015      	beq.n	8006f7c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8117 	beq.w	8007188 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f003 030f 	and.w	r3, r3, #15
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	69f9      	ldr	r1, [r7, #28]
 8006f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f76:	4313      	orrs	r3, r2
 8006f78:	634b      	str	r3, [r1, #52]	; 0x34
 8006f7a:	e105      	b.n	8007188 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d110      	bne.n	8006fae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	e00f      	b.n	8006fce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	68d9      	ldr	r1, [r3, #12]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	b298      	uxth	r0, r3
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 fa2b 	bl	800743e <USB_WritePacket>
 8006fe8:	e0ce      	b.n	8007188 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007004:	0cdb      	lsrs	r3, r3, #19
 8007006:	04db      	lsls	r3, r3, #19
 8007008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007024:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007028:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800702c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d126      	bne.n	8007084 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704c:	69b9      	ldr	r1, [r7, #24]
 800704e:	0148      	lsls	r0, r1, #5
 8007050:	69f9      	ldr	r1, [r7, #28]
 8007052:	4401      	add	r1, r0
 8007054:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007058:	4313      	orrs	r3, r2
 800705a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	440a      	add	r2, r1
 8007072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800707a:	6113      	str	r3, [r2, #16]
 800707c:	e036      	b.n	80070ec <USB_EPStartXfer+0x3dc>
 800707e:	bf00      	nop
 8007080:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	4413      	add	r3, r2
 800708e:	1e5a      	subs	r2, r3, #1
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	fbb2 f3f3 	udiv	r3, r2, r3
 8007098:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	8afb      	ldrh	r3, [r7, #22]
 80070aa:	04d9      	lsls	r1, r3, #19
 80070ac:	4b39      	ldr	r3, [pc, #228]	; (8007194 <USB_EPStartXfer+0x484>)
 80070ae:	400b      	ands	r3, r1
 80070b0:	69b9      	ldr	r1, [r7, #24]
 80070b2:	0148      	lsls	r0, r1, #5
 80070b4:	69f9      	ldr	r1, [r7, #28]
 80070b6:	4401      	add	r1, r0
 80070b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070bc:	4313      	orrs	r3, r2
 80070be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	8af9      	ldrh	r1, [r7, #22]
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	0148      	lsls	r0, r1, #5
 80070e0:	69f9      	ldr	r1, [r7, #28]
 80070e2:	4401      	add	r1, r0
 80070e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070e8:	4313      	orrs	r3, r2
 80070ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070ec:	79fb      	ldrb	r3, [r7, #7]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d10d      	bne.n	800710e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	68d9      	ldr	r1, [r3, #12]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	460a      	mov	r2, r1
 800710c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	78db      	ldrb	r3, [r3, #3]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d128      	bne.n	8007168 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007122:	2b00      	cmp	r3, #0
 8007124:	d110      	bne.n	8007148 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	440a      	add	r2, r1
 800713c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e00f      	b.n	8007168 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007166:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007182:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007186:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	1ff80000 	.word	0x1ff80000

08007198 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	f040 80cd 	bne.w	8007354 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d132      	bne.n	8007228 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007200:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007204:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	440a      	add	r2, r1
 800721c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007220:	0cdb      	lsrs	r3, r3, #19
 8007222:	04db      	lsls	r3, r3, #19
 8007224:	6113      	str	r3, [r2, #16]
 8007226:	e04e      	b.n	80072c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007242:	0cdb      	lsrs	r3, r3, #19
 8007244:	04db      	lsls	r3, r3, #19
 8007246:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007262:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007266:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800726a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	695a      	ldr	r2, [r3, #20]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	429a      	cmp	r2, r3
 8007276:	d903      	bls.n	8007280 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	0151      	lsls	r1, r2, #5
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	440a      	add	r2, r1
 8007296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	691a      	ldr	r2, [r3, #16]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b6:	6939      	ldr	r1, [r7, #16]
 80072b8:	0148      	lsls	r0, r1, #5
 80072ba:	6979      	ldr	r1, [r7, #20]
 80072bc:	4401      	add	r1, r0
 80072be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072c2:	4313      	orrs	r3, r2
 80072c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d11e      	bne.n	800730a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	461a      	mov	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	0151      	lsls	r1, r2, #5
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	440a      	add	r2, r1
 80072fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007302:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	e092      	b.n	8007430 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007328:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d07e      	beq.n	8007430 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	2101      	movs	r1, #1
 8007344:	fa01 f303 	lsl.w	r3, r1, r3
 8007348:	6979      	ldr	r1, [r7, #20]
 800734a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800734e:	4313      	orrs	r3, r2
 8007350:	634b      	str	r3, [r1, #52]	; 0x34
 8007352:	e06d      	b.n	8007430 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736e:	0cdb      	lsrs	r3, r3, #19
 8007370:	04db      	lsls	r3, r3, #19
 8007372:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007392:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007396:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	0151      	lsls	r1, r2, #5
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	440a      	add	r2, r1
 80073be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073de:	6939      	ldr	r1, [r7, #16]
 80073e0:	0148      	lsls	r0, r1, #5
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	4401      	add	r1, r0
 80073e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073ea:	4313      	orrs	r3, r2
 80073ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d10d      	bne.n	8007410 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d009      	beq.n	8007410 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	68d9      	ldr	r1, [r3, #12]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740c:	460a      	mov	r2, r1
 800740e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800742e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800743e:	b480      	push	{r7}
 8007440:	b089      	sub	sp, #36	; 0x24
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	4611      	mov	r1, r2
 800744a:	461a      	mov	r2, r3
 800744c:	460b      	mov	r3, r1
 800744e:	71fb      	strb	r3, [r7, #7]
 8007450:	4613      	mov	r3, r2
 8007452:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800745c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007460:	2b00      	cmp	r3, #0
 8007462:	d11a      	bne.n	800749a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007464:	88bb      	ldrh	r3, [r7, #4]
 8007466:	3303      	adds	r3, #3
 8007468:	089b      	lsrs	r3, r3, #2
 800746a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800746c:	2300      	movs	r3, #0
 800746e:	61bb      	str	r3, [r7, #24]
 8007470:	e00f      	b.n	8007492 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	031a      	lsls	r2, r3, #12
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747e:	461a      	mov	r2, r3
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3304      	adds	r3, #4
 800748a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	3301      	adds	r3, #1
 8007490:	61bb      	str	r3, [r7, #24]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	429a      	cmp	r2, r3
 8007498:	d3eb      	bcc.n	8007472 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3724      	adds	r7, #36	; 0x24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b089      	sub	sp, #36	; 0x24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	3303      	adds	r3, #3
 80074c2:	089b      	lsrs	r3, r3, #2
 80074c4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80074c6:	2300      	movs	r3, #0
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e00b      	b.n	80074e4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3304      	adds	r3, #4
 80074dc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	3301      	adds	r3, #1
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d3ef      	bcc.n	80074cc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80074ec:	69fb      	ldr	r3, [r7, #28]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3724      	adds	r7, #36	; 0x24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	785b      	ldrb	r3, [r3, #1]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d12c      	bne.n	8007570 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	db12      	blt.n	800754e <USB_EPSetStall+0x54>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00f      	beq.n	800754e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	440a      	add	r2, r1
 8007544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007548:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800754c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	0151      	lsls	r1, r2, #5
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	440a      	add	r2, r1
 8007564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e02b      	b.n	80075c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	db12      	blt.n	80075a8 <USB_EPSetStall+0xae>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00f      	beq.n	80075a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b085      	sub	sp, #20
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d128      	bne.n	8007644 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007610:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	78db      	ldrb	r3, [r3, #3]
 8007616:	2b03      	cmp	r3, #3
 8007618:	d003      	beq.n	8007622 <USB_EPClearStall+0x4c>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	78db      	ldrb	r3, [r3, #3]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d138      	bne.n	8007694 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e027      	b.n	8007694 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800765e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007662:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	78db      	ldrb	r3, [r3, #3]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d003      	beq.n	8007674 <USB_EPClearStall+0x9e>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	78db      	ldrb	r3, [r3, #3]
 8007670:	2b02      	cmp	r3, #2
 8007672:	d10f      	bne.n	8007694 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	440a      	add	r2, r1
 800768a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007692:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076dc:	4313      	orrs	r3, r2
 80076de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007708:	f023 0303 	bic.w	r3, r3, #3
 800770c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800771c:	f023 0302 	bic.w	r3, r3, #2
 8007720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800774a:	f023 0303 	bic.w	r3, r3, #3
 800774e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800775e:	f043 0302 	orr.w	r3, r3, #2
 8007762:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007772:	b480      	push	{r7}
 8007774:	b085      	sub	sp, #20
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4013      	ands	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800778a:	68fb      	ldr	r3, [r7, #12]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	4013      	ands	r3, r2
 80077ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	0c1b      	lsrs	r3, r3, #16
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4013      	ands	r3, r2
 80077ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	b29b      	uxth	r3, r3
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	4013      	ands	r3, r2
 800782c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800782e:	68bb      	ldr	r3, [r7, #8]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
 800786c:	01db      	lsls	r3, r3, #7
 800786e:	b2db      	uxtb	r3, r3
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	4313      	orrs	r3, r2
 8007874:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4013      	ands	r3, r2
 8007888:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800788a:	68bb      	ldr	r3, [r7, #8]
}
 800788c:	4618      	mov	r0, r3
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	f003 0301 	and.w	r3, r3, #1
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	460b      	mov	r3, r1
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	333c      	adds	r3, #60	; 0x3c
 8007912:	3304      	adds	r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	4a26      	ldr	r2, [pc, #152]	; (80079b4 <USB_EP0_OutStart+0xb8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d90a      	bls.n	8007936 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800792c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007930:	d101      	bne.n	8007936 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e037      	b.n	80079a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793c:	461a      	mov	r2, r3
 800793e:	2300      	movs	r3, #0
 8007940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007964:	f043 0318 	orr.w	r3, r3, #24
 8007968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007978:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800797c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10f      	bne.n	80079a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	461a      	mov	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80079a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	4f54300a 	.word	0x4f54300a

080079b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4a13      	ldr	r2, [pc, #76]	; (8007a1c <USB_CoreReset+0x64>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e01b      	b.n	8007a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	daf2      	bge.n	80079c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f043 0201 	orr.w	r2, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3301      	adds	r3, #1
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <USB_CoreReset+0x64>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d901      	bls.n	8007a00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e006      	b.n	8007a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d0f0      	beq.n	80079ee <USB_CoreReset+0x36>

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	00030d40 	.word	0x00030d40

08007a20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a30:	f002 f940 	bl	8009cb4 <malloc>
 8007a34:	4603      	mov	r3, r0
 8007a36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007a46:	2302      	movs	r3, #2
 8007a48:	e066      	b.n	8007b18 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7c1b      	ldrb	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d119      	bne.n	8007a8e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a5e:	2202      	movs	r2, #2
 8007a60:	2181      	movs	r1, #129	; 0x81
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 ffad 	bl	80099c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a72:	2202      	movs	r2, #2
 8007a74:	2101      	movs	r1, #1
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 ffa3 	bl	80099c2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2210      	movs	r2, #16
 8007a88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007a8c:	e016      	b.n	8007abc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a8e:	2340      	movs	r3, #64	; 0x40
 8007a90:	2202      	movs	r2, #2
 8007a92:	2181      	movs	r1, #129	; 0x81
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 ff94 	bl	80099c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007aa0:	2340      	movs	r3, #64	; 0x40
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 ff8b 	bl	80099c2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007abc:	2308      	movs	r3, #8
 8007abe:	2203      	movs	r2, #3
 8007ac0:	2182      	movs	r1, #130	; 0x82
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 ff7d 	bl	80099c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7c1b      	ldrb	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007afc:	2101      	movs	r1, #1
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f002 f84e 	bl	8009ba0 <USBD_LL_PrepareReceive>
 8007b04:	e007      	b.n	8007b16 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	2101      	movs	r1, #1
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f002 f845 	bl	8009ba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b30:	2181      	movs	r1, #129	; 0x81
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 ff6b 	bl	8009a0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b3e:	2101      	movs	r1, #1
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 ff64 	bl	8009a0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b4e:	2182      	movs	r1, #130	; 0x82
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 ff5c 	bl	8009a0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00e      	beq.n	8007b8e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b80:	4618      	mov	r0, r3
 8007b82:	f002 f89f 	bl	8009cc4 <free>
    pdev->pClassData = NULL;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d03a      	beq.n	8007c38 <USBD_CDC_Setup+0xa0>
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	f040 8097 	bne.w	8007cf6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	88db      	ldrh	r3, [r3, #6]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d029      	beq.n	8007c24 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	b25b      	sxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	da11      	bge.n	8007bfe <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007be6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	88d2      	ldrh	r2, [r2, #6]
 8007bec:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007bee:	6939      	ldr	r1, [r7, #16]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	88db      	ldrh	r3, [r3, #6]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 fa9d 	bl	8009136 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007bfc:	e082      	b.n	8007d04 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	785a      	ldrb	r2, [r3, #1]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	88db      	ldrh	r3, [r3, #6]
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007c14:	6939      	ldr	r1, [r7, #16]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	88db      	ldrh	r3, [r3, #6]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fab6 	bl	800918e <USBD_CtlPrepareRx>
    break;
 8007c22:	e06f      	b.n	8007d04 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	7850      	ldrb	r0, [r2, #1]
 8007c30:	2200      	movs	r2, #0
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	4798      	blx	r3
    break;
 8007c36:	e065      	b.n	8007d04 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	2b0b      	cmp	r3, #11
 8007c3e:	d84f      	bhi.n	8007ce0 <USBD_CDC_Setup+0x148>
 8007c40:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <USBD_CDC_Setup+0xb0>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c79 	.word	0x08007c79
 8007c4c:	08007cef 	.word	0x08007cef
 8007c50:	08007ce1 	.word	0x08007ce1
 8007c54:	08007ce1 	.word	0x08007ce1
 8007c58:	08007ce1 	.word	0x08007ce1
 8007c5c:	08007ce1 	.word	0x08007ce1
 8007c60:	08007ce1 	.word	0x08007ce1
 8007c64:	08007ce1 	.word	0x08007ce1
 8007c68:	08007ce1 	.word	0x08007ce1
 8007c6c:	08007ce1 	.word	0x08007ce1
 8007c70:	08007ca1 	.word	0x08007ca1
 8007c74:	08007cc9 	.word	0x08007cc9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d107      	bne.n	8007c92 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c82:	f107 030c 	add.w	r3, r7, #12
 8007c86:	2202      	movs	r2, #2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fa53 	bl	8009136 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007c90:	e030      	b.n	8007cf4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 f9dd 	bl	8009054 <USBD_CtlError>
        ret = USBD_FAIL;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9e:	e029      	b.n	8007cf4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d107      	bne.n	8007cba <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007caa:	f107 030f 	add.w	r3, r7, #15
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fa3f 	bl	8009136 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007cb8:	e01c      	b.n	8007cf4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f9c9 	bl	8009054 <USBD_CtlError>
        ret = USBD_FAIL;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc6:	e015      	b.n	8007cf4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d00f      	beq.n	8007cf2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 f9bd 	bl	8009054 <USBD_CtlError>
        ret = USBD_FAIL;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007cde:	e008      	b.n	8007cf2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 f9b6 	bl	8009054 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	e002      	b.n	8007cf4 <USBD_CDC_Setup+0x15c>
      break;
 8007cee:	bf00      	nop
 8007cf0:	e008      	b.n	8007d04 <USBD_CDC_Setup+0x16c>
      break;
 8007cf2:	bf00      	nop
    }
    break;
 8007cf4:	e006      	b.n	8007d04 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 f9ab 	bl	8009054 <USBD_CtlError>
    ret = USBD_FAIL;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	75fb      	strb	r3, [r7, #23]
    break;
 8007d02:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop

08007d10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e049      	b.n	8007dc6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	3318      	adds	r3, #24
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d029      	beq.n	8007da4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d50:	78fa      	ldrb	r2, [r7, #3]
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	3318      	adds	r3, #24
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	78f9      	ldrb	r1, [r7, #3]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	460b      	mov	r3, r1
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	1a5b      	subs	r3, r3, r1
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4403      	add	r3, r0
 8007d70:	3344      	adds	r3, #68	; 0x44
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d78:	fb03 f301 	mul.w	r3, r3, r1
 8007d7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d110      	bne.n	8007da4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	3318      	adds	r3, #24
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d96:	78f9      	ldrb	r1, [r7, #3]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 fede 	bl	8009b5e <USBD_LL_Transmit>
 8007da2:	e00f      	b.n	8007dc4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e015      	b.n	8007e1c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 fef4 	bl	8009be2 <USBD_LL_GetRxDataSize>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e16:	4611      	mov	r1, r2
 8007e18:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d015      	beq.n	8007e6a <USBD_CDC_EP0_RxReady+0x46>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e44:	2bff      	cmp	r3, #255	; 0xff
 8007e46:	d010      	beq.n	8007e6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007e56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e5e:	b292      	uxth	r2, r2
 8007e60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	22ff      	movs	r2, #255	; 0xff
 8007e66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2243      	movs	r2, #67	; 0x43
 8007e80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007e82:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	20000094 	.word	0x20000094

08007e94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2243      	movs	r2, #67	; 0x43
 8007ea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007ea2:	4b03      	ldr	r3, [pc, #12]	; (8007eb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	20000050 	.word	0x20000050

08007eb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2243      	movs	r2, #67	; 0x43
 8007ec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007ec2:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	200000d8 	.word	0x200000d8

08007ed4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	220a      	movs	r2, #10
 8007ee0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ee2:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	2000000c 	.word	0x2000000c

08007ef4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e004      	b.n	8007f12 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f30:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f60:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f86:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e01a      	b.n	8007fd0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d114      	bne.n	8007fce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007fc2:	2181      	movs	r1, #129	; 0x81
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fdca 	bl	8009b5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e016      	b.n	8008024 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7c1b      	ldrb	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d109      	bne.n	8008012 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008008:	2101      	movs	r1, #1
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fdc8 	bl	8009ba0 <USBD_LL_PrepareReceive>
 8008010:	e007      	b.n	8008022 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008018:	2340      	movs	r3, #64	; 0x40
 800801a:	2101      	movs	r1, #1
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 fdbf 	bl	8009ba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	4613      	mov	r3, r2
 8008038:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008040:	2303      	movs	r3, #3
 8008042:	e025      	b.n	8008090 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	79fa      	ldrb	r2, [r7, #7]
 8008082:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f001 fc35 	bl	80098f4 <USBD_LL_Init>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e010      	b.n	80080d2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	f107 020e 	add.w	r2, r7, #14
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	4602      	mov	r2, r0
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 fc52 	bl	800998c <USBD_LL_Start>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	4611      	mov	r1, r2
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	4798      	blx	r3
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d007      	beq.n	8008166 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	78fa      	ldrb	r2, [r7, #3]
 8008160:	4611      	mov	r1, r2
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	4798      	blx	r3
  }

  return USBD_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 ff2c 	bl	8008fe0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008196:	461a      	mov	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d00e      	beq.n	80081ca <USBD_LL_SetupStage+0x5a>
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d302      	bcc.n	80081b6 <USBD_LL_SetupStage+0x46>
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d014      	beq.n	80081de <USBD_LL_SetupStage+0x6e>
 80081b4:	e01d      	b.n	80081f2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa18 	bl	80085f4 <USBD_StdDevReq>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]
      break;
 80081c8:	e020      	b.n	800820c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa7c 	bl	80086d0 <USBD_StdItfReq>
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
      break;
 80081dc:	e016      	b.n	800820c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fab8 	bl	800875c <USBD_StdEPReq>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
      break;
 80081f0:	e00c      	b.n	800820c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 fc23 	bl	8009a4c <USBD_LL_StallEP>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
      break;
 800820a:	bf00      	nop
  }

  return ret;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b086      	sub	sp, #24
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	460b      	mov	r3, r1
 8008220:	607a      	str	r2, [r7, #4]
 8008222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008224:	7afb      	ldrb	r3, [r7, #11]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d137      	bne.n	800829a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008230:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008238:	2b03      	cmp	r3, #3
 800823a:	d14a      	bne.n	80082d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d913      	bls.n	8008270 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	1ad2      	subs	r2, r2, r3
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	4293      	cmp	r3, r2
 8008260:	bf28      	it	cs
 8008262:	4613      	movcs	r3, r2
 8008264:	461a      	mov	r2, r3
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 ffad 	bl	80091c8 <USBD_CtlContinueRx>
 800826e:	e030      	b.n	80082d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008282:	2b03      	cmp	r3, #3
 8008284:	d105      	bne.n	8008292 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 ffa9 	bl	80091ea <USBD_CtlSendStatus>
 8008298:	e01b      	b.n	80082d2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d013      	beq.n	80082ce <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d10e      	bne.n	80082ce <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	7afa      	ldrb	r2, [r7, #11]
 80082ba:	4611      	mov	r1, r2
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	4798      	blx	r3
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	e002      	b.n	80082d4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e000      	b.n	80082d4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	460b      	mov	r3, r1
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d16a      	bne.n	80083c6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3314      	adds	r3, #20
 80082f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d155      	bne.n	80083ac <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	429a      	cmp	r2, r3
 800830a:	d914      	bls.n	8008336 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	461a      	mov	r2, r3
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 ff22 	bl	800916c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008328:	2300      	movs	r3, #0
 800832a:	2200      	movs	r2, #0
 800832c:	2100      	movs	r1, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f001 fc36 	bl	8009ba0 <USBD_LL_PrepareReceive>
 8008334:	e03a      	b.n	80083ac <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	429a      	cmp	r2, r3
 8008340:	d11c      	bne.n	800837c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800834a:	429a      	cmp	r2, r3
 800834c:	d316      	bcc.n	800837c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008358:	429a      	cmp	r2, r3
 800835a:	d20f      	bcs.n	800837c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800835c:	2200      	movs	r2, #0
 800835e:	2100      	movs	r1, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 ff03 	bl	800916c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800836e:	2300      	movs	r3, #0
 8008370:	2200      	movs	r2, #0
 8008372:	2100      	movs	r1, #0
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f001 fc13 	bl	8009ba0 <USBD_LL_PrepareReceive>
 800837a:	e017      	b.n	80083ac <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800838e:	2b03      	cmp	r3, #3
 8008390:	d105      	bne.n	800839e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800839e:	2180      	movs	r1, #128	; 0x80
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f001 fb53 	bl	8009a4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 ff32 	bl	8009210 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d123      	bne.n	80083fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f7ff fe9b 	bl	80080f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083c4:	e01b      	b.n	80083fe <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d013      	beq.n	80083fa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d10e      	bne.n	80083fa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	7afa      	ldrb	r2, [r7, #11]
 80083e6:	4611      	mov	r1, r2
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	4798      	blx	r3
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	e002      	b.n	8008400 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e000      	b.n	8008400 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008434:	2b00      	cmp	r3, #0
 8008436:	d009      	beq.n	800844c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6852      	ldr	r2, [r2, #4]
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	4611      	mov	r1, r2
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800844c:	2340      	movs	r3, #64	; 0x40
 800844e:	2200      	movs	r2, #0
 8008450:	2100      	movs	r1, #0
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 fab5 	bl	80099c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2240      	movs	r2, #64	; 0x40
 8008464:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	2200      	movs	r2, #0
 800846c:	2180      	movs	r1, #128	; 0x80
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 faa7 	bl	80099c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2240      	movs	r2, #64	; 0x40
 800847e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2204      	movs	r2, #4
 80084c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d105      	bne.n	80084f2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850e:	2b03      	cmp	r3, #3
 8008510:	d10b      	bne.n	800852a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008594:	2b00      	cmp	r3, #0
 8008596:	d009      	beq.n	80085ac <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6852      	ldr	r2, [r2, #4]
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	4611      	mov	r1, r2
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
  }

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b087      	sub	sp, #28
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	3301      	adds	r3, #1
 80085cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085d4:	8a3b      	ldrh	r3, [r7, #16]
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	b21a      	sxth	r2, r3
 80085da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085de:	4313      	orrs	r3, r2
 80085e0:	b21b      	sxth	r3, r3
 80085e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085e4:	89fb      	ldrh	r3, [r7, #14]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
	...

080085f4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800860a:	2b20      	cmp	r3, #32
 800860c:	d004      	beq.n	8008618 <USBD_StdDevReq+0x24>
 800860e:	2b40      	cmp	r3, #64	; 0x40
 8008610:	d002      	beq.n	8008618 <USBD_StdDevReq+0x24>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <USBD_StdDevReq+0x38>
 8008616:	e050      	b.n	80086ba <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]
    break;
 800862a:	e04b      	b.n	80086c4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	2b09      	cmp	r3, #9
 8008632:	d83c      	bhi.n	80086ae <USBD_StdDevReq+0xba>
 8008634:	a201      	add	r2, pc, #4	; (adr r2, 800863c <USBD_StdDevReq+0x48>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	08008691 	.word	0x08008691
 8008640:	080086a5 	.word	0x080086a5
 8008644:	080086af 	.word	0x080086af
 8008648:	0800869b 	.word	0x0800869b
 800864c:	080086af 	.word	0x080086af
 8008650:	0800866f 	.word	0x0800866f
 8008654:	08008665 	.word	0x08008665
 8008658:	080086af 	.word	0x080086af
 800865c:	08008687 	.word	0x08008687
 8008660:	08008679 	.word	0x08008679
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f9ce 	bl	8008a08 <USBD_GetDescriptor>
      break;
 800866c:	e024      	b.n	80086b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fb33 	bl	8008cdc <USBD_SetAddress>
      break;
 8008676:	e01f      	b.n	80086b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fb70 	bl	8008d60 <USBD_SetConfig>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
      break;
 8008684:	e018      	b.n	80086b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fc0d 	bl	8008ea8 <USBD_GetConfig>
      break;
 800868e:	e013      	b.n	80086b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fc3c 	bl	8008f10 <USBD_GetStatus>
      break;
 8008698:	e00e      	b.n	80086b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fc6a 	bl	8008f76 <USBD_SetFeature>
      break;
 80086a2:	e009      	b.n	80086b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc79 	bl	8008f9e <USBD_ClrFeature>
      break;
 80086ac:	e004      	b.n	80086b8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fccf 	bl	8009054 <USBD_CtlError>
      break;
 80086b6:	bf00      	nop
    }
    break;
 80086b8:	e004      	b.n	80086c4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fcc9 	bl	8009054 <USBD_CtlError>
    break;
 80086c2:	bf00      	nop
  }

  return ret;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop

080086d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d003      	beq.n	80086f2 <USBD_StdItfReq+0x22>
 80086ea:	2b40      	cmp	r3, #64	; 0x40
 80086ec:	d001      	beq.n	80086f2 <USBD_StdItfReq+0x22>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d12a      	bne.n	8008748 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f8:	3b01      	subs	r3, #1
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d81d      	bhi.n	800873a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	889b      	ldrh	r3, [r3, #4]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	d813      	bhi.n	8008730 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
 8008716:	4603      	mov	r3, r0
 8008718:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	88db      	ldrh	r3, [r3, #6]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d110      	bne.n	8008744 <USBD_StdItfReq+0x74>
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10d      	bne.n	8008744 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fd5e 	bl	80091ea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800872e:	e009      	b.n	8008744 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fc8e 	bl	8009054 <USBD_CtlError>
      break;
 8008738:	e004      	b.n	8008744 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fc89 	bl	8009054 <USBD_CtlError>
      break;
 8008742:	e000      	b.n	8008746 <USBD_StdItfReq+0x76>
      break;
 8008744:	bf00      	nop
    }
    break;
 8008746:	e004      	b.n	8008752 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fc82 	bl	8009054 <USBD_CtlError>
    break;
 8008750:	bf00      	nop
  }

  return ret;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008778:	2b20      	cmp	r3, #32
 800877a:	d004      	beq.n	8008786 <USBD_StdEPReq+0x2a>
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	d002      	beq.n	8008786 <USBD_StdEPReq+0x2a>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <USBD_StdEPReq+0x3e>
 8008784:	e135      	b.n	80089f2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	4798      	blx	r3
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
    break;
 8008798:	e130      	b.n	80089fc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d03e      	beq.n	8008820 <USBD_StdEPReq+0xc4>
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d002      	beq.n	80087ac <USBD_StdEPReq+0x50>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d077      	beq.n	800889a <USBD_StdEPReq+0x13e>
 80087aa:	e11c      	b.n	80089e6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d002      	beq.n	80087bc <USBD_StdEPReq+0x60>
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d015      	beq.n	80087e6 <USBD_StdEPReq+0x8a>
 80087ba:	e02b      	b.n	8008814 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <USBD_StdEPReq+0x80>
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b80      	cmp	r3, #128	; 0x80
 80087c6:	d009      	beq.n	80087dc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f93d 	bl	8009a4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087d2:	2180      	movs	r1, #128	; 0x80
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 f939 	bl	8009a4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80087da:	e020      	b.n	800881e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fc38 	bl	8009054 <USBD_CtlError>
        break;
 80087e4:	e01b      	b.n	800881e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	885b      	ldrh	r3, [r3, #2]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10e      	bne.n	800880c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <USBD_StdEPReq+0xb0>
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	2b80      	cmp	r3, #128	; 0x80
 80087f8:	d008      	beq.n	800880c <USBD_StdEPReq+0xb0>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	88db      	ldrh	r3, [r3, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d104      	bne.n	800880c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 f920 	bl	8009a4c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fcec 	bl	80091ea <USBD_CtlSendStatus>

        break;
 8008812:	e004      	b.n	800881e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fc1c 	bl	8009054 <USBD_CtlError>
        break;
 800881c:	bf00      	nop
      }
      break;
 800881e:	e0e7      	b.n	80089f0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008826:	2b02      	cmp	r3, #2
 8008828:	d002      	beq.n	8008830 <USBD_StdEPReq+0xd4>
 800882a:	2b03      	cmp	r3, #3
 800882c:	d015      	beq.n	800885a <USBD_StdEPReq+0xfe>
 800882e:	e02d      	b.n	800888c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00c      	beq.n	8008850 <USBD_StdEPReq+0xf4>
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b80      	cmp	r3, #128	; 0x80
 800883a:	d009      	beq.n	8008850 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 f903 	bl	8009a4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008846:	2180      	movs	r1, #128	; 0x80
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f001 f8ff 	bl	8009a4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800884e:	e023      	b.n	8008898 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fbfe 	bl	8009054 <USBD_CtlError>
        break;
 8008858:	e01e      	b.n	8008898 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	885b      	ldrh	r3, [r3, #2]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d119      	bne.n	8008896 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008868:	2b00      	cmp	r3, #0
 800886a:	d004      	beq.n	8008876 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 f90a 	bl	8009a8a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fcb7 	bl	80091ea <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
        }
        break;
 800888a:	e004      	b.n	8008896 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fbe0 	bl	8009054 <USBD_CtlError>
        break;
 8008894:	e000      	b.n	8008898 <USBD_StdEPReq+0x13c>
        break;
 8008896:	bf00      	nop
      }
      break;
 8008898:	e0aa      	b.n	80089f0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d002      	beq.n	80088aa <USBD_StdEPReq+0x14e>
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d032      	beq.n	800890e <USBD_StdEPReq+0x1b2>
 80088a8:	e097      	b.n	80089da <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d007      	beq.n	80088c0 <USBD_StdEPReq+0x164>
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d004      	beq.n	80088c0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fbcb 	bl	8009054 <USBD_CtlError>
          break;
 80088be:	e091      	b.n	80089e4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da0b      	bge.n	80088e0 <USBD_StdEPReq+0x184>
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	3310      	adds	r3, #16
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	3304      	adds	r3, #4
 80088de:	e00b      	b.n	80088f8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	4413      	add	r3, r2
 80088f6:	3304      	adds	r3, #4
 80088f8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2202      	movs	r2, #2
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fc15 	bl	8009136 <USBD_CtlSendData>
        break;
 800890c:	e06a      	b.n	80089e4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800890e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	da11      	bge.n	800893a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	f003 020f 	and.w	r2, r3, #15
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	3324      	adds	r3, #36	; 0x24
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d117      	bne.n	8008960 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fb8e 	bl	8009054 <USBD_CtlError>
            break;
 8008938:	e054      	b.n	80089e4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	f003 020f 	and.w	r2, r3, #15
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fb7b 	bl	8009054 <USBD_CtlError>
            break;
 800895e:	e041      	b.n	80089e4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008964:	2b00      	cmp	r3, #0
 8008966:	da0b      	bge.n	8008980 <USBD_StdEPReq+0x224>
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	3310      	adds	r3, #16
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	4413      	add	r3, r2
 800897c:	3304      	adds	r3, #4
 800897e:	e00b      	b.n	8008998 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	4413      	add	r3, r2
 8008996:	3304      	adds	r3, #4
 8008998:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <USBD_StdEPReq+0x24a>
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	2b80      	cmp	r3, #128	; 0x80
 80089a4:	d103      	bne.n	80089ae <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	e00e      	b.n	80089cc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 f888 	bl	8009ac8 <USBD_LL_IsStallEP>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e002      	b.n	80089cc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2202      	movs	r2, #2
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fbaf 	bl	8009136 <USBD_CtlSendData>
          break;
 80089d8:	e004      	b.n	80089e4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fb39 	bl	8009054 <USBD_CtlError>
        break;
 80089e2:	bf00      	nop
      }
      break;
 80089e4:	e004      	b.n	80089f0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fb33 	bl	8009054 <USBD_CtlError>
      break;
 80089ee:	bf00      	nop
    }
    break;
 80089f0:	e004      	b.n	80089fc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fb2d 	bl	8009054 <USBD_CtlError>
    break;
 80089fa:	bf00      	nop
  }

  return ret;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	885b      	ldrh	r3, [r3, #2]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	2b06      	cmp	r3, #6
 8008a2a:	f200 8128 	bhi.w	8008c7e <USBD_GetDescriptor+0x276>
 8008a2e:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <USBD_GetDescriptor+0x2c>)
 8008a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a69 	.word	0x08008a69
 8008a3c:	08008aa9 	.word	0x08008aa9
 8008a40:	08008c7f 	.word	0x08008c7f
 8008a44:	08008c7f 	.word	0x08008c7f
 8008a48:	08008c1f 	.word	0x08008c1f
 8008a4c:	08008c4b 	.word	0x08008c4b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7c12      	ldrb	r2, [r2, #16]
 8008a5c:	f107 0108 	add.w	r1, r7, #8
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	60f8      	str	r0, [r7, #12]
    break;
 8008a66:	e112      	b.n	8008c8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7c1b      	ldrb	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10d      	bne.n	8008a8c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f107 0208 	add.w	r2, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3301      	adds	r3, #1
 8008a86:	2202      	movs	r2, #2
 8008a88:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008a8a:	e100      	b.n	8008c8e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	f107 0208 	add.w	r2, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	701a      	strb	r2, [r3, #0]
    break;
 8008aa6:	e0f2      	b.n	8008c8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	885b      	ldrh	r3, [r3, #2]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b05      	cmp	r3, #5
 8008ab0:	f200 80ac 	bhi.w	8008c0c <USBD_GetDescriptor+0x204>
 8008ab4:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <USBD_GetDescriptor+0xb4>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008ad5 	.word	0x08008ad5
 8008ac0:	08008b09 	.word	0x08008b09
 8008ac4:	08008b3d 	.word	0x08008b3d
 8008ac8:	08008b71 	.word	0x08008b71
 8008acc:	08008ba5 	.word	0x08008ba5
 8008ad0:	08008bd9 	.word	0x08008bd9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008af6:	e091      	b.n	8008c1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 faaa 	bl	8009054 <USBD_CtlError>
        err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
      break;
 8008b06:	e089      	b.n	8008c1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 0108 	add.w	r1, r7, #8
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b2a:	e077      	b.n	8008c1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa90 	bl	8009054 <USBD_CtlError>
        err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
      break;
 8008b3a:	e06f      	b.n	8008c1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7c12      	ldrb	r2, [r2, #16]
 8008b54:	f107 0108 	add.w	r1, r7, #8
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b5e:	e05d      	b.n	8008c1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa76 	bl	8009054 <USBD_CtlError>
        err++;
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b6e:	e055      	b.n	8008c1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	7c12      	ldrb	r2, [r2, #16]
 8008b88:	f107 0108 	add.w	r1, r7, #8
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b92:	e043      	b.n	8008c1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa5c 	bl	8009054 <USBD_CtlError>
        err++;
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ba2:	e03b      	b.n	8008c1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	7c12      	ldrb	r2, [r2, #16]
 8008bbc:	f107 0108 	add.w	r1, r7, #8
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4798      	blx	r3
 8008bc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bc6:	e029      	b.n	8008c1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa42 	bl	8009054 <USBD_CtlError>
        err++;
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8008bd6:	e021      	b.n	8008c1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	7c12      	ldrb	r2, [r2, #16]
 8008bf0:	f107 0108 	add.w	r1, r7, #8
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bfa:	e00f      	b.n	8008c1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa28 	bl	8009054 <USBD_CtlError>
        err++;
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	3301      	adds	r3, #1
 8008c08:	72fb      	strb	r3, [r7, #11]
      break;
 8008c0a:	e007      	b.n	8008c1c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fa20 	bl	8009054 <USBD_CtlError>
      err++;
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	3301      	adds	r3, #1
 8008c18:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008c1a:	bf00      	nop
    }
    break;
 8008c1c:	e037      	b.n	8008c8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7c1b      	ldrb	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d109      	bne.n	8008c3a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	f107 0208 	add.w	r2, r7, #8
 8008c32:	4610      	mov	r0, r2
 8008c34:	4798      	blx	r3
 8008c36:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c38:	e029      	b.n	8008c8e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fa09 	bl	8009054 <USBD_CtlError>
      err++;
 8008c42:	7afb      	ldrb	r3, [r7, #11]
 8008c44:	3301      	adds	r3, #1
 8008c46:	72fb      	strb	r3, [r7, #11]
    break;
 8008c48:	e021      	b.n	8008c8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	7c1b      	ldrb	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10d      	bne.n	8008c6e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f107 0208 	add.w	r2, r7, #8
 8008c5e:	4610      	mov	r0, r2
 8008c60:	4798      	blx	r3
 8008c62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	2207      	movs	r2, #7
 8008c6a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c6c:	e00f      	b.n	8008c8e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f9ef 	bl	8009054 <USBD_CtlError>
      err++;
 8008c76:	7afb      	ldrb	r3, [r7, #11]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	72fb      	strb	r3, [r7, #11]
    break;
 8008c7c:	e007      	b.n	8008c8e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9e7 	bl	8009054 <USBD_CtlError>
    err++;
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	72fb      	strb	r3, [r7, #11]
    break;
 8008c8c:	bf00      	nop
  }

  if (err != 0U)
 8008c8e:	7afb      	ldrb	r3, [r7, #11]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11e      	bne.n	8008cd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	88db      	ldrh	r3, [r3, #6]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d016      	beq.n	8008cca <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008c9c:	893b      	ldrh	r3, [r7, #8]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00e      	beq.n	8008cc0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	88da      	ldrh	r2, [r3, #6]
 8008ca6:	893b      	ldrh	r3, [r7, #8]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	bf28      	it	cs
 8008cac:	4613      	movcs	r3, r2
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cb2:	893b      	ldrh	r3, [r7, #8]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fa3c 	bl	8009136 <USBD_CtlSendData>
 8008cbe:	e009      	b.n	8008cd4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f9c6 	bl	8009054 <USBD_CtlError>
 8008cc8:	e004      	b.n	8008cd4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa8d 	bl	80091ea <USBD_CtlSendStatus>
 8008cd0:	e000      	b.n	8008cd4 <USBD_GetDescriptor+0x2cc>
    return;
 8008cd2:	bf00      	nop
    }
  }
}
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop

08008cdc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	889b      	ldrh	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d130      	bne.n	8008d50 <USBD_SetAddress+0x74>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	88db      	ldrh	r3, [r3, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d12c      	bne.n	8008d50 <USBD_SetAddress+0x74>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	885b      	ldrh	r3, [r3, #2]
 8008cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8008cfc:	d828      	bhi.n	8008d50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d104      	bne.n	8008d1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f99c 	bl	8009054 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d1c:	e01c      	b.n	8008d58 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fef8 	bl	8009b20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fa5a 	bl	80091ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d44:	e008      	b.n	8008d58 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4e:	e003      	b.n	8008d58 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f97e 	bl	8009054 <USBD_CtlError>
  }
}
 8008d58:	bf00      	nop
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	885b      	ldrh	r3, [r3, #2]
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	4b4b      	ldr	r3, [pc, #300]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008d76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d78:	4b4a      	ldr	r3, [pc, #296]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d905      	bls.n	8008d8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f966 	bl	8009054 <USBD_CtlError>
    return USBD_FAIL;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e087      	b.n	8008e9c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d002      	beq.n	8008d9c <USBD_SetConfig+0x3c>
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d025      	beq.n	8008de6 <USBD_SetConfig+0x86>
 8008d9a:	e071      	b.n	8008e80 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008d9c:	4b41      	ldr	r3, [pc, #260]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01c      	beq.n	8008dde <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008da4:	4b3f      	ldr	r3, [pc, #252]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dae:	4b3d      	ldr	r3, [pc, #244]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff f9a7 	bl	8008108 <USBD_SetClassConfig>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d004      	beq.n	8008dce <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f944 	bl	8009054 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008dcc:	e065      	b.n	8008e9a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa0b 	bl	80091ea <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2203      	movs	r2, #3
 8008dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ddc:	e05d      	b.n	8008e9a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa03 	bl	80091ea <USBD_CtlSendStatus>
    break;
 8008de4:	e059      	b.n	8008e9a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008de6:	4b2f      	ldr	r3, [pc, #188]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d112      	bne.n	8008e14 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2202      	movs	r2, #2
 8008df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008df6:	4b2b      	ldr	r3, [pc, #172]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e00:	4b28      	ldr	r3, [pc, #160]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff f99a 	bl	8008140 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9ec 	bl	80091ea <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008e12:	e042      	b.n	8008e9a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008e14:	4b23      	ldr	r3, [pc, #140]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d02a      	beq.n	8008e78 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff f988 	bl	8008140 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008e30:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff f961 	bl	8008108 <USBD_SetClassConfig>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00f      	beq.n	8008e70 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f8fe 	bl	8009054 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff f96d 	bl	8008140 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2202      	movs	r2, #2
 8008e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008e6e:	e014      	b.n	8008e9a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f9ba 	bl	80091ea <USBD_CtlSendStatus>
    break;
 8008e76:	e010      	b.n	8008e9a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f9b6 	bl	80091ea <USBD_CtlSendStatus>
    break;
 8008e7e:	e00c      	b.n	8008e9a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f8e6 	bl	8009054 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e88:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <USBD_SetConfig+0x144>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff f956 	bl	8008140 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008e94:	2303      	movs	r3, #3
 8008e96:	73fb      	strb	r3, [r7, #15]
    break;
 8008e98:	bf00      	nop
  }

  return ret;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	200003a4 	.word	0x200003a4

08008ea8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	88db      	ldrh	r3, [r3, #6]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d004      	beq.n	8008ec4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f8c9 	bl	8009054 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008ec2:	e021      	b.n	8008f08 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	db17      	blt.n	8008efe <USBD_GetConfig+0x56>
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	dd02      	ble.n	8008ed8 <USBD_GetConfig+0x30>
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d00b      	beq.n	8008eee <USBD_GetConfig+0x46>
 8008ed6:	e012      	b.n	8008efe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f925 	bl	8009136 <USBD_CtlSendData>
      break;
 8008eec:	e00c      	b.n	8008f08 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f91d 	bl	8009136 <USBD_CtlSendData>
      break;
 8008efc:	e004      	b.n	8008f08 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f8a7 	bl	8009054 <USBD_CtlError>
      break;
 8008f06:	bf00      	nop
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f20:	3b01      	subs	r3, #1
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d81e      	bhi.n	8008f64 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	88db      	ldrh	r3, [r3, #6]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d004      	beq.n	8008f38 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f88f 	bl	8009054 <USBD_CtlError>
      break;
 8008f36:	e01a      	b.n	8008f6e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f043 0202 	orr.w	r2, r3, #2
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	330c      	adds	r3, #12
 8008f58:	2202      	movs	r2, #2
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f8ea 	bl	8009136 <USBD_CtlSendData>
    break;
 8008f62:	e004      	b.n	8008f6e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f874 	bl	8009054 <USBD_CtlError>
    break;
 8008f6c:	bf00      	nop
  }
}
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	885b      	ldrh	r3, [r3, #2]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d106      	bne.n	8008f96 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f92a 	bl	80091ea <USBD_CtlSendStatus>
  }
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d80b      	bhi.n	8008fcc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	885b      	ldrh	r3, [r3, #2]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d10c      	bne.n	8008fd6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f910 	bl	80091ea <USBD_CtlSendStatus>
      }
      break;
 8008fca:	e004      	b.n	8008fd6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f840 	bl	8009054 <USBD_CtlError>
      break;
 8008fd4:	e000      	b.n	8008fd8 <USBD_ClrFeature+0x3a>
      break;
 8008fd6:	bf00      	nop
  }
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	781a      	ldrb	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	781a      	ldrb	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3301      	adds	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fad3 	bl	80085b6 <SWAPBYTE>
 8009010:	4603      	mov	r3, r0
 8009012:	461a      	mov	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3301      	adds	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3301      	adds	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7ff fac6 	bl	80085b6 <SWAPBYTE>
 800902a:	4603      	mov	r3, r0
 800902c:	461a      	mov	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3301      	adds	r3, #1
 8009036:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f7ff fab9 	bl	80085b6 <SWAPBYTE>
 8009044:	4603      	mov	r3, r0
 8009046:	461a      	mov	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	80da      	strh	r2, [r3, #6]
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800905e:	2180      	movs	r1, #128	; 0x80
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fcf3 	bl	8009a4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009066:	2100      	movs	r1, #0
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fcef 	bl	8009a4c <USBD_LL_StallEP>
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b086      	sub	sp, #24
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d036      	beq.n	80090fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009090:	6938      	ldr	r0, [r7, #16]
 8009092:	f000 f836 	bl	8009102 <USBD_GetLen>
 8009096:	4603      	mov	r3, r0
 8009098:	3301      	adds	r3, #1
 800909a:	b29b      	uxth	r3, r3
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	4413      	add	r3, r2
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	7812      	ldrb	r2, [r2, #0]
 80090ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	3301      	adds	r3, #1
 80090b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	4413      	add	r3, r2
 80090bc:	2203      	movs	r2, #3
 80090be:	701a      	strb	r2, [r3, #0]
  idx++;
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	3301      	adds	r3, #1
 80090c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80090c6:	e013      	b.n	80090f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	7812      	ldrb	r2, [r2, #0]
 80090d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	3301      	adds	r3, #1
 80090d8:	613b      	str	r3, [r7, #16]
    idx++;
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	3301      	adds	r3, #1
 80090de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	4413      	add	r3, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	3301      	adds	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e7      	bne.n	80090c8 <USBD_GetString+0x52>
 80090f8:	e000      	b.n	80090fc <USBD_GetString+0x86>
    return;
 80090fa:	bf00      	nop
  }
}
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009102:	b480      	push	{r7}
 8009104:	b085      	sub	sp, #20
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009112:	e005      	b.n	8009120 <USBD_GetLen+0x1e>
  {
    len++;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	3301      	adds	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	3301      	adds	r3, #1
 800911e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1f5      	bne.n	8009114 <USBD_GetLen+0x12>
  }

  return len;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2202      	movs	r2, #2
 8009146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	2100      	movs	r1, #0
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 fcfe 	bl	8009b5e <USBD_LL_Transmit>

  return USBD_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	2100      	movs	r1, #0
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 fced 	bl	8009b5e <USBD_LL_Transmit>

  return USBD_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2203      	movs	r2, #3
 800919e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	2100      	movs	r1, #0
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fcf1 	bl	8009ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	2100      	movs	r1, #0
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 fce0 	bl	8009ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2204      	movs	r2, #4
 80091f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091fa:	2300      	movs	r3, #0
 80091fc:	2200      	movs	r2, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fcac 	bl	8009b5e <USBD_LL_Transmit>

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2205      	movs	r2, #5
 800921c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009220:	2300      	movs	r3, #0
 8009222:	2200      	movs	r2, #0
 8009224:	2100      	movs	r1, #0
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fcba 	bl	8009ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800923c:	2200      	movs	r2, #0
 800923e:	4912      	ldr	r1, [pc, #72]	; (8009288 <MX_USB_DEVICE_Init+0x50>)
 8009240:	4812      	ldr	r0, [pc, #72]	; (800928c <MX_USB_DEVICE_Init+0x54>)
 8009242:	f7fe fef3 	bl	800802c <USBD_Init>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800924c:	f7f8 fcb4 	bl	8001bb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009250:	490f      	ldr	r1, [pc, #60]	; (8009290 <MX_USB_DEVICE_Init+0x58>)
 8009252:	480e      	ldr	r0, [pc, #56]	; (800928c <MX_USB_DEVICE_Init+0x54>)
 8009254:	f7fe ff20 	bl	8008098 <USBD_RegisterClass>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800925e:	f7f8 fcab 	bl	8001bb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009262:	490c      	ldr	r1, [pc, #48]	; (8009294 <MX_USB_DEVICE_Init+0x5c>)
 8009264:	4809      	ldr	r0, [pc, #36]	; (800928c <MX_USB_DEVICE_Init+0x54>)
 8009266:	f7fe fe45 	bl	8007ef4 <USBD_CDC_RegisterInterface>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009270:	f7f8 fca2 	bl	8001bb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009274:	4805      	ldr	r0, [pc, #20]	; (800928c <MX_USB_DEVICE_Init+0x54>)
 8009276:	f7fe ff30 	bl	80080da <USBD_Start>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009280:	f7f8 fc9a 	bl	8001bb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009284:	bf00      	nop
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000138 	.word	0x20000138
 800928c:	20000550 	.word	0x20000550
 8009290:	20000018 	.word	0x20000018
 8009294:	20000124 	.word	0x20000124

08009298 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800929c:	2200      	movs	r2, #0
 800929e:	4905      	ldr	r1, [pc, #20]	; (80092b4 <CDC_Init_FS+0x1c>)
 80092a0:	4805      	ldr	r0, [pc, #20]	; (80092b8 <CDC_Init_FS+0x20>)
 80092a2:	f7fe fe3c 	bl	8007f1e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092a6:	4905      	ldr	r1, [pc, #20]	; (80092bc <CDC_Init_FS+0x24>)
 80092a8:	4803      	ldr	r0, [pc, #12]	; (80092b8 <CDC_Init_FS+0x20>)
 80092aa:	f7fe fe51 	bl	8007f50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20001020 	.word	0x20001020
 80092b8:	20000550 	.word	0x20000550
 80092bc:	20000820 	.word	0x20000820

080092c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
 80092dc:	4613      	mov	r3, r2
 80092de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	2b23      	cmp	r3, #35	; 0x23
 80092e4:	d85c      	bhi.n	80093a0 <CDC_Control_FS+0xd0>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <CDC_Control_FS+0x1c>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	080093a1 	.word	0x080093a1
 80092f0:	080093a1 	.word	0x080093a1
 80092f4:	080093a1 	.word	0x080093a1
 80092f8:	080093a1 	.word	0x080093a1
 80092fc:	080093a1 	.word	0x080093a1
 8009300:	080093a1 	.word	0x080093a1
 8009304:	080093a1 	.word	0x080093a1
 8009308:	080093a1 	.word	0x080093a1
 800930c:	080093a1 	.word	0x080093a1
 8009310:	080093a1 	.word	0x080093a1
 8009314:	080093a1 	.word	0x080093a1
 8009318:	080093a1 	.word	0x080093a1
 800931c:	080093a1 	.word	0x080093a1
 8009320:	080093a1 	.word	0x080093a1
 8009324:	080093a1 	.word	0x080093a1
 8009328:	080093a1 	.word	0x080093a1
 800932c:	080093a1 	.word	0x080093a1
 8009330:	080093a1 	.word	0x080093a1
 8009334:	080093a1 	.word	0x080093a1
 8009338:	080093a1 	.word	0x080093a1
 800933c:	080093a1 	.word	0x080093a1
 8009340:	080093a1 	.word	0x080093a1
 8009344:	080093a1 	.word	0x080093a1
 8009348:	080093a1 	.word	0x080093a1
 800934c:	080093a1 	.word	0x080093a1
 8009350:	080093a1 	.word	0x080093a1
 8009354:	080093a1 	.word	0x080093a1
 8009358:	080093a1 	.word	0x080093a1
 800935c:	080093a1 	.word	0x080093a1
 8009360:	080093a1 	.word	0x080093a1
 8009364:	080093a1 	.word	0x080093a1
 8009368:	080093a1 	.word	0x080093a1
 800936c:	0800937d 	.word	0x0800937d
 8009370:	0800938f 	.word	0x0800938f
 8009374:	080093a1 	.word	0x080093a1
 8009378:	080093a1 	.word	0x080093a1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800937c:	4b0c      	ldr	r3, [pc, #48]	; (80093b0 <CDC_Control_FS+0xe0>)
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	6810      	ldr	r0, [r2, #0]
 8009382:	6018      	str	r0, [r3, #0]
 8009384:	8891      	ldrh	r1, [r2, #4]
 8009386:	7992      	ldrb	r2, [r2, #6]
 8009388:	8099      	strh	r1, [r3, #4]
 800938a:	719a      	strb	r2, [r3, #6]
    break;
 800938c:	e009      	b.n	80093a2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	4a07      	ldr	r2, [pc, #28]	; (80093b0 <CDC_Control_FS+0xe0>)
 8009392:	6810      	ldr	r0, [r2, #0]
 8009394:	6018      	str	r0, [r3, #0]
 8009396:	8891      	ldrh	r1, [r2, #4]
 8009398:	7992      	ldrb	r2, [r2, #6]
 800939a:	8099      	strh	r1, [r3, #4]
 800939c:	719a      	strb	r2, [r3, #6]
    break;
 800939e:	e000      	b.n	80093a2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093a0:	bf00      	nop
  }

  return (USBD_OK);
 80093a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	2000011c 	.word	0x2000011c

080093b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4805      	ldr	r0, [pc, #20]	; (80093d8 <CDC_Receive_FS+0x24>)
 80093c2:	f7fe fdc5 	bl	8007f50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093c6:	4804      	ldr	r0, [pc, #16]	; (80093d8 <CDC_Receive_FS+0x24>)
 80093c8:	f7fe fe06 	bl	8007fd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80093cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000550 	.word	0x20000550

080093dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80093ec:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <CDC_Transmit_FS+0x48>)
 80093ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80093fe:	2301      	movs	r3, #1
 8009400:	e00b      	b.n	800941a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009402:	887b      	ldrh	r3, [r7, #2]
 8009404:	461a      	mov	r2, r3
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4806      	ldr	r0, [pc, #24]	; (8009424 <CDC_Transmit_FS+0x48>)
 800940a:	f7fe fd88 	bl	8007f1e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800940e:	4805      	ldr	r0, [pc, #20]	; (8009424 <CDC_Transmit_FS+0x48>)
 8009410:	f7fe fdb2 	bl	8007f78 <USBD_CDC_TransmitPacket>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20000550 	.word	0x20000550

08009428 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	4613      	mov	r3, r2
 8009434:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800943a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800943e:	4618      	mov	r0, r3
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	6039      	str	r1, [r7, #0]
 8009456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2212      	movs	r2, #18
 800945c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800945e:	4b03      	ldr	r3, [pc, #12]	; (800946c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	20000154 	.word	0x20000154

08009470 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	6039      	str	r1, [r7, #0]
 800947a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2204      	movs	r2, #4
 8009480:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009482:	4b03      	ldr	r3, [pc, #12]	; (8009490 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	20000168 	.word	0x20000168

08009494 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d105      	bne.n	80094b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4907      	ldr	r1, [pc, #28]	; (80094c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80094aa:	4808      	ldr	r0, [pc, #32]	; (80094cc <USBD_FS_ProductStrDescriptor+0x38>)
 80094ac:	f7ff fde3 	bl	8009076 <USBD_GetString>
 80094b0:	e004      	b.n	80094bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	4904      	ldr	r1, [pc, #16]	; (80094c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80094b6:	4805      	ldr	r0, [pc, #20]	; (80094cc <USBD_FS_ProductStrDescriptor+0x38>)
 80094b8:	f7ff fddd 	bl	8009076 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094bc:	4b02      	ldr	r3, [pc, #8]	; (80094c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20001820 	.word	0x20001820
 80094cc:	0800bd84 	.word	0x0800bd84

080094d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	6039      	str	r1, [r7, #0]
 80094da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	4904      	ldr	r1, [pc, #16]	; (80094f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094e0:	4804      	ldr	r0, [pc, #16]	; (80094f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094e2:	f7ff fdc8 	bl	8009076 <USBD_GetString>
  return USBD_StrDesc;
 80094e6:	4b02      	ldr	r3, [pc, #8]	; (80094f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20001820 	.word	0x20001820
 80094f4:	0800bd9c 	.word	0x0800bd9c

080094f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	6039      	str	r1, [r7, #0]
 8009502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	221a      	movs	r2, #26
 8009508:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800950a:	f000 f843 	bl	8009594 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800950e:	4b02      	ldr	r3, [pc, #8]	; (8009518 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009510:	4618      	mov	r0, r3
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	2000016c 	.word	0x2000016c

0800951c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	6039      	str	r1, [r7, #0]
 8009526:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d105      	bne.n	800953a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	4907      	ldr	r1, [pc, #28]	; (8009550 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009532:	4808      	ldr	r0, [pc, #32]	; (8009554 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009534:	f7ff fd9f 	bl	8009076 <USBD_GetString>
 8009538:	e004      	b.n	8009544 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	4904      	ldr	r1, [pc, #16]	; (8009550 <USBD_FS_ConfigStrDescriptor+0x34>)
 800953e:	4805      	ldr	r0, [pc, #20]	; (8009554 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009540:	f7ff fd99 	bl	8009076 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009544:	4b02      	ldr	r3, [pc, #8]	; (8009550 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20001820 	.word	0x20001820
 8009554:	0800bdb0 	.word	0x0800bdb0

08009558 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	4603      	mov	r3, r0
 8009560:	6039      	str	r1, [r7, #0]
 8009562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d105      	bne.n	8009576 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4907      	ldr	r1, [pc, #28]	; (800958c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800956e:	4808      	ldr	r0, [pc, #32]	; (8009590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009570:	f7ff fd81 	bl	8009076 <USBD_GetString>
 8009574:	e004      	b.n	8009580 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	4904      	ldr	r1, [pc, #16]	; (800958c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800957a:	4805      	ldr	r0, [pc, #20]	; (8009590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800957c:	f7ff fd7b 	bl	8009076 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20001820 	.word	0x20001820
 8009590:	0800bdbc 	.word	0x0800bdbc

08009594 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800959a:	4b0f      	ldr	r3, [pc, #60]	; (80095d8 <Get_SerialNum+0x44>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095a0:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <Get_SerialNum+0x48>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095a6:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <Get_SerialNum+0x4c>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4413      	add	r3, r2
 80095b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d009      	beq.n	80095ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095ba:	2208      	movs	r2, #8
 80095bc:	4909      	ldr	r1, [pc, #36]	; (80095e4 <Get_SerialNum+0x50>)
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 f814 	bl	80095ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095c4:	2204      	movs	r2, #4
 80095c6:	4908      	ldr	r1, [pc, #32]	; (80095e8 <Get_SerialNum+0x54>)
 80095c8:	68b8      	ldr	r0, [r7, #8]
 80095ca:	f000 f80f 	bl	80095ec <IntToUnicode>
  }
}
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	1fff7a10 	.word	0x1fff7a10
 80095dc:	1fff7a14 	.word	0x1fff7a14
 80095e0:	1fff7a18 	.word	0x1fff7a18
 80095e4:	2000016e 	.word	0x2000016e
 80095e8:	2000017e 	.word	0x2000017e

080095ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095fe:	2300      	movs	r3, #0
 8009600:	75fb      	strb	r3, [r7, #23]
 8009602:	e027      	b.n	8009654 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	0f1b      	lsrs	r3, r3, #28
 8009608:	2b09      	cmp	r3, #9
 800960a:	d80b      	bhi.n	8009624 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	0f1b      	lsrs	r3, r3, #28
 8009610:	b2da      	uxtb	r2, r3
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	4619      	mov	r1, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	440b      	add	r3, r1
 800961c:	3230      	adds	r2, #48	; 0x30
 800961e:	b2d2      	uxtb	r2, r2
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	e00a      	b.n	800963a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	0f1b      	lsrs	r3, r3, #28
 8009628:	b2da      	uxtb	r2, r3
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	4619      	mov	r1, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	440b      	add	r3, r1
 8009634:	3237      	adds	r2, #55	; 0x37
 8009636:	b2d2      	uxtb	r2, r2
 8009638:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	011b      	lsls	r3, r3, #4
 800963e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	005b      	lsls	r3, r3, #1
 8009644:	3301      	adds	r3, #1
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	4413      	add	r3, r2
 800964a:	2200      	movs	r2, #0
 800964c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	3301      	adds	r3, #1
 8009652:	75fb      	strb	r3, [r7, #23]
 8009654:	7dfa      	ldrb	r2, [r7, #23]
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	429a      	cmp	r2, r3
 800965a:	d3d3      	bcc.n	8009604 <IntToUnicode+0x18>
  }
}
 800965c:	bf00      	nop
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08a      	sub	sp, #40	; 0x28
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009670:	f107 0314 	add.w	r3, r7, #20
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	605a      	str	r2, [r3, #4]
 800967a:	609a      	str	r2, [r3, #8]
 800967c:	60da      	str	r2, [r3, #12]
 800967e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009688:	d13a      	bne.n	8009700 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800968a:	2300      	movs	r3, #0
 800968c:	613b      	str	r3, [r7, #16]
 800968e:	4b1e      	ldr	r3, [pc, #120]	; (8009708 <HAL_PCD_MspInit+0xa0>)
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	4a1d      	ldr	r2, [pc, #116]	; (8009708 <HAL_PCD_MspInit+0xa0>)
 8009694:	f043 0301 	orr.w	r3, r3, #1
 8009698:	6313      	str	r3, [r2, #48]	; 0x30
 800969a:	4b1b      	ldr	r3, [pc, #108]	; (8009708 <HAL_PCD_MspInit+0xa0>)
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ac:	2302      	movs	r3, #2
 80096ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b0:	2300      	movs	r3, #0
 80096b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096b4:	2303      	movs	r3, #3
 80096b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096b8:	230a      	movs	r3, #10
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096bc:	f107 0314 	add.w	r3, r7, #20
 80096c0:	4619      	mov	r1, r3
 80096c2:	4812      	ldr	r0, [pc, #72]	; (800970c <HAL_PCD_MspInit+0xa4>)
 80096c4:	f7f8 feb6 	bl	8002434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096c8:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <HAL_PCD_MspInit+0xa0>)
 80096ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096cc:	4a0e      	ldr	r2, [pc, #56]	; (8009708 <HAL_PCD_MspInit+0xa0>)
 80096ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d2:	6353      	str	r3, [r2, #52]	; 0x34
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <HAL_PCD_MspInit+0xa0>)
 80096da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096dc:	4a0a      	ldr	r2, [pc, #40]	; (8009708 <HAL_PCD_MspInit+0xa0>)
 80096de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096e2:	6453      	str	r3, [r2, #68]	; 0x44
 80096e4:	4b08      	ldr	r3, [pc, #32]	; (8009708 <HAL_PCD_MspInit+0xa0>)
 80096e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 80096f0:	2200      	movs	r2, #0
 80096f2:	2101      	movs	r1, #1
 80096f4:	2043      	movs	r0, #67	; 0x43
 80096f6:	f7f8 fe66 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096fa:	2043      	movs	r0, #67	; 0x43
 80096fc:	f7f8 fe7f 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009700:	bf00      	nop
 8009702:	3728      	adds	r7, #40	; 0x28
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	40023800 	.word	0x40023800
 800970c:	40020000 	.word	0x40020000

08009710 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009724:	4619      	mov	r1, r3
 8009726:	4610      	mov	r0, r2
 8009728:	f7fe fd22 	bl	8008170 <USBD_LL_SetupStage>
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	4613      	mov	r3, r2
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	1a9b      	subs	r3, r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	440b      	add	r3, r1
 8009754:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	4619      	mov	r1, r3
 800975e:	f7fe fd5a 	bl	8008216 <USBD_LL_DataOutStage>
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800977c:	78fa      	ldrb	r2, [r7, #3]
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	4613      	mov	r3, r2
 8009782:	00db      	lsls	r3, r3, #3
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	440b      	add	r3, r1
 800978a:	3348      	adds	r3, #72	; 0x48
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	78fb      	ldrb	r3, [r7, #3]
 8009790:	4619      	mov	r1, r3
 8009792:	f7fe fda3 	bl	80082dc <USBD_LL_DataInStage>
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b082      	sub	sp, #8
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fea7 	bl	8008500 <USBD_LL_SOF>
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097c2:	2301      	movs	r3, #1
 80097c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d102      	bne.n	80097d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
 80097d2:	e008      	b.n	80097e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d102      	bne.n	80097e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80097dc:	2301      	movs	r3, #1
 80097de:	73fb      	strb	r3, [r7, #15]
 80097e0:	e001      	b.n	80097e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80097e2:	f7f8 f9e9 	bl	8001bb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097ec:	7bfa      	ldrb	r2, [r7, #15]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fe4a 	bl	800848a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fe03 	bl	8008408 <USBD_LL_Reset>
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fe45 	bl	80084aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	6812      	ldr	r2, [r2, #0]
 800982e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009840:	4b04      	ldr	r3, [pc, #16]	; (8009854 <HAL_PCD_SuspendCallback+0x48>)
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	4a03      	ldr	r2, [pc, #12]	; (8009854 <HAL_PCD_SuspendCallback+0x48>)
 8009846:	f043 0306 	orr.w	r3, r3, #6
 800984a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	e000ed00 	.word	0xe000ed00

08009858 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fe34 	bl	80084d4 <USBD_LL_Resume>
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	4611      	mov	r1, r2
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fe5f 	bl	800854e <USBD_LL_IsoOUTIncomplete>
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	4611      	mov	r1, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fe40 	bl	8008534 <USBD_LL_IsoINIncomplete>
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fe4c 	bl	8008568 <USBD_LL_DevConnected>
}
 80098d0:	bf00      	nop
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe fe49 	bl	800857e <USBD_LL_DevDisconnected>
}
 80098ec:	bf00      	nop
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d13c      	bne.n	800997e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009904:	4a20      	ldr	r2, [pc, #128]	; (8009988 <USBD_LL_Init+0x94>)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <USBD_LL_Init+0x94>)
 8009910:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009914:	4b1c      	ldr	r3, [pc, #112]	; (8009988 <USBD_LL_Init+0x94>)
 8009916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800991a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800991c:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <USBD_LL_Init+0x94>)
 800991e:	2204      	movs	r2, #4
 8009920:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009922:	4b19      	ldr	r3, [pc, #100]	; (8009988 <USBD_LL_Init+0x94>)
 8009924:	2202      	movs	r2, #2
 8009926:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009928:	4b17      	ldr	r3, [pc, #92]	; (8009988 <USBD_LL_Init+0x94>)
 800992a:	2200      	movs	r2, #0
 800992c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800992e:	4b16      	ldr	r3, [pc, #88]	; (8009988 <USBD_LL_Init+0x94>)
 8009930:	2202      	movs	r2, #2
 8009932:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009934:	4b14      	ldr	r3, [pc, #80]	; (8009988 <USBD_LL_Init+0x94>)
 8009936:	2200      	movs	r2, #0
 8009938:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800993a:	4b13      	ldr	r3, [pc, #76]	; (8009988 <USBD_LL_Init+0x94>)
 800993c:	2200      	movs	r2, #0
 800993e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <USBD_LL_Init+0x94>)
 8009942:	2200      	movs	r2, #0
 8009944:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009946:	4b10      	ldr	r3, [pc, #64]	; (8009988 <USBD_LL_Init+0x94>)
 8009948:	2200      	movs	r2, #0
 800994a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800994c:	4b0e      	ldr	r3, [pc, #56]	; (8009988 <USBD_LL_Init+0x94>)
 800994e:	2200      	movs	r2, #0
 8009950:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009952:	480d      	ldr	r0, [pc, #52]	; (8009988 <USBD_LL_Init+0x94>)
 8009954:	f7f9 fef9 	bl	800374a <HAL_PCD_Init>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800995e:	f7f8 f92b 	bl	8001bb8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009962:	2180      	movs	r1, #128	; 0x80
 8009964:	4808      	ldr	r0, [pc, #32]	; (8009988 <USBD_LL_Init+0x94>)
 8009966:	f7fb f856 	bl	8004a16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800996a:	2240      	movs	r2, #64	; 0x40
 800996c:	2100      	movs	r1, #0
 800996e:	4806      	ldr	r0, [pc, #24]	; (8009988 <USBD_LL_Init+0x94>)
 8009970:	f7fb f80a 	bl	8004988 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009974:	2280      	movs	r2, #128	; 0x80
 8009976:	2101      	movs	r1, #1
 8009978:	4803      	ldr	r0, [pc, #12]	; (8009988 <USBD_LL_Init+0x94>)
 800997a:	f7fb f805 	bl	8004988 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20001a20 	.word	0x20001a20

0800998c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f9 ffee 	bl	8003984 <HAL_PCD_Start>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 f92a 	bl	8009c08 <USBD_Get_USB_Status>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	4608      	mov	r0, r1
 80099cc:	4611      	mov	r1, r2
 80099ce:	461a      	mov	r2, r3
 80099d0:	4603      	mov	r3, r0
 80099d2:	70fb      	strb	r3, [r7, #3]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70bb      	strb	r3, [r7, #2]
 80099d8:	4613      	mov	r3, r2
 80099da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099ea:	78bb      	ldrb	r3, [r7, #2]
 80099ec:	883a      	ldrh	r2, [r7, #0]
 80099ee:	78f9      	ldrb	r1, [r7, #3]
 80099f0:	f7fa fbd2 	bl	8004198 <HAL_PCD_EP_Open>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 f904 	bl	8009c08 <USBD_Get_USB_Status>
 8009a00:	4603      	mov	r3, r0
 8009a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a28:	78fa      	ldrb	r2, [r7, #3]
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fa fc1b 	bl	8004268 <HAL_PCD_EP_Close>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 f8e5 	bl	8009c08 <USBD_Get_USB_Status>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fa fcf3 	bl	8004456 <HAL_PCD_EP_SetStall>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 f8c6 	bl	8009c08 <USBD_Get_USB_Status>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	460b      	mov	r3, r1
 8009a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aa4:	78fa      	ldrb	r2, [r7, #3]
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fa fd38 	bl	800451e <HAL_PCD_EP_ClrStall>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 f8a7 	bl	8009c08 <USBD_Get_USB_Status>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ada:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	da0b      	bge.n	8009afc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009aea:	68f9      	ldr	r1, [r7, #12]
 8009aec:	4613      	mov	r3, r2
 8009aee:	00db      	lsls	r3, r3, #3
 8009af0:	1a9b      	subs	r3, r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	333e      	adds	r3, #62	; 0x3e
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	e00b      	b.n	8009b14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009afc:	78fb      	ldrb	r3, [r7, #3]
 8009afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b02:	68f9      	ldr	r1, [r7, #12]
 8009b04:	4613      	mov	r3, r2
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	1a9b      	subs	r3, r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	440b      	add	r3, r1
 8009b0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b3a:	78fa      	ldrb	r2, [r7, #3]
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fa fb05 	bl	800414e <HAL_PCD_SetAddress>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 f85c 	bl	8009c08 <USBD_Get_USB_Status>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b086      	sub	sp, #24
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b7c:	7af9      	ldrb	r1, [r7, #11]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	f7fa fc1e 	bl	80043c2 <HAL_PCD_EP_Transmit>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 f83b 	bl	8009c08 <USBD_Get_USB_Status>
 8009b92:	4603      	mov	r3, r0
 8009b94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b96:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	607a      	str	r2, [r7, #4]
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	460b      	mov	r3, r1
 8009bae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009bbe:	7af9      	ldrb	r1, [r7, #11]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	f7fa fb9a 	bl	80042fc <HAL_PCD_EP_Receive>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 f81a 	bl	8009c08 <USBD_Get_USB_Status>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	460b      	mov	r3, r1
 8009bec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bf4:	78fa      	ldrb	r2, [r7, #3]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fa fbca 	bl	8004392 <HAL_PCD_EP_GetRxCount>
 8009bfe:	4603      	mov	r3, r0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d817      	bhi.n	8009c4c <USBD_Get_USB_Status+0x44>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <USBD_Get_USB_Status+0x1c>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c35 	.word	0x08009c35
 8009c28:	08009c3b 	.word	0x08009c3b
 8009c2c:	08009c41 	.word	0x08009c41
 8009c30:	08009c47 	.word	0x08009c47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73fb      	strb	r3, [r7, #15]
    break;
 8009c38:	e00b      	b.n	8009c52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3e:	e008      	b.n	8009c52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
    break;
 8009c44:	e005      	b.n	8009c52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c46:	2303      	movs	r3, #3
 8009c48:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4a:	e002      	b.n	8009c52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c50:	bf00      	nop
  }
  return usb_status;
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <__errno>:
 8009c60:	4b01      	ldr	r3, [pc, #4]	; (8009c68 <__errno+0x8>)
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	20000188 	.word	0x20000188

08009c6c <__libc_init_array>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	4e0d      	ldr	r6, [pc, #52]	; (8009ca4 <__libc_init_array+0x38>)
 8009c70:	4c0d      	ldr	r4, [pc, #52]	; (8009ca8 <__libc_init_array+0x3c>)
 8009c72:	1ba4      	subs	r4, r4, r6
 8009c74:	10a4      	asrs	r4, r4, #2
 8009c76:	2500      	movs	r5, #0
 8009c78:	42a5      	cmp	r5, r4
 8009c7a:	d109      	bne.n	8009c90 <__libc_init_array+0x24>
 8009c7c:	4e0b      	ldr	r6, [pc, #44]	; (8009cac <__libc_init_array+0x40>)
 8009c7e:	4c0c      	ldr	r4, [pc, #48]	; (8009cb0 <__libc_init_array+0x44>)
 8009c80:	f002 f866 	bl	800bd50 <_init>
 8009c84:	1ba4      	subs	r4, r4, r6
 8009c86:	10a4      	asrs	r4, r4, #2
 8009c88:	2500      	movs	r5, #0
 8009c8a:	42a5      	cmp	r5, r4
 8009c8c:	d105      	bne.n	8009c9a <__libc_init_array+0x2e>
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c94:	4798      	blx	r3
 8009c96:	3501      	adds	r5, #1
 8009c98:	e7ee      	b.n	8009c78 <__libc_init_array+0xc>
 8009c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c9e:	4798      	blx	r3
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	e7f2      	b.n	8009c8a <__libc_init_array+0x1e>
 8009ca4:	0800c048 	.word	0x0800c048
 8009ca8:	0800c048 	.word	0x0800c048
 8009cac:	0800c048 	.word	0x0800c048
 8009cb0:	0800c04c 	.word	0x0800c04c

08009cb4 <malloc>:
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <malloc+0xc>)
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	f000 b861 	b.w	8009d80 <_malloc_r>
 8009cbe:	bf00      	nop
 8009cc0:	20000188 	.word	0x20000188

08009cc4 <free>:
 8009cc4:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <free+0xc>)
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	f000 b80b 	b.w	8009ce4 <_free_r>
 8009cce:	bf00      	nop
 8009cd0:	20000188 	.word	0x20000188

08009cd4 <memset>:
 8009cd4:	4402      	add	r2, r0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d100      	bne.n	8009cde <memset+0xa>
 8009cdc:	4770      	bx	lr
 8009cde:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce2:	e7f9      	b.n	8009cd8 <memset+0x4>

08009ce4 <_free_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d045      	beq.n	8009d78 <_free_r+0x94>
 8009cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf0:	1f0c      	subs	r4, r1, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfb8      	it	lt
 8009cf6:	18e4      	addlt	r4, r4, r3
 8009cf8:	f001 fb87 	bl	800b40a <__malloc_lock>
 8009cfc:	4a1f      	ldr	r2, [pc, #124]	; (8009d7c <_free_r+0x98>)
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	4610      	mov	r0, r2
 8009d02:	b933      	cbnz	r3, 8009d12 <_free_r+0x2e>
 8009d04:	6063      	str	r3, [r4, #4]
 8009d06:	6014      	str	r4, [r2, #0]
 8009d08:	4628      	mov	r0, r5
 8009d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d0e:	f001 bb7d 	b.w	800b40c <__malloc_unlock>
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	d90c      	bls.n	8009d30 <_free_r+0x4c>
 8009d16:	6821      	ldr	r1, [r4, #0]
 8009d18:	1862      	adds	r2, r4, r1
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	bf04      	itt	eq
 8009d1e:	681a      	ldreq	r2, [r3, #0]
 8009d20:	685b      	ldreq	r3, [r3, #4]
 8009d22:	6063      	str	r3, [r4, #4]
 8009d24:	bf04      	itt	eq
 8009d26:	1852      	addeq	r2, r2, r1
 8009d28:	6022      	streq	r2, [r4, #0]
 8009d2a:	6004      	str	r4, [r0, #0]
 8009d2c:	e7ec      	b.n	8009d08 <_free_r+0x24>
 8009d2e:	4613      	mov	r3, r2
 8009d30:	685a      	ldr	r2, [r3, #4]
 8009d32:	b10a      	cbz	r2, 8009d38 <_free_r+0x54>
 8009d34:	42a2      	cmp	r2, r4
 8009d36:	d9fa      	bls.n	8009d2e <_free_r+0x4a>
 8009d38:	6819      	ldr	r1, [r3, #0]
 8009d3a:	1858      	adds	r0, r3, r1
 8009d3c:	42a0      	cmp	r0, r4
 8009d3e:	d10b      	bne.n	8009d58 <_free_r+0x74>
 8009d40:	6820      	ldr	r0, [r4, #0]
 8009d42:	4401      	add	r1, r0
 8009d44:	1858      	adds	r0, r3, r1
 8009d46:	4282      	cmp	r2, r0
 8009d48:	6019      	str	r1, [r3, #0]
 8009d4a:	d1dd      	bne.n	8009d08 <_free_r+0x24>
 8009d4c:	6810      	ldr	r0, [r2, #0]
 8009d4e:	6852      	ldr	r2, [r2, #4]
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	4401      	add	r1, r0
 8009d54:	6019      	str	r1, [r3, #0]
 8009d56:	e7d7      	b.n	8009d08 <_free_r+0x24>
 8009d58:	d902      	bls.n	8009d60 <_free_r+0x7c>
 8009d5a:	230c      	movs	r3, #12
 8009d5c:	602b      	str	r3, [r5, #0]
 8009d5e:	e7d3      	b.n	8009d08 <_free_r+0x24>
 8009d60:	6820      	ldr	r0, [r4, #0]
 8009d62:	1821      	adds	r1, r4, r0
 8009d64:	428a      	cmp	r2, r1
 8009d66:	bf04      	itt	eq
 8009d68:	6811      	ldreq	r1, [r2, #0]
 8009d6a:	6852      	ldreq	r2, [r2, #4]
 8009d6c:	6062      	str	r2, [r4, #4]
 8009d6e:	bf04      	itt	eq
 8009d70:	1809      	addeq	r1, r1, r0
 8009d72:	6021      	streq	r1, [r4, #0]
 8009d74:	605c      	str	r4, [r3, #4]
 8009d76:	e7c7      	b.n	8009d08 <_free_r+0x24>
 8009d78:	bd38      	pop	{r3, r4, r5, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200003a8 	.word	0x200003a8

08009d80 <_malloc_r>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	1ccd      	adds	r5, r1, #3
 8009d84:	f025 0503 	bic.w	r5, r5, #3
 8009d88:	3508      	adds	r5, #8
 8009d8a:	2d0c      	cmp	r5, #12
 8009d8c:	bf38      	it	cc
 8009d8e:	250c      	movcc	r5, #12
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	4606      	mov	r6, r0
 8009d94:	db01      	blt.n	8009d9a <_malloc_r+0x1a>
 8009d96:	42a9      	cmp	r1, r5
 8009d98:	d903      	bls.n	8009da2 <_malloc_r+0x22>
 8009d9a:	230c      	movs	r3, #12
 8009d9c:	6033      	str	r3, [r6, #0]
 8009d9e:	2000      	movs	r0, #0
 8009da0:	bd70      	pop	{r4, r5, r6, pc}
 8009da2:	f001 fb32 	bl	800b40a <__malloc_lock>
 8009da6:	4a21      	ldr	r2, [pc, #132]	; (8009e2c <_malloc_r+0xac>)
 8009da8:	6814      	ldr	r4, [r2, #0]
 8009daa:	4621      	mov	r1, r4
 8009dac:	b991      	cbnz	r1, 8009dd4 <_malloc_r+0x54>
 8009dae:	4c20      	ldr	r4, [pc, #128]	; (8009e30 <_malloc_r+0xb0>)
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	b91b      	cbnz	r3, 8009dbc <_malloc_r+0x3c>
 8009db4:	4630      	mov	r0, r6
 8009db6:	f000 fc99 	bl	800a6ec <_sbrk_r>
 8009dba:	6020      	str	r0, [r4, #0]
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f000 fc94 	bl	800a6ec <_sbrk_r>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d124      	bne.n	8009e12 <_malloc_r+0x92>
 8009dc8:	230c      	movs	r3, #12
 8009dca:	6033      	str	r3, [r6, #0]
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f001 fb1d 	bl	800b40c <__malloc_unlock>
 8009dd2:	e7e4      	b.n	8009d9e <_malloc_r+0x1e>
 8009dd4:	680b      	ldr	r3, [r1, #0]
 8009dd6:	1b5b      	subs	r3, r3, r5
 8009dd8:	d418      	bmi.n	8009e0c <_malloc_r+0x8c>
 8009dda:	2b0b      	cmp	r3, #11
 8009ddc:	d90f      	bls.n	8009dfe <_malloc_r+0x7e>
 8009dde:	600b      	str	r3, [r1, #0]
 8009de0:	50cd      	str	r5, [r1, r3]
 8009de2:	18cc      	adds	r4, r1, r3
 8009de4:	4630      	mov	r0, r6
 8009de6:	f001 fb11 	bl	800b40c <__malloc_unlock>
 8009dea:	f104 000b 	add.w	r0, r4, #11
 8009dee:	1d23      	adds	r3, r4, #4
 8009df0:	f020 0007 	bic.w	r0, r0, #7
 8009df4:	1ac3      	subs	r3, r0, r3
 8009df6:	d0d3      	beq.n	8009da0 <_malloc_r+0x20>
 8009df8:	425a      	negs	r2, r3
 8009dfa:	50e2      	str	r2, [r4, r3]
 8009dfc:	e7d0      	b.n	8009da0 <_malloc_r+0x20>
 8009dfe:	428c      	cmp	r4, r1
 8009e00:	684b      	ldr	r3, [r1, #4]
 8009e02:	bf16      	itet	ne
 8009e04:	6063      	strne	r3, [r4, #4]
 8009e06:	6013      	streq	r3, [r2, #0]
 8009e08:	460c      	movne	r4, r1
 8009e0a:	e7eb      	b.n	8009de4 <_malloc_r+0x64>
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	6849      	ldr	r1, [r1, #4]
 8009e10:	e7cc      	b.n	8009dac <_malloc_r+0x2c>
 8009e12:	1cc4      	adds	r4, r0, #3
 8009e14:	f024 0403 	bic.w	r4, r4, #3
 8009e18:	42a0      	cmp	r0, r4
 8009e1a:	d005      	beq.n	8009e28 <_malloc_r+0xa8>
 8009e1c:	1a21      	subs	r1, r4, r0
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f000 fc64 	bl	800a6ec <_sbrk_r>
 8009e24:	3001      	adds	r0, #1
 8009e26:	d0cf      	beq.n	8009dc8 <_malloc_r+0x48>
 8009e28:	6025      	str	r5, [r4, #0]
 8009e2a:	e7db      	b.n	8009de4 <_malloc_r+0x64>
 8009e2c:	200003a8 	.word	0x200003a8
 8009e30:	200003ac 	.word	0x200003ac

08009e34 <__cvt>:
 8009e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	ec55 4b10 	vmov	r4, r5, d0
 8009e3c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009e3e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	460e      	mov	r6, r1
 8009e46:	4691      	mov	r9, r2
 8009e48:	4619      	mov	r1, r3
 8009e4a:	bfb8      	it	lt
 8009e4c:	4622      	movlt	r2, r4
 8009e4e:	462b      	mov	r3, r5
 8009e50:	f027 0720 	bic.w	r7, r7, #32
 8009e54:	bfbb      	ittet	lt
 8009e56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e5a:	461d      	movlt	r5, r3
 8009e5c:	2300      	movge	r3, #0
 8009e5e:	232d      	movlt	r3, #45	; 0x2d
 8009e60:	bfb8      	it	lt
 8009e62:	4614      	movlt	r4, r2
 8009e64:	2f46      	cmp	r7, #70	; 0x46
 8009e66:	700b      	strb	r3, [r1, #0]
 8009e68:	d004      	beq.n	8009e74 <__cvt+0x40>
 8009e6a:	2f45      	cmp	r7, #69	; 0x45
 8009e6c:	d100      	bne.n	8009e70 <__cvt+0x3c>
 8009e6e:	3601      	adds	r6, #1
 8009e70:	2102      	movs	r1, #2
 8009e72:	e000      	b.n	8009e76 <__cvt+0x42>
 8009e74:	2103      	movs	r1, #3
 8009e76:	ab03      	add	r3, sp, #12
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	ab02      	add	r3, sp, #8
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4632      	mov	r2, r6
 8009e80:	4653      	mov	r3, sl
 8009e82:	ec45 4b10 	vmov	d0, r4, r5
 8009e86:	f000 fcef 	bl	800a868 <_dtoa_r>
 8009e8a:	2f47      	cmp	r7, #71	; 0x47
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	d102      	bne.n	8009e96 <__cvt+0x62>
 8009e90:	f019 0f01 	tst.w	r9, #1
 8009e94:	d026      	beq.n	8009ee4 <__cvt+0xb0>
 8009e96:	2f46      	cmp	r7, #70	; 0x46
 8009e98:	eb08 0906 	add.w	r9, r8, r6
 8009e9c:	d111      	bne.n	8009ec2 <__cvt+0x8e>
 8009e9e:	f898 3000 	ldrb.w	r3, [r8]
 8009ea2:	2b30      	cmp	r3, #48	; 0x30
 8009ea4:	d10a      	bne.n	8009ebc <__cvt+0x88>
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	f7f6 fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eb2:	b918      	cbnz	r0, 8009ebc <__cvt+0x88>
 8009eb4:	f1c6 0601 	rsb	r6, r6, #1
 8009eb8:	f8ca 6000 	str.w	r6, [sl]
 8009ebc:	f8da 3000 	ldr.w	r3, [sl]
 8009ec0:	4499      	add	r9, r3
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	f7f6 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ece:	b938      	cbnz	r0, 8009ee0 <__cvt+0xac>
 8009ed0:	2230      	movs	r2, #48	; 0x30
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	454b      	cmp	r3, r9
 8009ed6:	d205      	bcs.n	8009ee4 <__cvt+0xb0>
 8009ed8:	1c59      	adds	r1, r3, #1
 8009eda:	9103      	str	r1, [sp, #12]
 8009edc:	701a      	strb	r2, [r3, #0]
 8009ede:	e7f8      	b.n	8009ed2 <__cvt+0x9e>
 8009ee0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ee8:	eba3 0308 	sub.w	r3, r3, r8
 8009eec:	4640      	mov	r0, r8
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	b004      	add	sp, #16
 8009ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009ef6 <__exponent>:
 8009ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ef8:	2900      	cmp	r1, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	bfba      	itte	lt
 8009efe:	4249      	neglt	r1, r1
 8009f00:	232d      	movlt	r3, #45	; 0x2d
 8009f02:	232b      	movge	r3, #43	; 0x2b
 8009f04:	2909      	cmp	r1, #9
 8009f06:	f804 2b02 	strb.w	r2, [r4], #2
 8009f0a:	7043      	strb	r3, [r0, #1]
 8009f0c:	dd20      	ble.n	8009f50 <__exponent+0x5a>
 8009f0e:	f10d 0307 	add.w	r3, sp, #7
 8009f12:	461f      	mov	r7, r3
 8009f14:	260a      	movs	r6, #10
 8009f16:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f1a:	fb06 1115 	mls	r1, r6, r5, r1
 8009f1e:	3130      	adds	r1, #48	; 0x30
 8009f20:	2d09      	cmp	r5, #9
 8009f22:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f26:	f103 32ff 	add.w	r2, r3, #4294967295
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	dc09      	bgt.n	8009f42 <__exponent+0x4c>
 8009f2e:	3130      	adds	r1, #48	; 0x30
 8009f30:	3b02      	subs	r3, #2
 8009f32:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f36:	42bb      	cmp	r3, r7
 8009f38:	4622      	mov	r2, r4
 8009f3a:	d304      	bcc.n	8009f46 <__exponent+0x50>
 8009f3c:	1a10      	subs	r0, r2, r0
 8009f3e:	b003      	add	sp, #12
 8009f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f42:	4613      	mov	r3, r2
 8009f44:	e7e7      	b.n	8009f16 <__exponent+0x20>
 8009f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f4a:	f804 2b01 	strb.w	r2, [r4], #1
 8009f4e:	e7f2      	b.n	8009f36 <__exponent+0x40>
 8009f50:	2330      	movs	r3, #48	; 0x30
 8009f52:	4419      	add	r1, r3
 8009f54:	7083      	strb	r3, [r0, #2]
 8009f56:	1d02      	adds	r2, r0, #4
 8009f58:	70c1      	strb	r1, [r0, #3]
 8009f5a:	e7ef      	b.n	8009f3c <__exponent+0x46>

08009f5c <_printf_float>:
 8009f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	b08d      	sub	sp, #52	; 0x34
 8009f62:	460c      	mov	r4, r1
 8009f64:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009f68:	4616      	mov	r6, r2
 8009f6a:	461f      	mov	r7, r3
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	f001 fa33 	bl	800b3d8 <_localeconv_r>
 8009f72:	6803      	ldr	r3, [r0, #0]
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7f6 f92a 	bl	80001d0 <strlen>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f80:	f8d8 3000 	ldr.w	r3, [r8]
 8009f84:	9005      	str	r0, [sp, #20]
 8009f86:	3307      	adds	r3, #7
 8009f88:	f023 0307 	bic.w	r3, r3, #7
 8009f8c:	f103 0208 	add.w	r2, r3, #8
 8009f90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f94:	f8d4 b000 	ldr.w	fp, [r4]
 8009f98:	f8c8 2000 	str.w	r2, [r8]
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009fa4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009fa8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fac:	9307      	str	r3, [sp, #28]
 8009fae:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb6:	4ba7      	ldr	r3, [pc, #668]	; (800a254 <_printf_float+0x2f8>)
 8009fb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fbc:	f7f6 fdb6 	bl	8000b2c <__aeabi_dcmpun>
 8009fc0:	bb70      	cbnz	r0, 800a020 <_printf_float+0xc4>
 8009fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc6:	4ba3      	ldr	r3, [pc, #652]	; (800a254 <_printf_float+0x2f8>)
 8009fc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fcc:	f7f6 fd90 	bl	8000af0 <__aeabi_dcmple>
 8009fd0:	bb30      	cbnz	r0, 800a020 <_printf_float+0xc4>
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	4649      	mov	r1, r9
 8009fda:	f7f6 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8009fde:	b110      	cbz	r0, 8009fe6 <_printf_float+0x8a>
 8009fe0:	232d      	movs	r3, #45	; 0x2d
 8009fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe6:	4a9c      	ldr	r2, [pc, #624]	; (800a258 <_printf_float+0x2fc>)
 8009fe8:	4b9c      	ldr	r3, [pc, #624]	; (800a25c <_printf_float+0x300>)
 8009fea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009fee:	bf8c      	ite	hi
 8009ff0:	4690      	movhi	r8, r2
 8009ff2:	4698      	movls	r8, r3
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	f02b 0204 	bic.w	r2, fp, #4
 8009ffa:	6123      	str	r3, [r4, #16]
 8009ffc:	6022      	str	r2, [r4, #0]
 8009ffe:	f04f 0900 	mov.w	r9, #0
 800a002:	9700      	str	r7, [sp, #0]
 800a004:	4633      	mov	r3, r6
 800a006:	aa0b      	add	r2, sp, #44	; 0x2c
 800a008:	4621      	mov	r1, r4
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 f9e6 	bl	800a3dc <_printf_common>
 800a010:	3001      	adds	r0, #1
 800a012:	f040 808d 	bne.w	800a130 <_printf_float+0x1d4>
 800a016:	f04f 30ff 	mov.w	r0, #4294967295
 800a01a:	b00d      	add	sp, #52	; 0x34
 800a01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a020:	4642      	mov	r2, r8
 800a022:	464b      	mov	r3, r9
 800a024:	4640      	mov	r0, r8
 800a026:	4649      	mov	r1, r9
 800a028:	f7f6 fd80 	bl	8000b2c <__aeabi_dcmpun>
 800a02c:	b110      	cbz	r0, 800a034 <_printf_float+0xd8>
 800a02e:	4a8c      	ldr	r2, [pc, #560]	; (800a260 <_printf_float+0x304>)
 800a030:	4b8c      	ldr	r3, [pc, #560]	; (800a264 <_printf_float+0x308>)
 800a032:	e7da      	b.n	8009fea <_printf_float+0x8e>
 800a034:	6861      	ldr	r1, [r4, #4]
 800a036:	1c4b      	adds	r3, r1, #1
 800a038:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a03c:	a80a      	add	r0, sp, #40	; 0x28
 800a03e:	d13e      	bne.n	800a0be <_printf_float+0x162>
 800a040:	2306      	movs	r3, #6
 800a042:	6063      	str	r3, [r4, #4]
 800a044:	2300      	movs	r3, #0
 800a046:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a04a:	ab09      	add	r3, sp, #36	; 0x24
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	ec49 8b10 	vmov	d0, r8, r9
 800a052:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a056:	6022      	str	r2, [r4, #0]
 800a058:	f8cd a004 	str.w	sl, [sp, #4]
 800a05c:	6861      	ldr	r1, [r4, #4]
 800a05e:	4628      	mov	r0, r5
 800a060:	f7ff fee8 	bl	8009e34 <__cvt>
 800a064:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a068:	2b47      	cmp	r3, #71	; 0x47
 800a06a:	4680      	mov	r8, r0
 800a06c:	d109      	bne.n	800a082 <_printf_float+0x126>
 800a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a070:	1cd8      	adds	r0, r3, #3
 800a072:	db02      	blt.n	800a07a <_printf_float+0x11e>
 800a074:	6862      	ldr	r2, [r4, #4]
 800a076:	4293      	cmp	r3, r2
 800a078:	dd47      	ble.n	800a10a <_printf_float+0x1ae>
 800a07a:	f1aa 0a02 	sub.w	sl, sl, #2
 800a07e:	fa5f fa8a 	uxtb.w	sl, sl
 800a082:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a086:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a088:	d824      	bhi.n	800a0d4 <_printf_float+0x178>
 800a08a:	3901      	subs	r1, #1
 800a08c:	4652      	mov	r2, sl
 800a08e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a092:	9109      	str	r1, [sp, #36]	; 0x24
 800a094:	f7ff ff2f 	bl	8009ef6 <__exponent>
 800a098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a09a:	1813      	adds	r3, r2, r0
 800a09c:	2a01      	cmp	r2, #1
 800a09e:	4681      	mov	r9, r0
 800a0a0:	6123      	str	r3, [r4, #16]
 800a0a2:	dc02      	bgt.n	800a0aa <_printf_float+0x14e>
 800a0a4:	6822      	ldr	r2, [r4, #0]
 800a0a6:	07d1      	lsls	r1, r2, #31
 800a0a8:	d501      	bpl.n	800a0ae <_printf_float+0x152>
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	6123      	str	r3, [r4, #16]
 800a0ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0a5      	beq.n	800a002 <_printf_float+0xa6>
 800a0b6:	232d      	movs	r3, #45	; 0x2d
 800a0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0bc:	e7a1      	b.n	800a002 <_printf_float+0xa6>
 800a0be:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a0c2:	f000 8177 	beq.w	800a3b4 <_printf_float+0x458>
 800a0c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a0ca:	d1bb      	bne.n	800a044 <_printf_float+0xe8>
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d1b9      	bne.n	800a044 <_printf_float+0xe8>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e7b6      	b.n	800a042 <_printf_float+0xe6>
 800a0d4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a0d8:	d119      	bne.n	800a10e <_printf_float+0x1b2>
 800a0da:	2900      	cmp	r1, #0
 800a0dc:	6863      	ldr	r3, [r4, #4]
 800a0de:	dd0c      	ble.n	800a0fa <_printf_float+0x19e>
 800a0e0:	6121      	str	r1, [r4, #16]
 800a0e2:	b913      	cbnz	r3, 800a0ea <_printf_float+0x18e>
 800a0e4:	6822      	ldr	r2, [r4, #0]
 800a0e6:	07d2      	lsls	r2, r2, #31
 800a0e8:	d502      	bpl.n	800a0f0 <_printf_float+0x194>
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	440b      	add	r3, r1
 800a0ee:	6123      	str	r3, [r4, #16]
 800a0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f2:	65a3      	str	r3, [r4, #88]	; 0x58
 800a0f4:	f04f 0900 	mov.w	r9, #0
 800a0f8:	e7d9      	b.n	800a0ae <_printf_float+0x152>
 800a0fa:	b913      	cbnz	r3, 800a102 <_printf_float+0x1a6>
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	07d0      	lsls	r0, r2, #31
 800a100:	d501      	bpl.n	800a106 <_printf_float+0x1aa>
 800a102:	3302      	adds	r3, #2
 800a104:	e7f3      	b.n	800a0ee <_printf_float+0x192>
 800a106:	2301      	movs	r3, #1
 800a108:	e7f1      	b.n	800a0ee <_printf_float+0x192>
 800a10a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a10e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a112:	4293      	cmp	r3, r2
 800a114:	db05      	blt.n	800a122 <_printf_float+0x1c6>
 800a116:	6822      	ldr	r2, [r4, #0]
 800a118:	6123      	str	r3, [r4, #16]
 800a11a:	07d1      	lsls	r1, r2, #31
 800a11c:	d5e8      	bpl.n	800a0f0 <_printf_float+0x194>
 800a11e:	3301      	adds	r3, #1
 800a120:	e7e5      	b.n	800a0ee <_printf_float+0x192>
 800a122:	2b00      	cmp	r3, #0
 800a124:	bfd4      	ite	le
 800a126:	f1c3 0302 	rsble	r3, r3, #2
 800a12a:	2301      	movgt	r3, #1
 800a12c:	4413      	add	r3, r2
 800a12e:	e7de      	b.n	800a0ee <_printf_float+0x192>
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	055a      	lsls	r2, r3, #21
 800a134:	d407      	bmi.n	800a146 <_printf_float+0x1ea>
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	4642      	mov	r2, r8
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	d12b      	bne.n	800a19c <_printf_float+0x240>
 800a144:	e767      	b.n	800a016 <_printf_float+0xba>
 800a146:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a14a:	f240 80dc 	bls.w	800a306 <_printf_float+0x3aa>
 800a14e:	2200      	movs	r2, #0
 800a150:	2300      	movs	r3, #0
 800a152:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a156:	f7f6 fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d033      	beq.n	800a1c6 <_printf_float+0x26a>
 800a15e:	2301      	movs	r3, #1
 800a160:	4a41      	ldr	r2, [pc, #260]	; (800a268 <_printf_float+0x30c>)
 800a162:	4631      	mov	r1, r6
 800a164:	4628      	mov	r0, r5
 800a166:	47b8      	blx	r7
 800a168:	3001      	adds	r0, #1
 800a16a:	f43f af54 	beq.w	800a016 <_printf_float+0xba>
 800a16e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a172:	429a      	cmp	r2, r3
 800a174:	db02      	blt.n	800a17c <_printf_float+0x220>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	07d8      	lsls	r0, r3, #31
 800a17a:	d50f      	bpl.n	800a19c <_printf_float+0x240>
 800a17c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a180:	4631      	mov	r1, r6
 800a182:	4628      	mov	r0, r5
 800a184:	47b8      	blx	r7
 800a186:	3001      	adds	r0, #1
 800a188:	f43f af45 	beq.w	800a016 <_printf_float+0xba>
 800a18c:	f04f 0800 	mov.w	r8, #0
 800a190:	f104 091a 	add.w	r9, r4, #26
 800a194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a196:	3b01      	subs	r3, #1
 800a198:	4543      	cmp	r3, r8
 800a19a:	dc09      	bgt.n	800a1b0 <_printf_float+0x254>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	079b      	lsls	r3, r3, #30
 800a1a0:	f100 8103 	bmi.w	800a3aa <_printf_float+0x44e>
 800a1a4:	68e0      	ldr	r0, [r4, #12]
 800a1a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a8:	4298      	cmp	r0, r3
 800a1aa:	bfb8      	it	lt
 800a1ac:	4618      	movlt	r0, r3
 800a1ae:	e734      	b.n	800a01a <_printf_float+0xbe>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	464a      	mov	r2, r9
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b8      	blx	r7
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	f43f af2b 	beq.w	800a016 <_printf_float+0xba>
 800a1c0:	f108 0801 	add.w	r8, r8, #1
 800a1c4:	e7e6      	b.n	800a194 <_printf_float+0x238>
 800a1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	dc2b      	bgt.n	800a224 <_printf_float+0x2c8>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4a26      	ldr	r2, [pc, #152]	; (800a268 <_printf_float+0x30c>)
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	47b8      	blx	r7
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	f43f af1d 	beq.w	800a016 <_printf_float+0xba>
 800a1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1de:	b923      	cbnz	r3, 800a1ea <_printf_float+0x28e>
 800a1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e2:	b913      	cbnz	r3, 800a1ea <_printf_float+0x28e>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	07d9      	lsls	r1, r3, #31
 800a1e8:	d5d8      	bpl.n	800a19c <_printf_float+0x240>
 800a1ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	47b8      	blx	r7
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	f43f af0e 	beq.w	800a016 <_printf_float+0xba>
 800a1fa:	f04f 0900 	mov.w	r9, #0
 800a1fe:	f104 0a1a 	add.w	sl, r4, #26
 800a202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a204:	425b      	negs	r3, r3
 800a206:	454b      	cmp	r3, r9
 800a208:	dc01      	bgt.n	800a20e <_printf_float+0x2b2>
 800a20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a20c:	e794      	b.n	800a138 <_printf_float+0x1dc>
 800a20e:	2301      	movs	r3, #1
 800a210:	4652      	mov	r2, sl
 800a212:	4631      	mov	r1, r6
 800a214:	4628      	mov	r0, r5
 800a216:	47b8      	blx	r7
 800a218:	3001      	adds	r0, #1
 800a21a:	f43f aefc 	beq.w	800a016 <_printf_float+0xba>
 800a21e:	f109 0901 	add.w	r9, r9, #1
 800a222:	e7ee      	b.n	800a202 <_printf_float+0x2a6>
 800a224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a226:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a228:	429a      	cmp	r2, r3
 800a22a:	bfa8      	it	ge
 800a22c:	461a      	movge	r2, r3
 800a22e:	2a00      	cmp	r2, #0
 800a230:	4691      	mov	r9, r2
 800a232:	dd07      	ble.n	800a244 <_printf_float+0x2e8>
 800a234:	4613      	mov	r3, r2
 800a236:	4631      	mov	r1, r6
 800a238:	4642      	mov	r2, r8
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f aee9 	beq.w	800a016 <_printf_float+0xba>
 800a244:	f104 031a 	add.w	r3, r4, #26
 800a248:	f04f 0b00 	mov.w	fp, #0
 800a24c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a250:	9306      	str	r3, [sp, #24]
 800a252:	e015      	b.n	800a280 <_printf_float+0x324>
 800a254:	7fefffff 	.word	0x7fefffff
 800a258:	0800bde8 	.word	0x0800bde8
 800a25c:	0800bde4 	.word	0x0800bde4
 800a260:	0800bdf0 	.word	0x0800bdf0
 800a264:	0800bdec 	.word	0x0800bdec
 800a268:	0800bdf4 	.word	0x0800bdf4
 800a26c:	2301      	movs	r3, #1
 800a26e:	9a06      	ldr	r2, [sp, #24]
 800a270:	4631      	mov	r1, r6
 800a272:	4628      	mov	r0, r5
 800a274:	47b8      	blx	r7
 800a276:	3001      	adds	r0, #1
 800a278:	f43f aecd 	beq.w	800a016 <_printf_float+0xba>
 800a27c:	f10b 0b01 	add.w	fp, fp, #1
 800a280:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a284:	ebaa 0309 	sub.w	r3, sl, r9
 800a288:	455b      	cmp	r3, fp
 800a28a:	dcef      	bgt.n	800a26c <_printf_float+0x310>
 800a28c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a290:	429a      	cmp	r2, r3
 800a292:	44d0      	add	r8, sl
 800a294:	db15      	blt.n	800a2c2 <_printf_float+0x366>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	07da      	lsls	r2, r3, #31
 800a29a:	d412      	bmi.n	800a2c2 <_printf_float+0x366>
 800a29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2a0:	eba3 020a 	sub.w	r2, r3, sl
 800a2a4:	eba3 0a01 	sub.w	sl, r3, r1
 800a2a8:	4592      	cmp	sl, r2
 800a2aa:	bfa8      	it	ge
 800a2ac:	4692      	movge	sl, r2
 800a2ae:	f1ba 0f00 	cmp.w	sl, #0
 800a2b2:	dc0e      	bgt.n	800a2d2 <_printf_float+0x376>
 800a2b4:	f04f 0800 	mov.w	r8, #0
 800a2b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2bc:	f104 091a 	add.w	r9, r4, #26
 800a2c0:	e019      	b.n	800a2f6 <_printf_float+0x39a>
 800a2c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	47b8      	blx	r7
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d1e5      	bne.n	800a29c <_printf_float+0x340>
 800a2d0:	e6a1      	b.n	800a016 <_printf_float+0xba>
 800a2d2:	4653      	mov	r3, sl
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d1e9      	bne.n	800a2b4 <_printf_float+0x358>
 800a2e0:	e699      	b.n	800a016 <_printf_float+0xba>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	464a      	mov	r2, r9
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f ae92 	beq.w	800a016 <_printf_float+0xba>
 800a2f2:	f108 0801 	add.w	r8, r8, #1
 800a2f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2fa:	1a9b      	subs	r3, r3, r2
 800a2fc:	eba3 030a 	sub.w	r3, r3, sl
 800a300:	4543      	cmp	r3, r8
 800a302:	dcee      	bgt.n	800a2e2 <_printf_float+0x386>
 800a304:	e74a      	b.n	800a19c <_printf_float+0x240>
 800a306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a308:	2a01      	cmp	r2, #1
 800a30a:	dc01      	bgt.n	800a310 <_printf_float+0x3b4>
 800a30c:	07db      	lsls	r3, r3, #31
 800a30e:	d53a      	bpl.n	800a386 <_printf_float+0x42a>
 800a310:	2301      	movs	r3, #1
 800a312:	4642      	mov	r2, r8
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f ae7b 	beq.w	800a016 <_printf_float+0xba>
 800a320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	f108 0801 	add.w	r8, r8, #1
 800a330:	f43f ae71 	beq.w	800a016 <_printf_float+0xba>
 800a334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a336:	2200      	movs	r2, #0
 800a338:	f103 3aff 	add.w	sl, r3, #4294967295
 800a33c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a340:	2300      	movs	r3, #0
 800a342:	f7f6 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a346:	b9c8      	cbnz	r0, 800a37c <_printf_float+0x420>
 800a348:	4653      	mov	r3, sl
 800a34a:	4642      	mov	r2, r8
 800a34c:	4631      	mov	r1, r6
 800a34e:	4628      	mov	r0, r5
 800a350:	47b8      	blx	r7
 800a352:	3001      	adds	r0, #1
 800a354:	d10e      	bne.n	800a374 <_printf_float+0x418>
 800a356:	e65e      	b.n	800a016 <_printf_float+0xba>
 800a358:	2301      	movs	r3, #1
 800a35a:	4652      	mov	r2, sl
 800a35c:	4631      	mov	r1, r6
 800a35e:	4628      	mov	r0, r5
 800a360:	47b8      	blx	r7
 800a362:	3001      	adds	r0, #1
 800a364:	f43f ae57 	beq.w	800a016 <_printf_float+0xba>
 800a368:	f108 0801 	add.w	r8, r8, #1
 800a36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36e:	3b01      	subs	r3, #1
 800a370:	4543      	cmp	r3, r8
 800a372:	dcf1      	bgt.n	800a358 <_printf_float+0x3fc>
 800a374:	464b      	mov	r3, r9
 800a376:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a37a:	e6de      	b.n	800a13a <_printf_float+0x1de>
 800a37c:	f04f 0800 	mov.w	r8, #0
 800a380:	f104 0a1a 	add.w	sl, r4, #26
 800a384:	e7f2      	b.n	800a36c <_printf_float+0x410>
 800a386:	2301      	movs	r3, #1
 800a388:	e7df      	b.n	800a34a <_printf_float+0x3ee>
 800a38a:	2301      	movs	r3, #1
 800a38c:	464a      	mov	r2, r9
 800a38e:	4631      	mov	r1, r6
 800a390:	4628      	mov	r0, r5
 800a392:	47b8      	blx	r7
 800a394:	3001      	adds	r0, #1
 800a396:	f43f ae3e 	beq.w	800a016 <_printf_float+0xba>
 800a39a:	f108 0801 	add.w	r8, r8, #1
 800a39e:	68e3      	ldr	r3, [r4, #12]
 800a3a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3a2:	1a9b      	subs	r3, r3, r2
 800a3a4:	4543      	cmp	r3, r8
 800a3a6:	dcf0      	bgt.n	800a38a <_printf_float+0x42e>
 800a3a8:	e6fc      	b.n	800a1a4 <_printf_float+0x248>
 800a3aa:	f04f 0800 	mov.w	r8, #0
 800a3ae:	f104 0919 	add.w	r9, r4, #25
 800a3b2:	e7f4      	b.n	800a39e <_printf_float+0x442>
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	f43f ae8b 	beq.w	800a0d0 <_printf_float+0x174>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a3c0:	ab09      	add	r3, sp, #36	; 0x24
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	ec49 8b10 	vmov	d0, r8, r9
 800a3c8:	6022      	str	r2, [r4, #0]
 800a3ca:	f8cd a004 	str.w	sl, [sp, #4]
 800a3ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f7ff fd2e 	bl	8009e34 <__cvt>
 800a3d8:	4680      	mov	r8, r0
 800a3da:	e648      	b.n	800a06e <_printf_float+0x112>

0800a3dc <_printf_common>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	4691      	mov	r9, r2
 800a3e2:	461f      	mov	r7, r3
 800a3e4:	688a      	ldr	r2, [r1, #8]
 800a3e6:	690b      	ldr	r3, [r1, #16]
 800a3e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	bfb8      	it	lt
 800a3f0:	4613      	movlt	r3, r2
 800a3f2:	f8c9 3000 	str.w	r3, [r9]
 800a3f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	b112      	cbz	r2, 800a406 <_printf_common+0x2a>
 800a400:	3301      	adds	r3, #1
 800a402:	f8c9 3000 	str.w	r3, [r9]
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	0699      	lsls	r1, r3, #26
 800a40a:	bf42      	ittt	mi
 800a40c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a410:	3302      	addmi	r3, #2
 800a412:	f8c9 3000 	strmi.w	r3, [r9]
 800a416:	6825      	ldr	r5, [r4, #0]
 800a418:	f015 0506 	ands.w	r5, r5, #6
 800a41c:	d107      	bne.n	800a42e <_printf_common+0x52>
 800a41e:	f104 0a19 	add.w	sl, r4, #25
 800a422:	68e3      	ldr	r3, [r4, #12]
 800a424:	f8d9 2000 	ldr.w	r2, [r9]
 800a428:	1a9b      	subs	r3, r3, r2
 800a42a:	42ab      	cmp	r3, r5
 800a42c:	dc28      	bgt.n	800a480 <_printf_common+0xa4>
 800a42e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a432:	6822      	ldr	r2, [r4, #0]
 800a434:	3300      	adds	r3, #0
 800a436:	bf18      	it	ne
 800a438:	2301      	movne	r3, #1
 800a43a:	0692      	lsls	r2, r2, #26
 800a43c:	d42d      	bmi.n	800a49a <_printf_common+0xbe>
 800a43e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a442:	4639      	mov	r1, r7
 800a444:	4630      	mov	r0, r6
 800a446:	47c0      	blx	r8
 800a448:	3001      	adds	r0, #1
 800a44a:	d020      	beq.n	800a48e <_printf_common+0xb2>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	68e5      	ldr	r5, [r4, #12]
 800a450:	f8d9 2000 	ldr.w	r2, [r9]
 800a454:	f003 0306 	and.w	r3, r3, #6
 800a458:	2b04      	cmp	r3, #4
 800a45a:	bf08      	it	eq
 800a45c:	1aad      	subeq	r5, r5, r2
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	6922      	ldr	r2, [r4, #16]
 800a462:	bf0c      	ite	eq
 800a464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a468:	2500      	movne	r5, #0
 800a46a:	4293      	cmp	r3, r2
 800a46c:	bfc4      	itt	gt
 800a46e:	1a9b      	subgt	r3, r3, r2
 800a470:	18ed      	addgt	r5, r5, r3
 800a472:	f04f 0900 	mov.w	r9, #0
 800a476:	341a      	adds	r4, #26
 800a478:	454d      	cmp	r5, r9
 800a47a:	d11a      	bne.n	800a4b2 <_printf_common+0xd6>
 800a47c:	2000      	movs	r0, #0
 800a47e:	e008      	b.n	800a492 <_printf_common+0xb6>
 800a480:	2301      	movs	r3, #1
 800a482:	4652      	mov	r2, sl
 800a484:	4639      	mov	r1, r7
 800a486:	4630      	mov	r0, r6
 800a488:	47c0      	blx	r8
 800a48a:	3001      	adds	r0, #1
 800a48c:	d103      	bne.n	800a496 <_printf_common+0xba>
 800a48e:	f04f 30ff 	mov.w	r0, #4294967295
 800a492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a496:	3501      	adds	r5, #1
 800a498:	e7c3      	b.n	800a422 <_printf_common+0x46>
 800a49a:	18e1      	adds	r1, r4, r3
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	2030      	movs	r0, #48	; 0x30
 800a4a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4a4:	4422      	add	r2, r4
 800a4a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4ae:	3302      	adds	r3, #2
 800a4b0:	e7c5      	b.n	800a43e <_printf_common+0x62>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4622      	mov	r2, r4
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	47c0      	blx	r8
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d0e6      	beq.n	800a48e <_printf_common+0xb2>
 800a4c0:	f109 0901 	add.w	r9, r9, #1
 800a4c4:	e7d8      	b.n	800a478 <_printf_common+0x9c>
	...

0800a4c8 <_printf_i>:
 800a4c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	7e09      	ldrb	r1, [r1, #24]
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	296e      	cmp	r1, #110	; 0x6e
 800a4d8:	4617      	mov	r7, r2
 800a4da:	4606      	mov	r6, r0
 800a4dc:	4698      	mov	r8, r3
 800a4de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4e0:	f000 80b3 	beq.w	800a64a <_printf_i+0x182>
 800a4e4:	d822      	bhi.n	800a52c <_printf_i+0x64>
 800a4e6:	2963      	cmp	r1, #99	; 0x63
 800a4e8:	d036      	beq.n	800a558 <_printf_i+0x90>
 800a4ea:	d80a      	bhi.n	800a502 <_printf_i+0x3a>
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	f000 80b9 	beq.w	800a664 <_printf_i+0x19c>
 800a4f2:	2958      	cmp	r1, #88	; 0x58
 800a4f4:	f000 8083 	beq.w	800a5fe <_printf_i+0x136>
 800a4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a500:	e032      	b.n	800a568 <_printf_i+0xa0>
 800a502:	2964      	cmp	r1, #100	; 0x64
 800a504:	d001      	beq.n	800a50a <_printf_i+0x42>
 800a506:	2969      	cmp	r1, #105	; 0x69
 800a508:	d1f6      	bne.n	800a4f8 <_printf_i+0x30>
 800a50a:	6820      	ldr	r0, [r4, #0]
 800a50c:	6813      	ldr	r3, [r2, #0]
 800a50e:	0605      	lsls	r5, r0, #24
 800a510:	f103 0104 	add.w	r1, r3, #4
 800a514:	d52a      	bpl.n	800a56c <_printf_i+0xa4>
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6011      	str	r1, [r2, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	da03      	bge.n	800a526 <_printf_i+0x5e>
 800a51e:	222d      	movs	r2, #45	; 0x2d
 800a520:	425b      	negs	r3, r3
 800a522:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a526:	486f      	ldr	r0, [pc, #444]	; (800a6e4 <_printf_i+0x21c>)
 800a528:	220a      	movs	r2, #10
 800a52a:	e039      	b.n	800a5a0 <_printf_i+0xd8>
 800a52c:	2973      	cmp	r1, #115	; 0x73
 800a52e:	f000 809d 	beq.w	800a66c <_printf_i+0x1a4>
 800a532:	d808      	bhi.n	800a546 <_printf_i+0x7e>
 800a534:	296f      	cmp	r1, #111	; 0x6f
 800a536:	d020      	beq.n	800a57a <_printf_i+0xb2>
 800a538:	2970      	cmp	r1, #112	; 0x70
 800a53a:	d1dd      	bne.n	800a4f8 <_printf_i+0x30>
 800a53c:	6823      	ldr	r3, [r4, #0]
 800a53e:	f043 0320 	orr.w	r3, r3, #32
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	e003      	b.n	800a54e <_printf_i+0x86>
 800a546:	2975      	cmp	r1, #117	; 0x75
 800a548:	d017      	beq.n	800a57a <_printf_i+0xb2>
 800a54a:	2978      	cmp	r1, #120	; 0x78
 800a54c:	d1d4      	bne.n	800a4f8 <_printf_i+0x30>
 800a54e:	2378      	movs	r3, #120	; 0x78
 800a550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a554:	4864      	ldr	r0, [pc, #400]	; (800a6e8 <_printf_i+0x220>)
 800a556:	e055      	b.n	800a604 <_printf_i+0x13c>
 800a558:	6813      	ldr	r3, [r2, #0]
 800a55a:	1d19      	adds	r1, r3, #4
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6011      	str	r1, [r2, #0]
 800a560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a568:	2301      	movs	r3, #1
 800a56a:	e08c      	b.n	800a686 <_printf_i+0x1be>
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6011      	str	r1, [r2, #0]
 800a570:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a574:	bf18      	it	ne
 800a576:	b21b      	sxthne	r3, r3
 800a578:	e7cf      	b.n	800a51a <_printf_i+0x52>
 800a57a:	6813      	ldr	r3, [r2, #0]
 800a57c:	6825      	ldr	r5, [r4, #0]
 800a57e:	1d18      	adds	r0, r3, #4
 800a580:	6010      	str	r0, [r2, #0]
 800a582:	0628      	lsls	r0, r5, #24
 800a584:	d501      	bpl.n	800a58a <_printf_i+0xc2>
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	e002      	b.n	800a590 <_printf_i+0xc8>
 800a58a:	0668      	lsls	r0, r5, #25
 800a58c:	d5fb      	bpl.n	800a586 <_printf_i+0xbe>
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	4854      	ldr	r0, [pc, #336]	; (800a6e4 <_printf_i+0x21c>)
 800a592:	296f      	cmp	r1, #111	; 0x6f
 800a594:	bf14      	ite	ne
 800a596:	220a      	movne	r2, #10
 800a598:	2208      	moveq	r2, #8
 800a59a:	2100      	movs	r1, #0
 800a59c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5a0:	6865      	ldr	r5, [r4, #4]
 800a5a2:	60a5      	str	r5, [r4, #8]
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	f2c0 8095 	blt.w	800a6d4 <_printf_i+0x20c>
 800a5aa:	6821      	ldr	r1, [r4, #0]
 800a5ac:	f021 0104 	bic.w	r1, r1, #4
 800a5b0:	6021      	str	r1, [r4, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d13d      	bne.n	800a632 <_printf_i+0x16a>
 800a5b6:	2d00      	cmp	r5, #0
 800a5b8:	f040 808e 	bne.w	800a6d8 <_printf_i+0x210>
 800a5bc:	4665      	mov	r5, ip
 800a5be:	2a08      	cmp	r2, #8
 800a5c0:	d10b      	bne.n	800a5da <_printf_i+0x112>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	07db      	lsls	r3, r3, #31
 800a5c6:	d508      	bpl.n	800a5da <_printf_i+0x112>
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	6862      	ldr	r2, [r4, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	bfde      	ittt	le
 800a5d0:	2330      	movle	r3, #48	; 0x30
 800a5d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5da:	ebac 0305 	sub.w	r3, ip, r5
 800a5de:	6123      	str	r3, [r4, #16]
 800a5e0:	f8cd 8000 	str.w	r8, [sp]
 800a5e4:	463b      	mov	r3, r7
 800a5e6:	aa03      	add	r2, sp, #12
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f7ff fef6 	bl	800a3dc <_printf_common>
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d14d      	bne.n	800a690 <_printf_i+0x1c8>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	b005      	add	sp, #20
 800a5fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5fe:	4839      	ldr	r0, [pc, #228]	; (800a6e4 <_printf_i+0x21c>)
 800a600:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a604:	6813      	ldr	r3, [r2, #0]
 800a606:	6821      	ldr	r1, [r4, #0]
 800a608:	1d1d      	adds	r5, r3, #4
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6015      	str	r5, [r2, #0]
 800a60e:	060a      	lsls	r2, r1, #24
 800a610:	d50b      	bpl.n	800a62a <_printf_i+0x162>
 800a612:	07ca      	lsls	r2, r1, #31
 800a614:	bf44      	itt	mi
 800a616:	f041 0120 	orrmi.w	r1, r1, #32
 800a61a:	6021      	strmi	r1, [r4, #0]
 800a61c:	b91b      	cbnz	r3, 800a626 <_printf_i+0x15e>
 800a61e:	6822      	ldr	r2, [r4, #0]
 800a620:	f022 0220 	bic.w	r2, r2, #32
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	2210      	movs	r2, #16
 800a628:	e7b7      	b.n	800a59a <_printf_i+0xd2>
 800a62a:	064d      	lsls	r5, r1, #25
 800a62c:	bf48      	it	mi
 800a62e:	b29b      	uxthmi	r3, r3
 800a630:	e7ef      	b.n	800a612 <_printf_i+0x14a>
 800a632:	4665      	mov	r5, ip
 800a634:	fbb3 f1f2 	udiv	r1, r3, r2
 800a638:	fb02 3311 	mls	r3, r2, r1, r3
 800a63c:	5cc3      	ldrb	r3, [r0, r3]
 800a63e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a642:	460b      	mov	r3, r1
 800a644:	2900      	cmp	r1, #0
 800a646:	d1f5      	bne.n	800a634 <_printf_i+0x16c>
 800a648:	e7b9      	b.n	800a5be <_printf_i+0xf6>
 800a64a:	6813      	ldr	r3, [r2, #0]
 800a64c:	6825      	ldr	r5, [r4, #0]
 800a64e:	6961      	ldr	r1, [r4, #20]
 800a650:	1d18      	adds	r0, r3, #4
 800a652:	6010      	str	r0, [r2, #0]
 800a654:	0628      	lsls	r0, r5, #24
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	d501      	bpl.n	800a65e <_printf_i+0x196>
 800a65a:	6019      	str	r1, [r3, #0]
 800a65c:	e002      	b.n	800a664 <_printf_i+0x19c>
 800a65e:	066a      	lsls	r2, r5, #25
 800a660:	d5fb      	bpl.n	800a65a <_printf_i+0x192>
 800a662:	8019      	strh	r1, [r3, #0]
 800a664:	2300      	movs	r3, #0
 800a666:	6123      	str	r3, [r4, #16]
 800a668:	4665      	mov	r5, ip
 800a66a:	e7b9      	b.n	800a5e0 <_printf_i+0x118>
 800a66c:	6813      	ldr	r3, [r2, #0]
 800a66e:	1d19      	adds	r1, r3, #4
 800a670:	6011      	str	r1, [r2, #0]
 800a672:	681d      	ldr	r5, [r3, #0]
 800a674:	6862      	ldr	r2, [r4, #4]
 800a676:	2100      	movs	r1, #0
 800a678:	4628      	mov	r0, r5
 800a67a:	f7f5 fdb1 	bl	80001e0 <memchr>
 800a67e:	b108      	cbz	r0, 800a684 <_printf_i+0x1bc>
 800a680:	1b40      	subs	r0, r0, r5
 800a682:	6060      	str	r0, [r4, #4]
 800a684:	6863      	ldr	r3, [r4, #4]
 800a686:	6123      	str	r3, [r4, #16]
 800a688:	2300      	movs	r3, #0
 800a68a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a68e:	e7a7      	b.n	800a5e0 <_printf_i+0x118>
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	462a      	mov	r2, r5
 800a694:	4639      	mov	r1, r7
 800a696:	4630      	mov	r0, r6
 800a698:	47c0      	blx	r8
 800a69a:	3001      	adds	r0, #1
 800a69c:	d0aa      	beq.n	800a5f4 <_printf_i+0x12c>
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	079b      	lsls	r3, r3, #30
 800a6a2:	d413      	bmi.n	800a6cc <_printf_i+0x204>
 800a6a4:	68e0      	ldr	r0, [r4, #12]
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	4298      	cmp	r0, r3
 800a6aa:	bfb8      	it	lt
 800a6ac:	4618      	movlt	r0, r3
 800a6ae:	e7a3      	b.n	800a5f8 <_printf_i+0x130>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	464a      	mov	r2, r9
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	47c0      	blx	r8
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	d09a      	beq.n	800a5f4 <_printf_i+0x12c>
 800a6be:	3501      	adds	r5, #1
 800a6c0:	68e3      	ldr	r3, [r4, #12]
 800a6c2:	9a03      	ldr	r2, [sp, #12]
 800a6c4:	1a9b      	subs	r3, r3, r2
 800a6c6:	42ab      	cmp	r3, r5
 800a6c8:	dcf2      	bgt.n	800a6b0 <_printf_i+0x1e8>
 800a6ca:	e7eb      	b.n	800a6a4 <_printf_i+0x1dc>
 800a6cc:	2500      	movs	r5, #0
 800a6ce:	f104 0919 	add.w	r9, r4, #25
 800a6d2:	e7f5      	b.n	800a6c0 <_printf_i+0x1f8>
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1ac      	bne.n	800a632 <_printf_i+0x16a>
 800a6d8:	7803      	ldrb	r3, [r0, #0]
 800a6da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6e2:	e76c      	b.n	800a5be <_printf_i+0xf6>
 800a6e4:	0800bdf6 	.word	0x0800bdf6
 800a6e8:	0800be07 	.word	0x0800be07

0800a6ec <_sbrk_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4c06      	ldr	r4, [pc, #24]	; (800a708 <_sbrk_r+0x1c>)
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	6023      	str	r3, [r4, #0]
 800a6f8:	f7f7 fc80 	bl	8001ffc <_sbrk>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_sbrk_r+0x1a>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	b103      	cbz	r3, 800a706 <_sbrk_r+0x1a>
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	20001e28 	.word	0x20001e28

0800a70c <siprintf>:
 800a70c:	b40e      	push	{r1, r2, r3}
 800a70e:	b500      	push	{lr}
 800a710:	b09c      	sub	sp, #112	; 0x70
 800a712:	ab1d      	add	r3, sp, #116	; 0x74
 800a714:	9002      	str	r0, [sp, #8]
 800a716:	9006      	str	r0, [sp, #24]
 800a718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a71c:	4809      	ldr	r0, [pc, #36]	; (800a744 <siprintf+0x38>)
 800a71e:	9107      	str	r1, [sp, #28]
 800a720:	9104      	str	r1, [sp, #16]
 800a722:	4909      	ldr	r1, [pc, #36]	; (800a748 <siprintf+0x3c>)
 800a724:	f853 2b04 	ldr.w	r2, [r3], #4
 800a728:	9105      	str	r1, [sp, #20]
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	a902      	add	r1, sp, #8
 800a730:	f001 f9b0 	bl	800ba94 <_svfiprintf_r>
 800a734:	9b02      	ldr	r3, [sp, #8]
 800a736:	2200      	movs	r2, #0
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	b01c      	add	sp, #112	; 0x70
 800a73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a740:	b003      	add	sp, #12
 800a742:	4770      	bx	lr
 800a744:	20000188 	.word	0x20000188
 800a748:	ffff0208 	.word	0xffff0208

0800a74c <quorem>:
 800a74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	6903      	ldr	r3, [r0, #16]
 800a752:	690c      	ldr	r4, [r1, #16]
 800a754:	42a3      	cmp	r3, r4
 800a756:	4680      	mov	r8, r0
 800a758:	f2c0 8082 	blt.w	800a860 <quorem+0x114>
 800a75c:	3c01      	subs	r4, #1
 800a75e:	f101 0714 	add.w	r7, r1, #20
 800a762:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a766:	f100 0614 	add.w	r6, r0, #20
 800a76a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a76e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a772:	eb06 030c 	add.w	r3, r6, ip
 800a776:	3501      	adds	r5, #1
 800a778:	eb07 090c 	add.w	r9, r7, ip
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a782:	b395      	cbz	r5, 800a7ea <quorem+0x9e>
 800a784:	f04f 0a00 	mov.w	sl, #0
 800a788:	4638      	mov	r0, r7
 800a78a:	46b6      	mov	lr, r6
 800a78c:	46d3      	mov	fp, sl
 800a78e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a792:	b293      	uxth	r3, r2
 800a794:	fb05 a303 	mla	r3, r5, r3, sl
 800a798:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	ebab 0303 	sub.w	r3, fp, r3
 800a7a2:	0c12      	lsrs	r2, r2, #16
 800a7a4:	f8de b000 	ldr.w	fp, [lr]
 800a7a8:	fb05 a202 	mla	r2, r5, r2, sl
 800a7ac:	fa13 f38b 	uxtah	r3, r3, fp
 800a7b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a7b4:	fa1f fb82 	uxth.w	fp, r2
 800a7b8:	f8de 2000 	ldr.w	r2, [lr]
 800a7bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a7c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7ca:	4581      	cmp	r9, r0
 800a7cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a7d0:	f84e 3b04 	str.w	r3, [lr], #4
 800a7d4:	d2db      	bcs.n	800a78e <quorem+0x42>
 800a7d6:	f856 300c 	ldr.w	r3, [r6, ip]
 800a7da:	b933      	cbnz	r3, 800a7ea <quorem+0x9e>
 800a7dc:	9b01      	ldr	r3, [sp, #4]
 800a7de:	3b04      	subs	r3, #4
 800a7e0:	429e      	cmp	r6, r3
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	d330      	bcc.n	800a848 <quorem+0xfc>
 800a7e6:	f8c8 4010 	str.w	r4, [r8, #16]
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	f001 f824 	bl	800b838 <__mcmp>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	db25      	blt.n	800a840 <quorem+0xf4>
 800a7f4:	3501      	adds	r5, #1
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f04f 0c00 	mov.w	ip, #0
 800a7fc:	f857 2b04 	ldr.w	r2, [r7], #4
 800a800:	f8d0 e000 	ldr.w	lr, [r0]
 800a804:	b293      	uxth	r3, r2
 800a806:	ebac 0303 	sub.w	r3, ip, r3
 800a80a:	0c12      	lsrs	r2, r2, #16
 800a80c:	fa13 f38e 	uxtah	r3, r3, lr
 800a810:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a818:	b29b      	uxth	r3, r3
 800a81a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a81e:	45b9      	cmp	r9, r7
 800a820:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a824:	f840 3b04 	str.w	r3, [r0], #4
 800a828:	d2e8      	bcs.n	800a7fc <quorem+0xb0>
 800a82a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a82e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a832:	b92a      	cbnz	r2, 800a840 <quorem+0xf4>
 800a834:	3b04      	subs	r3, #4
 800a836:	429e      	cmp	r6, r3
 800a838:	461a      	mov	r2, r3
 800a83a:	d30b      	bcc.n	800a854 <quorem+0x108>
 800a83c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a840:	4628      	mov	r0, r5
 800a842:	b003      	add	sp, #12
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	3b04      	subs	r3, #4
 800a84c:	2a00      	cmp	r2, #0
 800a84e:	d1ca      	bne.n	800a7e6 <quorem+0x9a>
 800a850:	3c01      	subs	r4, #1
 800a852:	e7c5      	b.n	800a7e0 <quorem+0x94>
 800a854:	6812      	ldr	r2, [r2, #0]
 800a856:	3b04      	subs	r3, #4
 800a858:	2a00      	cmp	r2, #0
 800a85a:	d1ef      	bne.n	800a83c <quorem+0xf0>
 800a85c:	3c01      	subs	r4, #1
 800a85e:	e7ea      	b.n	800a836 <quorem+0xea>
 800a860:	2000      	movs	r0, #0
 800a862:	e7ee      	b.n	800a842 <quorem+0xf6>
 800a864:	0000      	movs	r0, r0
	...

0800a868 <_dtoa_r>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	ec57 6b10 	vmov	r6, r7, d0
 800a870:	b097      	sub	sp, #92	; 0x5c
 800a872:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a874:	9106      	str	r1, [sp, #24]
 800a876:	4604      	mov	r4, r0
 800a878:	920b      	str	r2, [sp, #44]	; 0x2c
 800a87a:	9312      	str	r3, [sp, #72]	; 0x48
 800a87c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a880:	e9cd 6700 	strd	r6, r7, [sp]
 800a884:	b93d      	cbnz	r5, 800a896 <_dtoa_r+0x2e>
 800a886:	2010      	movs	r0, #16
 800a888:	f7ff fa14 	bl	8009cb4 <malloc>
 800a88c:	6260      	str	r0, [r4, #36]	; 0x24
 800a88e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a892:	6005      	str	r5, [r0, #0]
 800a894:	60c5      	str	r5, [r0, #12]
 800a896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a898:	6819      	ldr	r1, [r3, #0]
 800a89a:	b151      	cbz	r1, 800a8b2 <_dtoa_r+0x4a>
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	604a      	str	r2, [r1, #4]
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4093      	lsls	r3, r2
 800a8a4:	608b      	str	r3, [r1, #8]
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 fde5 	bl	800b476 <_Bfree>
 800a8ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	1e3b      	subs	r3, r7, #0
 800a8b4:	bfbb      	ittet	lt
 800a8b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8ba:	9301      	strlt	r3, [sp, #4]
 800a8bc:	2300      	movge	r3, #0
 800a8be:	2201      	movlt	r2, #1
 800a8c0:	bfac      	ite	ge
 800a8c2:	f8c8 3000 	strge.w	r3, [r8]
 800a8c6:	f8c8 2000 	strlt.w	r2, [r8]
 800a8ca:	4baf      	ldr	r3, [pc, #700]	; (800ab88 <_dtoa_r+0x320>)
 800a8cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8d0:	ea33 0308 	bics.w	r3, r3, r8
 800a8d4:	d114      	bne.n	800a900 <_dtoa_r+0x98>
 800a8d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	9b00      	ldr	r3, [sp, #0]
 800a8e0:	b923      	cbnz	r3, 800a8ec <_dtoa_r+0x84>
 800a8e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f000 8542 	beq.w	800b370 <_dtoa_r+0xb08>
 800a8ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ab9c <_dtoa_r+0x334>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 8544 	beq.w	800b380 <_dtoa_r+0xb18>
 800a8f8:	f10b 0303 	add.w	r3, fp, #3
 800a8fc:	f000 bd3e 	b.w	800b37c <_dtoa_r+0xb14>
 800a900:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a904:	2200      	movs	r2, #0
 800a906:	2300      	movs	r3, #0
 800a908:	4630      	mov	r0, r6
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f6 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a910:	4681      	mov	r9, r0
 800a912:	b168      	cbz	r0, 800a930 <_dtoa_r+0xc8>
 800a914:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a916:	2301      	movs	r3, #1
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 8524 	beq.w	800b36a <_dtoa_r+0xb02>
 800a922:	4b9a      	ldr	r3, [pc, #616]	; (800ab8c <_dtoa_r+0x324>)
 800a924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a926:	f103 3bff 	add.w	fp, r3, #4294967295
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	f000 bd28 	b.w	800b380 <_dtoa_r+0xb18>
 800a930:	aa14      	add	r2, sp, #80	; 0x50
 800a932:	a915      	add	r1, sp, #84	; 0x54
 800a934:	ec47 6b10 	vmov	d0, r6, r7
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 fff4 	bl	800b926 <__d2b>
 800a93e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a942:	9004      	str	r0, [sp, #16]
 800a944:	2d00      	cmp	r5, #0
 800a946:	d07c      	beq.n	800aa42 <_dtoa_r+0x1da>
 800a948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a94c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a950:	46b2      	mov	sl, r6
 800a952:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a95a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a95e:	2200      	movs	r2, #0
 800a960:	4b8b      	ldr	r3, [pc, #556]	; (800ab90 <_dtoa_r+0x328>)
 800a962:	4650      	mov	r0, sl
 800a964:	4659      	mov	r1, fp
 800a966:	f7f5 fc8f 	bl	8000288 <__aeabi_dsub>
 800a96a:	a381      	add	r3, pc, #516	; (adr r3, 800ab70 <_dtoa_r+0x308>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	f7f5 fe42 	bl	80005f8 <__aeabi_dmul>
 800a974:	a380      	add	r3, pc, #512	; (adr r3, 800ab78 <_dtoa_r+0x310>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f5 fc87 	bl	800028c <__adddf3>
 800a97e:	4606      	mov	r6, r0
 800a980:	4628      	mov	r0, r5
 800a982:	460f      	mov	r7, r1
 800a984:	f7f5 fdce 	bl	8000524 <__aeabi_i2d>
 800a988:	a37d      	add	r3, pc, #500	; (adr r3, 800ab80 <_dtoa_r+0x318>)
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f7f5 fe33 	bl	80005f8 <__aeabi_dmul>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4630      	mov	r0, r6
 800a998:	4639      	mov	r1, r7
 800a99a:	f7f5 fc77 	bl	800028c <__adddf3>
 800a99e:	4606      	mov	r6, r0
 800a9a0:	460f      	mov	r7, r1
 800a9a2:	f7f6 f8d9 	bl	8000b58 <__aeabi_d2iz>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4682      	mov	sl, r0
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	f7f6 f894 	bl	8000adc <__aeabi_dcmplt>
 800a9b4:	b148      	cbz	r0, 800a9ca <_dtoa_r+0x162>
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	f7f5 fdb4 	bl	8000524 <__aeabi_i2d>
 800a9bc:	4632      	mov	r2, r6
 800a9be:	463b      	mov	r3, r7
 800a9c0:	f7f6 f882 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9c4:	b908      	cbnz	r0, 800a9ca <_dtoa_r+0x162>
 800a9c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9ca:	f1ba 0f16 	cmp.w	sl, #22
 800a9ce:	d859      	bhi.n	800aa84 <_dtoa_r+0x21c>
 800a9d0:	4970      	ldr	r1, [pc, #448]	; (800ab94 <_dtoa_r+0x32c>)
 800a9d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a9d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9de:	f7f6 f89b 	bl	8000b18 <__aeabi_dcmpgt>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d050      	beq.n	800aa88 <_dtoa_r+0x220>
 800a9e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9f0:	1b5d      	subs	r5, r3, r5
 800a9f2:	f1b5 0801 	subs.w	r8, r5, #1
 800a9f6:	bf49      	itett	mi
 800a9f8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a9fc:	2300      	movpl	r3, #0
 800a9fe:	9305      	strmi	r3, [sp, #20]
 800aa00:	f04f 0800 	movmi.w	r8, #0
 800aa04:	bf58      	it	pl
 800aa06:	9305      	strpl	r3, [sp, #20]
 800aa08:	f1ba 0f00 	cmp.w	sl, #0
 800aa0c:	db3e      	blt.n	800aa8c <_dtoa_r+0x224>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	44d0      	add	r8, sl
 800aa12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aa16:	9307      	str	r3, [sp, #28]
 800aa18:	9b06      	ldr	r3, [sp, #24]
 800aa1a:	2b09      	cmp	r3, #9
 800aa1c:	f200 8090 	bhi.w	800ab40 <_dtoa_r+0x2d8>
 800aa20:	2b05      	cmp	r3, #5
 800aa22:	bfc4      	itt	gt
 800aa24:	3b04      	subgt	r3, #4
 800aa26:	9306      	strgt	r3, [sp, #24]
 800aa28:	9b06      	ldr	r3, [sp, #24]
 800aa2a:	f1a3 0302 	sub.w	r3, r3, #2
 800aa2e:	bfcc      	ite	gt
 800aa30:	2500      	movgt	r5, #0
 800aa32:	2501      	movle	r5, #1
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	f200 808f 	bhi.w	800ab58 <_dtoa_r+0x2f0>
 800aa3a:	e8df f003 	tbb	[pc, r3]
 800aa3e:	7f7d      	.short	0x7f7d
 800aa40:	7131      	.short	0x7131
 800aa42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800aa46:	441d      	add	r5, r3
 800aa48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800aa4c:	2820      	cmp	r0, #32
 800aa4e:	dd13      	ble.n	800aa78 <_dtoa_r+0x210>
 800aa50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	fa08 f800 	lsl.w	r8, r8, r0
 800aa5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800aa5e:	fa23 f000 	lsr.w	r0, r3, r0
 800aa62:	ea48 0000 	orr.w	r0, r8, r0
 800aa66:	f7f5 fd4d 	bl	8000504 <__aeabi_ui2d>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800aa72:	3d01      	subs	r5, #1
 800aa74:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa76:	e772      	b.n	800a95e <_dtoa_r+0xf6>
 800aa78:	9b00      	ldr	r3, [sp, #0]
 800aa7a:	f1c0 0020 	rsb	r0, r0, #32
 800aa7e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa82:	e7f0      	b.n	800aa66 <_dtoa_r+0x1fe>
 800aa84:	2301      	movs	r3, #1
 800aa86:	e7b1      	b.n	800a9ec <_dtoa_r+0x184>
 800aa88:	900f      	str	r0, [sp, #60]	; 0x3c
 800aa8a:	e7b0      	b.n	800a9ee <_dtoa_r+0x186>
 800aa8c:	9b05      	ldr	r3, [sp, #20]
 800aa8e:	eba3 030a 	sub.w	r3, r3, sl
 800aa92:	9305      	str	r3, [sp, #20]
 800aa94:	f1ca 0300 	rsb	r3, sl, #0
 800aa98:	9307      	str	r3, [sp, #28]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	930e      	str	r3, [sp, #56]	; 0x38
 800aa9e:	e7bb      	b.n	800aa18 <_dtoa_r+0x1b0>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	930a      	str	r3, [sp, #40]	; 0x28
 800aaa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	dd59      	ble.n	800ab5e <_dtoa_r+0x2f6>
 800aaaa:	9302      	str	r3, [sp, #8]
 800aaac:	4699      	mov	r9, r3
 800aaae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aab0:	2200      	movs	r2, #0
 800aab2:	6072      	str	r2, [r6, #4]
 800aab4:	2204      	movs	r2, #4
 800aab6:	f102 0014 	add.w	r0, r2, #20
 800aaba:	4298      	cmp	r0, r3
 800aabc:	6871      	ldr	r1, [r6, #4]
 800aabe:	d953      	bls.n	800ab68 <_dtoa_r+0x300>
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 fca4 	bl	800b40e <_Balloc>
 800aac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aac8:	6030      	str	r0, [r6, #0]
 800aaca:	f1b9 0f0e 	cmp.w	r9, #14
 800aace:	f8d3 b000 	ldr.w	fp, [r3]
 800aad2:	f200 80e6 	bhi.w	800aca2 <_dtoa_r+0x43a>
 800aad6:	2d00      	cmp	r5, #0
 800aad8:	f000 80e3 	beq.w	800aca2 <_dtoa_r+0x43a>
 800aadc:	ed9d 7b00 	vldr	d7, [sp]
 800aae0:	f1ba 0f00 	cmp.w	sl, #0
 800aae4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800aae8:	dd74      	ble.n	800abd4 <_dtoa_r+0x36c>
 800aaea:	4a2a      	ldr	r2, [pc, #168]	; (800ab94 <_dtoa_r+0x32c>)
 800aaec:	f00a 030f 	and.w	r3, sl, #15
 800aaf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aaf4:	ed93 7b00 	vldr	d7, [r3]
 800aaf8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800aafc:	06f0      	lsls	r0, r6, #27
 800aafe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ab02:	d565      	bpl.n	800abd0 <_dtoa_r+0x368>
 800ab04:	4b24      	ldr	r3, [pc, #144]	; (800ab98 <_dtoa_r+0x330>)
 800ab06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab0e:	f7f5 fe9d 	bl	800084c <__aeabi_ddiv>
 800ab12:	e9cd 0100 	strd	r0, r1, [sp]
 800ab16:	f006 060f 	and.w	r6, r6, #15
 800ab1a:	2503      	movs	r5, #3
 800ab1c:	4f1e      	ldr	r7, [pc, #120]	; (800ab98 <_dtoa_r+0x330>)
 800ab1e:	e04c      	b.n	800abba <_dtoa_r+0x352>
 800ab20:	2301      	movs	r3, #1
 800ab22:	930a      	str	r3, [sp, #40]	; 0x28
 800ab24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab26:	4453      	add	r3, sl
 800ab28:	f103 0901 	add.w	r9, r3, #1
 800ab2c:	9302      	str	r3, [sp, #8]
 800ab2e:	464b      	mov	r3, r9
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	bfb8      	it	lt
 800ab34:	2301      	movlt	r3, #1
 800ab36:	e7ba      	b.n	800aaae <_dtoa_r+0x246>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e7b2      	b.n	800aaa2 <_dtoa_r+0x23a>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e7f0      	b.n	800ab22 <_dtoa_r+0x2ba>
 800ab40:	2501      	movs	r5, #1
 800ab42:	2300      	movs	r3, #0
 800ab44:	9306      	str	r3, [sp, #24]
 800ab46:	950a      	str	r5, [sp, #40]	; 0x28
 800ab48:	f04f 33ff 	mov.w	r3, #4294967295
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	4699      	mov	r9, r3
 800ab50:	2200      	movs	r2, #0
 800ab52:	2312      	movs	r3, #18
 800ab54:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab56:	e7aa      	b.n	800aaae <_dtoa_r+0x246>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab5c:	e7f4      	b.n	800ab48 <_dtoa_r+0x2e0>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	9302      	str	r3, [sp, #8]
 800ab62:	4699      	mov	r9, r3
 800ab64:	461a      	mov	r2, r3
 800ab66:	e7f5      	b.n	800ab54 <_dtoa_r+0x2ec>
 800ab68:	3101      	adds	r1, #1
 800ab6a:	6071      	str	r1, [r6, #4]
 800ab6c:	0052      	lsls	r2, r2, #1
 800ab6e:	e7a2      	b.n	800aab6 <_dtoa_r+0x24e>
 800ab70:	636f4361 	.word	0x636f4361
 800ab74:	3fd287a7 	.word	0x3fd287a7
 800ab78:	8b60c8b3 	.word	0x8b60c8b3
 800ab7c:	3fc68a28 	.word	0x3fc68a28
 800ab80:	509f79fb 	.word	0x509f79fb
 800ab84:	3fd34413 	.word	0x3fd34413
 800ab88:	7ff00000 	.word	0x7ff00000
 800ab8c:	0800bdf5 	.word	0x0800bdf5
 800ab90:	3ff80000 	.word	0x3ff80000
 800ab94:	0800be50 	.word	0x0800be50
 800ab98:	0800be28 	.word	0x0800be28
 800ab9c:	0800be21 	.word	0x0800be21
 800aba0:	07f1      	lsls	r1, r6, #31
 800aba2:	d508      	bpl.n	800abb6 <_dtoa_r+0x34e>
 800aba4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abac:	f7f5 fd24 	bl	80005f8 <__aeabi_dmul>
 800abb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abb4:	3501      	adds	r5, #1
 800abb6:	1076      	asrs	r6, r6, #1
 800abb8:	3708      	adds	r7, #8
 800abba:	2e00      	cmp	r6, #0
 800abbc:	d1f0      	bne.n	800aba0 <_dtoa_r+0x338>
 800abbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abc6:	f7f5 fe41 	bl	800084c <__aeabi_ddiv>
 800abca:	e9cd 0100 	strd	r0, r1, [sp]
 800abce:	e01a      	b.n	800ac06 <_dtoa_r+0x39e>
 800abd0:	2502      	movs	r5, #2
 800abd2:	e7a3      	b.n	800ab1c <_dtoa_r+0x2b4>
 800abd4:	f000 80a0 	beq.w	800ad18 <_dtoa_r+0x4b0>
 800abd8:	f1ca 0600 	rsb	r6, sl, #0
 800abdc:	4b9f      	ldr	r3, [pc, #636]	; (800ae5c <_dtoa_r+0x5f4>)
 800abde:	4fa0      	ldr	r7, [pc, #640]	; (800ae60 <_dtoa_r+0x5f8>)
 800abe0:	f006 020f 	and.w	r2, r6, #15
 800abe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abf0:	f7f5 fd02 	bl	80005f8 <__aeabi_dmul>
 800abf4:	e9cd 0100 	strd	r0, r1, [sp]
 800abf8:	1136      	asrs	r6, r6, #4
 800abfa:	2300      	movs	r3, #0
 800abfc:	2502      	movs	r5, #2
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	d17f      	bne.n	800ad02 <_dtoa_r+0x49a>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e1      	bne.n	800abca <_dtoa_r+0x362>
 800ac06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 8087 	beq.w	800ad1c <_dtoa_r+0x4b4>
 800ac0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac12:	2200      	movs	r2, #0
 800ac14:	4b93      	ldr	r3, [pc, #588]	; (800ae64 <_dtoa_r+0x5fc>)
 800ac16:	4630      	mov	r0, r6
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f7f5 ff5f 	bl	8000adc <__aeabi_dcmplt>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d07c      	beq.n	800ad1c <_dtoa_r+0x4b4>
 800ac22:	f1b9 0f00 	cmp.w	r9, #0
 800ac26:	d079      	beq.n	800ad1c <_dtoa_r+0x4b4>
 800ac28:	9b02      	ldr	r3, [sp, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dd35      	ble.n	800ac9a <_dtoa_r+0x432>
 800ac2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ac32:	9308      	str	r3, [sp, #32]
 800ac34:	4639      	mov	r1, r7
 800ac36:	2200      	movs	r2, #0
 800ac38:	4b8b      	ldr	r3, [pc, #556]	; (800ae68 <_dtoa_r+0x600>)
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f7f5 fcdc 	bl	80005f8 <__aeabi_dmul>
 800ac40:	e9cd 0100 	strd	r0, r1, [sp]
 800ac44:	9f02      	ldr	r7, [sp, #8]
 800ac46:	3501      	adds	r5, #1
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f7f5 fc6b 	bl	8000524 <__aeabi_i2d>
 800ac4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac52:	f7f5 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ac56:	2200      	movs	r2, #0
 800ac58:	4b84      	ldr	r3, [pc, #528]	; (800ae6c <_dtoa_r+0x604>)
 800ac5a:	f7f5 fb17 	bl	800028c <__adddf3>
 800ac5e:	4605      	mov	r5, r0
 800ac60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ac64:	2f00      	cmp	r7, #0
 800ac66:	d15d      	bne.n	800ad24 <_dtoa_r+0x4bc>
 800ac68:	2200      	movs	r2, #0
 800ac6a:	4b81      	ldr	r3, [pc, #516]	; (800ae70 <_dtoa_r+0x608>)
 800ac6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac70:	f7f5 fb0a 	bl	8000288 <__aeabi_dsub>
 800ac74:	462a      	mov	r2, r5
 800ac76:	4633      	mov	r3, r6
 800ac78:	e9cd 0100 	strd	r0, r1, [sp]
 800ac7c:	f7f5 ff4c 	bl	8000b18 <__aeabi_dcmpgt>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	f040 8288 	bne.w	800b196 <_dtoa_r+0x92e>
 800ac86:	462a      	mov	r2, r5
 800ac88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ac8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac90:	f7f5 ff24 	bl	8000adc <__aeabi_dcmplt>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f040 827c 	bne.w	800b192 <_dtoa_r+0x92a>
 800ac9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac9e:	e9cd 2300 	strd	r2, r3, [sp]
 800aca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f2c0 8150 	blt.w	800af4a <_dtoa_r+0x6e2>
 800acaa:	f1ba 0f0e 	cmp.w	sl, #14
 800acae:	f300 814c 	bgt.w	800af4a <_dtoa_r+0x6e2>
 800acb2:	4b6a      	ldr	r3, [pc, #424]	; (800ae5c <_dtoa_r+0x5f4>)
 800acb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acb8:	ed93 7b00 	vldr	d7, [r3]
 800acbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800acc4:	f280 80d8 	bge.w	800ae78 <_dtoa_r+0x610>
 800acc8:	f1b9 0f00 	cmp.w	r9, #0
 800accc:	f300 80d4 	bgt.w	800ae78 <_dtoa_r+0x610>
 800acd0:	f040 825e 	bne.w	800b190 <_dtoa_r+0x928>
 800acd4:	2200      	movs	r2, #0
 800acd6:	4b66      	ldr	r3, [pc, #408]	; (800ae70 <_dtoa_r+0x608>)
 800acd8:	ec51 0b17 	vmov	r0, r1, d7
 800acdc:	f7f5 fc8c 	bl	80005f8 <__aeabi_dmul>
 800ace0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ace4:	f7f5 ff0e 	bl	8000b04 <__aeabi_dcmpge>
 800ace8:	464f      	mov	r7, r9
 800acea:	464e      	mov	r6, r9
 800acec:	2800      	cmp	r0, #0
 800acee:	f040 8234 	bne.w	800b15a <_dtoa_r+0x8f2>
 800acf2:	2331      	movs	r3, #49	; 0x31
 800acf4:	f10b 0501 	add.w	r5, fp, #1
 800acf8:	f88b 3000 	strb.w	r3, [fp]
 800acfc:	f10a 0a01 	add.w	sl, sl, #1
 800ad00:	e22f      	b.n	800b162 <_dtoa_r+0x8fa>
 800ad02:	07f2      	lsls	r2, r6, #31
 800ad04:	d505      	bpl.n	800ad12 <_dtoa_r+0x4aa>
 800ad06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad0a:	f7f5 fc75 	bl	80005f8 <__aeabi_dmul>
 800ad0e:	3501      	adds	r5, #1
 800ad10:	2301      	movs	r3, #1
 800ad12:	1076      	asrs	r6, r6, #1
 800ad14:	3708      	adds	r7, #8
 800ad16:	e772      	b.n	800abfe <_dtoa_r+0x396>
 800ad18:	2502      	movs	r5, #2
 800ad1a:	e774      	b.n	800ac06 <_dtoa_r+0x39e>
 800ad1c:	f8cd a020 	str.w	sl, [sp, #32]
 800ad20:	464f      	mov	r7, r9
 800ad22:	e791      	b.n	800ac48 <_dtoa_r+0x3e0>
 800ad24:	4b4d      	ldr	r3, [pc, #308]	; (800ae5c <_dtoa_r+0x5f4>)
 800ad26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ad2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d047      	beq.n	800adc4 <_dtoa_r+0x55c>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	2000      	movs	r0, #0
 800ad3a:	494e      	ldr	r1, [pc, #312]	; (800ae74 <_dtoa_r+0x60c>)
 800ad3c:	f7f5 fd86 	bl	800084c <__aeabi_ddiv>
 800ad40:	462a      	mov	r2, r5
 800ad42:	4633      	mov	r3, r6
 800ad44:	f7f5 faa0 	bl	8000288 <__aeabi_dsub>
 800ad48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ad4c:	465d      	mov	r5, fp
 800ad4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad52:	f7f5 ff01 	bl	8000b58 <__aeabi_d2iz>
 800ad56:	4606      	mov	r6, r0
 800ad58:	f7f5 fbe4 	bl	8000524 <__aeabi_i2d>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad64:	f7f5 fa90 	bl	8000288 <__aeabi_dsub>
 800ad68:	3630      	adds	r6, #48	; 0x30
 800ad6a:	f805 6b01 	strb.w	r6, [r5], #1
 800ad6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ad72:	e9cd 0100 	strd	r0, r1, [sp]
 800ad76:	f7f5 feb1 	bl	8000adc <__aeabi_dcmplt>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d163      	bne.n	800ae46 <_dtoa_r+0x5de>
 800ad7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad82:	2000      	movs	r0, #0
 800ad84:	4937      	ldr	r1, [pc, #220]	; (800ae64 <_dtoa_r+0x5fc>)
 800ad86:	f7f5 fa7f 	bl	8000288 <__aeabi_dsub>
 800ad8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ad8e:	f7f5 fea5 	bl	8000adc <__aeabi_dcmplt>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f040 80b7 	bne.w	800af06 <_dtoa_r+0x69e>
 800ad98:	eba5 030b 	sub.w	r3, r5, fp
 800ad9c:	429f      	cmp	r7, r3
 800ad9e:	f77f af7c 	ble.w	800ac9a <_dtoa_r+0x432>
 800ada2:	2200      	movs	r2, #0
 800ada4:	4b30      	ldr	r3, [pc, #192]	; (800ae68 <_dtoa_r+0x600>)
 800ada6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800adaa:	f7f5 fc25 	bl	80005f8 <__aeabi_dmul>
 800adae:	2200      	movs	r2, #0
 800adb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800adb4:	4b2c      	ldr	r3, [pc, #176]	; (800ae68 <_dtoa_r+0x600>)
 800adb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adba:	f7f5 fc1d 	bl	80005f8 <__aeabi_dmul>
 800adbe:	e9cd 0100 	strd	r0, r1, [sp]
 800adc2:	e7c4      	b.n	800ad4e <_dtoa_r+0x4e6>
 800adc4:	462a      	mov	r2, r5
 800adc6:	4633      	mov	r3, r6
 800adc8:	f7f5 fc16 	bl	80005f8 <__aeabi_dmul>
 800adcc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800add0:	eb0b 0507 	add.w	r5, fp, r7
 800add4:	465e      	mov	r6, fp
 800add6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adda:	f7f5 febd 	bl	8000b58 <__aeabi_d2iz>
 800adde:	4607      	mov	r7, r0
 800ade0:	f7f5 fba0 	bl	8000524 <__aeabi_i2d>
 800ade4:	3730      	adds	r7, #48	; 0x30
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adee:	f7f5 fa4b 	bl	8000288 <__aeabi_dsub>
 800adf2:	f806 7b01 	strb.w	r7, [r6], #1
 800adf6:	42ae      	cmp	r6, r5
 800adf8:	e9cd 0100 	strd	r0, r1, [sp]
 800adfc:	f04f 0200 	mov.w	r2, #0
 800ae00:	d126      	bne.n	800ae50 <_dtoa_r+0x5e8>
 800ae02:	4b1c      	ldr	r3, [pc, #112]	; (800ae74 <_dtoa_r+0x60c>)
 800ae04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae08:	f7f5 fa40 	bl	800028c <__adddf3>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae14:	f7f5 fe80 	bl	8000b18 <__aeabi_dcmpgt>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d174      	bne.n	800af06 <_dtoa_r+0x69e>
 800ae1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae20:	2000      	movs	r0, #0
 800ae22:	4914      	ldr	r1, [pc, #80]	; (800ae74 <_dtoa_r+0x60c>)
 800ae24:	f7f5 fa30 	bl	8000288 <__aeabi_dsub>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae30:	f7f5 fe54 	bl	8000adc <__aeabi_dcmplt>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f43f af30 	beq.w	800ac9a <_dtoa_r+0x432>
 800ae3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae3e:	2b30      	cmp	r3, #48	; 0x30
 800ae40:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae44:	d002      	beq.n	800ae4c <_dtoa_r+0x5e4>
 800ae46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ae4a:	e04a      	b.n	800aee2 <_dtoa_r+0x67a>
 800ae4c:	4615      	mov	r5, r2
 800ae4e:	e7f4      	b.n	800ae3a <_dtoa_r+0x5d2>
 800ae50:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <_dtoa_r+0x600>)
 800ae52:	f7f5 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ae56:	e9cd 0100 	strd	r0, r1, [sp]
 800ae5a:	e7bc      	b.n	800add6 <_dtoa_r+0x56e>
 800ae5c:	0800be50 	.word	0x0800be50
 800ae60:	0800be28 	.word	0x0800be28
 800ae64:	3ff00000 	.word	0x3ff00000
 800ae68:	40240000 	.word	0x40240000
 800ae6c:	401c0000 	.word	0x401c0000
 800ae70:	40140000 	.word	0x40140000
 800ae74:	3fe00000 	.word	0x3fe00000
 800ae78:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae7c:	465d      	mov	r5, fp
 800ae7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae82:	4630      	mov	r0, r6
 800ae84:	4639      	mov	r1, r7
 800ae86:	f7f5 fce1 	bl	800084c <__aeabi_ddiv>
 800ae8a:	f7f5 fe65 	bl	8000b58 <__aeabi_d2iz>
 800ae8e:	4680      	mov	r8, r0
 800ae90:	f7f5 fb48 	bl	8000524 <__aeabi_i2d>
 800ae94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae98:	f7f5 fbae 	bl	80005f8 <__aeabi_dmul>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4630      	mov	r0, r6
 800aea2:	4639      	mov	r1, r7
 800aea4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aea8:	f7f5 f9ee 	bl	8000288 <__aeabi_dsub>
 800aeac:	f805 6b01 	strb.w	r6, [r5], #1
 800aeb0:	eba5 060b 	sub.w	r6, r5, fp
 800aeb4:	45b1      	cmp	r9, r6
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	d139      	bne.n	800af30 <_dtoa_r+0x6c8>
 800aebc:	f7f5 f9e6 	bl	800028c <__adddf3>
 800aec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aec4:	4606      	mov	r6, r0
 800aec6:	460f      	mov	r7, r1
 800aec8:	f7f5 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 800aecc:	b9c8      	cbnz	r0, 800af02 <_dtoa_r+0x69a>
 800aece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aed2:	4630      	mov	r0, r6
 800aed4:	4639      	mov	r1, r7
 800aed6:	f7f5 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeda:	b110      	cbz	r0, 800aee2 <_dtoa_r+0x67a>
 800aedc:	f018 0f01 	tst.w	r8, #1
 800aee0:	d10f      	bne.n	800af02 <_dtoa_r+0x69a>
 800aee2:	9904      	ldr	r1, [sp, #16]
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 fac6 	bl	800b476 <_Bfree>
 800aeea:	2300      	movs	r3, #0
 800aeec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aeee:	702b      	strb	r3, [r5, #0]
 800aef0:	f10a 0301 	add.w	r3, sl, #1
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 8241 	beq.w	800b380 <_dtoa_r+0xb18>
 800aefe:	601d      	str	r5, [r3, #0]
 800af00:	e23e      	b.n	800b380 <_dtoa_r+0xb18>
 800af02:	f8cd a020 	str.w	sl, [sp, #32]
 800af06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af0a:	2a39      	cmp	r2, #57	; 0x39
 800af0c:	f105 33ff 	add.w	r3, r5, #4294967295
 800af10:	d108      	bne.n	800af24 <_dtoa_r+0x6bc>
 800af12:	459b      	cmp	fp, r3
 800af14:	d10a      	bne.n	800af2c <_dtoa_r+0x6c4>
 800af16:	9b08      	ldr	r3, [sp, #32]
 800af18:	3301      	adds	r3, #1
 800af1a:	9308      	str	r3, [sp, #32]
 800af1c:	2330      	movs	r3, #48	; 0x30
 800af1e:	f88b 3000 	strb.w	r3, [fp]
 800af22:	465b      	mov	r3, fp
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	3201      	adds	r2, #1
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	e78c      	b.n	800ae46 <_dtoa_r+0x5de>
 800af2c:	461d      	mov	r5, r3
 800af2e:	e7ea      	b.n	800af06 <_dtoa_r+0x69e>
 800af30:	2200      	movs	r2, #0
 800af32:	4b9b      	ldr	r3, [pc, #620]	; (800b1a0 <_dtoa_r+0x938>)
 800af34:	f7f5 fb60 	bl	80005f8 <__aeabi_dmul>
 800af38:	2200      	movs	r2, #0
 800af3a:	2300      	movs	r3, #0
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	f7f5 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800af44:	2800      	cmp	r0, #0
 800af46:	d09a      	beq.n	800ae7e <_dtoa_r+0x616>
 800af48:	e7cb      	b.n	800aee2 <_dtoa_r+0x67a>
 800af4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af4c:	2a00      	cmp	r2, #0
 800af4e:	f000 808b 	beq.w	800b068 <_dtoa_r+0x800>
 800af52:	9a06      	ldr	r2, [sp, #24]
 800af54:	2a01      	cmp	r2, #1
 800af56:	dc6e      	bgt.n	800b036 <_dtoa_r+0x7ce>
 800af58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af5a:	2a00      	cmp	r2, #0
 800af5c:	d067      	beq.n	800b02e <_dtoa_r+0x7c6>
 800af5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af62:	9f07      	ldr	r7, [sp, #28]
 800af64:	9d05      	ldr	r5, [sp, #20]
 800af66:	9a05      	ldr	r2, [sp, #20]
 800af68:	2101      	movs	r1, #1
 800af6a:	441a      	add	r2, r3
 800af6c:	4620      	mov	r0, r4
 800af6e:	9205      	str	r2, [sp, #20]
 800af70:	4498      	add	r8, r3
 800af72:	f000 fb20 	bl	800b5b6 <__i2b>
 800af76:	4606      	mov	r6, r0
 800af78:	2d00      	cmp	r5, #0
 800af7a:	dd0c      	ble.n	800af96 <_dtoa_r+0x72e>
 800af7c:	f1b8 0f00 	cmp.w	r8, #0
 800af80:	dd09      	ble.n	800af96 <_dtoa_r+0x72e>
 800af82:	4545      	cmp	r5, r8
 800af84:	9a05      	ldr	r2, [sp, #20]
 800af86:	462b      	mov	r3, r5
 800af88:	bfa8      	it	ge
 800af8a:	4643      	movge	r3, r8
 800af8c:	1ad2      	subs	r2, r2, r3
 800af8e:	9205      	str	r2, [sp, #20]
 800af90:	1aed      	subs	r5, r5, r3
 800af92:	eba8 0803 	sub.w	r8, r8, r3
 800af96:	9b07      	ldr	r3, [sp, #28]
 800af98:	b1eb      	cbz	r3, 800afd6 <_dtoa_r+0x76e>
 800af9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d067      	beq.n	800b070 <_dtoa_r+0x808>
 800afa0:	b18f      	cbz	r7, 800afc6 <_dtoa_r+0x75e>
 800afa2:	4631      	mov	r1, r6
 800afa4:	463a      	mov	r2, r7
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 fba4 	bl	800b6f4 <__pow5mult>
 800afac:	9a04      	ldr	r2, [sp, #16]
 800afae:	4601      	mov	r1, r0
 800afb0:	4606      	mov	r6, r0
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 fb08 	bl	800b5c8 <__multiply>
 800afb8:	9904      	ldr	r1, [sp, #16]
 800afba:	9008      	str	r0, [sp, #32]
 800afbc:	4620      	mov	r0, r4
 800afbe:	f000 fa5a 	bl	800b476 <_Bfree>
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	9b07      	ldr	r3, [sp, #28]
 800afc8:	1bda      	subs	r2, r3, r7
 800afca:	d004      	beq.n	800afd6 <_dtoa_r+0x76e>
 800afcc:	9904      	ldr	r1, [sp, #16]
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 fb90 	bl	800b6f4 <__pow5mult>
 800afd4:	9004      	str	r0, [sp, #16]
 800afd6:	2101      	movs	r1, #1
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 faec 	bl	800b5b6 <__i2b>
 800afde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afe0:	4607      	mov	r7, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 81d0 	beq.w	800b388 <_dtoa_r+0xb20>
 800afe8:	461a      	mov	r2, r3
 800afea:	4601      	mov	r1, r0
 800afec:	4620      	mov	r0, r4
 800afee:	f000 fb81 	bl	800b6f4 <__pow5mult>
 800aff2:	9b06      	ldr	r3, [sp, #24]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	4607      	mov	r7, r0
 800aff8:	dc40      	bgt.n	800b07c <_dtoa_r+0x814>
 800affa:	9b00      	ldr	r3, [sp, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d139      	bne.n	800b074 <_dtoa_r+0x80c>
 800b000:	9b01      	ldr	r3, [sp, #4]
 800b002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b006:	2b00      	cmp	r3, #0
 800b008:	d136      	bne.n	800b078 <_dtoa_r+0x810>
 800b00a:	9b01      	ldr	r3, [sp, #4]
 800b00c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b010:	0d1b      	lsrs	r3, r3, #20
 800b012:	051b      	lsls	r3, r3, #20
 800b014:	b12b      	cbz	r3, 800b022 <_dtoa_r+0x7ba>
 800b016:	9b05      	ldr	r3, [sp, #20]
 800b018:	3301      	adds	r3, #1
 800b01a:	9305      	str	r3, [sp, #20]
 800b01c:	f108 0801 	add.w	r8, r8, #1
 800b020:	2301      	movs	r3, #1
 800b022:	9307      	str	r3, [sp, #28]
 800b024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b026:	2b00      	cmp	r3, #0
 800b028:	d12a      	bne.n	800b080 <_dtoa_r+0x818>
 800b02a:	2001      	movs	r0, #1
 800b02c:	e030      	b.n	800b090 <_dtoa_r+0x828>
 800b02e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b030:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b034:	e795      	b.n	800af62 <_dtoa_r+0x6fa>
 800b036:	9b07      	ldr	r3, [sp, #28]
 800b038:	f109 37ff 	add.w	r7, r9, #4294967295
 800b03c:	42bb      	cmp	r3, r7
 800b03e:	bfbf      	itttt	lt
 800b040:	9b07      	ldrlt	r3, [sp, #28]
 800b042:	9707      	strlt	r7, [sp, #28]
 800b044:	1afa      	sublt	r2, r7, r3
 800b046:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b048:	bfbb      	ittet	lt
 800b04a:	189b      	addlt	r3, r3, r2
 800b04c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b04e:	1bdf      	subge	r7, r3, r7
 800b050:	2700      	movlt	r7, #0
 800b052:	f1b9 0f00 	cmp.w	r9, #0
 800b056:	bfb5      	itete	lt
 800b058:	9b05      	ldrlt	r3, [sp, #20]
 800b05a:	9d05      	ldrge	r5, [sp, #20]
 800b05c:	eba3 0509 	sublt.w	r5, r3, r9
 800b060:	464b      	movge	r3, r9
 800b062:	bfb8      	it	lt
 800b064:	2300      	movlt	r3, #0
 800b066:	e77e      	b.n	800af66 <_dtoa_r+0x6fe>
 800b068:	9f07      	ldr	r7, [sp, #28]
 800b06a:	9d05      	ldr	r5, [sp, #20]
 800b06c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b06e:	e783      	b.n	800af78 <_dtoa_r+0x710>
 800b070:	9a07      	ldr	r2, [sp, #28]
 800b072:	e7ab      	b.n	800afcc <_dtoa_r+0x764>
 800b074:	2300      	movs	r3, #0
 800b076:	e7d4      	b.n	800b022 <_dtoa_r+0x7ba>
 800b078:	9b00      	ldr	r3, [sp, #0]
 800b07a:	e7d2      	b.n	800b022 <_dtoa_r+0x7ba>
 800b07c:	2300      	movs	r3, #0
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b086:	6918      	ldr	r0, [r3, #16]
 800b088:	f000 fa47 	bl	800b51a <__hi0bits>
 800b08c:	f1c0 0020 	rsb	r0, r0, #32
 800b090:	4440      	add	r0, r8
 800b092:	f010 001f 	ands.w	r0, r0, #31
 800b096:	d047      	beq.n	800b128 <_dtoa_r+0x8c0>
 800b098:	f1c0 0320 	rsb	r3, r0, #32
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	dd3b      	ble.n	800b118 <_dtoa_r+0x8b0>
 800b0a0:	9b05      	ldr	r3, [sp, #20]
 800b0a2:	f1c0 001c 	rsb	r0, r0, #28
 800b0a6:	4403      	add	r3, r0
 800b0a8:	9305      	str	r3, [sp, #20]
 800b0aa:	4405      	add	r5, r0
 800b0ac:	4480      	add	r8, r0
 800b0ae:	9b05      	ldr	r3, [sp, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dd05      	ble.n	800b0c0 <_dtoa_r+0x858>
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	9904      	ldr	r1, [sp, #16]
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 fb69 	bl	800b790 <__lshift>
 800b0be:	9004      	str	r0, [sp, #16]
 800b0c0:	f1b8 0f00 	cmp.w	r8, #0
 800b0c4:	dd05      	ble.n	800b0d2 <_dtoa_r+0x86a>
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	4642      	mov	r2, r8
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 fb60 	bl	800b790 <__lshift>
 800b0d0:	4607      	mov	r7, r0
 800b0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0d4:	b353      	cbz	r3, 800b12c <_dtoa_r+0x8c4>
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	9804      	ldr	r0, [sp, #16]
 800b0da:	f000 fbad 	bl	800b838 <__mcmp>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	da24      	bge.n	800b12c <_dtoa_r+0x8c4>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	220a      	movs	r2, #10
 800b0e6:	9904      	ldr	r1, [sp, #16]
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f000 f9db 	bl	800b4a4 <__multadd>
 800b0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f0:	9004      	str	r0, [sp, #16]
 800b0f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 814d 	beq.w	800b396 <_dtoa_r+0xb2e>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4631      	mov	r1, r6
 800b100:	220a      	movs	r2, #10
 800b102:	4620      	mov	r0, r4
 800b104:	f000 f9ce 	bl	800b4a4 <__multadd>
 800b108:	9b02      	ldr	r3, [sp, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	4606      	mov	r6, r0
 800b10e:	dc4f      	bgt.n	800b1b0 <_dtoa_r+0x948>
 800b110:	9b06      	ldr	r3, [sp, #24]
 800b112:	2b02      	cmp	r3, #2
 800b114:	dd4c      	ble.n	800b1b0 <_dtoa_r+0x948>
 800b116:	e011      	b.n	800b13c <_dtoa_r+0x8d4>
 800b118:	d0c9      	beq.n	800b0ae <_dtoa_r+0x846>
 800b11a:	9a05      	ldr	r2, [sp, #20]
 800b11c:	331c      	adds	r3, #28
 800b11e:	441a      	add	r2, r3
 800b120:	9205      	str	r2, [sp, #20]
 800b122:	441d      	add	r5, r3
 800b124:	4498      	add	r8, r3
 800b126:	e7c2      	b.n	800b0ae <_dtoa_r+0x846>
 800b128:	4603      	mov	r3, r0
 800b12a:	e7f6      	b.n	800b11a <_dtoa_r+0x8b2>
 800b12c:	f1b9 0f00 	cmp.w	r9, #0
 800b130:	dc38      	bgt.n	800b1a4 <_dtoa_r+0x93c>
 800b132:	9b06      	ldr	r3, [sp, #24]
 800b134:	2b02      	cmp	r3, #2
 800b136:	dd35      	ble.n	800b1a4 <_dtoa_r+0x93c>
 800b138:	f8cd 9008 	str.w	r9, [sp, #8]
 800b13c:	9b02      	ldr	r3, [sp, #8]
 800b13e:	b963      	cbnz	r3, 800b15a <_dtoa_r+0x8f2>
 800b140:	4639      	mov	r1, r7
 800b142:	2205      	movs	r2, #5
 800b144:	4620      	mov	r0, r4
 800b146:	f000 f9ad 	bl	800b4a4 <__multadd>
 800b14a:	4601      	mov	r1, r0
 800b14c:	4607      	mov	r7, r0
 800b14e:	9804      	ldr	r0, [sp, #16]
 800b150:	f000 fb72 	bl	800b838 <__mcmp>
 800b154:	2800      	cmp	r0, #0
 800b156:	f73f adcc 	bgt.w	800acf2 <_dtoa_r+0x48a>
 800b15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b15c:	465d      	mov	r5, fp
 800b15e:	ea6f 0a03 	mvn.w	sl, r3
 800b162:	f04f 0900 	mov.w	r9, #0
 800b166:	4639      	mov	r1, r7
 800b168:	4620      	mov	r0, r4
 800b16a:	f000 f984 	bl	800b476 <_Bfree>
 800b16e:	2e00      	cmp	r6, #0
 800b170:	f43f aeb7 	beq.w	800aee2 <_dtoa_r+0x67a>
 800b174:	f1b9 0f00 	cmp.w	r9, #0
 800b178:	d005      	beq.n	800b186 <_dtoa_r+0x91e>
 800b17a:	45b1      	cmp	r9, r6
 800b17c:	d003      	beq.n	800b186 <_dtoa_r+0x91e>
 800b17e:	4649      	mov	r1, r9
 800b180:	4620      	mov	r0, r4
 800b182:	f000 f978 	bl	800b476 <_Bfree>
 800b186:	4631      	mov	r1, r6
 800b188:	4620      	mov	r0, r4
 800b18a:	f000 f974 	bl	800b476 <_Bfree>
 800b18e:	e6a8      	b.n	800aee2 <_dtoa_r+0x67a>
 800b190:	2700      	movs	r7, #0
 800b192:	463e      	mov	r6, r7
 800b194:	e7e1      	b.n	800b15a <_dtoa_r+0x8f2>
 800b196:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b19a:	463e      	mov	r6, r7
 800b19c:	e5a9      	b.n	800acf2 <_dtoa_r+0x48a>
 800b19e:	bf00      	nop
 800b1a0:	40240000 	.word	0x40240000
 800b1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f000 80fa 	beq.w	800b3a4 <_dtoa_r+0xb3c>
 800b1b0:	2d00      	cmp	r5, #0
 800b1b2:	dd05      	ble.n	800b1c0 <_dtoa_r+0x958>
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f000 fae9 	bl	800b790 <__lshift>
 800b1be:	4606      	mov	r6, r0
 800b1c0:	9b07      	ldr	r3, [sp, #28]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d04c      	beq.n	800b260 <_dtoa_r+0x9f8>
 800b1c6:	6871      	ldr	r1, [r6, #4]
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 f920 	bl	800b40e <_Balloc>
 800b1ce:	6932      	ldr	r2, [r6, #16]
 800b1d0:	3202      	adds	r2, #2
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	0092      	lsls	r2, r2, #2
 800b1d6:	f106 010c 	add.w	r1, r6, #12
 800b1da:	300c      	adds	r0, #12
 800b1dc:	f000 f90a 	bl	800b3f4 <memcpy>
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f000 fad3 	bl	800b790 <__lshift>
 800b1ea:	9b00      	ldr	r3, [sp, #0]
 800b1ec:	f8cd b014 	str.w	fp, [sp, #20]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	46b1      	mov	r9, r6
 800b1f6:	9307      	str	r3, [sp, #28]
 800b1f8:	4606      	mov	r6, r0
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	9804      	ldr	r0, [sp, #16]
 800b1fe:	f7ff faa5 	bl	800a74c <quorem>
 800b202:	4649      	mov	r1, r9
 800b204:	4605      	mov	r5, r0
 800b206:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b20a:	9804      	ldr	r0, [sp, #16]
 800b20c:	f000 fb14 	bl	800b838 <__mcmp>
 800b210:	4632      	mov	r2, r6
 800b212:	9000      	str	r0, [sp, #0]
 800b214:	4639      	mov	r1, r7
 800b216:	4620      	mov	r0, r4
 800b218:	f000 fb28 	bl	800b86c <__mdiff>
 800b21c:	68c3      	ldr	r3, [r0, #12]
 800b21e:	4602      	mov	r2, r0
 800b220:	bb03      	cbnz	r3, 800b264 <_dtoa_r+0x9fc>
 800b222:	4601      	mov	r1, r0
 800b224:	9008      	str	r0, [sp, #32]
 800b226:	9804      	ldr	r0, [sp, #16]
 800b228:	f000 fb06 	bl	800b838 <__mcmp>
 800b22c:	9a08      	ldr	r2, [sp, #32]
 800b22e:	4603      	mov	r3, r0
 800b230:	4611      	mov	r1, r2
 800b232:	4620      	mov	r0, r4
 800b234:	9308      	str	r3, [sp, #32]
 800b236:	f000 f91e 	bl	800b476 <_Bfree>
 800b23a:	9b08      	ldr	r3, [sp, #32]
 800b23c:	b9a3      	cbnz	r3, 800b268 <_dtoa_r+0xa00>
 800b23e:	9a06      	ldr	r2, [sp, #24]
 800b240:	b992      	cbnz	r2, 800b268 <_dtoa_r+0xa00>
 800b242:	9a07      	ldr	r2, [sp, #28]
 800b244:	b982      	cbnz	r2, 800b268 <_dtoa_r+0xa00>
 800b246:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b24a:	d029      	beq.n	800b2a0 <_dtoa_r+0xa38>
 800b24c:	9b00      	ldr	r3, [sp, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	dd01      	ble.n	800b256 <_dtoa_r+0x9ee>
 800b252:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b256:	9b05      	ldr	r3, [sp, #20]
 800b258:	1c5d      	adds	r5, r3, #1
 800b25a:	f883 8000 	strb.w	r8, [r3]
 800b25e:	e782      	b.n	800b166 <_dtoa_r+0x8fe>
 800b260:	4630      	mov	r0, r6
 800b262:	e7c2      	b.n	800b1ea <_dtoa_r+0x982>
 800b264:	2301      	movs	r3, #1
 800b266:	e7e3      	b.n	800b230 <_dtoa_r+0x9c8>
 800b268:	9a00      	ldr	r2, [sp, #0]
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	db04      	blt.n	800b278 <_dtoa_r+0xa10>
 800b26e:	d125      	bne.n	800b2bc <_dtoa_r+0xa54>
 800b270:	9a06      	ldr	r2, [sp, #24]
 800b272:	bb1a      	cbnz	r2, 800b2bc <_dtoa_r+0xa54>
 800b274:	9a07      	ldr	r2, [sp, #28]
 800b276:	bb0a      	cbnz	r2, 800b2bc <_dtoa_r+0xa54>
 800b278:	2b00      	cmp	r3, #0
 800b27a:	ddec      	ble.n	800b256 <_dtoa_r+0x9ee>
 800b27c:	2201      	movs	r2, #1
 800b27e:	9904      	ldr	r1, [sp, #16]
 800b280:	4620      	mov	r0, r4
 800b282:	f000 fa85 	bl	800b790 <__lshift>
 800b286:	4639      	mov	r1, r7
 800b288:	9004      	str	r0, [sp, #16]
 800b28a:	f000 fad5 	bl	800b838 <__mcmp>
 800b28e:	2800      	cmp	r0, #0
 800b290:	dc03      	bgt.n	800b29a <_dtoa_r+0xa32>
 800b292:	d1e0      	bne.n	800b256 <_dtoa_r+0x9ee>
 800b294:	f018 0f01 	tst.w	r8, #1
 800b298:	d0dd      	beq.n	800b256 <_dtoa_r+0x9ee>
 800b29a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b29e:	d1d8      	bne.n	800b252 <_dtoa_r+0x9ea>
 800b2a0:	9b05      	ldr	r3, [sp, #20]
 800b2a2:	9a05      	ldr	r2, [sp, #20]
 800b2a4:	1c5d      	adds	r5, r3, #1
 800b2a6:	2339      	movs	r3, #57	; 0x39
 800b2a8:	7013      	strb	r3, [r2, #0]
 800b2aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2ae:	2b39      	cmp	r3, #57	; 0x39
 800b2b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800b2b4:	d04f      	beq.n	800b356 <_dtoa_r+0xaee>
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	7013      	strb	r3, [r2, #0]
 800b2ba:	e754      	b.n	800b166 <_dtoa_r+0x8fe>
 800b2bc:	9a05      	ldr	r2, [sp, #20]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f102 0501 	add.w	r5, r2, #1
 800b2c4:	dd06      	ble.n	800b2d4 <_dtoa_r+0xa6c>
 800b2c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2ca:	d0e9      	beq.n	800b2a0 <_dtoa_r+0xa38>
 800b2cc:	f108 0801 	add.w	r8, r8, #1
 800b2d0:	9b05      	ldr	r3, [sp, #20]
 800b2d2:	e7c2      	b.n	800b25a <_dtoa_r+0x9f2>
 800b2d4:	9a02      	ldr	r2, [sp, #8]
 800b2d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b2da:	eba5 030b 	sub.w	r3, r5, fp
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d021      	beq.n	800b326 <_dtoa_r+0xabe>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	220a      	movs	r2, #10
 800b2e6:	9904      	ldr	r1, [sp, #16]
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f000 f8db 	bl	800b4a4 <__multadd>
 800b2ee:	45b1      	cmp	r9, r6
 800b2f0:	9004      	str	r0, [sp, #16]
 800b2f2:	f04f 0300 	mov.w	r3, #0
 800b2f6:	f04f 020a 	mov.w	r2, #10
 800b2fa:	4649      	mov	r1, r9
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	d105      	bne.n	800b30c <_dtoa_r+0xaa4>
 800b300:	f000 f8d0 	bl	800b4a4 <__multadd>
 800b304:	4681      	mov	r9, r0
 800b306:	4606      	mov	r6, r0
 800b308:	9505      	str	r5, [sp, #20]
 800b30a:	e776      	b.n	800b1fa <_dtoa_r+0x992>
 800b30c:	f000 f8ca 	bl	800b4a4 <__multadd>
 800b310:	4631      	mov	r1, r6
 800b312:	4681      	mov	r9, r0
 800b314:	2300      	movs	r3, #0
 800b316:	220a      	movs	r2, #10
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 f8c3 	bl	800b4a4 <__multadd>
 800b31e:	4606      	mov	r6, r0
 800b320:	e7f2      	b.n	800b308 <_dtoa_r+0xaa0>
 800b322:	f04f 0900 	mov.w	r9, #0
 800b326:	2201      	movs	r2, #1
 800b328:	9904      	ldr	r1, [sp, #16]
 800b32a:	4620      	mov	r0, r4
 800b32c:	f000 fa30 	bl	800b790 <__lshift>
 800b330:	4639      	mov	r1, r7
 800b332:	9004      	str	r0, [sp, #16]
 800b334:	f000 fa80 	bl	800b838 <__mcmp>
 800b338:	2800      	cmp	r0, #0
 800b33a:	dcb6      	bgt.n	800b2aa <_dtoa_r+0xa42>
 800b33c:	d102      	bne.n	800b344 <_dtoa_r+0xadc>
 800b33e:	f018 0f01 	tst.w	r8, #1
 800b342:	d1b2      	bne.n	800b2aa <_dtoa_r+0xa42>
 800b344:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b348:	2b30      	cmp	r3, #48	; 0x30
 800b34a:	f105 32ff 	add.w	r2, r5, #4294967295
 800b34e:	f47f af0a 	bne.w	800b166 <_dtoa_r+0x8fe>
 800b352:	4615      	mov	r5, r2
 800b354:	e7f6      	b.n	800b344 <_dtoa_r+0xadc>
 800b356:	4593      	cmp	fp, r2
 800b358:	d105      	bne.n	800b366 <_dtoa_r+0xafe>
 800b35a:	2331      	movs	r3, #49	; 0x31
 800b35c:	f10a 0a01 	add.w	sl, sl, #1
 800b360:	f88b 3000 	strb.w	r3, [fp]
 800b364:	e6ff      	b.n	800b166 <_dtoa_r+0x8fe>
 800b366:	4615      	mov	r5, r2
 800b368:	e79f      	b.n	800b2aa <_dtoa_r+0xa42>
 800b36a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b3d0 <_dtoa_r+0xb68>
 800b36e:	e007      	b.n	800b380 <_dtoa_r+0xb18>
 800b370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b372:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b3d4 <_dtoa_r+0xb6c>
 800b376:	b11b      	cbz	r3, 800b380 <_dtoa_r+0xb18>
 800b378:	f10b 0308 	add.w	r3, fp, #8
 800b37c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	4658      	mov	r0, fp
 800b382:	b017      	add	sp, #92	; 0x5c
 800b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b388:	9b06      	ldr	r3, [sp, #24]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	f77f ae35 	ble.w	800affa <_dtoa_r+0x792>
 800b390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b392:	9307      	str	r3, [sp, #28]
 800b394:	e649      	b.n	800b02a <_dtoa_r+0x7c2>
 800b396:	9b02      	ldr	r3, [sp, #8]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dc03      	bgt.n	800b3a4 <_dtoa_r+0xb3c>
 800b39c:	9b06      	ldr	r3, [sp, #24]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	f73f aecc 	bgt.w	800b13c <_dtoa_r+0x8d4>
 800b3a4:	465d      	mov	r5, fp
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	9804      	ldr	r0, [sp, #16]
 800b3aa:	f7ff f9cf 	bl	800a74c <quorem>
 800b3ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b3b2:	f805 8b01 	strb.w	r8, [r5], #1
 800b3b6:	9a02      	ldr	r2, [sp, #8]
 800b3b8:	eba5 030b 	sub.w	r3, r5, fp
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	ddb0      	ble.n	800b322 <_dtoa_r+0xaba>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	220a      	movs	r2, #10
 800b3c4:	9904      	ldr	r1, [sp, #16]
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 f86c 	bl	800b4a4 <__multadd>
 800b3cc:	9004      	str	r0, [sp, #16]
 800b3ce:	e7ea      	b.n	800b3a6 <_dtoa_r+0xb3e>
 800b3d0:	0800bdf4 	.word	0x0800bdf4
 800b3d4:	0800be18 	.word	0x0800be18

0800b3d8 <_localeconv_r>:
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <_localeconv_r+0x14>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6a18      	ldr	r0, [r3, #32]
 800b3de:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <_localeconv_r+0x18>)
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	bf08      	it	eq
 800b3e4:	4618      	moveq	r0, r3
 800b3e6:	30f0      	adds	r0, #240	; 0xf0
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	20000188 	.word	0x20000188
 800b3f0:	200001ec 	.word	0x200001ec

0800b3f4 <memcpy>:
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	1e43      	subs	r3, r0, #1
 800b3f8:	440a      	add	r2, r1
 800b3fa:	4291      	cmp	r1, r2
 800b3fc:	d100      	bne.n	800b400 <memcpy+0xc>
 800b3fe:	bd10      	pop	{r4, pc}
 800b400:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b404:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b408:	e7f7      	b.n	800b3fa <memcpy+0x6>

0800b40a <__malloc_lock>:
 800b40a:	4770      	bx	lr

0800b40c <__malloc_unlock>:
 800b40c:	4770      	bx	lr

0800b40e <_Balloc>:
 800b40e:	b570      	push	{r4, r5, r6, lr}
 800b410:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b412:	4604      	mov	r4, r0
 800b414:	460e      	mov	r6, r1
 800b416:	b93d      	cbnz	r5, 800b428 <_Balloc+0x1a>
 800b418:	2010      	movs	r0, #16
 800b41a:	f7fe fc4b 	bl	8009cb4 <malloc>
 800b41e:	6260      	str	r0, [r4, #36]	; 0x24
 800b420:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b424:	6005      	str	r5, [r0, #0]
 800b426:	60c5      	str	r5, [r0, #12]
 800b428:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b42a:	68eb      	ldr	r3, [r5, #12]
 800b42c:	b183      	cbz	r3, 800b450 <_Balloc+0x42>
 800b42e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b436:	b9b8      	cbnz	r0, 800b468 <_Balloc+0x5a>
 800b438:	2101      	movs	r1, #1
 800b43a:	fa01 f506 	lsl.w	r5, r1, r6
 800b43e:	1d6a      	adds	r2, r5, #5
 800b440:	0092      	lsls	r2, r2, #2
 800b442:	4620      	mov	r0, r4
 800b444:	f000 fabe 	bl	800b9c4 <_calloc_r>
 800b448:	b160      	cbz	r0, 800b464 <_Balloc+0x56>
 800b44a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b44e:	e00e      	b.n	800b46e <_Balloc+0x60>
 800b450:	2221      	movs	r2, #33	; 0x21
 800b452:	2104      	movs	r1, #4
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fab5 	bl	800b9c4 <_calloc_r>
 800b45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b45c:	60e8      	str	r0, [r5, #12]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e4      	bne.n	800b42e <_Balloc+0x20>
 800b464:	2000      	movs	r0, #0
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	6802      	ldr	r2, [r0, #0]
 800b46a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b46e:	2300      	movs	r3, #0
 800b470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b474:	e7f7      	b.n	800b466 <_Balloc+0x58>

0800b476 <_Bfree>:
 800b476:	b570      	push	{r4, r5, r6, lr}
 800b478:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b47a:	4606      	mov	r6, r0
 800b47c:	460d      	mov	r5, r1
 800b47e:	b93c      	cbnz	r4, 800b490 <_Bfree+0x1a>
 800b480:	2010      	movs	r0, #16
 800b482:	f7fe fc17 	bl	8009cb4 <malloc>
 800b486:	6270      	str	r0, [r6, #36]	; 0x24
 800b488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b48c:	6004      	str	r4, [r0, #0]
 800b48e:	60c4      	str	r4, [r0, #12]
 800b490:	b13d      	cbz	r5, 800b4a2 <_Bfree+0x2c>
 800b492:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b494:	686a      	ldr	r2, [r5, #4]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b49c:	6029      	str	r1, [r5, #0]
 800b49e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b4a2:	bd70      	pop	{r4, r5, r6, pc}

0800b4a4 <__multadd>:
 800b4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a8:	690d      	ldr	r5, [r1, #16]
 800b4aa:	461f      	mov	r7, r3
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	f101 0c14 	add.w	ip, r1, #20
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f8dc 0000 	ldr.w	r0, [ip]
 800b4ba:	b281      	uxth	r1, r0
 800b4bc:	fb02 7101 	mla	r1, r2, r1, r7
 800b4c0:	0c0f      	lsrs	r7, r1, #16
 800b4c2:	0c00      	lsrs	r0, r0, #16
 800b4c4:	fb02 7000 	mla	r0, r2, r0, r7
 800b4c8:	b289      	uxth	r1, r1
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b4d0:	429d      	cmp	r5, r3
 800b4d2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b4d6:	f84c 1b04 	str.w	r1, [ip], #4
 800b4da:	dcec      	bgt.n	800b4b6 <__multadd+0x12>
 800b4dc:	b1d7      	cbz	r7, 800b514 <__multadd+0x70>
 800b4de:	68a3      	ldr	r3, [r4, #8]
 800b4e0:	42ab      	cmp	r3, r5
 800b4e2:	dc12      	bgt.n	800b50a <__multadd+0x66>
 800b4e4:	6861      	ldr	r1, [r4, #4]
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	3101      	adds	r1, #1
 800b4ea:	f7ff ff90 	bl	800b40e <_Balloc>
 800b4ee:	6922      	ldr	r2, [r4, #16]
 800b4f0:	3202      	adds	r2, #2
 800b4f2:	f104 010c 	add.w	r1, r4, #12
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	300c      	adds	r0, #12
 800b4fc:	f7ff ff7a 	bl	800b3f4 <memcpy>
 800b500:	4621      	mov	r1, r4
 800b502:	4630      	mov	r0, r6
 800b504:	f7ff ffb7 	bl	800b476 <_Bfree>
 800b508:	4644      	mov	r4, r8
 800b50a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b50e:	3501      	adds	r5, #1
 800b510:	615f      	str	r7, [r3, #20]
 800b512:	6125      	str	r5, [r4, #16]
 800b514:	4620      	mov	r0, r4
 800b516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b51a <__hi0bits>:
 800b51a:	0c02      	lsrs	r2, r0, #16
 800b51c:	0412      	lsls	r2, r2, #16
 800b51e:	4603      	mov	r3, r0
 800b520:	b9b2      	cbnz	r2, 800b550 <__hi0bits+0x36>
 800b522:	0403      	lsls	r3, r0, #16
 800b524:	2010      	movs	r0, #16
 800b526:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b52a:	bf04      	itt	eq
 800b52c:	021b      	lsleq	r3, r3, #8
 800b52e:	3008      	addeq	r0, #8
 800b530:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b534:	bf04      	itt	eq
 800b536:	011b      	lsleq	r3, r3, #4
 800b538:	3004      	addeq	r0, #4
 800b53a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b53e:	bf04      	itt	eq
 800b540:	009b      	lsleq	r3, r3, #2
 800b542:	3002      	addeq	r0, #2
 800b544:	2b00      	cmp	r3, #0
 800b546:	db06      	blt.n	800b556 <__hi0bits+0x3c>
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	d503      	bpl.n	800b554 <__hi0bits+0x3a>
 800b54c:	3001      	adds	r0, #1
 800b54e:	4770      	bx	lr
 800b550:	2000      	movs	r0, #0
 800b552:	e7e8      	b.n	800b526 <__hi0bits+0xc>
 800b554:	2020      	movs	r0, #32
 800b556:	4770      	bx	lr

0800b558 <__lo0bits>:
 800b558:	6803      	ldr	r3, [r0, #0]
 800b55a:	f013 0207 	ands.w	r2, r3, #7
 800b55e:	4601      	mov	r1, r0
 800b560:	d00b      	beq.n	800b57a <__lo0bits+0x22>
 800b562:	07da      	lsls	r2, r3, #31
 800b564:	d423      	bmi.n	800b5ae <__lo0bits+0x56>
 800b566:	0798      	lsls	r0, r3, #30
 800b568:	bf49      	itett	mi
 800b56a:	085b      	lsrmi	r3, r3, #1
 800b56c:	089b      	lsrpl	r3, r3, #2
 800b56e:	2001      	movmi	r0, #1
 800b570:	600b      	strmi	r3, [r1, #0]
 800b572:	bf5c      	itt	pl
 800b574:	600b      	strpl	r3, [r1, #0]
 800b576:	2002      	movpl	r0, #2
 800b578:	4770      	bx	lr
 800b57a:	b298      	uxth	r0, r3
 800b57c:	b9a8      	cbnz	r0, 800b5aa <__lo0bits+0x52>
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	2010      	movs	r0, #16
 800b582:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b586:	bf04      	itt	eq
 800b588:	0a1b      	lsreq	r3, r3, #8
 800b58a:	3008      	addeq	r0, #8
 800b58c:	071a      	lsls	r2, r3, #28
 800b58e:	bf04      	itt	eq
 800b590:	091b      	lsreq	r3, r3, #4
 800b592:	3004      	addeq	r0, #4
 800b594:	079a      	lsls	r2, r3, #30
 800b596:	bf04      	itt	eq
 800b598:	089b      	lsreq	r3, r3, #2
 800b59a:	3002      	addeq	r0, #2
 800b59c:	07da      	lsls	r2, r3, #31
 800b59e:	d402      	bmi.n	800b5a6 <__lo0bits+0x4e>
 800b5a0:	085b      	lsrs	r3, r3, #1
 800b5a2:	d006      	beq.n	800b5b2 <__lo0bits+0x5a>
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	600b      	str	r3, [r1, #0]
 800b5a8:	4770      	bx	lr
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	e7e9      	b.n	800b582 <__lo0bits+0x2a>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	4770      	bx	lr
 800b5b2:	2020      	movs	r0, #32
 800b5b4:	4770      	bx	lr

0800b5b6 <__i2b>:
 800b5b6:	b510      	push	{r4, lr}
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	f7ff ff27 	bl	800b40e <_Balloc>
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	6144      	str	r4, [r0, #20]
 800b5c4:	6102      	str	r2, [r0, #16]
 800b5c6:	bd10      	pop	{r4, pc}

0800b5c8 <__multiply>:
 800b5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	690a      	ldr	r2, [r1, #16]
 800b5d0:	6923      	ldr	r3, [r4, #16]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	bfb8      	it	lt
 800b5d6:	460b      	movlt	r3, r1
 800b5d8:	4688      	mov	r8, r1
 800b5da:	bfbc      	itt	lt
 800b5dc:	46a0      	movlt	r8, r4
 800b5de:	461c      	movlt	r4, r3
 800b5e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b5e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5f0:	eb07 0609 	add.w	r6, r7, r9
 800b5f4:	42b3      	cmp	r3, r6
 800b5f6:	bfb8      	it	lt
 800b5f8:	3101      	addlt	r1, #1
 800b5fa:	f7ff ff08 	bl	800b40e <_Balloc>
 800b5fe:	f100 0514 	add.w	r5, r0, #20
 800b602:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b606:	462b      	mov	r3, r5
 800b608:	2200      	movs	r2, #0
 800b60a:	4573      	cmp	r3, lr
 800b60c:	d316      	bcc.n	800b63c <__multiply+0x74>
 800b60e:	f104 0214 	add.w	r2, r4, #20
 800b612:	f108 0114 	add.w	r1, r8, #20
 800b616:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b61a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	9b00      	ldr	r3, [sp, #0]
 800b622:	9201      	str	r2, [sp, #4]
 800b624:	4293      	cmp	r3, r2
 800b626:	d80c      	bhi.n	800b642 <__multiply+0x7a>
 800b628:	2e00      	cmp	r6, #0
 800b62a:	dd03      	ble.n	800b634 <__multiply+0x6c>
 800b62c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b630:	2b00      	cmp	r3, #0
 800b632:	d05d      	beq.n	800b6f0 <__multiply+0x128>
 800b634:	6106      	str	r6, [r0, #16]
 800b636:	b003      	add	sp, #12
 800b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63c:	f843 2b04 	str.w	r2, [r3], #4
 800b640:	e7e3      	b.n	800b60a <__multiply+0x42>
 800b642:	f8b2 b000 	ldrh.w	fp, [r2]
 800b646:	f1bb 0f00 	cmp.w	fp, #0
 800b64a:	d023      	beq.n	800b694 <__multiply+0xcc>
 800b64c:	4689      	mov	r9, r1
 800b64e:	46ac      	mov	ip, r5
 800b650:	f04f 0800 	mov.w	r8, #0
 800b654:	f859 4b04 	ldr.w	r4, [r9], #4
 800b658:	f8dc a000 	ldr.w	sl, [ip]
 800b65c:	b2a3      	uxth	r3, r4
 800b65e:	fa1f fa8a 	uxth.w	sl, sl
 800b662:	fb0b a303 	mla	r3, fp, r3, sl
 800b666:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b66a:	f8dc 4000 	ldr.w	r4, [ip]
 800b66e:	4443      	add	r3, r8
 800b670:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b674:	fb0b 840a 	mla	r4, fp, sl, r8
 800b678:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b67c:	46e2      	mov	sl, ip
 800b67e:	b29b      	uxth	r3, r3
 800b680:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b684:	454f      	cmp	r7, r9
 800b686:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b68a:	f84a 3b04 	str.w	r3, [sl], #4
 800b68e:	d82b      	bhi.n	800b6e8 <__multiply+0x120>
 800b690:	f8cc 8004 	str.w	r8, [ip, #4]
 800b694:	9b01      	ldr	r3, [sp, #4]
 800b696:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b69a:	3204      	adds	r2, #4
 800b69c:	f1ba 0f00 	cmp.w	sl, #0
 800b6a0:	d020      	beq.n	800b6e4 <__multiply+0x11c>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	4689      	mov	r9, r1
 800b6a6:	46a8      	mov	r8, r5
 800b6a8:	f04f 0b00 	mov.w	fp, #0
 800b6ac:	f8b9 c000 	ldrh.w	ip, [r9]
 800b6b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b6b4:	fb0a 440c 	mla	r4, sl, ip, r4
 800b6b8:	445c      	add	r4, fp
 800b6ba:	46c4      	mov	ip, r8
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6c2:	f84c 3b04 	str.w	r3, [ip], #4
 800b6c6:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6ca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b6ce:	0c1b      	lsrs	r3, r3, #16
 800b6d0:	fb0a b303 	mla	r3, sl, r3, fp
 800b6d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b6d8:	454f      	cmp	r7, r9
 800b6da:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b6de:	d805      	bhi.n	800b6ec <__multiply+0x124>
 800b6e0:	f8c8 3004 	str.w	r3, [r8, #4]
 800b6e4:	3504      	adds	r5, #4
 800b6e6:	e79b      	b.n	800b620 <__multiply+0x58>
 800b6e8:	46d4      	mov	ip, sl
 800b6ea:	e7b3      	b.n	800b654 <__multiply+0x8c>
 800b6ec:	46e0      	mov	r8, ip
 800b6ee:	e7dd      	b.n	800b6ac <__multiply+0xe4>
 800b6f0:	3e01      	subs	r6, #1
 800b6f2:	e799      	b.n	800b628 <__multiply+0x60>

0800b6f4 <__pow5mult>:
 800b6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f8:	4615      	mov	r5, r2
 800b6fa:	f012 0203 	ands.w	r2, r2, #3
 800b6fe:	4606      	mov	r6, r0
 800b700:	460f      	mov	r7, r1
 800b702:	d007      	beq.n	800b714 <__pow5mult+0x20>
 800b704:	3a01      	subs	r2, #1
 800b706:	4c21      	ldr	r4, [pc, #132]	; (800b78c <__pow5mult+0x98>)
 800b708:	2300      	movs	r3, #0
 800b70a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b70e:	f7ff fec9 	bl	800b4a4 <__multadd>
 800b712:	4607      	mov	r7, r0
 800b714:	10ad      	asrs	r5, r5, #2
 800b716:	d035      	beq.n	800b784 <__pow5mult+0x90>
 800b718:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b71a:	b93c      	cbnz	r4, 800b72c <__pow5mult+0x38>
 800b71c:	2010      	movs	r0, #16
 800b71e:	f7fe fac9 	bl	8009cb4 <malloc>
 800b722:	6270      	str	r0, [r6, #36]	; 0x24
 800b724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b728:	6004      	str	r4, [r0, #0]
 800b72a:	60c4      	str	r4, [r0, #12]
 800b72c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b734:	b94c      	cbnz	r4, 800b74a <__pow5mult+0x56>
 800b736:	f240 2171 	movw	r1, #625	; 0x271
 800b73a:	4630      	mov	r0, r6
 800b73c:	f7ff ff3b 	bl	800b5b6 <__i2b>
 800b740:	2300      	movs	r3, #0
 800b742:	f8c8 0008 	str.w	r0, [r8, #8]
 800b746:	4604      	mov	r4, r0
 800b748:	6003      	str	r3, [r0, #0]
 800b74a:	f04f 0800 	mov.w	r8, #0
 800b74e:	07eb      	lsls	r3, r5, #31
 800b750:	d50a      	bpl.n	800b768 <__pow5mult+0x74>
 800b752:	4639      	mov	r1, r7
 800b754:	4622      	mov	r2, r4
 800b756:	4630      	mov	r0, r6
 800b758:	f7ff ff36 	bl	800b5c8 <__multiply>
 800b75c:	4639      	mov	r1, r7
 800b75e:	4681      	mov	r9, r0
 800b760:	4630      	mov	r0, r6
 800b762:	f7ff fe88 	bl	800b476 <_Bfree>
 800b766:	464f      	mov	r7, r9
 800b768:	106d      	asrs	r5, r5, #1
 800b76a:	d00b      	beq.n	800b784 <__pow5mult+0x90>
 800b76c:	6820      	ldr	r0, [r4, #0]
 800b76e:	b938      	cbnz	r0, 800b780 <__pow5mult+0x8c>
 800b770:	4622      	mov	r2, r4
 800b772:	4621      	mov	r1, r4
 800b774:	4630      	mov	r0, r6
 800b776:	f7ff ff27 	bl	800b5c8 <__multiply>
 800b77a:	6020      	str	r0, [r4, #0]
 800b77c:	f8c0 8000 	str.w	r8, [r0]
 800b780:	4604      	mov	r4, r0
 800b782:	e7e4      	b.n	800b74e <__pow5mult+0x5a>
 800b784:	4638      	mov	r0, r7
 800b786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b78a:	bf00      	nop
 800b78c:	0800bf18 	.word	0x0800bf18

0800b790 <__lshift>:
 800b790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	460c      	mov	r4, r1
 800b796:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b79a:	6923      	ldr	r3, [r4, #16]
 800b79c:	6849      	ldr	r1, [r1, #4]
 800b79e:	eb0a 0903 	add.w	r9, sl, r3
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	4616      	mov	r6, r2
 800b7a8:	f109 0501 	add.w	r5, r9, #1
 800b7ac:	42ab      	cmp	r3, r5
 800b7ae:	db32      	blt.n	800b816 <__lshift+0x86>
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f7ff fe2c 	bl	800b40e <_Balloc>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	4680      	mov	r8, r0
 800b7ba:	f100 0114 	add.w	r1, r0, #20
 800b7be:	461a      	mov	r2, r3
 800b7c0:	4553      	cmp	r3, sl
 800b7c2:	db2b      	blt.n	800b81c <__lshift+0x8c>
 800b7c4:	6920      	ldr	r0, [r4, #16]
 800b7c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7ca:	f104 0314 	add.w	r3, r4, #20
 800b7ce:	f016 021f 	ands.w	r2, r6, #31
 800b7d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7da:	d025      	beq.n	800b828 <__lshift+0x98>
 800b7dc:	f1c2 0e20 	rsb	lr, r2, #32
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	681e      	ldr	r6, [r3, #0]
 800b7e4:	468a      	mov	sl, r1
 800b7e6:	4096      	lsls	r6, r2
 800b7e8:	4330      	orrs	r0, r6
 800b7ea:	f84a 0b04 	str.w	r0, [sl], #4
 800b7ee:	f853 0b04 	ldr.w	r0, [r3], #4
 800b7f2:	459c      	cmp	ip, r3
 800b7f4:	fa20 f00e 	lsr.w	r0, r0, lr
 800b7f8:	d814      	bhi.n	800b824 <__lshift+0x94>
 800b7fa:	6048      	str	r0, [r1, #4]
 800b7fc:	b108      	cbz	r0, 800b802 <__lshift+0x72>
 800b7fe:	f109 0502 	add.w	r5, r9, #2
 800b802:	3d01      	subs	r5, #1
 800b804:	4638      	mov	r0, r7
 800b806:	f8c8 5010 	str.w	r5, [r8, #16]
 800b80a:	4621      	mov	r1, r4
 800b80c:	f7ff fe33 	bl	800b476 <_Bfree>
 800b810:	4640      	mov	r0, r8
 800b812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b816:	3101      	adds	r1, #1
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	e7c7      	b.n	800b7ac <__lshift+0x1c>
 800b81c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b820:	3301      	adds	r3, #1
 800b822:	e7cd      	b.n	800b7c0 <__lshift+0x30>
 800b824:	4651      	mov	r1, sl
 800b826:	e7dc      	b.n	800b7e2 <__lshift+0x52>
 800b828:	3904      	subs	r1, #4
 800b82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b832:	459c      	cmp	ip, r3
 800b834:	d8f9      	bhi.n	800b82a <__lshift+0x9a>
 800b836:	e7e4      	b.n	800b802 <__lshift+0x72>

0800b838 <__mcmp>:
 800b838:	6903      	ldr	r3, [r0, #16]
 800b83a:	690a      	ldr	r2, [r1, #16]
 800b83c:	1a9b      	subs	r3, r3, r2
 800b83e:	b530      	push	{r4, r5, lr}
 800b840:	d10c      	bne.n	800b85c <__mcmp+0x24>
 800b842:	0092      	lsls	r2, r2, #2
 800b844:	3014      	adds	r0, #20
 800b846:	3114      	adds	r1, #20
 800b848:	1884      	adds	r4, r0, r2
 800b84a:	4411      	add	r1, r2
 800b84c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b850:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b854:	4295      	cmp	r5, r2
 800b856:	d003      	beq.n	800b860 <__mcmp+0x28>
 800b858:	d305      	bcc.n	800b866 <__mcmp+0x2e>
 800b85a:	2301      	movs	r3, #1
 800b85c:	4618      	mov	r0, r3
 800b85e:	bd30      	pop	{r4, r5, pc}
 800b860:	42a0      	cmp	r0, r4
 800b862:	d3f3      	bcc.n	800b84c <__mcmp+0x14>
 800b864:	e7fa      	b.n	800b85c <__mcmp+0x24>
 800b866:	f04f 33ff 	mov.w	r3, #4294967295
 800b86a:	e7f7      	b.n	800b85c <__mcmp+0x24>

0800b86c <__mdiff>:
 800b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	460d      	mov	r5, r1
 800b872:	4607      	mov	r7, r0
 800b874:	4611      	mov	r1, r2
 800b876:	4628      	mov	r0, r5
 800b878:	4614      	mov	r4, r2
 800b87a:	f7ff ffdd 	bl	800b838 <__mcmp>
 800b87e:	1e06      	subs	r6, r0, #0
 800b880:	d108      	bne.n	800b894 <__mdiff+0x28>
 800b882:	4631      	mov	r1, r6
 800b884:	4638      	mov	r0, r7
 800b886:	f7ff fdc2 	bl	800b40e <_Balloc>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b894:	bfa4      	itt	ge
 800b896:	4623      	movge	r3, r4
 800b898:	462c      	movge	r4, r5
 800b89a:	4638      	mov	r0, r7
 800b89c:	6861      	ldr	r1, [r4, #4]
 800b89e:	bfa6      	itte	ge
 800b8a0:	461d      	movge	r5, r3
 800b8a2:	2600      	movge	r6, #0
 800b8a4:	2601      	movlt	r6, #1
 800b8a6:	f7ff fdb2 	bl	800b40e <_Balloc>
 800b8aa:	692b      	ldr	r3, [r5, #16]
 800b8ac:	60c6      	str	r6, [r0, #12]
 800b8ae:	6926      	ldr	r6, [r4, #16]
 800b8b0:	f105 0914 	add.w	r9, r5, #20
 800b8b4:	f104 0214 	add.w	r2, r4, #20
 800b8b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b8bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b8c0:	f100 0514 	add.w	r5, r0, #20
 800b8c4:	f04f 0e00 	mov.w	lr, #0
 800b8c8:	f852 ab04 	ldr.w	sl, [r2], #4
 800b8cc:	f859 4b04 	ldr.w	r4, [r9], #4
 800b8d0:	fa1e f18a 	uxtah	r1, lr, sl
 800b8d4:	b2a3      	uxth	r3, r4
 800b8d6:	1ac9      	subs	r1, r1, r3
 800b8d8:	0c23      	lsrs	r3, r4, #16
 800b8da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b8de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8e2:	b289      	uxth	r1, r1
 800b8e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b8e8:	45c8      	cmp	r8, r9
 800b8ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8ee:	4694      	mov	ip, r2
 800b8f0:	f845 3b04 	str.w	r3, [r5], #4
 800b8f4:	d8e8      	bhi.n	800b8c8 <__mdiff+0x5c>
 800b8f6:	45bc      	cmp	ip, r7
 800b8f8:	d304      	bcc.n	800b904 <__mdiff+0x98>
 800b8fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b8fe:	b183      	cbz	r3, 800b922 <__mdiff+0xb6>
 800b900:	6106      	str	r6, [r0, #16]
 800b902:	e7c5      	b.n	800b890 <__mdiff+0x24>
 800b904:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b908:	fa1e f381 	uxtah	r3, lr, r1
 800b90c:	141a      	asrs	r2, r3, #16
 800b90e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b912:	b29b      	uxth	r3, r3
 800b914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b918:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b91c:	f845 3b04 	str.w	r3, [r5], #4
 800b920:	e7e9      	b.n	800b8f6 <__mdiff+0x8a>
 800b922:	3e01      	subs	r6, #1
 800b924:	e7e9      	b.n	800b8fa <__mdiff+0x8e>

0800b926 <__d2b>:
 800b926:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b92a:	460e      	mov	r6, r1
 800b92c:	2101      	movs	r1, #1
 800b92e:	ec59 8b10 	vmov	r8, r9, d0
 800b932:	4615      	mov	r5, r2
 800b934:	f7ff fd6b 	bl	800b40e <_Balloc>
 800b938:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b93c:	4607      	mov	r7, r0
 800b93e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b942:	bb34      	cbnz	r4, 800b992 <__d2b+0x6c>
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	f1b8 0300 	subs.w	r3, r8, #0
 800b94a:	d027      	beq.n	800b99c <__d2b+0x76>
 800b94c:	a802      	add	r0, sp, #8
 800b94e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b952:	f7ff fe01 	bl	800b558 <__lo0bits>
 800b956:	9900      	ldr	r1, [sp, #0]
 800b958:	b1f0      	cbz	r0, 800b998 <__d2b+0x72>
 800b95a:	9a01      	ldr	r2, [sp, #4]
 800b95c:	f1c0 0320 	rsb	r3, r0, #32
 800b960:	fa02 f303 	lsl.w	r3, r2, r3
 800b964:	430b      	orrs	r3, r1
 800b966:	40c2      	lsrs	r2, r0
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	9201      	str	r2, [sp, #4]
 800b96c:	9b01      	ldr	r3, [sp, #4]
 800b96e:	61bb      	str	r3, [r7, #24]
 800b970:	2b00      	cmp	r3, #0
 800b972:	bf14      	ite	ne
 800b974:	2102      	movne	r1, #2
 800b976:	2101      	moveq	r1, #1
 800b978:	6139      	str	r1, [r7, #16]
 800b97a:	b1c4      	cbz	r4, 800b9ae <__d2b+0x88>
 800b97c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b980:	4404      	add	r4, r0
 800b982:	6034      	str	r4, [r6, #0]
 800b984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b988:	6028      	str	r0, [r5, #0]
 800b98a:	4638      	mov	r0, r7
 800b98c:	b003      	add	sp, #12
 800b98e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b996:	e7d5      	b.n	800b944 <__d2b+0x1e>
 800b998:	6179      	str	r1, [r7, #20]
 800b99a:	e7e7      	b.n	800b96c <__d2b+0x46>
 800b99c:	a801      	add	r0, sp, #4
 800b99e:	f7ff fddb 	bl	800b558 <__lo0bits>
 800b9a2:	9b01      	ldr	r3, [sp, #4]
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	6139      	str	r1, [r7, #16]
 800b9aa:	3020      	adds	r0, #32
 800b9ac:	e7e5      	b.n	800b97a <__d2b+0x54>
 800b9ae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b9b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9b6:	6030      	str	r0, [r6, #0]
 800b9b8:	6918      	ldr	r0, [r3, #16]
 800b9ba:	f7ff fdae 	bl	800b51a <__hi0bits>
 800b9be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b9c2:	e7e1      	b.n	800b988 <__d2b+0x62>

0800b9c4 <_calloc_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	fb02 f401 	mul.w	r4, r2, r1
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	f7fe f9d8 	bl	8009d80 <_malloc_r>
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	b118      	cbz	r0, 800b9dc <_calloc_r+0x18>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	f7fe f97c 	bl	8009cd4 <memset>
 800b9dc:	4628      	mov	r0, r5
 800b9de:	bd38      	pop	{r3, r4, r5, pc}

0800b9e0 <__ssputs_r>:
 800b9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e4:	688e      	ldr	r6, [r1, #8]
 800b9e6:	429e      	cmp	r6, r3
 800b9e8:	4682      	mov	sl, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	4690      	mov	r8, r2
 800b9ee:	4699      	mov	r9, r3
 800b9f0:	d837      	bhi.n	800ba62 <__ssputs_r+0x82>
 800b9f2:	898a      	ldrh	r2, [r1, #12]
 800b9f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9f8:	d031      	beq.n	800ba5e <__ssputs_r+0x7e>
 800b9fa:	6825      	ldr	r5, [r4, #0]
 800b9fc:	6909      	ldr	r1, [r1, #16]
 800b9fe:	1a6f      	subs	r7, r5, r1
 800ba00:	6965      	ldr	r5, [r4, #20]
 800ba02:	2302      	movs	r3, #2
 800ba04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba08:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba0c:	f109 0301 	add.w	r3, r9, #1
 800ba10:	443b      	add	r3, r7
 800ba12:	429d      	cmp	r5, r3
 800ba14:	bf38      	it	cc
 800ba16:	461d      	movcc	r5, r3
 800ba18:	0553      	lsls	r3, r2, #21
 800ba1a:	d530      	bpl.n	800ba7e <__ssputs_r+0x9e>
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	f7fe f9af 	bl	8009d80 <_malloc_r>
 800ba22:	4606      	mov	r6, r0
 800ba24:	b950      	cbnz	r0, 800ba3c <__ssputs_r+0x5c>
 800ba26:	230c      	movs	r3, #12
 800ba28:	f8ca 3000 	str.w	r3, [sl]
 800ba2c:	89a3      	ldrh	r3, [r4, #12]
 800ba2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	f04f 30ff 	mov.w	r0, #4294967295
 800ba38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba3c:	463a      	mov	r2, r7
 800ba3e:	6921      	ldr	r1, [r4, #16]
 800ba40:	f7ff fcd8 	bl	800b3f4 <memcpy>
 800ba44:	89a3      	ldrh	r3, [r4, #12]
 800ba46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba4e:	81a3      	strh	r3, [r4, #12]
 800ba50:	6126      	str	r6, [r4, #16]
 800ba52:	6165      	str	r5, [r4, #20]
 800ba54:	443e      	add	r6, r7
 800ba56:	1bed      	subs	r5, r5, r7
 800ba58:	6026      	str	r6, [r4, #0]
 800ba5a:	60a5      	str	r5, [r4, #8]
 800ba5c:	464e      	mov	r6, r9
 800ba5e:	454e      	cmp	r6, r9
 800ba60:	d900      	bls.n	800ba64 <__ssputs_r+0x84>
 800ba62:	464e      	mov	r6, r9
 800ba64:	4632      	mov	r2, r6
 800ba66:	4641      	mov	r1, r8
 800ba68:	6820      	ldr	r0, [r4, #0]
 800ba6a:	f000 f91d 	bl	800bca8 <memmove>
 800ba6e:	68a3      	ldr	r3, [r4, #8]
 800ba70:	1b9b      	subs	r3, r3, r6
 800ba72:	60a3      	str	r3, [r4, #8]
 800ba74:	6823      	ldr	r3, [r4, #0]
 800ba76:	441e      	add	r6, r3
 800ba78:	6026      	str	r6, [r4, #0]
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	e7dc      	b.n	800ba38 <__ssputs_r+0x58>
 800ba7e:	462a      	mov	r2, r5
 800ba80:	f000 f92b 	bl	800bcda <_realloc_r>
 800ba84:	4606      	mov	r6, r0
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d1e2      	bne.n	800ba50 <__ssputs_r+0x70>
 800ba8a:	6921      	ldr	r1, [r4, #16]
 800ba8c:	4650      	mov	r0, sl
 800ba8e:	f7fe f929 	bl	8009ce4 <_free_r>
 800ba92:	e7c8      	b.n	800ba26 <__ssputs_r+0x46>

0800ba94 <_svfiprintf_r>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	461d      	mov	r5, r3
 800ba9a:	898b      	ldrh	r3, [r1, #12]
 800ba9c:	061f      	lsls	r7, r3, #24
 800ba9e:	b09d      	sub	sp, #116	; 0x74
 800baa0:	4680      	mov	r8, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	4616      	mov	r6, r2
 800baa6:	d50f      	bpl.n	800bac8 <_svfiprintf_r+0x34>
 800baa8:	690b      	ldr	r3, [r1, #16]
 800baaa:	b96b      	cbnz	r3, 800bac8 <_svfiprintf_r+0x34>
 800baac:	2140      	movs	r1, #64	; 0x40
 800baae:	f7fe f967 	bl	8009d80 <_malloc_r>
 800bab2:	6020      	str	r0, [r4, #0]
 800bab4:	6120      	str	r0, [r4, #16]
 800bab6:	b928      	cbnz	r0, 800bac4 <_svfiprintf_r+0x30>
 800bab8:	230c      	movs	r3, #12
 800baba:	f8c8 3000 	str.w	r3, [r8]
 800babe:	f04f 30ff 	mov.w	r0, #4294967295
 800bac2:	e0c8      	b.n	800bc56 <_svfiprintf_r+0x1c2>
 800bac4:	2340      	movs	r3, #64	; 0x40
 800bac6:	6163      	str	r3, [r4, #20]
 800bac8:	2300      	movs	r3, #0
 800baca:	9309      	str	r3, [sp, #36]	; 0x24
 800bacc:	2320      	movs	r3, #32
 800bace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bad2:	2330      	movs	r3, #48	; 0x30
 800bad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bad8:	9503      	str	r5, [sp, #12]
 800bada:	f04f 0b01 	mov.w	fp, #1
 800bade:	4637      	mov	r7, r6
 800bae0:	463d      	mov	r5, r7
 800bae2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bae6:	b10b      	cbz	r3, 800baec <_svfiprintf_r+0x58>
 800bae8:	2b25      	cmp	r3, #37	; 0x25
 800baea:	d13e      	bne.n	800bb6a <_svfiprintf_r+0xd6>
 800baec:	ebb7 0a06 	subs.w	sl, r7, r6
 800baf0:	d00b      	beq.n	800bb0a <_svfiprintf_r+0x76>
 800baf2:	4653      	mov	r3, sl
 800baf4:	4632      	mov	r2, r6
 800baf6:	4621      	mov	r1, r4
 800baf8:	4640      	mov	r0, r8
 800bafa:	f7ff ff71 	bl	800b9e0 <__ssputs_r>
 800bafe:	3001      	adds	r0, #1
 800bb00:	f000 80a4 	beq.w	800bc4c <_svfiprintf_r+0x1b8>
 800bb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb06:	4453      	add	r3, sl
 800bb08:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0a:	783b      	ldrb	r3, [r7, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 809d 	beq.w	800bc4c <_svfiprintf_r+0x1b8>
 800bb12:	2300      	movs	r3, #0
 800bb14:	f04f 32ff 	mov.w	r2, #4294967295
 800bb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	9307      	str	r3, [sp, #28]
 800bb20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb24:	931a      	str	r3, [sp, #104]	; 0x68
 800bb26:	462f      	mov	r7, r5
 800bb28:	2205      	movs	r2, #5
 800bb2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb2e:	4850      	ldr	r0, [pc, #320]	; (800bc70 <_svfiprintf_r+0x1dc>)
 800bb30:	f7f4 fb56 	bl	80001e0 <memchr>
 800bb34:	9b04      	ldr	r3, [sp, #16]
 800bb36:	b9d0      	cbnz	r0, 800bb6e <_svfiprintf_r+0xda>
 800bb38:	06d9      	lsls	r1, r3, #27
 800bb3a:	bf44      	itt	mi
 800bb3c:	2220      	movmi	r2, #32
 800bb3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb42:	071a      	lsls	r2, r3, #28
 800bb44:	bf44      	itt	mi
 800bb46:	222b      	movmi	r2, #43	; 0x2b
 800bb48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb4c:	782a      	ldrb	r2, [r5, #0]
 800bb4e:	2a2a      	cmp	r2, #42	; 0x2a
 800bb50:	d015      	beq.n	800bb7e <_svfiprintf_r+0xea>
 800bb52:	9a07      	ldr	r2, [sp, #28]
 800bb54:	462f      	mov	r7, r5
 800bb56:	2000      	movs	r0, #0
 800bb58:	250a      	movs	r5, #10
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb60:	3b30      	subs	r3, #48	; 0x30
 800bb62:	2b09      	cmp	r3, #9
 800bb64:	d94d      	bls.n	800bc02 <_svfiprintf_r+0x16e>
 800bb66:	b1b8      	cbz	r0, 800bb98 <_svfiprintf_r+0x104>
 800bb68:	e00f      	b.n	800bb8a <_svfiprintf_r+0xf6>
 800bb6a:	462f      	mov	r7, r5
 800bb6c:	e7b8      	b.n	800bae0 <_svfiprintf_r+0x4c>
 800bb6e:	4a40      	ldr	r2, [pc, #256]	; (800bc70 <_svfiprintf_r+0x1dc>)
 800bb70:	1a80      	subs	r0, r0, r2
 800bb72:	fa0b f000 	lsl.w	r0, fp, r0
 800bb76:	4318      	orrs	r0, r3
 800bb78:	9004      	str	r0, [sp, #16]
 800bb7a:	463d      	mov	r5, r7
 800bb7c:	e7d3      	b.n	800bb26 <_svfiprintf_r+0x92>
 800bb7e:	9a03      	ldr	r2, [sp, #12]
 800bb80:	1d11      	adds	r1, r2, #4
 800bb82:	6812      	ldr	r2, [r2, #0]
 800bb84:	9103      	str	r1, [sp, #12]
 800bb86:	2a00      	cmp	r2, #0
 800bb88:	db01      	blt.n	800bb8e <_svfiprintf_r+0xfa>
 800bb8a:	9207      	str	r2, [sp, #28]
 800bb8c:	e004      	b.n	800bb98 <_svfiprintf_r+0x104>
 800bb8e:	4252      	negs	r2, r2
 800bb90:	f043 0302 	orr.w	r3, r3, #2
 800bb94:	9207      	str	r2, [sp, #28]
 800bb96:	9304      	str	r3, [sp, #16]
 800bb98:	783b      	ldrb	r3, [r7, #0]
 800bb9a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb9c:	d10c      	bne.n	800bbb8 <_svfiprintf_r+0x124>
 800bb9e:	787b      	ldrb	r3, [r7, #1]
 800bba0:	2b2a      	cmp	r3, #42	; 0x2a
 800bba2:	d133      	bne.n	800bc0c <_svfiprintf_r+0x178>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	1d1a      	adds	r2, r3, #4
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	9203      	str	r2, [sp, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	bfb8      	it	lt
 800bbb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbb4:	3702      	adds	r7, #2
 800bbb6:	9305      	str	r3, [sp, #20]
 800bbb8:	4d2e      	ldr	r5, [pc, #184]	; (800bc74 <_svfiprintf_r+0x1e0>)
 800bbba:	7839      	ldrb	r1, [r7, #0]
 800bbbc:	2203      	movs	r2, #3
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f7f4 fb0e 	bl	80001e0 <memchr>
 800bbc4:	b138      	cbz	r0, 800bbd6 <_svfiprintf_r+0x142>
 800bbc6:	2340      	movs	r3, #64	; 0x40
 800bbc8:	1b40      	subs	r0, r0, r5
 800bbca:	fa03 f000 	lsl.w	r0, r3, r0
 800bbce:	9b04      	ldr	r3, [sp, #16]
 800bbd0:	4303      	orrs	r3, r0
 800bbd2:	3701      	adds	r7, #1
 800bbd4:	9304      	str	r3, [sp, #16]
 800bbd6:	7839      	ldrb	r1, [r7, #0]
 800bbd8:	4827      	ldr	r0, [pc, #156]	; (800bc78 <_svfiprintf_r+0x1e4>)
 800bbda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbde:	2206      	movs	r2, #6
 800bbe0:	1c7e      	adds	r6, r7, #1
 800bbe2:	f7f4 fafd 	bl	80001e0 <memchr>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d038      	beq.n	800bc5c <_svfiprintf_r+0x1c8>
 800bbea:	4b24      	ldr	r3, [pc, #144]	; (800bc7c <_svfiprintf_r+0x1e8>)
 800bbec:	bb13      	cbnz	r3, 800bc34 <_svfiprintf_r+0x1a0>
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	3307      	adds	r3, #7
 800bbf2:	f023 0307 	bic.w	r3, r3, #7
 800bbf6:	3308      	adds	r3, #8
 800bbf8:	9303      	str	r3, [sp, #12]
 800bbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbfc:	444b      	add	r3, r9
 800bbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bc00:	e76d      	b.n	800bade <_svfiprintf_r+0x4a>
 800bc02:	fb05 3202 	mla	r2, r5, r2, r3
 800bc06:	2001      	movs	r0, #1
 800bc08:	460f      	mov	r7, r1
 800bc0a:	e7a6      	b.n	800bb5a <_svfiprintf_r+0xc6>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	3701      	adds	r7, #1
 800bc10:	9305      	str	r3, [sp, #20]
 800bc12:	4619      	mov	r1, r3
 800bc14:	250a      	movs	r5, #10
 800bc16:	4638      	mov	r0, r7
 800bc18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc1c:	3a30      	subs	r2, #48	; 0x30
 800bc1e:	2a09      	cmp	r2, #9
 800bc20:	d903      	bls.n	800bc2a <_svfiprintf_r+0x196>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d0c8      	beq.n	800bbb8 <_svfiprintf_r+0x124>
 800bc26:	9105      	str	r1, [sp, #20]
 800bc28:	e7c6      	b.n	800bbb8 <_svfiprintf_r+0x124>
 800bc2a:	fb05 2101 	mla	r1, r5, r1, r2
 800bc2e:	2301      	movs	r3, #1
 800bc30:	4607      	mov	r7, r0
 800bc32:	e7f0      	b.n	800bc16 <_svfiprintf_r+0x182>
 800bc34:	ab03      	add	r3, sp, #12
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4b11      	ldr	r3, [pc, #68]	; (800bc80 <_svfiprintf_r+0x1ec>)
 800bc3c:	a904      	add	r1, sp, #16
 800bc3e:	4640      	mov	r0, r8
 800bc40:	f7fe f98c 	bl	8009f5c <_printf_float>
 800bc44:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc48:	4681      	mov	r9, r0
 800bc4a:	d1d6      	bne.n	800bbfa <_svfiprintf_r+0x166>
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	065b      	lsls	r3, r3, #25
 800bc50:	f53f af35 	bmi.w	800babe <_svfiprintf_r+0x2a>
 800bc54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc56:	b01d      	add	sp, #116	; 0x74
 800bc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5c:	ab03      	add	r3, sp, #12
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	4622      	mov	r2, r4
 800bc62:	4b07      	ldr	r3, [pc, #28]	; (800bc80 <_svfiprintf_r+0x1ec>)
 800bc64:	a904      	add	r1, sp, #16
 800bc66:	4640      	mov	r0, r8
 800bc68:	f7fe fc2e 	bl	800a4c8 <_printf_i>
 800bc6c:	e7ea      	b.n	800bc44 <_svfiprintf_r+0x1b0>
 800bc6e:	bf00      	nop
 800bc70:	0800bf24 	.word	0x0800bf24
 800bc74:	0800bf2a 	.word	0x0800bf2a
 800bc78:	0800bf2e 	.word	0x0800bf2e
 800bc7c:	08009f5d 	.word	0x08009f5d
 800bc80:	0800b9e1 	.word	0x0800b9e1

0800bc84 <__ascii_mbtowc>:
 800bc84:	b082      	sub	sp, #8
 800bc86:	b901      	cbnz	r1, 800bc8a <__ascii_mbtowc+0x6>
 800bc88:	a901      	add	r1, sp, #4
 800bc8a:	b142      	cbz	r2, 800bc9e <__ascii_mbtowc+0x1a>
 800bc8c:	b14b      	cbz	r3, 800bca2 <__ascii_mbtowc+0x1e>
 800bc8e:	7813      	ldrb	r3, [r2, #0]
 800bc90:	600b      	str	r3, [r1, #0]
 800bc92:	7812      	ldrb	r2, [r2, #0]
 800bc94:	1c10      	adds	r0, r2, #0
 800bc96:	bf18      	it	ne
 800bc98:	2001      	movne	r0, #1
 800bc9a:	b002      	add	sp, #8
 800bc9c:	4770      	bx	lr
 800bc9e:	4610      	mov	r0, r2
 800bca0:	e7fb      	b.n	800bc9a <__ascii_mbtowc+0x16>
 800bca2:	f06f 0001 	mvn.w	r0, #1
 800bca6:	e7f8      	b.n	800bc9a <__ascii_mbtowc+0x16>

0800bca8 <memmove>:
 800bca8:	4288      	cmp	r0, r1
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	eb01 0302 	add.w	r3, r1, r2
 800bcb0:	d807      	bhi.n	800bcc2 <memmove+0x1a>
 800bcb2:	1e42      	subs	r2, r0, #1
 800bcb4:	4299      	cmp	r1, r3
 800bcb6:	d00a      	beq.n	800bcce <memmove+0x26>
 800bcb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcbc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bcc0:	e7f8      	b.n	800bcb4 <memmove+0xc>
 800bcc2:	4283      	cmp	r3, r0
 800bcc4:	d9f5      	bls.n	800bcb2 <memmove+0xa>
 800bcc6:	1881      	adds	r1, r0, r2
 800bcc8:	1ad2      	subs	r2, r2, r3
 800bcca:	42d3      	cmn	r3, r2
 800bccc:	d100      	bne.n	800bcd0 <memmove+0x28>
 800bcce:	bd10      	pop	{r4, pc}
 800bcd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcd4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bcd8:	e7f7      	b.n	800bcca <memmove+0x22>

0800bcda <_realloc_r>:
 800bcda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcdc:	4607      	mov	r7, r0
 800bcde:	4614      	mov	r4, r2
 800bce0:	460e      	mov	r6, r1
 800bce2:	b921      	cbnz	r1, 800bcee <_realloc_r+0x14>
 800bce4:	4611      	mov	r1, r2
 800bce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bcea:	f7fe b849 	b.w	8009d80 <_malloc_r>
 800bcee:	b922      	cbnz	r2, 800bcfa <_realloc_r+0x20>
 800bcf0:	f7fd fff8 	bl	8009ce4 <_free_r>
 800bcf4:	4625      	mov	r5, r4
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcfa:	f000 f821 	bl	800bd40 <_malloc_usable_size_r>
 800bcfe:	42a0      	cmp	r0, r4
 800bd00:	d20f      	bcs.n	800bd22 <_realloc_r+0x48>
 800bd02:	4621      	mov	r1, r4
 800bd04:	4638      	mov	r0, r7
 800bd06:	f7fe f83b 	bl	8009d80 <_malloc_r>
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d0f2      	beq.n	800bcf6 <_realloc_r+0x1c>
 800bd10:	4631      	mov	r1, r6
 800bd12:	4622      	mov	r2, r4
 800bd14:	f7ff fb6e 	bl	800b3f4 <memcpy>
 800bd18:	4631      	mov	r1, r6
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	f7fd ffe2 	bl	8009ce4 <_free_r>
 800bd20:	e7e9      	b.n	800bcf6 <_realloc_r+0x1c>
 800bd22:	4635      	mov	r5, r6
 800bd24:	e7e7      	b.n	800bcf6 <_realloc_r+0x1c>

0800bd26 <__ascii_wctomb>:
 800bd26:	b149      	cbz	r1, 800bd3c <__ascii_wctomb+0x16>
 800bd28:	2aff      	cmp	r2, #255	; 0xff
 800bd2a:	bf85      	ittet	hi
 800bd2c:	238a      	movhi	r3, #138	; 0x8a
 800bd2e:	6003      	strhi	r3, [r0, #0]
 800bd30:	700a      	strbls	r2, [r1, #0]
 800bd32:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd36:	bf98      	it	ls
 800bd38:	2001      	movls	r0, #1
 800bd3a:	4770      	bx	lr
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	4770      	bx	lr

0800bd40 <_malloc_usable_size_r>:
 800bd40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd44:	1f18      	subs	r0, r3, #4
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	bfbc      	itt	lt
 800bd4a:	580b      	ldrlt	r3, [r1, r0]
 800bd4c:	18c0      	addlt	r0, r0, r3
 800bd4e:	4770      	bx	lr

0800bd50 <_init>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	bf00      	nop
 800bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd56:	bc08      	pop	{r3}
 800bd58:	469e      	mov	lr, r3
 800bd5a:	4770      	bx	lr

0800bd5c <_fini>:
 800bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5e:	bf00      	nop
 800bd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd62:	bc08      	pop	{r3}
 800bd64:	469e      	mov	lr, r3
 800bd66:	4770      	bx	lr

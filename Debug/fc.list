
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800a470  0800a470  0001a470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a740  0800a740  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a748  0800a748  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a748  0800a748  0001a748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a74c  0800a74c  0001a74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800a750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a3c  20000358  0800aaa8  00020358  2**3
                  ALLOC
 10 ._user_heap_stack 00001404  20001d94  0800aaa8  00021d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ed5  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034b5  00000000  00000000  0003a25d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  0003d718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003ea60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022880  00000000  00000000  0003fc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115d0  00000000  00000000  000624c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c330c  00000000  00000000  00073a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136da4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae4  00000000  00000000  00136e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a458 	.word	0x0800a458

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800a458 	.word	0x0800a458

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2130      	movs	r1, #48	; 0x30
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 f8ba 	bl	8002044 <HAL_I2C_Mem_Read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	2b1e      	cmp	r3, #30
 8000ede:	d001      	beq.n	8000ee4 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	21d0      	movs	r1, #208	; 0xd0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f001 f8a2 	bl	8002044 <HAL_I2C_Mem_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000f0a:	7a3b      	ldrb	r3, [r7, #8]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d001      	beq.n	8000f14 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <BMI088_I2C_CORGI_INIT>:

/* CUSTOM SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_CORGI_INIT(I2C_HandleTypeDef *hi2c)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	//uint8_t buf[1]; // Tx Buffer
	ret = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]

	// SET ACCELEROMETER LPF:

	// SET GYROSCOPE LPF:

	return ret;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <BMI088_I2C_Read_Gyro>:
	return HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
}

/* READ ALL GYROSCOPE DATA */
HAL_StatusTypeDef BMI088_I2C_Read_Gyro(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2306      	movs	r3, #6
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	2202      	movs	r2, #2
 8000f54:	21d0      	movs	r1, #208	; 0xd0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 f874 	bl	8002044 <HAL_I2C_Mem_Read>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 fbd7 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f8cb 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 f9cb 	bl	8001310 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f7a:	f000 f92f 	bl	80011dc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f7e:	f006 fce1 	bl	8007944 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8000f82:	f000 f98f 	bl	80012a4 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000f86:	f000 f957 	bl	8001238 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 8000f8a:	485b      	ldr	r0, [pc, #364]	; (80010f8 <main+0x190>)
 8000f8c:	f7ff ff8c 	bl	8000ea8 <BMI088_I2C_Read_CHIP_IDS>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <main+0x32>
 8000f96:	f000 fa4b 	bl	8001430 <Error_Handler>

  // RUN BMI088 INITIALIZATION
  if ( BMI088_I2C_CORGI_INIT(&hi2c1) != HAL_OK ) { Error_Handler(); };
 8000f9a:	4857      	ldr	r0, [pc, #348]	; (80010f8 <main+0x190>)
 8000f9c:	f7ff ffbf 	bl	8000f1e <BMI088_I2C_CORGI_INIT>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <main+0x42>
 8000fa6:	f000 fa43 	bl	8001430 <Error_Handler>

  // START TIMERS
  HAL_TIM_Base_Start_IT(&htim7);
 8000faa:	4854      	ldr	r0, [pc, #336]	; (80010fc <main+0x194>)
 8000fac:	f003 fb13 	bl	80045d6 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8000fb0:	4853      	ldr	r0, [pc, #332]	; (8001100 <main+0x198>)
 8000fb2:	f003 faec 	bl	800458e <HAL_TIM_Base_Start>

  // Get starting time
  tprev = __HAL_TIM_GET_COUNTER(&htim6);
 8000fb6:	4b52      	ldr	r3, [pc, #328]	; (8001100 <main+0x198>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	86fb      	strh	r3, [r7, #54]	; 0x36
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // OPTIONAL DELAY
	  HAL_Delay(5);
 8000fbe:	2005      	movs	r0, #5
 8000fc0:	f000 fc20 	bl	8001804 <HAL_Delay>

	  // READ GYROSCOPE
	  if ( BMI088_I2C_Read_Gyro (&hi2c1, gyro_buf) != HAL_OK ) { Error_Handler(); }
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	484b      	ldr	r0, [pc, #300]	; (80010f8 <main+0x190>)
 8000fcc:	f7ff ffb4 	bl	8000f38 <BMI088_I2C_Read_Gyro>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <main+0x72>
 8000fd6:	f000 fa2b 	bl	8001430 <Error_Handler>

	  // UPDATE TIMER
	  telapsed = __HAL_TIM_GET_COUNTER(&htim6) - tprev;
 8000fda:	4b49      	ldr	r3, [pc, #292]	; (8001100 <main+0x198>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  tprev    = tprev + telapsed;
 8000fe8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000fea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fec:	4413      	add	r3, r2
 8000fee:	86fb      	strh	r3, [r7, #54]	; 0x36

	  // CONVERT TO SIGNED INTEGER, SCALE, AND INTEGRATE
	  double max_rate = 2000.0; // DEPENDS ON GYRO CONFIG
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	4c43      	ldr	r4, [pc, #268]	; (8001104 <main+0x19c>)
 8000ff6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	  for (int i = 0; i < 3; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8000ffe:	e068      	b.n	80010d2 <main+0x16a>
		  temp        = gyro_buf[2*i + 1] << 8 | gyro_buf[2*i];
 8001000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	3301      	adds	r3, #1
 8001006:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800100a:	4413      	add	r3, r2
 800100c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800101c:	440b      	add	r3, r1
 800101e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	83fb      	strh	r3, [r7, #30]
		  rate_buf[i] = ((double)temp*max_rate*pi)/(32767.0*180.0);
 8001028:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001036:	f7ff fadf 	bl	80005f8 <__aeabi_dmul>
 800103a:	4603      	mov	r3, r0
 800103c:	460c      	mov	r4, r1
 800103e:	4618      	mov	r0, r3
 8001040:	4621      	mov	r1, r4
 8001042:	a427      	add	r4, pc, #156	; (adr r4, 80010e0 <main+0x178>)
 8001044:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001048:	461a      	mov	r2, r3
 800104a:	4623      	mov	r3, r4
 800104c:	f7ff fad4 	bl	80005f8 <__aeabi_dmul>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	4618      	mov	r0, r3
 8001056:	4621      	mov	r1, r4
 8001058:	a323      	add	r3, pc, #140	; (adr r3, 80010e8 <main+0x180>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff fbf5 	bl	800084c <__aeabi_ddiv>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800106e:	440a      	add	r2, r1
 8001070:	3a38      	subs	r2, #56	; 0x38
 8001072:	e9c2 3400 	strd	r3, r4, [r2]
		  rot[i]      = rot[i] + 0.000001*(double)telapsed*rate_buf[i];
 8001076:	4a24      	ldr	r2, [pc, #144]	; (8001108 <main+0x1a0>)
 8001078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4413      	add	r3, r2
 800107e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa3d 	bl	8000504 <__aeabi_ui2d>
 800108a:	a319      	add	r3, pc, #100	; (adr r3, 80010f0 <main+0x188>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fab2 	bl	80005f8 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80010a4:	4413      	add	r3, r2
 80010a6:	3b38      	subs	r3, #56	; 0x38
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff faa4 	bl	80005f8 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff f8e8 	bl	800028c <__adddf3>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4911      	ldr	r1, [pc, #68]	; (8001108 <main+0x1a0>)
 80010c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010c4:	00d2      	lsls	r2, r2, #3
 80010c6:	440a      	add	r2, r1
 80010c8:	e9c2 3400 	strd	r3, r4, [r2]
	  for (int i = 0; i < 3; i++){
 80010cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ce:	3301      	adds	r3, #1
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
 80010d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	dd93      	ble.n	8001000 <main+0x98>
  {
 80010d8:	e771      	b.n	8000fbe <main+0x56>
 80010da:	bf00      	nop
 80010dc:	f3af 8000 	nop.w
 80010e0:	53c8d4f1 	.word	0x53c8d4f1
 80010e4:	400921fb 	.word	0x400921fb
 80010e8:	00000000 	.word	0x00000000
 80010ec:	41567fd3 	.word	0x41567fd3
 80010f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80010f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80010f8:	200003a0 	.word	0x200003a0
 80010fc:	20000474 	.word	0x20000474
 8001100:	200003f4 	.word	0x200003f4
 8001104:	409f4000 	.word	0x409f4000
 8001108:	20000378 	.word	0x20000378

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	; 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f007 f960 	bl	80083e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <SystemClock_Config+0xc8>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <SystemClock_Config+0xc8>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <SystemClock_Config+0xc8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <SystemClock_Config+0xcc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <SystemClock_Config+0xcc>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <SystemClock_Config+0xcc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800117c:	2310      	movs	r3, #16
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001180:	23c0      	movs	r3, #192	; 0xc0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fd85 	bl	8003ca0 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800119c:	f000 f948 	bl	8001430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011a4:	2301      	movs	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 ffe0 	bl	8004180 <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011c6:	f000 f933 	bl	8001430 <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3750      	adds	r7, #80	; 0x50
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x50>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_I2C1_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x50>)
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_I2C1_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_I2C1_Init+0x50>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C1_Init+0x50>)
 800121a:	f000 fddb 	bl	8001dd4 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 f904 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200003a0 	.word	0x200003a0
 8001230:	40005400 	.word	0x40005400
 8001234:	000186a0 	.word	0x000186a0

08001238 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM6_Init+0x64>)
 8001248:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MX_TIM6_Init+0x68>)
 800124a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_TIM6_Init+0x64>)
 800124e:	220f      	movs	r2, #15
 8001250:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_TIM6_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_TIM6_Init+0x64>)
 800125a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_TIM6_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_TIM6_Init+0x64>)
 8001268:	f003 f966 	bl	8004538 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001272:	f000 f8dd 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_TIM6_Init+0x64>)
 8001284:	f003 fb9c 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800128e:	f000 f8cf 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200003f4 	.word	0x200003f4
 80012a0:	40001000 	.word	0x40001000

080012a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012aa:	463b      	mov	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_TIM7_Init+0x64>)
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <MX_TIM7_Init+0x68>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16 - 1;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_TIM7_Init+0x64>)
 80012ba:	220f      	movs	r2, #15
 80012bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_TIM7_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_TIM7_Init+0x64>)
 80012c6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012ca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_TIM7_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_TIM7_Init+0x64>)
 80012d4:	f003 f930 	bl	8004538 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80012de:	f000 f8a7 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_TIM7_Init+0x64>)
 80012f0:	f003 fb66 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80012fa:	f000 f899 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000474 	.word	0x20000474
 800130c:	40001400 	.word	0x40001400

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_GPIO_Init+0xb4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <MX_GPIO_Init+0xb4>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <MX_GPIO_Init+0xb4>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_GPIO_Init+0xb4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	21c0      	movs	r1, #192	; 0xc0
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <MX_GPIO_Init+0xb8>)
 800139c:	f000 fd00 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a0:	23c0      	movs	r3, #192	; 0xc0
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_GPIO_Init+0xb8>)
 80013b8:	f000 fb58 	bl	8001a6c <HAL_GPIO_Init>

}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020800 	.word	0x40020800

080013cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af04      	add	r7, sp, #16
 80013d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d11b      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x4a>
		// DATA FORMAT: [X ANGLE]    [Y ANGLE]    [Z ANGLE]    [COMPUTATION TIME (uSec)]
		sprintf(tx_buf, "%f\t%f\t%f\n", rot[0], rot[1], rot[2]);
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013e0:	e9d3 5600 	ldrd	r5, r6, [r3]
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013e6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013ec:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80013f0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80013f4:	e9cd 3400 	strd	r3, r4, [sp]
 80013f8:	462a      	mov	r2, r5
 80013fa:	4633      	mov	r3, r6
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001400:	f007 fd0a 	bl	8008e18 <siprintf>
		CDC_Transmit_FS((uint8_t*)tx_buf, strlen(tx_buf));
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001406:	f7fe fee3 	bl	80001d0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29b      	uxth	r3, r3
 800140e:	4619      	mov	r1, r3
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001412:	f006 fb69 	bl	8007ae8 <CDC_Transmit_FS>
	}
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	bf00      	nop
 8001420:	40001400 	.word	0x40001400
 8001424:	20000378 	.word	0x20000378
 8001428:	0800a470 	.word	0x0800a470
 800142c:	20000434 	.word	0x20000434

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2140      	movs	r1, #64	; 0x40
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <Error_Handler+0x24>)
 800143c:	f000 fcb0 	bl	8001da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <Error_Handler+0x24>)
 8001446:	f000 fcab 	bl	8001da0 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 800144a:	2106      	movs	r1, #6
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <Error_Handler+0x28>)
 800144e:	f006 fb4b 	bl	8007ae8 <CDC_Transmit_FS>
  while (1)
 8001452:	e7fe      	b.n	8001452 <Error_Handler+0x22>
 8001454:	40020800 	.word	0x40020800
 8001458:	0800a47c 	.word	0x0800a47c

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_I2C_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12c      	bne.n	8001528 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_I2C_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014fc:	2304      	movs	r3, #4
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <HAL_I2C_MspInit+0x8c>)
 8001508:	f000 fab0 	bl	8001a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_I2C_MspInit+0x88>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_I2C_MspInit+0x88>)
 8001516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_I2C_MspInit+0x88>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40005400 	.word	0x40005400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400

0800153c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a18      	ldr	r2, [pc, #96]	; (80015ac <HAL_TIM_Base_MspInit+0x70>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10e      	bne.n	800156c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_TIM_Base_MspInit+0x74>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <HAL_TIM_Base_MspInit+0x74>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_TIM_Base_MspInit+0x74>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800156a:	e01a      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_TIM_Base_MspInit+0x78>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d115      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_TIM_Base_MspInit+0x74>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <HAL_TIM_Base_MspInit+0x74>)
 8001580:	f043 0320 	orr.w	r3, r3, #32
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_TIM_Base_MspInit+0x74>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2037      	movs	r0, #55	; 0x37
 8001598:	f000 fa31 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800159c:	2037      	movs	r0, #55	; 0x37
 800159e:	f000 fa4a 	bl	8001a36 <HAL_NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40001000 	.word	0x40001000
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40001400 	.word	0x40001400

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 f8de 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM7_IRQHandler+0x10>)
 8001612:	f003 f804 	bl	800461e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000474 	.word	0x20000474

08001620 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <OTG_FS_IRQHandler+0x10>)
 8001626:	f001 fb07 	bl	8002c38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20001988 	.word	0x20001988

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f006 fe82 	bl	800836c <__errno>
 8001668:	4602      	mov	r2, r0
 800166a:	230c      	movs	r3, #12
 800166c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20020000 	.word	0x20020000
 8001694:	00000400 	.word	0x00000400
 8001698:	20000390 	.word	0x20000390
 800169c:	20001d98 	.word	0x20001d98

080016a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <SystemInit+0x28>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SystemInit+0x28>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SystemInit+0x28>)
 80016b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ba:	609a      	str	r2, [r3, #8]
#endif
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016d2:	e003      	b.n	80016dc <LoopCopyDataInit>

080016d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016da:	3104      	adds	r1, #4

080016dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016e4:	d3f6      	bcc.n	80016d4 <CopyDataInit>
  ldr  r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016e8:	e002      	b.n	80016f0 <LoopFillZerobss>

080016ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016ec:	f842 3b04 	str.w	r3, [r2], #4

080016f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016f4:	d3f9      	bcc.n	80016ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016f6:	f7ff ffd3 	bl	80016a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f006 fe3d 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff fc33 	bl	8000f68 <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001704:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001708:	0800a750 	.word	0x0800a750
  ldr  r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001710:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8001714:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8001718:	20001d94 	.word	0x20001d94

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_Init+0x40>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_Init+0x40>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_Init+0x40>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 f94d 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f808 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fe82 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_InitTick+0x54>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x58>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f965 	bl	8001a52 <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00e      	b.n	80017b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d80a      	bhi.n	80017ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f000 f92d 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <HAL_InitTick+0x5c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	200004b4 	.word	0x200004b4

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200004b4 	.word	0x200004b4

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_Delay+0x40>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000008 	.word	0x20000008

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff29 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff3e 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff31 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e16b      	b.n	8001d60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 815a 	bne.w	8001d5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d00b      	beq.n	8001ac6 <HAL_GPIO_Init+0x5a>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aba:	2b11      	cmp	r3, #17
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d130      	bne.n	8001b28 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 0201 	and.w	r2, r3, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0xfc>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	d123      	bne.n	8001bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0203 	and.w	r2, r3, #3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80b4 	beq.w	8001d5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <HAL_GPIO_Init+0x308>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <HAL_GPIO_Init+0x308>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <HAL_GPIO_Init+0x308>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <HAL_GPIO_Init+0x30c>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_GPIO_Init+0x310>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02b      	beq.n	8001c92 <HAL_GPIO_Init+0x226>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x314>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d025      	beq.n	8001c8e <HAL_GPIO_Init+0x222>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4f      	ldr	r2, [pc, #316]	; (8001d84 <HAL_GPIO_Init+0x318>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01f      	beq.n	8001c8a <HAL_GPIO_Init+0x21e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <HAL_GPIO_Init+0x31c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x21a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <HAL_GPIO_Init+0x320>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x216>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_GPIO_Init+0x324>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x212>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_GPIO_Init+0x328>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x20e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4a      	ldr	r2, [pc, #296]	; (8001d98 <HAL_GPIO_Init+0x32c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x20a>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e00e      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c76:	2308      	movs	r3, #8
 8001c78:	e00c      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e00a      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c7e:	2305      	movs	r3, #5
 8001c80:	e008      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e004      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x228>
 8001c92:	2300      	movs	r3, #0
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f002 0203 	and.w	r2, r2, #3
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca4:	4934      	ldr	r1, [pc, #208]	; (8001d78 <HAL_GPIO_Init+0x30c>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd6:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d00:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d54:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	f67f ae90 	bls.w	8001a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3724      	adds	r7, #36	; 0x24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020c00 	.word	0x40020c00
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40021400 	.word	0x40021400
 8001d94:	40021800 	.word	0x40021800
 8001d98:	40021c00 	.word	0x40021c00
 8001d9c:	40013c00 	.word	0x40013c00

08001da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
 8001dac:	4613      	mov	r3, r2
 8001dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dbc:	e003      	b.n	8001dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dbe:	887b      	ldrh	r3, [r7, #2]
 8001dc0:	041a      	lsls	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e11f      	b.n	8002026 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fb56 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2224      	movs	r2, #36	; 0x24
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e38:	f002 fb6a 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8001e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a7b      	ldr	r2, [pc, #492]	; (8002030 <HAL_I2C_Init+0x25c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d807      	bhi.n	8001e58 <HAL_I2C_Init+0x84>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_I2C_Init+0x260>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e006      	b.n	8001e66 <HAL_I2C_Init+0x92>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a77      	ldr	r2, [pc, #476]	; (8002038 <HAL_I2C_Init+0x264>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	bf94      	ite	ls
 8001e60:	2301      	movls	r3, #1
 8001e62:	2300      	movhi	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0db      	b.n	8002026 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4a72      	ldr	r2, [pc, #456]	; (800203c <HAL_I2C_Init+0x268>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9b      	lsrs	r3, r3, #18
 8001e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a64      	ldr	r2, [pc, #400]	; (8002030 <HAL_I2C_Init+0x25c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d802      	bhi.n	8001ea8 <HAL_I2C_Init+0xd4>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	e009      	b.n	8001ebc <HAL_I2C_Init+0xe8>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_I2C_Init+0x26c>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	3301      	adds	r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4956      	ldr	r1, [pc, #344]	; (8002030 <HAL_I2C_Init+0x25c>)
 8001ed8:	428b      	cmp	r3, r1
 8001eda:	d80d      	bhi.n	8001ef8 <HAL_I2C_Init+0x124>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e59      	subs	r1, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	bf38      	it	cc
 8001ef4:	2304      	movcc	r3, #4
 8001ef6:	e04f      	b.n	8001f98 <HAL_I2C_Init+0x1c4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d111      	bne.n	8001f24 <HAL_I2C_Init+0x150>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e012      	b.n	8001f4a <HAL_I2C_Init+0x176>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1e58      	subs	r0, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	0099      	lsls	r1, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Init+0x17e>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e022      	b.n	8001f98 <HAL_I2C_Init+0x1c4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10e      	bne.n	8001f78 <HAL_I2C_Init+0x1a4>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1e58      	subs	r0, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	440b      	add	r3, r1
 8001f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f76:	e00f      	b.n	8001f98 <HAL_I2C_Init+0x1c4>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e58      	subs	r0, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	0099      	lsls	r1, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	6809      	ldr	r1, [r1, #0]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6911      	ldr	r1, [r2, #16]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68d2      	ldr	r2, [r2, #12]
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	000186a0 	.word	0x000186a0
 8002034:	001e847f 	.word	0x001e847f
 8002038:	003d08ff 	.word	0x003d08ff
 800203c:	431bde83 	.word	0x431bde83
 8002040:	10624dd3 	.word	0x10624dd3

08002044 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	817b      	strh	r3, [r7, #10]
 8002056:	460b      	mov	r3, r1
 8002058:	813b      	strh	r3, [r7, #8]
 800205a:	4613      	mov	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800205e:	f7ff fbc5 	bl	80017ec <HAL_GetTick>
 8002062:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b20      	cmp	r3, #32
 800206e:	f040 8208 	bne.w	8002482 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2319      	movs	r3, #25
 8002078:	2201      	movs	r2, #1
 800207a:	497b      	ldr	r1, [pc, #492]	; (8002268 <HAL_I2C_Mem_Read+0x224>)
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 faef 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002088:	2302      	movs	r3, #2
 800208a:	e1fb      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_I2C_Mem_Read+0x56>
 8002096:	2302      	movs	r3, #2
 8002098:	e1f4      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d007      	beq.n	80020c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2222      	movs	r2, #34	; 0x22
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2240      	movs	r2, #64	; 0x40
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a5b      	ldr	r2, [pc, #364]	; (800226c <HAL_I2C_Mem_Read+0x228>)
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002102:	88f8      	ldrh	r0, [r7, #6]
 8002104:	893a      	ldrh	r2, [r7, #8]
 8002106:	8979      	ldrh	r1, [r7, #10]
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	4603      	mov	r3, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f9bc 	bl	8002490 <I2C_RequestMemoryRead>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1b0      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	d113      	bne.n	8002152 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	623b      	str	r3, [r7, #32]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e184      	b.n	800245c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	2b01      	cmp	r3, #1
 8002158:	d11b      	bne.n	8002192 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e164      	b.n	800245c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	2b02      	cmp	r3, #2
 8002198:	d11b      	bne.n	80021d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	e144      	b.n	800245c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021e8:	e138      	b.n	800245c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	f200 80f1 	bhi.w	80023d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d123      	bne.n	8002244 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fb44 	bl	800288e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e139      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002242:	e10b      	b.n	800245c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	2b02      	cmp	r3, #2
 800224a:	d14e      	bne.n	80022ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	2200      	movs	r2, #0
 8002254:	4906      	ldr	r1, [pc, #24]	; (8002270 <HAL_I2C_Mem_Read+0x22c>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fa02 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e10e      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
 8002266:	bf00      	nop
 8002268:	00100002 	.word	0x00100002
 800226c:	ffff0000 	.word	0xffff0000
 8002270:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022e8:	e0b8      	b.n	800245c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	2200      	movs	r2, #0
 80022f2:	4966      	ldr	r1, [pc, #408]	; (800248c <HAL_I2C_Mem_Read+0x448>)
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f9b3 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0bf      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	2200      	movs	r2, #0
 800234e:	494f      	ldr	r1, [pc, #316]	; (800248c <HAL_I2C_Mem_Read+0x448>)
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f985 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e091      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023d4:	e042      	b.n	800245c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fa57 	bl	800288e <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e04c      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b04      	cmp	r3, #4
 8002428:	d118      	bne.n	800245c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	f47f aec2 	bne.w	80021ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00010004 	.word	0x00010004

08002490 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	460b      	mov	r3, r1
 80024a4:	813b      	strh	r3, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f8c2 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f0:	d103      	bne.n	80024fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0aa      	b.n	8002654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024fe:	897b      	ldrh	r3, [r7, #10]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800250c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	6a3a      	ldr	r2, [r7, #32]
 8002512:	4952      	ldr	r1, [pc, #328]	; (800265c <I2C_RequestMemoryRead+0x1cc>)
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8fa 	bl	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e097      	b.n	8002654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	6a39      	ldr	r1, [r7, #32]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f964 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b04      	cmp	r3, #4
 8002550:	d107      	bne.n	8002562 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e076      	b.n	8002654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800256c:	893b      	ldrh	r3, [r7, #8]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	e021      	b.n	80025bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002578:	893b      	ldrh	r3, [r7, #8]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	b29b      	uxth	r3, r3
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	6a39      	ldr	r1, [r7, #32]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f93e 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00d      	beq.n	80025b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b04      	cmp	r3, #4
 800259c:	d107      	bne.n	80025ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e050      	b.n	8002654 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025b2:	893b      	ldrh	r3, [r7, #8]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	6a39      	ldr	r1, [r7, #32]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f923 	bl	800280c <I2C_WaitOnTXEFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d107      	bne.n	80025e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e035      	b.n	8002654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	2200      	movs	r2, #0
 8002600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f82b 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261e:	d103      	bne.n	8002628 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e013      	b.n	8002654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800262c:	897b      	ldrh	r3, [r7, #10]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	6a3a      	ldr	r2, [r7, #32]
 8002640:	4906      	ldr	r1, [pc, #24]	; (800265c <I2C_RequestMemoryRead+0x1cc>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f863 	bl	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	00010002 	.word	0x00010002

08002660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002670:	e025      	b.n	80026be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d021      	beq.n	80026be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7ff f8b7 	bl	80017ec <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d116      	bne.n	80026be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f043 0220 	orr.w	r2, r3, #32
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e023      	b.n	8002706 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10d      	bne.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4013      	ands	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	e00c      	b.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	429a      	cmp	r2, r3
 8002702:	d0b6      	beq.n	8002672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800271c:	e051      	b.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272c:	d123      	bne.n	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002746:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f043 0204 	orr.w	r2, r3, #4
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e046      	b.n	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d021      	beq.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7ff f835 	bl	80017ec <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d116      	bne.n	80027c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e020      	b.n	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10c      	bne.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4013      	ands	r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf14      	ite	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	2300      	moveq	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e00b      	b.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	43da      	mvns	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4013      	ands	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d18d      	bne.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002818:	e02d      	b.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f88d 	bl	800293a <I2C_IsAcknowledgeFailed>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e02d      	b.n	8002886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d021      	beq.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002832:	f7fe ffdb 	bl	80017ec <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	d302      	bcc.n	8002848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d116      	bne.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f043 0220 	orr.w	r2, r3, #32
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d1ca      	bne.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800289a:	e042      	b.n	8002922 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d119      	bne.n	80028de <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f06f 0210 	mvn.w	r2, #16
 80028b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e029      	b.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028de:	f7fe ff85 	bl	80017ec <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d116      	bne.n	8002922 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f043 0220 	orr.w	r2, r3, #32
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e007      	b.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d1b5      	bne.n	800289c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d11b      	bne.n	800298a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800295a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f043 0204 	orr.w	r2, r3, #4
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	b08f      	sub	sp, #60	; 0x3c
 800299c:	af0a      	add	r7, sp, #40	; 0x28
 800299e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e10f      	b.n	8002bca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f005 f9d5 	bl	8007d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2203      	movs	r2, #3
 80029ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f002 f98e 	bl	8004d0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	687e      	ldr	r6, [r7, #4]
 80029f6:	466d      	mov	r5, sp
 80029f8:	f106 0410 	add.w	r4, r6, #16
 80029fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a08:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a0c:	1d33      	adds	r3, r6, #4
 8002a0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a10:	6838      	ldr	r0, [r7, #0]
 8002a12:	f002 f865 	bl	8004ae0 <USB_CoreInit>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0d0      	b.n	8002bca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 f97c 	bl	8004d2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e04a      	b.n	8002ad0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	333d      	adds	r3, #61	; 0x3d
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	333c      	adds	r3, #60	; 0x3c
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	b298      	uxth	r0, r3
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	3342      	adds	r3, #66	; 0x42
 8002a76:	4602      	mov	r2, r0
 8002a78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	333f      	adds	r3, #63	; 0x3f
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3344      	adds	r3, #68	; 0x44
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3348      	adds	r3, #72	; 0x48
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3350      	adds	r3, #80	; 0x50
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	3301      	adds	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d3af      	bcc.n	8002a3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e044      	b.n	8002b6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	3301      	adds	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d3b5      	bcc.n	8002ae0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	687e      	ldr	r6, [r7, #4]
 8002b7c:	466d      	mov	r5, sp
 8002b7e:	f106 0410 	add.w	r4, r6, #16
 8002b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b92:	1d33      	adds	r3, r6, #4
 8002b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	f002 f8f2 	bl	8004d80 <USB_DevInit>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00d      	b.n	8002bca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 f93a 	bl	8005e3c <USB_DevDisconnect>

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_PCD_Start+0x1c>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e020      	b.n	8002c30 <HAL_PCD_Start+0x5e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d109      	bne.n	8002c12 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 f866 	bl	8004ce8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 f8ea 	bl	8005dfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b08d      	sub	sp, #52	; 0x34
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 f9a8 	bl	8005fa4 <USB_GetMode>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 839d 	bne.w	8003396 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 f90c 	bl	8005e7e <USB_ReadInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8393 	beq.w	8003394 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 f903 	bl	8005e7e <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d107      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f002 0202 	and.w	r2, r2, #2
 8002c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 f8f1 	bl	8005e7e <USB_ReadInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d161      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0210 	bic.w	r2, r2, #16
 8002cb4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f003 020f 	and.w	r2, r3, #15
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	0c5b      	lsrs	r3, r3, #17
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d124      	bne.n	8002d2c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d035      	beq.n	8002d5a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6a38      	ldr	r0, [r7, #32]
 8002d02:	f002 ff57 	bl	8005bb4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d12:	441a      	add	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d24:	441a      	add	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	619a      	str	r2, [r3, #24]
 8002d2a:	e016      	b.n	8002d5a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	0c5b      	lsrs	r3, r3, #17
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d110      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d3e:	2208      	movs	r2, #8
 8002d40:	4619      	mov	r1, r3
 8002d42:	6a38      	ldr	r0, [r7, #32]
 8002d44:	f002 ff36 	bl	8005bb4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d54:	441a      	add	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0210 	orr.w	r2, r2, #16
 8002d68:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 f885 	bl	8005e7e <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d7e:	d16e      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 f88b 	bl	8005ea4 <USB_ReadDevAllOutEpInterrupt>
 8002d8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d90:	e062      	b.n	8002e58 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d057      	beq.n	8002e4c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 f8b0 	bl	8005f0c <USB_ReadDevOutEPInterrupt>
 8002dac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fdb1 	bl	8003934 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	2308      	movs	r3, #8
 8002dec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 feab 	bl	8003b4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2310      	movs	r3, #16
 8002e10:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e4a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	3301      	adds	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d199      	bne.n	8002d92 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 f80b 	bl	8005e7e <USB_ReadInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e72:	f040 80c0 	bne.w	8002ff6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f003 f82c 	bl	8005ed8 <USB_ReadDevAllInEpInterrupt>
 8002e80:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e86:	e0b2      	b.n	8002fee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80a7 	beq.w	8002fe2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 f852 	bl	8005f48 <USB_ReadDevInEPInterrupt>
 8002ea4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d057      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69f9      	ldr	r1, [r7, #28]
 8002ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d132      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3348      	adds	r3, #72	; 0x48
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3344      	adds	r3, #68	; 0x44
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4419      	add	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4403      	add	r3, r0
 8002f22:	3348      	adds	r3, #72	; 0x48
 8002f24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d113      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x31c>
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3350      	adds	r3, #80	; 0x50
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d108      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2101      	movs	r1, #1
 8002f50:	f003 f85a 	bl	8006008 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f004 ff8b 	bl	8007e76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	2308      	movs	r3, #8
 8002f7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f92:	461a      	mov	r2, r3
 8002f94:	2310      	movs	r3, #16
 8002f96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2340      	movs	r3, #64	; 0x40
 8002fb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2302      	movs	r3, #2
 8002fce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fc1b 	bl	8003818 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f47f af49 	bne.w	8002e88 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 ff3f 	bl	8005e7e <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800300a:	d122      	bne.n	8003052 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003026:	2b01      	cmp	r3, #1
 8003028:	d108      	bne.n	800303c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003032:	2100      	movs	r1, #0
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fe27 	bl	8003c88 <HAL_PCDEx_LPM_Callback>
 800303a:	e002      	b.n	8003042 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f004 ff91 	bl	8007f64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f002 ff11 	bl	8005e7e <USB_ReadInterrupts>
 800305c:	4603      	mov	r3, r0
 800305e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003066:	d112      	bne.n	800308e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d102      	bne.n	800307e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f004 ff4d 	bl	8007f18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800308c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f002 fef3 	bl	8005e7e <USB_ReadInterrupts>
 8003098:	4603      	mov	r3, r0
 800309a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	f040 80c7 	bne.w	8003234 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2110      	movs	r1, #16
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 ffc1 	bl	8005048 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ca:	e056      	b.n	800317a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	461a      	mov	r2, r3
 80030da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f0:	0151      	lsls	r1, r2, #5
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	440a      	add	r2, r1
 80030f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003110:	0151      	lsls	r1, r2, #5
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	440a      	add	r2, r1
 8003116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800311a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800311e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312c:	461a      	mov	r2, r3
 800312e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003132:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003144:	0151      	lsls	r1, r2, #5
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	440a      	add	r2, r1
 800314a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800314e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	440a      	add	r2, r1
 800316a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800316e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003172:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	3301      	adds	r3, #1
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003180:	429a      	cmp	r2, r3
 8003182:	d3a3      	bcc.n	80030cc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003192:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003196:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b0:	f043 030b 	orr.w	r3, r3, #11
 80031b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c6:	f043 030b 	orr.w	r3, r3, #11
 80031ca:	6453      	str	r3, [r2, #68]	; 0x44
 80031cc:	e015      	b.n	80031fa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f4:	f043 030b 	orr.w	r3, r3, #11
 80031f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003208:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800320c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800321e:	461a      	mov	r2, r3
 8003220:	f002 fef2 	bl	8006008 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f002 fe20 	bl	8005e7e <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d124      	bne.n	8003294 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 feb6 	bl	8005fc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f001 ff56 	bl	800510a <USB_GetDevSpeed>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681c      	ldr	r4, [r3, #0]
 800326a:	f001 f945 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 800326e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	4620      	mov	r0, r4
 800327a:	f001 fc93 	bl	8004ba4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f004 fe21 	bl	8007ec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003292:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f002 fdf0 	bl	8005e7e <USB_ReadInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d10a      	bne.n	80032be <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f004 fdfe 	bl	8007eaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f002 0208 	and.w	r2, r2, #8
 80032bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fddb 	bl	8005e7e <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d2:	d10f      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f004 fe60 	bl	8007fa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fdc0 	bl	8005e7e <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003308:	d10f      	bne.n	800332a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f004 fe33 	bl	8007f80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f002 fda5 	bl	8005e7e <USB_ReadInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d10a      	bne.n	8003356 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f004 fe41 	bl	8007fc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f002 fd8f 	bl	8005e7e <USB_ReadInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d115      	bne.n	8003396 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f004 fe31 	bl	8007fe4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	e000      	b.n	8003396 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003394:	bf00      	nop
    }
  }
}
 8003396:	3734      	adds	r7, #52	; 0x34
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}

0800339c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_PCD_SetAddress+0x1a>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e013      	b.n	80033de <HAL_PCD_SetAddress+0x42>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 fced 	bl	8005dae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	4608      	mov	r0, r1
 80033f0:	4611      	mov	r1, r2
 80033f2:	461a      	mov	r2, r3
 80033f4:	4603      	mov	r3, r0
 80033f6:	70fb      	strb	r3, [r7, #3]
 80033f8:	460b      	mov	r3, r1
 80033fa:	803b      	strh	r3, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003408:	2b00      	cmp	r3, #0
 800340a:	da0f      	bge.n	800342c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	3338      	adds	r3, #56	; 0x38
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	3304      	adds	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	705a      	strb	r2, [r3, #1]
 800342a:	e00f      	b.n	800344c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	3304      	adds	r3, #4
 8003444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003458:	883a      	ldrh	r2, [r7, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	78ba      	ldrb	r2, [r7, #2]
 8003462:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003476:	78bb      	ldrb	r3, [r7, #2]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d102      	bne.n	8003482 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_PCD_EP_Open+0xaa>
 800348c:	2302      	movs	r3, #2
 800348e:	e00e      	b.n	80034ae <HAL_PCD_EP_Open+0xc8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68f9      	ldr	r1, [r7, #12]
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 fe58 	bl	8005154 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80034ac:	7afb      	ldrb	r3, [r7, #11]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da0f      	bge.n	80034ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f003 020f 	and.w	r2, r3, #15
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	3338      	adds	r3, #56	; 0x38
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	3304      	adds	r3, #4
 80034e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	705a      	strb	r2, [r3, #1]
 80034e8:	e00f      	b.n	800350a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	3304      	adds	r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_PCD_EP_Close+0x6e>
 8003520:	2302      	movs	r3, #2
 8003522:	e00e      	b.n	8003542 <HAL_PCD_EP_Close+0x8c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68f9      	ldr	r1, [r7, #12]
 8003532:	4618      	mov	r0, r3
 8003534:	f001 fe96 	bl	8005264 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	460b      	mov	r3, r1
 8003558:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358c:	7afb      	ldrb	r3, [r7, #11]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	b2da      	uxtb	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	6979      	ldr	r1, [r7, #20]
 80035be:	f002 f971 	bl	80058a4 <USB_EP0StartXfer>
 80035c2:	e008      	b.n	80035d6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	6979      	ldr	r1, [r7, #20]
 80035d2:	f001 ff23 	bl	800541c <USB_EPStartXfer>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	460b      	mov	r3, r1
 800361e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003620:	7afb      	ldrb	r3, [r7, #11]
 8003622:	f003 020f 	and.w	r2, r3, #15
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	3338      	adds	r3, #56	; 0x38
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2201      	movs	r2, #1
 800364e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003650:	7afb      	ldrb	r3, [r7, #11]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	b2da      	uxtb	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d102      	bne.n	800366a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	6979      	ldr	r1, [r7, #20]
 8003682:	f002 f90f 	bl	80058a4 <USB_EP0StartXfer>
 8003686:	e008      	b.n	800369a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	6979      	ldr	r1, [r7, #20]
 8003696:	f001 fec1 	bl	800541c <USB_EPStartXfer>
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d901      	bls.n	80036c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e050      	b.n	8003764 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	da0f      	bge.n	80036ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	f003 020f 	and.w	r2, r3, #15
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	3338      	adds	r3, #56	; 0x38
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	3304      	adds	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	705a      	strb	r2, [r3, #1]
 80036e8:	e00d      	b.n	8003706 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	b2da      	uxtb	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_PCD_EP_SetStall+0x82>
 8003722:	2302      	movs	r3, #2
 8003724:	e01e      	b.n	8003764 <HAL_PCD_EP_SetStall+0xc0>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68f9      	ldr	r1, [r7, #12]
 8003734:	4618      	mov	r0, r3
 8003736:	f002 fa66 	bl	8005c06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	b2d9      	uxtb	r1, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003754:	461a      	mov	r2, r3
 8003756:	f002 fc57 	bl	8006008 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	f003 020f 	and.w	r2, r3, #15
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d901      	bls.n	800378a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e042      	b.n	8003810 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800378a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800378e:	2b00      	cmp	r3, #0
 8003790:	da0f      	bge.n	80037b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	3338      	adds	r3, #56	; 0x38
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	3304      	adds	r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	705a      	strb	r2, [r3, #1]
 80037b0:	e00f      	b.n	80037d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_PCD_EP_ClrStall+0x86>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e00e      	b.n	8003810 <HAL_PCD_EP_ClrStall+0xa4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	4618      	mov	r0, r3
 8003802:	f002 fa6e 	bl	8005ce2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	3338      	adds	r3, #56	; 0x38
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	429a      	cmp	r2, r3
 800384a:	d901      	bls.n	8003850 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e06c      	b.n	800392a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	429a      	cmp	r2, r3
 8003864:	d902      	bls.n	800386c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3303      	adds	r3, #3
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003874:	e02b      	b.n	80038ce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	429a      	cmp	r2, r3
 800388a:	d902      	bls.n	8003892 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3303      	adds	r3, #3
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68d9      	ldr	r1, [r3, #12]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	4603      	mov	r3, r0
 80038b0:	6978      	ldr	r0, [r7, #20]
 80038b2:	f002 f94a 	bl	8005b4a <USB_WritePacket>

    ep->xfer_buff  += len;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	441a      	add	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	441a      	add	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d809      	bhi.n	80038f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d203      	bcs.n	80038f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1be      	bne.n	8003876 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	429a      	cmp	r2, r3
 8003902:	d811      	bhi.n	8003928 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	2201      	movs	r2, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	43db      	mvns	r3, r3
 800391e:	6939      	ldr	r1, [r7, #16]
 8003920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003924:	4013      	ands	r3, r2
 8003926:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	333c      	adds	r3, #60	; 0x3c
 800394c:	3304      	adds	r3, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 80a0 	bne.w	8003aac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a72      	ldr	r2, [pc, #456]	; (8003b44 <PCD_EP_OutXfrComplete_int+0x210>)
 800397a:	4293      	cmp	r3, r2
 800397c:	f240 80dd 	bls.w	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80d7 	beq.w	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003998:	461a      	mov	r2, r3
 800399a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399e:	6093      	str	r3, [r2, #8]
 80039a0:	e0cb      	b.n	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	461a      	mov	r2, r3
 80039ba:	2320      	movs	r3, #32
 80039bc:	6093      	str	r3, [r2, #8]
 80039be:	e0bc      	b.n	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 80b7 	bne.w	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a5d      	ldr	r2, [pc, #372]	; (8003b44 <PCD_EP_OutXfrComplete_int+0x210>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d90f      	bls.n	80039f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ea:	461a      	mov	r2, r3
 80039ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f0:	6093      	str	r3, [r2, #8]
 80039f2:	e0a2      	b.n	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a06:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	0159      	lsls	r1, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	440b      	add	r3, r1
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a1a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4403      	add	r3, r0
 8003a2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a2e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4403      	add	r3, r0
 8003a52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4419      	add	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4403      	add	r3, r0
 8003a68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a6c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d114      	bne.n	8003a9e <PCD_EP_OutXfrComplete_int+0x16a>
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d108      	bne.n	8003a9e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a96:	461a      	mov	r2, r3
 8003a98:	2101      	movs	r1, #1
 8003a9a:	f002 fab5 	bl	8006008 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f004 f9cb 	bl	8007e40 <HAL_PCD_DataOutStageCallback>
 8003aaa:	e046      	b.n	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <PCD_EP_OutXfrComplete_int+0x214>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d124      	bne.n	8003afe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad0:	6093      	str	r3, [r2, #8]
 8003ad2:	e032      	b.n	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	461a      	mov	r2, r3
 8003aec:	2320      	movs	r3, #32
 8003aee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f004 f9a2 	bl	8007e40 <HAL_PCD_DataOutStageCallback>
 8003afc:	e01d      	b.n	8003b3a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d114      	bne.n	8003b2e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b26:	461a      	mov	r2, r3
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f002 fa6d 	bl	8006008 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f004 f983 	bl	8007e40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	4f54300a 	.word	0x4f54300a
 8003b48:	4f54310a 	.word	0x4f54310a

08003b4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	333c      	adds	r3, #60	; 0x3c
 8003b64:	3304      	adds	r3, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d90e      	bls.n	8003ba0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f004 f93b 	bl	8007e1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d90c      	bls.n	8003bc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d108      	bne.n	8003bc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	f002 fa20 	bl	8006008 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	4f54300a 	.word	0x4f54300a

08003bd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
 8003be4:	4613      	mov	r3, r2
 8003be6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d107      	bne.n	8003c06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bf6:	883b      	ldrh	r3, [r7, #0]
 8003bf8:	0419      	lsls	r1, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
 8003c04:	e028      	b.n	8003c58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4413      	add	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	e00d      	b.n	8003c36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	3340      	adds	r3, #64	; 0x40
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	3301      	adds	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3ec      	bcc.n	8003c1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c40:	883b      	ldrh	r3, [r7, #0]
 8003c42:	0418      	lsls	r0, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	4302      	orrs	r2, r0
 8003c50:	3340      	adds	r3, #64	; 0x40
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e25b      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d075      	beq.n	8003daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cbe:	4ba3      	ldr	r3, [pc, #652]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d00c      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cca:	4ba0      	ldr	r3, [pc, #640]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d112      	bne.n	8003cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd6:	4b9d      	ldr	r3, [pc, #628]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce2:	d10b      	bne.n	8003cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	4b99      	ldr	r3, [pc, #612]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05b      	beq.n	8003da8 <HAL_RCC_OscConfig+0x108>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d157      	bne.n	8003da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e236      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d106      	bne.n	8003d14 <HAL_RCC_OscConfig+0x74>
 8003d06:	4b91      	ldr	r3, [pc, #580]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a90      	ldr	r2, [pc, #576]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e01d      	b.n	8003d50 <HAL_RCC_OscConfig+0xb0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x98>
 8003d1e:	4b8b      	ldr	r3, [pc, #556]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a8a      	ldr	r2, [pc, #552]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a87      	ldr	r2, [pc, #540]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0xb0>
 8003d38:	4b84      	ldr	r3, [pc, #528]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a83      	ldr	r2, [pc, #524]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4b81      	ldr	r3, [pc, #516]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a80      	ldr	r2, [pc, #512]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd fd48 	bl	80017ec <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d60:	f7fd fd44 	bl	80017ec <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e1fb      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0xc0>
 8003d7e:	e014      	b.n	8003daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fd fd34 	bl	80017ec <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fd fd30 	bl	80017ec <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e1e7      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0xe8>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d063      	beq.n	8003e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003db6:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc2:	4b62      	ldr	r3, [pc, #392]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dce:	4b5f      	ldr	r3, [pc, #380]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	4b5c      	ldr	r3, [pc, #368]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_RCC_OscConfig+0x152>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d001      	beq.n	8003df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e1bb      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df2:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4952      	ldr	r1, [pc, #328]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e06:	e03a      	b.n	8003e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d020      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e10:	4b4f      	ldr	r3, [pc, #316]	; (8003f50 <HAL_RCC_OscConfig+0x2b0>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fd fce9 	bl	80017ec <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1e:	f7fd fce5 	bl	80017ec <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e19c      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3c:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4940      	ldr	r1, [pc, #256]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]
 8003e50:	e015      	b.n	8003e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e52:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <HAL_RCC_OscConfig+0x2b0>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fcc8 	bl	80017ec <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e60:	f7fd fcc4 	bl	80017ec <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e17b      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d030      	beq.n	8003eec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e92:	4b30      	ldr	r3, [pc, #192]	; (8003f54 <HAL_RCC_OscConfig+0x2b4>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fd fca8 	bl	80017ec <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea0:	f7fd fca4 	bl	80017ec <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e15b      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x200>
 8003ebe:	e015      	b.n	8003eec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec0:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <HAL_RCC_OscConfig+0x2b4>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fc91 	bl	80017ec <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ece:	f7fd fc8d 	bl	80017ec <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e144      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f0      	bne.n	8003ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a0 	beq.w	800403a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f26:	2301      	movs	r3, #1
 8003f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x2b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d121      	bne.n	8003f7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <HAL_RCC_OscConfig+0x2b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a07      	ldr	r2, [pc, #28]	; (8003f58 <HAL_RCC_OscConfig+0x2b8>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f42:	f7fd fc53 	bl	80017ec <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	e011      	b.n	8003f6e <HAL_RCC_OscConfig+0x2ce>
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	42470000 	.word	0x42470000
 8003f54:	42470e80 	.word	0x42470e80
 8003f58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5c:	f7fd fc46 	bl	80017ec <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0fd      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6e:	4b81      	ldr	r3, [pc, #516]	; (8004174 <HAL_RCC_OscConfig+0x4d4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x2f0>
 8003f82:	4b7d      	ldr	r3, [pc, #500]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a7c      	ldr	r2, [pc, #496]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	e01c      	b.n	8003fca <HAL_RCC_OscConfig+0x32a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b05      	cmp	r3, #5
 8003f96:	d10c      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x312>
 8003f98:	4b77      	ldr	r3, [pc, #476]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4a76      	ldr	r2, [pc, #472]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003f9e:	f043 0304 	orr.w	r3, r3, #4
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa4:	4b74      	ldr	r3, [pc, #464]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a73      	ldr	r2, [pc, #460]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb0:	e00b      	b.n	8003fca <HAL_RCC_OscConfig+0x32a>
 8003fb2:	4b71      	ldr	r3, [pc, #452]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a70      	ldr	r2, [pc, #448]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	4b6e      	ldr	r3, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	4a6d      	ldr	r2, [pc, #436]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d015      	beq.n	8003ffe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd fc0b 	bl	80017ec <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fd fc07 	bl	80017ec <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0bc      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff0:	4b61      	ldr	r3, [pc, #388]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ee      	beq.n	8003fda <HAL_RCC_OscConfig+0x33a>
 8003ffc:	e014      	b.n	8004028 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffe:	f7fd fbf5 	bl	80017ec <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004004:	e00a      	b.n	800401c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fd fbf1 	bl	80017ec <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	; 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e0a6      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401c:	4b56      	ldr	r3, [pc, #344]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ee      	bne.n	8004006 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d105      	bne.n	800403a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402e:	4b52      	ldr	r3, [pc, #328]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a51      	ldr	r2, [pc, #324]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8004034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8092 	beq.w	8004168 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004044:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 030c 	and.w	r3, r3, #12
 800404c:	2b08      	cmp	r3, #8
 800404e:	d05c      	beq.n	800410a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d141      	bne.n	80040dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b48      	ldr	r3, [pc, #288]	; (800417c <HAL_RCC_OscConfig+0x4dc>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405e:	f7fd fbc5 	bl	80017ec <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004066:	f7fd fbc1 	bl	80017ec <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e078      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004078:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f0      	bne.n	8004066 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	019b      	lsls	r3, r3, #6
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	3b01      	subs	r3, #1
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	4933      	ldr	r1, [pc, #204]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ae:	4b33      	ldr	r3, [pc, #204]	; (800417c <HAL_RCC_OscConfig+0x4dc>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd fb9a 	bl	80017ec <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fd fb96 	bl	80017ec <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e04d      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x41c>
 80040da:	e045      	b.n	8004168 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040dc:	4b27      	ldr	r3, [pc, #156]	; (800417c <HAL_RCC_OscConfig+0x4dc>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fd fb83 	bl	80017ec <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fd fb7f 	bl	80017ec <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e036      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fc:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x44a>
 8004108:	e02e      	b.n	8004168 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e029      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004116:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_RCC_OscConfig+0x4d8>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	429a      	cmp	r2, r3
 8004128:	d11c      	bne.n	8004164 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d115      	bne.n	8004164 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800413e:	4013      	ands	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004144:	4293      	cmp	r3, r2
 8004146:	d10d      	bne.n	8004164 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40007000 	.word	0x40007000
 8004178:	40023800 	.word	0x40023800
 800417c:	42470060 	.word	0x42470060

08004180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0cc      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004194:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d90c      	bls.n	80041bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b65      	ldr	r3, [pc, #404]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b63      	ldr	r3, [pc, #396]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0b8      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d4:	4b59      	ldr	r3, [pc, #356]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a58      	ldr	r2, [pc, #352]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ec:	4b53      	ldr	r3, [pc, #332]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a52      	ldr	r2, [pc, #328]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b50      	ldr	r3, [pc, #320]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	494d      	ldr	r1, [pc, #308]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d044      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b47      	ldr	r3, [pc, #284]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d119      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e07f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d003      	beq.n	800423e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423a:	2b03      	cmp	r3, #3
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423e:	4b3f      	ldr	r3, [pc, #252]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e06f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424e:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e067      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4934      	ldr	r1, [pc, #208]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004270:	f7fd fabc 	bl	80017ec <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fd fab8 	bl	80017ec <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e04f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	4b2b      	ldr	r3, [pc, #172]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 020c 	and.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	429a      	cmp	r2, r3
 800429e:	d1eb      	bne.n	8004278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d20c      	bcs.n	80042c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e032      	b.n	800432e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4916      	ldr	r1, [pc, #88]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	490e      	ldr	r1, [pc, #56]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004306:	f000 f821 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800430a:	4601      	mov	r1, r0
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	5cd3      	ldrb	r3, [r2, r3]
 800431a:	fa21 f303 	lsr.w	r3, r1, r3
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd fa1c 	bl	8001764 <HAL_InitTick>

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023c00 	.word	0x40023c00
 800433c:	40023800 	.word	0x40023800
 8004340:	0800a4cc 	.word	0x0800a4cc
 8004344:	20000000 	.word	0x20000000
 8004348:	20000004 	.word	0x20000004

0800434c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	2300      	movs	r3, #0
 800435c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004362:	4b63      	ldr	r3, [pc, #396]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b04      	cmp	r3, #4
 800436c:	d007      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x32>
 800436e:	2b08      	cmp	r3, #8
 8004370:	d008      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x38>
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 80b4 	bne.w	80044e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b5e      	ldr	r3, [pc, #376]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800437a:	60bb      	str	r3, [r7, #8]
       break;
 800437c:	e0b3      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800437e:	4b5d      	ldr	r3, [pc, #372]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004380:	60bb      	str	r3, [r7, #8]
      break;
 8004382:	e0b0      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004384:	4b5a      	ldr	r3, [pc, #360]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800438e:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04a      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439a:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	f04f 0400 	mov.w	r4, #0
 80043a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	ea03 0501 	and.w	r5, r3, r1
 80043b0:	ea04 0602 	and.w	r6, r4, r2
 80043b4:	4629      	mov	r1, r5
 80043b6:	4632      	mov	r2, r6
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f04f 0400 	mov.w	r4, #0
 80043c0:	0154      	lsls	r4, r2, #5
 80043c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043c6:	014b      	lsls	r3, r1, #5
 80043c8:	4619      	mov	r1, r3
 80043ca:	4622      	mov	r2, r4
 80043cc:	1b49      	subs	r1, r1, r5
 80043ce:	eb62 0206 	sbc.w	r2, r2, r6
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	f04f 0400 	mov.w	r4, #0
 80043da:	0194      	lsls	r4, r2, #6
 80043dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043e0:	018b      	lsls	r3, r1, #6
 80043e2:	1a5b      	subs	r3, r3, r1
 80043e4:	eb64 0402 	sbc.w	r4, r4, r2
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	00e2      	lsls	r2, r4, #3
 80043f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043f6:	00d9      	lsls	r1, r3, #3
 80043f8:	460b      	mov	r3, r1
 80043fa:	4614      	mov	r4, r2
 80043fc:	195b      	adds	r3, r3, r5
 80043fe:	eb44 0406 	adc.w	r4, r4, r6
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	02a2      	lsls	r2, r4, #10
 800440c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004410:	0299      	lsls	r1, r3, #10
 8004412:	460b      	mov	r3, r1
 8004414:	4614      	mov	r4, r2
 8004416:	4618      	mov	r0, r3
 8004418:	4621      	mov	r1, r4
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f04f 0400 	mov.w	r4, #0
 8004420:	461a      	mov	r2, r3
 8004422:	4623      	mov	r3, r4
 8004424:	f7fc fbc0 	bl	8000ba8 <__aeabi_uldivmod>
 8004428:	4603      	mov	r3, r0
 800442a:	460c      	mov	r4, r1
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	e049      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004430:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	f04f 0400 	mov.w	r4, #0
 800443a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	ea03 0501 	and.w	r5, r3, r1
 8004446:	ea04 0602 	and.w	r6, r4, r2
 800444a:	4629      	mov	r1, r5
 800444c:	4632      	mov	r2, r6
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	f04f 0400 	mov.w	r4, #0
 8004456:	0154      	lsls	r4, r2, #5
 8004458:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800445c:	014b      	lsls	r3, r1, #5
 800445e:	4619      	mov	r1, r3
 8004460:	4622      	mov	r2, r4
 8004462:	1b49      	subs	r1, r1, r5
 8004464:	eb62 0206 	sbc.w	r2, r2, r6
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	f04f 0400 	mov.w	r4, #0
 8004470:	0194      	lsls	r4, r2, #6
 8004472:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004476:	018b      	lsls	r3, r1, #6
 8004478:	1a5b      	subs	r3, r3, r1
 800447a:	eb64 0402 	sbc.w	r4, r4, r2
 800447e:	f04f 0100 	mov.w	r1, #0
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	00e2      	lsls	r2, r4, #3
 8004488:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800448c:	00d9      	lsls	r1, r3, #3
 800448e:	460b      	mov	r3, r1
 8004490:	4614      	mov	r4, r2
 8004492:	195b      	adds	r3, r3, r5
 8004494:	eb44 0406 	adc.w	r4, r4, r6
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	02a2      	lsls	r2, r4, #10
 80044a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044a6:	0299      	lsls	r1, r3, #10
 80044a8:	460b      	mov	r3, r1
 80044aa:	4614      	mov	r4, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	4621      	mov	r1, r4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f04f 0400 	mov.w	r4, #0
 80044b6:	461a      	mov	r2, r3
 80044b8:	4623      	mov	r3, r4
 80044ba:	f7fc fb75 	bl	8000ba8 <__aeabi_uldivmod>
 80044be:	4603      	mov	r3, r0
 80044c0:	460c      	mov	r4, r1
 80044c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	3301      	adds	r3, #1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	60bb      	str	r3, [r7, #8]
      break;
 80044de:	e002      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044e2:	60bb      	str	r3, [r7, #8]
      break;
 80044e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e6:	68bb      	ldr	r3, [r7, #8]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	00f42400 	.word	0x00f42400

080044f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCC_GetHCLKFreq+0x14>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000000 	.word	0x20000000

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff0 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004518:	4601      	mov	r1, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	0a9b      	lsrs	r3, r3, #10
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4a03      	ldr	r2, [pc, #12]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	fa21 f303 	lsr.w	r3, r1, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40023800 	.word	0x40023800
 8004534:	0800a4dc 	.word	0x0800a4dc

08004538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e01d      	b.n	8004586 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc ffec 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3304      	adds	r3, #4
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f000 f982 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b06      	cmp	r3, #6
 80045ae:	d007      	beq.n	80045c0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d007      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d122      	bne.n	800467a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d11b      	bne.n	800467a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f06f 0202 	mvn.w	r2, #2
 800464a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f8ee 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 8004666:	e005      	b.n	8004674 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f8e0 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8f1 	bl	8004856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b04      	cmp	r3, #4
 8004686:	d122      	bne.n	80046ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	d11b      	bne.n	80046ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f06f 0204 	mvn.w	r2, #4
 800469e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8c4 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 80046ba:	e005      	b.n	80046c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f8b6 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f8c7 	bl	8004856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d122      	bne.n	8004722 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d11b      	bne.n	8004722 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f06f 0208 	mvn.w	r2, #8
 80046f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2204      	movs	r2, #4
 80046f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f89a 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 800470e:	e005      	b.n	800471c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f88c 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f89d 	bl	8004856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b10      	cmp	r3, #16
 800472e:	d122      	bne.n	8004776 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2b10      	cmp	r3, #16
 800473c:	d11b      	bne.n	8004776 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f06f 0210 	mvn.w	r2, #16
 8004746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2208      	movs	r2, #8
 800474c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f870 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 8004762:	e005      	b.n	8004770 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f862 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f873 	bl	8004856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d10e      	bne.n	80047a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	d107      	bne.n	80047a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f06f 0201 	mvn.w	r2, #1
 800479a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fc fe15 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b80      	cmp	r3, #128	; 0x80
 80047ae:	d10e      	bne.n	80047ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b80      	cmp	r3, #128	; 0x80
 80047bc:	d107      	bne.n	80047ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f97f 	bl	8004acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d10e      	bne.n	80047fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d107      	bne.n	80047fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f838 	bl	800486a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b20      	cmp	r3, #32
 8004806:	d10e      	bne.n	8004826 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b20      	cmp	r3, #32
 8004814:	d107      	bne.n	8004826 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f06f 0220 	mvn.w	r2, #32
 800481e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f949 	bl	8004ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a40      	ldr	r2, [pc, #256]	; (8004994 <TIM_Base_SetConfig+0x114>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3d      	ldr	r2, [pc, #244]	; (8004998 <TIM_Base_SetConfig+0x118>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3c      	ldr	r2, [pc, #240]	; (800499c <TIM_Base_SetConfig+0x11c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3b      	ldr	r2, [pc, #236]	; (80049a0 <TIM_Base_SetConfig+0x120>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3a      	ldr	r2, [pc, #232]	; (80049a4 <TIM_Base_SetConfig+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <TIM_Base_SetConfig+0x114>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d027      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <TIM_Base_SetConfig+0x118>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d023      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	; (800499c <TIM_Base_SetConfig+0x11c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <TIM_Base_SetConfig+0x120>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <TIM_Base_SetConfig+0x124>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <TIM_Base_SetConfig+0x128>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a27      	ldr	r2, [pc, #156]	; (80049ac <TIM_Base_SetConfig+0x12c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <TIM_Base_SetConfig+0x130>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <TIM_Base_SetConfig+0x134>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a24      	ldr	r2, [pc, #144]	; (80049b8 <TIM_Base_SetConfig+0x138>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a23      	ldr	r2, [pc, #140]	; (80049bc <TIM_Base_SetConfig+0x13c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <TIM_Base_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0xf8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a0c      	ldr	r2, [pc, #48]	; (80049a4 <TIM_Base_SetConfig+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40010400 	.word	0x40010400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400
 80049b0:	40014800 	.word	0x40014800
 80049b4:	40001800 	.word	0x40001800
 80049b8:	40001c00 	.word	0x40001c00
 80049bc:	40002000 	.word	0x40002000

080049c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e05a      	b.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a21      	ldr	r2, [pc, #132]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d022      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a24:	d01d      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1d      	ldr	r2, [pc, #116]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a18      	ldr	r2, [pc, #96]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10c      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40001800 	.word	0x40001800

08004ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	f107 001c 	add.w	r0, r7, #28
 8004aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d122      	bne.n	8004b3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 fac6 	bl	80060c4 <USB_CoreReset>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	73fb      	strb	r3, [r7, #15]
 8004b3c:	e01a      	b.n	8004b74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f001 faba 	bl	80060c4 <USB_CoreReset>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
 8004b66:	e005      	b.n	8004b74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10b      	bne.n	8004b92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f043 0206 	orr.w	r2, r3, #6
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f043 0220 	orr.w	r2, r3, #32
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b9e:	b004      	add	sp, #16
 8004ba0:	4770      	bx	lr
	...

08004ba4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d165      	bne.n	8004c84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4a41      	ldr	r2, [pc, #260]	; (8004cc0 <USB_SetTurnaroundTime+0x11c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d906      	bls.n	8004bce <USB_SetTurnaroundTime+0x2a>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <USB_SetTurnaroundTime+0x120>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d802      	bhi.n	8004bce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e062      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <USB_SetTurnaroundTime+0x120>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d906      	bls.n	8004be4 <USB_SetTurnaroundTime+0x40>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4a3b      	ldr	r2, [pc, #236]	; (8004cc8 <USB_SetTurnaroundTime+0x124>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d802      	bhi.n	8004be4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bde:	230e      	movs	r3, #14
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e057      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a38      	ldr	r2, [pc, #224]	; (8004cc8 <USB_SetTurnaroundTime+0x124>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d906      	bls.n	8004bfa <USB_SetTurnaroundTime+0x56>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4a37      	ldr	r2, [pc, #220]	; (8004ccc <USB_SetTurnaroundTime+0x128>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d802      	bhi.n	8004bfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004bf4:	230d      	movs	r3, #13
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e04c      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <USB_SetTurnaroundTime+0x128>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d906      	bls.n	8004c10 <USB_SetTurnaroundTime+0x6c>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4a32      	ldr	r2, [pc, #200]	; (8004cd0 <USB_SetTurnaroundTime+0x12c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d802      	bhi.n	8004c10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	e041      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4a2f      	ldr	r2, [pc, #188]	; (8004cd0 <USB_SetTurnaroundTime+0x12c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d906      	bls.n	8004c26 <USB_SetTurnaroundTime+0x82>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4a2e      	ldr	r2, [pc, #184]	; (8004cd4 <USB_SetTurnaroundTime+0x130>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d802      	bhi.n	8004c26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c20:	230b      	movs	r3, #11
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e036      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <USB_SetTurnaroundTime+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d906      	bls.n	8004c3c <USB_SetTurnaroundTime+0x98>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <USB_SetTurnaroundTime+0x134>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d802      	bhi.n	8004c3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c36:	230a      	movs	r3, #10
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e02b      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <USB_SetTurnaroundTime+0x134>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d906      	bls.n	8004c52 <USB_SetTurnaroundTime+0xae>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <USB_SetTurnaroundTime+0x138>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d802      	bhi.n	8004c52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c4c:	2309      	movs	r3, #9
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e020      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <USB_SetTurnaroundTime+0x138>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d906      	bls.n	8004c68 <USB_SetTurnaroundTime+0xc4>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <USB_SetTurnaroundTime+0x13c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d802      	bhi.n	8004c68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c62:	2308      	movs	r3, #8
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e015      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <USB_SetTurnaroundTime+0x13c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d906      	bls.n	8004c7e <USB_SetTurnaroundTime+0xda>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <USB_SetTurnaroundTime+0x140>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d802      	bhi.n	8004c7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c78:	2307      	movs	r3, #7
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e00a      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c7e:	2306      	movs	r3, #6
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e007      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c8a:	2309      	movs	r3, #9
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e001      	b.n	8004c94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c90:	2309      	movs	r3, #9
 8004c92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	029b      	lsls	r3, r3, #10
 8004ca8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	00d8acbf 	.word	0x00d8acbf
 8004cc4:	00e4e1bf 	.word	0x00e4e1bf
 8004cc8:	00f423ff 	.word	0x00f423ff
 8004ccc:	0106737f 	.word	0x0106737f
 8004cd0:	011a499f 	.word	0x011a499f
 8004cd4:	01312cff 	.word	0x01312cff
 8004cd8:	014ca43f 	.word	0x014ca43f
 8004cdc:	016e35ff 	.word	0x016e35ff
 8004ce0:	01a6ab1f 	.word	0x01a6ab1f
 8004ce4:	01e847ff 	.word	0x01e847ff

08004ce8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f043 0201 	orr.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d106      	bne.n	8004d58 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	e00b      	b.n	8004d70 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60da      	str	r2, [r3, #12]
 8004d6a:	e001      	b.n	8004d70 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e003      	b.n	8004d78 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d70:	2032      	movs	r0, #50	; 0x32
 8004d72:	f7fc fd47 	bl	8001804 <HAL_Delay>

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d80:	b084      	sub	sp, #16
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	e009      	b.n	8004db4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3340      	adds	r3, #64	; 0x40
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	3301      	adds	r3, #1
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b0e      	cmp	r3, #14
 8004db8:	d9f2      	bls.n	8004da0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11c      	bne.n	8004dfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dce:	f043 0302 	orr.w	r3, r3, #2
 8004dd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
 8004df8:	e00b      	b.n	8004e12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	4619      	mov	r1, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	680b      	ldr	r3, [r1, #0]
 8004e30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10c      	bne.n	8004e52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e3e:	2100      	movs	r1, #0
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f949 	bl	80050d8 <USB_SetDevSpeed>
 8004e46:	e008      	b.n	8004e5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f944 	bl	80050d8 <USB_SetDevSpeed>
 8004e50:	e003      	b.n	8004e5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e52:	2103      	movs	r1, #3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f93f 	bl	80050d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e5a:	2110      	movs	r1, #16
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f8f3 	bl	8005048 <USB_FlushTxFifo>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f911 	bl	8005094 <USB_FlushRxFifo>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e82:	461a      	mov	r2, r3
 8004e84:	2300      	movs	r3, #0
 8004e86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	e043      	b.n	8004f2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ebc:	d118      	bne.n	8004ef0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e013      	b.n	8004f02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e008      	b.n	8004f02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	461a      	mov	r2, r3
 8004efe:	2300      	movs	r3, #0
 8004f00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2300      	movs	r3, #0
 8004f12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	461a      	mov	r2, r3
 8004f22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d3b7      	bcc.n	8004ea6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e043      	b.n	8004fc4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f52:	d118      	bne.n	8004f86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f66:	461a      	mov	r2, r3
 8004f68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e013      	b.n	8004f98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e008      	b.n	8004f98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	461a      	mov	r2, r3
 8004f94:	2300      	movs	r3, #0
 8004f96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d3b7      	bcc.n	8004f3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f043 0210 	orr.w	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <USB_DevInit+0x2c4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800500c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f043 0208 	orr.w	r2, r3, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800501e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d107      	bne.n	8005034 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800502c:	f043 0304 	orr.w	r3, r3, #4
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005034:	7dfb      	ldrb	r3, [r7, #23]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005040:	b004      	add	sp, #16
 8005042:	4770      	bx	lr
 8005044:	803c3800 	.word	0x803c3800

08005048 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	019b      	lsls	r3, r3, #6
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <USB_FlushTxFifo+0x48>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e006      	b.n	8005082 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b20      	cmp	r3, #32
 800507e:	d0f0      	beq.n	8005062 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	00030d40 	.word	0x00030d40

08005094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2210      	movs	r2, #16
 80050a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3301      	adds	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <USB_FlushRxFifo+0x40>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e006      	b.n	80050c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d0f0      	beq.n	80050a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	00030d40 	.word	0x00030d40

080050d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0306 	and.w	r3, r3, #6
 8005122:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
 800512e:	e00a      	b.n	8005146 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d002      	beq.n	800513c <USB_GetDevSpeed+0x32>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b06      	cmp	r3, #6
 800513a:	d102      	bne.n	8005142 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800513c:	2302      	movs	r3, #2
 800513e:	75fb      	strb	r3, [r7, #23]
 8005140:	e001      	b.n	8005146 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005142:	230f      	movs	r3, #15
 8005144:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005146:	7dfb      	ldrb	r3, [r7, #23]
}
 8005148:	4618      	mov	r0, r3
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d13a      	bne.n	80051e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	2101      	movs	r1, #1
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	b29b      	uxth	r3, r3
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518e:	4313      	orrs	r3, r2
 8005190:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d155      	bne.n	8005254 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	78db      	ldrb	r3, [r3, #3]
 80051c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	059b      	lsls	r3, r3, #22
 80051ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051cc:	4313      	orrs	r3, r2
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e036      	b.n	8005254 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	2101      	movs	r1, #1
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005204:	4313      	orrs	r3, r2
 8005206:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11a      	bne.n	8005254 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	78db      	ldrb	r3, [r3, #3]
 8005238:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800523a:	430b      	orrs	r3, r1
 800523c:	4313      	orrs	r3, r2
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005252:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d161      	bne.n	8005344 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005296:	d11f      	bne.n	80052d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	43db      	mvns	r3, r3
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f8:	4013      	ands	r3, r2
 80052fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	2101      	movs	r1, #1
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	b29b      	uxth	r3, r3
 8005314:	43db      	mvns	r3, r3
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531c:	4013      	ands	r3, r2
 800531e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	0159      	lsls	r1, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	440b      	add	r3, r1
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	4619      	mov	r1, r3
 800533c:	4b35      	ldr	r3, [pc, #212]	; (8005414 <USB_DeactivateEndpoint+0x1b0>)
 800533e:	4013      	ands	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
 8005342:	e060      	b.n	8005406 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535a:	d11f      	bne.n	800539c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800537a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005396:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800539a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	2101      	movs	r1, #1
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	43db      	mvns	r3, r3
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053bc:	4013      	ands	r3, r2
 80053be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	2101      	movs	r1, #1
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	43db      	mvns	r3, r3
 80053da:	68f9      	ldr	r1, [r7, #12]
 80053dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e0:	4013      	ands	r3, r2
 80053e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0159      	lsls	r1, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	440b      	add	r3, r1
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	4619      	mov	r1, r3
 8005400:	4b05      	ldr	r3, [pc, #20]	; (8005418 <USB_DeactivateEndpoint+0x1b4>)
 8005402:	4013      	ands	r3, r2
 8005404:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	ec337800 	.word	0xec337800
 8005418:	eff37800 	.word	0xeff37800

0800541c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	f040 815c 	bne.w	80056f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d132      	bne.n	80054ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	0cdb      	lsrs	r3, r3, #19
 80054a6:	04db      	lsls	r3, r3, #19
 80054a8:	6113      	str	r3, [r2, #16]
 80054aa:	e074      	b.n	8005596 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c6:	0cdb      	lsrs	r3, r3, #19
 80054c8:	04db      	lsls	r3, r3, #19
 80054ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6959      	ldr	r1, [r3, #20]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	440b      	add	r3, r1
 8005508:	1e59      	subs	r1, r3, #1
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005512:	04d9      	lsls	r1, r3, #19
 8005514:	4b9d      	ldr	r3, [pc, #628]	; (800578c <USB_EPStartXfer+0x370>)
 8005516:	400b      	ands	r3, r1
 8005518:	69b9      	ldr	r1, [r7, #24]
 800551a:	0148      	lsls	r0, r1, #5
 800551c:	69f9      	ldr	r1, [r7, #28]
 800551e:	4401      	add	r1, r0
 8005520:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005524:	4313      	orrs	r3, r2
 8005526:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553e:	69b9      	ldr	r1, [r7, #24]
 8005540:	0148      	lsls	r0, r1, #5
 8005542:	69f9      	ldr	r1, [r7, #28]
 8005544:	4401      	add	r1, r0
 8005546:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800554a:	4313      	orrs	r3, r2
 800554c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	78db      	ldrb	r3, [r3, #3]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d11f      	bne.n	8005596 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005570:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005574:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005590:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005594:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d14b      	bne.n	8005634 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d009      	beq.n	80055b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	461a      	mov	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	78db      	ldrb	r3, [r3, #3]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d128      	bne.n	8005612 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d110      	bne.n	80055f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e00f      	b.n	8005612 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005610:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e12f      	b.n	8005894 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005652:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	78db      	ldrb	r3, [r3, #3]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d015      	beq.n	8005688 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8117 	beq.w	8005894 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	2101      	movs	r1, #1
 8005678:	fa01 f303 	lsl.w	r3, r1, r3
 800567c:	69f9      	ldr	r1, [r7, #28]
 800567e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005682:	4313      	orrs	r3, r2
 8005684:	634b      	str	r3, [r1, #52]	; 0x34
 8005686:	e105      	b.n	8005894 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d110      	bne.n	80056ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	e00f      	b.n	80056da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	0151      	lsls	r1, r2, #5
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	440a      	add	r2, r1
 80056d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	68d9      	ldr	r1, [r3, #12]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	b298      	uxth	r0, r3
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	4603      	mov	r3, r0
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fa2b 	bl	8005b4a <USB_WritePacket>
 80056f4:	e0ce      	b.n	8005894 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005710:	0cdb      	lsrs	r3, r3, #19
 8005712:	04db      	lsls	r3, r3, #19
 8005714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005730:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005734:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005738:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d126      	bne.n	8005790 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005758:	69b9      	ldr	r1, [r7, #24]
 800575a:	0148      	lsls	r0, r1, #5
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	4401      	add	r1, r0
 8005760:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005764:	4313      	orrs	r3, r2
 8005766:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005786:	6113      	str	r3, [r2, #16]
 8005788:	e036      	b.n	80057f8 <USB_EPStartXfer+0x3dc>
 800578a:	bf00      	nop
 800578c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4413      	add	r3, r2
 800579a:	1e5a      	subs	r2, r3, #1
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	8afb      	ldrh	r3, [r7, #22]
 80057b6:	04d9      	lsls	r1, r3, #19
 80057b8:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <USB_EPStartXfer+0x484>)
 80057ba:	400b      	ands	r3, r1
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	0148      	lsls	r0, r1, #5
 80057c0:	69f9      	ldr	r1, [r7, #28]
 80057c2:	4401      	add	r1, r0
 80057c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057c8:	4313      	orrs	r3, r2
 80057ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	8af9      	ldrh	r1, [r7, #22]
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	0148      	lsls	r0, r1, #5
 80057ec:	69f9      	ldr	r1, [r7, #28]
 80057ee:	4401      	add	r1, r0
 80057f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057f4:	4313      	orrs	r3, r2
 80057f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10d      	bne.n	800581a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68d9      	ldr	r1, [r3, #12]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	460a      	mov	r2, r1
 8005818:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	78db      	ldrb	r3, [r3, #3]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d128      	bne.n	8005874 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d110      	bne.n	8005854 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e00f      	b.n	8005874 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005872:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005892:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	1ff80000 	.word	0x1ff80000

080058a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	4613      	mov	r3, r2
 80058b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f040 80cd 	bne.w	8005a60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d132      	bne.n	8005934 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	0cdb      	lsrs	r3, r3, #19
 800592e:	04db      	lsls	r3, r3, #19
 8005930:	6113      	str	r3, [r2, #16]
 8005932:	e04e      	b.n	80059d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594e:	0cdb      	lsrs	r3, r3, #19
 8005950:	04db      	lsls	r3, r3, #19
 8005952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005972:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005976:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c2:	6939      	ldr	r1, [r7, #16]
 80059c4:	0148      	lsls	r0, r1, #5
 80059c6:	6979      	ldr	r1, [r7, #20]
 80059c8:	4401      	add	r1, r0
 80059ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059ce:	4313      	orrs	r3, r2
 80059d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d11e      	bne.n	8005a16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	461a      	mov	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	e092      	b.n	8005b3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d07e      	beq.n	8005b3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	2101      	movs	r1, #1
 8005a50:	fa01 f303 	lsl.w	r3, r1, r3
 8005a54:	6979      	ldr	r1, [r7, #20]
 8005a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	634b      	str	r3, [r1, #52]	; 0x34
 8005a5e:	e06d      	b.n	8005b3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	0cdb      	lsrs	r3, r3, #19
 8005a7c:	04db      	lsls	r3, r3, #19
 8005a7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aa2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aea:	6939      	ldr	r1, [r7, #16]
 8005aec:	0148      	lsls	r0, r1, #5
 8005aee:	6979      	ldr	r1, [r7, #20]
 8005af0:	4401      	add	r1, r0
 8005af2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005af6:	4313      	orrs	r3, r2
 8005af8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10d      	bne.n	8005b1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d009      	beq.n	8005b1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	68d9      	ldr	r1, [r3, #12]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b18:	460a      	mov	r2, r1
 8005b1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b089      	sub	sp, #36	; 0x24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	4611      	mov	r1, r2
 8005b56:	461a      	mov	r2, r3
 8005b58:	460b      	mov	r3, r1
 8005b5a:	71fb      	strb	r3, [r7, #7]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005b68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d11a      	bne.n	8005ba6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b70:	88bb      	ldrh	r3, [r7, #4]
 8005b72:	3303      	adds	r3, #3
 8005b74:	089b      	lsrs	r3, r3, #2
 8005b76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e00f      	b.n	8005b9e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	031a      	lsls	r2, r3, #12
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	3304      	adds	r3, #4
 8005b96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3eb      	bcc.n	8005b7e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3724      	adds	r7, #36	; 0x24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b089      	sub	sp, #36	; 0x24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	3303      	adds	r3, #3
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	e00b      	b.n	8005bf0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	3304      	adds	r3, #4
 8005be8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	3301      	adds	r3, #1
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d3ef      	bcc.n	8005bd8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3724      	adds	r7, #36	; 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d12c      	bne.n	8005c7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	db12      	blt.n	8005c5a <USB_EPSetStall+0x54>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00f      	beq.n	8005c5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e02b      	b.n	8005cd4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db12      	blt.n	8005cb4 <USB_EPSetStall+0xae>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00f      	beq.n	8005cb4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cb2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d128      	bne.n	8005d50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	78db      	ldrb	r3, [r3, #3]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d003      	beq.n	8005d2e <USB_EPClearStall+0x4c>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	78db      	ldrb	r3, [r3, #3]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d138      	bne.n	8005da0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e027      	b.n	8005da0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	78db      	ldrb	r3, [r3, #3]
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d003      	beq.n	8005d80 <USB_EPClearStall+0x9e>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	78db      	ldrb	r3, [r3, #3]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d10f      	bne.n	8005da0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dd0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de8:	4313      	orrs	r3, r2
 8005dea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e14:	f023 0303 	bic.w	r3, r3, #3
 8005e18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e28:	f023 0302 	bic.w	r3, r3, #2
 8005e2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6a:	f043 0302 	orr.w	r3, r3, #2
 8005e6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4013      	ands	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e96:	68fb      	ldr	r3, [r7, #12]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	0c1b      	lsrs	r3, r3, #16
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	b29b      	uxth	r3, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
 8005f78:	01db      	lsls	r3, r3, #7
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4013      	ands	r3, r2
 8005f94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f96:	68bb      	ldr	r3, [r7, #8]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fde:	f023 0307 	bic.w	r3, r3, #7
 8005fe2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	333c      	adds	r3, #60	; 0x3c
 800601e:	3304      	adds	r3, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <USB_EP0_OutStart+0xb8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d90a      	bls.n	8006042 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800603c:	d101      	bne.n	8006042 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	e037      	b.n	80060b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	461a      	mov	r2, r3
 800604a:	2300      	movs	r3, #0
 800604c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f043 0318 	orr.w	r3, r3, #24
 8006074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006084:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006088:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800608a:	7afb      	ldrb	r3, [r7, #11]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d10f      	bne.n	80060b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80060ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	4f54300a 	.word	0x4f54300a

080060c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a13      	ldr	r2, [pc, #76]	; (8006128 <USB_CoreReset+0x64>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e01b      	b.n	800611a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	daf2      	bge.n	80060d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f043 0201 	orr.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <USB_CoreReset+0x64>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d901      	bls.n	800610c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e006      	b.n	800611a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b01      	cmp	r3, #1
 8006116:	d0f0      	beq.n	80060fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	00030d40 	.word	0x00030d40

0800612c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006138:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800613c:	f002 f940 	bl	80083c0 <malloc>
 8006140:	4603      	mov	r3, r0
 8006142:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006152:	2302      	movs	r3, #2
 8006154:	e066      	b.n	8006224 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7c1b      	ldrb	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d119      	bne.n	800619a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616a:	2202      	movs	r2, #2
 800616c:	2181      	movs	r1, #129	; 0x81
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 ffad 	bl	80080ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800617a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617e:	2202      	movs	r2, #2
 8006180:	2101      	movs	r1, #1
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 ffa3 	bl	80080ce <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2210      	movs	r2, #16
 8006194:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006198:	e016      	b.n	80061c8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800619a:	2340      	movs	r3, #64	; 0x40
 800619c:	2202      	movs	r2, #2
 800619e:	2181      	movs	r1, #129	; 0x81
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 ff94 	bl	80080ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061ac:	2340      	movs	r3, #64	; 0x40
 80061ae:	2202      	movs	r2, #2
 80061b0:	2101      	movs	r1, #1
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 ff8b 	bl	80080ce <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2210      	movs	r2, #16
 80061c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061c8:	2308      	movs	r3, #8
 80061ca:	2203      	movs	r2, #3
 80061cc:	2182      	movs	r1, #130	; 0x82
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 ff7d 	bl	80080ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	7c1b      	ldrb	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006208:	2101      	movs	r1, #1
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f002 f84e 	bl	80082ac <USBD_LL_PrepareReceive>
 8006210:	e007      	b.n	8006222 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006218:	2340      	movs	r3, #64	; 0x40
 800621a:	2101      	movs	r1, #1
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f002 f845 	bl	80082ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800623c:	2181      	movs	r1, #129	; 0x81
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 ff6b 	bl	800811a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800624a:	2101      	movs	r1, #1
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 ff64 	bl	800811a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800625a:	2182      	movs	r1, #130	; 0x82
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 ff5c 	bl	800811a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00e      	beq.n	800629a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628c:	4618      	mov	r0, r3
 800628e:	f002 f89f 	bl	80083d0 <free>
    pdev->pClassData = NULL;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d03a      	beq.n	8006344 <USBD_CDC_Setup+0xa0>
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	f040 8097 	bne.w	8006402 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	88db      	ldrh	r3, [r3, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d029      	beq.n	8006330 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da11      	bge.n	800630a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80062f2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	88d2      	ldrh	r2, [r2, #6]
 80062f8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80062fa:	6939      	ldr	r1, [r7, #16]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	88db      	ldrh	r3, [r3, #6]
 8006300:	461a      	mov	r2, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fa9d 	bl	8007842 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006308:	e082      	b.n	8006410 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	785a      	ldrb	r2, [r3, #1]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	88db      	ldrh	r3, [r3, #6]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006320:	6939      	ldr	r1, [r7, #16]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	88db      	ldrh	r3, [r3, #6]
 8006326:	461a      	mov	r2, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fab6 	bl	800789a <USBD_CtlPrepareRx>
    break;
 800632e:	e06f      	b.n	8006410 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	7850      	ldrb	r0, [r2, #1]
 800633c:	2200      	movs	r2, #0
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	4798      	blx	r3
    break;
 8006342:	e065      	b.n	8006410 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b0b      	cmp	r3, #11
 800634a:	d84f      	bhi.n	80063ec <USBD_CDC_Setup+0x148>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <USBD_CDC_Setup+0xb0>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006385 	.word	0x08006385
 8006358:	080063fb 	.word	0x080063fb
 800635c:	080063ed 	.word	0x080063ed
 8006360:	080063ed 	.word	0x080063ed
 8006364:	080063ed 	.word	0x080063ed
 8006368:	080063ed 	.word	0x080063ed
 800636c:	080063ed 	.word	0x080063ed
 8006370:	080063ed 	.word	0x080063ed
 8006374:	080063ed 	.word	0x080063ed
 8006378:	080063ed 	.word	0x080063ed
 800637c:	080063ad 	.word	0x080063ad
 8006380:	080063d5 	.word	0x080063d5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638a:	2b03      	cmp	r3, #3
 800638c:	d107      	bne.n	800639e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800638e:	f107 030c 	add.w	r3, r7, #12
 8006392:	2202      	movs	r2, #2
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fa53 	bl	8007842 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800639c:	e030      	b.n	8006400 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 f9dd 	bl	8007760 <USBD_CtlError>
        ret = USBD_FAIL;
 80063a6:	2303      	movs	r3, #3
 80063a8:	75fb      	strb	r3, [r7, #23]
      break;
 80063aa:	e029      	b.n	8006400 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d107      	bne.n	80063c6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063b6:	f107 030f 	add.w	r3, r7, #15
 80063ba:	2201      	movs	r2, #1
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 fa3f 	bl	8007842 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80063c4:	e01c      	b.n	8006400 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 f9c9 	bl	8007760 <USBD_CtlError>
        ret = USBD_FAIL;
 80063ce:	2303      	movs	r3, #3
 80063d0:	75fb      	strb	r3, [r7, #23]
      break;
 80063d2:	e015      	b.n	8006400 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d00f      	beq.n	80063fe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f9bd 	bl	8007760 <USBD_CtlError>
        ret = USBD_FAIL;
 80063e6:	2303      	movs	r3, #3
 80063e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80063ea:	e008      	b.n	80063fe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f9b6 	bl	8007760 <USBD_CtlError>
      ret = USBD_FAIL;
 80063f4:	2303      	movs	r3, #3
 80063f6:	75fb      	strb	r3, [r7, #23]
      break;
 80063f8:	e002      	b.n	8006400 <USBD_CDC_Setup+0x15c>
      break;
 80063fa:	bf00      	nop
 80063fc:	e008      	b.n	8006410 <USBD_CDC_Setup+0x16c>
      break;
 80063fe:	bf00      	nop
    }
    break;
 8006400:	e006      	b.n	8006410 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 f9ab 	bl	8007760 <USBD_CtlError>
    ret = USBD_FAIL;
 800640a:	2303      	movs	r3, #3
 800640c:	75fb      	strb	r3, [r7, #23]
    break;
 800640e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop

0800641c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800642e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800643a:	2303      	movs	r3, #3
 800643c:	e049      	b.n	80064d2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006444:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006446:	78fa      	ldrb	r2, [r7, #3]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	3318      	adds	r3, #24
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d029      	beq.n	80064b0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	3318      	adds	r3, #24
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	78f9      	ldrb	r1, [r7, #3]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	460b      	mov	r3, r1
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	1a5b      	subs	r3, r3, r1
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4403      	add	r3, r0
 800647c:	3344      	adds	r3, #68	; 0x44
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	fbb2 f1f3 	udiv	r1, r2, r3
 8006484:	fb03 f301 	mul.w	r3, r3, r1
 8006488:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800648a:	2b00      	cmp	r3, #0
 800648c:	d110      	bne.n	80064b0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3318      	adds	r3, #24
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064a2:	78f9      	ldrb	r1, [r7, #3]
 80064a4:	2300      	movs	r3, #0
 80064a6:	2200      	movs	r2, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 fede 	bl	800826a <USBD_LL_Transmit>
 80064ae:	e00f      	b.n	80064d0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80064cc:	78fa      	ldrb	r2, [r7, #3]
 80064ce:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e015      	b.n	8006528 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fef4 	bl	80082ee <USBD_LL_GetRxDataSize>
 8006506:	4602      	mov	r2, r0
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006522:	4611      	mov	r1, r2
 8006524:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800653e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d015      	beq.n	8006576 <USBD_CDC_EP0_RxReady+0x46>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006550:	2bff      	cmp	r3, #255	; 0xff
 8006552:	d010      	beq.n	8006576 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006562:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800656a:	b292      	uxth	r2, r2
 800656c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	22ff      	movs	r2, #255	; 0xff
 8006572:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2243      	movs	r2, #67	; 0x43
 800658c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800658e:	4b03      	ldr	r3, [pc, #12]	; (800659c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	20000094 	.word	0x20000094

080065a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2243      	movs	r2, #67	; 0x43
 80065ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80065ae:	4b03      	ldr	r3, [pc, #12]	; (80065bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	20000050 	.word	0x20000050

080065c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2243      	movs	r2, #67	; 0x43
 80065cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80065ce:	4b03      	ldr	r3, [pc, #12]	; (80065dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	200000d8 	.word	0x200000d8

080065e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	220a      	movs	r2, #10
 80065ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065ee:	4b03      	ldr	r3, [pc, #12]	; (80065fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	2000000c 	.word	0x2000000c

08006600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006610:	2303      	movs	r3, #3
 8006612:	e004      	b.n	800661e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800662a:	b480      	push	{r7}
 800662c:	b087      	sub	sp, #28
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800666c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006692:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006694:	2301      	movs	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e01a      	b.n	80066dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d114      	bne.n	80066da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066ce:	2181      	movs	r1, #129	; 0x81
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 fdca 	bl	800826a <USBD_LL_Transmit>

    ret = USBD_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e016      	b.n	8006730 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	7c1b      	ldrb	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006714:	2101      	movs	r1, #1
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 fdc8 	bl	80082ac <USBD_LL_PrepareReceive>
 800671c:	e007      	b.n	800672e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006724:	2340      	movs	r3, #64	; 0x40
 8006726:	2101      	movs	r1, #1
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fdbf 	bl	80082ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800674c:	2303      	movs	r3, #3
 800674e:	e025      	b.n	800679c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	79fa      	ldrb	r2, [r7, #7]
 800678e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 fc35 	bl	8008000 <USBD_LL_Init>
 8006796:	4603      	mov	r3, r0
 8006798:	75fb      	strb	r3, [r7, #23]

  return ret;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e010      	b.n	80067de <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	f107 020e 	add.w	r2, r7, #14
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	4602      	mov	r2, r0
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fc52 	bl	8008098 <USBD_LL_Start>
 80067f4:	4603      	mov	r3, r0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	78fa      	ldrb	r2, [r7, #3]
 8006838:	4611      	mov	r1, r2
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
 800683e:	4603      	mov	r3, r0
 8006840:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006842:	7bfb      	ldrb	r3, [r7, #15]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	4611      	mov	r1, r2
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
  }

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 ff2c 	bl	80076ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d00e      	beq.n	80068d6 <USBD_LL_SetupStage+0x5a>
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d302      	bcc.n	80068c2 <USBD_LL_SetupStage+0x46>
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d014      	beq.n	80068ea <USBD_LL_SetupStage+0x6e>
 80068c0:	e01d      	b.n	80068fe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa18 	bl	8006d00 <USBD_StdDevReq>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
      break;
 80068d4:	e020      	b.n	8006918 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa7c 	bl	8006ddc <USBD_StdItfReq>
 80068e4:	4603      	mov	r3, r0
 80068e6:	73fb      	strb	r3, [r7, #15]
      break;
 80068e8:	e016      	b.n	8006918 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fab8 	bl	8006e68 <USBD_StdEPReq>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73fb      	strb	r3, [r7, #15]
      break;
 80068fc:	e00c      	b.n	8006918 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006908:	b2db      	uxtb	r3, r3
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 fc23 	bl	8008158 <USBD_LL_StallEP>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
      break;
 8006916:	bf00      	nop
  }

  return ret;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	460b      	mov	r3, r1
 800692c:	607a      	str	r2, [r7, #4]
 800692e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d137      	bne.n	80069a6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800693c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006944:	2b03      	cmp	r3, #3
 8006946:	d14a      	bne.n	80069de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	429a      	cmp	r2, r3
 8006952:	d913      	bls.n	800697c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	4293      	cmp	r3, r2
 800696c:	bf28      	it	cs
 800696e:	4613      	movcs	r3, r2
 8006970:	461a      	mov	r2, r3
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 ffad 	bl	80078d4 <USBD_CtlContinueRx>
 800697a:	e030      	b.n	80069de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800698e:	2b03      	cmp	r3, #3
 8006990:	d105      	bne.n	800699e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 ffa9 	bl	80078f6 <USBD_CtlSendStatus>
 80069a4:	e01b      	b.n	80069de <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d013      	beq.n	80069da <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d10e      	bne.n	80069da <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	7afa      	ldrb	r2, [r7, #11]
 80069c6:	4611      	mov	r1, r2
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	4798      	blx	r3
 80069cc:	4603      	mov	r3, r0
 80069ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	e002      	b.n	80069e0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069da:	2303      	movs	r3, #3
 80069dc:	e000      	b.n	80069e0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	460b      	mov	r3, r1
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d16a      	bne.n	8006ad2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3314      	adds	r3, #20
 8006a00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d155      	bne.n	8006ab8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d914      	bls.n	8006a42 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	1ad2      	subs	r2, r2, r3
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 ff22 	bl	8007878 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a34:	2300      	movs	r3, #0
 8006a36:	2200      	movs	r2, #0
 8006a38:	2100      	movs	r1, #0
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f001 fc36 	bl	80082ac <USBD_LL_PrepareReceive>
 8006a40:	e03a      	b.n	8006ab8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d11c      	bne.n	8006a88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d316      	bcc.n	8006a88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d20f      	bcs.n	8006a88 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 ff03 	bl	8007878 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2100      	movs	r1, #0
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f001 fc13 	bl	80082ac <USBD_LL_PrepareReceive>
 8006a86:	e017      	b.n	8006ab8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d105      	bne.n	8006aaa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f001 fb53 	bl	8008158 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 ff32 	bl	800791c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d123      	bne.n	8006b0a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff fe9b 	bl	80067fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ad0:	e01b      	b.n	8006b0a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d013      	beq.n	8006b06 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d10e      	bne.n	8006b06 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	7afa      	ldrb	r2, [r7, #11]
 8006af2:	4611      	mov	r1, r2
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	4798      	blx	r3
 8006af8:	4603      	mov	r3, r0
 8006afa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	e002      	b.n	8006b0c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e000      	b.n	8006b0c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6852      	ldr	r2, [r2, #4]
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	4611      	mov	r1, r2
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 fab5 	bl	80080ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2240      	movs	r2, #64	; 0x40
 8006b70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b74:	2340      	movs	r3, #64	; 0x40
 8006b76:	2200      	movs	r2, #0
 8006b78:	2180      	movs	r1, #128	; 0x80
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 faa7 	bl	80080ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2240      	movs	r2, #64	; 0x40
 8006b8a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	78fa      	ldrb	r2, [r7, #3]
 8006ba6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2204      	movs	r2, #4
 8006bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d105      	bne.n	8006bfe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d10b      	bne.n	8006c36 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d009      	beq.n	8006cb8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6852      	ldr	r2, [r2, #4]
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
  }

  return USBD_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b087      	sub	sp, #28
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ce0:	8a3b      	ldrh	r3, [r7, #16]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	b21a      	sxth	r2, r3
 8006ce6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b21b      	sxth	r3, r3
 8006cee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d004      	beq.n	8006d24 <USBD_StdDevReq+0x24>
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d002      	beq.n	8006d24 <USBD_StdDevReq+0x24>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <USBD_StdDevReq+0x38>
 8006d22:	e050      	b.n	8006dc6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]
    break;
 8006d36:	e04b      	b.n	8006dd0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b09      	cmp	r3, #9
 8006d3e:	d83c      	bhi.n	8006dba <USBD_StdDevReq+0xba>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <USBD_StdDevReq+0x48>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d9d 	.word	0x08006d9d
 8006d4c:	08006db1 	.word	0x08006db1
 8006d50:	08006dbb 	.word	0x08006dbb
 8006d54:	08006da7 	.word	0x08006da7
 8006d58:	08006dbb 	.word	0x08006dbb
 8006d5c:	08006d7b 	.word	0x08006d7b
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006dbb 	.word	0x08006dbb
 8006d68:	08006d93 	.word	0x08006d93
 8006d6c:	08006d85 	.word	0x08006d85
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9ce 	bl	8007114 <USBD_GetDescriptor>
      break;
 8006d78:	e024      	b.n	8006dc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fb33 	bl	80073e8 <USBD_SetAddress>
      break;
 8006d82:	e01f      	b.n	8006dc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb70 	bl	800746c <USBD_SetConfig>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e018      	b.n	8006dc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc0d 	bl	80075b4 <USBD_GetConfig>
      break;
 8006d9a:	e013      	b.n	8006dc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fc3c 	bl	800761c <USBD_GetStatus>
      break;
 8006da4:	e00e      	b.n	8006dc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fc6a 	bl	8007682 <USBD_SetFeature>
      break;
 8006dae:	e009      	b.n	8006dc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fc79 	bl	80076aa <USBD_ClrFeature>
      break;
 8006db8:	e004      	b.n	8006dc4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fccf 	bl	8007760 <USBD_CtlError>
      break;
 8006dc2:	bf00      	nop
    }
    break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fcc9 	bl	8007760 <USBD_CtlError>
    break;
 8006dce:	bf00      	nop
  }

  return ret;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop

08006ddc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d003      	beq.n	8006dfe <USBD_StdItfReq+0x22>
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d001      	beq.n	8006dfe <USBD_StdItfReq+0x22>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d12a      	bne.n	8006e54 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e04:	3b01      	subs	r3, #1
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d81d      	bhi.n	8006e46 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	889b      	ldrh	r3, [r3, #4]
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d813      	bhi.n	8006e3c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	88db      	ldrh	r3, [r3, #6]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d110      	bne.n	8006e50 <USBD_StdItfReq+0x74>
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10d      	bne.n	8006e50 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fd5e 	bl	80078f6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006e3a:	e009      	b.n	8006e50 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fc8e 	bl	8007760 <USBD_CtlError>
      break;
 8006e44:	e004      	b.n	8006e50 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fc89 	bl	8007760 <USBD_CtlError>
      break;
 8006e4e:	e000      	b.n	8006e52 <USBD_StdItfReq+0x76>
      break;
 8006e50:	bf00      	nop
    }
    break;
 8006e52:	e004      	b.n	8006e5e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fc82 	bl	8007760 <USBD_CtlError>
    break;
 8006e5c:	bf00      	nop
  }

  return ret;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	889b      	ldrh	r3, [r3, #4]
 8006e7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d004      	beq.n	8006e92 <USBD_StdEPReq+0x2a>
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d002      	beq.n	8006e92 <USBD_StdEPReq+0x2a>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <USBD_StdEPReq+0x3e>
 8006e90:	e135      	b.n	80070fe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea4:	e130      	b.n	8007108 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	785b      	ldrb	r3, [r3, #1]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d03e      	beq.n	8006f2c <USBD_StdEPReq+0xc4>
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d002      	beq.n	8006eb8 <USBD_StdEPReq+0x50>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d077      	beq.n	8006fa6 <USBD_StdEPReq+0x13e>
 8006eb6:	e11c      	b.n	80070f2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d002      	beq.n	8006ec8 <USBD_StdEPReq+0x60>
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d015      	beq.n	8006ef2 <USBD_StdEPReq+0x8a>
 8006ec6:	e02b      	b.n	8006f20 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00c      	beq.n	8006ee8 <USBD_StdEPReq+0x80>
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	2b80      	cmp	r3, #128	; 0x80
 8006ed2:	d009      	beq.n	8006ee8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 f93d 	bl	8008158 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ede:	2180      	movs	r1, #128	; 0x80
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 f939 	bl	8008158 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006ee6:	e020      	b.n	8006f2a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fc38 	bl	8007760 <USBD_CtlError>
        break;
 8006ef0:	e01b      	b.n	8006f2a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10e      	bne.n	8006f18 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <USBD_StdEPReq+0xb0>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d008      	beq.n	8006f18 <USBD_StdEPReq+0xb0>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88db      	ldrh	r3, [r3, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f920 	bl	8008158 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fcec 	bl	80078f6 <USBD_CtlSendStatus>

        break;
 8006f1e:	e004      	b.n	8006f2a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fc1c 	bl	8007760 <USBD_CtlError>
        break;
 8006f28:	bf00      	nop
      }
      break;
 8006f2a:	e0e7      	b.n	80070fc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d002      	beq.n	8006f3c <USBD_StdEPReq+0xd4>
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d015      	beq.n	8006f66 <USBD_StdEPReq+0xfe>
 8006f3a:	e02d      	b.n	8006f98 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <USBD_StdEPReq+0xf4>
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b80      	cmp	r3, #128	; 0x80
 8006f46:	d009      	beq.n	8006f5c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f903 	bl	8008158 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f52:	2180      	movs	r1, #128	; 0x80
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 f8ff 	bl	8008158 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006f5a:	e023      	b.n	8006fa4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fbfe 	bl	8007760 <USBD_CtlError>
        break;
 8006f64:	e01e      	b.n	8006fa4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	885b      	ldrh	r3, [r3, #2]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d119      	bne.n	8006fa2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 f90a 	bl	8008196 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fcb7 	bl	80078f6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4798      	blx	r3
        }
        break;
 8006f96:	e004      	b.n	8006fa2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fbe0 	bl	8007760 <USBD_CtlError>
        break;
 8006fa0:	e000      	b.n	8006fa4 <USBD_StdEPReq+0x13c>
        break;
 8006fa2:	bf00      	nop
      }
      break;
 8006fa4:	e0aa      	b.n	80070fc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d002      	beq.n	8006fb6 <USBD_StdEPReq+0x14e>
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d032      	beq.n	800701a <USBD_StdEPReq+0x1b2>
 8006fb4:	e097      	b.n	80070e6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <USBD_StdEPReq+0x164>
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	2b80      	cmp	r3, #128	; 0x80
 8006fc0:	d004      	beq.n	8006fcc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fbcb 	bl	8007760 <USBD_CtlError>
          break;
 8006fca:	e091      	b.n	80070f0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da0b      	bge.n	8006fec <USBD_StdEPReq+0x184>
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	3310      	adds	r3, #16
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3304      	adds	r3, #4
 8006fea:	e00b      	b.n	8007004 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	4413      	add	r3, r2
 8007002:	3304      	adds	r3, #4
 8007004:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2202      	movs	r2, #2
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fc15 	bl	8007842 <USBD_CtlSendData>
        break;
 8007018:	e06a      	b.n	80070f0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800701a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800701e:	2b00      	cmp	r3, #0
 8007020:	da11      	bge.n	8007046 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	f003 020f 	and.w	r2, r3, #15
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	3324      	adds	r3, #36	; 0x24
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d117      	bne.n	800706c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb8e 	bl	8007760 <USBD_CtlError>
            break;
 8007044:	e054      	b.n	80070f0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	f003 020f 	and.w	r2, r3, #15
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fb7b 	bl	8007760 <USBD_CtlError>
            break;
 800706a:	e041      	b.n	80070f0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800706c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007070:	2b00      	cmp	r3, #0
 8007072:	da0b      	bge.n	800708c <USBD_StdEPReq+0x224>
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	3310      	adds	r3, #16
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	4413      	add	r3, r2
 8007088:	3304      	adds	r3, #4
 800708a:	e00b      	b.n	80070a4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	4413      	add	r3, r2
 80070a2:	3304      	adds	r3, #4
 80070a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <USBD_StdEPReq+0x24a>
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b80      	cmp	r3, #128	; 0x80
 80070b0:	d103      	bne.n	80070ba <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e00e      	b.n	80070d8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 f888 	bl	80081d4 <USBD_LL_IsStallEP>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2201      	movs	r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	e002      	b.n	80070d8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2202      	movs	r2, #2
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fbaf 	bl	8007842 <USBD_CtlSendData>
          break;
 80070e4:	e004      	b.n	80070f0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb39 	bl	8007760 <USBD_CtlError>
        break;
 80070ee:	bf00      	nop
      }
      break;
 80070f0:	e004      	b.n	80070fc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb33 	bl	8007760 <USBD_CtlError>
      break;
 80070fa:	bf00      	nop
    }
    break;
 80070fc:	e004      	b.n	8007108 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fb2d 	bl	8007760 <USBD_CtlError>
    break;
 8007106:	bf00      	nop
  }

  return ret;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	885b      	ldrh	r3, [r3, #2]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	b29b      	uxth	r3, r3
 8007132:	3b01      	subs	r3, #1
 8007134:	2b06      	cmp	r3, #6
 8007136:	f200 8128 	bhi.w	800738a <USBD_GetDescriptor+0x276>
 800713a:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <USBD_GetDescriptor+0x2c>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	0800715d 	.word	0x0800715d
 8007144:	08007175 	.word	0x08007175
 8007148:	080071b5 	.word	0x080071b5
 800714c:	0800738b 	.word	0x0800738b
 8007150:	0800738b 	.word	0x0800738b
 8007154:	0800732b 	.word	0x0800732b
 8007158:	08007357 	.word	0x08007357
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	7c12      	ldrb	r2, [r2, #16]
 8007168:	f107 0108 	add.w	r1, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
    break;
 8007172:	e112      	b.n	800739a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	7c1b      	ldrb	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10d      	bne.n	8007198 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	f107 0208 	add.w	r2, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	2202      	movs	r2, #2
 8007194:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007196:	e100      	b.n	800739a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	f107 0208 	add.w	r2, r7, #8
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	2202      	movs	r2, #2
 80071b0:	701a      	strb	r2, [r3, #0]
    break;
 80071b2:	e0f2      	b.n	800739a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	885b      	ldrh	r3, [r3, #2]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	f200 80ac 	bhi.w	8007318 <USBD_GetDescriptor+0x204>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <USBD_GetDescriptor+0xb4>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071e1 	.word	0x080071e1
 80071cc:	08007215 	.word	0x08007215
 80071d0:	08007249 	.word	0x08007249
 80071d4:	0800727d 	.word	0x0800727d
 80071d8:	080072b1 	.word	0x080072b1
 80071dc:	080072e5 	.word	0x080072e5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	7c12      	ldrb	r2, [r2, #16]
 80071f8:	f107 0108 	add.w	r1, r7, #8
 80071fc:	4610      	mov	r0, r2
 80071fe:	4798      	blx	r3
 8007200:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007202:	e091      	b.n	8007328 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 faaa 	bl	8007760 <USBD_CtlError>
        err++;
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	3301      	adds	r3, #1
 8007210:	72fb      	strb	r3, [r7, #11]
      break;
 8007212:	e089      	b.n	8007328 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	7c12      	ldrb	r2, [r2, #16]
 800722c:	f107 0108 	add.w	r1, r7, #8
 8007230:	4610      	mov	r0, r2
 8007232:	4798      	blx	r3
 8007234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007236:	e077      	b.n	8007328 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa90 	bl	8007760 <USBD_CtlError>
        err++;
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	3301      	adds	r3, #1
 8007244:	72fb      	strb	r3, [r7, #11]
      break;
 8007246:	e06f      	b.n	8007328 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7c12      	ldrb	r2, [r2, #16]
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800726a:	e05d      	b.n	8007328 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa76 	bl	8007760 <USBD_CtlError>
        err++;
 8007274:	7afb      	ldrb	r3, [r7, #11]
 8007276:	3301      	adds	r3, #1
 8007278:	72fb      	strb	r3, [r7, #11]
      break;
 800727a:	e055      	b.n	8007328 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	7c12      	ldrb	r2, [r2, #16]
 8007294:	f107 0108 	add.w	r1, r7, #8
 8007298:	4610      	mov	r0, r2
 800729a:	4798      	blx	r3
 800729c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800729e:	e043      	b.n	8007328 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa5c 	bl	8007760 <USBD_CtlError>
        err++;
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	3301      	adds	r3, #1
 80072ac:	72fb      	strb	r3, [r7, #11]
      break;
 80072ae:	e03b      	b.n	8007328 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	7c12      	ldrb	r2, [r2, #16]
 80072c8:	f107 0108 	add.w	r1, r7, #8
 80072cc:	4610      	mov	r0, r2
 80072ce:	4798      	blx	r3
 80072d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072d2:	e029      	b.n	8007328 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa42 	bl	8007760 <USBD_CtlError>
        err++;
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	3301      	adds	r3, #1
 80072e0:	72fb      	strb	r3, [r7, #11]
      break;
 80072e2:	e021      	b.n	8007328 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7c12      	ldrb	r2, [r2, #16]
 80072fc:	f107 0108 	add.w	r1, r7, #8
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
 8007304:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007306:	e00f      	b.n	8007328 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa28 	bl	8007760 <USBD_CtlError>
        err++;
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	3301      	adds	r3, #1
 8007314:	72fb      	strb	r3, [r7, #11]
      break;
 8007316:	e007      	b.n	8007328 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa20 	bl	8007760 <USBD_CtlError>
      err++;
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	3301      	adds	r3, #1
 8007324:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007326:	bf00      	nop
    }
    break;
 8007328:	e037      	b.n	800739a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	7c1b      	ldrb	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	f107 0208 	add.w	r2, r7, #8
 800733e:	4610      	mov	r0, r2
 8007340:	4798      	blx	r3
 8007342:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007344:	e029      	b.n	800739a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa09 	bl	8007760 <USBD_CtlError>
      err++;
 800734e:	7afb      	ldrb	r3, [r7, #11]
 8007350:	3301      	adds	r3, #1
 8007352:	72fb      	strb	r3, [r7, #11]
    break;
 8007354:	e021      	b.n	800739a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	7c1b      	ldrb	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10d      	bne.n	800737a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	f107 0208 	add.w	r2, r7, #8
 800736a:	4610      	mov	r0, r2
 800736c:	4798      	blx	r3
 800736e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	2207      	movs	r2, #7
 8007376:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007378:	e00f      	b.n	800739a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f9ef 	bl	8007760 <USBD_CtlError>
      err++;
 8007382:	7afb      	ldrb	r3, [r7, #11]
 8007384:	3301      	adds	r3, #1
 8007386:	72fb      	strb	r3, [r7, #11]
    break;
 8007388:	e007      	b.n	800739a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f9e7 	bl	8007760 <USBD_CtlError>
    err++;
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	3301      	adds	r3, #1
 8007396:	72fb      	strb	r3, [r7, #11]
    break;
 8007398:	bf00      	nop
  }

  if (err != 0U)
 800739a:	7afb      	ldrb	r3, [r7, #11]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11e      	bne.n	80073de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	88db      	ldrh	r3, [r3, #6]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d016      	beq.n	80073d6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80073a8:	893b      	ldrh	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00e      	beq.n	80073cc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	88da      	ldrh	r2, [r3, #6]
 80073b2:	893b      	ldrh	r3, [r7, #8]
 80073b4:	4293      	cmp	r3, r2
 80073b6:	bf28      	it	cs
 80073b8:	4613      	movcs	r3, r2
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80073be:	893b      	ldrh	r3, [r7, #8]
 80073c0:	461a      	mov	r2, r3
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa3c 	bl	8007842 <USBD_CtlSendData>
 80073ca:	e009      	b.n	80073e0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f9c6 	bl	8007760 <USBD_CtlError>
 80073d4:	e004      	b.n	80073e0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa8d 	bl	80078f6 <USBD_CtlSendStatus>
 80073dc:	e000      	b.n	80073e0 <USBD_GetDescriptor+0x2cc>
    return;
 80073de:	bf00      	nop
    }
  }
}
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop

080073e8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	889b      	ldrh	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d130      	bne.n	800745c <USBD_SetAddress+0x74>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	88db      	ldrh	r3, [r3, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d12c      	bne.n	800745c <USBD_SetAddress+0x74>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	2b7f      	cmp	r3, #127	; 0x7f
 8007408:	d828      	bhi.n	800745c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	885b      	ldrh	r3, [r3, #2]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007414:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	2b03      	cmp	r3, #3
 800741e:	d104      	bne.n	800742a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f99c 	bl	8007760 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007428:	e01c      	b.n	8007464 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fef8 	bl	800822c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fa5a 	bl	80078f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007450:	e008      	b.n	8007464 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745a:	e003      	b.n	8007464 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f97e 	bl	8007760 <USBD_CtlError>
  }
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	885b      	ldrh	r3, [r3, #2]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	4b4b      	ldr	r3, [pc, #300]	; (80075b0 <USBD_SetConfig+0x144>)
 8007482:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007484:	4b4a      	ldr	r3, [pc, #296]	; (80075b0 <USBD_SetConfig+0x144>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d905      	bls.n	8007498 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f966 	bl	8007760 <USBD_CtlError>
    return USBD_FAIL;
 8007494:	2303      	movs	r3, #3
 8007496:	e087      	b.n	80075a8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d002      	beq.n	80074a8 <USBD_SetConfig+0x3c>
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d025      	beq.n	80074f2 <USBD_SetConfig+0x86>
 80074a6:	e071      	b.n	800758c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80074a8:	4b41      	ldr	r3, [pc, #260]	; (80075b0 <USBD_SetConfig+0x144>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01c      	beq.n	80074ea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80074b0:	4b3f      	ldr	r3, [pc, #252]	; (80075b0 <USBD_SetConfig+0x144>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80074ba:	4b3d      	ldr	r3, [pc, #244]	; (80075b0 <USBD_SetConfig+0x144>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff f9a7 	bl	8006814 <USBD_SetClassConfig>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d004      	beq.n	80074da <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f944 	bl	8007760 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80074d8:	e065      	b.n	80075a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa0b 	bl	80078f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2203      	movs	r2, #3
 80074e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80074e8:	e05d      	b.n	80075a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa03 	bl	80078f6 <USBD_CtlSendStatus>
    break;
 80074f0:	e059      	b.n	80075a6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80074f2:	4b2f      	ldr	r3, [pc, #188]	; (80075b0 <USBD_SetConfig+0x144>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d112      	bne.n	8007520 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007502:	4b2b      	ldr	r3, [pc, #172]	; (80075b0 <USBD_SetConfig+0x144>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800750c:	4b28      	ldr	r3, [pc, #160]	; (80075b0 <USBD_SetConfig+0x144>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff f99a 	bl	800684c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f9ec 	bl	80078f6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800751e:	e042      	b.n	80075a6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007520:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <USBD_SetConfig+0x144>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	429a      	cmp	r2, r3
 800752c:	d02a      	beq.n	8007584 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff f988 	bl	800684c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800753c:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <USBD_SetConfig+0x144>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007546:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <USBD_SetConfig+0x144>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff f961 	bl	8006814 <USBD_SetClassConfig>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00f      	beq.n	800757c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f8fe 	bl	8007760 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff f96d 	bl	800684c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2202      	movs	r2, #2
 8007576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800757a:	e014      	b.n	80075a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f9ba 	bl	80078f6 <USBD_CtlSendStatus>
    break;
 8007582:	e010      	b.n	80075a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f9b6 	bl	80078f6 <USBD_CtlSendStatus>
    break;
 800758a:	e00c      	b.n	80075a6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f8e6 	bl	8007760 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007594:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <USBD_SetConfig+0x144>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7ff f956 	bl	800684c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	73fb      	strb	r3, [r7, #15]
    break;
 80075a4:	bf00      	nop
  }

  return ret;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000394 	.word	0x20000394

080075b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	88db      	ldrh	r3, [r3, #6]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d004      	beq.n	80075d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f8c9 	bl	8007760 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80075ce:	e021      	b.n	8007614 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	db17      	blt.n	800760a <USBD_GetConfig+0x56>
 80075da:	2b02      	cmp	r3, #2
 80075dc:	dd02      	ble.n	80075e4 <USBD_GetConfig+0x30>
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d00b      	beq.n	80075fa <USBD_GetConfig+0x46>
 80075e2:	e012      	b.n	800760a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3308      	adds	r3, #8
 80075ee:	2201      	movs	r2, #1
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f925 	bl	8007842 <USBD_CtlSendData>
      break;
 80075f8:	e00c      	b.n	8007614 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3304      	adds	r3, #4
 80075fe:	2201      	movs	r2, #1
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f91d 	bl	8007842 <USBD_CtlSendData>
      break;
 8007608:	e004      	b.n	8007614 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8a7 	bl	8007760 <USBD_CtlError>
      break;
 8007612:	bf00      	nop
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762c:	3b01      	subs	r3, #1
 800762e:	2b02      	cmp	r3, #2
 8007630:	d81e      	bhi.n	8007670 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	88db      	ldrh	r3, [r3, #6]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d004      	beq.n	8007644 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f88f 	bl	8007760 <USBD_CtlError>
      break;
 8007642:	e01a      	b.n	800767a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f043 0202 	orr.w	r2, r3, #2
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	330c      	adds	r3, #12
 8007664:	2202      	movs	r2, #2
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f8ea 	bl	8007842 <USBD_CtlSendData>
    break;
 800766e:	e004      	b.n	800767a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f874 	bl	8007760 <USBD_CtlError>
    break;
 8007678:	bf00      	nop
  }
}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	885b      	ldrh	r3, [r3, #2]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d106      	bne.n	80076a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f92a 	bl	80078f6 <USBD_CtlSendStatus>
  }
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ba:	3b01      	subs	r3, #1
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d80b      	bhi.n	80076d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	885b      	ldrh	r3, [r3, #2]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10c      	bne.n	80076e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f910 	bl	80078f6 <USBD_CtlSendStatus>
      }
      break;
 80076d6:	e004      	b.n	80076e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f840 	bl	8007760 <USBD_CtlError>
      break;
 80076e0:	e000      	b.n	80076e4 <USBD_ClrFeature+0x3a>
      break;
 80076e2:	bf00      	nop
  }
}
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	781a      	ldrb	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff fad3 	bl	8006cc2 <SWAPBYTE>
 800771c:	4603      	mov	r3, r0
 800771e:	461a      	mov	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff fac6 	bl	8006cc2 <SWAPBYTE>
 8007736:	4603      	mov	r3, r0
 8007738:	461a      	mov	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3301      	adds	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff fab9 	bl	8006cc2 <SWAPBYTE>
 8007750:	4603      	mov	r3, r0
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	80da      	strh	r2, [r3, #6]
}
 8007758:	bf00      	nop
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800776a:	2180      	movs	r1, #128	; 0x80
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fcf3 	bl	8008158 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007772:	2100      	movs	r1, #0
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fcef 	bl	8008158 <USBD_LL_StallEP>
}
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d036      	beq.n	8007806 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800779c:	6938      	ldr	r0, [r7, #16]
 800779e:	f000 f836 	bl	800780e <USBD_GetLen>
 80077a2:	4603      	mov	r3, r0
 80077a4:	3301      	adds	r3, #1
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	7812      	ldrb	r2, [r2, #0]
 80077ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	3301      	adds	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	4413      	add	r3, r2
 80077c8:	2203      	movs	r2, #3
 80077ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	3301      	adds	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077d2:	e013      	b.n	80077fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4413      	add	r3, r2
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	7812      	ldrb	r2, [r2, #0]
 80077de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	3301      	adds	r3, #1
 80077e4:	613b      	str	r3, [r7, #16]
    idx++;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
 80077e8:	3301      	adds	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	4413      	add	r3, r2
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	3301      	adds	r3, #1
 80077fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e7      	bne.n	80077d4 <USBD_GetString+0x52>
 8007804:	e000      	b.n	8007808 <USBD_GetString+0x86>
    return;
 8007806:	bf00      	nop
  }
}
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800781e:	e005      	b.n	800782c <USBD_GetLen+0x1e>
  {
    len++;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	3301      	adds	r3, #1
 8007824:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3301      	adds	r3, #1
 800782a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f5      	bne.n	8007820 <USBD_GetLen+0x12>
  }

  return len;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2202      	movs	r2, #2
 8007852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	2100      	movs	r1, #0
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 fcfe 	bl	800826a <USBD_LL_Transmit>

  return USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	2100      	movs	r1, #0
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fced 	bl	800826a <USBD_LL_Transmit>

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2203      	movs	r2, #3
 80078aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	2100      	movs	r1, #0
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fcf1 	bl	80082ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	2100      	movs	r1, #0
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 fce0 	bl	80082ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b082      	sub	sp, #8
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2204      	movs	r2, #4
 8007902:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007906:	2300      	movs	r3, #0
 8007908:	2200      	movs	r2, #0
 800790a:	2100      	movs	r1, #0
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fcac 	bl	800826a <USBD_LL_Transmit>

  return USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2205      	movs	r2, #5
 8007928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800792c:	2300      	movs	r3, #0
 800792e:	2200      	movs	r2, #0
 8007930:	2100      	movs	r1, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fcba 	bl	80082ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007948:	2200      	movs	r2, #0
 800794a:	4912      	ldr	r1, [pc, #72]	; (8007994 <MX_USB_DEVICE_Init+0x50>)
 800794c:	4812      	ldr	r0, [pc, #72]	; (8007998 <MX_USB_DEVICE_Init+0x54>)
 800794e:	f7fe fef3 	bl	8006738 <USBD_Init>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007958:	f7f9 fd6a 	bl	8001430 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800795c:	490f      	ldr	r1, [pc, #60]	; (800799c <MX_USB_DEVICE_Init+0x58>)
 800795e:	480e      	ldr	r0, [pc, #56]	; (8007998 <MX_USB_DEVICE_Init+0x54>)
 8007960:	f7fe ff20 	bl	80067a4 <USBD_RegisterClass>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800796a:	f7f9 fd61 	bl	8001430 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800796e:	490c      	ldr	r1, [pc, #48]	; (80079a0 <MX_USB_DEVICE_Init+0x5c>)
 8007970:	4809      	ldr	r0, [pc, #36]	; (8007998 <MX_USB_DEVICE_Init+0x54>)
 8007972:	f7fe fe45 	bl	8006600 <USBD_CDC_RegisterInterface>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800797c:	f7f9 fd58 	bl	8001430 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007980:	4805      	ldr	r0, [pc, #20]	; (8007998 <MX_USB_DEVICE_Init+0x54>)
 8007982:	f7fe ff30 	bl	80067e6 <USBD_Start>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800798c:	f7f9 fd50 	bl	8001430 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007990:	bf00      	nop
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20000138 	.word	0x20000138
 8007998:	200004b8 	.word	0x200004b8
 800799c:	20000018 	.word	0x20000018
 80079a0:	20000124 	.word	0x20000124

080079a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079a8:	2200      	movs	r2, #0
 80079aa:	4905      	ldr	r1, [pc, #20]	; (80079c0 <CDC_Init_FS+0x1c>)
 80079ac:	4805      	ldr	r0, [pc, #20]	; (80079c4 <CDC_Init_FS+0x20>)
 80079ae:	f7fe fe3c 	bl	800662a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079b2:	4905      	ldr	r1, [pc, #20]	; (80079c8 <CDC_Init_FS+0x24>)
 80079b4:	4803      	ldr	r0, [pc, #12]	; (80079c4 <CDC_Init_FS+0x20>)
 80079b6:	f7fe fe51 	bl	800665c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079bc:	4618      	mov	r0, r3
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000f88 	.word	0x20000f88
 80079c4:	200004b8 	.word	0x200004b8
 80079c8:	20000788 	.word	0x20000788

080079cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
 80079e8:	4613      	mov	r3, r2
 80079ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	2b23      	cmp	r3, #35	; 0x23
 80079f0:	d85c      	bhi.n	8007aac <CDC_Control_FS+0xd0>
 80079f2:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <CDC_Control_FS+0x1c>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007aad 	.word	0x08007aad
 80079fc:	08007aad 	.word	0x08007aad
 8007a00:	08007aad 	.word	0x08007aad
 8007a04:	08007aad 	.word	0x08007aad
 8007a08:	08007aad 	.word	0x08007aad
 8007a0c:	08007aad 	.word	0x08007aad
 8007a10:	08007aad 	.word	0x08007aad
 8007a14:	08007aad 	.word	0x08007aad
 8007a18:	08007aad 	.word	0x08007aad
 8007a1c:	08007aad 	.word	0x08007aad
 8007a20:	08007aad 	.word	0x08007aad
 8007a24:	08007aad 	.word	0x08007aad
 8007a28:	08007aad 	.word	0x08007aad
 8007a2c:	08007aad 	.word	0x08007aad
 8007a30:	08007aad 	.word	0x08007aad
 8007a34:	08007aad 	.word	0x08007aad
 8007a38:	08007aad 	.word	0x08007aad
 8007a3c:	08007aad 	.word	0x08007aad
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007aad 	.word	0x08007aad
 8007a48:	08007aad 	.word	0x08007aad
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	08007aad 	.word	0x08007aad
 8007a54:	08007aad 	.word	0x08007aad
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	08007aad 	.word	0x08007aad
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007aad 	.word	0x08007aad
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007aad 	.word	0x08007aad
 8007a74:	08007aad 	.word	0x08007aad
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007a9b 	.word	0x08007a9b
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	08007aad 	.word	0x08007aad
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <CDC_Control_FS+0xe0>)
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	6810      	ldr	r0, [r2, #0]
 8007a8e:	6018      	str	r0, [r3, #0]
 8007a90:	8891      	ldrh	r1, [r2, #4]
 8007a92:	7992      	ldrb	r2, [r2, #6]
 8007a94:	8099      	strh	r1, [r3, #4]
 8007a96:	719a      	strb	r2, [r3, #6]
    break;
 8007a98:	e009      	b.n	8007aae <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	4a07      	ldr	r2, [pc, #28]	; (8007abc <CDC_Control_FS+0xe0>)
 8007a9e:	6810      	ldr	r0, [r2, #0]
 8007aa0:	6018      	str	r0, [r3, #0]
 8007aa2:	8891      	ldrh	r1, [r2, #4]
 8007aa4:	7992      	ldrb	r2, [r2, #6]
 8007aa6:	8099      	strh	r1, [r3, #4]
 8007aa8:	719a      	strb	r2, [r3, #6]
    break;
 8007aaa:	e000      	b.n	8007aae <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007aac:	bf00      	nop
  }

  return (USBD_OK);
 8007aae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	2000011c 	.word	0x2000011c

08007ac0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <CDC_Receive_FS+0x24>)
 8007ace:	f7fe fdc5 	bl	800665c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ad2:	4804      	ldr	r0, [pc, #16]	; (8007ae4 <CDC_Receive_FS+0x24>)
 8007ad4:	f7fe fe06 	bl	80066e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ad8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200004b8 	.word	0x200004b8

08007ae8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007af8:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <CDC_Transmit_FS+0x48>)
 8007afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007afe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e00b      	b.n	8007b26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b0e:	887b      	ldrh	r3, [r7, #2]
 8007b10:	461a      	mov	r2, r3
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	4806      	ldr	r0, [pc, #24]	; (8007b30 <CDC_Transmit_FS+0x48>)
 8007b16:	f7fe fd88 	bl	800662a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b1a:	4805      	ldr	r0, [pc, #20]	; (8007b30 <CDC_Transmit_FS+0x48>)
 8007b1c:	f7fe fdb2 	bl	8006684 <USBD_CDC_TransmitPacket>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	200004b8 	.word	0x200004b8

08007b34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
	...

08007b58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2212      	movs	r2, #18
 8007b68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b6a:	4b03      	ldr	r3, [pc, #12]	; (8007b78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	20000154 	.word	0x20000154

08007b7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b8e:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20000168 	.word	0x20000168

08007ba0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	4907      	ldr	r1, [pc, #28]	; (8007bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bb6:	4808      	ldr	r0, [pc, #32]	; (8007bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bb8:	f7ff fde3 	bl	8007782 <USBD_GetString>
 8007bbc:	e004      	b.n	8007bc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4904      	ldr	r1, [pc, #16]	; (8007bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bc2:	4805      	ldr	r0, [pc, #20]	; (8007bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bc4:	f7ff fddd 	bl	8007782 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20001788 	.word	0x20001788
 8007bd8:	0800a484 	.word	0x0800a484

08007bdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	4904      	ldr	r1, [pc, #16]	; (8007bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bec:	4804      	ldr	r0, [pc, #16]	; (8007c00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bee:	f7ff fdc8 	bl	8007782 <USBD_GetString>
  return USBD_StrDesc;
 8007bf2:	4b02      	ldr	r3, [pc, #8]	; (8007bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20001788 	.word	0x20001788
 8007c00:	0800a49c 	.word	0x0800a49c

08007c04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	6039      	str	r1, [r7, #0]
 8007c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	221a      	movs	r2, #26
 8007c14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c16:	f000 f843 	bl	8007ca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c1a:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	2000016c 	.word	0x2000016c

08007c28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	6039      	str	r1, [r7, #0]
 8007c32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d105      	bne.n	8007c46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	4907      	ldr	r1, [pc, #28]	; (8007c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c3e:	4808      	ldr	r0, [pc, #32]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c40:	f7ff fd9f 	bl	8007782 <USBD_GetString>
 8007c44:	e004      	b.n	8007c50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4904      	ldr	r1, [pc, #16]	; (8007c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c4a:	4805      	ldr	r0, [pc, #20]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c4c:	f7ff fd99 	bl	8007782 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c50:	4b02      	ldr	r3, [pc, #8]	; (8007c5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20001788 	.word	0x20001788
 8007c60:	0800a4b0 	.word	0x0800a4b0

08007c64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	6039      	str	r1, [r7, #0]
 8007c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	4907      	ldr	r1, [pc, #28]	; (8007c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c7a:	4808      	ldr	r0, [pc, #32]	; (8007c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c7c:	f7ff fd81 	bl	8007782 <USBD_GetString>
 8007c80:	e004      	b.n	8007c8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4904      	ldr	r1, [pc, #16]	; (8007c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c86:	4805      	ldr	r0, [pc, #20]	; (8007c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c88:	f7ff fd7b 	bl	8007782 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c8c:	4b02      	ldr	r3, [pc, #8]	; (8007c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20001788 	.word	0x20001788
 8007c9c:	0800a4bc 	.word	0x0800a4bc

08007ca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ca6:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <Get_SerialNum+0x44>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cac:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <Get_SerialNum+0x48>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cb2:	4b0e      	ldr	r3, [pc, #56]	; (8007cec <Get_SerialNum+0x4c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cc6:	2208      	movs	r2, #8
 8007cc8:	4909      	ldr	r1, [pc, #36]	; (8007cf0 <Get_SerialNum+0x50>)
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f814 	bl	8007cf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	4908      	ldr	r1, [pc, #32]	; (8007cf4 <Get_SerialNum+0x54>)
 8007cd4:	68b8      	ldr	r0, [r7, #8]
 8007cd6:	f000 f80f 	bl	8007cf8 <IntToUnicode>
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	1fff7a10 	.word	0x1fff7a10
 8007ce8:	1fff7a14 	.word	0x1fff7a14
 8007cec:	1fff7a18 	.word	0x1fff7a18
 8007cf0:	2000016e 	.word	0x2000016e
 8007cf4:	2000017e 	.word	0x2000017e

08007cf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]
 8007d0e:	e027      	b.n	8007d60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	0f1b      	lsrs	r3, r3, #28
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	d80b      	bhi.n	8007d30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	0f1b      	lsrs	r3, r3, #28
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	4619      	mov	r1, r3
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	440b      	add	r3, r1
 8007d28:	3230      	adds	r2, #48	; 0x30
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	e00a      	b.n	8007d46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	0f1b      	lsrs	r3, r3, #28
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	440b      	add	r3, r1
 8007d40:	3237      	adds	r2, #55	; 0x37
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	3301      	adds	r3, #1
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	4413      	add	r3, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	75fb      	strb	r3, [r7, #23]
 8007d60:	7dfa      	ldrb	r2, [r7, #23]
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d3d3      	bcc.n	8007d10 <IntToUnicode+0x18>
  }
}
 8007d68:	bf00      	nop
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d7c:	f107 0314 	add.w	r3, r7, #20
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	605a      	str	r2, [r3, #4]
 8007d86:	609a      	str	r2, [r3, #8]
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d94:	d13a      	bne.n	8007e0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <HAL_PCD_MspInit+0xa0>)
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	; (8007e14 <HAL_PCD_MspInit+0xa0>)
 8007da0:	f043 0301 	orr.w	r3, r3, #1
 8007da4:	6313      	str	r3, [r2, #48]	; 0x30
 8007da6:	4b1b      	ldr	r3, [pc, #108]	; (8007e14 <HAL_PCD_MspInit+0xa0>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007db2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007db8:	2302      	movs	r3, #2
 8007dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dc4:	230a      	movs	r3, #10
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dc8:	f107 0314 	add.w	r3, r7, #20
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4812      	ldr	r0, [pc, #72]	; (8007e18 <HAL_PCD_MspInit+0xa4>)
 8007dd0:	f7f9 fe4c 	bl	8001a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <HAL_PCD_MspInit+0xa0>)
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	4a0e      	ldr	r2, [pc, #56]	; (8007e14 <HAL_PCD_MspInit+0xa0>)
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	6353      	str	r3, [r2, #52]	; 0x34
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <HAL_PCD_MspInit+0xa0>)
 8007de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de8:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <HAL_PCD_MspInit+0xa0>)
 8007dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dee:	6453      	str	r3, [r2, #68]	; 0x44
 8007df0:	4b08      	ldr	r3, [pc, #32]	; (8007e14 <HAL_PCD_MspInit+0xa0>)
 8007df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2100      	movs	r1, #0
 8007e00:	2043      	movs	r0, #67	; 0x43
 8007e02:	f7f9 fdfc 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e06:	2043      	movs	r0, #67	; 0x43
 8007e08:	f7f9 fe15 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	3728      	adds	r7, #40	; 0x28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40023800 	.word	0x40023800
 8007e18:	40020000 	.word	0x40020000

08007e1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	f7fe fd22 	bl	800687c <USBD_LL_SetupStage>
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e52:	78fa      	ldrb	r2, [r7, #3]
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	1a9b      	subs	r3, r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	78fb      	ldrb	r3, [r7, #3]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	f7fe fd5a 	bl	8006922 <USBD_LL_DataOutStage>
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e88:	78fa      	ldrb	r2, [r7, #3]
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	440b      	add	r3, r1
 8007e96:	3348      	adds	r3, #72	; 0x48
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f7fe fda3 	bl	80069e8 <USBD_LL_DataInStage>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe fea7 	bl	8006c0c <USBD_LL_SOF>
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d102      	bne.n	8007ee0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
 8007ede:	e008      	b.n	8007ef2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d102      	bne.n	8007eee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
 8007eec:	e001      	b.n	8007ef2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007eee:	f7f9 fa9f 	bl	8001430 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ef8:	7bfa      	ldrb	r2, [r7, #15]
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fe4a 	bl	8006b96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe fe03 	bl	8006b14 <USBD_LL_Reset>
}
 8007f0e:	bf00      	nop
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fe45 	bl	8006bb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f3e:	f043 0301 	orr.w	r3, r3, #1
 8007f42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <HAL_PCD_SuspendCallback+0x48>)
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	4a03      	ldr	r2, [pc, #12]	; (8007f60 <HAL_PCD_SuspendCallback+0x48>)
 8007f52:	f043 0306 	orr.w	r3, r3, #6
 8007f56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	e000ed00 	.word	0xe000ed00

08007f64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fe34 	bl	8006be0 <USBD_LL_Resume>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	4611      	mov	r1, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fe5f 	bl	8006c5a <USBD_LL_IsoOUTIncomplete>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fe40 	bl	8006c40 <USBD_LL_IsoINIncomplete>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fe4c 	bl	8006c74 <USBD_LL_DevConnected>
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe fe49 	bl	8006c8a <USBD_LL_DevDisconnected>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d13c      	bne.n	800808a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008010:	4a20      	ldr	r2, [pc, #128]	; (8008094 <USBD_LL_Init+0x94>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a1e      	ldr	r2, [pc, #120]	; (8008094 <USBD_LL_Init+0x94>)
 800801c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008020:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <USBD_LL_Init+0x94>)
 8008022:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008026:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008028:	4b1a      	ldr	r3, [pc, #104]	; (8008094 <USBD_LL_Init+0x94>)
 800802a:	2204      	movs	r2, #4
 800802c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800802e:	4b19      	ldr	r3, [pc, #100]	; (8008094 <USBD_LL_Init+0x94>)
 8008030:	2202      	movs	r2, #2
 8008032:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008034:	4b17      	ldr	r3, [pc, #92]	; (8008094 <USBD_LL_Init+0x94>)
 8008036:	2200      	movs	r2, #0
 8008038:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800803a:	4b16      	ldr	r3, [pc, #88]	; (8008094 <USBD_LL_Init+0x94>)
 800803c:	2202      	movs	r2, #2
 800803e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008040:	4b14      	ldr	r3, [pc, #80]	; (8008094 <USBD_LL_Init+0x94>)
 8008042:	2200      	movs	r2, #0
 8008044:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008046:	4b13      	ldr	r3, [pc, #76]	; (8008094 <USBD_LL_Init+0x94>)
 8008048:	2200      	movs	r2, #0
 800804a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800804c:	4b11      	ldr	r3, [pc, #68]	; (8008094 <USBD_LL_Init+0x94>)
 800804e:	2200      	movs	r2, #0
 8008050:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008052:	4b10      	ldr	r3, [pc, #64]	; (8008094 <USBD_LL_Init+0x94>)
 8008054:	2200      	movs	r2, #0
 8008056:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008058:	4b0e      	ldr	r3, [pc, #56]	; (8008094 <USBD_LL_Init+0x94>)
 800805a:	2200      	movs	r2, #0
 800805c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800805e:	480d      	ldr	r0, [pc, #52]	; (8008094 <USBD_LL_Init+0x94>)
 8008060:	f7fa fc9a 	bl	8002998 <HAL_PCD_Init>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800806a:	f7f9 f9e1 	bl	8001430 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800806e:	2180      	movs	r1, #128	; 0x80
 8008070:	4808      	ldr	r0, [pc, #32]	; (8008094 <USBD_LL_Init+0x94>)
 8008072:	f7fb fdf8 	bl	8003c66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008076:	2240      	movs	r2, #64	; 0x40
 8008078:	2100      	movs	r1, #0
 800807a:	4806      	ldr	r0, [pc, #24]	; (8008094 <USBD_LL_Init+0x94>)
 800807c:	f7fb fdac 	bl	8003bd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008080:	2280      	movs	r2, #128	; 0x80
 8008082:	2101      	movs	r1, #1
 8008084:	4803      	ldr	r0, [pc, #12]	; (8008094 <USBD_LL_Init+0x94>)
 8008086:	f7fb fda7 	bl	8003bd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20001988 	.word	0x20001988

08008098 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fa fd8f 	bl	8002bd2 <HAL_PCD_Start>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f92a 	bl	8008314 <USBD_Get_USB_Status>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	4608      	mov	r0, r1
 80080d8:	4611      	mov	r1, r2
 80080da:	461a      	mov	r2, r3
 80080dc:	4603      	mov	r3, r0
 80080de:	70fb      	strb	r3, [r7, #3]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70bb      	strb	r3, [r7, #2]
 80080e4:	4613      	mov	r3, r2
 80080e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080f6:	78bb      	ldrb	r3, [r7, #2]
 80080f8:	883a      	ldrh	r2, [r7, #0]
 80080fa:	78f9      	ldrb	r1, [r7, #3]
 80080fc:	f7fb f973 	bl	80033e6 <HAL_PCD_EP_Open>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f904 	bl	8008314 <USBD_Get_USB_Status>
 800810c:	4603      	mov	r3, r0
 800810e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008110:	7bbb      	ldrb	r3, [r7, #14]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	460b      	mov	r3, r1
 8008124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008134:	78fa      	ldrb	r2, [r7, #3]
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f7fb f9bc 	bl	80034b6 <HAL_PCD_EP_Close>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 f8e5 	bl	8008314 <USBD_Get_USB_Status>
 800814a:	4603      	mov	r3, r0
 800814c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800814e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008172:	78fa      	ldrb	r2, [r7, #3]
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f7fb fa94 	bl	80036a4 <HAL_PCD_EP_SetStall>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 f8c6 	bl	8008314 <USBD_Get_USB_Status>
 8008188:	4603      	mov	r3, r0
 800818a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800818c:	7bbb      	ldrb	r3, [r7, #14]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081b0:	78fa      	ldrb	r2, [r7, #3]
 80081b2:	4611      	mov	r1, r2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fb fad9 	bl	800376c <HAL_PCD_EP_ClrStall>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 f8a7 	bl	8008314 <USBD_Get_USB_Status>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da0b      	bge.n	8008208 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	333e      	adds	r3, #62	; 0x3e
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	e00b      	b.n	8008220 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	4613      	mov	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800821e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008246:	78fa      	ldrb	r2, [r7, #3]
 8008248:	4611      	mov	r1, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7fb f8a6 	bl	800339c <HAL_PCD_SetAddress>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f85c 	bl	8008314 <USBD_Get_USB_Status>
 800825c:	4603      	mov	r3, r0
 800825e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008260:	7bbb      	ldrb	r3, [r7, #14]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	460b      	mov	r3, r1
 8008278:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008288:	7af9      	ldrb	r1, [r7, #11]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	f7fb f9bf 	bl	8003610 <HAL_PCD_EP_Transmit>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f83b 	bl	8008314 <USBD_Get_USB_Status>
 800829e:	4603      	mov	r3, r0
 80082a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	460b      	mov	r3, r1
 80082ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082ca:	7af9      	ldrb	r1, [r7, #11]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	f7fb f93b 	bl	800354a <HAL_PCD_EP_Receive>
 80082d4:	4603      	mov	r3, r0
 80082d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f81a 	bl	8008314 <USBD_Get_USB_Status>
 80082e0:	4603      	mov	r3, r0
 80082e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	4611      	mov	r1, r2
 8008304:	4618      	mov	r0, r3
 8008306:	f7fb f96b 	bl	80035e0 <HAL_PCD_EP_GetRxCount>
 800830a:	4603      	mov	r3, r0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	2b03      	cmp	r3, #3
 8008326:	d817      	bhi.n	8008358 <USBD_Get_USB_Status+0x44>
 8008328:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <USBD_Get_USB_Status+0x1c>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008341 	.word	0x08008341
 8008334:	08008347 	.word	0x08008347
 8008338:	0800834d 	.word	0x0800834d
 800833c:	08008353 	.word	0x08008353
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e00b      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008346:	2303      	movs	r3, #3
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	e008      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	e005      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008352:	2303      	movs	r3, #3
 8008354:	73fb      	strb	r3, [r7, #15]
    break;
 8008356:	e002      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008358:	2303      	movs	r3, #3
 800835a:	73fb      	strb	r3, [r7, #15]
    break;
 800835c:	bf00      	nop
  }
  return usb_status;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000188 	.word	0x20000188

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4e0d      	ldr	r6, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1ba4      	subs	r4, r4, r6
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2500      	movs	r5, #0
 8008384:	42a5      	cmp	r5, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4e0b      	ldr	r6, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f002 f864 	bl	800a458 <_init>
 8008390:	1ba4      	subs	r4, r4, r6
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2500      	movs	r5, #0
 8008396:	42a5      	cmp	r5, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083a0:	4798      	blx	r3
 80083a2:	3501      	adds	r5, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083aa:	4798      	blx	r3
 80083ac:	3501      	adds	r5, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	0800a748 	.word	0x0800a748
 80083b4:	0800a748 	.word	0x0800a748
 80083b8:	0800a748 	.word	0x0800a748
 80083bc:	0800a74c 	.word	0x0800a74c

080083c0 <malloc>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <malloc+0xc>)
 80083c2:	4601      	mov	r1, r0
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f000 b861 	b.w	800848c <_malloc_r>
 80083ca:	bf00      	nop
 80083cc:	20000188 	.word	0x20000188

080083d0 <free>:
 80083d0:	4b02      	ldr	r3, [pc, #8]	; (80083dc <free+0xc>)
 80083d2:	4601      	mov	r1, r0
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f000 b80b 	b.w	80083f0 <_free_r>
 80083da:	bf00      	nop
 80083dc:	20000188 	.word	0x20000188

080083e0 <memset>:
 80083e0:	4402      	add	r2, r0
 80083e2:	4603      	mov	r3, r0
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d100      	bne.n	80083ea <memset+0xa>
 80083e8:	4770      	bx	lr
 80083ea:	f803 1b01 	strb.w	r1, [r3], #1
 80083ee:	e7f9      	b.n	80083e4 <memset+0x4>

080083f0 <_free_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4605      	mov	r5, r0
 80083f4:	2900      	cmp	r1, #0
 80083f6:	d045      	beq.n	8008484 <_free_r+0x94>
 80083f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fc:	1f0c      	subs	r4, r1, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfb8      	it	lt
 8008402:	18e4      	addlt	r4, r4, r3
 8008404:	f001 fb85 	bl	8009b12 <__malloc_lock>
 8008408:	4a1f      	ldr	r2, [pc, #124]	; (8008488 <_free_r+0x98>)
 800840a:	6813      	ldr	r3, [r2, #0]
 800840c:	4610      	mov	r0, r2
 800840e:	b933      	cbnz	r3, 800841e <_free_r+0x2e>
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	6014      	str	r4, [r2, #0]
 8008414:	4628      	mov	r0, r5
 8008416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800841a:	f001 bb7b 	b.w	8009b14 <__malloc_unlock>
 800841e:	42a3      	cmp	r3, r4
 8008420:	d90c      	bls.n	800843c <_free_r+0x4c>
 8008422:	6821      	ldr	r1, [r4, #0]
 8008424:	1862      	adds	r2, r4, r1
 8008426:	4293      	cmp	r3, r2
 8008428:	bf04      	itt	eq
 800842a:	681a      	ldreq	r2, [r3, #0]
 800842c:	685b      	ldreq	r3, [r3, #4]
 800842e:	6063      	str	r3, [r4, #4]
 8008430:	bf04      	itt	eq
 8008432:	1852      	addeq	r2, r2, r1
 8008434:	6022      	streq	r2, [r4, #0]
 8008436:	6004      	str	r4, [r0, #0]
 8008438:	e7ec      	b.n	8008414 <_free_r+0x24>
 800843a:	4613      	mov	r3, r2
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	b10a      	cbz	r2, 8008444 <_free_r+0x54>
 8008440:	42a2      	cmp	r2, r4
 8008442:	d9fa      	bls.n	800843a <_free_r+0x4a>
 8008444:	6819      	ldr	r1, [r3, #0]
 8008446:	1858      	adds	r0, r3, r1
 8008448:	42a0      	cmp	r0, r4
 800844a:	d10b      	bne.n	8008464 <_free_r+0x74>
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	4401      	add	r1, r0
 8008450:	1858      	adds	r0, r3, r1
 8008452:	4282      	cmp	r2, r0
 8008454:	6019      	str	r1, [r3, #0]
 8008456:	d1dd      	bne.n	8008414 <_free_r+0x24>
 8008458:	6810      	ldr	r0, [r2, #0]
 800845a:	6852      	ldr	r2, [r2, #4]
 800845c:	605a      	str	r2, [r3, #4]
 800845e:	4401      	add	r1, r0
 8008460:	6019      	str	r1, [r3, #0]
 8008462:	e7d7      	b.n	8008414 <_free_r+0x24>
 8008464:	d902      	bls.n	800846c <_free_r+0x7c>
 8008466:	230c      	movs	r3, #12
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	e7d3      	b.n	8008414 <_free_r+0x24>
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	1821      	adds	r1, r4, r0
 8008470:	428a      	cmp	r2, r1
 8008472:	bf04      	itt	eq
 8008474:	6811      	ldreq	r1, [r2, #0]
 8008476:	6852      	ldreq	r2, [r2, #4]
 8008478:	6062      	str	r2, [r4, #4]
 800847a:	bf04      	itt	eq
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	605c      	str	r4, [r3, #4]
 8008482:	e7c7      	b.n	8008414 <_free_r+0x24>
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	bf00      	nop
 8008488:	20000398 	.word	0x20000398

0800848c <_malloc_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	1ccd      	adds	r5, r1, #3
 8008490:	f025 0503 	bic.w	r5, r5, #3
 8008494:	3508      	adds	r5, #8
 8008496:	2d0c      	cmp	r5, #12
 8008498:	bf38      	it	cc
 800849a:	250c      	movcc	r5, #12
 800849c:	2d00      	cmp	r5, #0
 800849e:	4606      	mov	r6, r0
 80084a0:	db01      	blt.n	80084a6 <_malloc_r+0x1a>
 80084a2:	42a9      	cmp	r1, r5
 80084a4:	d903      	bls.n	80084ae <_malloc_r+0x22>
 80084a6:	230c      	movs	r3, #12
 80084a8:	6033      	str	r3, [r6, #0]
 80084aa:	2000      	movs	r0, #0
 80084ac:	bd70      	pop	{r4, r5, r6, pc}
 80084ae:	f001 fb30 	bl	8009b12 <__malloc_lock>
 80084b2:	4a21      	ldr	r2, [pc, #132]	; (8008538 <_malloc_r+0xac>)
 80084b4:	6814      	ldr	r4, [r2, #0]
 80084b6:	4621      	mov	r1, r4
 80084b8:	b991      	cbnz	r1, 80084e0 <_malloc_r+0x54>
 80084ba:	4c20      	ldr	r4, [pc, #128]	; (800853c <_malloc_r+0xb0>)
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	b91b      	cbnz	r3, 80084c8 <_malloc_r+0x3c>
 80084c0:	4630      	mov	r0, r6
 80084c2:	f000 fc99 	bl	8008df8 <_sbrk_r>
 80084c6:	6020      	str	r0, [r4, #0]
 80084c8:	4629      	mov	r1, r5
 80084ca:	4630      	mov	r0, r6
 80084cc:	f000 fc94 	bl	8008df8 <_sbrk_r>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d124      	bne.n	800851e <_malloc_r+0x92>
 80084d4:	230c      	movs	r3, #12
 80084d6:	6033      	str	r3, [r6, #0]
 80084d8:	4630      	mov	r0, r6
 80084da:	f001 fb1b 	bl	8009b14 <__malloc_unlock>
 80084de:	e7e4      	b.n	80084aa <_malloc_r+0x1e>
 80084e0:	680b      	ldr	r3, [r1, #0]
 80084e2:	1b5b      	subs	r3, r3, r5
 80084e4:	d418      	bmi.n	8008518 <_malloc_r+0x8c>
 80084e6:	2b0b      	cmp	r3, #11
 80084e8:	d90f      	bls.n	800850a <_malloc_r+0x7e>
 80084ea:	600b      	str	r3, [r1, #0]
 80084ec:	50cd      	str	r5, [r1, r3]
 80084ee:	18cc      	adds	r4, r1, r3
 80084f0:	4630      	mov	r0, r6
 80084f2:	f001 fb0f 	bl	8009b14 <__malloc_unlock>
 80084f6:	f104 000b 	add.w	r0, r4, #11
 80084fa:	1d23      	adds	r3, r4, #4
 80084fc:	f020 0007 	bic.w	r0, r0, #7
 8008500:	1ac3      	subs	r3, r0, r3
 8008502:	d0d3      	beq.n	80084ac <_malloc_r+0x20>
 8008504:	425a      	negs	r2, r3
 8008506:	50e2      	str	r2, [r4, r3]
 8008508:	e7d0      	b.n	80084ac <_malloc_r+0x20>
 800850a:	428c      	cmp	r4, r1
 800850c:	684b      	ldr	r3, [r1, #4]
 800850e:	bf16      	itet	ne
 8008510:	6063      	strne	r3, [r4, #4]
 8008512:	6013      	streq	r3, [r2, #0]
 8008514:	460c      	movne	r4, r1
 8008516:	e7eb      	b.n	80084f0 <_malloc_r+0x64>
 8008518:	460c      	mov	r4, r1
 800851a:	6849      	ldr	r1, [r1, #4]
 800851c:	e7cc      	b.n	80084b8 <_malloc_r+0x2c>
 800851e:	1cc4      	adds	r4, r0, #3
 8008520:	f024 0403 	bic.w	r4, r4, #3
 8008524:	42a0      	cmp	r0, r4
 8008526:	d005      	beq.n	8008534 <_malloc_r+0xa8>
 8008528:	1a21      	subs	r1, r4, r0
 800852a:	4630      	mov	r0, r6
 800852c:	f000 fc64 	bl	8008df8 <_sbrk_r>
 8008530:	3001      	adds	r0, #1
 8008532:	d0cf      	beq.n	80084d4 <_malloc_r+0x48>
 8008534:	6025      	str	r5, [r4, #0]
 8008536:	e7db      	b.n	80084f0 <_malloc_r+0x64>
 8008538:	20000398 	.word	0x20000398
 800853c:	2000039c 	.word	0x2000039c

08008540 <__cvt>:
 8008540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008544:	ec55 4b10 	vmov	r4, r5, d0
 8008548:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800854a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800854e:	2d00      	cmp	r5, #0
 8008550:	460e      	mov	r6, r1
 8008552:	4691      	mov	r9, r2
 8008554:	4619      	mov	r1, r3
 8008556:	bfb8      	it	lt
 8008558:	4622      	movlt	r2, r4
 800855a:	462b      	mov	r3, r5
 800855c:	f027 0720 	bic.w	r7, r7, #32
 8008560:	bfbb      	ittet	lt
 8008562:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008566:	461d      	movlt	r5, r3
 8008568:	2300      	movge	r3, #0
 800856a:	232d      	movlt	r3, #45	; 0x2d
 800856c:	bfb8      	it	lt
 800856e:	4614      	movlt	r4, r2
 8008570:	2f46      	cmp	r7, #70	; 0x46
 8008572:	700b      	strb	r3, [r1, #0]
 8008574:	d004      	beq.n	8008580 <__cvt+0x40>
 8008576:	2f45      	cmp	r7, #69	; 0x45
 8008578:	d100      	bne.n	800857c <__cvt+0x3c>
 800857a:	3601      	adds	r6, #1
 800857c:	2102      	movs	r1, #2
 800857e:	e000      	b.n	8008582 <__cvt+0x42>
 8008580:	2103      	movs	r1, #3
 8008582:	ab03      	add	r3, sp, #12
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	ab02      	add	r3, sp, #8
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	4632      	mov	r2, r6
 800858c:	4653      	mov	r3, sl
 800858e:	ec45 4b10 	vmov	d0, r4, r5
 8008592:	f000 fced 	bl	8008f70 <_dtoa_r>
 8008596:	2f47      	cmp	r7, #71	; 0x47
 8008598:	4680      	mov	r8, r0
 800859a:	d102      	bne.n	80085a2 <__cvt+0x62>
 800859c:	f019 0f01 	tst.w	r9, #1
 80085a0:	d026      	beq.n	80085f0 <__cvt+0xb0>
 80085a2:	2f46      	cmp	r7, #70	; 0x46
 80085a4:	eb08 0906 	add.w	r9, r8, r6
 80085a8:	d111      	bne.n	80085ce <__cvt+0x8e>
 80085aa:	f898 3000 	ldrb.w	r3, [r8]
 80085ae:	2b30      	cmp	r3, #48	; 0x30
 80085b0:	d10a      	bne.n	80085c8 <__cvt+0x88>
 80085b2:	2200      	movs	r2, #0
 80085b4:	2300      	movs	r3, #0
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f8 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 80085be:	b918      	cbnz	r0, 80085c8 <__cvt+0x88>
 80085c0:	f1c6 0601 	rsb	r6, r6, #1
 80085c4:	f8ca 6000 	str.w	r6, [sl]
 80085c8:	f8da 3000 	ldr.w	r3, [sl]
 80085cc:	4499      	add	r9, r3
 80085ce:	2200      	movs	r2, #0
 80085d0:	2300      	movs	r3, #0
 80085d2:	4620      	mov	r0, r4
 80085d4:	4629      	mov	r1, r5
 80085d6:	f7f8 fa77 	bl	8000ac8 <__aeabi_dcmpeq>
 80085da:	b938      	cbnz	r0, 80085ec <__cvt+0xac>
 80085dc:	2230      	movs	r2, #48	; 0x30
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	454b      	cmp	r3, r9
 80085e2:	d205      	bcs.n	80085f0 <__cvt+0xb0>
 80085e4:	1c59      	adds	r1, r3, #1
 80085e6:	9103      	str	r1, [sp, #12]
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	e7f8      	b.n	80085de <__cvt+0x9e>
 80085ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085f4:	eba3 0308 	sub.w	r3, r3, r8
 80085f8:	4640      	mov	r0, r8
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	b004      	add	sp, #16
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008602 <__exponent>:
 8008602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008604:	2900      	cmp	r1, #0
 8008606:	4604      	mov	r4, r0
 8008608:	bfba      	itte	lt
 800860a:	4249      	neglt	r1, r1
 800860c:	232d      	movlt	r3, #45	; 0x2d
 800860e:	232b      	movge	r3, #43	; 0x2b
 8008610:	2909      	cmp	r1, #9
 8008612:	f804 2b02 	strb.w	r2, [r4], #2
 8008616:	7043      	strb	r3, [r0, #1]
 8008618:	dd20      	ble.n	800865c <__exponent+0x5a>
 800861a:	f10d 0307 	add.w	r3, sp, #7
 800861e:	461f      	mov	r7, r3
 8008620:	260a      	movs	r6, #10
 8008622:	fb91 f5f6 	sdiv	r5, r1, r6
 8008626:	fb06 1115 	mls	r1, r6, r5, r1
 800862a:	3130      	adds	r1, #48	; 0x30
 800862c:	2d09      	cmp	r5, #9
 800862e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008632:	f103 32ff 	add.w	r2, r3, #4294967295
 8008636:	4629      	mov	r1, r5
 8008638:	dc09      	bgt.n	800864e <__exponent+0x4c>
 800863a:	3130      	adds	r1, #48	; 0x30
 800863c:	3b02      	subs	r3, #2
 800863e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008642:	42bb      	cmp	r3, r7
 8008644:	4622      	mov	r2, r4
 8008646:	d304      	bcc.n	8008652 <__exponent+0x50>
 8008648:	1a10      	subs	r0, r2, r0
 800864a:	b003      	add	sp, #12
 800864c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800864e:	4613      	mov	r3, r2
 8008650:	e7e7      	b.n	8008622 <__exponent+0x20>
 8008652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008656:	f804 2b01 	strb.w	r2, [r4], #1
 800865a:	e7f2      	b.n	8008642 <__exponent+0x40>
 800865c:	2330      	movs	r3, #48	; 0x30
 800865e:	4419      	add	r1, r3
 8008660:	7083      	strb	r3, [r0, #2]
 8008662:	1d02      	adds	r2, r0, #4
 8008664:	70c1      	strb	r1, [r0, #3]
 8008666:	e7ef      	b.n	8008648 <__exponent+0x46>

08008668 <_printf_float>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	b08d      	sub	sp, #52	; 0x34
 800866e:	460c      	mov	r4, r1
 8008670:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008674:	4616      	mov	r6, r2
 8008676:	461f      	mov	r7, r3
 8008678:	4605      	mov	r5, r0
 800867a:	f001 fa31 	bl	8009ae0 <_localeconv_r>
 800867e:	6803      	ldr	r3, [r0, #0]
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	4618      	mov	r0, r3
 8008684:	f7f7 fda4 	bl	80001d0 <strlen>
 8008688:	2300      	movs	r3, #0
 800868a:	930a      	str	r3, [sp, #40]	; 0x28
 800868c:	f8d8 3000 	ldr.w	r3, [r8]
 8008690:	9005      	str	r0, [sp, #20]
 8008692:	3307      	adds	r3, #7
 8008694:	f023 0307 	bic.w	r3, r3, #7
 8008698:	f103 0208 	add.w	r2, r3, #8
 800869c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086a0:	f8d4 b000 	ldr.w	fp, [r4]
 80086a4:	f8c8 2000 	str.w	r2, [r8]
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086b8:	9307      	str	r3, [sp, #28]
 80086ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80086be:	f04f 32ff 	mov.w	r2, #4294967295
 80086c2:	4ba7      	ldr	r3, [pc, #668]	; (8008960 <_printf_float+0x2f8>)
 80086c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086c8:	f7f8 fa30 	bl	8000b2c <__aeabi_dcmpun>
 80086cc:	bb70      	cbnz	r0, 800872c <_printf_float+0xc4>
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295
 80086d2:	4ba3      	ldr	r3, [pc, #652]	; (8008960 <_printf_float+0x2f8>)
 80086d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086d8:	f7f8 fa0a 	bl	8000af0 <__aeabi_dcmple>
 80086dc:	bb30      	cbnz	r0, 800872c <_printf_float+0xc4>
 80086de:	2200      	movs	r2, #0
 80086e0:	2300      	movs	r3, #0
 80086e2:	4640      	mov	r0, r8
 80086e4:	4649      	mov	r1, r9
 80086e6:	f7f8 f9f9 	bl	8000adc <__aeabi_dcmplt>
 80086ea:	b110      	cbz	r0, 80086f2 <_printf_float+0x8a>
 80086ec:	232d      	movs	r3, #45	; 0x2d
 80086ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f2:	4a9c      	ldr	r2, [pc, #624]	; (8008964 <_printf_float+0x2fc>)
 80086f4:	4b9c      	ldr	r3, [pc, #624]	; (8008968 <_printf_float+0x300>)
 80086f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80086fa:	bf8c      	ite	hi
 80086fc:	4690      	movhi	r8, r2
 80086fe:	4698      	movls	r8, r3
 8008700:	2303      	movs	r3, #3
 8008702:	f02b 0204 	bic.w	r2, fp, #4
 8008706:	6123      	str	r3, [r4, #16]
 8008708:	6022      	str	r2, [r4, #0]
 800870a:	f04f 0900 	mov.w	r9, #0
 800870e:	9700      	str	r7, [sp, #0]
 8008710:	4633      	mov	r3, r6
 8008712:	aa0b      	add	r2, sp, #44	; 0x2c
 8008714:	4621      	mov	r1, r4
 8008716:	4628      	mov	r0, r5
 8008718:	f000 f9e6 	bl	8008ae8 <_printf_common>
 800871c:	3001      	adds	r0, #1
 800871e:	f040 808d 	bne.w	800883c <_printf_float+0x1d4>
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	b00d      	add	sp, #52	; 0x34
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	4640      	mov	r0, r8
 8008732:	4649      	mov	r1, r9
 8008734:	f7f8 f9fa 	bl	8000b2c <__aeabi_dcmpun>
 8008738:	b110      	cbz	r0, 8008740 <_printf_float+0xd8>
 800873a:	4a8c      	ldr	r2, [pc, #560]	; (800896c <_printf_float+0x304>)
 800873c:	4b8c      	ldr	r3, [pc, #560]	; (8008970 <_printf_float+0x308>)
 800873e:	e7da      	b.n	80086f6 <_printf_float+0x8e>
 8008740:	6861      	ldr	r1, [r4, #4]
 8008742:	1c4b      	adds	r3, r1, #1
 8008744:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008748:	a80a      	add	r0, sp, #40	; 0x28
 800874a:	d13e      	bne.n	80087ca <_printf_float+0x162>
 800874c:	2306      	movs	r3, #6
 800874e:	6063      	str	r3, [r4, #4]
 8008750:	2300      	movs	r3, #0
 8008752:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008756:	ab09      	add	r3, sp, #36	; 0x24
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	ec49 8b10 	vmov	d0, r8, r9
 800875e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008762:	6022      	str	r2, [r4, #0]
 8008764:	f8cd a004 	str.w	sl, [sp, #4]
 8008768:	6861      	ldr	r1, [r4, #4]
 800876a:	4628      	mov	r0, r5
 800876c:	f7ff fee8 	bl	8008540 <__cvt>
 8008770:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008774:	2b47      	cmp	r3, #71	; 0x47
 8008776:	4680      	mov	r8, r0
 8008778:	d109      	bne.n	800878e <_printf_float+0x126>
 800877a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877c:	1cd8      	adds	r0, r3, #3
 800877e:	db02      	blt.n	8008786 <_printf_float+0x11e>
 8008780:	6862      	ldr	r2, [r4, #4]
 8008782:	4293      	cmp	r3, r2
 8008784:	dd47      	ble.n	8008816 <_printf_float+0x1ae>
 8008786:	f1aa 0a02 	sub.w	sl, sl, #2
 800878a:	fa5f fa8a 	uxtb.w	sl, sl
 800878e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008792:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008794:	d824      	bhi.n	80087e0 <_printf_float+0x178>
 8008796:	3901      	subs	r1, #1
 8008798:	4652      	mov	r2, sl
 800879a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800879e:	9109      	str	r1, [sp, #36]	; 0x24
 80087a0:	f7ff ff2f 	bl	8008602 <__exponent>
 80087a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a6:	1813      	adds	r3, r2, r0
 80087a8:	2a01      	cmp	r2, #1
 80087aa:	4681      	mov	r9, r0
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	dc02      	bgt.n	80087b6 <_printf_float+0x14e>
 80087b0:	6822      	ldr	r2, [r4, #0]
 80087b2:	07d1      	lsls	r1, r2, #31
 80087b4:	d501      	bpl.n	80087ba <_printf_float+0x152>
 80087b6:	3301      	adds	r3, #1
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0a5      	beq.n	800870e <_printf_float+0xa6>
 80087c2:	232d      	movs	r3, #45	; 0x2d
 80087c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c8:	e7a1      	b.n	800870e <_printf_float+0xa6>
 80087ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80087ce:	f000 8177 	beq.w	8008ac0 <_printf_float+0x458>
 80087d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80087d6:	d1bb      	bne.n	8008750 <_printf_float+0xe8>
 80087d8:	2900      	cmp	r1, #0
 80087da:	d1b9      	bne.n	8008750 <_printf_float+0xe8>
 80087dc:	2301      	movs	r3, #1
 80087de:	e7b6      	b.n	800874e <_printf_float+0xe6>
 80087e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80087e4:	d119      	bne.n	800881a <_printf_float+0x1b2>
 80087e6:	2900      	cmp	r1, #0
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	dd0c      	ble.n	8008806 <_printf_float+0x19e>
 80087ec:	6121      	str	r1, [r4, #16]
 80087ee:	b913      	cbnz	r3, 80087f6 <_printf_float+0x18e>
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	07d2      	lsls	r2, r2, #31
 80087f4:	d502      	bpl.n	80087fc <_printf_float+0x194>
 80087f6:	3301      	adds	r3, #1
 80087f8:	440b      	add	r3, r1
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8008800:	f04f 0900 	mov.w	r9, #0
 8008804:	e7d9      	b.n	80087ba <_printf_float+0x152>
 8008806:	b913      	cbnz	r3, 800880e <_printf_float+0x1a6>
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	07d0      	lsls	r0, r2, #31
 800880c:	d501      	bpl.n	8008812 <_printf_float+0x1aa>
 800880e:	3302      	adds	r3, #2
 8008810:	e7f3      	b.n	80087fa <_printf_float+0x192>
 8008812:	2301      	movs	r3, #1
 8008814:	e7f1      	b.n	80087fa <_printf_float+0x192>
 8008816:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800881a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800881e:	4293      	cmp	r3, r2
 8008820:	db05      	blt.n	800882e <_printf_float+0x1c6>
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	6123      	str	r3, [r4, #16]
 8008826:	07d1      	lsls	r1, r2, #31
 8008828:	d5e8      	bpl.n	80087fc <_printf_float+0x194>
 800882a:	3301      	adds	r3, #1
 800882c:	e7e5      	b.n	80087fa <_printf_float+0x192>
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfd4      	ite	le
 8008832:	f1c3 0302 	rsble	r3, r3, #2
 8008836:	2301      	movgt	r3, #1
 8008838:	4413      	add	r3, r2
 800883a:	e7de      	b.n	80087fa <_printf_float+0x192>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	055a      	lsls	r2, r3, #21
 8008840:	d407      	bmi.n	8008852 <_printf_float+0x1ea>
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	4642      	mov	r2, r8
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	d12b      	bne.n	80088a8 <_printf_float+0x240>
 8008850:	e767      	b.n	8008722 <_printf_float+0xba>
 8008852:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008856:	f240 80dc 	bls.w	8008a12 <_printf_float+0x3aa>
 800885a:	2200      	movs	r2, #0
 800885c:	2300      	movs	r3, #0
 800885e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008862:	f7f8 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8008866:	2800      	cmp	r0, #0
 8008868:	d033      	beq.n	80088d2 <_printf_float+0x26a>
 800886a:	2301      	movs	r3, #1
 800886c:	4a41      	ldr	r2, [pc, #260]	; (8008974 <_printf_float+0x30c>)
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	f43f af54 	beq.w	8008722 <_printf_float+0xba>
 800887a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887e:	429a      	cmp	r2, r3
 8008880:	db02      	blt.n	8008888 <_printf_float+0x220>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	07d8      	lsls	r0, r3, #31
 8008886:	d50f      	bpl.n	80088a8 <_printf_float+0x240>
 8008888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800888c:	4631      	mov	r1, r6
 800888e:	4628      	mov	r0, r5
 8008890:	47b8      	blx	r7
 8008892:	3001      	adds	r0, #1
 8008894:	f43f af45 	beq.w	8008722 <_printf_float+0xba>
 8008898:	f04f 0800 	mov.w	r8, #0
 800889c:	f104 091a 	add.w	r9, r4, #26
 80088a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a2:	3b01      	subs	r3, #1
 80088a4:	4543      	cmp	r3, r8
 80088a6:	dc09      	bgt.n	80088bc <_printf_float+0x254>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	079b      	lsls	r3, r3, #30
 80088ac:	f100 8103 	bmi.w	8008ab6 <_printf_float+0x44e>
 80088b0:	68e0      	ldr	r0, [r4, #12]
 80088b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b4:	4298      	cmp	r0, r3
 80088b6:	bfb8      	it	lt
 80088b8:	4618      	movlt	r0, r3
 80088ba:	e734      	b.n	8008726 <_printf_float+0xbe>
 80088bc:	2301      	movs	r3, #1
 80088be:	464a      	mov	r2, r9
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	f43f af2b 	beq.w	8008722 <_printf_float+0xba>
 80088cc:	f108 0801 	add.w	r8, r8, #1
 80088d0:	e7e6      	b.n	80088a0 <_printf_float+0x238>
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dc2b      	bgt.n	8008930 <_printf_float+0x2c8>
 80088d8:	2301      	movs	r3, #1
 80088da:	4a26      	ldr	r2, [pc, #152]	; (8008974 <_printf_float+0x30c>)
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af1d 	beq.w	8008722 <_printf_float+0xba>
 80088e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ea:	b923      	cbnz	r3, 80088f6 <_printf_float+0x28e>
 80088ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ee:	b913      	cbnz	r3, 80088f6 <_printf_float+0x28e>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	07d9      	lsls	r1, r3, #31
 80088f4:	d5d8      	bpl.n	80088a8 <_printf_float+0x240>
 80088f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f af0e 	beq.w	8008722 <_printf_float+0xba>
 8008906:	f04f 0900 	mov.w	r9, #0
 800890a:	f104 0a1a 	add.w	sl, r4, #26
 800890e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008910:	425b      	negs	r3, r3
 8008912:	454b      	cmp	r3, r9
 8008914:	dc01      	bgt.n	800891a <_printf_float+0x2b2>
 8008916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008918:	e794      	b.n	8008844 <_printf_float+0x1dc>
 800891a:	2301      	movs	r3, #1
 800891c:	4652      	mov	r2, sl
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	f43f aefc 	beq.w	8008722 <_printf_float+0xba>
 800892a:	f109 0901 	add.w	r9, r9, #1
 800892e:	e7ee      	b.n	800890e <_printf_float+0x2a6>
 8008930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008934:	429a      	cmp	r2, r3
 8008936:	bfa8      	it	ge
 8008938:	461a      	movge	r2, r3
 800893a:	2a00      	cmp	r2, #0
 800893c:	4691      	mov	r9, r2
 800893e:	dd07      	ble.n	8008950 <_printf_float+0x2e8>
 8008940:	4613      	mov	r3, r2
 8008942:	4631      	mov	r1, r6
 8008944:	4642      	mov	r2, r8
 8008946:	4628      	mov	r0, r5
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	f43f aee9 	beq.w	8008722 <_printf_float+0xba>
 8008950:	f104 031a 	add.w	r3, r4, #26
 8008954:	f04f 0b00 	mov.w	fp, #0
 8008958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895c:	9306      	str	r3, [sp, #24]
 800895e:	e015      	b.n	800898c <_printf_float+0x324>
 8008960:	7fefffff 	.word	0x7fefffff
 8008964:	0800a4e8 	.word	0x0800a4e8
 8008968:	0800a4e4 	.word	0x0800a4e4
 800896c:	0800a4f0 	.word	0x0800a4f0
 8008970:	0800a4ec 	.word	0x0800a4ec
 8008974:	0800a4f4 	.word	0x0800a4f4
 8008978:	2301      	movs	r3, #1
 800897a:	9a06      	ldr	r2, [sp, #24]
 800897c:	4631      	mov	r1, r6
 800897e:	4628      	mov	r0, r5
 8008980:	47b8      	blx	r7
 8008982:	3001      	adds	r0, #1
 8008984:	f43f aecd 	beq.w	8008722 <_printf_float+0xba>
 8008988:	f10b 0b01 	add.w	fp, fp, #1
 800898c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008990:	ebaa 0309 	sub.w	r3, sl, r9
 8008994:	455b      	cmp	r3, fp
 8008996:	dcef      	bgt.n	8008978 <_printf_float+0x310>
 8008998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800899c:	429a      	cmp	r2, r3
 800899e:	44d0      	add	r8, sl
 80089a0:	db15      	blt.n	80089ce <_printf_float+0x366>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	07da      	lsls	r2, r3, #31
 80089a6:	d412      	bmi.n	80089ce <_printf_float+0x366>
 80089a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ac:	eba3 020a 	sub.w	r2, r3, sl
 80089b0:	eba3 0a01 	sub.w	sl, r3, r1
 80089b4:	4592      	cmp	sl, r2
 80089b6:	bfa8      	it	ge
 80089b8:	4692      	movge	sl, r2
 80089ba:	f1ba 0f00 	cmp.w	sl, #0
 80089be:	dc0e      	bgt.n	80089de <_printf_float+0x376>
 80089c0:	f04f 0800 	mov.w	r8, #0
 80089c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089c8:	f104 091a 	add.w	r9, r4, #26
 80089cc:	e019      	b.n	8008a02 <_printf_float+0x39a>
 80089ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d2:	4631      	mov	r1, r6
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b8      	blx	r7
 80089d8:	3001      	adds	r0, #1
 80089da:	d1e5      	bne.n	80089a8 <_printf_float+0x340>
 80089dc:	e6a1      	b.n	8008722 <_printf_float+0xba>
 80089de:	4653      	mov	r3, sl
 80089e0:	4642      	mov	r2, r8
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	d1e9      	bne.n	80089c0 <_printf_float+0x358>
 80089ec:	e699      	b.n	8008722 <_printf_float+0xba>
 80089ee:	2301      	movs	r3, #1
 80089f0:	464a      	mov	r2, r9
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f ae92 	beq.w	8008722 <_printf_float+0xba>
 80089fe:	f108 0801 	add.w	r8, r8, #1
 8008a02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	eba3 030a 	sub.w	r3, r3, sl
 8008a0c:	4543      	cmp	r3, r8
 8008a0e:	dcee      	bgt.n	80089ee <_printf_float+0x386>
 8008a10:	e74a      	b.n	80088a8 <_printf_float+0x240>
 8008a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a14:	2a01      	cmp	r2, #1
 8008a16:	dc01      	bgt.n	8008a1c <_printf_float+0x3b4>
 8008a18:	07db      	lsls	r3, r3, #31
 8008a1a:	d53a      	bpl.n	8008a92 <_printf_float+0x42a>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	4642      	mov	r2, r8
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f ae7b 	beq.w	8008722 <_printf_float+0xba>
 8008a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a30:	4631      	mov	r1, r6
 8008a32:	4628      	mov	r0, r5
 8008a34:	47b8      	blx	r7
 8008a36:	3001      	adds	r0, #1
 8008a38:	f108 0801 	add.w	r8, r8, #1
 8008a3c:	f43f ae71 	beq.w	8008722 <_printf_float+0xba>
 8008a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a42:	2200      	movs	r2, #0
 8008a44:	f103 3aff 	add.w	sl, r3, #4294967295
 8008a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f7f8 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a52:	b9c8      	cbnz	r0, 8008a88 <_printf_float+0x420>
 8008a54:	4653      	mov	r3, sl
 8008a56:	4642      	mov	r2, r8
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b8      	blx	r7
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d10e      	bne.n	8008a80 <_printf_float+0x418>
 8008a62:	e65e      	b.n	8008722 <_printf_float+0xba>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4652      	mov	r2, sl
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b8      	blx	r7
 8008a6e:	3001      	adds	r0, #1
 8008a70:	f43f ae57 	beq.w	8008722 <_printf_float+0xba>
 8008a74:	f108 0801 	add.w	r8, r8, #1
 8008a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	4543      	cmp	r3, r8
 8008a7e:	dcf1      	bgt.n	8008a64 <_printf_float+0x3fc>
 8008a80:	464b      	mov	r3, r9
 8008a82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a86:	e6de      	b.n	8008846 <_printf_float+0x1de>
 8008a88:	f04f 0800 	mov.w	r8, #0
 8008a8c:	f104 0a1a 	add.w	sl, r4, #26
 8008a90:	e7f2      	b.n	8008a78 <_printf_float+0x410>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e7df      	b.n	8008a56 <_printf_float+0x3ee>
 8008a96:	2301      	movs	r3, #1
 8008a98:	464a      	mov	r2, r9
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	f43f ae3e 	beq.w	8008722 <_printf_float+0xba>
 8008aa6:	f108 0801 	add.w	r8, r8, #1
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aae:	1a9b      	subs	r3, r3, r2
 8008ab0:	4543      	cmp	r3, r8
 8008ab2:	dcf0      	bgt.n	8008a96 <_printf_float+0x42e>
 8008ab4:	e6fc      	b.n	80088b0 <_printf_float+0x248>
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	f104 0919 	add.w	r9, r4, #25
 8008abe:	e7f4      	b.n	8008aaa <_printf_float+0x442>
 8008ac0:	2900      	cmp	r1, #0
 8008ac2:	f43f ae8b 	beq.w	80087dc <_printf_float+0x174>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008acc:	ab09      	add	r3, sp, #36	; 0x24
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	ec49 8b10 	vmov	d0, r8, r9
 8008ad4:	6022      	str	r2, [r4, #0]
 8008ad6:	f8cd a004 	str.w	sl, [sp, #4]
 8008ada:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f7ff fd2e 	bl	8008540 <__cvt>
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	e648      	b.n	800877a <_printf_float+0x112>

08008ae8 <_printf_common>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	4691      	mov	r9, r2
 8008aee:	461f      	mov	r7, r3
 8008af0:	688a      	ldr	r2, [r1, #8]
 8008af2:	690b      	ldr	r3, [r1, #16]
 8008af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	bfb8      	it	lt
 8008afc:	4613      	movlt	r3, r2
 8008afe:	f8c9 3000 	str.w	r3, [r9]
 8008b02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b06:	4606      	mov	r6, r0
 8008b08:	460c      	mov	r4, r1
 8008b0a:	b112      	cbz	r2, 8008b12 <_printf_common+0x2a>
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	f8c9 3000 	str.w	r3, [r9]
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	0699      	lsls	r1, r3, #26
 8008b16:	bf42      	ittt	mi
 8008b18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b1c:	3302      	addmi	r3, #2
 8008b1e:	f8c9 3000 	strmi.w	r3, [r9]
 8008b22:	6825      	ldr	r5, [r4, #0]
 8008b24:	f015 0506 	ands.w	r5, r5, #6
 8008b28:	d107      	bne.n	8008b3a <_printf_common+0x52>
 8008b2a:	f104 0a19 	add.w	sl, r4, #25
 8008b2e:	68e3      	ldr	r3, [r4, #12]
 8008b30:	f8d9 2000 	ldr.w	r2, [r9]
 8008b34:	1a9b      	subs	r3, r3, r2
 8008b36:	42ab      	cmp	r3, r5
 8008b38:	dc28      	bgt.n	8008b8c <_printf_common+0xa4>
 8008b3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b3e:	6822      	ldr	r2, [r4, #0]
 8008b40:	3300      	adds	r3, #0
 8008b42:	bf18      	it	ne
 8008b44:	2301      	movne	r3, #1
 8008b46:	0692      	lsls	r2, r2, #26
 8008b48:	d42d      	bmi.n	8008ba6 <_printf_common+0xbe>
 8008b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b4e:	4639      	mov	r1, r7
 8008b50:	4630      	mov	r0, r6
 8008b52:	47c0      	blx	r8
 8008b54:	3001      	adds	r0, #1
 8008b56:	d020      	beq.n	8008b9a <_printf_common+0xb2>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	68e5      	ldr	r5, [r4, #12]
 8008b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b60:	f003 0306 	and.w	r3, r3, #6
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	bf08      	it	eq
 8008b68:	1aad      	subeq	r5, r5, r2
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	6922      	ldr	r2, [r4, #16]
 8008b6e:	bf0c      	ite	eq
 8008b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b74:	2500      	movne	r5, #0
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bfc4      	itt	gt
 8008b7a:	1a9b      	subgt	r3, r3, r2
 8008b7c:	18ed      	addgt	r5, r5, r3
 8008b7e:	f04f 0900 	mov.w	r9, #0
 8008b82:	341a      	adds	r4, #26
 8008b84:	454d      	cmp	r5, r9
 8008b86:	d11a      	bne.n	8008bbe <_printf_common+0xd6>
 8008b88:	2000      	movs	r0, #0
 8008b8a:	e008      	b.n	8008b9e <_printf_common+0xb6>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4652      	mov	r2, sl
 8008b90:	4639      	mov	r1, r7
 8008b92:	4630      	mov	r0, r6
 8008b94:	47c0      	blx	r8
 8008b96:	3001      	adds	r0, #1
 8008b98:	d103      	bne.n	8008ba2 <_printf_common+0xba>
 8008b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba2:	3501      	adds	r5, #1
 8008ba4:	e7c3      	b.n	8008b2e <_printf_common+0x46>
 8008ba6:	18e1      	adds	r1, r4, r3
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	2030      	movs	r0, #48	; 0x30
 8008bac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bb0:	4422      	add	r2, r4
 8008bb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bba:	3302      	adds	r3, #2
 8008bbc:	e7c5      	b.n	8008b4a <_printf_common+0x62>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	47c0      	blx	r8
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d0e6      	beq.n	8008b9a <_printf_common+0xb2>
 8008bcc:	f109 0901 	add.w	r9, r9, #1
 8008bd0:	e7d8      	b.n	8008b84 <_printf_common+0x9c>
	...

08008bd4 <_printf_i>:
 8008bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008bdc:	460c      	mov	r4, r1
 8008bde:	7e09      	ldrb	r1, [r1, #24]
 8008be0:	b085      	sub	sp, #20
 8008be2:	296e      	cmp	r1, #110	; 0x6e
 8008be4:	4617      	mov	r7, r2
 8008be6:	4606      	mov	r6, r0
 8008be8:	4698      	mov	r8, r3
 8008bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bec:	f000 80b3 	beq.w	8008d56 <_printf_i+0x182>
 8008bf0:	d822      	bhi.n	8008c38 <_printf_i+0x64>
 8008bf2:	2963      	cmp	r1, #99	; 0x63
 8008bf4:	d036      	beq.n	8008c64 <_printf_i+0x90>
 8008bf6:	d80a      	bhi.n	8008c0e <_printf_i+0x3a>
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	f000 80b9 	beq.w	8008d70 <_printf_i+0x19c>
 8008bfe:	2958      	cmp	r1, #88	; 0x58
 8008c00:	f000 8083 	beq.w	8008d0a <_printf_i+0x136>
 8008c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c0c:	e032      	b.n	8008c74 <_printf_i+0xa0>
 8008c0e:	2964      	cmp	r1, #100	; 0x64
 8008c10:	d001      	beq.n	8008c16 <_printf_i+0x42>
 8008c12:	2969      	cmp	r1, #105	; 0x69
 8008c14:	d1f6      	bne.n	8008c04 <_printf_i+0x30>
 8008c16:	6820      	ldr	r0, [r4, #0]
 8008c18:	6813      	ldr	r3, [r2, #0]
 8008c1a:	0605      	lsls	r5, r0, #24
 8008c1c:	f103 0104 	add.w	r1, r3, #4
 8008c20:	d52a      	bpl.n	8008c78 <_printf_i+0xa4>
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6011      	str	r1, [r2, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da03      	bge.n	8008c32 <_printf_i+0x5e>
 8008c2a:	222d      	movs	r2, #45	; 0x2d
 8008c2c:	425b      	negs	r3, r3
 8008c2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c32:	486f      	ldr	r0, [pc, #444]	; (8008df0 <_printf_i+0x21c>)
 8008c34:	220a      	movs	r2, #10
 8008c36:	e039      	b.n	8008cac <_printf_i+0xd8>
 8008c38:	2973      	cmp	r1, #115	; 0x73
 8008c3a:	f000 809d 	beq.w	8008d78 <_printf_i+0x1a4>
 8008c3e:	d808      	bhi.n	8008c52 <_printf_i+0x7e>
 8008c40:	296f      	cmp	r1, #111	; 0x6f
 8008c42:	d020      	beq.n	8008c86 <_printf_i+0xb2>
 8008c44:	2970      	cmp	r1, #112	; 0x70
 8008c46:	d1dd      	bne.n	8008c04 <_printf_i+0x30>
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	f043 0320 	orr.w	r3, r3, #32
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	e003      	b.n	8008c5a <_printf_i+0x86>
 8008c52:	2975      	cmp	r1, #117	; 0x75
 8008c54:	d017      	beq.n	8008c86 <_printf_i+0xb2>
 8008c56:	2978      	cmp	r1, #120	; 0x78
 8008c58:	d1d4      	bne.n	8008c04 <_printf_i+0x30>
 8008c5a:	2378      	movs	r3, #120	; 0x78
 8008c5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c60:	4864      	ldr	r0, [pc, #400]	; (8008df4 <_printf_i+0x220>)
 8008c62:	e055      	b.n	8008d10 <_printf_i+0x13c>
 8008c64:	6813      	ldr	r3, [r2, #0]
 8008c66:	1d19      	adds	r1, r3, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6011      	str	r1, [r2, #0]
 8008c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c74:	2301      	movs	r3, #1
 8008c76:	e08c      	b.n	8008d92 <_printf_i+0x1be>
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6011      	str	r1, [r2, #0]
 8008c7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c80:	bf18      	it	ne
 8008c82:	b21b      	sxthne	r3, r3
 8008c84:	e7cf      	b.n	8008c26 <_printf_i+0x52>
 8008c86:	6813      	ldr	r3, [r2, #0]
 8008c88:	6825      	ldr	r5, [r4, #0]
 8008c8a:	1d18      	adds	r0, r3, #4
 8008c8c:	6010      	str	r0, [r2, #0]
 8008c8e:	0628      	lsls	r0, r5, #24
 8008c90:	d501      	bpl.n	8008c96 <_printf_i+0xc2>
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	e002      	b.n	8008c9c <_printf_i+0xc8>
 8008c96:	0668      	lsls	r0, r5, #25
 8008c98:	d5fb      	bpl.n	8008c92 <_printf_i+0xbe>
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	4854      	ldr	r0, [pc, #336]	; (8008df0 <_printf_i+0x21c>)
 8008c9e:	296f      	cmp	r1, #111	; 0x6f
 8008ca0:	bf14      	ite	ne
 8008ca2:	220a      	movne	r2, #10
 8008ca4:	2208      	moveq	r2, #8
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cac:	6865      	ldr	r5, [r4, #4]
 8008cae:	60a5      	str	r5, [r4, #8]
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	f2c0 8095 	blt.w	8008de0 <_printf_i+0x20c>
 8008cb6:	6821      	ldr	r1, [r4, #0]
 8008cb8:	f021 0104 	bic.w	r1, r1, #4
 8008cbc:	6021      	str	r1, [r4, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d13d      	bne.n	8008d3e <_printf_i+0x16a>
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	f040 808e 	bne.w	8008de4 <_printf_i+0x210>
 8008cc8:	4665      	mov	r5, ip
 8008cca:	2a08      	cmp	r2, #8
 8008ccc:	d10b      	bne.n	8008ce6 <_printf_i+0x112>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	07db      	lsls	r3, r3, #31
 8008cd2:	d508      	bpl.n	8008ce6 <_printf_i+0x112>
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	6862      	ldr	r2, [r4, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	bfde      	ittt	le
 8008cdc:	2330      	movle	r3, #48	; 0x30
 8008cde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ce2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ce6:	ebac 0305 	sub.w	r3, ip, r5
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	f8cd 8000 	str.w	r8, [sp]
 8008cf0:	463b      	mov	r3, r7
 8008cf2:	aa03      	add	r2, sp, #12
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff fef6 	bl	8008ae8 <_printf_common>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d14d      	bne.n	8008d9c <_printf_i+0x1c8>
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	b005      	add	sp, #20
 8008d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d0a:	4839      	ldr	r0, [pc, #228]	; (8008df0 <_printf_i+0x21c>)
 8008d0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d10:	6813      	ldr	r3, [r2, #0]
 8008d12:	6821      	ldr	r1, [r4, #0]
 8008d14:	1d1d      	adds	r5, r3, #4
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6015      	str	r5, [r2, #0]
 8008d1a:	060a      	lsls	r2, r1, #24
 8008d1c:	d50b      	bpl.n	8008d36 <_printf_i+0x162>
 8008d1e:	07ca      	lsls	r2, r1, #31
 8008d20:	bf44      	itt	mi
 8008d22:	f041 0120 	orrmi.w	r1, r1, #32
 8008d26:	6021      	strmi	r1, [r4, #0]
 8008d28:	b91b      	cbnz	r3, 8008d32 <_printf_i+0x15e>
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	f022 0220 	bic.w	r2, r2, #32
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	2210      	movs	r2, #16
 8008d34:	e7b7      	b.n	8008ca6 <_printf_i+0xd2>
 8008d36:	064d      	lsls	r5, r1, #25
 8008d38:	bf48      	it	mi
 8008d3a:	b29b      	uxthmi	r3, r3
 8008d3c:	e7ef      	b.n	8008d1e <_printf_i+0x14a>
 8008d3e:	4665      	mov	r5, ip
 8008d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d44:	fb02 3311 	mls	r3, r2, r1, r3
 8008d48:	5cc3      	ldrb	r3, [r0, r3]
 8008d4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d4e:	460b      	mov	r3, r1
 8008d50:	2900      	cmp	r1, #0
 8008d52:	d1f5      	bne.n	8008d40 <_printf_i+0x16c>
 8008d54:	e7b9      	b.n	8008cca <_printf_i+0xf6>
 8008d56:	6813      	ldr	r3, [r2, #0]
 8008d58:	6825      	ldr	r5, [r4, #0]
 8008d5a:	6961      	ldr	r1, [r4, #20]
 8008d5c:	1d18      	adds	r0, r3, #4
 8008d5e:	6010      	str	r0, [r2, #0]
 8008d60:	0628      	lsls	r0, r5, #24
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	d501      	bpl.n	8008d6a <_printf_i+0x196>
 8008d66:	6019      	str	r1, [r3, #0]
 8008d68:	e002      	b.n	8008d70 <_printf_i+0x19c>
 8008d6a:	066a      	lsls	r2, r5, #25
 8008d6c:	d5fb      	bpl.n	8008d66 <_printf_i+0x192>
 8008d6e:	8019      	strh	r1, [r3, #0]
 8008d70:	2300      	movs	r3, #0
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	4665      	mov	r5, ip
 8008d76:	e7b9      	b.n	8008cec <_printf_i+0x118>
 8008d78:	6813      	ldr	r3, [r2, #0]
 8008d7a:	1d19      	adds	r1, r3, #4
 8008d7c:	6011      	str	r1, [r2, #0]
 8008d7e:	681d      	ldr	r5, [r3, #0]
 8008d80:	6862      	ldr	r2, [r4, #4]
 8008d82:	2100      	movs	r1, #0
 8008d84:	4628      	mov	r0, r5
 8008d86:	f7f7 fa2b 	bl	80001e0 <memchr>
 8008d8a:	b108      	cbz	r0, 8008d90 <_printf_i+0x1bc>
 8008d8c:	1b40      	subs	r0, r0, r5
 8008d8e:	6060      	str	r0, [r4, #4]
 8008d90:	6863      	ldr	r3, [r4, #4]
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	2300      	movs	r3, #0
 8008d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9a:	e7a7      	b.n	8008cec <_printf_i+0x118>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	462a      	mov	r2, r5
 8008da0:	4639      	mov	r1, r7
 8008da2:	4630      	mov	r0, r6
 8008da4:	47c0      	blx	r8
 8008da6:	3001      	adds	r0, #1
 8008da8:	d0aa      	beq.n	8008d00 <_printf_i+0x12c>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	079b      	lsls	r3, r3, #30
 8008dae:	d413      	bmi.n	8008dd8 <_printf_i+0x204>
 8008db0:	68e0      	ldr	r0, [r4, #12]
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	4298      	cmp	r0, r3
 8008db6:	bfb8      	it	lt
 8008db8:	4618      	movlt	r0, r3
 8008dba:	e7a3      	b.n	8008d04 <_printf_i+0x130>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	464a      	mov	r2, r9
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	47c0      	blx	r8
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d09a      	beq.n	8008d00 <_printf_i+0x12c>
 8008dca:	3501      	adds	r5, #1
 8008dcc:	68e3      	ldr	r3, [r4, #12]
 8008dce:	9a03      	ldr	r2, [sp, #12]
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	42ab      	cmp	r3, r5
 8008dd4:	dcf2      	bgt.n	8008dbc <_printf_i+0x1e8>
 8008dd6:	e7eb      	b.n	8008db0 <_printf_i+0x1dc>
 8008dd8:	2500      	movs	r5, #0
 8008dda:	f104 0919 	add.w	r9, r4, #25
 8008dde:	e7f5      	b.n	8008dcc <_printf_i+0x1f8>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1ac      	bne.n	8008d3e <_printf_i+0x16a>
 8008de4:	7803      	ldrb	r3, [r0, #0]
 8008de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dee:	e76c      	b.n	8008cca <_printf_i+0xf6>
 8008df0:	0800a4f6 	.word	0x0800a4f6
 8008df4:	0800a507 	.word	0x0800a507

08008df8 <_sbrk_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4c06      	ldr	r4, [pc, #24]	; (8008e14 <_sbrk_r+0x1c>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4605      	mov	r5, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	6023      	str	r3, [r4, #0]
 8008e04:	f7f8 fc16 	bl	8001634 <_sbrk>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_sbrk_r+0x1a>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_sbrk_r+0x1a>
 8008e10:	602b      	str	r3, [r5, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	20001d90 	.word	0x20001d90

08008e18 <siprintf>:
 8008e18:	b40e      	push	{r1, r2, r3}
 8008e1a:	b500      	push	{lr}
 8008e1c:	b09c      	sub	sp, #112	; 0x70
 8008e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e20:	9002      	str	r0, [sp, #8]
 8008e22:	9006      	str	r0, [sp, #24]
 8008e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e28:	4809      	ldr	r0, [pc, #36]	; (8008e50 <siprintf+0x38>)
 8008e2a:	9107      	str	r1, [sp, #28]
 8008e2c:	9104      	str	r1, [sp, #16]
 8008e2e:	4909      	ldr	r1, [pc, #36]	; (8008e54 <siprintf+0x3c>)
 8008e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e34:	9105      	str	r1, [sp, #20]
 8008e36:	6800      	ldr	r0, [r0, #0]
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	a902      	add	r1, sp, #8
 8008e3c:	f001 f9ae 	bl	800a19c <_svfiprintf_r>
 8008e40:	9b02      	ldr	r3, [sp, #8]
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	b01c      	add	sp, #112	; 0x70
 8008e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e4c:	b003      	add	sp, #12
 8008e4e:	4770      	bx	lr
 8008e50:	20000188 	.word	0x20000188
 8008e54:	ffff0208 	.word	0xffff0208

08008e58 <quorem>:
 8008e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	6903      	ldr	r3, [r0, #16]
 8008e5e:	690c      	ldr	r4, [r1, #16]
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	4680      	mov	r8, r0
 8008e64:	f2c0 8082 	blt.w	8008f6c <quorem+0x114>
 8008e68:	3c01      	subs	r4, #1
 8008e6a:	f101 0714 	add.w	r7, r1, #20
 8008e6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008e72:	f100 0614 	add.w	r6, r0, #20
 8008e76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008e7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008e7e:	eb06 030c 	add.w	r3, r6, ip
 8008e82:	3501      	adds	r5, #1
 8008e84:	eb07 090c 	add.w	r9, r7, ip
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e8e:	b395      	cbz	r5, 8008ef6 <quorem+0x9e>
 8008e90:	f04f 0a00 	mov.w	sl, #0
 8008e94:	4638      	mov	r0, r7
 8008e96:	46b6      	mov	lr, r6
 8008e98:	46d3      	mov	fp, sl
 8008e9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e9e:	b293      	uxth	r3, r2
 8008ea0:	fb05 a303 	mla	r3, r5, r3, sl
 8008ea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	ebab 0303 	sub.w	r3, fp, r3
 8008eae:	0c12      	lsrs	r2, r2, #16
 8008eb0:	f8de b000 	ldr.w	fp, [lr]
 8008eb4:	fb05 a202 	mla	r2, r5, r2, sl
 8008eb8:	fa13 f38b 	uxtah	r3, r3, fp
 8008ebc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008ec0:	fa1f fb82 	uxth.w	fp, r2
 8008ec4:	f8de 2000 	ldr.w	r2, [lr]
 8008ec8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed6:	4581      	cmp	r9, r0
 8008ed8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008edc:	f84e 3b04 	str.w	r3, [lr], #4
 8008ee0:	d2db      	bcs.n	8008e9a <quorem+0x42>
 8008ee2:	f856 300c 	ldr.w	r3, [r6, ip]
 8008ee6:	b933      	cbnz	r3, 8008ef6 <quorem+0x9e>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	3b04      	subs	r3, #4
 8008eec:	429e      	cmp	r6, r3
 8008eee:	461a      	mov	r2, r3
 8008ef0:	d330      	bcc.n	8008f54 <quorem+0xfc>
 8008ef2:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	f001 f822 	bl	8009f40 <__mcmp>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	db25      	blt.n	8008f4c <quorem+0xf4>
 8008f00:	3501      	adds	r5, #1
 8008f02:	4630      	mov	r0, r6
 8008f04:	f04f 0c00 	mov.w	ip, #0
 8008f08:	f857 2b04 	ldr.w	r2, [r7], #4
 8008f0c:	f8d0 e000 	ldr.w	lr, [r0]
 8008f10:	b293      	uxth	r3, r2
 8008f12:	ebac 0303 	sub.w	r3, ip, r3
 8008f16:	0c12      	lsrs	r2, r2, #16
 8008f18:	fa13 f38e 	uxtah	r3, r3, lr
 8008f1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f2a:	45b9      	cmp	r9, r7
 8008f2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f30:	f840 3b04 	str.w	r3, [r0], #4
 8008f34:	d2e8      	bcs.n	8008f08 <quorem+0xb0>
 8008f36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008f3e:	b92a      	cbnz	r2, 8008f4c <quorem+0xf4>
 8008f40:	3b04      	subs	r3, #4
 8008f42:	429e      	cmp	r6, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	d30b      	bcc.n	8008f60 <quorem+0x108>
 8008f48:	f8c8 4010 	str.w	r4, [r8, #16]
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	b003      	add	sp, #12
 8008f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	3b04      	subs	r3, #4
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	d1ca      	bne.n	8008ef2 <quorem+0x9a>
 8008f5c:	3c01      	subs	r4, #1
 8008f5e:	e7c5      	b.n	8008eec <quorem+0x94>
 8008f60:	6812      	ldr	r2, [r2, #0]
 8008f62:	3b04      	subs	r3, #4
 8008f64:	2a00      	cmp	r2, #0
 8008f66:	d1ef      	bne.n	8008f48 <quorem+0xf0>
 8008f68:	3c01      	subs	r4, #1
 8008f6a:	e7ea      	b.n	8008f42 <quorem+0xea>
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e7ee      	b.n	8008f4e <quorem+0xf6>

08008f70 <_dtoa_r>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	ec57 6b10 	vmov	r6, r7, d0
 8008f78:	b097      	sub	sp, #92	; 0x5c
 8008f7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f7c:	9106      	str	r1, [sp, #24]
 8008f7e:	4604      	mov	r4, r0
 8008f80:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f82:	9312      	str	r3, [sp, #72]	; 0x48
 8008f84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f88:	e9cd 6700 	strd	r6, r7, [sp]
 8008f8c:	b93d      	cbnz	r5, 8008f9e <_dtoa_r+0x2e>
 8008f8e:	2010      	movs	r0, #16
 8008f90:	f7ff fa16 	bl	80083c0 <malloc>
 8008f94:	6260      	str	r0, [r4, #36]	; 0x24
 8008f96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f9a:	6005      	str	r5, [r0, #0]
 8008f9c:	60c5      	str	r5, [r0, #12]
 8008f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fa0:	6819      	ldr	r1, [r3, #0]
 8008fa2:	b151      	cbz	r1, 8008fba <_dtoa_r+0x4a>
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	604a      	str	r2, [r1, #4]
 8008fa8:	2301      	movs	r3, #1
 8008faa:	4093      	lsls	r3, r2
 8008fac:	608b      	str	r3, [r1, #8]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fde5 	bl	8009b7e <_Bfree>
 8008fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	1e3b      	subs	r3, r7, #0
 8008fbc:	bfbb      	ittet	lt
 8008fbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008fc2:	9301      	strlt	r3, [sp, #4]
 8008fc4:	2300      	movge	r3, #0
 8008fc6:	2201      	movlt	r2, #1
 8008fc8:	bfac      	ite	ge
 8008fca:	f8c8 3000 	strge.w	r3, [r8]
 8008fce:	f8c8 2000 	strlt.w	r2, [r8]
 8008fd2:	4baf      	ldr	r3, [pc, #700]	; (8009290 <_dtoa_r+0x320>)
 8008fd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008fd8:	ea33 0308 	bics.w	r3, r3, r8
 8008fdc:	d114      	bne.n	8009008 <_dtoa_r+0x98>
 8008fde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fe0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	9b00      	ldr	r3, [sp, #0]
 8008fe8:	b923      	cbnz	r3, 8008ff4 <_dtoa_r+0x84>
 8008fea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f000 8542 	beq.w	8009a78 <_dtoa_r+0xb08>
 8008ff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80092a4 <_dtoa_r+0x334>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 8544 	beq.w	8009a88 <_dtoa_r+0xb18>
 8009000:	f10b 0303 	add.w	r3, fp, #3
 8009004:	f000 bd3e 	b.w	8009a84 <_dtoa_r+0xb14>
 8009008:	e9dd 6700 	ldrd	r6, r7, [sp]
 800900c:	2200      	movs	r2, #0
 800900e:	2300      	movs	r3, #0
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8009018:	4681      	mov	r9, r0
 800901a:	b168      	cbz	r0, 8009038 <_dtoa_r+0xc8>
 800901c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800901e:	2301      	movs	r3, #1
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8524 	beq.w	8009a72 <_dtoa_r+0xb02>
 800902a:	4b9a      	ldr	r3, [pc, #616]	; (8009294 <_dtoa_r+0x324>)
 800902c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800902e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	f000 bd28 	b.w	8009a88 <_dtoa_r+0xb18>
 8009038:	aa14      	add	r2, sp, #80	; 0x50
 800903a:	a915      	add	r1, sp, #84	; 0x54
 800903c:	ec47 6b10 	vmov	d0, r6, r7
 8009040:	4620      	mov	r0, r4
 8009042:	f000 fff4 	bl	800a02e <__d2b>
 8009046:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800904a:	9004      	str	r0, [sp, #16]
 800904c:	2d00      	cmp	r5, #0
 800904e:	d07c      	beq.n	800914a <_dtoa_r+0x1da>
 8009050:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009054:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009058:	46b2      	mov	sl, r6
 800905a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800905e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009062:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009066:	2200      	movs	r2, #0
 8009068:	4b8b      	ldr	r3, [pc, #556]	; (8009298 <_dtoa_r+0x328>)
 800906a:	4650      	mov	r0, sl
 800906c:	4659      	mov	r1, fp
 800906e:	f7f7 f90b 	bl	8000288 <__aeabi_dsub>
 8009072:	a381      	add	r3, pc, #516	; (adr r3, 8009278 <_dtoa_r+0x308>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f7f7 fabe 	bl	80005f8 <__aeabi_dmul>
 800907c:	a380      	add	r3, pc, #512	; (adr r3, 8009280 <_dtoa_r+0x310>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f903 	bl	800028c <__adddf3>
 8009086:	4606      	mov	r6, r0
 8009088:	4628      	mov	r0, r5
 800908a:	460f      	mov	r7, r1
 800908c:	f7f7 fa4a 	bl	8000524 <__aeabi_i2d>
 8009090:	a37d      	add	r3, pc, #500	; (adr r3, 8009288 <_dtoa_r+0x318>)
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	f7f7 faaf 	bl	80005f8 <__aeabi_dmul>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4630      	mov	r0, r6
 80090a0:	4639      	mov	r1, r7
 80090a2:	f7f7 f8f3 	bl	800028c <__adddf3>
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	f7f7 fd55 	bl	8000b58 <__aeabi_d2iz>
 80090ae:	2200      	movs	r2, #0
 80090b0:	4682      	mov	sl, r0
 80090b2:	2300      	movs	r3, #0
 80090b4:	4630      	mov	r0, r6
 80090b6:	4639      	mov	r1, r7
 80090b8:	f7f7 fd10 	bl	8000adc <__aeabi_dcmplt>
 80090bc:	b148      	cbz	r0, 80090d2 <_dtoa_r+0x162>
 80090be:	4650      	mov	r0, sl
 80090c0:	f7f7 fa30 	bl	8000524 <__aeabi_i2d>
 80090c4:	4632      	mov	r2, r6
 80090c6:	463b      	mov	r3, r7
 80090c8:	f7f7 fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80090cc:	b908      	cbnz	r0, 80090d2 <_dtoa_r+0x162>
 80090ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090d2:	f1ba 0f16 	cmp.w	sl, #22
 80090d6:	d859      	bhi.n	800918c <_dtoa_r+0x21c>
 80090d8:	4970      	ldr	r1, [pc, #448]	; (800929c <_dtoa_r+0x32c>)
 80090da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80090de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e6:	f7f7 fd17 	bl	8000b18 <__aeabi_dcmpgt>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d050      	beq.n	8009190 <_dtoa_r+0x220>
 80090ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090f2:	2300      	movs	r3, #0
 80090f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80090f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090f8:	1b5d      	subs	r5, r3, r5
 80090fa:	f1b5 0801 	subs.w	r8, r5, #1
 80090fe:	bf49      	itett	mi
 8009100:	f1c5 0301 	rsbmi	r3, r5, #1
 8009104:	2300      	movpl	r3, #0
 8009106:	9305      	strmi	r3, [sp, #20]
 8009108:	f04f 0800 	movmi.w	r8, #0
 800910c:	bf58      	it	pl
 800910e:	9305      	strpl	r3, [sp, #20]
 8009110:	f1ba 0f00 	cmp.w	sl, #0
 8009114:	db3e      	blt.n	8009194 <_dtoa_r+0x224>
 8009116:	2300      	movs	r3, #0
 8009118:	44d0      	add	r8, sl
 800911a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800911e:	9307      	str	r3, [sp, #28]
 8009120:	9b06      	ldr	r3, [sp, #24]
 8009122:	2b09      	cmp	r3, #9
 8009124:	f200 8090 	bhi.w	8009248 <_dtoa_r+0x2d8>
 8009128:	2b05      	cmp	r3, #5
 800912a:	bfc4      	itt	gt
 800912c:	3b04      	subgt	r3, #4
 800912e:	9306      	strgt	r3, [sp, #24]
 8009130:	9b06      	ldr	r3, [sp, #24]
 8009132:	f1a3 0302 	sub.w	r3, r3, #2
 8009136:	bfcc      	ite	gt
 8009138:	2500      	movgt	r5, #0
 800913a:	2501      	movle	r5, #1
 800913c:	2b03      	cmp	r3, #3
 800913e:	f200 808f 	bhi.w	8009260 <_dtoa_r+0x2f0>
 8009142:	e8df f003 	tbb	[pc, r3]
 8009146:	7f7d      	.short	0x7f7d
 8009148:	7131      	.short	0x7131
 800914a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800914e:	441d      	add	r5, r3
 8009150:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009154:	2820      	cmp	r0, #32
 8009156:	dd13      	ble.n	8009180 <_dtoa_r+0x210>
 8009158:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800915c:	9b00      	ldr	r3, [sp, #0]
 800915e:	fa08 f800 	lsl.w	r8, r8, r0
 8009162:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009166:	fa23 f000 	lsr.w	r0, r3, r0
 800916a:	ea48 0000 	orr.w	r0, r8, r0
 800916e:	f7f7 f9c9 	bl	8000504 <__aeabi_ui2d>
 8009172:	2301      	movs	r3, #1
 8009174:	4682      	mov	sl, r0
 8009176:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800917a:	3d01      	subs	r5, #1
 800917c:	9313      	str	r3, [sp, #76]	; 0x4c
 800917e:	e772      	b.n	8009066 <_dtoa_r+0xf6>
 8009180:	9b00      	ldr	r3, [sp, #0]
 8009182:	f1c0 0020 	rsb	r0, r0, #32
 8009186:	fa03 f000 	lsl.w	r0, r3, r0
 800918a:	e7f0      	b.n	800916e <_dtoa_r+0x1fe>
 800918c:	2301      	movs	r3, #1
 800918e:	e7b1      	b.n	80090f4 <_dtoa_r+0x184>
 8009190:	900f      	str	r0, [sp, #60]	; 0x3c
 8009192:	e7b0      	b.n	80090f6 <_dtoa_r+0x186>
 8009194:	9b05      	ldr	r3, [sp, #20]
 8009196:	eba3 030a 	sub.w	r3, r3, sl
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	f1ca 0300 	rsb	r3, sl, #0
 80091a0:	9307      	str	r3, [sp, #28]
 80091a2:	2300      	movs	r3, #0
 80091a4:	930e      	str	r3, [sp, #56]	; 0x38
 80091a6:	e7bb      	b.n	8009120 <_dtoa_r+0x1b0>
 80091a8:	2301      	movs	r3, #1
 80091aa:	930a      	str	r3, [sp, #40]	; 0x28
 80091ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dd59      	ble.n	8009266 <_dtoa_r+0x2f6>
 80091b2:	9302      	str	r3, [sp, #8]
 80091b4:	4699      	mov	r9, r3
 80091b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091b8:	2200      	movs	r2, #0
 80091ba:	6072      	str	r2, [r6, #4]
 80091bc:	2204      	movs	r2, #4
 80091be:	f102 0014 	add.w	r0, r2, #20
 80091c2:	4298      	cmp	r0, r3
 80091c4:	6871      	ldr	r1, [r6, #4]
 80091c6:	d953      	bls.n	8009270 <_dtoa_r+0x300>
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fca4 	bl	8009b16 <_Balloc>
 80091ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d0:	6030      	str	r0, [r6, #0]
 80091d2:	f1b9 0f0e 	cmp.w	r9, #14
 80091d6:	f8d3 b000 	ldr.w	fp, [r3]
 80091da:	f200 80e6 	bhi.w	80093aa <_dtoa_r+0x43a>
 80091de:	2d00      	cmp	r5, #0
 80091e0:	f000 80e3 	beq.w	80093aa <_dtoa_r+0x43a>
 80091e4:	ed9d 7b00 	vldr	d7, [sp]
 80091e8:	f1ba 0f00 	cmp.w	sl, #0
 80091ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80091f0:	dd74      	ble.n	80092dc <_dtoa_r+0x36c>
 80091f2:	4a2a      	ldr	r2, [pc, #168]	; (800929c <_dtoa_r+0x32c>)
 80091f4:	f00a 030f 	and.w	r3, sl, #15
 80091f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091fc:	ed93 7b00 	vldr	d7, [r3]
 8009200:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009204:	06f0      	lsls	r0, r6, #27
 8009206:	ed8d 7b08 	vstr	d7, [sp, #32]
 800920a:	d565      	bpl.n	80092d8 <_dtoa_r+0x368>
 800920c:	4b24      	ldr	r3, [pc, #144]	; (80092a0 <_dtoa_r+0x330>)
 800920e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009212:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009216:	f7f7 fb19 	bl	800084c <__aeabi_ddiv>
 800921a:	e9cd 0100 	strd	r0, r1, [sp]
 800921e:	f006 060f 	and.w	r6, r6, #15
 8009222:	2503      	movs	r5, #3
 8009224:	4f1e      	ldr	r7, [pc, #120]	; (80092a0 <_dtoa_r+0x330>)
 8009226:	e04c      	b.n	80092c2 <_dtoa_r+0x352>
 8009228:	2301      	movs	r3, #1
 800922a:	930a      	str	r3, [sp, #40]	; 0x28
 800922c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800922e:	4453      	add	r3, sl
 8009230:	f103 0901 	add.w	r9, r3, #1
 8009234:	9302      	str	r3, [sp, #8]
 8009236:	464b      	mov	r3, r9
 8009238:	2b01      	cmp	r3, #1
 800923a:	bfb8      	it	lt
 800923c:	2301      	movlt	r3, #1
 800923e:	e7ba      	b.n	80091b6 <_dtoa_r+0x246>
 8009240:	2300      	movs	r3, #0
 8009242:	e7b2      	b.n	80091aa <_dtoa_r+0x23a>
 8009244:	2300      	movs	r3, #0
 8009246:	e7f0      	b.n	800922a <_dtoa_r+0x2ba>
 8009248:	2501      	movs	r5, #1
 800924a:	2300      	movs	r3, #0
 800924c:	9306      	str	r3, [sp, #24]
 800924e:	950a      	str	r5, [sp, #40]	; 0x28
 8009250:	f04f 33ff 	mov.w	r3, #4294967295
 8009254:	9302      	str	r3, [sp, #8]
 8009256:	4699      	mov	r9, r3
 8009258:	2200      	movs	r2, #0
 800925a:	2312      	movs	r3, #18
 800925c:	920b      	str	r2, [sp, #44]	; 0x2c
 800925e:	e7aa      	b.n	80091b6 <_dtoa_r+0x246>
 8009260:	2301      	movs	r3, #1
 8009262:	930a      	str	r3, [sp, #40]	; 0x28
 8009264:	e7f4      	b.n	8009250 <_dtoa_r+0x2e0>
 8009266:	2301      	movs	r3, #1
 8009268:	9302      	str	r3, [sp, #8]
 800926a:	4699      	mov	r9, r3
 800926c:	461a      	mov	r2, r3
 800926e:	e7f5      	b.n	800925c <_dtoa_r+0x2ec>
 8009270:	3101      	adds	r1, #1
 8009272:	6071      	str	r1, [r6, #4]
 8009274:	0052      	lsls	r2, r2, #1
 8009276:	e7a2      	b.n	80091be <_dtoa_r+0x24e>
 8009278:	636f4361 	.word	0x636f4361
 800927c:	3fd287a7 	.word	0x3fd287a7
 8009280:	8b60c8b3 	.word	0x8b60c8b3
 8009284:	3fc68a28 	.word	0x3fc68a28
 8009288:	509f79fb 	.word	0x509f79fb
 800928c:	3fd34413 	.word	0x3fd34413
 8009290:	7ff00000 	.word	0x7ff00000
 8009294:	0800a4f5 	.word	0x0800a4f5
 8009298:	3ff80000 	.word	0x3ff80000
 800929c:	0800a550 	.word	0x0800a550
 80092a0:	0800a528 	.word	0x0800a528
 80092a4:	0800a521 	.word	0x0800a521
 80092a8:	07f1      	lsls	r1, r6, #31
 80092aa:	d508      	bpl.n	80092be <_dtoa_r+0x34e>
 80092ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092b4:	f7f7 f9a0 	bl	80005f8 <__aeabi_dmul>
 80092b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092bc:	3501      	adds	r5, #1
 80092be:	1076      	asrs	r6, r6, #1
 80092c0:	3708      	adds	r7, #8
 80092c2:	2e00      	cmp	r6, #0
 80092c4:	d1f0      	bne.n	80092a8 <_dtoa_r+0x338>
 80092c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092ce:	f7f7 fabd 	bl	800084c <__aeabi_ddiv>
 80092d2:	e9cd 0100 	strd	r0, r1, [sp]
 80092d6:	e01a      	b.n	800930e <_dtoa_r+0x39e>
 80092d8:	2502      	movs	r5, #2
 80092da:	e7a3      	b.n	8009224 <_dtoa_r+0x2b4>
 80092dc:	f000 80a0 	beq.w	8009420 <_dtoa_r+0x4b0>
 80092e0:	f1ca 0600 	rsb	r6, sl, #0
 80092e4:	4b9f      	ldr	r3, [pc, #636]	; (8009564 <_dtoa_r+0x5f4>)
 80092e6:	4fa0      	ldr	r7, [pc, #640]	; (8009568 <_dtoa_r+0x5f8>)
 80092e8:	f006 020f 	and.w	r2, r6, #15
 80092ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092f8:	f7f7 f97e 	bl	80005f8 <__aeabi_dmul>
 80092fc:	e9cd 0100 	strd	r0, r1, [sp]
 8009300:	1136      	asrs	r6, r6, #4
 8009302:	2300      	movs	r3, #0
 8009304:	2502      	movs	r5, #2
 8009306:	2e00      	cmp	r6, #0
 8009308:	d17f      	bne.n	800940a <_dtoa_r+0x49a>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e1      	bne.n	80092d2 <_dtoa_r+0x362>
 800930e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 8087 	beq.w	8009424 <_dtoa_r+0x4b4>
 8009316:	e9dd 6700 	ldrd	r6, r7, [sp]
 800931a:	2200      	movs	r2, #0
 800931c:	4b93      	ldr	r3, [pc, #588]	; (800956c <_dtoa_r+0x5fc>)
 800931e:	4630      	mov	r0, r6
 8009320:	4639      	mov	r1, r7
 8009322:	f7f7 fbdb 	bl	8000adc <__aeabi_dcmplt>
 8009326:	2800      	cmp	r0, #0
 8009328:	d07c      	beq.n	8009424 <_dtoa_r+0x4b4>
 800932a:	f1b9 0f00 	cmp.w	r9, #0
 800932e:	d079      	beq.n	8009424 <_dtoa_r+0x4b4>
 8009330:	9b02      	ldr	r3, [sp, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	dd35      	ble.n	80093a2 <_dtoa_r+0x432>
 8009336:	f10a 33ff 	add.w	r3, sl, #4294967295
 800933a:	9308      	str	r3, [sp, #32]
 800933c:	4639      	mov	r1, r7
 800933e:	2200      	movs	r2, #0
 8009340:	4b8b      	ldr	r3, [pc, #556]	; (8009570 <_dtoa_r+0x600>)
 8009342:	4630      	mov	r0, r6
 8009344:	f7f7 f958 	bl	80005f8 <__aeabi_dmul>
 8009348:	e9cd 0100 	strd	r0, r1, [sp]
 800934c:	9f02      	ldr	r7, [sp, #8]
 800934e:	3501      	adds	r5, #1
 8009350:	4628      	mov	r0, r5
 8009352:	f7f7 f8e7 	bl	8000524 <__aeabi_i2d>
 8009356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800935a:	f7f7 f94d 	bl	80005f8 <__aeabi_dmul>
 800935e:	2200      	movs	r2, #0
 8009360:	4b84      	ldr	r3, [pc, #528]	; (8009574 <_dtoa_r+0x604>)
 8009362:	f7f6 ff93 	bl	800028c <__adddf3>
 8009366:	4605      	mov	r5, r0
 8009368:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800936c:	2f00      	cmp	r7, #0
 800936e:	d15d      	bne.n	800942c <_dtoa_r+0x4bc>
 8009370:	2200      	movs	r2, #0
 8009372:	4b81      	ldr	r3, [pc, #516]	; (8009578 <_dtoa_r+0x608>)
 8009374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009378:	f7f6 ff86 	bl	8000288 <__aeabi_dsub>
 800937c:	462a      	mov	r2, r5
 800937e:	4633      	mov	r3, r6
 8009380:	e9cd 0100 	strd	r0, r1, [sp]
 8009384:	f7f7 fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8009388:	2800      	cmp	r0, #0
 800938a:	f040 8288 	bne.w	800989e <_dtoa_r+0x92e>
 800938e:	462a      	mov	r2, r5
 8009390:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009394:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009398:	f7f7 fba0 	bl	8000adc <__aeabi_dcmplt>
 800939c:	2800      	cmp	r0, #0
 800939e:	f040 827c 	bne.w	800989a <_dtoa_r+0x92a>
 80093a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093a6:	e9cd 2300 	strd	r2, r3, [sp]
 80093aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f2c0 8150 	blt.w	8009652 <_dtoa_r+0x6e2>
 80093b2:	f1ba 0f0e 	cmp.w	sl, #14
 80093b6:	f300 814c 	bgt.w	8009652 <_dtoa_r+0x6e2>
 80093ba:	4b6a      	ldr	r3, [pc, #424]	; (8009564 <_dtoa_r+0x5f4>)
 80093bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093c0:	ed93 7b00 	vldr	d7, [r3]
 80093c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093cc:	f280 80d8 	bge.w	8009580 <_dtoa_r+0x610>
 80093d0:	f1b9 0f00 	cmp.w	r9, #0
 80093d4:	f300 80d4 	bgt.w	8009580 <_dtoa_r+0x610>
 80093d8:	f040 825e 	bne.w	8009898 <_dtoa_r+0x928>
 80093dc:	2200      	movs	r2, #0
 80093de:	4b66      	ldr	r3, [pc, #408]	; (8009578 <_dtoa_r+0x608>)
 80093e0:	ec51 0b17 	vmov	r0, r1, d7
 80093e4:	f7f7 f908 	bl	80005f8 <__aeabi_dmul>
 80093e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ec:	f7f7 fb8a 	bl	8000b04 <__aeabi_dcmpge>
 80093f0:	464f      	mov	r7, r9
 80093f2:	464e      	mov	r6, r9
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f040 8234 	bne.w	8009862 <_dtoa_r+0x8f2>
 80093fa:	2331      	movs	r3, #49	; 0x31
 80093fc:	f10b 0501 	add.w	r5, fp, #1
 8009400:	f88b 3000 	strb.w	r3, [fp]
 8009404:	f10a 0a01 	add.w	sl, sl, #1
 8009408:	e22f      	b.n	800986a <_dtoa_r+0x8fa>
 800940a:	07f2      	lsls	r2, r6, #31
 800940c:	d505      	bpl.n	800941a <_dtoa_r+0x4aa>
 800940e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009412:	f7f7 f8f1 	bl	80005f8 <__aeabi_dmul>
 8009416:	3501      	adds	r5, #1
 8009418:	2301      	movs	r3, #1
 800941a:	1076      	asrs	r6, r6, #1
 800941c:	3708      	adds	r7, #8
 800941e:	e772      	b.n	8009306 <_dtoa_r+0x396>
 8009420:	2502      	movs	r5, #2
 8009422:	e774      	b.n	800930e <_dtoa_r+0x39e>
 8009424:	f8cd a020 	str.w	sl, [sp, #32]
 8009428:	464f      	mov	r7, r9
 800942a:	e791      	b.n	8009350 <_dtoa_r+0x3e0>
 800942c:	4b4d      	ldr	r3, [pc, #308]	; (8009564 <_dtoa_r+0x5f4>)
 800942e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009432:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009438:	2b00      	cmp	r3, #0
 800943a:	d047      	beq.n	80094cc <_dtoa_r+0x55c>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	2000      	movs	r0, #0
 8009442:	494e      	ldr	r1, [pc, #312]	; (800957c <_dtoa_r+0x60c>)
 8009444:	f7f7 fa02 	bl	800084c <__aeabi_ddiv>
 8009448:	462a      	mov	r2, r5
 800944a:	4633      	mov	r3, r6
 800944c:	f7f6 ff1c 	bl	8000288 <__aeabi_dsub>
 8009450:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009454:	465d      	mov	r5, fp
 8009456:	e9dd 0100 	ldrd	r0, r1, [sp]
 800945a:	f7f7 fb7d 	bl	8000b58 <__aeabi_d2iz>
 800945e:	4606      	mov	r6, r0
 8009460:	f7f7 f860 	bl	8000524 <__aeabi_i2d>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800946c:	f7f6 ff0c 	bl	8000288 <__aeabi_dsub>
 8009470:	3630      	adds	r6, #48	; 0x30
 8009472:	f805 6b01 	strb.w	r6, [r5], #1
 8009476:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800947a:	e9cd 0100 	strd	r0, r1, [sp]
 800947e:	f7f7 fb2d 	bl	8000adc <__aeabi_dcmplt>
 8009482:	2800      	cmp	r0, #0
 8009484:	d163      	bne.n	800954e <_dtoa_r+0x5de>
 8009486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800948a:	2000      	movs	r0, #0
 800948c:	4937      	ldr	r1, [pc, #220]	; (800956c <_dtoa_r+0x5fc>)
 800948e:	f7f6 fefb 	bl	8000288 <__aeabi_dsub>
 8009492:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009496:	f7f7 fb21 	bl	8000adc <__aeabi_dcmplt>
 800949a:	2800      	cmp	r0, #0
 800949c:	f040 80b7 	bne.w	800960e <_dtoa_r+0x69e>
 80094a0:	eba5 030b 	sub.w	r3, r5, fp
 80094a4:	429f      	cmp	r7, r3
 80094a6:	f77f af7c 	ble.w	80093a2 <_dtoa_r+0x432>
 80094aa:	2200      	movs	r2, #0
 80094ac:	4b30      	ldr	r3, [pc, #192]	; (8009570 <_dtoa_r+0x600>)
 80094ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094b2:	f7f7 f8a1 	bl	80005f8 <__aeabi_dmul>
 80094b6:	2200      	movs	r2, #0
 80094b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094bc:	4b2c      	ldr	r3, [pc, #176]	; (8009570 <_dtoa_r+0x600>)
 80094be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094c2:	f7f7 f899 	bl	80005f8 <__aeabi_dmul>
 80094c6:	e9cd 0100 	strd	r0, r1, [sp]
 80094ca:	e7c4      	b.n	8009456 <_dtoa_r+0x4e6>
 80094cc:	462a      	mov	r2, r5
 80094ce:	4633      	mov	r3, r6
 80094d0:	f7f7 f892 	bl	80005f8 <__aeabi_dmul>
 80094d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094d8:	eb0b 0507 	add.w	r5, fp, r7
 80094dc:	465e      	mov	r6, fp
 80094de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094e2:	f7f7 fb39 	bl	8000b58 <__aeabi_d2iz>
 80094e6:	4607      	mov	r7, r0
 80094e8:	f7f7 f81c 	bl	8000524 <__aeabi_i2d>
 80094ec:	3730      	adds	r7, #48	; 0x30
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094f6:	f7f6 fec7 	bl	8000288 <__aeabi_dsub>
 80094fa:	f806 7b01 	strb.w	r7, [r6], #1
 80094fe:	42ae      	cmp	r6, r5
 8009500:	e9cd 0100 	strd	r0, r1, [sp]
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	d126      	bne.n	8009558 <_dtoa_r+0x5e8>
 800950a:	4b1c      	ldr	r3, [pc, #112]	; (800957c <_dtoa_r+0x60c>)
 800950c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009510:	f7f6 febc 	bl	800028c <__adddf3>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800951c:	f7f7 fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8009520:	2800      	cmp	r0, #0
 8009522:	d174      	bne.n	800960e <_dtoa_r+0x69e>
 8009524:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009528:	2000      	movs	r0, #0
 800952a:	4914      	ldr	r1, [pc, #80]	; (800957c <_dtoa_r+0x60c>)
 800952c:	f7f6 feac 	bl	8000288 <__aeabi_dsub>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009538:	f7f7 fad0 	bl	8000adc <__aeabi_dcmplt>
 800953c:	2800      	cmp	r0, #0
 800953e:	f43f af30 	beq.w	80093a2 <_dtoa_r+0x432>
 8009542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009546:	2b30      	cmp	r3, #48	; 0x30
 8009548:	f105 32ff 	add.w	r2, r5, #4294967295
 800954c:	d002      	beq.n	8009554 <_dtoa_r+0x5e4>
 800954e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009552:	e04a      	b.n	80095ea <_dtoa_r+0x67a>
 8009554:	4615      	mov	r5, r2
 8009556:	e7f4      	b.n	8009542 <_dtoa_r+0x5d2>
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <_dtoa_r+0x600>)
 800955a:	f7f7 f84d 	bl	80005f8 <__aeabi_dmul>
 800955e:	e9cd 0100 	strd	r0, r1, [sp]
 8009562:	e7bc      	b.n	80094de <_dtoa_r+0x56e>
 8009564:	0800a550 	.word	0x0800a550
 8009568:	0800a528 	.word	0x0800a528
 800956c:	3ff00000 	.word	0x3ff00000
 8009570:	40240000 	.word	0x40240000
 8009574:	401c0000 	.word	0x401c0000
 8009578:	40140000 	.word	0x40140000
 800957c:	3fe00000 	.word	0x3fe00000
 8009580:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009584:	465d      	mov	r5, fp
 8009586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800958a:	4630      	mov	r0, r6
 800958c:	4639      	mov	r1, r7
 800958e:	f7f7 f95d 	bl	800084c <__aeabi_ddiv>
 8009592:	f7f7 fae1 	bl	8000b58 <__aeabi_d2iz>
 8009596:	4680      	mov	r8, r0
 8009598:	f7f6 ffc4 	bl	8000524 <__aeabi_i2d>
 800959c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095a0:	f7f7 f82a 	bl	80005f8 <__aeabi_dmul>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4630      	mov	r0, r6
 80095aa:	4639      	mov	r1, r7
 80095ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80095b0:	f7f6 fe6a 	bl	8000288 <__aeabi_dsub>
 80095b4:	f805 6b01 	strb.w	r6, [r5], #1
 80095b8:	eba5 060b 	sub.w	r6, r5, fp
 80095bc:	45b1      	cmp	r9, r6
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	d139      	bne.n	8009638 <_dtoa_r+0x6c8>
 80095c4:	f7f6 fe62 	bl	800028c <__adddf3>
 80095c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095cc:	4606      	mov	r6, r0
 80095ce:	460f      	mov	r7, r1
 80095d0:	f7f7 faa2 	bl	8000b18 <__aeabi_dcmpgt>
 80095d4:	b9c8      	cbnz	r0, 800960a <_dtoa_r+0x69a>
 80095d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095da:	4630      	mov	r0, r6
 80095dc:	4639      	mov	r1, r7
 80095de:	f7f7 fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 80095e2:	b110      	cbz	r0, 80095ea <_dtoa_r+0x67a>
 80095e4:	f018 0f01 	tst.w	r8, #1
 80095e8:	d10f      	bne.n	800960a <_dtoa_r+0x69a>
 80095ea:	9904      	ldr	r1, [sp, #16]
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fac6 	bl	8009b7e <_Bfree>
 80095f2:	2300      	movs	r3, #0
 80095f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095f6:	702b      	strb	r3, [r5, #0]
 80095f8:	f10a 0301 	add.w	r3, sl, #1
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 8241 	beq.w	8009a88 <_dtoa_r+0xb18>
 8009606:	601d      	str	r5, [r3, #0]
 8009608:	e23e      	b.n	8009a88 <_dtoa_r+0xb18>
 800960a:	f8cd a020 	str.w	sl, [sp, #32]
 800960e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009612:	2a39      	cmp	r2, #57	; 0x39
 8009614:	f105 33ff 	add.w	r3, r5, #4294967295
 8009618:	d108      	bne.n	800962c <_dtoa_r+0x6bc>
 800961a:	459b      	cmp	fp, r3
 800961c:	d10a      	bne.n	8009634 <_dtoa_r+0x6c4>
 800961e:	9b08      	ldr	r3, [sp, #32]
 8009620:	3301      	adds	r3, #1
 8009622:	9308      	str	r3, [sp, #32]
 8009624:	2330      	movs	r3, #48	; 0x30
 8009626:	f88b 3000 	strb.w	r3, [fp]
 800962a:	465b      	mov	r3, fp
 800962c:	781a      	ldrb	r2, [r3, #0]
 800962e:	3201      	adds	r2, #1
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	e78c      	b.n	800954e <_dtoa_r+0x5de>
 8009634:	461d      	mov	r5, r3
 8009636:	e7ea      	b.n	800960e <_dtoa_r+0x69e>
 8009638:	2200      	movs	r2, #0
 800963a:	4b9b      	ldr	r3, [pc, #620]	; (80098a8 <_dtoa_r+0x938>)
 800963c:	f7f6 ffdc 	bl	80005f8 <__aeabi_dmul>
 8009640:	2200      	movs	r2, #0
 8009642:	2300      	movs	r3, #0
 8009644:	4606      	mov	r6, r0
 8009646:	460f      	mov	r7, r1
 8009648:	f7f7 fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800964c:	2800      	cmp	r0, #0
 800964e:	d09a      	beq.n	8009586 <_dtoa_r+0x616>
 8009650:	e7cb      	b.n	80095ea <_dtoa_r+0x67a>
 8009652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009654:	2a00      	cmp	r2, #0
 8009656:	f000 808b 	beq.w	8009770 <_dtoa_r+0x800>
 800965a:	9a06      	ldr	r2, [sp, #24]
 800965c:	2a01      	cmp	r2, #1
 800965e:	dc6e      	bgt.n	800973e <_dtoa_r+0x7ce>
 8009660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009662:	2a00      	cmp	r2, #0
 8009664:	d067      	beq.n	8009736 <_dtoa_r+0x7c6>
 8009666:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800966a:	9f07      	ldr	r7, [sp, #28]
 800966c:	9d05      	ldr	r5, [sp, #20]
 800966e:	9a05      	ldr	r2, [sp, #20]
 8009670:	2101      	movs	r1, #1
 8009672:	441a      	add	r2, r3
 8009674:	4620      	mov	r0, r4
 8009676:	9205      	str	r2, [sp, #20]
 8009678:	4498      	add	r8, r3
 800967a:	f000 fb20 	bl	8009cbe <__i2b>
 800967e:	4606      	mov	r6, r0
 8009680:	2d00      	cmp	r5, #0
 8009682:	dd0c      	ble.n	800969e <_dtoa_r+0x72e>
 8009684:	f1b8 0f00 	cmp.w	r8, #0
 8009688:	dd09      	ble.n	800969e <_dtoa_r+0x72e>
 800968a:	4545      	cmp	r5, r8
 800968c:	9a05      	ldr	r2, [sp, #20]
 800968e:	462b      	mov	r3, r5
 8009690:	bfa8      	it	ge
 8009692:	4643      	movge	r3, r8
 8009694:	1ad2      	subs	r2, r2, r3
 8009696:	9205      	str	r2, [sp, #20]
 8009698:	1aed      	subs	r5, r5, r3
 800969a:	eba8 0803 	sub.w	r8, r8, r3
 800969e:	9b07      	ldr	r3, [sp, #28]
 80096a0:	b1eb      	cbz	r3, 80096de <_dtoa_r+0x76e>
 80096a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d067      	beq.n	8009778 <_dtoa_r+0x808>
 80096a8:	b18f      	cbz	r7, 80096ce <_dtoa_r+0x75e>
 80096aa:	4631      	mov	r1, r6
 80096ac:	463a      	mov	r2, r7
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 fba4 	bl	8009dfc <__pow5mult>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	4601      	mov	r1, r0
 80096b8:	4606      	mov	r6, r0
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 fb08 	bl	8009cd0 <__multiply>
 80096c0:	9904      	ldr	r1, [sp, #16]
 80096c2:	9008      	str	r0, [sp, #32]
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 fa5a 	bl	8009b7e <_Bfree>
 80096ca:	9b08      	ldr	r3, [sp, #32]
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	9b07      	ldr	r3, [sp, #28]
 80096d0:	1bda      	subs	r2, r3, r7
 80096d2:	d004      	beq.n	80096de <_dtoa_r+0x76e>
 80096d4:	9904      	ldr	r1, [sp, #16]
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 fb90 	bl	8009dfc <__pow5mult>
 80096dc:	9004      	str	r0, [sp, #16]
 80096de:	2101      	movs	r1, #1
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 faec 	bl	8009cbe <__i2b>
 80096e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e8:	4607      	mov	r7, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 81d0 	beq.w	8009a90 <_dtoa_r+0xb20>
 80096f0:	461a      	mov	r2, r3
 80096f2:	4601      	mov	r1, r0
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 fb81 	bl	8009dfc <__pow5mult>
 80096fa:	9b06      	ldr	r3, [sp, #24]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	4607      	mov	r7, r0
 8009700:	dc40      	bgt.n	8009784 <_dtoa_r+0x814>
 8009702:	9b00      	ldr	r3, [sp, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d139      	bne.n	800977c <_dtoa_r+0x80c>
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800970e:	2b00      	cmp	r3, #0
 8009710:	d136      	bne.n	8009780 <_dtoa_r+0x810>
 8009712:	9b01      	ldr	r3, [sp, #4]
 8009714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009718:	0d1b      	lsrs	r3, r3, #20
 800971a:	051b      	lsls	r3, r3, #20
 800971c:	b12b      	cbz	r3, 800972a <_dtoa_r+0x7ba>
 800971e:	9b05      	ldr	r3, [sp, #20]
 8009720:	3301      	adds	r3, #1
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	f108 0801 	add.w	r8, r8, #1
 8009728:	2301      	movs	r3, #1
 800972a:	9307      	str	r3, [sp, #28]
 800972c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800972e:	2b00      	cmp	r3, #0
 8009730:	d12a      	bne.n	8009788 <_dtoa_r+0x818>
 8009732:	2001      	movs	r0, #1
 8009734:	e030      	b.n	8009798 <_dtoa_r+0x828>
 8009736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009738:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800973c:	e795      	b.n	800966a <_dtoa_r+0x6fa>
 800973e:	9b07      	ldr	r3, [sp, #28]
 8009740:	f109 37ff 	add.w	r7, r9, #4294967295
 8009744:	42bb      	cmp	r3, r7
 8009746:	bfbf      	itttt	lt
 8009748:	9b07      	ldrlt	r3, [sp, #28]
 800974a:	9707      	strlt	r7, [sp, #28]
 800974c:	1afa      	sublt	r2, r7, r3
 800974e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009750:	bfbb      	ittet	lt
 8009752:	189b      	addlt	r3, r3, r2
 8009754:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009756:	1bdf      	subge	r7, r3, r7
 8009758:	2700      	movlt	r7, #0
 800975a:	f1b9 0f00 	cmp.w	r9, #0
 800975e:	bfb5      	itete	lt
 8009760:	9b05      	ldrlt	r3, [sp, #20]
 8009762:	9d05      	ldrge	r5, [sp, #20]
 8009764:	eba3 0509 	sublt.w	r5, r3, r9
 8009768:	464b      	movge	r3, r9
 800976a:	bfb8      	it	lt
 800976c:	2300      	movlt	r3, #0
 800976e:	e77e      	b.n	800966e <_dtoa_r+0x6fe>
 8009770:	9f07      	ldr	r7, [sp, #28]
 8009772:	9d05      	ldr	r5, [sp, #20]
 8009774:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009776:	e783      	b.n	8009680 <_dtoa_r+0x710>
 8009778:	9a07      	ldr	r2, [sp, #28]
 800977a:	e7ab      	b.n	80096d4 <_dtoa_r+0x764>
 800977c:	2300      	movs	r3, #0
 800977e:	e7d4      	b.n	800972a <_dtoa_r+0x7ba>
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	e7d2      	b.n	800972a <_dtoa_r+0x7ba>
 8009784:	2300      	movs	r3, #0
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800978e:	6918      	ldr	r0, [r3, #16]
 8009790:	f000 fa47 	bl	8009c22 <__hi0bits>
 8009794:	f1c0 0020 	rsb	r0, r0, #32
 8009798:	4440      	add	r0, r8
 800979a:	f010 001f 	ands.w	r0, r0, #31
 800979e:	d047      	beq.n	8009830 <_dtoa_r+0x8c0>
 80097a0:	f1c0 0320 	rsb	r3, r0, #32
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	dd3b      	ble.n	8009820 <_dtoa_r+0x8b0>
 80097a8:	9b05      	ldr	r3, [sp, #20]
 80097aa:	f1c0 001c 	rsb	r0, r0, #28
 80097ae:	4403      	add	r3, r0
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	4405      	add	r5, r0
 80097b4:	4480      	add	r8, r0
 80097b6:	9b05      	ldr	r3, [sp, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dd05      	ble.n	80097c8 <_dtoa_r+0x858>
 80097bc:	461a      	mov	r2, r3
 80097be:	9904      	ldr	r1, [sp, #16]
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 fb69 	bl	8009e98 <__lshift>
 80097c6:	9004      	str	r0, [sp, #16]
 80097c8:	f1b8 0f00 	cmp.w	r8, #0
 80097cc:	dd05      	ble.n	80097da <_dtoa_r+0x86a>
 80097ce:	4639      	mov	r1, r7
 80097d0:	4642      	mov	r2, r8
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 fb60 	bl	8009e98 <__lshift>
 80097d8:	4607      	mov	r7, r0
 80097da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097dc:	b353      	cbz	r3, 8009834 <_dtoa_r+0x8c4>
 80097de:	4639      	mov	r1, r7
 80097e0:	9804      	ldr	r0, [sp, #16]
 80097e2:	f000 fbad 	bl	8009f40 <__mcmp>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	da24      	bge.n	8009834 <_dtoa_r+0x8c4>
 80097ea:	2300      	movs	r3, #0
 80097ec:	220a      	movs	r2, #10
 80097ee:	9904      	ldr	r1, [sp, #16]
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 f9db 	bl	8009bac <__multadd>
 80097f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f8:	9004      	str	r0, [sp, #16]
 80097fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 814d 	beq.w	8009a9e <_dtoa_r+0xb2e>
 8009804:	2300      	movs	r3, #0
 8009806:	4631      	mov	r1, r6
 8009808:	220a      	movs	r2, #10
 800980a:	4620      	mov	r0, r4
 800980c:	f000 f9ce 	bl	8009bac <__multadd>
 8009810:	9b02      	ldr	r3, [sp, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	4606      	mov	r6, r0
 8009816:	dc4f      	bgt.n	80098b8 <_dtoa_r+0x948>
 8009818:	9b06      	ldr	r3, [sp, #24]
 800981a:	2b02      	cmp	r3, #2
 800981c:	dd4c      	ble.n	80098b8 <_dtoa_r+0x948>
 800981e:	e011      	b.n	8009844 <_dtoa_r+0x8d4>
 8009820:	d0c9      	beq.n	80097b6 <_dtoa_r+0x846>
 8009822:	9a05      	ldr	r2, [sp, #20]
 8009824:	331c      	adds	r3, #28
 8009826:	441a      	add	r2, r3
 8009828:	9205      	str	r2, [sp, #20]
 800982a:	441d      	add	r5, r3
 800982c:	4498      	add	r8, r3
 800982e:	e7c2      	b.n	80097b6 <_dtoa_r+0x846>
 8009830:	4603      	mov	r3, r0
 8009832:	e7f6      	b.n	8009822 <_dtoa_r+0x8b2>
 8009834:	f1b9 0f00 	cmp.w	r9, #0
 8009838:	dc38      	bgt.n	80098ac <_dtoa_r+0x93c>
 800983a:	9b06      	ldr	r3, [sp, #24]
 800983c:	2b02      	cmp	r3, #2
 800983e:	dd35      	ble.n	80098ac <_dtoa_r+0x93c>
 8009840:	f8cd 9008 	str.w	r9, [sp, #8]
 8009844:	9b02      	ldr	r3, [sp, #8]
 8009846:	b963      	cbnz	r3, 8009862 <_dtoa_r+0x8f2>
 8009848:	4639      	mov	r1, r7
 800984a:	2205      	movs	r2, #5
 800984c:	4620      	mov	r0, r4
 800984e:	f000 f9ad 	bl	8009bac <__multadd>
 8009852:	4601      	mov	r1, r0
 8009854:	4607      	mov	r7, r0
 8009856:	9804      	ldr	r0, [sp, #16]
 8009858:	f000 fb72 	bl	8009f40 <__mcmp>
 800985c:	2800      	cmp	r0, #0
 800985e:	f73f adcc 	bgt.w	80093fa <_dtoa_r+0x48a>
 8009862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009864:	465d      	mov	r5, fp
 8009866:	ea6f 0a03 	mvn.w	sl, r3
 800986a:	f04f 0900 	mov.w	r9, #0
 800986e:	4639      	mov	r1, r7
 8009870:	4620      	mov	r0, r4
 8009872:	f000 f984 	bl	8009b7e <_Bfree>
 8009876:	2e00      	cmp	r6, #0
 8009878:	f43f aeb7 	beq.w	80095ea <_dtoa_r+0x67a>
 800987c:	f1b9 0f00 	cmp.w	r9, #0
 8009880:	d005      	beq.n	800988e <_dtoa_r+0x91e>
 8009882:	45b1      	cmp	r9, r6
 8009884:	d003      	beq.n	800988e <_dtoa_r+0x91e>
 8009886:	4649      	mov	r1, r9
 8009888:	4620      	mov	r0, r4
 800988a:	f000 f978 	bl	8009b7e <_Bfree>
 800988e:	4631      	mov	r1, r6
 8009890:	4620      	mov	r0, r4
 8009892:	f000 f974 	bl	8009b7e <_Bfree>
 8009896:	e6a8      	b.n	80095ea <_dtoa_r+0x67a>
 8009898:	2700      	movs	r7, #0
 800989a:	463e      	mov	r6, r7
 800989c:	e7e1      	b.n	8009862 <_dtoa_r+0x8f2>
 800989e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80098a2:	463e      	mov	r6, r7
 80098a4:	e5a9      	b.n	80093fa <_dtoa_r+0x48a>
 80098a6:	bf00      	nop
 80098a8:	40240000 	.word	0x40240000
 80098ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 80fa 	beq.w	8009aac <_dtoa_r+0xb3c>
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	dd05      	ble.n	80098c8 <_dtoa_r+0x958>
 80098bc:	4631      	mov	r1, r6
 80098be:	462a      	mov	r2, r5
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fae9 	bl	8009e98 <__lshift>
 80098c6:	4606      	mov	r6, r0
 80098c8:	9b07      	ldr	r3, [sp, #28]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d04c      	beq.n	8009968 <_dtoa_r+0x9f8>
 80098ce:	6871      	ldr	r1, [r6, #4]
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 f920 	bl	8009b16 <_Balloc>
 80098d6:	6932      	ldr	r2, [r6, #16]
 80098d8:	3202      	adds	r2, #2
 80098da:	4605      	mov	r5, r0
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	f106 010c 	add.w	r1, r6, #12
 80098e2:	300c      	adds	r0, #12
 80098e4:	f000 f90a 	bl	8009afc <memcpy>
 80098e8:	2201      	movs	r2, #1
 80098ea:	4629      	mov	r1, r5
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 fad3 	bl	8009e98 <__lshift>
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	f8cd b014 	str.w	fp, [sp, #20]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	46b1      	mov	r9, r6
 80098fe:	9307      	str	r3, [sp, #28]
 8009900:	4606      	mov	r6, r0
 8009902:	4639      	mov	r1, r7
 8009904:	9804      	ldr	r0, [sp, #16]
 8009906:	f7ff faa7 	bl	8008e58 <quorem>
 800990a:	4649      	mov	r1, r9
 800990c:	4605      	mov	r5, r0
 800990e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009912:	9804      	ldr	r0, [sp, #16]
 8009914:	f000 fb14 	bl	8009f40 <__mcmp>
 8009918:	4632      	mov	r2, r6
 800991a:	9000      	str	r0, [sp, #0]
 800991c:	4639      	mov	r1, r7
 800991e:	4620      	mov	r0, r4
 8009920:	f000 fb28 	bl	8009f74 <__mdiff>
 8009924:	68c3      	ldr	r3, [r0, #12]
 8009926:	4602      	mov	r2, r0
 8009928:	bb03      	cbnz	r3, 800996c <_dtoa_r+0x9fc>
 800992a:	4601      	mov	r1, r0
 800992c:	9008      	str	r0, [sp, #32]
 800992e:	9804      	ldr	r0, [sp, #16]
 8009930:	f000 fb06 	bl	8009f40 <__mcmp>
 8009934:	9a08      	ldr	r2, [sp, #32]
 8009936:	4603      	mov	r3, r0
 8009938:	4611      	mov	r1, r2
 800993a:	4620      	mov	r0, r4
 800993c:	9308      	str	r3, [sp, #32]
 800993e:	f000 f91e 	bl	8009b7e <_Bfree>
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	b9a3      	cbnz	r3, 8009970 <_dtoa_r+0xa00>
 8009946:	9a06      	ldr	r2, [sp, #24]
 8009948:	b992      	cbnz	r2, 8009970 <_dtoa_r+0xa00>
 800994a:	9a07      	ldr	r2, [sp, #28]
 800994c:	b982      	cbnz	r2, 8009970 <_dtoa_r+0xa00>
 800994e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009952:	d029      	beq.n	80099a8 <_dtoa_r+0xa38>
 8009954:	9b00      	ldr	r3, [sp, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	dd01      	ble.n	800995e <_dtoa_r+0x9ee>
 800995a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800995e:	9b05      	ldr	r3, [sp, #20]
 8009960:	1c5d      	adds	r5, r3, #1
 8009962:	f883 8000 	strb.w	r8, [r3]
 8009966:	e782      	b.n	800986e <_dtoa_r+0x8fe>
 8009968:	4630      	mov	r0, r6
 800996a:	e7c2      	b.n	80098f2 <_dtoa_r+0x982>
 800996c:	2301      	movs	r3, #1
 800996e:	e7e3      	b.n	8009938 <_dtoa_r+0x9c8>
 8009970:	9a00      	ldr	r2, [sp, #0]
 8009972:	2a00      	cmp	r2, #0
 8009974:	db04      	blt.n	8009980 <_dtoa_r+0xa10>
 8009976:	d125      	bne.n	80099c4 <_dtoa_r+0xa54>
 8009978:	9a06      	ldr	r2, [sp, #24]
 800997a:	bb1a      	cbnz	r2, 80099c4 <_dtoa_r+0xa54>
 800997c:	9a07      	ldr	r2, [sp, #28]
 800997e:	bb0a      	cbnz	r2, 80099c4 <_dtoa_r+0xa54>
 8009980:	2b00      	cmp	r3, #0
 8009982:	ddec      	ble.n	800995e <_dtoa_r+0x9ee>
 8009984:	2201      	movs	r2, #1
 8009986:	9904      	ldr	r1, [sp, #16]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fa85 	bl	8009e98 <__lshift>
 800998e:	4639      	mov	r1, r7
 8009990:	9004      	str	r0, [sp, #16]
 8009992:	f000 fad5 	bl	8009f40 <__mcmp>
 8009996:	2800      	cmp	r0, #0
 8009998:	dc03      	bgt.n	80099a2 <_dtoa_r+0xa32>
 800999a:	d1e0      	bne.n	800995e <_dtoa_r+0x9ee>
 800999c:	f018 0f01 	tst.w	r8, #1
 80099a0:	d0dd      	beq.n	800995e <_dtoa_r+0x9ee>
 80099a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80099a6:	d1d8      	bne.n	800995a <_dtoa_r+0x9ea>
 80099a8:	9b05      	ldr	r3, [sp, #20]
 80099aa:	9a05      	ldr	r2, [sp, #20]
 80099ac:	1c5d      	adds	r5, r3, #1
 80099ae:	2339      	movs	r3, #57	; 0x39
 80099b0:	7013      	strb	r3, [r2, #0]
 80099b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099b6:	2b39      	cmp	r3, #57	; 0x39
 80099b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80099bc:	d04f      	beq.n	8009a5e <_dtoa_r+0xaee>
 80099be:	3301      	adds	r3, #1
 80099c0:	7013      	strb	r3, [r2, #0]
 80099c2:	e754      	b.n	800986e <_dtoa_r+0x8fe>
 80099c4:	9a05      	ldr	r2, [sp, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f102 0501 	add.w	r5, r2, #1
 80099cc:	dd06      	ble.n	80099dc <_dtoa_r+0xa6c>
 80099ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80099d2:	d0e9      	beq.n	80099a8 <_dtoa_r+0xa38>
 80099d4:	f108 0801 	add.w	r8, r8, #1
 80099d8:	9b05      	ldr	r3, [sp, #20]
 80099da:	e7c2      	b.n	8009962 <_dtoa_r+0x9f2>
 80099dc:	9a02      	ldr	r2, [sp, #8]
 80099de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80099e2:	eba5 030b 	sub.w	r3, r5, fp
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d021      	beq.n	8009a2e <_dtoa_r+0xabe>
 80099ea:	2300      	movs	r3, #0
 80099ec:	220a      	movs	r2, #10
 80099ee:	9904      	ldr	r1, [sp, #16]
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 f8db 	bl	8009bac <__multadd>
 80099f6:	45b1      	cmp	r9, r6
 80099f8:	9004      	str	r0, [sp, #16]
 80099fa:	f04f 0300 	mov.w	r3, #0
 80099fe:	f04f 020a 	mov.w	r2, #10
 8009a02:	4649      	mov	r1, r9
 8009a04:	4620      	mov	r0, r4
 8009a06:	d105      	bne.n	8009a14 <_dtoa_r+0xaa4>
 8009a08:	f000 f8d0 	bl	8009bac <__multadd>
 8009a0c:	4681      	mov	r9, r0
 8009a0e:	4606      	mov	r6, r0
 8009a10:	9505      	str	r5, [sp, #20]
 8009a12:	e776      	b.n	8009902 <_dtoa_r+0x992>
 8009a14:	f000 f8ca 	bl	8009bac <__multadd>
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4681      	mov	r9, r0
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	220a      	movs	r2, #10
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 f8c3 	bl	8009bac <__multadd>
 8009a26:	4606      	mov	r6, r0
 8009a28:	e7f2      	b.n	8009a10 <_dtoa_r+0xaa0>
 8009a2a:	f04f 0900 	mov.w	r9, #0
 8009a2e:	2201      	movs	r2, #1
 8009a30:	9904      	ldr	r1, [sp, #16]
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fa30 	bl	8009e98 <__lshift>
 8009a38:	4639      	mov	r1, r7
 8009a3a:	9004      	str	r0, [sp, #16]
 8009a3c:	f000 fa80 	bl	8009f40 <__mcmp>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	dcb6      	bgt.n	80099b2 <_dtoa_r+0xa42>
 8009a44:	d102      	bne.n	8009a4c <_dtoa_r+0xadc>
 8009a46:	f018 0f01 	tst.w	r8, #1
 8009a4a:	d1b2      	bne.n	80099b2 <_dtoa_r+0xa42>
 8009a4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a50:	2b30      	cmp	r3, #48	; 0x30
 8009a52:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a56:	f47f af0a 	bne.w	800986e <_dtoa_r+0x8fe>
 8009a5a:	4615      	mov	r5, r2
 8009a5c:	e7f6      	b.n	8009a4c <_dtoa_r+0xadc>
 8009a5e:	4593      	cmp	fp, r2
 8009a60:	d105      	bne.n	8009a6e <_dtoa_r+0xafe>
 8009a62:	2331      	movs	r3, #49	; 0x31
 8009a64:	f10a 0a01 	add.w	sl, sl, #1
 8009a68:	f88b 3000 	strb.w	r3, [fp]
 8009a6c:	e6ff      	b.n	800986e <_dtoa_r+0x8fe>
 8009a6e:	4615      	mov	r5, r2
 8009a70:	e79f      	b.n	80099b2 <_dtoa_r+0xa42>
 8009a72:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009ad8 <_dtoa_r+0xb68>
 8009a76:	e007      	b.n	8009a88 <_dtoa_r+0xb18>
 8009a78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009adc <_dtoa_r+0xb6c>
 8009a7e:	b11b      	cbz	r3, 8009a88 <_dtoa_r+0xb18>
 8009a80:	f10b 0308 	add.w	r3, fp, #8
 8009a84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	4658      	mov	r0, fp
 8009a8a:	b017      	add	sp, #92	; 0x5c
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	f77f ae35 	ble.w	8009702 <_dtoa_r+0x792>
 8009a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a9a:	9307      	str	r3, [sp, #28]
 8009a9c:	e649      	b.n	8009732 <_dtoa_r+0x7c2>
 8009a9e:	9b02      	ldr	r3, [sp, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dc03      	bgt.n	8009aac <_dtoa_r+0xb3c>
 8009aa4:	9b06      	ldr	r3, [sp, #24]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	f73f aecc 	bgt.w	8009844 <_dtoa_r+0x8d4>
 8009aac:	465d      	mov	r5, fp
 8009aae:	4639      	mov	r1, r7
 8009ab0:	9804      	ldr	r0, [sp, #16]
 8009ab2:	f7ff f9d1 	bl	8008e58 <quorem>
 8009ab6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009aba:	f805 8b01 	strb.w	r8, [r5], #1
 8009abe:	9a02      	ldr	r2, [sp, #8]
 8009ac0:	eba5 030b 	sub.w	r3, r5, fp
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	ddb0      	ble.n	8009a2a <_dtoa_r+0xaba>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	220a      	movs	r2, #10
 8009acc:	9904      	ldr	r1, [sp, #16]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 f86c 	bl	8009bac <__multadd>
 8009ad4:	9004      	str	r0, [sp, #16]
 8009ad6:	e7ea      	b.n	8009aae <_dtoa_r+0xb3e>
 8009ad8:	0800a4f4 	.word	0x0800a4f4
 8009adc:	0800a518 	.word	0x0800a518

08009ae0 <_localeconv_r>:
 8009ae0:	4b04      	ldr	r3, [pc, #16]	; (8009af4 <_localeconv_r+0x14>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6a18      	ldr	r0, [r3, #32]
 8009ae6:	4b04      	ldr	r3, [pc, #16]	; (8009af8 <_localeconv_r+0x18>)
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	bf08      	it	eq
 8009aec:	4618      	moveq	r0, r3
 8009aee:	30f0      	adds	r0, #240	; 0xf0
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000188 	.word	0x20000188
 8009af8:	200001ec 	.word	0x200001ec

08009afc <memcpy>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	1e43      	subs	r3, r0, #1
 8009b00:	440a      	add	r2, r1
 8009b02:	4291      	cmp	r1, r2
 8009b04:	d100      	bne.n	8009b08 <memcpy+0xc>
 8009b06:	bd10      	pop	{r4, pc}
 8009b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b10:	e7f7      	b.n	8009b02 <memcpy+0x6>

08009b12 <__malloc_lock>:
 8009b12:	4770      	bx	lr

08009b14 <__malloc_unlock>:
 8009b14:	4770      	bx	lr

08009b16 <_Balloc>:
 8009b16:	b570      	push	{r4, r5, r6, lr}
 8009b18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	460e      	mov	r6, r1
 8009b1e:	b93d      	cbnz	r5, 8009b30 <_Balloc+0x1a>
 8009b20:	2010      	movs	r0, #16
 8009b22:	f7fe fc4d 	bl	80083c0 <malloc>
 8009b26:	6260      	str	r0, [r4, #36]	; 0x24
 8009b28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b2c:	6005      	str	r5, [r0, #0]
 8009b2e:	60c5      	str	r5, [r0, #12]
 8009b30:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009b32:	68eb      	ldr	r3, [r5, #12]
 8009b34:	b183      	cbz	r3, 8009b58 <_Balloc+0x42>
 8009b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009b3e:	b9b8      	cbnz	r0, 8009b70 <_Balloc+0x5a>
 8009b40:	2101      	movs	r1, #1
 8009b42:	fa01 f506 	lsl.w	r5, r1, r6
 8009b46:	1d6a      	adds	r2, r5, #5
 8009b48:	0092      	lsls	r2, r2, #2
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 fabe 	bl	800a0cc <_calloc_r>
 8009b50:	b160      	cbz	r0, 8009b6c <_Balloc+0x56>
 8009b52:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009b56:	e00e      	b.n	8009b76 <_Balloc+0x60>
 8009b58:	2221      	movs	r2, #33	; 0x21
 8009b5a:	2104      	movs	r1, #4
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f000 fab5 	bl	800a0cc <_calloc_r>
 8009b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b64:	60e8      	str	r0, [r5, #12]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e4      	bne.n	8009b36 <_Balloc+0x20>
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	6802      	ldr	r2, [r0, #0]
 8009b72:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009b76:	2300      	movs	r3, #0
 8009b78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b7c:	e7f7      	b.n	8009b6e <_Balloc+0x58>

08009b7e <_Bfree>:
 8009b7e:	b570      	push	{r4, r5, r6, lr}
 8009b80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b82:	4606      	mov	r6, r0
 8009b84:	460d      	mov	r5, r1
 8009b86:	b93c      	cbnz	r4, 8009b98 <_Bfree+0x1a>
 8009b88:	2010      	movs	r0, #16
 8009b8a:	f7fe fc19 	bl	80083c0 <malloc>
 8009b8e:	6270      	str	r0, [r6, #36]	; 0x24
 8009b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b94:	6004      	str	r4, [r0, #0]
 8009b96:	60c4      	str	r4, [r0, #12]
 8009b98:	b13d      	cbz	r5, 8009baa <_Bfree+0x2c>
 8009b9a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b9c:	686a      	ldr	r2, [r5, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba4:	6029      	str	r1, [r5, #0]
 8009ba6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009baa:	bd70      	pop	{r4, r5, r6, pc}

08009bac <__multadd>:
 8009bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb0:	690d      	ldr	r5, [r1, #16]
 8009bb2:	461f      	mov	r7, r3
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	f101 0c14 	add.w	ip, r1, #20
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f8dc 0000 	ldr.w	r0, [ip]
 8009bc2:	b281      	uxth	r1, r0
 8009bc4:	fb02 7101 	mla	r1, r2, r1, r7
 8009bc8:	0c0f      	lsrs	r7, r1, #16
 8009bca:	0c00      	lsrs	r0, r0, #16
 8009bcc:	fb02 7000 	mla	r0, r2, r0, r7
 8009bd0:	b289      	uxth	r1, r1
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009bd8:	429d      	cmp	r5, r3
 8009bda:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009bde:	f84c 1b04 	str.w	r1, [ip], #4
 8009be2:	dcec      	bgt.n	8009bbe <__multadd+0x12>
 8009be4:	b1d7      	cbz	r7, 8009c1c <__multadd+0x70>
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dc12      	bgt.n	8009c12 <__multadd+0x66>
 8009bec:	6861      	ldr	r1, [r4, #4]
 8009bee:	4630      	mov	r0, r6
 8009bf0:	3101      	adds	r1, #1
 8009bf2:	f7ff ff90 	bl	8009b16 <_Balloc>
 8009bf6:	6922      	ldr	r2, [r4, #16]
 8009bf8:	3202      	adds	r2, #2
 8009bfa:	f104 010c 	add.w	r1, r4, #12
 8009bfe:	4680      	mov	r8, r0
 8009c00:	0092      	lsls	r2, r2, #2
 8009c02:	300c      	adds	r0, #12
 8009c04:	f7ff ff7a 	bl	8009afc <memcpy>
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7ff ffb7 	bl	8009b7e <_Bfree>
 8009c10:	4644      	mov	r4, r8
 8009c12:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c16:	3501      	adds	r5, #1
 8009c18:	615f      	str	r7, [r3, #20]
 8009c1a:	6125      	str	r5, [r4, #16]
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c22 <__hi0bits>:
 8009c22:	0c02      	lsrs	r2, r0, #16
 8009c24:	0412      	lsls	r2, r2, #16
 8009c26:	4603      	mov	r3, r0
 8009c28:	b9b2      	cbnz	r2, 8009c58 <__hi0bits+0x36>
 8009c2a:	0403      	lsls	r3, r0, #16
 8009c2c:	2010      	movs	r0, #16
 8009c2e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c32:	bf04      	itt	eq
 8009c34:	021b      	lsleq	r3, r3, #8
 8009c36:	3008      	addeq	r0, #8
 8009c38:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c3c:	bf04      	itt	eq
 8009c3e:	011b      	lsleq	r3, r3, #4
 8009c40:	3004      	addeq	r0, #4
 8009c42:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009c46:	bf04      	itt	eq
 8009c48:	009b      	lsleq	r3, r3, #2
 8009c4a:	3002      	addeq	r0, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	db06      	blt.n	8009c5e <__hi0bits+0x3c>
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	d503      	bpl.n	8009c5c <__hi0bits+0x3a>
 8009c54:	3001      	adds	r0, #1
 8009c56:	4770      	bx	lr
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e7e8      	b.n	8009c2e <__hi0bits+0xc>
 8009c5c:	2020      	movs	r0, #32
 8009c5e:	4770      	bx	lr

08009c60 <__lo0bits>:
 8009c60:	6803      	ldr	r3, [r0, #0]
 8009c62:	f013 0207 	ands.w	r2, r3, #7
 8009c66:	4601      	mov	r1, r0
 8009c68:	d00b      	beq.n	8009c82 <__lo0bits+0x22>
 8009c6a:	07da      	lsls	r2, r3, #31
 8009c6c:	d423      	bmi.n	8009cb6 <__lo0bits+0x56>
 8009c6e:	0798      	lsls	r0, r3, #30
 8009c70:	bf49      	itett	mi
 8009c72:	085b      	lsrmi	r3, r3, #1
 8009c74:	089b      	lsrpl	r3, r3, #2
 8009c76:	2001      	movmi	r0, #1
 8009c78:	600b      	strmi	r3, [r1, #0]
 8009c7a:	bf5c      	itt	pl
 8009c7c:	600b      	strpl	r3, [r1, #0]
 8009c7e:	2002      	movpl	r0, #2
 8009c80:	4770      	bx	lr
 8009c82:	b298      	uxth	r0, r3
 8009c84:	b9a8      	cbnz	r0, 8009cb2 <__lo0bits+0x52>
 8009c86:	0c1b      	lsrs	r3, r3, #16
 8009c88:	2010      	movs	r0, #16
 8009c8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c8e:	bf04      	itt	eq
 8009c90:	0a1b      	lsreq	r3, r3, #8
 8009c92:	3008      	addeq	r0, #8
 8009c94:	071a      	lsls	r2, r3, #28
 8009c96:	bf04      	itt	eq
 8009c98:	091b      	lsreq	r3, r3, #4
 8009c9a:	3004      	addeq	r0, #4
 8009c9c:	079a      	lsls	r2, r3, #30
 8009c9e:	bf04      	itt	eq
 8009ca0:	089b      	lsreq	r3, r3, #2
 8009ca2:	3002      	addeq	r0, #2
 8009ca4:	07da      	lsls	r2, r3, #31
 8009ca6:	d402      	bmi.n	8009cae <__lo0bits+0x4e>
 8009ca8:	085b      	lsrs	r3, r3, #1
 8009caa:	d006      	beq.n	8009cba <__lo0bits+0x5a>
 8009cac:	3001      	adds	r0, #1
 8009cae:	600b      	str	r3, [r1, #0]
 8009cb0:	4770      	bx	lr
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	e7e9      	b.n	8009c8a <__lo0bits+0x2a>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	4770      	bx	lr
 8009cba:	2020      	movs	r0, #32
 8009cbc:	4770      	bx	lr

08009cbe <__i2b>:
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	f7ff ff27 	bl	8009b16 <_Balloc>
 8009cc8:	2201      	movs	r2, #1
 8009cca:	6144      	str	r4, [r0, #20]
 8009ccc:	6102      	str	r2, [r0, #16]
 8009cce:	bd10      	pop	{r4, pc}

08009cd0 <__multiply>:
 8009cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	690a      	ldr	r2, [r1, #16]
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	bfb8      	it	lt
 8009cde:	460b      	movlt	r3, r1
 8009ce0:	4688      	mov	r8, r1
 8009ce2:	bfbc      	itt	lt
 8009ce4:	46a0      	movlt	r8, r4
 8009ce6:	461c      	movlt	r4, r3
 8009ce8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009cec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009cf0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009cf8:	eb07 0609 	add.w	r6, r7, r9
 8009cfc:	42b3      	cmp	r3, r6
 8009cfe:	bfb8      	it	lt
 8009d00:	3101      	addlt	r1, #1
 8009d02:	f7ff ff08 	bl	8009b16 <_Balloc>
 8009d06:	f100 0514 	add.w	r5, r0, #20
 8009d0a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009d0e:	462b      	mov	r3, r5
 8009d10:	2200      	movs	r2, #0
 8009d12:	4573      	cmp	r3, lr
 8009d14:	d316      	bcc.n	8009d44 <__multiply+0x74>
 8009d16:	f104 0214 	add.w	r2, r4, #20
 8009d1a:	f108 0114 	add.w	r1, r8, #20
 8009d1e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009d22:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	9201      	str	r2, [sp, #4]
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d80c      	bhi.n	8009d4a <__multiply+0x7a>
 8009d30:	2e00      	cmp	r6, #0
 8009d32:	dd03      	ble.n	8009d3c <__multiply+0x6c>
 8009d34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d05d      	beq.n	8009df8 <__multiply+0x128>
 8009d3c:	6106      	str	r6, [r0, #16]
 8009d3e:	b003      	add	sp, #12
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	f843 2b04 	str.w	r2, [r3], #4
 8009d48:	e7e3      	b.n	8009d12 <__multiply+0x42>
 8009d4a:	f8b2 b000 	ldrh.w	fp, [r2]
 8009d4e:	f1bb 0f00 	cmp.w	fp, #0
 8009d52:	d023      	beq.n	8009d9c <__multiply+0xcc>
 8009d54:	4689      	mov	r9, r1
 8009d56:	46ac      	mov	ip, r5
 8009d58:	f04f 0800 	mov.w	r8, #0
 8009d5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009d60:	f8dc a000 	ldr.w	sl, [ip]
 8009d64:	b2a3      	uxth	r3, r4
 8009d66:	fa1f fa8a 	uxth.w	sl, sl
 8009d6a:	fb0b a303 	mla	r3, fp, r3, sl
 8009d6e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d72:	f8dc 4000 	ldr.w	r4, [ip]
 8009d76:	4443      	add	r3, r8
 8009d78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d7c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009d80:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009d84:	46e2      	mov	sl, ip
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d8c:	454f      	cmp	r7, r9
 8009d8e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d92:	f84a 3b04 	str.w	r3, [sl], #4
 8009d96:	d82b      	bhi.n	8009df0 <__multiply+0x120>
 8009d98:	f8cc 8004 	str.w	r8, [ip, #4]
 8009d9c:	9b01      	ldr	r3, [sp, #4]
 8009d9e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009da2:	3204      	adds	r2, #4
 8009da4:	f1ba 0f00 	cmp.w	sl, #0
 8009da8:	d020      	beq.n	8009dec <__multiply+0x11c>
 8009daa:	682b      	ldr	r3, [r5, #0]
 8009dac:	4689      	mov	r9, r1
 8009dae:	46a8      	mov	r8, r5
 8009db0:	f04f 0b00 	mov.w	fp, #0
 8009db4:	f8b9 c000 	ldrh.w	ip, [r9]
 8009db8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009dbc:	fb0a 440c 	mla	r4, sl, ip, r4
 8009dc0:	445c      	add	r4, fp
 8009dc2:	46c4      	mov	ip, r8
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009dca:	f84c 3b04 	str.w	r3, [ip], #4
 8009dce:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dd2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009dd6:	0c1b      	lsrs	r3, r3, #16
 8009dd8:	fb0a b303 	mla	r3, sl, r3, fp
 8009ddc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009de0:	454f      	cmp	r7, r9
 8009de2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009de6:	d805      	bhi.n	8009df4 <__multiply+0x124>
 8009de8:	f8c8 3004 	str.w	r3, [r8, #4]
 8009dec:	3504      	adds	r5, #4
 8009dee:	e79b      	b.n	8009d28 <__multiply+0x58>
 8009df0:	46d4      	mov	ip, sl
 8009df2:	e7b3      	b.n	8009d5c <__multiply+0x8c>
 8009df4:	46e0      	mov	r8, ip
 8009df6:	e7dd      	b.n	8009db4 <__multiply+0xe4>
 8009df8:	3e01      	subs	r6, #1
 8009dfa:	e799      	b.n	8009d30 <__multiply+0x60>

08009dfc <__pow5mult>:
 8009dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e00:	4615      	mov	r5, r2
 8009e02:	f012 0203 	ands.w	r2, r2, #3
 8009e06:	4606      	mov	r6, r0
 8009e08:	460f      	mov	r7, r1
 8009e0a:	d007      	beq.n	8009e1c <__pow5mult+0x20>
 8009e0c:	3a01      	subs	r2, #1
 8009e0e:	4c21      	ldr	r4, [pc, #132]	; (8009e94 <__pow5mult+0x98>)
 8009e10:	2300      	movs	r3, #0
 8009e12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e16:	f7ff fec9 	bl	8009bac <__multadd>
 8009e1a:	4607      	mov	r7, r0
 8009e1c:	10ad      	asrs	r5, r5, #2
 8009e1e:	d035      	beq.n	8009e8c <__pow5mult+0x90>
 8009e20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e22:	b93c      	cbnz	r4, 8009e34 <__pow5mult+0x38>
 8009e24:	2010      	movs	r0, #16
 8009e26:	f7fe facb 	bl	80083c0 <malloc>
 8009e2a:	6270      	str	r0, [r6, #36]	; 0x24
 8009e2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e30:	6004      	str	r4, [r0, #0]
 8009e32:	60c4      	str	r4, [r0, #12]
 8009e34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e3c:	b94c      	cbnz	r4, 8009e52 <__pow5mult+0x56>
 8009e3e:	f240 2171 	movw	r1, #625	; 0x271
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7ff ff3b 	bl	8009cbe <__i2b>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e4e:	4604      	mov	r4, r0
 8009e50:	6003      	str	r3, [r0, #0]
 8009e52:	f04f 0800 	mov.w	r8, #0
 8009e56:	07eb      	lsls	r3, r5, #31
 8009e58:	d50a      	bpl.n	8009e70 <__pow5mult+0x74>
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff ff36 	bl	8009cd0 <__multiply>
 8009e64:	4639      	mov	r1, r7
 8009e66:	4681      	mov	r9, r0
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f7ff fe88 	bl	8009b7e <_Bfree>
 8009e6e:	464f      	mov	r7, r9
 8009e70:	106d      	asrs	r5, r5, #1
 8009e72:	d00b      	beq.n	8009e8c <__pow5mult+0x90>
 8009e74:	6820      	ldr	r0, [r4, #0]
 8009e76:	b938      	cbnz	r0, 8009e88 <__pow5mult+0x8c>
 8009e78:	4622      	mov	r2, r4
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	f7ff ff27 	bl	8009cd0 <__multiply>
 8009e82:	6020      	str	r0, [r4, #0]
 8009e84:	f8c0 8000 	str.w	r8, [r0]
 8009e88:	4604      	mov	r4, r0
 8009e8a:	e7e4      	b.n	8009e56 <__pow5mult+0x5a>
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e92:	bf00      	nop
 8009e94:	0800a618 	.word	0x0800a618

08009e98 <__lshift>:
 8009e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ea2:	6923      	ldr	r3, [r4, #16]
 8009ea4:	6849      	ldr	r1, [r1, #4]
 8009ea6:	eb0a 0903 	add.w	r9, sl, r3
 8009eaa:	68a3      	ldr	r3, [r4, #8]
 8009eac:	4607      	mov	r7, r0
 8009eae:	4616      	mov	r6, r2
 8009eb0:	f109 0501 	add.w	r5, r9, #1
 8009eb4:	42ab      	cmp	r3, r5
 8009eb6:	db32      	blt.n	8009f1e <__lshift+0x86>
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f7ff fe2c 	bl	8009b16 <_Balloc>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	f100 0114 	add.w	r1, r0, #20
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	4553      	cmp	r3, sl
 8009eca:	db2b      	blt.n	8009f24 <__lshift+0x8c>
 8009ecc:	6920      	ldr	r0, [r4, #16]
 8009ece:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ed2:	f104 0314 	add.w	r3, r4, #20
 8009ed6:	f016 021f 	ands.w	r2, r6, #31
 8009eda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ede:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ee2:	d025      	beq.n	8009f30 <__lshift+0x98>
 8009ee4:	f1c2 0e20 	rsb	lr, r2, #32
 8009ee8:	2000      	movs	r0, #0
 8009eea:	681e      	ldr	r6, [r3, #0]
 8009eec:	468a      	mov	sl, r1
 8009eee:	4096      	lsls	r6, r2
 8009ef0:	4330      	orrs	r0, r6
 8009ef2:	f84a 0b04 	str.w	r0, [sl], #4
 8009ef6:	f853 0b04 	ldr.w	r0, [r3], #4
 8009efa:	459c      	cmp	ip, r3
 8009efc:	fa20 f00e 	lsr.w	r0, r0, lr
 8009f00:	d814      	bhi.n	8009f2c <__lshift+0x94>
 8009f02:	6048      	str	r0, [r1, #4]
 8009f04:	b108      	cbz	r0, 8009f0a <__lshift+0x72>
 8009f06:	f109 0502 	add.w	r5, r9, #2
 8009f0a:	3d01      	subs	r5, #1
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009f12:	4621      	mov	r1, r4
 8009f14:	f7ff fe33 	bl	8009b7e <_Bfree>
 8009f18:	4640      	mov	r0, r8
 8009f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1e:	3101      	adds	r1, #1
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	e7c7      	b.n	8009eb4 <__lshift+0x1c>
 8009f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	e7cd      	b.n	8009ec8 <__lshift+0x30>
 8009f2c:	4651      	mov	r1, sl
 8009f2e:	e7dc      	b.n	8009eea <__lshift+0x52>
 8009f30:	3904      	subs	r1, #4
 8009f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f36:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f3a:	459c      	cmp	ip, r3
 8009f3c:	d8f9      	bhi.n	8009f32 <__lshift+0x9a>
 8009f3e:	e7e4      	b.n	8009f0a <__lshift+0x72>

08009f40 <__mcmp>:
 8009f40:	6903      	ldr	r3, [r0, #16]
 8009f42:	690a      	ldr	r2, [r1, #16]
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	b530      	push	{r4, r5, lr}
 8009f48:	d10c      	bne.n	8009f64 <__mcmp+0x24>
 8009f4a:	0092      	lsls	r2, r2, #2
 8009f4c:	3014      	adds	r0, #20
 8009f4e:	3114      	adds	r1, #20
 8009f50:	1884      	adds	r4, r0, r2
 8009f52:	4411      	add	r1, r2
 8009f54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f5c:	4295      	cmp	r5, r2
 8009f5e:	d003      	beq.n	8009f68 <__mcmp+0x28>
 8009f60:	d305      	bcc.n	8009f6e <__mcmp+0x2e>
 8009f62:	2301      	movs	r3, #1
 8009f64:	4618      	mov	r0, r3
 8009f66:	bd30      	pop	{r4, r5, pc}
 8009f68:	42a0      	cmp	r0, r4
 8009f6a:	d3f3      	bcc.n	8009f54 <__mcmp+0x14>
 8009f6c:	e7fa      	b.n	8009f64 <__mcmp+0x24>
 8009f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f72:	e7f7      	b.n	8009f64 <__mcmp+0x24>

08009f74 <__mdiff>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	460d      	mov	r5, r1
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4628      	mov	r0, r5
 8009f80:	4614      	mov	r4, r2
 8009f82:	f7ff ffdd 	bl	8009f40 <__mcmp>
 8009f86:	1e06      	subs	r6, r0, #0
 8009f88:	d108      	bne.n	8009f9c <__mdiff+0x28>
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f7ff fdc2 	bl	8009b16 <_Balloc>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9c:	bfa4      	itt	ge
 8009f9e:	4623      	movge	r3, r4
 8009fa0:	462c      	movge	r4, r5
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	6861      	ldr	r1, [r4, #4]
 8009fa6:	bfa6      	itte	ge
 8009fa8:	461d      	movge	r5, r3
 8009faa:	2600      	movge	r6, #0
 8009fac:	2601      	movlt	r6, #1
 8009fae:	f7ff fdb2 	bl	8009b16 <_Balloc>
 8009fb2:	692b      	ldr	r3, [r5, #16]
 8009fb4:	60c6      	str	r6, [r0, #12]
 8009fb6:	6926      	ldr	r6, [r4, #16]
 8009fb8:	f105 0914 	add.w	r9, r5, #20
 8009fbc:	f104 0214 	add.w	r2, r4, #20
 8009fc0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009fc4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009fc8:	f100 0514 	add.w	r5, r0, #20
 8009fcc:	f04f 0e00 	mov.w	lr, #0
 8009fd0:	f852 ab04 	ldr.w	sl, [r2], #4
 8009fd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8009fd8:	fa1e f18a 	uxtah	r1, lr, sl
 8009fdc:	b2a3      	uxth	r3, r4
 8009fde:	1ac9      	subs	r1, r1, r3
 8009fe0:	0c23      	lsrs	r3, r4, #16
 8009fe2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009fe6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009fea:	b289      	uxth	r1, r1
 8009fec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009ff0:	45c8      	cmp	r8, r9
 8009ff2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009ff6:	4694      	mov	ip, r2
 8009ff8:	f845 3b04 	str.w	r3, [r5], #4
 8009ffc:	d8e8      	bhi.n	8009fd0 <__mdiff+0x5c>
 8009ffe:	45bc      	cmp	ip, r7
 800a000:	d304      	bcc.n	800a00c <__mdiff+0x98>
 800a002:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a006:	b183      	cbz	r3, 800a02a <__mdiff+0xb6>
 800a008:	6106      	str	r6, [r0, #16]
 800a00a:	e7c5      	b.n	8009f98 <__mdiff+0x24>
 800a00c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a010:	fa1e f381 	uxtah	r3, lr, r1
 800a014:	141a      	asrs	r2, r3, #16
 800a016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a020:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a024:	f845 3b04 	str.w	r3, [r5], #4
 800a028:	e7e9      	b.n	8009ffe <__mdiff+0x8a>
 800a02a:	3e01      	subs	r6, #1
 800a02c:	e7e9      	b.n	800a002 <__mdiff+0x8e>

0800a02e <__d2b>:
 800a02e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a032:	460e      	mov	r6, r1
 800a034:	2101      	movs	r1, #1
 800a036:	ec59 8b10 	vmov	r8, r9, d0
 800a03a:	4615      	mov	r5, r2
 800a03c:	f7ff fd6b 	bl	8009b16 <_Balloc>
 800a040:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a044:	4607      	mov	r7, r0
 800a046:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a04a:	bb34      	cbnz	r4, 800a09a <__d2b+0x6c>
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	f1b8 0300 	subs.w	r3, r8, #0
 800a052:	d027      	beq.n	800a0a4 <__d2b+0x76>
 800a054:	a802      	add	r0, sp, #8
 800a056:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a05a:	f7ff fe01 	bl	8009c60 <__lo0bits>
 800a05e:	9900      	ldr	r1, [sp, #0]
 800a060:	b1f0      	cbz	r0, 800a0a0 <__d2b+0x72>
 800a062:	9a01      	ldr	r2, [sp, #4]
 800a064:	f1c0 0320 	rsb	r3, r0, #32
 800a068:	fa02 f303 	lsl.w	r3, r2, r3
 800a06c:	430b      	orrs	r3, r1
 800a06e:	40c2      	lsrs	r2, r0
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	9201      	str	r2, [sp, #4]
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	61bb      	str	r3, [r7, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bf14      	ite	ne
 800a07c:	2102      	movne	r1, #2
 800a07e:	2101      	moveq	r1, #1
 800a080:	6139      	str	r1, [r7, #16]
 800a082:	b1c4      	cbz	r4, 800a0b6 <__d2b+0x88>
 800a084:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a088:	4404      	add	r4, r0
 800a08a:	6034      	str	r4, [r6, #0]
 800a08c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a090:	6028      	str	r0, [r5, #0]
 800a092:	4638      	mov	r0, r7
 800a094:	b003      	add	sp, #12
 800a096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a09a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a09e:	e7d5      	b.n	800a04c <__d2b+0x1e>
 800a0a0:	6179      	str	r1, [r7, #20]
 800a0a2:	e7e7      	b.n	800a074 <__d2b+0x46>
 800a0a4:	a801      	add	r0, sp, #4
 800a0a6:	f7ff fddb 	bl	8009c60 <__lo0bits>
 800a0aa:	9b01      	ldr	r3, [sp, #4]
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	6139      	str	r1, [r7, #16]
 800a0b2:	3020      	adds	r0, #32
 800a0b4:	e7e5      	b.n	800a082 <__d2b+0x54>
 800a0b6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a0ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0be:	6030      	str	r0, [r6, #0]
 800a0c0:	6918      	ldr	r0, [r3, #16]
 800a0c2:	f7ff fdae 	bl	8009c22 <__hi0bits>
 800a0c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a0ca:	e7e1      	b.n	800a090 <__d2b+0x62>

0800a0cc <_calloc_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	fb02 f401 	mul.w	r4, r2, r1
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	f7fe f9da 	bl	800848c <_malloc_r>
 800a0d8:	4605      	mov	r5, r0
 800a0da:	b118      	cbz	r0, 800a0e4 <_calloc_r+0x18>
 800a0dc:	4622      	mov	r2, r4
 800a0de:	2100      	movs	r1, #0
 800a0e0:	f7fe f97e 	bl	80083e0 <memset>
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}

0800a0e8 <__ssputs_r>:
 800a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	688e      	ldr	r6, [r1, #8]
 800a0ee:	429e      	cmp	r6, r3
 800a0f0:	4682      	mov	sl, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	4690      	mov	r8, r2
 800a0f6:	4699      	mov	r9, r3
 800a0f8:	d837      	bhi.n	800a16a <__ssputs_r+0x82>
 800a0fa:	898a      	ldrh	r2, [r1, #12]
 800a0fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a100:	d031      	beq.n	800a166 <__ssputs_r+0x7e>
 800a102:	6825      	ldr	r5, [r4, #0]
 800a104:	6909      	ldr	r1, [r1, #16]
 800a106:	1a6f      	subs	r7, r5, r1
 800a108:	6965      	ldr	r5, [r4, #20]
 800a10a:	2302      	movs	r3, #2
 800a10c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a110:	fb95 f5f3 	sdiv	r5, r5, r3
 800a114:	f109 0301 	add.w	r3, r9, #1
 800a118:	443b      	add	r3, r7
 800a11a:	429d      	cmp	r5, r3
 800a11c:	bf38      	it	cc
 800a11e:	461d      	movcc	r5, r3
 800a120:	0553      	lsls	r3, r2, #21
 800a122:	d530      	bpl.n	800a186 <__ssputs_r+0x9e>
 800a124:	4629      	mov	r1, r5
 800a126:	f7fe f9b1 	bl	800848c <_malloc_r>
 800a12a:	4606      	mov	r6, r0
 800a12c:	b950      	cbnz	r0, 800a144 <__ssputs_r+0x5c>
 800a12e:	230c      	movs	r3, #12
 800a130:	f8ca 3000 	str.w	r3, [sl]
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295
 800a140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a144:	463a      	mov	r2, r7
 800a146:	6921      	ldr	r1, [r4, #16]
 800a148:	f7ff fcd8 	bl	8009afc <memcpy>
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a156:	81a3      	strh	r3, [r4, #12]
 800a158:	6126      	str	r6, [r4, #16]
 800a15a:	6165      	str	r5, [r4, #20]
 800a15c:	443e      	add	r6, r7
 800a15e:	1bed      	subs	r5, r5, r7
 800a160:	6026      	str	r6, [r4, #0]
 800a162:	60a5      	str	r5, [r4, #8]
 800a164:	464e      	mov	r6, r9
 800a166:	454e      	cmp	r6, r9
 800a168:	d900      	bls.n	800a16c <__ssputs_r+0x84>
 800a16a:	464e      	mov	r6, r9
 800a16c:	4632      	mov	r2, r6
 800a16e:	4641      	mov	r1, r8
 800a170:	6820      	ldr	r0, [r4, #0]
 800a172:	f000 f91d 	bl	800a3b0 <memmove>
 800a176:	68a3      	ldr	r3, [r4, #8]
 800a178:	1b9b      	subs	r3, r3, r6
 800a17a:	60a3      	str	r3, [r4, #8]
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	441e      	add	r6, r3
 800a180:	6026      	str	r6, [r4, #0]
 800a182:	2000      	movs	r0, #0
 800a184:	e7dc      	b.n	800a140 <__ssputs_r+0x58>
 800a186:	462a      	mov	r2, r5
 800a188:	f000 f92b 	bl	800a3e2 <_realloc_r>
 800a18c:	4606      	mov	r6, r0
 800a18e:	2800      	cmp	r0, #0
 800a190:	d1e2      	bne.n	800a158 <__ssputs_r+0x70>
 800a192:	6921      	ldr	r1, [r4, #16]
 800a194:	4650      	mov	r0, sl
 800a196:	f7fe f92b 	bl	80083f0 <_free_r>
 800a19a:	e7c8      	b.n	800a12e <__ssputs_r+0x46>

0800a19c <_svfiprintf_r>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	461d      	mov	r5, r3
 800a1a2:	898b      	ldrh	r3, [r1, #12]
 800a1a4:	061f      	lsls	r7, r3, #24
 800a1a6:	b09d      	sub	sp, #116	; 0x74
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	4616      	mov	r6, r2
 800a1ae:	d50f      	bpl.n	800a1d0 <_svfiprintf_r+0x34>
 800a1b0:	690b      	ldr	r3, [r1, #16]
 800a1b2:	b96b      	cbnz	r3, 800a1d0 <_svfiprintf_r+0x34>
 800a1b4:	2140      	movs	r1, #64	; 0x40
 800a1b6:	f7fe f969 	bl	800848c <_malloc_r>
 800a1ba:	6020      	str	r0, [r4, #0]
 800a1bc:	6120      	str	r0, [r4, #16]
 800a1be:	b928      	cbnz	r0, 800a1cc <_svfiprintf_r+0x30>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	f8c8 3000 	str.w	r3, [r8]
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ca:	e0c8      	b.n	800a35e <_svfiprintf_r+0x1c2>
 800a1cc:	2340      	movs	r3, #64	; 0x40
 800a1ce:	6163      	str	r3, [r4, #20]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1da:	2330      	movs	r3, #48	; 0x30
 800a1dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1e0:	9503      	str	r5, [sp, #12]
 800a1e2:	f04f 0b01 	mov.w	fp, #1
 800a1e6:	4637      	mov	r7, r6
 800a1e8:	463d      	mov	r5, r7
 800a1ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a1ee:	b10b      	cbz	r3, 800a1f4 <_svfiprintf_r+0x58>
 800a1f0:	2b25      	cmp	r3, #37	; 0x25
 800a1f2:	d13e      	bne.n	800a272 <_svfiprintf_r+0xd6>
 800a1f4:	ebb7 0a06 	subs.w	sl, r7, r6
 800a1f8:	d00b      	beq.n	800a212 <_svfiprintf_r+0x76>
 800a1fa:	4653      	mov	r3, sl
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	4621      	mov	r1, r4
 800a200:	4640      	mov	r0, r8
 800a202:	f7ff ff71 	bl	800a0e8 <__ssputs_r>
 800a206:	3001      	adds	r0, #1
 800a208:	f000 80a4 	beq.w	800a354 <_svfiprintf_r+0x1b8>
 800a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20e:	4453      	add	r3, sl
 800a210:	9309      	str	r3, [sp, #36]	; 0x24
 800a212:	783b      	ldrb	r3, [r7, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 809d 	beq.w	800a354 <_svfiprintf_r+0x1b8>
 800a21a:	2300      	movs	r3, #0
 800a21c:	f04f 32ff 	mov.w	r2, #4294967295
 800a220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a224:	9304      	str	r3, [sp, #16]
 800a226:	9307      	str	r3, [sp, #28]
 800a228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a22c:	931a      	str	r3, [sp, #104]	; 0x68
 800a22e:	462f      	mov	r7, r5
 800a230:	2205      	movs	r2, #5
 800a232:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a236:	4850      	ldr	r0, [pc, #320]	; (800a378 <_svfiprintf_r+0x1dc>)
 800a238:	f7f5 ffd2 	bl	80001e0 <memchr>
 800a23c:	9b04      	ldr	r3, [sp, #16]
 800a23e:	b9d0      	cbnz	r0, 800a276 <_svfiprintf_r+0xda>
 800a240:	06d9      	lsls	r1, r3, #27
 800a242:	bf44      	itt	mi
 800a244:	2220      	movmi	r2, #32
 800a246:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a24a:	071a      	lsls	r2, r3, #28
 800a24c:	bf44      	itt	mi
 800a24e:	222b      	movmi	r2, #43	; 0x2b
 800a250:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a254:	782a      	ldrb	r2, [r5, #0]
 800a256:	2a2a      	cmp	r2, #42	; 0x2a
 800a258:	d015      	beq.n	800a286 <_svfiprintf_r+0xea>
 800a25a:	9a07      	ldr	r2, [sp, #28]
 800a25c:	462f      	mov	r7, r5
 800a25e:	2000      	movs	r0, #0
 800a260:	250a      	movs	r5, #10
 800a262:	4639      	mov	r1, r7
 800a264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a268:	3b30      	subs	r3, #48	; 0x30
 800a26a:	2b09      	cmp	r3, #9
 800a26c:	d94d      	bls.n	800a30a <_svfiprintf_r+0x16e>
 800a26e:	b1b8      	cbz	r0, 800a2a0 <_svfiprintf_r+0x104>
 800a270:	e00f      	b.n	800a292 <_svfiprintf_r+0xf6>
 800a272:	462f      	mov	r7, r5
 800a274:	e7b8      	b.n	800a1e8 <_svfiprintf_r+0x4c>
 800a276:	4a40      	ldr	r2, [pc, #256]	; (800a378 <_svfiprintf_r+0x1dc>)
 800a278:	1a80      	subs	r0, r0, r2
 800a27a:	fa0b f000 	lsl.w	r0, fp, r0
 800a27e:	4318      	orrs	r0, r3
 800a280:	9004      	str	r0, [sp, #16]
 800a282:	463d      	mov	r5, r7
 800a284:	e7d3      	b.n	800a22e <_svfiprintf_r+0x92>
 800a286:	9a03      	ldr	r2, [sp, #12]
 800a288:	1d11      	adds	r1, r2, #4
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	9103      	str	r1, [sp, #12]
 800a28e:	2a00      	cmp	r2, #0
 800a290:	db01      	blt.n	800a296 <_svfiprintf_r+0xfa>
 800a292:	9207      	str	r2, [sp, #28]
 800a294:	e004      	b.n	800a2a0 <_svfiprintf_r+0x104>
 800a296:	4252      	negs	r2, r2
 800a298:	f043 0302 	orr.w	r3, r3, #2
 800a29c:	9207      	str	r2, [sp, #28]
 800a29e:	9304      	str	r3, [sp, #16]
 800a2a0:	783b      	ldrb	r3, [r7, #0]
 800a2a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a2a4:	d10c      	bne.n	800a2c0 <_svfiprintf_r+0x124>
 800a2a6:	787b      	ldrb	r3, [r7, #1]
 800a2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2aa:	d133      	bne.n	800a314 <_svfiprintf_r+0x178>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	1d1a      	adds	r2, r3, #4
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	9203      	str	r2, [sp, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	bfb8      	it	lt
 800a2b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2bc:	3702      	adds	r7, #2
 800a2be:	9305      	str	r3, [sp, #20]
 800a2c0:	4d2e      	ldr	r5, [pc, #184]	; (800a37c <_svfiprintf_r+0x1e0>)
 800a2c2:	7839      	ldrb	r1, [r7, #0]
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	f7f5 ff8a 	bl	80001e0 <memchr>
 800a2cc:	b138      	cbz	r0, 800a2de <_svfiprintf_r+0x142>
 800a2ce:	2340      	movs	r3, #64	; 0x40
 800a2d0:	1b40      	subs	r0, r0, r5
 800a2d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2d6:	9b04      	ldr	r3, [sp, #16]
 800a2d8:	4303      	orrs	r3, r0
 800a2da:	3701      	adds	r7, #1
 800a2dc:	9304      	str	r3, [sp, #16]
 800a2de:	7839      	ldrb	r1, [r7, #0]
 800a2e0:	4827      	ldr	r0, [pc, #156]	; (800a380 <_svfiprintf_r+0x1e4>)
 800a2e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2e6:	2206      	movs	r2, #6
 800a2e8:	1c7e      	adds	r6, r7, #1
 800a2ea:	f7f5 ff79 	bl	80001e0 <memchr>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d038      	beq.n	800a364 <_svfiprintf_r+0x1c8>
 800a2f2:	4b24      	ldr	r3, [pc, #144]	; (800a384 <_svfiprintf_r+0x1e8>)
 800a2f4:	bb13      	cbnz	r3, 800a33c <_svfiprintf_r+0x1a0>
 800a2f6:	9b03      	ldr	r3, [sp, #12]
 800a2f8:	3307      	adds	r3, #7
 800a2fa:	f023 0307 	bic.w	r3, r3, #7
 800a2fe:	3308      	adds	r3, #8
 800a300:	9303      	str	r3, [sp, #12]
 800a302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a304:	444b      	add	r3, r9
 800a306:	9309      	str	r3, [sp, #36]	; 0x24
 800a308:	e76d      	b.n	800a1e6 <_svfiprintf_r+0x4a>
 800a30a:	fb05 3202 	mla	r2, r5, r2, r3
 800a30e:	2001      	movs	r0, #1
 800a310:	460f      	mov	r7, r1
 800a312:	e7a6      	b.n	800a262 <_svfiprintf_r+0xc6>
 800a314:	2300      	movs	r3, #0
 800a316:	3701      	adds	r7, #1
 800a318:	9305      	str	r3, [sp, #20]
 800a31a:	4619      	mov	r1, r3
 800a31c:	250a      	movs	r5, #10
 800a31e:	4638      	mov	r0, r7
 800a320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a324:	3a30      	subs	r2, #48	; 0x30
 800a326:	2a09      	cmp	r2, #9
 800a328:	d903      	bls.n	800a332 <_svfiprintf_r+0x196>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0c8      	beq.n	800a2c0 <_svfiprintf_r+0x124>
 800a32e:	9105      	str	r1, [sp, #20]
 800a330:	e7c6      	b.n	800a2c0 <_svfiprintf_r+0x124>
 800a332:	fb05 2101 	mla	r1, r5, r1, r2
 800a336:	2301      	movs	r3, #1
 800a338:	4607      	mov	r7, r0
 800a33a:	e7f0      	b.n	800a31e <_svfiprintf_r+0x182>
 800a33c:	ab03      	add	r3, sp, #12
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	4622      	mov	r2, r4
 800a342:	4b11      	ldr	r3, [pc, #68]	; (800a388 <_svfiprintf_r+0x1ec>)
 800a344:	a904      	add	r1, sp, #16
 800a346:	4640      	mov	r0, r8
 800a348:	f7fe f98e 	bl	8008668 <_printf_float>
 800a34c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a350:	4681      	mov	r9, r0
 800a352:	d1d6      	bne.n	800a302 <_svfiprintf_r+0x166>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	065b      	lsls	r3, r3, #25
 800a358:	f53f af35 	bmi.w	800a1c6 <_svfiprintf_r+0x2a>
 800a35c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a35e:	b01d      	add	sp, #116	; 0x74
 800a360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a364:	ab03      	add	r3, sp, #12
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	4622      	mov	r2, r4
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <_svfiprintf_r+0x1ec>)
 800a36c:	a904      	add	r1, sp, #16
 800a36e:	4640      	mov	r0, r8
 800a370:	f7fe fc30 	bl	8008bd4 <_printf_i>
 800a374:	e7ea      	b.n	800a34c <_svfiprintf_r+0x1b0>
 800a376:	bf00      	nop
 800a378:	0800a624 	.word	0x0800a624
 800a37c:	0800a62a 	.word	0x0800a62a
 800a380:	0800a62e 	.word	0x0800a62e
 800a384:	08008669 	.word	0x08008669
 800a388:	0800a0e9 	.word	0x0800a0e9

0800a38c <__ascii_mbtowc>:
 800a38c:	b082      	sub	sp, #8
 800a38e:	b901      	cbnz	r1, 800a392 <__ascii_mbtowc+0x6>
 800a390:	a901      	add	r1, sp, #4
 800a392:	b142      	cbz	r2, 800a3a6 <__ascii_mbtowc+0x1a>
 800a394:	b14b      	cbz	r3, 800a3aa <__ascii_mbtowc+0x1e>
 800a396:	7813      	ldrb	r3, [r2, #0]
 800a398:	600b      	str	r3, [r1, #0]
 800a39a:	7812      	ldrb	r2, [r2, #0]
 800a39c:	1c10      	adds	r0, r2, #0
 800a39e:	bf18      	it	ne
 800a3a0:	2001      	movne	r0, #1
 800a3a2:	b002      	add	sp, #8
 800a3a4:	4770      	bx	lr
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	e7fb      	b.n	800a3a2 <__ascii_mbtowc+0x16>
 800a3aa:	f06f 0001 	mvn.w	r0, #1
 800a3ae:	e7f8      	b.n	800a3a2 <__ascii_mbtowc+0x16>

0800a3b0 <memmove>:
 800a3b0:	4288      	cmp	r0, r1
 800a3b2:	b510      	push	{r4, lr}
 800a3b4:	eb01 0302 	add.w	r3, r1, r2
 800a3b8:	d807      	bhi.n	800a3ca <memmove+0x1a>
 800a3ba:	1e42      	subs	r2, r0, #1
 800a3bc:	4299      	cmp	r1, r3
 800a3be:	d00a      	beq.n	800a3d6 <memmove+0x26>
 800a3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a3c8:	e7f8      	b.n	800a3bc <memmove+0xc>
 800a3ca:	4283      	cmp	r3, r0
 800a3cc:	d9f5      	bls.n	800a3ba <memmove+0xa>
 800a3ce:	1881      	adds	r1, r0, r2
 800a3d0:	1ad2      	subs	r2, r2, r3
 800a3d2:	42d3      	cmn	r3, r2
 800a3d4:	d100      	bne.n	800a3d8 <memmove+0x28>
 800a3d6:	bd10      	pop	{r4, pc}
 800a3d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a3e0:	e7f7      	b.n	800a3d2 <memmove+0x22>

0800a3e2 <_realloc_r>:
 800a3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	4614      	mov	r4, r2
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	b921      	cbnz	r1, 800a3f6 <_realloc_r+0x14>
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3f2:	f7fe b84b 	b.w	800848c <_malloc_r>
 800a3f6:	b922      	cbnz	r2, 800a402 <_realloc_r+0x20>
 800a3f8:	f7fd fffa 	bl	80083f0 <_free_r>
 800a3fc:	4625      	mov	r5, r4
 800a3fe:	4628      	mov	r0, r5
 800a400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a402:	f000 f821 	bl	800a448 <_malloc_usable_size_r>
 800a406:	42a0      	cmp	r0, r4
 800a408:	d20f      	bcs.n	800a42a <_realloc_r+0x48>
 800a40a:	4621      	mov	r1, r4
 800a40c:	4638      	mov	r0, r7
 800a40e:	f7fe f83d 	bl	800848c <_malloc_r>
 800a412:	4605      	mov	r5, r0
 800a414:	2800      	cmp	r0, #0
 800a416:	d0f2      	beq.n	800a3fe <_realloc_r+0x1c>
 800a418:	4631      	mov	r1, r6
 800a41a:	4622      	mov	r2, r4
 800a41c:	f7ff fb6e 	bl	8009afc <memcpy>
 800a420:	4631      	mov	r1, r6
 800a422:	4638      	mov	r0, r7
 800a424:	f7fd ffe4 	bl	80083f0 <_free_r>
 800a428:	e7e9      	b.n	800a3fe <_realloc_r+0x1c>
 800a42a:	4635      	mov	r5, r6
 800a42c:	e7e7      	b.n	800a3fe <_realloc_r+0x1c>

0800a42e <__ascii_wctomb>:
 800a42e:	b149      	cbz	r1, 800a444 <__ascii_wctomb+0x16>
 800a430:	2aff      	cmp	r2, #255	; 0xff
 800a432:	bf85      	ittet	hi
 800a434:	238a      	movhi	r3, #138	; 0x8a
 800a436:	6003      	strhi	r3, [r0, #0]
 800a438:	700a      	strbls	r2, [r1, #0]
 800a43a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a43e:	bf98      	it	ls
 800a440:	2001      	movls	r0, #1
 800a442:	4770      	bx	lr
 800a444:	4608      	mov	r0, r1
 800a446:	4770      	bx	lr

0800a448 <_malloc_usable_size_r>:
 800a448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a44c:	1f18      	subs	r0, r3, #4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bfbc      	itt	lt
 800a452:	580b      	ldrlt	r3, [r1, r0]
 800a454:	18c0      	addlt	r0, r0, r3
 800a456:	4770      	bx	lr

0800a458 <_init>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr

0800a464 <_fini>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr

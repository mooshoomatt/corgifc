
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800cd68  0800cd68  0001cd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d068  0800d068  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800d068  0800d068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d070  0800d070  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d070  0800d070  0001d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d074  0800d074  0001d074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800d078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000358  0800d3d0  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001f88  0800d3d0  00021f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d293  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a3b  00000000  00000000  0003d61b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001490  00000000  00000000  00041058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  000424e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002347b  00000000  00000000  000437e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001316f  00000000  00000000  00066c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c404b  00000000  00000000  00079dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013de1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000601c  00000000  00000000  0013de98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd50 	.word	0x0800cd50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800cd50 	.word	0x0800cd50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	2200      	movs	r2, #0
 8000f68:	2130      	movs	r1, #48	; 0x30
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f002 fd1a 	bl	80039a4 <HAL_I2C_Mem_Read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000f7a:	7a3b      	ldrb	r3, [r7, #8]
 8000f7c:	2b1e      	cmp	r3, #30
 8000f7e:	d001      	beq.n	8000f84 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2200      	movs	r2, #0
 8000f98:	21d0      	movs	r1, #208	; 0xd0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f002 fd02 	bl	80039a4 <HAL_I2C_Mem_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000faa:	7a3b      	ldrb	r3, [r7, #8]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d001      	beq.n	8000fb4 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <BMI088_I2C_GYRO_INIT>:

/* CUSTOM GYROSCOPE SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_GYRO_INIT(I2C_HandleTypeDef *hi2c)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	 * WRITING BACK TO THE REGISTER
	 */

	HAL_StatusTypeDef ret;
	uint8_t buf[1]; // Tx/Rx Buffer
	ret = HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
	// ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_RANGE, buf));

	// SET GYROSCOPE DATA RATE AND BANDWIDTH
	// DATA RATE: [1000 HZ]    400 HZ
	// BANDWIDTH: [116 Hz]     47 HZ
	buf[0] = 0x82;
 8000fca:	2382      	movs	r3, #130	; 0x82
 8000fcc:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_BANDWIDTH, buf);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	2168      	movs	r1, #104	; 0x68
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f878 	bl	80010cc <BMI088_I2C_Reg_Write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	73fb      	strb	r3, [r7, #15]

	// SET GYROSCOPE INT3 MODE TO PUSH-PULL
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2216      	movs	r2, #22
 8000fec:	2168      	movs	r1, #104	; 0x68
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f88b 	bl	800110a <BMI088_I2C_Reg_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	73fb      	strb	r3, [r7, #15]
	buf[0] &= 0xFD;
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	f023 0302 	bic.w	r3, r3, #2
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2216      	movs	r2, #22
 800100e:	2168      	movs	r1, #104	; 0x68
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f85b 	bl	80010cc <BMI088_I2C_Reg_Write>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	4313      	orrs	r3, r2
 800101e:	73fb      	strb	r3, [r7, #15]

	// MAP GYROSCOPE DATA-READY INTERRUPT TO INT3
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2218      	movs	r2, #24
 8001026:	2168      	movs	r1, #104	; 0x68
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f86e 	bl	800110a <BMI088_I2C_Reg_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4313      	orrs	r3, r2
 8001036:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x01;
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2218      	movs	r2, #24
 8001048:	2168      	movs	r1, #104	; 0x68
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f83e 	bl	80010cc <BMI088_I2C_Reg_Write>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4313      	orrs	r3, r2
 8001058:	73fb      	strb	r3, [r7, #15]

	// ENABLE GYROSCOPE DATA-READY INTERRUPT
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2215      	movs	r2, #21
 8001060:	2168      	movs	r1, #104	; 0x68
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f851 	bl	800110a <BMI088_I2C_Reg_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4313      	orrs	r3, r2
 8001070:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x80;
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001078:	b2db      	uxtb	r3, r3
 800107a:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2215      	movs	r2, #21
 8001082:	2168      	movs	r1, #104	; 0x68
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f821 	bl	80010cc <BMI088_I2C_Reg_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	4313      	orrs	r3, r2
 8001092:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <BMI088_I2C_Read_Gyro>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_ACC_ADDR << 1, ACC_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* READ ALL GYROSCOPE DATA IN POLLING MODE */
HAL_StatusTypeDef BMI088_I2C_Read_Gyro(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af04      	add	r7, sp, #16
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2306      	movs	r3, #6
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	2202      	movs	r2, #2
 80010ba:	21d0      	movs	r1, #208	; 0xd0
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f002 fc71 	bl	80039a4 <HAL_I2C_Mem_Read>
 80010c2:	4603      	mov	r3, r0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <BMI088_I2C_Reg_Write>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* WRITE REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
 80010da:	4613      	mov	r3, r2
 80010dc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b299      	uxth	r1, r3
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f002 fb58 	bl	80037b0 <HAL_I2C_Mem_Write>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <BMI088_I2C_Reg_Read>:

/* READ REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b088      	sub	sp, #32
 800110e:	af04      	add	r7, sp, #16
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	72fb      	strb	r3, [r7, #11]
 8001118:	4613      	mov	r3, r2
 800111a:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	b29b      	uxth	r3, r3
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	b299      	uxth	r1, r3
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	b29a      	uxth	r2, r3
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f002 fc33 	bl	80039a4 <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <PID3_Init>:

#include "PID3.h"

/* INITIALIZATION FUNCTION */
PID_StatusTypeDef PID3_Init(PID3 *pid, const float *p, const float *i, const float*d)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
	/* SET PID GAINS */
	pid->Kp[0] = p[0]; pid->Kp[1] = p[1]; pid->Kp[2] = p[2];
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	615a      	str	r2, [r3, #20]

	pid->Ki[0] = i[0]; pid->Ki[1] = i[1]; pid->Ki[2] = i[2];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	61da      	str	r2, [r3, #28]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	621a      	str	r2, [r3, #32]

	pid->Kd[0] = d[0]; pid->Kd[1] = d[1]; pid->Kd[2] = d[2];
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c

	/* CLEAR IMPORTANT VARIABLES */
	pid->out[0] = 0.0; pid->out[1] = 0.0; pid->out[2] = 0.0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]

	pid->integral[0] = 0.0; pid->integral[1] = 0.0; pid->integral[2] = 0.0;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	661a      	str	r2, [r3, #96]	; 0x60
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	665a      	str	r2, [r3, #100]	; 0x64

	pid->prevError[0] = 0.0; pid->prevError[1] = 0.0; pid->prevError[2] = 0.0;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	669a      	str	r2, [r3, #104]	; 0x68
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	671a      	str	r2, [r3, #112]	; 0x70

	/* SET CLAMPS */
	pid->intLimMax = PID_MAXINT;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4a08      	ldr	r2, [pc, #32]	; (800120c <PID3_Init+0xc4>)
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
	pid->intLimMin = PID_MININT;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <PID3_Init+0xc8>)
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
	pid->outLimMax = PID_MAXOUT;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <PID3_Init+0xc4>)
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
	pid->outLimMin = PID_MINOUT;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <PID3_Init+0xc8>)
 80011fc:	63da      	str	r2, [r3, #60]	; 0x3c

	return PID_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	447a0000 	.word	0x447a0000
 8001210:	c47a0000 	.word	0xc47a0000

08001214 <PID3_Set_Tau>:

/* SET FILTER TIME CONSTANT */
PID_StatusTypeDef PID3_Set_Tau(PID3 *pid, float t)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	ed87 0a00 	vstr	s0, [r7]
	if (t < 0.0) { return PID_ERROR; }
 8001220:	edd7 7a00 	vldr	s15, [r7]
 8001224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	d501      	bpl.n	8001232 <PID3_Set_Tau+0x1e>
 800122e:	2301      	movs	r3, #1
 8001230:	e003      	b.n	800123a <PID3_Set_Tau+0x26>

	pid->tau = t;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	641a      	str	r2, [r3, #64]	; 0x40

	return PID_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PID3_Set_Integrator_Limit>:

/* SET INTEGRATOR LIMIT */
PID_StatusTypeDef PID3_Set_Integrator_Limit(PID3 *pid, float min, float max)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001252:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((min >= 0.0) | (max <= 0.0)) { return PID_ERROR; }
 8001256:	edd7 7a02 	vldr	s15, [r7, #8]
 800125a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001262:	bfac      	ite	ge
 8001264:	2301      	movge	r3, #1
 8001266:	2300      	movlt	r3, #0
 8001268:	b2da      	uxtb	r2, r3
 800126a:	edd7 7a01 	vldr	s15, [r7, #4]
 800126e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	bf94      	ite	ls
 8001278:	2301      	movls	r3, #1
 800127a:	2300      	movhi	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <PID3_Set_Integrator_Limit+0x44>
 8001286:	2301      	movs	r3, #1
 8001288:	e006      	b.n	8001298 <PID3_Set_Integrator_Limit+0x52>

	pid->intLimMax = max;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
	pid->intLimMin = min;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	635a      	str	r2, [r3, #52]	; 0x34

	return PID_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <PID3_Set_Output_Limit>:


/* SET OUTPUT LIMIT */
PID_StatusTypeDef PID3_Set_Output_Limit(PID3 *pid, float min, float max)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80012b0:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((min >= 0.0) | (max <= 0.0)) { return PID_ERROR; }
 80012b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	bfac      	ite	ge
 80012c2:	2301      	movge	r3, #1
 80012c4:	2300      	movlt	r3, #0
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	bf94      	ite	ls
 80012d6:	2301      	movls	r3, #1
 80012d8:	2300      	movhi	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <PID3_Set_Output_Limit+0x44>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e006      	b.n	80012f6 <PID3_Set_Output_Limit+0x52>

	pid->outLimMax = max;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
	pid->outLimMin = min;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c

	return PID_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <PID3_Update>:

/* ADVANCE TIMESTEP FUNCTION */
PID_StatusTypeDef PID3_Update(PID3 *pid, float *set, float *rot, float T)
{
 8001304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	ed87 0a00 	vstr	s0, [r7]
	// FOR EACH AXIS
	for (int i = 0; i < 3; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e1d6      	b.n	80016ca <PID3_Update+0x3c6>
	{
		// CALCULATE ERROR
		pid->error[i] = set[i] - rot[i];
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	4413      	add	r3, r2
 8001324:	ed93 7a00 	vldr	s14, [r3]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3310      	adds	r3, #16
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3304      	adds	r3, #4
 8001344:	edc3 7a00 	vstr	s15, [r3]

		// CALCULATE PROPORTIONAL TERM
		pid->proportional[i] = pid->Kp[i] * pid->error[i];
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3302      	adds	r3, #2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3304      	adds	r3, #4
 8001354:	ed93 7a00 	vldr	s14, [r3]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3310      	adds	r3, #16
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	3304      	adds	r3, #4
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3314      	adds	r3, #20
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	edc3 7a00 	vstr	s15, [r3]

		// CALCULATE INTEGRAL TERM AND CLAMP
		pid->integral[i] += 0.5*(pid->Ki[i])*T*(pid->error[i] + pid->prevError[i]);
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3316      	adds	r3, #22
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8dd 	bl	8000548 <__aeabi_f2d>
 800138e:	4680      	mov	r8, r0
 8001390:	4689      	mov	r9, r1
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3306      	adds	r3, #6
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8d2 	bl	8000548 <__aeabi_f2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4bb4      	ldr	r3, [pc, #720]	; (800167c <PID3_Update+0x378>)
 80013aa:	f7ff f925 	bl	80005f8 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4692      	mov	sl, r2
 80013b4:	469b      	mov	fp, r3
 80013b6:	6838      	ldr	r0, [r7, #0]
 80013b8:	f7ff f8c6 	bl	8000548 <__aeabi_f2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4650      	mov	r0, sl
 80013c2:	4659      	mov	r1, fp
 80013c4:	f7ff f918 	bl	80005f8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4692      	mov	sl, r2
 80013ce:	469b      	mov	fp, r3
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3310      	adds	r3, #16
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3304      	adds	r3, #4
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	331a      	adds	r3, #26
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f2:	ee17 0a90 	vmov	r0, s15
 80013f6:	f7ff f8a7 	bl	8000548 <__aeabi_f2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4650      	mov	r0, sl
 8001400:	4659      	mov	r1, fp
 8001402:	f7ff f8f9 	bl	80005f8 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4640      	mov	r0, r8
 800140c:	4649      	mov	r1, r9
 800140e:	f7fe ff3d 	bl	800028c <__adddf3>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fbc5 	bl	8000ba8 <__aeabi_d2f>
 800141e:	4601      	mov	r1, r0
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3316      	adds	r3, #22
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	6019      	str	r1, [r3, #0]
		pid->integral[i] = (pid->integral[i] > pid->intLimMax) ? pid->intLimMax : pid->integral[i];
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3316      	adds	r3, #22
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3304      	adds	r3, #4
 800143a:	ed93 7a00 	vldr	s14, [r3]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001444:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144c:	dd02      	ble.n	8001454 <PID3_Update+0x150>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	e006      	b.n	8001462 <PID3_Update+0x15e>
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3316      	adds	r3, #22
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	3304      	adds	r3, #4
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68f9      	ldr	r1, [r7, #12]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	3216      	adds	r2, #22
 8001468:	0092      	lsls	r2, r2, #2
 800146a:	440a      	add	r2, r1
 800146c:	3204      	adds	r2, #4
 800146e:	6013      	str	r3, [r2, #0]
		pid->integral[i] = (pid->integral[i] < pid->intLimMin) ? pid->intLimMin : pid->integral[i];
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3316      	adds	r3, #22
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d502      	bpl.n	8001496 <PID3_Update+0x192>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	e006      	b.n	80014a4 <PID3_Update+0x1a0>
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3316      	adds	r3, #22
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3304      	adds	r3, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	3216      	adds	r2, #22
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	440a      	add	r2, r1
 80014ae:	3204      	adds	r2, #4
 80014b0:	6013      	str	r3, [r2, #0]

		// CALCULATE DERIVATIVE TERM (ON MEASUREMENT)
		if (T == 0) { return PID_ERROR; }
 80014b2:	edd7 7a00 	vldr	s15, [r7]
 80014b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	d101      	bne.n	80014c4 <PID3_Update+0x1c0>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e107      	b.n	80016d4 <PID3_Update+0x3d0>
		pid->derivative[i] = -(2.0*(pid->Kd[i])*(rot[i] - pid->prevRot[i]) + (2.0*pid->tau - T)*pid->derivative[i])/(2.0*pid->tau + T);
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3308      	adds	r3, #8
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3304      	adds	r3, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f838 	bl	8000548 <__aeabi_f2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	f7fe fed6 	bl	800028c <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4690      	mov	r8, r2
 80014e6:	4699      	mov	r9, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3320      	adds	r3, #32
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001506:	ee17 0a90 	vmov	r0, s15
 800150a:	f7ff f81d 	bl	8000548 <__aeabi_f2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4640      	mov	r0, r8
 8001514:	4649      	mov	r1, r9
 8001516:	f7ff f86f 	bl	80005f8 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4690      	mov	r8, r2
 8001520:	4699      	mov	r9, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f80e 	bl	8000548 <__aeabi_f2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	f7fe feac 	bl	800028c <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4692      	mov	sl, r2
 800153a:	469b      	mov	fp, r3
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4650      	mov	r0, sl
 8001548:	4659      	mov	r1, fp
 800154a:	f7fe fe9d 	bl	8000288 <__aeabi_dsub>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4692      	mov	sl, r2
 8001554:	469b      	mov	fp, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	331c      	adds	r3, #28
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3304      	adds	r3, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffef 	bl	8000548 <__aeabi_f2d>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4650      	mov	r0, sl
 8001570:	4659      	mov	r1, fp
 8001572:	f7ff f841 	bl	80005f8 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4640      	mov	r0, r8
 800157c:	4649      	mov	r1, r9
 800157e:	f7fe fe85 	bl	800028c <__adddf3>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4614      	mov	r4, r2
 8001588:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffd9 	bl	8000548 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	f7fe fe77 	bl	800028c <__adddf3>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4690      	mov	r8, r2
 80015a4:	4699      	mov	r9, r3
 80015a6:	6838      	ldr	r0, [r7, #0]
 80015a8:	f7fe ffce 	bl	8000548 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4640      	mov	r0, r8
 80015b2:	4649      	mov	r1, r9
 80015b4:	f7fe fe6a 	bl	800028c <__adddf3>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7ff f944 	bl	800084c <__aeabi_ddiv>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff faec 	bl	8000ba8 <__aeabi_d2f>
 80015d0:	4601      	mov	r1, r0
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	331c      	adds	r3, #28
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	3304      	adds	r3, #4
 80015de:	6019      	str	r1, [r3, #0]

		// CALCULATE OUTPUT AND CLAMP
		pid->out[i] = pid->proportional[i] + pid->integral[i] + pid->derivative[i];
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3314      	adds	r3, #20
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	ed93 7a00 	vldr	s14, [r3]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3316      	adds	r3, #22
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3304      	adds	r3, #4
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	331c      	adds	r3, #28
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3304      	adds	r3, #4
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	edc3 7a00 	vstr	s15, [r3]
		pid->out[i] = (pid->out[i] > pid->outLimMax) ? pid->outLimMax : pid->out[i];
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	dd02      	ble.n	8001644 <PID3_Update+0x340>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	e004      	b.n	800164e <PID3_Update+0x34a>
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68f9      	ldr	r1, [r7, #12]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	440a      	add	r2, r1
 8001656:	6013      	str	r3, [r2, #0]
		pid->out[i] = (pid->out[i] < pid->outLimMin) ? pid->outLimMin : pid->out[i];
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800166a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d505      	bpl.n	8001680 <PID3_Update+0x37c>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001678:	e007      	b.n	800168a <PID3_Update+0x386>
 800167a:	bf00      	nop
 800167c:	3fe00000 	.word	0x3fe00000
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	440a      	add	r2, r1
 8001692:	6013      	str	r3, [r2, #0]

		// UPDATE TEMPVARS
		pid->prevError[i] = pid->error[i];
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3310      	adds	r3, #16
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3304      	adds	r3, #4
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	331a      	adds	r3, #26
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	601a      	str	r2, [r3, #0]
		pid->prevRot[i]   = rot[i];
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68f9      	ldr	r1, [r7, #12]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3320      	adds	r3, #32
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	f77f ae25 	ble.w	800131c <PID3_Update+0x18>
	}

	return PID_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016de:	bf00      	nop

080016e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e4:	f001 fbba 	bl	8002e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e8:	f000 f84e 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ec:	f000 fa9c 	bl	8001c28 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f0:	f000 f8b4 	bl	800185c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80016f4:	f008 fc9c 	bl	800a030 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80016f8:	f000 fa60 	bl	8001bbc <MX_TIM7_Init>
  MX_TIM6_Init();
 80016fc:	f000 fa28 	bl	8001b50 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001700:	f000 f8da 	bl	80018b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001704:	f000 f952 	bl	80019ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8001708:	f000 f9c4 	bl	8001a94 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);	// START 50Hz SERIAL UPDATE TIMER
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <main+0x8c>)
 800170e:	f004 fce8 	bl	80060e2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);    	// START TIMEKEEPING TIMER
 8001712:	4817      	ldr	r0, [pc, #92]	; (8001770 <main+0x90>)
 8001714:	f004 fcc1 	bl	800609a <HAL_TIM_Base_Start>

  BMI088_Wrapper_Init();			// INITIALIZE GYROSCOPE
 8001718:	f000 fd64 	bl	80021e4 <BMI088_Wrapper_Init>
  OS125_Wrapper_Init();				// INITIALIZE ONESHOT125 OUTPUT DRIVER
 800171c:	f000 fd78 	bl	8002210 <OS125_Wrapper_Init>
  PID3_Wrapper_Init();				// INITALIZE PID CONTROLLER
 8001720:	f000 fd96 	bl	8002250 <PID3_Wrapper_Init>
  QUAD_Wrapper_Init();				// INITIALIZE QUAD STRUCTURE
 8001724:	f000 fd40 	bl	80021a8 <QUAD_Wrapper_Init>

  PWM_INPUT_START();             	// START RX INPUT CAPTURE TIMERS
 8001728:	f000 fdd2 	bl	80022d0 <PWM_INPUT_START>
  PWM_OUTPUT_START();				// START PWM OUTPUT TIMERS
 800172c:	f000 fdf0 	bl	8002310 <PWM_OUTPUT_START>

  // TURN ON STATUS LED
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	480f      	ldr	r0, [pc, #60]	; (8001774 <main+0x94>)
 8001736:	f001 fed1 	bl	80034dc <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // CHECK IF DATA_READY FLAG IS SET
	  if (DATA_STATUS == DATA_READY)
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <main+0x98>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <main+0x72>
	  {
		  QUAD_UPDATE(&quad, IC_Elapsed);
 8001744:	490d      	ldr	r1, [pc, #52]	; (800177c <main+0x9c>)
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <main+0xa0>)
 8001748:	f000 ff32 	bl	80025b0 <QUAD_UPDATE>

		  // RESET DATA_READY FLAG
		  DATA_STATUS = DATA_RESET;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <main+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
	  }

	  // CHECK IF UPDATE_READY FLAG IS SET
	  if (UPDATE_STATUS == UPDATE_READY)
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <main+0xa4>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d1ee      	bne.n	800173a <main+0x5a>
	  {
		  QUAD_SEND_ORIENTATION(&quad);
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <main+0xa0>)
 800175e:	f001 f89b 	bl	8002898 <QUAD_SEND_ORIENTATION>

		  // RESET UPDATE_READY FLAG
		  UPDATE_STATUS = UPDATE_RESET;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <main+0xa4>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
	  if (DATA_STATUS == DATA_READY)
 8001768:	e7e7      	b.n	800173a <main+0x5a>
 800176a:	bf00      	nop
 800176c:	20000668 	.word	0x20000668
 8001770:	2000054c 	.word	0x2000054c
 8001774:	40020800 	.word	0x40020800
 8001778:	200003a0 	.word	0x200003a0
 800177c:	20000394 	.word	0x20000394
 8001780:	2000058c 	.word	0x2000058c
 8001784:	200003a1 	.word	0x200003a1

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	; 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f009 f998 	bl	800aacc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <SystemClock_Config+0xcc>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <SystemClock_Config+0xcc>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <SystemClock_Config+0xcc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <SystemClock_Config+0xd0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a21      	ldr	r2, [pc, #132]	; (8001858 <SystemClock_Config+0xd0>)
 80017d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <SystemClock_Config+0xd0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017f8:	2310      	movs	r3, #16
 80017fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 80017fc:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001802:	2302      	movs	r3, #2
 8001804:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001806:	2306      	movs	r3, #6
 8001808:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	4618      	mov	r0, r3
 8001810:	f003 ffcc 	bl	80057ac <HAL_RCC_OscConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800181a:	f000 fd8f 	bl	800233c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181e:	230f      	movs	r3, #15
 8001820:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800182a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800182e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2104      	movs	r1, #4
 800183c:	4618      	mov	r0, r3
 800183e:	f004 fa25 	bl	8005c8c <HAL_RCC_ClockConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001848:	f000 fd78 	bl	800233c <Error_Handler>
  }
}
 800184c:	bf00      	nop
 800184e:	3750      	adds	r7, #80	; 0x50
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C1_Init+0x50>)
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <MX_I2C1_Init+0x54>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_I2C1_Init+0x50>)
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_I2C1_Init+0x58>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_I2C1_Init+0x50>)
 800187a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_I2C1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_I2C1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_I2C1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_I2C1_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_I2C1_Init+0x50>)
 800189a:	f001 fe51 	bl	8003540 <HAL_I2C_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a4:	f000 fd4a 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000042c 	.word	0x2000042c
 80018b0:	40005400 	.word	0x40005400
 80018b4:	00061a80 	.word	0x00061a80

080018b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018da:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <MX_TIM2_Init+0xf0>)
 80018dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1 - 1;
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_TIM2_Init+0xf0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <MX_TIM2_Init+0xf0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000 - 1;
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_TIM2_Init+0xf0>)
 80018f0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80018f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <MX_TIM2_Init+0xf0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <MX_TIM2_Init+0xf0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001902:	4829      	ldr	r0, [pc, #164]	; (80019a8 <MX_TIM2_Init+0xf0>)
 8001904:	f004 fc11 	bl	800612a <HAL_TIM_PWM_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800190e:	f000 fd15 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	4619      	mov	r1, r3
 8001920:	4821      	ldr	r0, [pc, #132]	; (80019a8 <MX_TIM2_Init+0xf0>)
 8001922:	f005 fbc3 	bl	80070ac <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800192c:	f000 fd06 	bl	800233c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001930:	2360      	movs	r3, #96	; 0x60
 8001932:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2200      	movs	r2, #0
 8001944:	4619      	mov	r1, r3
 8001946:	4818      	ldr	r0, [pc, #96]	; (80019a8 <MX_TIM2_Init+0xf0>)
 8001948:	f004 fee8 	bl	800671c <HAL_TIM_PWM_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001952:	f000 fcf3 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2204      	movs	r2, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MX_TIM2_Init+0xf0>)
 800195e:	f004 fedd 	bl	800671c <HAL_TIM_PWM_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001968:	f000 fce8 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2208      	movs	r2, #8
 8001970:	4619      	mov	r1, r3
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_TIM2_Init+0xf0>)
 8001974:	f004 fed2 	bl	800671c <HAL_TIM_PWM_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800197e:	f000 fcdd 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	220c      	movs	r2, #12
 8001986:	4619      	mov	r1, r3
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <MX_TIM2_Init+0xf0>)
 800198a:	f004 fec7 	bl	800671c <HAL_TIM_PWM_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001994:	f000 fcd2 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <MX_TIM2_Init+0xf0>)
 800199a:	f001 f957 	bl	8002c4c <HAL_TIM_MspPostInit>

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000628 	.word	0x20000628

080019ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019bc:	463b      	mov	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <MX_TIM3_Init+0xe0>)
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <MX_TIM3_Init+0xe4>)
 80019cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <MX_TIM3_Init+0xe0>)
 80019d0:	2247      	movs	r2, #71	; 0x47
 80019d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <MX_TIM3_Init+0xe0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536 - 1;
 80019da:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <MX_TIM3_Init+0xe0>)
 80019dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <MX_TIM3_Init+0xe0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <MX_TIM3_Init+0xe0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80019ee:	4827      	ldr	r0, [pc, #156]	; (8001a8c <MX_TIM3_Init+0xe0>)
 80019f0:	f004 fc5c 	bl	80062ac <HAL_TIM_IC_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019fa:	f000 fc9f 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481f      	ldr	r0, [pc, #124]	; (8001a8c <MX_TIM3_Init+0xe0>)
 8001a0e:	f005 fb4d 	bl	80070ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a18:	f000 fc90 	bl	800233c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a20:	2301      	movs	r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4619      	mov	r1, r3
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <MX_TIM3_Init+0xe0>)
 8001a34:	f004 fdd6 	bl	80065e4 <HAL_TIM_IC_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a3e:	f000 fc7d 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	2204      	movs	r2, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4810      	ldr	r0, [pc, #64]	; (8001a8c <MX_TIM3_Init+0xe0>)
 8001a4a:	f004 fdcb 	bl	80065e4 <HAL_TIM_IC_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001a54:	f000 fc72 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <MX_TIM3_Init+0xe0>)
 8001a60:	f004 fdc0 	bl	80065e4 <HAL_TIM_IC_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8001a6a:	f000 fc67 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	220c      	movs	r2, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_TIM3_Init+0xe0>)
 8001a76:	f004 fdb5 	bl	80065e4 <HAL_TIM_IC_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a80:	f000 fc5c 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000050c 	.word	0x2000050c
 8001a90:	40000400 	.word	0x40000400

08001a94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001ab2:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <MX_TIM4_Init+0xb8>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72 - 1;
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001ab8:	2247      	movs	r2, #71	; 0x47
 8001aba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536 - 1;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001ad6:	481c      	ldr	r0, [pc, #112]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001ad8:	f004 fbe8 	bl	80062ac <HAL_TIM_IC_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ae2:	f000 fc2b 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	4619      	mov	r1, r3
 8001af4:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001af6:	f005 fad9 	bl	80070ac <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b00:	f000 fc1c 	bl	800233c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480b      	ldr	r0, [pc, #44]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001b1c:	f004 fd62 	bl	80065e4 <HAL_TIM_IC_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001b26:	f000 fc09 	bl	800233c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_TIM4_Init+0xb4>)
 8001b32:	f004 fd57 	bl	80065e4 <HAL_TIM_IC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001b3c:	f000 fbfe 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200003ec 	.word	0x200003ec
 8001b4c:	40000800 	.word	0x40000800

08001b50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b56:	463b      	mov	r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b60:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <MX_TIM6_Init+0x68>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b66:	2247      	movs	r2, #71	; 0x47
 8001b68:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b80:	f004 fa60 	bl	8006044 <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b8a:	f000 fbd7 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_TIM6_Init+0x64>)
 8001b9c:	f005 fa86 	bl	80070ac <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001ba6:	f000 fbc9 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000054c 	.word	0x2000054c
 8001bb8:	40001000 	.word	0x40001000

08001bbc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bcc:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_TIM7_Init+0x68>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72 - 1;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bd2:	2247      	movs	r2, #71	; 0x47
 8001bd4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bde:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001be2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001bec:	f004 fa2a 	bl	8006044 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001bf6:	f000 fba1 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <MX_TIM7_Init+0x64>)
 8001c08:	f005 fa50 	bl	80070ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c12:	f000 fb93 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000668 	.word	0x20000668
 8001c24:	40001400 	.word	0x40001400

08001c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a30      	ldr	r2, [pc, #192]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <MX_GPIO_Init+0xe0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	21c0      	movs	r1, #192	; 0xc0
 8001cb2:	4816      	ldr	r0, [pc, #88]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001cb4:	f001 fc12 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8001cb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_GPIO_Init+0xe8>)
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480f      	ldr	r0, [pc, #60]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001cce:	f001 fa6b 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd2:	23c0      	movs	r3, #192	; 0xc0
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001cea:	f001 fa5d 	bl	80031a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2028      	movs	r0, #40	; 0x28
 8001cf4:	f001 fa21 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cf8:	2028      	movs	r0, #40	; 0x28
 8001cfa:	f001 fa3a 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	10110000 	.word	0x10110000

08001d14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/* GYROSCOPE DATA READY INTERRUPT CALLBACK */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_14) { DATA_STATUS = DATA_READY; }    // SET DATA_READY FLAG
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d24:	d102      	bne.n	8001d2c <HAL_GPIO_EXTI_Callback+0x18>
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x24>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	200003a0 	.word	0x200003a0

08001d3c <HAL_TIM_PeriodElapsedCallback>:

/* TIMER INTERRUPT CALLBACK FOR 50Hz UPDATE OVER SERIAL */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) { UPDATE_STATUS = UPDATE_READY; } // SET UPDATE_READY FLAG
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d102      	bne.n	8001d54 <HAL_TIM_PeriodElapsedCallback+0x18>
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40001400 	.word	0x40001400
 8001d64:	200003a1 	.word	0x200003a1

08001d68 <HAL_TIM_IC_CaptureCallback>:
 * Measures pulse widths on the following channels:
 * TIM3: CH1, CH2, CH3, CH4
 * TIM4: CH1, CH2
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	uint8_t idx     = 0; // CHANNEL INDEX
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
	uint8_t channel = 0; // TIMER CHANNEL
 8001d74:	2300      	movs	r3, #0
 8001d76:	73bb      	strb	r3, [r7, #14]

	// TIMER 3: 4 CHANNELS
	if (htim == &htim3)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a7e      	ldr	r2, [pc, #504]	; (8001f74 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f040 810d 	bne.w	8001f9c <HAL_TIM_IC_CaptureCallback+0x234>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7f1b      	ldrb	r3, [r3, #28]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d103      	bne.n	8001d92 <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			idx     = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7f1b      	ldrb	r3, [r3, #28]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d103      	bne.n	8001da2 <HAL_TIM_IC_CaptureCallback+0x3a>
		{
			idx     = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_2;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7f1b      	ldrb	r3, [r3, #28]
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d103      	bne.n	8001db2 <HAL_TIM_IC_CaptureCallback+0x4a>
		{
			idx     = 2;
 8001daa:	2302      	movs	r3, #2
 8001dac:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_3;
 8001dae:	2308      	movs	r3, #8
 8001db0:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7f1b      	ldrb	r3, [r3, #28]
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d103      	bne.n	8001dc2 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			idx     = 3;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_4;
 8001dbe:	230c      	movs	r3, #12
 8001dc0:	73bb      	strb	r3, [r7, #14]
		}

		//  PULSE WIDTH CAPTURE
		if (IC_Started[idx] == 0x0) {
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	4a6c      	ldr	r2, [pc, #432]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d167      	bne.n	8001e9e <HAL_TIM_IC_CaptureCallback+0x136>
			IC_ts1[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET FIRST TIMESTAMP
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f004 fd68 	bl	80068a8 <HAL_TIM_ReadCapturedValue>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	b291      	uxth	r1, r2
 8001dde:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x214>)
 8001de0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 8001de4:	7bbb      	ldrb	r3, [r7, #14]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_TIM_IC_CaptureCallback+0x94>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 020a 	bic.w	r2, r2, #10
 8001df8:	621a      	str	r2, [r3, #32]
 8001dfa:	e01f      	b.n	8001e3c <HAL_TIM_IC_CaptureCallback+0xd4>
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d108      	bne.n	8001e14 <HAL_TIM_IC_CaptureCallback+0xac>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e10:	621a      	str	r2, [r3, #32]
 8001e12:	e013      	b.n	8001e3c <HAL_TIM_IC_CaptureCallback+0xd4>
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d108      	bne.n	8001e2c <HAL_TIM_IC_CaptureCallback+0xc4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001e28:	621a      	str	r2, [r3, #32]
 8001e2a:	e007      	b.n	8001e3c <HAL_TIM_IC_CaptureCallback+0xd4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6a1a      	ldr	r2, [r3, #32]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001e3a:	621a      	str	r2, [r3, #32]
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <HAL_TIM_IC_CaptureCallback+0xec>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0202 	orr.w	r2, r2, #2
 8001e50:	621a      	str	r2, [r3, #32]
 8001e52:	e01f      	b.n	8001e94 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d108      	bne.n	8001e6c <HAL_TIM_IC_CaptureCallback+0x104>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0220 	orr.w	r2, r2, #32
 8001e68:	621a      	str	r2, [r3, #32]
 8001e6a:	e013      	b.n	8001e94 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001e6c:	7bbb      	ldrb	r3, [r7, #14]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d108      	bne.n	8001e84 <HAL_TIM_IC_CaptureCallback+0x11c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e80:	621a      	str	r2, [r3, #32]
 8001e82:	e007      	b.n	8001e94 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a1a      	ldr	r2, [r3, #32]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e92:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x1;															// UPDATE STATUS
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	4a38      	ldr	r2, [pc, #224]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	54d1      	strb	r1, [r2, r3]
 8001e9c:	e07e      	b.n	8001f9c <HAL_TIM_IC_CaptureCallback+0x234>
		} else if (IC_Started[idx] == 0x1) {
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	4a35      	ldr	r2, [pc, #212]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d178      	bne.n	8001f9c <HAL_TIM_IC_CaptureCallback+0x234>
			IC_ts2[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET SECOND TIMESTAMP
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f004 fcfa 	bl	80068a8 <HAL_TIM_ReadCapturedValue>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	b291      	uxth	r1, r2
 8001eba:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001ebc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			IC_Elapsed[idx] = IC_ts2[idx] - IC_ts1[idx];									// CALCULATE PULSE WIDTH
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ec8:	b299      	uxth	r1, r3
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x214>)
 8001ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	1a8a      	subs	r2, r1, r2
 8001ed8:	b291      	uxth	r1, r2
 8001eda:	4a2a      	ldr	r2, [pc, #168]	; (8001f84 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001edc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_TIM_IC_CaptureCallback+0x190>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 020a 	bic.w	r2, r2, #10
 8001ef4:	621a      	str	r2, [r3, #32]
 8001ef6:	e01f      	b.n	8001f38 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d108      	bne.n	8001f10 <HAL_TIM_IC_CaptureCallback+0x1a8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a1a      	ldr	r2, [r3, #32]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f0c:	621a      	str	r2, [r3, #32]
 8001f0e:	e013      	b.n	8001f38 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d108      	bne.n	8001f28 <HAL_TIM_IC_CaptureCallback+0x1c0>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001f24:	621a      	str	r2, [r3, #32]
 8001f26:	e007      	b.n	8001f38 <HAL_TIM_IC_CaptureCallback+0x1d0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a1a      	ldr	r2, [r3, #32]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001f36:	621a      	str	r2, [r3, #32]
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_TIM_IC_CaptureCallback+0x1e4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a12      	ldr	r2, [r2, #32]
 8001f48:	621a      	str	r2, [r3, #32]
 8001f4a:	e023      	b.n	8001f94 <HAL_TIM_IC_CaptureCallback+0x22c>
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_IC_CaptureCallback+0x1f8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a12      	ldr	r2, [r2, #32]
 8001f5c:	621a      	str	r2, [r3, #32]
 8001f5e:	e019      	b.n	8001f94 <HAL_TIM_IC_CaptureCallback+0x22c>
 8001f60:	7bbb      	ldrb	r3, [r7, #14]
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d110      	bne.n	8001f88 <HAL_TIM_IC_CaptureCallback+0x220>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a12      	ldr	r2, [r2, #32]
 8001f70:	621a      	str	r2, [r3, #32]
 8001f72:	e00f      	b.n	8001f94 <HAL_TIM_IC_CaptureCallback+0x22c>
 8001f74:	2000050c 	.word	0x2000050c
 8001f78:	20000374 	.word	0x20000374
 8001f7c:	2000037c 	.word	0x2000037c
 8001f80:	20000388 	.word	0x20000388
 8001f84:	20000394 	.word	0x20000394
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a12      	ldr	r2, [r2, #32]
 8001f92:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x0;															// UPDATE STATUS
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	4a7f      	ldr	r2, [pc, #508]	; (8002194 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8001f98:	2100      	movs	r1, #0
 8001f9a:	54d1      	strb	r1, [r2, r3]
		}
	}
	// TIMER 4: 2 CHANNELS
	if (htim == &htim4)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a7e      	ldr	r2, [pc, #504]	; (8002198 <HAL_TIM_IC_CaptureCallback+0x430>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	f040 80f3 	bne.w	800218c <HAL_TIM_IC_CaptureCallback+0x424>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7f1b      	ldrb	r3, [r3, #28]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d103      	bne.n	8001fb6 <HAL_TIM_IC_CaptureCallback+0x24e>
		{
			idx     = 4;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73bb      	strb	r3, [r7, #14]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7f1b      	ldrb	r3, [r3, #28]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d103      	bne.n	8001fc6 <HAL_TIM_IC_CaptureCallback+0x25e>
		{
			idx     = 5;
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	73fb      	strb	r3, [r7, #15]
			channel = TIM_CHANNEL_2;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	73bb      	strb	r3, [r7, #14]
		}

		//  PULSE WIDTH CAPTURE
		if (IC_Started[idx] == 0x0) {
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	4a72      	ldr	r2, [pc, #456]	; (8002194 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d167      	bne.n	80020a2 <HAL_TIM_IC_CaptureCallback+0x33a>
			IC_ts1[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET FIRST TIMESTAMP
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f004 fc66 	bl	80068a8 <HAL_TIM_ReadCapturedValue>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	b291      	uxth	r1, r2
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	; (800219c <HAL_TIM_IC_CaptureCallback+0x434>)
 8001fe4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING);	// FLIP POLARITY
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_TIM_IC_CaptureCallback+0x298>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 020a 	bic.w	r2, r2, #10
 8001ffc:	621a      	str	r2, [r3, #32]
 8001ffe:	e01f      	b.n	8002040 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	2b04      	cmp	r3, #4
 8002004:	d108      	bne.n	8002018 <HAL_TIM_IC_CaptureCallback+0x2b0>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a1a      	ldr	r2, [r3, #32]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002014:	621a      	str	r2, [r3, #32]
 8002016:	e013      	b.n	8002040 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	2b08      	cmp	r3, #8
 800201c:	d108      	bne.n	8002030 <HAL_TIM_IC_CaptureCallback+0x2c8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800202c:	621a      	str	r2, [r3, #32]
 800202e:	e007      	b.n	8002040 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a1a      	ldr	r2, [r3, #32]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800203e:	621a      	str	r2, [r3, #32]
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_TIM_IC_CaptureCallback+0x2f0>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0202 	orr.w	r2, r2, #2
 8002054:	621a      	str	r2, [r3, #32]
 8002056:	e01f      	b.n	8002098 <HAL_TIM_IC_CaptureCallback+0x330>
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d108      	bne.n	8002070 <HAL_TIM_IC_CaptureCallback+0x308>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0220 	orr.w	r2, r2, #32
 800206c:	621a      	str	r2, [r3, #32]
 800206e:	e013      	b.n	8002098 <HAL_TIM_IC_CaptureCallback+0x330>
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	2b08      	cmp	r3, #8
 8002074:	d108      	bne.n	8002088 <HAL_TIM_IC_CaptureCallback+0x320>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002084:	621a      	str	r2, [r3, #32]
 8002086:	e007      	b.n	8002098 <HAL_TIM_IC_CaptureCallback+0x330>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a1a      	ldr	r2, [r3, #32]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002096:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x1;															// UPDATE STATUS
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <HAL_TIM_IC_CaptureCallback+0x42c>)
 800209c:	2101      	movs	r1, #1
 800209e:	54d1      	strb	r1, [r2, r3]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
			IC_Started[idx] = 0x0;															// UPDATE STATUS
		}
	}

}
 80020a0:	e074      	b.n	800218c <HAL_TIM_IC_CaptureCallback+0x424>
		} else if (IC_Started[idx] == 0x1) {
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_TIM_IC_CaptureCallback+0x42c>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d16e      	bne.n	800218c <HAL_TIM_IC_CaptureCallback+0x424>
			IC_ts2[idx] = HAL_TIM_ReadCapturedValue(htim, channel);							// GET SECOND TIMESTAMP
 80020ae:	7bbb      	ldrb	r3, [r7, #14]
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f004 fbf8 	bl	80068a8 <HAL_TIM_ReadCapturedValue>
 80020b8:	4602      	mov	r2, r0
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	b291      	uxth	r1, r2
 80020be:	4a38      	ldr	r2, [pc, #224]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x438>)
 80020c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			IC_Elapsed[idx] = IC_ts2[idx] - IC_ts1[idx];									// CALCULATE PULSE WIDTH
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	4a36      	ldr	r2, [pc, #216]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x438>)
 80020c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020cc:	b299      	uxth	r1, r3
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_TIM_IC_CaptureCallback+0x434>)
 80020d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	1a8a      	subs	r2, r1, r2
 80020dc:	b291      	uxth	r1, r2
 80020de:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 80020e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING);	// FLIP POLARITY
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_TIM_IC_CaptureCallback+0x394>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a1a      	ldr	r2, [r3, #32]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 020a 	bic.w	r2, r2, #10
 80020f8:	621a      	str	r2, [r3, #32]
 80020fa:	e01f      	b.n	800213c <HAL_TIM_IC_CaptureCallback+0x3d4>
 80020fc:	7bbb      	ldrb	r3, [r7, #14]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d108      	bne.n	8002114 <HAL_TIM_IC_CaptureCallback+0x3ac>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002110:	621a      	str	r2, [r3, #32]
 8002112:	e013      	b.n	800213c <HAL_TIM_IC_CaptureCallback+0x3d4>
 8002114:	7bbb      	ldrb	r3, [r7, #14]
 8002116:	2b08      	cmp	r3, #8
 8002118:	d108      	bne.n	800212c <HAL_TIM_IC_CaptureCallback+0x3c4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8002128:	621a      	str	r2, [r3, #32]
 800212a:	e007      	b.n	800213c <HAL_TIM_IC_CaptureCallback+0x3d4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800213a:	621a      	str	r2, [r3, #32]
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_TIM_IC_CaptureCallback+0x3e8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a12      	ldr	r2, [r2, #32]
 800214c:	621a      	str	r2, [r3, #32]
 800214e:	e019      	b.n	8002184 <HAL_TIM_IC_CaptureCallback+0x41c>
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	2b04      	cmp	r3, #4
 8002154:	d106      	bne.n	8002164 <HAL_TIM_IC_CaptureCallback+0x3fc>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6a12      	ldr	r2, [r2, #32]
 8002160:	621a      	str	r2, [r3, #32]
 8002162:	e00f      	b.n	8002184 <HAL_TIM_IC_CaptureCallback+0x41c>
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	2b08      	cmp	r3, #8
 8002168:	d106      	bne.n	8002178 <HAL_TIM_IC_CaptureCallback+0x410>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a12      	ldr	r2, [r2, #32]
 8002174:	621a      	str	r2, [r3, #32]
 8002176:	e005      	b.n	8002184 <HAL_TIM_IC_CaptureCallback+0x41c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a12      	ldr	r2, [r2, #32]
 8002182:	621a      	str	r2, [r3, #32]
			IC_Started[idx] = 0x0;															// UPDATE STATUS
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	4a03      	ldr	r2, [pc, #12]	; (8002194 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8002188:	2100      	movs	r1, #0
 800218a:	54d1      	strb	r1, [r2, r3]
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000374 	.word	0x20000374
 8002198:	200003ec 	.word	0x200003ec
 800219c:	2000037c 	.word	0x2000037c
 80021a0:	20000388 	.word	0x20000388
 80021a4:	20000394 	.word	0x20000394

080021a8 <QUAD_Wrapper_Init>:

static void QUAD_Wrapper_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	quad.hi2c = &hi2c1;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <QUAD_Wrapper_Init+0x28>)
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <QUAD_Wrapper_Init+0x2c>)
 80021b0:	601a      	str	r2, [r3, #0]
	quad.htim = &htim6;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <QUAD_Wrapper_Init+0x28>)
 80021b4:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <QUAD_Wrapper_Init+0x30>)
 80021b6:	605a      	str	r2, [r3, #4]
	quad.OS   = &OSHOT;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <QUAD_Wrapper_Init+0x28>)
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <QUAD_Wrapper_Init+0x34>)
 80021bc:	609a      	str	r2, [r3, #8]
	quad.PID  = &PID;
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <QUAD_Wrapper_Init+0x28>)
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <QUAD_Wrapper_Init+0x38>)
 80021c2:	60da      	str	r2, [r3, #12]

	QUAD_Init(&quad);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <QUAD_Wrapper_Init+0x28>)
 80021c6:	f000 f99d 	bl	8002504 <QUAD_Init>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000058c 	.word	0x2000058c
 80021d4:	2000042c 	.word	0x2000042c
 80021d8:	2000054c 	.word	0x2000054c
 80021dc:	200003b4 	.word	0x200003b4
 80021e0:	20000480 	.word	0x20000480

080021e4 <BMI088_Wrapper_Init>:

static void BMI088_Wrapper_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	// CHECK DEVICE IDENTIFIERS
	if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <BMI088_Wrapper_Init+0x28>)
 80021ea:	f7fe fead 	bl	8000f48 <BMI088_I2C_Read_CHIP_IDS>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <BMI088_Wrapper_Init+0x14>
 80021f4:	f000 f8a2 	bl	800233c <Error_Handler>
	// RUN BMI088 GYROSCOPE INITIALIZATION
	if ( BMI088_I2C_GYRO_INIT(&hi2c1) != HAL_OK )     { Error_Handler(); };
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <BMI088_Wrapper_Init+0x28>)
 80021fa:	f7fe fee0 	bl	8000fbe <BMI088_I2C_GYRO_INIT>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <BMI088_Wrapper_Init+0x24>
 8002204:	f000 f89a 	bl	800233c <Error_Handler>
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000042c 	.word	0x2000042c

08002210 <OS125_Wrapper_Init>:

/* ONESHOT125 INTIALIZATION FUNCTION */
static void OS125_Wrapper_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	OSHOT.htim     = &htim2;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <OS125_Wrapper_Init+0x30>)
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <OS125_Wrapper_Init+0x34>)
 8002218:	601a      	str	r2, [r3, #0]
	OSHOT.command  = PID.out;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <OS125_Wrapper_Init+0x30>)
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <OS125_Wrapper_Init+0x38>)
 800221e:	609a      	str	r2, [r3, #8]
	OSHOT.fclk     = 72000000;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <OS125_Wrapper_Init+0x30>)
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <OS125_Wrapper_Init+0x3c>)
 8002224:	61da      	str	r2, [r3, #28]
	OSHOT.fclk_psc = 1 - 1;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <OS125_Wrapper_Init+0x30>)
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]

	if (OS125_Init(&OSHOT) != OS125_OK) { Error_Handler(); };
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <OS125_Wrapper_Init+0x30>)
 800222e:	f000 f8af 	bl	8002390 <OS125_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <OS125_Wrapper_Init+0x2c>
 8002238:	f000 f880 	bl	800233c <Error_Handler>
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200003b4 	.word	0x200003b4
 8002244:	20000628 	.word	0x20000628
 8002248:	20000480 	.word	0x20000480
 800224c:	044aa200 	.word	0x044aa200

08002250 <PID3_Wrapper_Init>:

/* PID INITIALIZATION FUNCTION */
static void PID3_Wrapper_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	if ( PID3_Init(&PID, Kp, Ki, Kd) != PID_OK )                   { Error_Handler(); }
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <PID3_Wrapper_Init+0x64>)
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <PID3_Wrapper_Init+0x68>)
 8002258:	4918      	ldr	r1, [pc, #96]	; (80022bc <PID3_Wrapper_Init+0x6c>)
 800225a:	4819      	ldr	r0, [pc, #100]	; (80022c0 <PID3_Wrapper_Init+0x70>)
 800225c:	f7fe ff74 	bl	8001148 <PID3_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <PID3_Wrapper_Init+0x1a>
 8002266:	f000 f869 	bl	800233c <Error_Handler>
	if ( PID3_Set_Tau(&PID, 0.02) != PID_OK)                       { Error_Handler(); }
 800226a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80022c4 <PID3_Wrapper_Init+0x74>
 800226e:	4814      	ldr	r0, [pc, #80]	; (80022c0 <PID3_Wrapper_Init+0x70>)
 8002270:	f7fe ffd0 	bl	8001214 <PID3_Set_Tau>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <PID3_Wrapper_Init+0x2e>
 800227a:	f000 f85f 	bl	800233c <Error_Handler>
	if ( PID3_Set_Integrator_Limit(&PID, -100.0, 100.0) != PID_OK) { Error_Handler(); }
 800227e:	eddf 0a12 	vldr	s1, [pc, #72]	; 80022c8 <PID3_Wrapper_Init+0x78>
 8002282:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80022cc <PID3_Wrapper_Init+0x7c>
 8002286:	480e      	ldr	r0, [pc, #56]	; (80022c0 <PID3_Wrapper_Init+0x70>)
 8002288:	f7fe ffdd 	bl	8001246 <PID3_Set_Integrator_Limit>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <PID3_Wrapper_Init+0x46>
 8002292:	f000 f853 	bl	800233c <Error_Handler>
	if ( PID3_Set_Output_Limit(&PID, -100.0, 100.0) != PID_OK)     { Error_Handler(); }
 8002296:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80022c8 <PID3_Wrapper_Init+0x78>
 800229a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80022cc <PID3_Wrapper_Init+0x7c>
 800229e:	4808      	ldr	r0, [pc, #32]	; (80022c0 <PID3_Wrapper_Init+0x70>)
 80022a0:	f7ff f800 	bl	80012a4 <PID3_Set_Output_Limit>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <PID3_Wrapper_Init+0x5e>
 80022aa:	f000 f847 	bl	800233c <Error_Handler>
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	0800cde8 	.word	0x0800cde8
 80022b8:	0800cddc 	.word	0x0800cddc
 80022bc:	0800cdd0 	.word	0x0800cdd0
 80022c0:	20000480 	.word	0x20000480
 80022c4:	3ca3d70a 	.word	0x3ca3d70a
 80022c8:	42c80000 	.word	0x42c80000
 80022cc:	c2c80000 	.word	0xc2c80000

080022d0 <PWM_INPUT_START>:

/* START INPUT CAPTURE */
static void PWM_INPUT_START(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80022d4:	2100      	movs	r1, #0
 80022d6:	480c      	ldr	r0, [pc, #48]	; (8002308 <PWM_INPUT_START+0x38>)
 80022d8:	f004 f814 	bl	8006304 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80022dc:	2104      	movs	r1, #4
 80022de:	480a      	ldr	r0, [pc, #40]	; (8002308 <PWM_INPUT_START+0x38>)
 80022e0:	f004 f810 	bl	8006304 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80022e4:	2108      	movs	r1, #8
 80022e6:	4808      	ldr	r0, [pc, #32]	; (8002308 <PWM_INPUT_START+0x38>)
 80022e8:	f004 f80c 	bl	8006304 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80022ec:	210c      	movs	r1, #12
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <PWM_INPUT_START+0x38>)
 80022f0:	f004 f808 	bl	8006304 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80022f4:	2100      	movs	r1, #0
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <PWM_INPUT_START+0x3c>)
 80022f8:	f004 f804 	bl	8006304 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80022fc:	2104      	movs	r1, #4
 80022fe:	4803      	ldr	r0, [pc, #12]	; (800230c <PWM_INPUT_START+0x3c>)
 8002300:	f004 f800 	bl	8006304 <HAL_TIM_IC_Start_IT>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	2000050c 	.word	0x2000050c
 800230c:	200003ec 	.word	0x200003ec

08002310 <PWM_OUTPUT_START>:

/* START PWM OUTPUT */
static void PWM_OUTPUT_START(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002314:	2100      	movs	r1, #0
 8002316:	4808      	ldr	r0, [pc, #32]	; (8002338 <PWM_OUTPUT_START+0x28>)
 8002318:	f003 ff32 	bl	8006180 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800231c:	2104      	movs	r1, #4
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <PWM_OUTPUT_START+0x28>)
 8002320:	f003 ff2e 	bl	8006180 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002324:	2108      	movs	r1, #8
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <PWM_OUTPUT_START+0x28>)
 8002328:	f003 ff2a 	bl	8006180 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800232c:	210c      	movs	r1, #12
 800232e:	4802      	ldr	r0, [pc, #8]	; (8002338 <PWM_OUTPUT_START+0x28>)
 8002330:	f003 ff26 	bl	8006180 <HAL_TIM_PWM_Start>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000628 	.word	0x20000628

0800233c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002340:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  // DISABLE PWM OUTPUT
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002342:	2100      	movs	r1, #0
 8002344:	480e      	ldr	r0, [pc, #56]	; (8002380 <Error_Handler+0x44>)
 8002346:	f003 ff59 	bl	80061fc <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800234a:	2104      	movs	r1, #4
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <Error_Handler+0x44>)
 800234e:	f003 ff55 	bl	80061fc <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002352:	2108      	movs	r1, #8
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <Error_Handler+0x44>)
 8002356:	f003 ff51 	bl	80061fc <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800235a:	210c      	movs	r1, #12
 800235c:	4808      	ldr	r0, [pc, #32]	; (8002380 <Error_Handler+0x44>)
 800235e:	f003 ff4d 	bl	80061fc <HAL_TIM_PWM_Stop>

  // SET STATUS LEDS
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2140      	movs	r1, #64	; 0x40
 8002366:	4807      	ldr	r0, [pc, #28]	; (8002384 <Error_Handler+0x48>)
 8002368:	f001 f8b8 	bl	80034dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800236c:	2201      	movs	r2, #1
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	4804      	ldr	r0, [pc, #16]	; (8002384 <Error_Handler+0x48>)
 8002372:	f001 f8b3 	bl	80034dc <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8002376:	2106      	movs	r1, #6
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <Error_Handler+0x4c>)
 800237a:	f007 ff2b 	bl	800a1d4 <CDC_Transmit_FS>

  while (1)
 800237e:	e7fe      	b.n	800237e <Error_Handler+0x42>
 8002380:	20000628 	.word	0x20000628
 8002384:	40020800 	.word	0x40020800
 8002388:	0800cd68 	.word	0x0800cd68
 800238c:	00000000 	.word	0x00000000

08002390 <OS125_Init>:
 * 2) Set OS.command
 * 3) Set OS.fclk
 * 4) Set OS.fclk_psc
 */
OS125_StatusTypeDef OS125_Init(ONESHOT125 *OS)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	// GET TIMER INSTANCE
	OS->TIM = OS->htim->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	605a      	str	r2, [r3, #4]
	// CALCULATE TIMER CLOCK FREQUENCY
	OS->tim_clk = (float)OS->fclk / (float)OS->fclk_psc;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	// CALCULATE TIMER CLOCK PERIOD
	OS->dt = 1/OS->tim_clk;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80023ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	// CALCULATE MAXIMUM CCR VALUE (100% Power)
	OS->CCR_MAX = (int)ceil(0.000250 / OS->dt);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8b3 	bl	8000548 <__aeabi_f2d>
 80023e2:	4603      	mov	r3, r0
 80023e4:	460c      	mov	r4, r1
 80023e6:	461a      	mov	r2, r3
 80023e8:	4623      	mov	r3, r4
 80023ea:	a12d      	add	r1, pc, #180	; (adr r1, 80024a0 <OS125_Init+0x110>)
 80023ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023f0:	f7fe fa2c 	bl	800084c <__aeabi_ddiv>
 80023f4:	4603      	mov	r3, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	ec44 3b17 	vmov	d7, r3, r4
 80023fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002400:	eef0 0a67 	vmov.f32	s1, s15
 8002404:	f00a fba0 	bl	800cb48 <ceil>
 8002408:	ec54 3b10 	vmov	r3, r4, d0
 800240c:	4618      	mov	r0, r3
 800240e:	4621      	mov	r1, r4
 8002410:	f7fe fba2 	bl	8000b58 <__aeabi_d2iz>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c
	// CALCULATE MINIMUM CCR VALUE (0% Power)
	OS->CCR_MIN = (int)floor(0.000125 / OS->dt);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f892 	bl	8000548 <__aeabi_f2d>
 8002424:	4603      	mov	r3, r0
 8002426:	460c      	mov	r4, r1
 8002428:	461a      	mov	r2, r3
 800242a:	4623      	mov	r3, r4
 800242c:	a11e      	add	r1, pc, #120	; (adr r1, 80024a8 <OS125_Init+0x118>)
 800242e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002432:	f7fe fa0b 	bl	800084c <__aeabi_ddiv>
 8002436:	4603      	mov	r3, r0
 8002438:	460c      	mov	r4, r1
 800243a:	ec44 3b17 	vmov	d7, r3, r4
 800243e:	eeb0 0a47 	vmov.f32	s0, s14
 8002442:	eef0 0a67 	vmov.f32	s1, s15
 8002446:	f00a fbff 	bl	800cc48 <floor>
 800244a:	ec54 3b10 	vmov	r3, r4, d0
 800244e:	4618      	mov	r0, r3
 8002450:	4621      	mov	r1, r4
 8002452:	f7fe fb81 	bl	8000b58 <__aeabi_d2iz>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
	// CALCULATE NUMBER OF CCR STEPS
	OS->CCR_STEPS = OS->CCR_MAX - OS->CCR_MIN;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	1ad2      	subs	r2, r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	635a      	str	r2, [r3, #52]	; 0x34

	// SET ALL OUTPUTS TO 0
	for (int i = 0; i < 4; i++) { OS->CCR[i] = OS->CCR_MIN; }
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	e00a      	b.n	8002486 <OS125_Init+0xf6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3302      	adds	r3, #2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3301      	adds	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b03      	cmp	r3, #3
 800248a:	ddf1      	ble.n	8002470 <OS125_Init+0xe0>
	UpdateCCR(OS);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f81a 	bl	80024c6 <UpdateCCR>

	return OS125_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	f3af 8000 	nop.w
 80024a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80024a4:	3f30624d 	.word	0x3f30624d
 80024a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80024ac:	3f20624d 	.word	0x3f20624d

080024b0 <CommandFromSetpoint>:
/*
 * ONESHOT125 OUTPUT UPDATE FUNCTION
 * Converts PID controller output to PWM motor commands
 */
OS125_StatusTypeDef CommandFromSetpoint(ONESHOT125 *OS)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

	// ADJUST ACCORDING TO PITCH PID OUTPUT

	// ADJUST ACCORDING TO YAW PID OUTPUT

	return OS125_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <UpdateCCR>:
/*
 * ONESHOT125 SET OUTPUT DIRECT FUNCTION
 * Updates timer CCR registers according to internal CCR array
 */
OS125_StatusTypeDef UpdateCCR(ONESHOT125 *OS)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	OS->TIM->CCR1 = OS->CCR[0];
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
	OS->TIM->CCR2 = OS->CCR[1];
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
	OS->TIM->CCR3 = OS->CCR[2];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	63da      	str	r2, [r3, #60]	; 0x3c
	OS->TIM->CCR4 = OS->CCR[3];
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40

	return OS125_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <QUAD_Init>:

#include "quad.h"

/* INITIALIZE QUAD ROTOR STRUCT */
void QUAD_Init(QUAD *quad)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	// DEFAULT RATES
	quad->RATES[0] = X_DEFAULT_RATE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <QUAD_Init+0xa0>)
 8002510:	615a      	str	r2, [r3, #20]
	quad->RATES[1] = Y_DEFAULT_RATE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <QUAD_Init+0xa0>)
 8002516:	619a      	str	r2, [r3, #24]
	quad->RATES[2] = Z_DEFAULT_RATE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <QUAD_Init+0xa4>)
 800251c:	61da      	str	r2, [r3, #28]

	// MEASURED ROTATION
	quad->rot[0] = 0.0;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
	quad->rot[1] = 0.0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
	quad->rot[2] = 0.0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	629a      	str	r2, [r3, #40]	; 0x28

	// SETPOINT
	quad->set[0] = 0.0;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	62da      	str	r2, [r3, #44]	; 0x2c
	quad->set[1] = 0.0;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
	quad->set[2] = 0.0;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	635a      	str	r2, [r3, #52]	; 0x34

	// RATE BUFFERS
	quad->gyro_rate[0] = 0.0;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	quad->gyro_rate[1] = 0.0;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	quad->gyro_rate[2] = 0.0;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	quad->stick_rate[0] = 0.0;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	quad->stick_rate[1] = 0.0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	quad->stick_rate[2] = 0.0;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	// GET FIRST TIME MEASUREMENT
	quad->tprev = __HAL_TIM_GET_COUNTER(quad->htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	b29a      	uxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	821a      	strh	r2, [r3, #16]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40a00000 	.word	0x40a00000
 80025a8:	40400000 	.word	0x40400000
 80025ac:	00000000 	.word	0x00000000

080025b0 <QUAD_UPDATE>:

/* UPDATE PROCEDURE */
void QUAD_UPDATE(QUAD *quad, volatile uint16_t *IC)
{
 80025b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
	// CHECK IF ARMED

	// READ GYROSCOPE
	if ( BMI088_I2C_Read_Gyro(quad->hi2c, quad->gyro_buf) != HAL_OK ) { Error_Handler(); }
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3338      	adds	r3, #56	; 0x38
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f7fe fd69 	bl	800109e <BMI088_I2C_Read_Gyro>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <QUAD_UPDATE+0x26>
 80025d2:	f7ff feb3 	bl	800233c <Error_Handler>

	// UPDATE TIMER
	quad->telapsed = __HAL_TIM_GET_COUNTER(quad->htim) - quad->tprev;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8a1b      	ldrh	r3, [r3, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	825a      	strh	r2, [r3, #18]
	quad->tprev    = quad->tprev + quad->telapsed;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8a1a      	ldrh	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8a5b      	ldrh	r3, [r3, #18]
 80025f4:	4413      	add	r3, r2
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	821a      	strh	r2, [r3, #16]

	// CONVERT TO SIGNED INTEGER, SCALE, AND INTEGRATE
	for (int i = 0; i < 3; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e086      	b.n	8002710 <QUAD_UPDATE+0x160>
	{
		quad->temp         = quad->gyro_buf[2*i + 1] << 8 | quad->gyro_buf[2*i];
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b21a      	sxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	440b      	add	r3, r1
 800261c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002620:	b21b      	sxth	r3, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	b21a      	sxth	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		quad->gyro_rate[i] = ((float)quad->temp*GYRO_RATE*M_PI)/(32767.0*180.0);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263a:	ee17 0a90 	vmov	r0, s15
 800263e:	f7fd ff83 	bl	8000548 <__aeabi_f2d>
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b92      	ldr	r3, [pc, #584]	; (8002890 <QUAD_UPDATE+0x2e0>)
 8002648:	f7fd ffd6 	bl	80005f8 <__aeabi_dmul>
 800264c:	4603      	mov	r3, r0
 800264e:	460c      	mov	r4, r1
 8002650:	4618      	mov	r0, r3
 8002652:	4621      	mov	r1, r4
 8002654:	a388      	add	r3, pc, #544	; (adr r3, 8002878 <QUAD_UPDATE+0x2c8>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ffcd 	bl	80005f8 <__aeabi_dmul>
 800265e:	4603      	mov	r3, r0
 8002660:	460c      	mov	r4, r1
 8002662:	4618      	mov	r0, r3
 8002664:	4621      	mov	r1, r4
 8002666:	a386      	add	r3, pc, #536	; (adr r3, 8002880 <QUAD_UPDATE+0x2d0>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fe f8ee 	bl	800084c <__aeabi_ddiv>
 8002670:	4603      	mov	r3, r0
 8002672:	460c      	mov	r4, r1
 8002674:	4618      	mov	r0, r3
 8002676:	4621      	mov	r1, r4
 8002678:	f7fe fa96 	bl	8000ba8 <__aeabi_d2f>
 800267c:	4601      	mov	r1, r0
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3320      	adds	r3, #32
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	6019      	str	r1, [r3, #0]
		quad->rot[i]       = quad->rot[i] + 0.000001*(float)quad->telapsed*quad->gyro_rate[i];
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3308      	adds	r3, #8
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff56 	bl	8000548 <__aeabi_f2d>
 800269c:	4604      	mov	r4, r0
 800269e:	460d      	mov	r5, r1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8a5b      	ldrh	r3, [r3, #18]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ac:	ee17 0a90 	vmov	r0, s15
 80026b0:	f7fd ff4a 	bl	8000548 <__aeabi_f2d>
 80026b4:	a374      	add	r3, pc, #464	; (adr r3, 8002888 <QUAD_UPDATE+0x2d8>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	f7fd ff9d 	bl	80005f8 <__aeabi_dmul>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4690      	mov	r8, r2
 80026c4:	4699      	mov	r9, r3
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3320      	adds	r3, #32
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff38 	bl	8000548 <__aeabi_f2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4640      	mov	r0, r8
 80026de:	4649      	mov	r1, r9
 80026e0:	f7fd ff8a 	bl	80005f8 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd fdce 	bl	800028c <__adddf3>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	4618      	mov	r0, r3
 80026f6:	4621      	mov	r1, r4
 80026f8:	f7fe fa56 	bl	8000ba8 <__aeabi_d2f>
 80026fc:	4601      	mov	r1, r0
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3308      	adds	r3, #8
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < 3; i++)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b02      	cmp	r3, #2
 8002714:	f77f af75 	ble.w	8002602 <QUAD_UPDATE+0x52>
	}

	// UPDATE ROTATION SETPOINT
	for (int i = 0; i < 3; i++)
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	e065      	b.n	80027ea <QUAD_UPDATE+0x23a>
	{
		quad->stick_rate[i] = (float)IC[i]*quad->RATES[i]/IC_SCALE;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3304      	adds	r3, #4
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3304      	adds	r3, #4
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002746:	eddf 6a53 	vldr	s13, [pc, #332]	; 8002894 <QUAD_UPDATE+0x2e4>
 800274a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3322      	adds	r3, #34	; 0x22
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	edc3 7a00 	vstr	s15, [r3]
		quad->set[i]        = quad->set[i] + 0.000001*(float)quad->telapsed*quad->stick_rate[i];
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	330a      	adds	r3, #10
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3304      	adds	r3, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd feeb 	bl	8000548 <__aeabi_f2d>
 8002772:	4604      	mov	r4, r0
 8002774:	460d      	mov	r5, r1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8a5b      	ldrh	r3, [r3, #18]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002782:	ee17 0a90 	vmov	r0, s15
 8002786:	f7fd fedf 	bl	8000548 <__aeabi_f2d>
 800278a:	a33f      	add	r3, pc, #252	; (adr r3, 8002888 <QUAD_UPDATE+0x2d8>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd ff32 	bl	80005f8 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4690      	mov	r8, r2
 800279a:	4699      	mov	r9, r3
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3322      	adds	r3, #34	; 0x22
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fecc 	bl	8000548 <__aeabi_f2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4640      	mov	r0, r8
 80027b6:	4649      	mov	r1, r9
 80027b8:	f7fd ff1e 	bl	80005f8 <__aeabi_dmul>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fd fd62 	bl	800028c <__adddf3>
 80027c8:	4603      	mov	r3, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4618      	mov	r0, r3
 80027ce:	4621      	mov	r1, r4
 80027d0:	f7fe f9ea 	bl	8000ba8 <__aeabi_d2f>
 80027d4:	4601      	mov	r1, r0
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	330a      	adds	r3, #10
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < 3; i++)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3301      	adds	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	dd96      	ble.n	800271e <QUAD_UPDATE+0x16e>
	}

	// ITERATE PID ALGORITHM
	if (PID3_Update(quad->PID, quad->set, quad->rot, 0.000001*(float)quad->telapsed) != PID_OK) { Error_Handler(); }
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68dc      	ldr	r4, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f103 0620 	add.w	r6, r3, #32
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8a5b      	ldrh	r3, [r3, #18]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280c:	ee17 0a90 	vmov	r0, s15
 8002810:	f7fd fe9a 	bl	8000548 <__aeabi_f2d>
 8002814:	a31c      	add	r3, pc, #112	; (adr r3, 8002888 <QUAD_UPDATE+0x2d8>)
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f7fd feed 	bl	80005f8 <__aeabi_dmul>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	f7fe f9bf 	bl	8000ba8 <__aeabi_d2f>
 800282a:	4603      	mov	r3, r0
 800282c:	ee00 3a10 	vmov	s0, r3
 8002830:	4632      	mov	r2, r6
 8002832:	4629      	mov	r1, r5
 8002834:	4620      	mov	r0, r4
 8002836:	f7fe fd65 	bl	8001304 <PID3_Update>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <QUAD_UPDATE+0x294>
 8002840:	f7ff fd7c 	bl	800233c <Error_Handler>

	// UPDATE MOTOR SETTINGS
	if (CommandFromSetpoint(quad->OS) != OS125_OK) { Error_Handler(); }
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fe31 	bl	80024b0 <CommandFromSetpoint>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <QUAD_UPDATE+0x2a8>
 8002854:	f7ff fd72 	bl	800233c <Error_Handler>
	if (UpdateCCR(quad->OS) != OS125_OK) { Error_Handler(); }
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fe32 	bl	80024c6 <UpdateCCR>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <QUAD_UPDATE+0x2bc>
 8002868:	f7ff fd68 	bl	800233c <Error_Handler>
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002876:	bf00      	nop
 8002878:	54442d18 	.word	0x54442d18
 800287c:	400921fb 	.word	0x400921fb
 8002880:	00000000 	.word	0x00000000
 8002884:	41567fd3 	.word	0x41567fd3
 8002888:	a0b5ed8d 	.word	0xa0b5ed8d
 800288c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002890:	409f4000 	.word	0x409f4000
 8002894:	447a0000 	.word	0x447a0000

08002898 <QUAD_SEND_ORIENTATION>:

/* SEND ORIENTATION OVER SERIAL */
void QUAD_SEND_ORIENTATION(QUAD *quad)
{
 8002898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289c:	b093      	sub	sp, #76	; 0x4c
 800289e:	af0c      	add	r7, sp, #48	; 0x30
 80028a0:	6178      	str	r0, [r7, #20]
	// SEND ORIENTATION DATA OVER VIRTUAL COM PORT
	// DATA FORMAT: [X ANGLE]    [Y ANGLE]    [Z ANGLE]    [OTHER]
	sprintf(quad->tx_buf, "%f\t%f\t%f\t%f\t%f\t%f\t%i\n", quad->rot[0], quad->rot[1], quad->rot[2], quad->PID->out[0], quad->PID->out[1], quad->PID->out[2], quad->telapsed);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f103 063e 	add.w	r6, r3, #62	; 0x3e
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe4b 	bl	8000548 <__aeabi_f2d>
 80028b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fe44 	bl	8000548 <__aeabi_f2d>
 80028c0:	4604      	mov	r4, r0
 80028c2:	460d      	mov	r5, r1
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fe3d 	bl	8000548 <__aeabi_f2d>
 80028ce:	4680      	mov	r8, r0
 80028d0:	4689      	mov	r9, r1
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe35 	bl	8000548 <__aeabi_f2d>
 80028de:	4682      	mov	sl, r0
 80028e0:	468b      	mov	fp, r1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe2d 	bl	8000548 <__aeabi_f2d>
 80028ee:	e9c7 0100 	strd	r0, r1, [r7]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe25 	bl	8000548 <__aeabi_f2d>
 80028fe:	460a      	mov	r2, r1
 8002900:	4601      	mov	r1, r0
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	8a5b      	ldrh	r3, [r3, #18]
 8002906:	930a      	str	r3, [sp, #40]	; 0x28
 8002908:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800290c:	ed97 7b00 	vldr	d7, [r7]
 8002910:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002914:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002918:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800291c:	e9cd 4500 	strd	r4, r5, [sp]
 8002920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002924:	490b      	ldr	r1, [pc, #44]	; (8002954 <QUAD_SEND_ORIENTATION+0xbc>)
 8002926:	4630      	mov	r0, r6
 8002928:	f008 fdec 	bl	800b504 <siprintf>
	CDC_Transmit_FS((uint8_t*)(quad->tx_buf), strlen(quad->tx_buf));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	333e      	adds	r3, #62	; 0x3e
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fc4a 	bl	80001d0 <strlen>
 800293c:	4603      	mov	r3, r0
 800293e:	b29b      	uxth	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	4620      	mov	r0, r4
 8002944:	f007 fc46 	bl	800a1d4 <CDC_Transmit_FS>
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	0800cd70 	.word	0x0800cd70

08002958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_MspInit+0x4c>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_MspInit+0x4c>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_MspInit+0x4c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_MspInit+0x4c>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <HAL_MspInit+0x4c>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_I2C_MspInit+0x84>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12c      	bne.n	8002a24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ec:	2312      	movs	r3, #18
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f0:	2301      	movs	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029f8:	2304      	movs	r3, #4
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4619      	mov	r1, r3
 8002a02:	480c      	ldr	r0, [pc, #48]	; (8002a34 <HAL_I2C_MspInit+0x8c>)
 8002a04:	f000 fbd0 	bl	80031a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 8002a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	3728      	adds	r7, #40	; 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40005400 	.word	0x40005400
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020400 	.word	0x40020400

08002a38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d10d      	bne.n	8002a66 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <HAL_TIM_IC_MspInit+0x144>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d152      	bne.n	8002b40 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a47      	ldr	r2, [pc, #284]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b45      	ldr	r3, [pc, #276]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a39      	ldr	r2, [pc, #228]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002afe:	2302      	movs	r3, #2
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	4619      	mov	r1, r3
 8002b08:	482e      	ldr	r0, [pc, #184]	; (8002bc4 <HAL_TIM_IC_MspInit+0x14c>)
 8002b0a:	f000 fb4d 	bl	80031a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	4619      	mov	r1, r3
 8002b28:	4827      	ldr	r0, [pc, #156]	; (8002bc8 <HAL_TIM_IC_MspInit+0x150>)
 8002b2a:	f000 fb3d 	bl	80031a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	201d      	movs	r0, #29
 8002b34:	f000 fb01 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b38:	201d      	movs	r0, #29
 8002b3a:	f000 fb1a 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b3e:	e038      	b.n	8002bb2 <HAL_TIM_IC_MspInit+0x13a>
  else if(htim_ic->Instance==TIM4)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_TIM_IC_MspInit+0x154>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d133      	bne.n	8002bb2 <HAL_TIM_IC_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_TIM_IC_MspInit+0x148>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b82:	23c0      	movs	r3, #192	; 0xc0
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b92:	2302      	movs	r3, #2
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	480a      	ldr	r0, [pc, #40]	; (8002bc8 <HAL_TIM_IC_MspInit+0x150>)
 8002b9e:	f000 fb03 	bl	80031a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	201e      	movs	r0, #30
 8002ba8:	f000 fac7 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bac:	201e      	movs	r0, #30
 8002bae:	f000 fae0 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40000800 	.word	0x40000800

08002bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_TIM_Base_MspInit+0x70>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_TIM_Base_MspInit+0x74>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIM_Base_MspInit+0x74>)
 8002bec:	f043 0310 	orr.w	r3, r3, #16
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <HAL_TIM_Base_MspInit+0x74>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002bfe:	e01a      	b.n	8002c36 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a10      	ldr	r2, [pc, #64]	; (8002c48 <HAL_TIM_Base_MspInit+0x78>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d115      	bne.n	8002c36 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_TIM_Base_MspInit+0x74>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <HAL_TIM_Base_MspInit+0x74>)
 8002c14:	f043 0320 	orr.w	r3, r3, #32
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_TIM_Base_MspInit+0x74>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2102      	movs	r1, #2
 8002c2a:	2037      	movs	r0, #55	; 0x37
 8002c2c:	f000 fa85 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c30:	2037      	movs	r0, #55	; 0x37
 8002c32:	f000 fa9e 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40001000 	.word	0x40001000
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40001400 	.word	0x40001400

08002c4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d11d      	bne.n	8002caa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_TIM_MspPostInit+0x68>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_TIM_MspPostInit+0x68>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_TIM_MspPostInit+0x68>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c8a:	230f      	movs	r3, #15
 8002c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <HAL_TIM_MspPostInit+0x6c>)
 8002ca6:	f000 fa7f 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002caa:	bf00      	nop
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020000 	.word	0x40020000

08002cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <NMI_Handler+0x4>

08002cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <HardFault_Handler+0x4>

08002cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <MemManage_Handler+0x4>

08002cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d08:	f000 f8fa 	bl	8002f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <TIM3_IRQHandler+0x10>)
 8002d16:	f003 fb5d 	bl	80063d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2000050c 	.word	0x2000050c

08002d24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <TIM4_IRQHandler+0x10>)
 8002d2a:	f003 fb53 	bl	80063d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200003ec 	.word	0x200003ec

08002d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002d3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d40:	f000 fbe6 	bl	8003510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <TIM7_IRQHandler+0x10>)
 8002d4e:	f003 fb41 	bl	80063d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000668 	.word	0x20000668

08002d5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <OTG_FS_IRQHandler+0x10>)
 8002d62:	f001 fcf0 	bl	8004746 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20001b7c 	.word	0x20001b7c

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f007 fe5a 	bl	800aa58 <__errno>
 8002da4:	4602      	mov	r2, r0
 8002da6:	230c      	movs	r3, #12
 8002da8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20020000 	.word	0x20020000
 8002dd0:	00000400 	.word	0x00000400
 8002dd4:	200003a4 	.word	0x200003a4
 8002dd8:	20001f88 	.word	0x20001f88

08002ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <SystemInit+0x28>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <SystemInit+0x28>)
 8002de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SystemInit+0x28>)
 8002df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002df6:	609a      	str	r2, [r3, #8]
#endif
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e0e:	e003      	b.n	8002e18 <LoopCopyDataInit>

08002e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e16:	3104      	adds	r1, #4

08002e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e18:	480b      	ldr	r0, [pc, #44]	; (8002e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e20:	d3f6      	bcc.n	8002e10 <CopyDataInit>
  ldr  r2, =_sbss
 8002e22:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e24:	e002      	b.n	8002e2c <LoopFillZerobss>

08002e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e28:	f842 3b04 	str.w	r3, [r2], #4

08002e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e30:	d3f9      	bcc.n	8002e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e32:	f7ff ffd3 	bl	8002ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e36:	f007 fe15 	bl	800aa64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e3a:	f7fe fc51 	bl	80016e0 <main>
  bx  lr    
 8002e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e44:	0800d078 	.word	0x0800d078
  ldr  r0, =_sdata
 8002e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e4c:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8002e50:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8002e54:	20001f88 	.word	0x20001f88

08002e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e58:	e7fe      	b.n	8002e58 <ADC_IRQHandler>
	...

08002e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <HAL_Init+0x40>)
 8002e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <HAL_Init+0x40>)
 8002e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_Init+0x40>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <HAL_Init+0x40>)
 8002e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e84:	2003      	movs	r0, #3
 8002e86:	f000 f94d 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f000 f808 	bl	8002ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e90:	f7ff fd62 	bl	8002958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00

08002ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_InitTick+0x54>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_InitTick+0x58>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f965 	bl	800318e <HAL_SYSTICK_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00e      	b.n	8002eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0f      	cmp	r3, #15
 8002ed2:	d80a      	bhi.n	8002eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	f000 f92d 	bl	800313a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ee0:	4a06      	ldr	r2, [pc, #24]	; (8002efc <HAL_InitTick+0x5c>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e000      	b.n	8002eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_IncTick+0x20>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_IncTick+0x24>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <HAL_IncTick+0x24>)
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000008 	.word	0x20000008
 8002f24:	200006a8 	.word	0x200006a8

08002f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_GetTick+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	200006a8 	.word	0x200006a8

08002f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff ffee 	bl	8002f28 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d005      	beq.n	8002f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_Delay+0x40>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f66:	bf00      	nop
 8002f68:	f7ff ffde 	bl	8002f28 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d8f7      	bhi.n	8002f68 <HAL_Delay+0x28>
  {
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000008 	.word	0x20000008

08002f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb6:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	60d3      	str	r3, [r2, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	f003 0307 	and.w	r3, r3, #7
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db0b      	blt.n	8003012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <__NVIC_EnableIRQ+0x38>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 f202 	lsl.w	r2, r0, r2
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff8e 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff29 	bl	8002f84 <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff3e 	bl	8002fcc <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff8e 	bl	8003078 <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5d 	bl	8003024 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff31 	bl	8002fe8 <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa2 	bl	80030e0 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e16b      	b.n	800349c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 815a 	bne.w	8003496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d00b      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f6:	2b11      	cmp	r3, #17
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b12      	cmp	r3, #18
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0xfc>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b12      	cmp	r3, #18
 80032a2:	d123      	bne.n	80032ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80b4 	beq.w	8003496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_GPIO_Init+0x308>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a5e      	ldr	r2, [pc, #376]	; (80034b0 <HAL_GPIO_Init+0x308>)
 8003338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <HAL_GPIO_Init+0x308>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334a:	4a5a      	ldr	r2, [pc, #360]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a51      	ldr	r2, [pc, #324]	; (80034b8 <HAL_GPIO_Init+0x310>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <HAL_GPIO_Init+0x226>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a50      	ldr	r2, [pc, #320]	; (80034bc <HAL_GPIO_Init+0x314>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x222>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4f      	ldr	r2, [pc, #316]	; (80034c0 <HAL_GPIO_Init+0x318>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x21e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a4e      	ldr	r2, [pc, #312]	; (80034c4 <HAL_GPIO_Init+0x31c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x21a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4d      	ldr	r2, [pc, #308]	; (80034c8 <HAL_GPIO_Init+0x320>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x216>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4c      	ldr	r2, [pc, #304]	; (80034cc <HAL_GPIO_Init+0x324>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x212>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4b      	ldr	r2, [pc, #300]	; (80034d0 <HAL_GPIO_Init+0x328>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x20e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4a      	ldr	r2, [pc, #296]	; (80034d4 <HAL_GPIO_Init+0x32c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x20a>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00e      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033b2:	2308      	movs	r3, #8
 80033b4:	e00c      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033b6:	2306      	movs	r3, #6
 80033b8:	e00a      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033be:	2304      	movs	r3, #4
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ce:	2300      	movs	r3, #0
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e0:	4934      	ldr	r1, [pc, #208]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ee:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <HAL_GPIO_Init+0x330>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003412:	4a31      	ldr	r2, [pc, #196]	; (80034d8 <HAL_GPIO_Init+0x330>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_GPIO_Init+0x330>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343c:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <HAL_GPIO_Init+0x330>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <HAL_GPIO_Init+0x330>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_GPIO_Init+0x330>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_GPIO_Init+0x330>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <HAL_GPIO_Init+0x330>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	f67f ae90 	bls.w	80031c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	3724      	adds	r7, #36	; 0x24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40021400 	.word	0x40021400
 80034d0:	40021800 	.word	0x40021800
 80034d4:	40021c00 	.word	0x40021c00
 80034d8:	40013c00 	.word	0x40013c00

080034dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
 80034e8:	4613      	mov	r3, r2
 80034ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034ec:	787b      	ldrb	r3, [r7, #1]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f8:	e003      	b.n	8003502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	619a      	str	r2, [r3, #24]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fbf0 	bl	8001d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40013c00 	.word	0x40013c00

08003540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e11f      	b.n	8003792 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fa1e 	bl	80029a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a4:	f002 fd3a 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a7b      	ldr	r2, [pc, #492]	; (800379c <HAL_I2C_Init+0x25c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d807      	bhi.n	80035c4 <HAL_I2C_Init+0x84>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_I2C_Init+0x260>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e006      	b.n	80035d2 <HAL_I2C_Init+0x92>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a77      	ldr	r2, [pc, #476]	; (80037a4 <HAL_I2C_Init+0x264>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0db      	b.n	8003792 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a72      	ldr	r2, [pc, #456]	; (80037a8 <HAL_I2C_Init+0x268>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a64      	ldr	r2, [pc, #400]	; (800379c <HAL_I2C_Init+0x25c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <HAL_I2C_Init+0xd4>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	e009      	b.n	8003628 <HAL_I2C_Init+0xe8>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a63      	ldr	r2, [pc, #396]	; (80037ac <HAL_I2C_Init+0x26c>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800363a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4956      	ldr	r1, [pc, #344]	; (800379c <HAL_I2C_Init+0x25c>)
 8003644:	428b      	cmp	r3, r1
 8003646:	d80d      	bhi.n	8003664 <HAL_I2C_Init+0x124>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e59      	subs	r1, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb1 f3f3 	udiv	r3, r1, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365c:	2b04      	cmp	r3, #4
 800365e:	bf38      	it	cc
 8003660:	2304      	movcc	r3, #4
 8003662:	e04f      	b.n	8003704 <HAL_I2C_Init+0x1c4>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d111      	bne.n	8003690 <HAL_I2C_Init+0x150>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	440b      	add	r3, r1
 800367a:	fbb0 f3f3 	udiv	r3, r0, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e012      	b.n	80036b6 <HAL_I2C_Init+0x176>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e58      	subs	r0, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	0099      	lsls	r1, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_Init+0x17e>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e022      	b.n	8003704 <HAL_I2C_Init+0x1c4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10e      	bne.n	80036e4 <HAL_I2C_Init+0x1a4>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1e58      	subs	r0, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	440b      	add	r3, r1
 80036d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e2:	e00f      	b.n	8003704 <HAL_I2C_Init+0x1c4>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1e58      	subs	r0, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	0099      	lsls	r1, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	6809      	ldr	r1, [r1, #0]
 8003708:	4313      	orrs	r3, r2
 800370a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6911      	ldr	r1, [r2, #16]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68d2      	ldr	r2, [r2, #12]
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	430b      	orrs	r3, r1
 8003746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	000186a0 	.word	0x000186a0
 80037a0:	001e847f 	.word	0x001e847f
 80037a4:	003d08ff 	.word	0x003d08ff
 80037a8:	431bde83 	.word	0x431bde83
 80037ac:	10624dd3 	.word	0x10624dd3

080037b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	817b      	strh	r3, [r7, #10]
 80037c2:	460b      	mov	r3, r1
 80037c4:	813b      	strh	r3, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ca:	f7ff fbad 	bl	8002f28 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	f040 80d9 	bne.w	8003990 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2319      	movs	r3, #25
 80037e4:	2201      	movs	r2, #1
 80037e6:	496d      	ldr	r1, [pc, #436]	; (800399c <HAL_I2C_Mem_Write+0x1ec>)
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fc7f 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
 80037f6:	e0cc      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Mem_Write+0x56>
 8003802:	2302      	movs	r3, #2
 8003804:	e0c5      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d007      	beq.n	800382c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2221      	movs	r2, #33	; 0x21
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a4d      	ldr	r2, [pc, #308]	; (80039a0 <HAL_I2C_Mem_Write+0x1f0>)
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800386e:	88f8      	ldrh	r0, [r7, #6]
 8003870:	893a      	ldrh	r2, [r7, #8]
 8003872:	8979      	ldrh	r1, [r7, #10]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4603      	mov	r3, r0
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fab6 	bl	8003df0 <I2C_RequestMemoryWrite>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d052      	beq.n	8003930 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e081      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fd00 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d107      	bne.n	80038b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06b      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d11b      	bne.n	8003930 <HAL_I2C_Mem_Write+0x180>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1aa      	bne.n	800388e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fcec 	bl	800431a <I2C_WaitOnBTFFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	2b04      	cmp	r3, #4
 800394e:	d107      	bne.n	8003960 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e016      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	00100002 	.word	0x00100002
 80039a0:	ffff0000 	.word	0xffff0000

080039a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	; 0x30
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039be:	f7ff fab3 	bl	8002f28 <HAL_GetTick>
 80039c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	f040 8208 	bne.w	8003de2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2319      	movs	r3, #25
 80039d8:	2201      	movs	r2, #1
 80039da:	497b      	ldr	r1, [pc, #492]	; (8003bc8 <HAL_I2C_Mem_Read+0x224>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fb85 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
 80039ea:	e1fb      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Mem_Read+0x56>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e1f4      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d007      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2222      	movs	r2, #34	; 0x22
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a5b      	ldr	r2, [pc, #364]	; (8003bcc <HAL_I2C_Mem_Read+0x228>)
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a62:	88f8      	ldrh	r0, [r7, #6]
 8003a64:	893a      	ldrh	r2, [r7, #8]
 8003a66:	8979      	ldrh	r1, [r7, #10]
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4603      	mov	r3, r0
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fa52 	bl	8003f1c <I2C_RequestMemoryRead>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e1b0      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d113      	bne.n	8003ab2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	623b      	str	r3, [r7, #32]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e184      	b.n	8003dbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d11b      	bne.n	8003af2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e164      	b.n	8003dbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d11b      	bne.n	8003b32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	e144      	b.n	8003dbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b48:	e138      	b.n	8003dbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	f200 80f1 	bhi.w	8003d36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d123      	bne.n	8003ba4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fc1b 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e139      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba2:	e10b      	b.n	8003dbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d14e      	bne.n	8003c4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4906      	ldr	r1, [pc, #24]	; (8003bd0 <HAL_I2C_Mem_Read+0x22c>)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fa98 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e10e      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
 8003bc6:	bf00      	nop
 8003bc8:	00100002 	.word	0x00100002
 8003bcc:	ffff0000 	.word	0xffff0000
 8003bd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c48:	e0b8      	b.n	8003dbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2200      	movs	r2, #0
 8003c52:	4966      	ldr	r1, [pc, #408]	; (8003dec <HAL_I2C_Mem_Read+0x448>)
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fa49 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0bf      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	2200      	movs	r2, #0
 8003cae:	494f      	ldr	r1, [pc, #316]	; (8003dec <HAL_I2C_Mem_Read+0x448>)
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fa1b 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e091      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d34:	e042      	b.n	8003dbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fb2e 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e04c      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d118      	bne.n	8003dbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f47f aec2 	bne.w	8003b4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e000      	b.n	8003de4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003de2:	2302      	movs	r3, #2
  }
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3728      	adds	r7, #40	; 0x28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	00010004 	.word	0x00010004

08003df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	817b      	strh	r3, [r7, #10]
 8003e02:	460b      	mov	r3, r1
 8003e04:	813b      	strh	r3, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f960 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e40:	d103      	bne.n	8003e4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e05f      	b.n	8003f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	492d      	ldr	r1, [pc, #180]	; (8003f18 <I2C_RequestMemoryWrite+0x128>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f998 	bl	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e04c      	b.n	8003f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fa02 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d107      	bne.n	8003eb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e02b      	b.n	8003f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
 8003ec6:	e021      	b.n	8003f0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f9dc 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e005      	b.n	8003f0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	00010002 	.word	0x00010002

08003f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f8c2 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7c:	d103      	bne.n	8003f86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0aa      	b.n	80040e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	4952      	ldr	r1, [pc, #328]	; (80040e8 <I2C_RequestMemoryRead+0x1cc>)
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f8fa 	bl	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e097      	b.n	80040e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc8:	6a39      	ldr	r1, [r7, #32]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f964 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d107      	bne.n	8003fee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e076      	b.n	80040e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff8:	893b      	ldrh	r3, [r7, #8]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]
 8004002:	e021      	b.n	8004048 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004004:	893b      	ldrh	r3, [r7, #8]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	b29b      	uxth	r3, r3
 800400a:	b2da      	uxtb	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	6a39      	ldr	r1, [r7, #32]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f93e 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b04      	cmp	r3, #4
 8004028:	d107      	bne.n	800403a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e050      	b.n	80040e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800403e:	893b      	ldrh	r3, [r7, #8]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404a:	6a39      	ldr	r1, [r7, #32]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f923 	bl	8004298 <I2C_WaitOnTXEFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	2b04      	cmp	r3, #4
 800405e:	d107      	bne.n	8004070 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e035      	b.n	80040e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004082:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	2200      	movs	r2, #0
 800408c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f82b 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00d      	beq.n	80040b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040aa:	d103      	bne.n	80040b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e013      	b.n	80040e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040b8:	897b      	ldrh	r3, [r7, #10]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	4906      	ldr	r1, [pc, #24]	; (80040e8 <I2C_RequestMemoryRead+0x1cc>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f863 	bl	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	00010002 	.word	0x00010002

080040ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fc:	e025      	b.n	800414a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d021      	beq.n	800414a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fe ff0f 	bl	8002f28 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d116      	bne.n	800414a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e023      	b.n	8004192 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10d      	bne.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	43da      	mvns	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	e00c      	b.n	800418a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d0b6      	beq.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041a8:	e051      	b.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d123      	bne.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e046      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d021      	beq.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fe fe8d 	bl	8002f28 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d116      	bne.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e020      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10c      	bne.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	e00b      	b.n	800428a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	43da      	mvns	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4013      	ands	r3, r2
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d18d      	bne.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042a4:	e02d      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f8ce 	bl	8004448 <I2C_IsAcknowledgeFailed>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e02d      	b.n	8004312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d021      	beq.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fe fe33 	bl	8002f28 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e007      	b.n	8004312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d1ca      	bne.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004326:	e02d      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f88d 	bl	8004448 <I2C_IsAcknowledgeFailed>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e02d      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d021      	beq.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fe fdf2 	bl	8002f28 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e007      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d1ca      	bne.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a8:	e042      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d119      	bne.n	80043ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0210 	mvn.w	r2, #16
 80043c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e029      	b.n	8004440 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ec:	f7fe fd9c 	bl	8002f28 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d116      	bne.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e007      	b.n	8004440 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d1b5      	bne.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445e:	d11b      	bne.n	8004498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f043 0204 	orr.w	r2, r3, #4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a8:	b08f      	sub	sp, #60	; 0x3c
 80044aa:	af0a      	add	r7, sp, #40	; 0x28
 80044ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e10f      	b.n	80046d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f005 ffc4 	bl	800a460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2203      	movs	r2, #3
 80044dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f002 ff7d 	bl	80073f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	687e      	ldr	r6, [r7, #4]
 8004504:	466d      	mov	r5, sp
 8004506:	f106 0410 	add.w	r4, r6, #16
 800450a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800450c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800450e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004516:	e885 0003 	stmia.w	r5, {r0, r1}
 800451a:	1d33      	adds	r3, r6, #4
 800451c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800451e:	6838      	ldr	r0, [r7, #0]
 8004520:	f002 fe54 	bl	80071cc <USB_CoreInit>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e0d0      	b.n	80046d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f002 ff6b 	bl	8007418 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
 8004546:	e04a      	b.n	80045de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	333d      	adds	r3, #61	; 0x3d
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	333c      	adds	r3, #60	; 0x3c
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004570:	7bfa      	ldrb	r2, [r7, #15]
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	b298      	uxth	r0, r3
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	3342      	adds	r3, #66	; 0x42
 8004584:	4602      	mov	r2, r0
 8004586:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	333f      	adds	r3, #63	; 0x3f
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3344      	adds	r3, #68	; 0x44
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3348      	adds	r3, #72	; 0x48
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3350      	adds	r3, #80	; 0x50
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	3301      	adds	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	7bfa      	ldrb	r2, [r7, #15]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3af      	bcc.n	8004548 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
 80045ec:	e044      	b.n	8004678 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045ee:	7bfa      	ldrb	r2, [r7, #15]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004604:	7bfa      	ldrb	r2, [r7, #15]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004616:	7bfa      	ldrb	r2, [r7, #15]
 8004618:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800461a:	7bfa      	ldrb	r2, [r7, #15]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004646:	7bfa      	ldrb	r2, [r7, #15]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	3301      	adds	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	d3b5      	bcc.n	80045ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	687e      	ldr	r6, [r7, #4]
 800468a:	466d      	mov	r5, sp
 800468c:	f106 0410 	add.w	r4, r6, #16
 8004690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800469c:	e885 0003 	stmia.w	r5, {r0, r1}
 80046a0:	1d33      	adds	r3, r6, #4
 80046a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046a4:	6838      	ldr	r0, [r7, #0]
 80046a6:	f002 fee1 	bl	800746c <USB_DevInit>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e00d      	b.n	80046d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f003 ff29 	bl	8008528 <USB_DevDisconnect>

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_PCD_Start+0x1c>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e020      	b.n	800473e <HAL_PCD_Start+0x5e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	2b01      	cmp	r3, #1
 800470a:	d109      	bne.n	8004720 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004710:	2b01      	cmp	r3, #1
 8004712:	d005      	beq.n	8004720 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f002 fe55 	bl	80073d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f003 fed9 	bl	80084e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004746:	b590      	push	{r4, r7, lr}
 8004748:	b08d      	sub	sp, #52	; 0x34
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f003 ff97 	bl	8008690 <USB_GetMode>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 839d 	bne.w	8004ea4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f003 fefb 	bl	800856a <USB_ReadInterrupts>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8393 	beq.w	8004ea2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f003 fef2 	bl	800856a <USB_ReadInterrupts>
 8004786:	4603      	mov	r3, r0
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b02      	cmp	r3, #2
 800478e:	d107      	bne.n	80047a0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f002 0202 	and.w	r2, r2, #2
 800479e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f003 fee0 	bl	800856a <USB_ReadInterrupts>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d161      	bne.n	8004878 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0210 	bic.w	r2, r2, #16
 80047c2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	3304      	adds	r3, #4
 80047e2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	0c5b      	lsrs	r3, r3, #17
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d124      	bne.n	800483a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d035      	beq.n	8004868 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800480a:	b29b      	uxth	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	6a38      	ldr	r0, [r7, #32]
 8004810:	f003 fd46 	bl	80082a0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004820:	441a      	add	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004832:	441a      	add	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	619a      	str	r2, [r3, #24]
 8004838:	e016      	b.n	8004868 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	0c5b      	lsrs	r3, r3, #17
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	2b06      	cmp	r3, #6
 8004844:	d110      	bne.n	8004868 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800484c:	2208      	movs	r2, #8
 800484e:	4619      	mov	r1, r3
 8004850:	6a38      	ldr	r0, [r7, #32]
 8004852:	f003 fd25 	bl	80082a0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004862:	441a      	add	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0210 	orr.w	r2, r2, #16
 8004876:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f003 fe74 	bl	800856a <USB_ReadInterrupts>
 8004882:	4603      	mov	r3, r0
 8004884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004888:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800488c:	d16e      	bne.n	800496c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f003 fe7a 	bl	8008590 <USB_ReadDevAllOutEpInterrupt>
 800489c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800489e:	e062      	b.n	8004966 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d057      	beq.n	800495a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f003 fe9f 	bl	80085f8 <USB_ReadDevOutEPInterrupt>
 80048ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d2:	461a      	mov	r2, r3
 80048d4:	2301      	movs	r3, #1
 80048d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fdb0 	bl	8005440 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00c      	beq.n	8004904 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	461a      	mov	r2, r3
 80048f8:	2308      	movs	r3, #8
 80048fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 feaa 	bl	8005658 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	2310      	movs	r3, #16
 800491e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	461a      	mov	r2, r3
 8004938:	2320      	movs	r3, #32
 800493a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004958:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	3301      	adds	r3, #1
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d199      	bne.n	80048a0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f003 fdfa 	bl	800856a <USB_ReadInterrupts>
 8004976:	4603      	mov	r3, r0
 8004978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004980:	f040 80c0 	bne.w	8004b04 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f003 fe1b 	bl	80085c4 <USB_ReadDevAllInEpInterrupt>
 800498e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004994:	e0b2      	b.n	8004afc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80a7 	beq.w	8004af0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f003 fe41 	bl	8008634 <USB_ReadDevInEPInterrupt>
 80049b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d057      	beq.n	8004a6e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	2201      	movs	r2, #1
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69f9      	ldr	r1, [r7, #28]
 80049da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049de:	4013      	ands	r3, r2
 80049e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	461a      	mov	r2, r3
 80049f0:	2301      	movs	r3, #1
 80049f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d132      	bne.n	8004a62 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	3348      	adds	r3, #72	; 0x48
 8004a0c:	6819      	ldr	r1, [r3, #0]
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4403      	add	r3, r0
 8004a1c:	3344      	adds	r3, #68	; 0x44
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4419      	add	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4403      	add	r3, r0
 8004a30:	3348      	adds	r3, #72	; 0x48
 8004a32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d113      	bne.n	8004a62 <HAL_PCD_IRQHandler+0x31c>
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	3350      	adds	r3, #80	; 0x50
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d108      	bne.n	8004a62 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	f003 fe49 	bl	80086f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f005 fd7a 	bl	800a562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	461a      	mov	r2, r3
 8004a86:	2308      	movs	r3, #8
 8004a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2310      	movs	r3, #16
 8004aa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	461a      	mov	r2, r3
 8004abe:	2340      	movs	r3, #64	; 0x40
 8004ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2302      	movs	r3, #2
 8004adc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fc1b 	bl	8005326 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	3301      	adds	r3, #1
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	085b      	lsrs	r3, r3, #1
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f47f af49 	bne.w	8004996 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f003 fd2e 	bl	800856a <USB_ReadInterrupts>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b18:	d122      	bne.n	8004b60 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d108      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b40:	2100      	movs	r1, #0
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fe26 	bl	8005794 <HAL_PCDEx_LPM_Callback>
 8004b48:	e002      	b.n	8004b50 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f005 fd80 	bl	800a650 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f003 fd00 	bl	800856a <USB_ReadInterrupts>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b74:	d112      	bne.n	8004b9c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d102      	bne.n	8004b8c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f005 fd3c 	bl	800a604 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b9a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f003 fce2 	bl	800856a <USB_ReadInterrupts>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb0:	f040 80c7 	bne.w	8004d42 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2110      	movs	r1, #16
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f002 fdb0 	bl	8007734 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd8:	e056      	b.n	8004c88 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	461a      	mov	r2, r3
 8004be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c0c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1e:	0151      	lsls	r1, r2, #5
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	440a      	add	r2, r1
 8004c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	3301      	adds	r3, #1
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d3a3      	bcc.n	8004bda <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ca4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cbe:	f043 030b 	orr.w	r3, r3, #11
 8004cc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd4:	f043 030b 	orr.w	r3, r3, #11
 8004cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cda:	e015      	b.n	8004d08 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004cf2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d02:	f043 030b 	orr.w	r3, r3, #11
 8004d06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f003 fce1 	bl	80086f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f003 fc0f 	bl	800856a <USB_ReadInterrupts>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d56:	d124      	bne.n	8004da2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f003 fca5 	bl	80086ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f002 fd45 	bl	80077f6 <USB_GetDevSpeed>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681c      	ldr	r4, [r3, #0]
 8004d78:	f001 f944 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8004d7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	4620      	mov	r0, r4
 8004d88:	f002 fa82 	bl	8007290 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f005 fc10 	bl	800a5b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f003 fbdf 	bl	800856a <USB_ReadInterrupts>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d10a      	bne.n	8004dcc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f005 fbed 	bl	800a596 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f002 0208 	and.w	r2, r2, #8
 8004dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f003 fbca 	bl	800856a <USB_ReadInterrupts>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de0:	d10f      	bne.n	8004e02 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f005 fc4f 	bl	800a690 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f003 fbaf 	bl	800856a <USB_ReadInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e16:	d10f      	bne.n	8004e38 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f005 fc22 	bl	800a66c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f003 fb94 	bl	800856a <USB_ReadInterrupts>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4c:	d10a      	bne.n	8004e64 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f005 fc30 	bl	800a6b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f003 fb7e 	bl	800856a <USB_ReadInterrupts>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d115      	bne.n	8004ea4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f005 fc20 	bl	800a6d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	e000      	b.n	8004ea4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004ea2:	bf00      	nop
    }
  }
}
 8004ea4:	3734      	adds	r7, #52	; 0x34
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd90      	pop	{r4, r7, pc}

08004eaa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_PCD_SetAddress+0x1a>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e013      	b.n	8004eec <HAL_PCD_SetAddress+0x42>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	78fa      	ldrb	r2, [r7, #3]
 8004ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	4611      	mov	r1, r2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f003 fadc 	bl	800849a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	4608      	mov	r0, r1
 8004efe:	4611      	mov	r1, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	70fb      	strb	r3, [r7, #3]
 8004f06:	460b      	mov	r3, r1
 8004f08:	803b      	strh	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da0f      	bge.n	8004f3a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	f003 020f 	and.w	r2, r3, #15
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	3338      	adds	r3, #56	; 0x38
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3304      	adds	r3, #4
 8004f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	705a      	strb	r2, [r3, #1]
 8004f38:	e00f      	b.n	8004f5a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	f003 020f 	and.w	r2, r3, #15
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	3304      	adds	r3, #4
 8004f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f66:	883a      	ldrh	r2, [r7, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	78ba      	ldrb	r2, [r7, #2]
 8004f70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d004      	beq.n	8004f84 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f84:	78bb      	ldrb	r3, [r7, #2]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d102      	bne.n	8004f90 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_PCD_EP_Open+0xaa>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e00e      	b.n	8004fbc <HAL_PCD_EP_Open+0xc8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f002 fc47 	bl	8007840 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004fba:	7afb      	ldrb	r3, [r7, #11]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	da0f      	bge.n	8004ff8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	3338      	adds	r3, #56	; 0x38
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4413      	add	r3, r2
 8004fec:	3304      	adds	r3, #4
 8004fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	705a      	strb	r2, [r3, #1]
 8004ff6:	e00f      	b.n	8005018 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	f003 020f 	and.w	r2, r3, #15
 8004ffe:	4613      	mov	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	3304      	adds	r3, #4
 8005010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_PCD_EP_Close+0x6e>
 800502e:	2302      	movs	r3, #2
 8005030:	e00e      	b.n	8005050 <HAL_PCD_EP_Close+0x8c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	4618      	mov	r0, r3
 8005042:	f002 fc85 	bl	8007950 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	460b      	mov	r3, r1
 8005066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005068:	7afb      	ldrb	r3, [r7, #11]
 800506a:	f003 020f 	and.w	r2, r3, #15
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	3304      	adds	r3, #4
 8005080:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2200      	movs	r2, #0
 8005098:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d102      	bne.n	80050b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050b4:	7afb      	ldrb	r3, [r7, #11]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	6979      	ldr	r1, [r7, #20]
 80050cc:	f002 ff60 	bl	8007f90 <USB_EP0StartXfer>
 80050d0:	e008      	b.n	80050e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	f002 fd12 	bl	8007b08 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005110:	681b      	ldr	r3, [r3, #0]
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b086      	sub	sp, #24
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	460b      	mov	r3, r1
 800512c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512e:	7afb      	ldrb	r3, [r7, #11]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	3338      	adds	r3, #56	; 0x38
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	3304      	adds	r3, #4
 8005144:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2200      	movs	r2, #0
 8005156:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2201      	movs	r2, #1
 800515c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800515e:	7afb      	ldrb	r3, [r7, #11]
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	b2da      	uxtb	r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d102      	bne.n	8005178 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005178:	7afb      	ldrb	r3, [r7, #11]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	6979      	ldr	r1, [r7, #20]
 8005190:	f002 fefe 	bl	8007f90 <USB_EP0StartXfer>
 8005194:	e008      	b.n	80051a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	6979      	ldr	r1, [r7, #20]
 80051a4:	f002 fcb0 	bl	8007b08 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	f003 020f 	and.w	r2, r3, #15
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d901      	bls.n	80051d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e050      	b.n	8005272 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	da0f      	bge.n	80051f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	4613      	mov	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	3338      	adds	r3, #56	; 0x38
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	3304      	adds	r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	705a      	strb	r2, [r3, #1]
 80051f6:	e00d      	b.n	8005214 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4413      	add	r3, r2
 800520a:	3304      	adds	r3, #4
 800520c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_PCD_EP_SetStall+0x82>
 8005230:	2302      	movs	r3, #2
 8005232:	e01e      	b.n	8005272 <HAL_PCD_EP_SetStall+0xc0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	4618      	mov	r0, r3
 8005244:	f003 f855 	bl	80082f2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	b2d9      	uxtb	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005262:	461a      	mov	r2, r3
 8005264:	f003 fa46 	bl	80086f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	f003 020f 	and.w	r2, r3, #15
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d901      	bls.n	8005298 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e042      	b.n	800531e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800529c:	2b00      	cmp	r3, #0
 800529e:	da0f      	bge.n	80052c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	f003 020f 	and.w	r2, r3, #15
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	3338      	adds	r3, #56	; 0x38
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	3304      	adds	r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	705a      	strb	r2, [r3, #1]
 80052be:	e00f      	b.n	80052e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	3304      	adds	r3, #4
 80052d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_PCD_EP_ClrStall+0x86>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e00e      	b.n	800531e <HAL_PCD_EP_ClrStall+0xa4>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68f9      	ldr	r1, [r7, #12]
 800530e:	4618      	mov	r0, r3
 8005310:	f003 f85d 	bl	80083ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b08a      	sub	sp, #40	; 0x28
 800532a:	af02      	add	r7, sp, #8
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	3338      	adds	r3, #56	; 0x38
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	3304      	adds	r3, #4
 800534c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	429a      	cmp	r2, r3
 8005358:	d901      	bls.n	800535e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e06c      	b.n	8005438 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	429a      	cmp	r2, r3
 8005372:	d902      	bls.n	800537a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	3303      	adds	r3, #3
 800537e:	089b      	lsrs	r3, r3, #2
 8005380:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005382:	e02b      	b.n	80053dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	429a      	cmp	r2, r3
 8005398:	d902      	bls.n	80053a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3303      	adds	r3, #3
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68d9      	ldr	r1, [r3, #12]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	4603      	mov	r3, r0
 80053be:	6978      	ldr	r0, [r7, #20]
 80053c0:	f002 ff39 	bl	8008236 <USB_WritePacket>

    ep->xfer_buff  += len;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	441a      	add	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	441a      	add	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d809      	bhi.n	8005406 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d203      	bcs.n	8005406 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1be      	bne.n	8005384 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	429a      	cmp	r2, r3
 8005410:	d811      	bhi.n	8005436 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	2201      	movs	r2, #1
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	43db      	mvns	r3, r3
 800542c:	6939      	ldr	r1, [r7, #16]
 800542e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005432:	4013      	ands	r3, r2
 8005434:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	333c      	adds	r3, #60	; 0x3c
 8005458:	3304      	adds	r3, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b01      	cmp	r3, #1
 8005474:	f040 80a0 	bne.w	80055b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d015      	beq.n	80054ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a72      	ldr	r2, [pc, #456]	; (8005650 <PCD_EP_OutXfrComplete_int+0x210>)
 8005486:	4293      	cmp	r3, r2
 8005488:	f240 80dd 	bls.w	8005646 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80d7 	beq.w	8005646 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	461a      	mov	r2, r3
 80054a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054aa:	6093      	str	r3, [r2, #8]
 80054ac:	e0cb      	b.n	8005646 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c4:	461a      	mov	r2, r3
 80054c6:	2320      	movs	r3, #32
 80054c8:	6093      	str	r3, [r2, #8]
 80054ca:	e0bc      	b.n	8005646 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f040 80b7 	bne.w	8005646 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a5d      	ldr	r2, [pc, #372]	; (8005650 <PCD_EP_OutXfrComplete_int+0x210>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d90f      	bls.n	8005500 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	461a      	mov	r2, r3
 80054f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fc:	6093      	str	r3, [r2, #8]
 80054fe:	e0a2      	b.n	8005646 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005512:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	0159      	lsls	r1, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	440b      	add	r3, r1
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005526:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4403      	add	r3, r0
 8005536:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800553a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4403      	add	r3, r0
 800555e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4419      	add	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4403      	add	r3, r0
 8005574:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005578:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d114      	bne.n	80055aa <PCD_EP_OutXfrComplete_int+0x16a>
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d108      	bne.n	80055aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055a2:	461a      	mov	r2, r3
 80055a4:	2101      	movs	r1, #1
 80055a6:	f003 f8a5 	bl	80086f4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f004 ffbb 	bl	800a52c <HAL_PCD_DataOutStageCallback>
 80055b6:	e046      	b.n	8005646 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a26      	ldr	r2, [pc, #152]	; (8005654 <PCD_EP_OutXfrComplete_int+0x214>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d124      	bne.n	800560a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	461a      	mov	r2, r3
 80055d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055dc:	6093      	str	r3, [r2, #8]
 80055de:	e032      	b.n	8005646 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	2320      	movs	r3, #32
 80055fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f004 ff92 	bl	800a52c <HAL_PCD_DataOutStageCallback>
 8005608:	e01d      	b.n	8005646 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d114      	bne.n	800563a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d108      	bne.n	800563a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005632:	461a      	mov	r2, r3
 8005634:	2100      	movs	r1, #0
 8005636:	f003 f85d 	bl	80086f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f004 ff73 	bl	800a52c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	4f54300a 	.word	0x4f54300a
 8005654:	4f54310a 	.word	0x4f54310a

08005658 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	333c      	adds	r3, #60	; 0x3c
 8005670:	3304      	adds	r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d90e      	bls.n	80056ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f004 ff2b 	bl	800a508 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d90c      	bls.n	80056d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d108      	bne.n	80056d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056cc:	461a      	mov	r2, r3
 80056ce:	2101      	movs	r1, #1
 80056d0:	f003 f810 	bl	80086f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	4f54300a 	.word	0x4f54300a

080056e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	70fb      	strb	r3, [r7, #3]
 80056f0:	4613      	mov	r3, r2
 80056f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d107      	bne.n	8005712 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005702:	883b      	ldrh	r3, [r7, #0]
 8005704:	0419      	lsls	r1, r3, #16
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	430a      	orrs	r2, r1
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
 8005710:	e028      	b.n	8005764 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	4413      	add	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005720:	2300      	movs	r3, #0
 8005722:	73fb      	strb	r3, [r7, #15]
 8005724:	e00d      	b.n	8005742 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	3340      	adds	r3, #64	; 0x40
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	4413      	add	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	3301      	adds	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]
 8005742:	7bfa      	ldrb	r2, [r7, #15]
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	3b01      	subs	r3, #1
 8005748:	429a      	cmp	r2, r3
 800574a:	d3ec      	bcc.n	8005726 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800574c:	883b      	ldrh	r3, [r7, #0]
 800574e:	0418      	lsls	r0, r3, #16
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	3b01      	subs	r3, #1
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	4302      	orrs	r2, r0
 800575c:	3340      	adds	r3, #64	; 0x40
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	887a      	ldrh	r2, [r7, #2]
 8005784:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e25b      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d075      	beq.n	80058b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ca:	4ba3      	ldr	r3, [pc, #652]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d00c      	beq.n	80057f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057d6:	4ba0      	ldr	r3, [pc, #640]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d112      	bne.n	8005808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e2:	4b9d      	ldr	r3, [pc, #628]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ee:	d10b      	bne.n	8005808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f0:	4b99      	ldr	r3, [pc, #612]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d05b      	beq.n	80058b4 <HAL_RCC_OscConfig+0x108>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d157      	bne.n	80058b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e236      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005810:	d106      	bne.n	8005820 <HAL_RCC_OscConfig+0x74>
 8005812:	4b91      	ldr	r3, [pc, #580]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a90      	ldr	r2, [pc, #576]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e01d      	b.n	800585c <HAL_RCC_OscConfig+0xb0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005828:	d10c      	bne.n	8005844 <HAL_RCC_OscConfig+0x98>
 800582a:	4b8b      	ldr	r3, [pc, #556]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a8a      	ldr	r2, [pc, #552]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	4b88      	ldr	r3, [pc, #544]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a87      	ldr	r2, [pc, #540]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 800583c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e00b      	b.n	800585c <HAL_RCC_OscConfig+0xb0>
 8005844:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a83      	ldr	r2, [pc, #524]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 800584a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	4b81      	ldr	r3, [pc, #516]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a80      	ldr	r2, [pc, #512]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fd fb60 	bl	8002f28 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800586c:	f7fd fb5c 	bl	8002f28 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b64      	cmp	r3, #100	; 0x64
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e1fb      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587e:	4b76      	ldr	r3, [pc, #472]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0xc0>
 800588a:	e014      	b.n	80058b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588c:	f7fd fb4c 	bl	8002f28 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005894:	f7fd fb48 	bl	8002f28 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b64      	cmp	r3, #100	; 0x64
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e1e7      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a6:	4b6c      	ldr	r3, [pc, #432]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_OscConfig+0xe8>
 80058b2:	e000      	b.n	80058b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d063      	beq.n	800598a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058c2:	4b65      	ldr	r3, [pc, #404]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ce:	4b62      	ldr	r3, [pc, #392]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d11c      	bne.n	8005914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058da:	4b5f      	ldr	r3, [pc, #380]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d116      	bne.n	8005914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e6:	4b5c      	ldr	r3, [pc, #368]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <HAL_RCC_OscConfig+0x152>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d001      	beq.n	80058fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e1bb      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fe:	4b56      	ldr	r3, [pc, #344]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4952      	ldr	r1, [pc, #328]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 800590e:	4313      	orrs	r3, r2
 8005910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005912:	e03a      	b.n	800598a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d020      	beq.n	800595e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800591c:	4b4f      	ldr	r3, [pc, #316]	; (8005a5c <HAL_RCC_OscConfig+0x2b0>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fd fb01 	bl	8002f28 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592a:	f7fd fafd 	bl	8002f28 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e19c      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593c:	4b46      	ldr	r3, [pc, #280]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005948:	4b43      	ldr	r3, [pc, #268]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4940      	ldr	r1, [pc, #256]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]
 800595c:	e015      	b.n	800598a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800595e:	4b3f      	ldr	r3, [pc, #252]	; (8005a5c <HAL_RCC_OscConfig+0x2b0>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fd fae0 	bl	8002f28 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800596c:	f7fd fadc 	bl	8002f28 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e17b      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800597e:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d030      	beq.n	80059f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800599e:	4b30      	ldr	r3, [pc, #192]	; (8005a60 <HAL_RCC_OscConfig+0x2b4>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fd fac0 	bl	8002f28 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ac:	f7fd fabc 	bl	8002f28 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e15b      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059be:	4b26      	ldr	r3, [pc, #152]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0x200>
 80059ca:	e015      	b.n	80059f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059cc:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <HAL_RCC_OscConfig+0x2b4>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d2:	f7fd faa9 	bl	8002f28 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059da:	f7fd faa5 	bl	8002f28 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e144      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 80059ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f0      	bne.n	80059da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80a0 	beq.w	8005b46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0a:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10f      	bne.n	8005a36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	4a0e      	ldr	r2, [pc, #56]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6413      	str	r3, [r2, #64]	; 0x40
 8005a26:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCC_OscConfig+0x2b8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d121      	bne.n	8005a86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <HAL_RCC_OscConfig+0x2b8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a07      	ldr	r2, [pc, #28]	; (8005a64 <HAL_RCC_OscConfig+0x2b8>)
 8005a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a4e:	f7fd fa6b 	bl	8002f28 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a54:	e011      	b.n	8005a7a <HAL_RCC_OscConfig+0x2ce>
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	42470000 	.word	0x42470000
 8005a60:	42470e80 	.word	0x42470e80
 8005a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a68:	f7fd fa5e 	bl	8002f28 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e0fd      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7a:	4b81      	ldr	r3, [pc, #516]	; (8005c80 <HAL_RCC_OscConfig+0x4d4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCC_OscConfig+0x2f0>
 8005a8e:	4b7d      	ldr	r3, [pc, #500]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	4a7c      	ldr	r2, [pc, #496]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9a:	e01c      	b.n	8005ad6 <HAL_RCC_OscConfig+0x32a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d10c      	bne.n	8005abe <HAL_RCC_OscConfig+0x312>
 8005aa4:	4b77      	ldr	r3, [pc, #476]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa8:	4a76      	ldr	r2, [pc, #472]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005aaa:	f043 0304 	orr.w	r3, r3, #4
 8005aae:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab0:	4b74      	ldr	r3, [pc, #464]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	4a73      	ldr	r2, [pc, #460]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	6713      	str	r3, [r2, #112]	; 0x70
 8005abc:	e00b      	b.n	8005ad6 <HAL_RCC_OscConfig+0x32a>
 8005abe:	4b71      	ldr	r3, [pc, #452]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	4a70      	ldr	r2, [pc, #448]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aca:	4b6e      	ldr	r3, [pc, #440]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	4a6d      	ldr	r2, [pc, #436]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005ad0:	f023 0304 	bic.w	r3, r3, #4
 8005ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d015      	beq.n	8005b0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ade:	f7fd fa23 	bl	8002f28 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae4:	e00a      	b.n	8005afc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f7fd fa1f 	bl	8002f28 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e0bc      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afc:	4b61      	ldr	r3, [pc, #388]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0ee      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x33a>
 8005b08:	e014      	b.n	8005b34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0a:	f7fd fa0d 	bl	8002f28 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b10:	e00a      	b.n	8005b28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b12:	f7fd fa09 	bl	8002f28 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e0a6      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b28:	4b56      	ldr	r3, [pc, #344]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ee      	bne.n	8005b12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d105      	bne.n	8005b46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3a:	4b52      	ldr	r3, [pc, #328]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4a51      	ldr	r2, [pc, #324]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8092 	beq.w	8005c74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b50:	4b4c      	ldr	r3, [pc, #304]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d05c      	beq.n	8005c16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d141      	bne.n	8005be8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b64:	4b48      	ldr	r3, [pc, #288]	; (8005c88 <HAL_RCC_OscConfig+0x4dc>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6a:	f7fd f9dd 	bl	8002f28 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b72:	f7fd f9d9 	bl	8002f28 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e078      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b84:	4b3f      	ldr	r3, [pc, #252]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f0      	bne.n	8005b72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	019b      	lsls	r3, r3, #6
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	061b      	lsls	r3, r3, #24
 8005bb4:	4933      	ldr	r1, [pc, #204]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bba:	4b33      	ldr	r3, [pc, #204]	; (8005c88 <HAL_RCC_OscConfig+0x4dc>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc0:	f7fd f9b2 	bl	8002f28 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc8:	f7fd f9ae 	bl	8002f28 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e04d      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x41c>
 8005be6:	e045      	b.n	8005c74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be8:	4b27      	ldr	r3, [pc, #156]	; (8005c88 <HAL_RCC_OscConfig+0x4dc>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bee:	f7fd f99b 	bl	8002f28 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fd f997 	bl	8002f28 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e036      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c08:	4b1e      	ldr	r3, [pc, #120]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f0      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x44a>
 8005c14:	e02e      	b.n	8005c74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e029      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c22:	4b18      	ldr	r3, [pc, #96]	; (8005c84 <HAL_RCC_OscConfig+0x4d8>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d11c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d115      	bne.n	8005c70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10d      	bne.n	8005c70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d106      	bne.n	8005c70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40007000 	.word	0x40007000
 8005c84:	40023800 	.word	0x40023800
 8005c88:	42470060 	.word	0x42470060

08005c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0cc      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca0:	4b68      	ldr	r3, [pc, #416]	; (8005e44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d90c      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cae:	4b65      	ldr	r3, [pc, #404]	; (8005e44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb6:	4b63      	ldr	r3, [pc, #396]	; (8005e44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0b8      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d020      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce0:	4b59      	ldr	r3, [pc, #356]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4a58      	ldr	r2, [pc, #352]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cf8:	4b53      	ldr	r3, [pc, #332]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	4a52      	ldr	r2, [pc, #328]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d04:	4b50      	ldr	r3, [pc, #320]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	494d      	ldr	r1, [pc, #308]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d044      	beq.n	8005dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d107      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2a:	4b47      	ldr	r3, [pc, #284]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d119      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e07f      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d003      	beq.n	8005d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d107      	bne.n	8005d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4a:	4b3f      	ldr	r3, [pc, #252]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e06f      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5a:	4b3b      	ldr	r3, [pc, #236]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e067      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6a:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f023 0203 	bic.w	r2, r3, #3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	4934      	ldr	r1, [pc, #208]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d7c:	f7fd f8d4 	bl	8002f28 <HAL_GetTick>
 8005d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d82:	e00a      	b.n	8005d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d84:	f7fd f8d0 	bl	8002f28 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e04f      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9a:	4b2b      	ldr	r3, [pc, #172]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 020c 	and.w	r2, r3, #12
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d1eb      	bne.n	8005d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dac:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <HAL_RCC_ClockConfig+0x1b8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d20c      	bcs.n	8005dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dba:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <HAL_RCC_ClockConfig+0x1b8>)
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc2:	4b20      	ldr	r3, [pc, #128]	; (8005e44 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d001      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e032      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de0:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4916      	ldr	r1, [pc, #88]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	490e      	ldr	r1, [pc, #56]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e12:	f000 f821 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005e16:	4601      	mov	r1, r0
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <HAL_RCC_ClockConfig+0x1c0>)
 8005e24:	5cd3      	ldrb	r3, [r2, r3]
 8005e26:	fa21 f303 	lsr.w	r3, r1, r3
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_RCC_ClockConfig+0x1c8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fd f834 	bl	8002ea0 <HAL_InitTick>

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40023c00 	.word	0x40023c00
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	0800cdf4 	.word	0x0800cdf4
 8005e50:	20000000 	.word	0x20000000
 8005e54:	20000004 	.word	0x20000004

08005e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	2300      	movs	r3, #0
 8005e68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e6e:	4b63      	ldr	r3, [pc, #396]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 030c 	and.w	r3, r3, #12
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d007      	beq.n	8005e8a <HAL_RCC_GetSysClockFreq+0x32>
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d008      	beq.n	8005e90 <HAL_RCC_GetSysClockFreq+0x38>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f040 80b4 	bne.w	8005fec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e84:	4b5e      	ldr	r3, [pc, #376]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e86:	60bb      	str	r3, [r7, #8]
       break;
 8005e88:	e0b3      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e8a:	4b5d      	ldr	r3, [pc, #372]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e8c:	60bb      	str	r3, [r7, #8]
      break;
 8005e8e:	e0b0      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e90:	4b5a      	ldr	r3, [pc, #360]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e9a:	4b58      	ldr	r3, [pc, #352]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04a      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ea6:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	099b      	lsrs	r3, r3, #6
 8005eac:	f04f 0400 	mov.w	r4, #0
 8005eb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	ea03 0501 	and.w	r5, r3, r1
 8005ebc:	ea04 0602 	and.w	r6, r4, r2
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	f04f 0400 	mov.w	r4, #0
 8005ecc:	0154      	lsls	r4, r2, #5
 8005ece:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ed2:	014b      	lsls	r3, r1, #5
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	1b49      	subs	r1, r1, r5
 8005eda:	eb62 0206 	sbc.w	r2, r2, r6
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	f04f 0400 	mov.w	r4, #0
 8005ee6:	0194      	lsls	r4, r2, #6
 8005ee8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005eec:	018b      	lsls	r3, r1, #6
 8005eee:	1a5b      	subs	r3, r3, r1
 8005ef0:	eb64 0402 	sbc.w	r4, r4, r2
 8005ef4:	f04f 0100 	mov.w	r1, #0
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	00e2      	lsls	r2, r4, #3
 8005efe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f02:	00d9      	lsls	r1, r3, #3
 8005f04:	460b      	mov	r3, r1
 8005f06:	4614      	mov	r4, r2
 8005f08:	195b      	adds	r3, r3, r5
 8005f0a:	eb44 0406 	adc.w	r4, r4, r6
 8005f0e:	f04f 0100 	mov.w	r1, #0
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	02a2      	lsls	r2, r4, #10
 8005f18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f1c:	0299      	lsls	r1, r3, #10
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	4621      	mov	r1, r4
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f04f 0400 	mov.w	r4, #0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4623      	mov	r3, r4
 8005f30:	f7fa fe8a 	bl	8000c48 <__aeabi_uldivmod>
 8005f34:	4603      	mov	r3, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e049      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3c:	4b2f      	ldr	r3, [pc, #188]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	099b      	lsrs	r3, r3, #6
 8005f42:	f04f 0400 	mov.w	r4, #0
 8005f46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f4a:	f04f 0200 	mov.w	r2, #0
 8005f4e:	ea03 0501 	and.w	r5, r3, r1
 8005f52:	ea04 0602 	and.w	r6, r4, r2
 8005f56:	4629      	mov	r1, r5
 8005f58:	4632      	mov	r2, r6
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	f04f 0400 	mov.w	r4, #0
 8005f62:	0154      	lsls	r4, r2, #5
 8005f64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f68:	014b      	lsls	r3, r1, #5
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	1b49      	subs	r1, r1, r5
 8005f70:	eb62 0206 	sbc.w	r2, r2, r6
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	f04f 0400 	mov.w	r4, #0
 8005f7c:	0194      	lsls	r4, r2, #6
 8005f7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f82:	018b      	lsls	r3, r1, #6
 8005f84:	1a5b      	subs	r3, r3, r1
 8005f86:	eb64 0402 	sbc.w	r4, r4, r2
 8005f8a:	f04f 0100 	mov.w	r1, #0
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	00e2      	lsls	r2, r4, #3
 8005f94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f98:	00d9      	lsls	r1, r3, #3
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	195b      	adds	r3, r3, r5
 8005fa0:	eb44 0406 	adc.w	r4, r4, r6
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	02a2      	lsls	r2, r4, #10
 8005fae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fb2:	0299      	lsls	r1, r3, #10
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4614      	mov	r4, r2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	4621      	mov	r1, r4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f04f 0400 	mov.w	r4, #0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	f7fa fe3f 	bl	8000c48 <__aeabi_uldivmod>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	460c      	mov	r4, r1
 8005fce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	3301      	adds	r3, #1
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	60bb      	str	r3, [r7, #8]
      break;
 8005fea:	e002      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b04      	ldr	r3, [pc, #16]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005fee:	60bb      	str	r3, [r7, #8]
      break;
 8005ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffc:	40023800 	.word	0x40023800
 8006000:	00f42400 	.word	0x00f42400

08006004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000000 	.word	0x20000000

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4601      	mov	r1, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a9b      	lsrs	r3, r3, #10
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4a03      	ldr	r2, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006032:	5cd3      	ldrb	r3, [r2, r3]
 8006034:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	0800ce04 	.word	0x0800ce04

08006044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e01d      	b.n	8006092 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fc fdb0 	bl	8002bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3304      	adds	r3, #4
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f000 fc72 	bl	800696c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b06      	cmp	r3, #6
 80060ba:	d007      	beq.n	80060cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b06      	cmp	r3, #6
 800610a:	d007      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e01d      	b.n	8006178 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d106      	bne.n	8006156 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7fc fc71 	bl	8002a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f000 fbff 	bl	800696c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2201      	movs	r2, #1
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f000 ff64 	bl	8007060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a15      	ldr	r2, [pc, #84]	; (80061f4 <HAL_TIM_PWM_Start+0x74>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d004      	beq.n	80061ac <HAL_TIM_PWM_Start+0x2c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <HAL_TIM_PWM_Start+0x78>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d101      	bne.n	80061b0 <HAL_TIM_PWM_Start+0x30>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <HAL_TIM_PWM_Start+0x32>
 80061b0:	2300      	movs	r3, #0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	d007      	beq.n	80061e8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40010400 	.word	0x40010400

080061fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ff26 	bl	8007060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <HAL_TIM_PWM_Stop+0xa8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_PWM_Stop+0x2c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_TIM_PWM_Stop+0xac>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d101      	bne.n	800622c <HAL_TIM_PWM_Stop+0x30>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <HAL_TIM_PWM_Stop+0x32>
 800622c:	2300      	movs	r3, #0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d017      	beq.n	8006262 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	f241 1311 	movw	r3, #4369	; 0x1111
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <HAL_TIM_PWM_Stop+0x66>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	f240 4344 	movw	r3, #1092	; 0x444
 800624c:	4013      	ands	r3, r2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <HAL_TIM_PWM_Stop+0x66>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a1a      	ldr	r2, [r3, #32]
 8006268:	f241 1311 	movw	r3, #4369	; 0x1111
 800626c:	4013      	ands	r3, r2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10f      	bne.n	8006292 <HAL_TIM_PWM_Stop+0x96>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	f240 4344 	movw	r3, #1092	; 0x444
 800627c:	4013      	ands	r3, r2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d107      	bne.n	8006292 <HAL_TIM_PWM_Stop+0x96>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0201 	bic.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010400 	.word	0x40010400

080062ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e01d      	b.n	80062fa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fc fbd0 	bl	8002a78 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f000 fb3e 	bl	800696c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b0c      	cmp	r3, #12
 8006312:	d841      	bhi.n	8006398 <HAL_TIM_IC_Start_IT+0x94>
 8006314:	a201      	add	r2, pc, #4	; (adr r2, 800631c <HAL_TIM_IC_Start_IT+0x18>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	08006351 	.word	0x08006351
 8006320:	08006399 	.word	0x08006399
 8006324:	08006399 	.word	0x08006399
 8006328:	08006399 	.word	0x08006399
 800632c:	08006363 	.word	0x08006363
 8006330:	08006399 	.word	0x08006399
 8006334:	08006399 	.word	0x08006399
 8006338:	08006399 	.word	0x08006399
 800633c:	08006375 	.word	0x08006375
 8006340:	08006399 	.word	0x08006399
 8006344:	08006399 	.word	0x08006399
 8006348:	08006399 	.word	0x08006399
 800634c:	08006387 	.word	0x08006387
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0202 	orr.w	r2, r2, #2
 800635e:	60da      	str	r2, [r3, #12]
      break;
 8006360:	e01b      	b.n	800639a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0204 	orr.w	r2, r2, #4
 8006370:	60da      	str	r2, [r3, #12]
      break;
 8006372:	e012      	b.n	800639a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0208 	orr.w	r2, r2, #8
 8006382:	60da      	str	r2, [r3, #12]
      break;
 8006384:	e009      	b.n	800639a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0210 	orr.w	r2, r2, #16
 8006394:	60da      	str	r2, [r3, #12]
      break;
 8006396:	e000      	b.n	800639a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006398:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2201      	movs	r2, #1
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fe5c 	bl	8007060 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d122      	bne.n	8006430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d11b      	bne.n	8006430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0202 	mvn.w	r2, #2
 8006400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fb fca6 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa86 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fa8d 	bl	8006944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b04      	cmp	r3, #4
 800643c:	d122      	bne.n	8006484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b04      	cmp	r3, #4
 800644a:	d11b      	bne.n	8006484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0204 	mvn.w	r2, #4
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb fc7c 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa5c 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fa63 	bl	8006944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b08      	cmp	r3, #8
 8006490:	d122      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b08      	cmp	r3, #8
 800649e:	d11b      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0208 	mvn.w	r2, #8
 80064a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2204      	movs	r2, #4
 80064ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fb fc52 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 80064c4:	e005      	b.n	80064d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa32 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fa39 	bl	8006944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0310 	and.w	r3, r3, #16
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0210 	mvn.w	r2, #16
 80064fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2208      	movs	r2, #8
 8006502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fb fc28 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa08 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fa0f 	bl	8006944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b01      	cmp	r3, #1
 8006538:	d10e      	bne.n	8006558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d107      	bne.n	8006558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0201 	mvn.w	r2, #1
 8006550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fb fbf2 	bl	8001d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b80      	cmp	r3, #128	; 0x80
 8006564:	d10e      	bne.n	8006584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006570:	2b80      	cmp	r3, #128	; 0x80
 8006572:	d107      	bne.n	8006584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800657c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fe1a 	bl	80071b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d10e      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d107      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9d4 	bl	8006958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d10e      	bne.n	80065dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0220 	mvn.w	r2, #32
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fde4 	bl	80071a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_IC_ConfigChannel+0x1a>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e08a      	b.n	8006714 <HAL_TIM_IC_ConfigChannel+0x130>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d11b      	bne.n	800664c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6819      	ldr	r1, [r3, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f000 fbf2 	bl	8006e0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 020c 	bic.w	r2, r2, #12
 8006636:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	619a      	str	r2, [r3, #24]
 800664a:	e05a      	b.n	8006702 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b04      	cmp	r3, #4
 8006650:	d11c      	bne.n	800668c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f000 fc47 	bl	8006ef4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006674:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6999      	ldr	r1, [r3, #24]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	021a      	lsls	r2, r3, #8
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	619a      	str	r2, [r3, #24]
 800668a:	e03a      	b.n	8006702 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b08      	cmp	r3, #8
 8006690:	d11b      	bne.n	80066ca <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6819      	ldr	r1, [r3, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f000 fc64 	bl	8006f6e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 020c 	bic.w	r2, r2, #12
 80066b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69d9      	ldr	r1, [r3, #28]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	61da      	str	r2, [r3, #28]
 80066c8:	e01b      	b.n	8006702 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6819      	ldr	r1, [r3, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f000 fc84 	bl	8006fe6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69d9      	ldr	r1, [r3, #28]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	021a      	lsls	r2, r3, #8
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006732:	2302      	movs	r3, #2
 8006734:	e0b4      	b.n	80068a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b0c      	cmp	r3, #12
 800674a:	f200 809f 	bhi.w	800688c <HAL_TIM_PWM_ConfigChannel+0x170>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006789 	.word	0x08006789
 8006758:	0800688d 	.word	0x0800688d
 800675c:	0800688d 	.word	0x0800688d
 8006760:	0800688d 	.word	0x0800688d
 8006764:	080067c9 	.word	0x080067c9
 8006768:	0800688d 	.word	0x0800688d
 800676c:	0800688d 	.word	0x0800688d
 8006770:	0800688d 	.word	0x0800688d
 8006774:	0800680b 	.word	0x0800680b
 8006778:	0800688d 	.word	0x0800688d
 800677c:	0800688d 	.word	0x0800688d
 8006780:	0800688d 	.word	0x0800688d
 8006784:	0800684b 	.word	0x0800684b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 f98c 	bl	8006aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0208 	orr.w	r2, r2, #8
 80067a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0204 	bic.w	r2, r2, #4
 80067b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6999      	ldr	r1, [r3, #24]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	619a      	str	r2, [r3, #24]
      break;
 80067c6:	e062      	b.n	800688e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f9dc 	bl	8006b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6999      	ldr	r1, [r3, #24]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	021a      	lsls	r2, r3, #8
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	619a      	str	r2, [r3, #24]
      break;
 8006808:	e041      	b.n	800688e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fa31 	bl	8006c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0208 	orr.w	r2, r2, #8
 8006824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0204 	bic.w	r2, r2, #4
 8006834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69d9      	ldr	r1, [r3, #28]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	61da      	str	r2, [r3, #28]
      break;
 8006848:	e021      	b.n	800688e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fa85 	bl	8006d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69da      	ldr	r2, [r3, #28]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69d9      	ldr	r1, [r3, #28]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	021a      	lsls	r2, r3, #8
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	61da      	str	r2, [r3, #28]
      break;
 800688a:	e000      	b.n	800688e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800688c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d831      	bhi.n	8006920 <HAL_TIM_ReadCapturedValue+0x78>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068f9 	.word	0x080068f9
 80068c8:	08006921 	.word	0x08006921
 80068cc:	08006921 	.word	0x08006921
 80068d0:	08006921 	.word	0x08006921
 80068d4:	08006903 	.word	0x08006903
 80068d8:	08006921 	.word	0x08006921
 80068dc:	08006921 	.word	0x08006921
 80068e0:	08006921 	.word	0x08006921
 80068e4:	0800690d 	.word	0x0800690d
 80068e8:	08006921 	.word	0x08006921
 80068ec:	08006921 	.word	0x08006921
 80068f0:	08006921 	.word	0x08006921
 80068f4:	08006917 	.word	0x08006917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fe:	60fb      	str	r3, [r7, #12]

      break;
 8006900:	e00f      	b.n	8006922 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	60fb      	str	r3, [r7, #12]

      break;
 800690a:	e00a      	b.n	8006922 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	60fb      	str	r3, [r7, #12]

      break;
 8006914:	e005      	b.n	8006922 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	60fb      	str	r3, [r7, #12]

      break;
 800691e:	e000      	b.n	8006922 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006920:	bf00      	nop
  }

  return tmpreg;
 8006922:	68fb      	ldr	r3, [r7, #12]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a40      	ldr	r2, [pc, #256]	; (8006a80 <TIM_Base_SetConfig+0x114>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d00f      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a3d      	ldr	r2, [pc, #244]	; (8006a84 <TIM_Base_SetConfig+0x118>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00b      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3c      	ldr	r2, [pc, #240]	; (8006a88 <TIM_Base_SetConfig+0x11c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d007      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a3b      	ldr	r2, [pc, #236]	; (8006a8c <TIM_Base_SetConfig+0x120>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_Base_SetConfig+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a3a      	ldr	r2, [pc, #232]	; (8006a90 <TIM_Base_SetConfig+0x124>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d108      	bne.n	80069be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2f      	ldr	r2, [pc, #188]	; (8006a80 <TIM_Base_SetConfig+0x114>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d02b      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069cc:	d027      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2c      	ldr	r2, [pc, #176]	; (8006a84 <TIM_Base_SetConfig+0x118>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d023      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2b      	ldr	r2, [pc, #172]	; (8006a88 <TIM_Base_SetConfig+0x11c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01f      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2a      	ldr	r2, [pc, #168]	; (8006a8c <TIM_Base_SetConfig+0x120>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01b      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a29      	ldr	r2, [pc, #164]	; (8006a90 <TIM_Base_SetConfig+0x124>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d017      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a28      	ldr	r2, [pc, #160]	; (8006a94 <TIM_Base_SetConfig+0x128>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a27      	ldr	r2, [pc, #156]	; (8006a98 <TIM_Base_SetConfig+0x12c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a26      	ldr	r2, [pc, #152]	; (8006a9c <TIM_Base_SetConfig+0x130>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <TIM_Base_SetConfig+0x134>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a24      	ldr	r2, [pc, #144]	; (8006aa4 <TIM_Base_SetConfig+0x138>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a23      	ldr	r2, [pc, #140]	; (8006aa8 <TIM_Base_SetConfig+0x13c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d108      	bne.n	8006a30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <TIM_Base_SetConfig+0x114>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d003      	beq.n	8006a64 <TIM_Base_SetConfig+0xf8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <TIM_Base_SetConfig+0x124>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d103      	bne.n	8006a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	615a      	str	r2, [r3, #20]
}
 8006a72:	bf00      	nop
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40010400 	.word	0x40010400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40014400 	.word	0x40014400
 8006a9c:	40014800 	.word	0x40014800
 8006aa0:	40001800 	.word	0x40001800
 8006aa4:	40001c00 	.word	0x40001c00
 8006aa8:	40002000 	.word	0x40002000

08006aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f023 0201 	bic.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f023 0302 	bic.w	r3, r3, #2
 8006af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a20      	ldr	r2, [pc, #128]	; (8006b84 <TIM_OC1_SetConfig+0xd8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_OC1_SetConfig+0x64>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1f      	ldr	r2, [pc, #124]	; (8006b88 <TIM_OC1_SetConfig+0xdc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10c      	bne.n	8006b2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0308 	bic.w	r3, r3, #8
 8006b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <TIM_OC1_SetConfig+0xd8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d003      	beq.n	8006b3a <TIM_OC1_SetConfig+0x8e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <TIM_OC1_SetConfig+0xdc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d111      	bne.n	8006b5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40010400 	.word	0x40010400

08006b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f023 0210 	bic.w	r2, r3, #16
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0320 	bic.w	r3, r3, #32
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a22      	ldr	r2, [pc, #136]	; (8006c70 <TIM_OC2_SetConfig+0xe4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_OC2_SetConfig+0x68>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a21      	ldr	r2, [pc, #132]	; (8006c74 <TIM_OC2_SetConfig+0xe8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d10d      	bne.n	8006c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a17      	ldr	r2, [pc, #92]	; (8006c70 <TIM_OC2_SetConfig+0xe4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC2_SetConfig+0x94>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a16      	ldr	r2, [pc, #88]	; (8006c74 <TIM_OC2_SetConfig+0xe8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d113      	bne.n	8006c48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400

08006c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a21      	ldr	r2, [pc, #132]	; (8006d58 <TIM_OC3_SetConfig+0xe0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d003      	beq.n	8006cde <TIM_OC3_SetConfig+0x66>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a20      	ldr	r2, [pc, #128]	; (8006d5c <TIM_OC3_SetConfig+0xe4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d10d      	bne.n	8006cfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <TIM_OC3_SetConfig+0xe0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC3_SetConfig+0x92>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <TIM_OC3_SetConfig+0xe4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d113      	bne.n	8006d32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	621a      	str	r2, [r3, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40010400 	.word	0x40010400

08006d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a12      	ldr	r2, [pc, #72]	; (8006e04 <TIM_OC4_SetConfig+0xa4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC4_SetConfig+0x68>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a11      	ldr	r2, [pc, #68]	; (8006e08 <TIM_OC4_SetConfig+0xa8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d109      	bne.n	8006ddc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	019b      	lsls	r3, r3, #6
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40010400 	.word	0x40010400

08006e0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0201 	bic.w	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4a28      	ldr	r2, [pc, #160]	; (8006ed8 <TIM_TI1_SetConfig+0xcc>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01b      	beq.n	8006e72 <TIM_TI1_SetConfig+0x66>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e40:	d017      	beq.n	8006e72 <TIM_TI1_SetConfig+0x66>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4a25      	ldr	r2, [pc, #148]	; (8006edc <TIM_TI1_SetConfig+0xd0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d013      	beq.n	8006e72 <TIM_TI1_SetConfig+0x66>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a24      	ldr	r2, [pc, #144]	; (8006ee0 <TIM_TI1_SetConfig+0xd4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00f      	beq.n	8006e72 <TIM_TI1_SetConfig+0x66>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a23      	ldr	r2, [pc, #140]	; (8006ee4 <TIM_TI1_SetConfig+0xd8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <TIM_TI1_SetConfig+0x66>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <TIM_TI1_SetConfig+0xdc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_TI1_SetConfig+0x66>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4a21      	ldr	r2, [pc, #132]	; (8006eec <TIM_TI1_SetConfig+0xe0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_TI1_SetConfig+0x66>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <TIM_TI1_SetConfig+0xe4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d101      	bne.n	8006e76 <TIM_TI1_SetConfig+0x6a>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <TIM_TI1_SetConfig+0x6c>
 8006e76:	2300      	movs	r3, #0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 0303 	bic.w	r3, r3, #3
 8006e82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	e003      	b.n	8006e96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f023 030a 	bic.w	r3, r3, #10
 8006eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 030a 	and.w	r3, r3, #10
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40000400 	.word	0x40000400
 8006ee0:	40000800 	.word	0x40000800
 8006ee4:	40000c00 	.word	0x40000c00
 8006ee8:	40010400 	.word	0x40010400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40001800 	.word	0x40001800

08006ef4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f023 0210 	bic.w	r2, r3, #16
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	031b      	lsls	r3, r3, #12
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	621a      	str	r2, [r3, #32]
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b087      	sub	sp, #28
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f023 0303 	bic.w	r3, r3, #3
 8006f9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006faa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
 8006ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007012:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007024:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	031b      	lsls	r3, r3, #12
 800702a:	b29b      	uxth	r3, r3
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007038:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	031b      	lsls	r3, r3, #12
 800703e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	621a      	str	r2, [r3, #32]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	2201      	movs	r2, #1
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a1a      	ldr	r2, [r3, #32]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	43db      	mvns	r3, r3
 8007082:	401a      	ands	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1a      	ldr	r2, [r3, #32]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	fa01 f303 	lsl.w	r3, r1, r3
 8007098:	431a      	orrs	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e05a      	b.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a21      	ldr	r2, [pc, #132]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d022      	beq.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007110:	d01d      	beq.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1d      	ldr	r2, [pc, #116]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d018      	beq.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a1a      	ldr	r2, [pc, #104]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00e      	beq.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a18      	ldr	r2, [pc, #96]	; (8007198 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d009      	beq.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d004      	beq.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a15      	ldr	r2, [pc, #84]	; (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d10c      	bne.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4313      	orrs	r3, r2
 800715e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40010000 	.word	0x40010000
 800718c:	40000400 	.word	0x40000400
 8007190:	40000800 	.word	0x40000800
 8007194:	40000c00 	.word	0x40000c00
 8007198:	40010400 	.word	0x40010400
 800719c:	40014000 	.word	0x40014000
 80071a0:	40001800 	.word	0x40001800

080071a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071cc:	b084      	sub	sp, #16
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	f107 001c 	add.w	r0, r7, #28
 80071da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d122      	bne.n	800722a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80071f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800720c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720e:	2b01      	cmp	r3, #1
 8007210:	d105      	bne.n	800721e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fac6 	bl	80087b0 <USB_CoreReset>
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]
 8007228:	e01a      	b.n	8007260 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 faba 	bl	80087b0 <USB_CoreReset>
 800723c:	4603      	mov	r3, r0
 800723e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	d106      	bne.n	8007254 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	639a      	str	r2, [r3, #56]	; 0x38
 8007252:	e005      	b.n	8007260 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	2b01      	cmp	r3, #1
 8007264:	d10b      	bne.n	800727e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f043 0206 	orr.w	r2, r3, #6
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f043 0220 	orr.w	r2, r3, #32
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800728a:	b004      	add	sp, #16
 800728c:	4770      	bx	lr
	...

08007290 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d165      	bne.n	8007370 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4a41      	ldr	r2, [pc, #260]	; (80073ac <USB_SetTurnaroundTime+0x11c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d906      	bls.n	80072ba <USB_SetTurnaroundTime+0x2a>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4a40      	ldr	r2, [pc, #256]	; (80073b0 <USB_SetTurnaroundTime+0x120>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d802      	bhi.n	80072ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80072b4:	230f      	movs	r3, #15
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	e062      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4a3c      	ldr	r2, [pc, #240]	; (80073b0 <USB_SetTurnaroundTime+0x120>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d906      	bls.n	80072d0 <USB_SetTurnaroundTime+0x40>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4a3b      	ldr	r2, [pc, #236]	; (80073b4 <USB_SetTurnaroundTime+0x124>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d802      	bhi.n	80072d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80072ca:	230e      	movs	r3, #14
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e057      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4a38      	ldr	r2, [pc, #224]	; (80073b4 <USB_SetTurnaroundTime+0x124>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d906      	bls.n	80072e6 <USB_SetTurnaroundTime+0x56>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a37      	ldr	r2, [pc, #220]	; (80073b8 <USB_SetTurnaroundTime+0x128>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d802      	bhi.n	80072e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80072e0:	230d      	movs	r3, #13
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e04c      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4a33      	ldr	r2, [pc, #204]	; (80073b8 <USB_SetTurnaroundTime+0x128>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d906      	bls.n	80072fc <USB_SetTurnaroundTime+0x6c>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4a32      	ldr	r2, [pc, #200]	; (80073bc <USB_SetTurnaroundTime+0x12c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d802      	bhi.n	80072fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072f6:	230c      	movs	r3, #12
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	e041      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4a2f      	ldr	r2, [pc, #188]	; (80073bc <USB_SetTurnaroundTime+0x12c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d906      	bls.n	8007312 <USB_SetTurnaroundTime+0x82>
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4a2e      	ldr	r2, [pc, #184]	; (80073c0 <USB_SetTurnaroundTime+0x130>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d802      	bhi.n	8007312 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800730c:	230b      	movs	r3, #11
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	e036      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	4a2a      	ldr	r2, [pc, #168]	; (80073c0 <USB_SetTurnaroundTime+0x130>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d906      	bls.n	8007328 <USB_SetTurnaroundTime+0x98>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4a29      	ldr	r2, [pc, #164]	; (80073c4 <USB_SetTurnaroundTime+0x134>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d802      	bhi.n	8007328 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007322:	230a      	movs	r3, #10
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	e02b      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <USB_SetTurnaroundTime+0x134>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d906      	bls.n	800733e <USB_SetTurnaroundTime+0xae>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4a25      	ldr	r2, [pc, #148]	; (80073c8 <USB_SetTurnaroundTime+0x138>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d802      	bhi.n	800733e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007338:	2309      	movs	r3, #9
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e020      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <USB_SetTurnaroundTime+0x138>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d906      	bls.n	8007354 <USB_SetTurnaroundTime+0xc4>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4a20      	ldr	r2, [pc, #128]	; (80073cc <USB_SetTurnaroundTime+0x13c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d802      	bhi.n	8007354 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800734e:	2308      	movs	r3, #8
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e015      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4a1d      	ldr	r2, [pc, #116]	; (80073cc <USB_SetTurnaroundTime+0x13c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d906      	bls.n	800736a <USB_SetTurnaroundTime+0xda>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <USB_SetTurnaroundTime+0x140>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d802      	bhi.n	800736a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007364:	2307      	movs	r3, #7
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e00a      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800736a:	2306      	movs	r3, #6
 800736c:	617b      	str	r3, [r7, #20]
 800736e:	e007      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007376:	2309      	movs	r3, #9
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e001      	b.n	8007380 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800737c:	2309      	movs	r3, #9
 800737e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	029b      	lsls	r3, r3, #10
 8007394:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007398:	431a      	orrs	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	00d8acbf 	.word	0x00d8acbf
 80073b0:	00e4e1bf 	.word	0x00e4e1bf
 80073b4:	00f423ff 	.word	0x00f423ff
 80073b8:	0106737f 	.word	0x0106737f
 80073bc:	011a499f 	.word	0x011a499f
 80073c0:	01312cff 	.word	0x01312cff
 80073c4:	014ca43f 	.word	0x014ca43f
 80073c8:	016e35ff 	.word	0x016e35ff
 80073cc:	01a6ab1f 	.word	0x01a6ab1f
 80073d0:	01e847ff 	.word	0x01e847ff

080073d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f043 0201 	orr.w	r2, r3, #1
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f023 0201 	bic.w	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d106      	bne.n	8007444 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	e00b      	b.n	800745c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	e001      	b.n	800745c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e003      	b.n	8007464 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800745c:	2032      	movs	r0, #50	; 0x32
 800745e:	f7fb fd6f 	bl	8002f40 <HAL_Delay>

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800746c:	b084      	sub	sp, #16
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800747a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	e009      	b.n	80074a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3340      	adds	r3, #64	; 0x40
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	2200      	movs	r2, #0
 8007498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3301      	adds	r3, #1
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b0e      	cmp	r3, #14
 80074a4:	d9f2      	bls.n	800748c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d11c      	bne.n	80074e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ba:	f043 0302 	orr.w	r3, r3, #2
 80074be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38
 80074e4:	e00b      	b.n	80074fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007504:	461a      	mov	r2, r3
 8007506:	2300      	movs	r3, #0
 8007508:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007510:	4619      	mov	r1, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007518:	461a      	mov	r2, r3
 800751a:	680b      	ldr	r3, [r1, #0]
 800751c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2b01      	cmp	r3, #1
 8007522:	d10c      	bne.n	800753e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800752a:	2100      	movs	r1, #0
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f949 	bl	80077c4 <USB_SetDevSpeed>
 8007532:	e008      	b.n	8007546 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007534:	2101      	movs	r1, #1
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f944 	bl	80077c4 <USB_SetDevSpeed>
 800753c:	e003      	b.n	8007546 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800753e:	2103      	movs	r1, #3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f93f 	bl	80077c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007546:	2110      	movs	r1, #16
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f8f3 	bl	8007734 <USB_FlushTxFifo>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f911 	bl	8007780 <USB_FlushRxFifo>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	461a      	mov	r2, r3
 8007570:	2300      	movs	r3, #0
 8007572:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	461a      	mov	r2, r3
 800757c:	2300      	movs	r3, #0
 800757e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007586:	461a      	mov	r2, r3
 8007588:	2300      	movs	r3, #0
 800758a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	e043      	b.n	800761a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075a8:	d118      	bne.n	80075dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	461a      	mov	r2, r3
 80075be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	e013      	b.n	80075ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d2:	461a      	mov	r2, r3
 80075d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e008      	b.n	80075ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	461a      	mov	r2, r3
 80075ea:	2300      	movs	r3, #0
 80075ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fa:	461a      	mov	r2, r3
 80075fc:	2300      	movs	r3, #0
 80075fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	461a      	mov	r2, r3
 800760e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3301      	adds	r3, #1
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	429a      	cmp	r2, r3
 8007620:	d3b7      	bcc.n	8007592 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007622:	2300      	movs	r3, #0
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	e043      	b.n	80076b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800763a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800763e:	d118      	bne.n	8007672 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	461a      	mov	r2, r3
 8007654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e013      	b.n	8007684 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007668:	461a      	mov	r2, r3
 800766a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	e008      	b.n	8007684 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767e:	461a      	mov	r2, r3
 8007680:	2300      	movs	r3, #0
 8007682:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	461a      	mov	r2, r3
 8007692:	2300      	movs	r3, #0
 8007694:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a2:	461a      	mov	r2, r3
 80076a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	3301      	adds	r3, #1
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d3b7      	bcc.n	8007628 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d105      	bne.n	80076ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	f043 0210 	orr.w	r2, r3, #16
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <USB_DevInit+0x2c4>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f043 0208 	orr.w	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800770a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770c:	2b01      	cmp	r3, #1
 800770e:	d107      	bne.n	8007720 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007718:	f043 0304 	orr.w	r3, r3, #4
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800772c:	b004      	add	sp, #16
 800772e:	4770      	bx	lr
 8007730:	803c3800 	.word	0x803c3800

08007734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	019b      	lsls	r3, r3, #6
 8007746:	f043 0220 	orr.w	r2, r3, #32
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a09      	ldr	r2, [pc, #36]	; (800777c <USB_FlushTxFifo+0x48>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d901      	bls.n	8007760 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e006      	b.n	800776e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	f003 0320 	and.w	r3, r3, #32
 8007768:	2b20      	cmp	r3, #32
 800776a:	d0f0      	beq.n	800774e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	00030d40 	.word	0x00030d40

08007780 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2210      	movs	r2, #16
 8007790:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <USB_FlushRxFifo+0x40>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e006      	b.n	80077b2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b10      	cmp	r3, #16
 80077ae:	d0f0      	beq.n	8007792 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	00030d40 	.word	0x00030d40

080077c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e4:	4313      	orrs	r3, r2
 80077e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b087      	sub	sp, #28
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0306 	and.w	r3, r3, #6
 800780e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]
 800781a:	e00a      	b.n	8007832 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d002      	beq.n	8007828 <USB_GetDevSpeed+0x32>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b06      	cmp	r3, #6
 8007826:	d102      	bne.n	800782e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007828:	2302      	movs	r3, #2
 800782a:	75fb      	strb	r3, [r7, #23]
 800782c:	e001      	b.n	8007832 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800782e:	230f      	movs	r3, #15
 8007830:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d13a      	bne.n	80078d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007862:	69da      	ldr	r2, [r3, #28]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	2101      	movs	r1, #1
 800786e:	fa01 f303 	lsl.w	r3, r1, r3
 8007872:	b29b      	uxth	r3, r3
 8007874:	68f9      	ldr	r1, [r7, #12]
 8007876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800787a:	4313      	orrs	r3, r2
 800787c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d155      	bne.n	8007940 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	78db      	ldrb	r3, [r3, #3]
 80078ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	059b      	lsls	r3, r3, #22
 80078b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078b8:	4313      	orrs	r3, r2
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	e036      	b.n	8007940 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d8:	69da      	ldr	r2, [r3, #28]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	2101      	movs	r1, #1
 80078e4:	fa01 f303 	lsl.w	r3, r1, r3
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f0:	4313      	orrs	r3, r2
 80078f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d11a      	bne.n	8007940 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	78db      	ldrb	r3, [r3, #3]
 8007924:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007926:	430b      	orrs	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	440a      	add	r2, r1
 8007932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800793a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d161      	bne.n	8007a30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800797e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007982:	d11f      	bne.n	80079c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	440a      	add	r2, r1
 800799a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	0151      	lsls	r1, r2, #5
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	440a      	add	r2, r1
 80079ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	2101      	movs	r1, #1
 80079d6:	fa01 f303 	lsl.w	r3, r1, r3
 80079da:	b29b      	uxth	r3, r3
 80079dc:	43db      	mvns	r3, r3
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079e4:	4013      	ands	r3, r2
 80079e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	2101      	movs	r1, #1
 80079fa:	fa01 f303 	lsl.w	r3, r1, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	43db      	mvns	r3, r3
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a08:	4013      	ands	r3, r2
 8007a0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	0159      	lsls	r1, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	440b      	add	r3, r1
 8007a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a26:	4619      	mov	r1, r3
 8007a28:	4b35      	ldr	r3, [pc, #212]	; (8007b00 <USB_DeactivateEndpoint+0x1b0>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	600b      	str	r3, [r1, #0]
 8007a2e:	e060      	b.n	8007af2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a46:	d11f      	bne.n	8007a88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	2101      	movs	r1, #1
 8007a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9e:	041b      	lsls	r3, r3, #16
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	68f9      	ldr	r1, [r7, #12]
 8007aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab2:	69da      	ldr	r2, [r3, #28]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	2101      	movs	r1, #1
 8007abe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007acc:	4013      	ands	r3, r2
 8007ace:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	0159      	lsls	r1, r3, #5
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	440b      	add	r3, r1
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	4619      	mov	r1, r3
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <USB_DeactivateEndpoint+0x1b4>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	ec337800 	.word	0xec337800
 8007b04:	eff37800 	.word	0xeff37800

08007b08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	; 0x28
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	f040 815c 	bne.w	8007de2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d132      	bne.n	8007b98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	0151      	lsls	r1, r2, #5
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	440a      	add	r2, r1
 8007b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b90:	0cdb      	lsrs	r3, r3, #19
 8007b92:	04db      	lsls	r3, r3, #19
 8007b94:	6113      	str	r3, [r2, #16]
 8007b96:	e074      	b.n	8007c82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	0151      	lsls	r1, r2, #5
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	440a      	add	r2, r1
 8007bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb2:	0cdb      	lsrs	r3, r3, #19
 8007bb4:	04db      	lsls	r3, r3, #19
 8007bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6959      	ldr	r1, [r3, #20]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	440b      	add	r3, r1
 8007bf4:	1e59      	subs	r1, r3, #1
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bfe:	04d9      	lsls	r1, r3, #19
 8007c00:	4b9d      	ldr	r3, [pc, #628]	; (8007e78 <USB_EPStartXfer+0x370>)
 8007c02:	400b      	ands	r3, r1
 8007c04:	69b9      	ldr	r1, [r7, #24]
 8007c06:	0148      	lsls	r0, r1, #5
 8007c08:	69f9      	ldr	r1, [r7, #28]
 8007c0a:	4401      	add	r1, r0
 8007c0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c10:	4313      	orrs	r3, r2
 8007c12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c20:	691a      	ldr	r2, [r3, #16]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c2a:	69b9      	ldr	r1, [r7, #24]
 8007c2c:	0148      	lsls	r0, r1, #5
 8007c2e:	69f9      	ldr	r1, [r7, #28]
 8007c30:	4401      	add	r1, r0
 8007c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c36:	4313      	orrs	r3, r2
 8007c38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	78db      	ldrb	r3, [r3, #3]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d11f      	bne.n	8007c82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	0151      	lsls	r1, r2, #5
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	440a      	add	r2, r1
 8007c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007c60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d14b      	bne.n	8007d20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d009      	beq.n	8007ca4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	78db      	ldrb	r3, [r3, #3]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d128      	bne.n	8007cfe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d110      	bne.n	8007cde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	e00f      	b.n	8007cfe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	0151      	lsls	r1, r2, #5
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	440a      	add	r2, r1
 8007cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e12f      	b.n	8007f80 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	78db      	ldrb	r3, [r3, #3]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d015      	beq.n	8007d74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8117 	beq.w	8007f80 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	2101      	movs	r1, #1
 8007d64:	fa01 f303 	lsl.w	r3, r1, r3
 8007d68:	69f9      	ldr	r1, [r7, #28]
 8007d6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	634b      	str	r3, [r1, #52]	; 0x34
 8007d72:	e105      	b.n	8007f80 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d110      	bne.n	8007da6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	e00f      	b.n	8007dc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68d9      	ldr	r1, [r3, #12]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	b298      	uxth	r0, r3
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4603      	mov	r3, r0
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fa2b 	bl	8008236 <USB_WritePacket>
 8007de0:	e0ce      	b.n	8007f80 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dfc:	0cdb      	lsrs	r3, r3, #19
 8007dfe:	04db      	lsls	r3, r3, #19
 8007e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d126      	bne.n	8007e7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	0148      	lsls	r0, r1, #5
 8007e48:	69f9      	ldr	r1, [r7, #28]
 8007e4a:	4401      	add	r1, r0
 8007e4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e50:	4313      	orrs	r3, r2
 8007e52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e72:	6113      	str	r3, [r2, #16]
 8007e74:	e036      	b.n	8007ee4 <USB_EPStartXfer+0x3dc>
 8007e76:	bf00      	nop
 8007e78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	695a      	ldr	r2, [r3, #20]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	4413      	add	r3, r2
 8007e86:	1e5a      	subs	r2, r3, #1
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e90:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	8afb      	ldrh	r3, [r7, #22]
 8007ea2:	04d9      	lsls	r1, r3, #19
 8007ea4:	4b39      	ldr	r3, [pc, #228]	; (8007f8c <USB_EPStartXfer+0x484>)
 8007ea6:	400b      	ands	r3, r1
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	0148      	lsls	r0, r1, #5
 8007eac:	69f9      	ldr	r1, [r7, #28]
 8007eae:	4401      	add	r1, r0
 8007eb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	8af9      	ldrh	r1, [r7, #22]
 8007ecc:	fb01 f303 	mul.w	r3, r1, r3
 8007ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ed4:	69b9      	ldr	r1, [r7, #24]
 8007ed6:	0148      	lsls	r0, r1, #5
 8007ed8:	69f9      	ldr	r1, [r7, #28]
 8007eda:	4401      	add	r1, r0
 8007edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d10d      	bne.n	8007f06 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	68d9      	ldr	r1, [r3, #12]
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f02:	460a      	mov	r2, r1
 8007f04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	78db      	ldrb	r3, [r3, #3]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d128      	bne.n	8007f60 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d110      	bne.n	8007f40 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	0151      	lsls	r1, r2, #5
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	440a      	add	r2, r1
 8007f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	e00f      	b.n	8007f60 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	0151      	lsls	r1, r2, #5
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	440a      	add	r2, r1
 8007f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	1ff80000 	.word	0x1ff80000

08007f90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	f040 80cd 	bne.w	800814c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d132      	bne.n	8008020 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008018:	0cdb      	lsrs	r3, r3, #19
 800801a:	04db      	lsls	r3, r3, #19
 800801c:	6113      	str	r3, [r2, #16]
 800801e:	e04e      	b.n	80080be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800803a:	0cdb      	lsrs	r3, r3, #19
 800803c:	04db      	lsls	r3, r3, #19
 800803e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	440a      	add	r2, r1
 8008056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800805e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008062:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d903      	bls.n	8008078 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	440a      	add	r2, r1
 800808e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ae:	6939      	ldr	r1, [r7, #16]
 80080b0:	0148      	lsls	r0, r1, #5
 80080b2:	6979      	ldr	r1, [r7, #20]
 80080b4:	4401      	add	r1, r0
 80080b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080ba:	4313      	orrs	r3, r2
 80080bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d11e      	bne.n	8008102 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d8:	461a      	mov	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	e092      	b.n	8008228 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	440a      	add	r2, r1
 8008118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008120:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d07e      	beq.n	8008228 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f003 030f 	and.w	r3, r3, #15
 800813a:	2101      	movs	r1, #1
 800813c:	fa01 f303 	lsl.w	r3, r1, r3
 8008140:	6979      	ldr	r1, [r7, #20]
 8008142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008146:	4313      	orrs	r3, r2
 8008148:	634b      	str	r3, [r1, #52]	; 0x34
 800814a:	e06d      	b.n	8008228 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	440a      	add	r2, r1
 8008162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008166:	0cdb      	lsrs	r3, r3, #19
 8008168:	04db      	lsls	r3, r3, #19
 800816a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	0151      	lsls	r1, r2, #5
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	440a      	add	r2, r1
 8008182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800818a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800818e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d6:	6939      	ldr	r1, [r7, #16]
 80081d8:	0148      	lsls	r0, r1, #5
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	4401      	add	r1, r0
 80081de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081e2:	4313      	orrs	r3, r2
 80081e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d10d      	bne.n	8008208 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	68d9      	ldr	r1, [r3, #12]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008204:	460a      	mov	r2, r1
 8008206:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008236:	b480      	push	{r7}
 8008238:	b089      	sub	sp, #36	; 0x24
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	4611      	mov	r1, r2
 8008242:	461a      	mov	r2, r3
 8008244:	460b      	mov	r3, r1
 8008246:	71fb      	strb	r3, [r7, #7]
 8008248:	4613      	mov	r3, r2
 800824a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008254:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11a      	bne.n	8008292 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800825c:	88bb      	ldrh	r3, [r7, #4]
 800825e:	3303      	adds	r3, #3
 8008260:	089b      	lsrs	r3, r3, #2
 8008262:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008264:	2300      	movs	r3, #0
 8008266:	61bb      	str	r3, [r7, #24]
 8008268:	e00f      	b.n	800828a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	031a      	lsls	r2, r3, #12
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	4413      	add	r3, r2
 8008272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008276:	461a      	mov	r2, r3
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	3304      	adds	r3, #4
 8008282:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	3301      	adds	r3, #1
 8008288:	61bb      	str	r3, [r7, #24]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	429a      	cmp	r2, r3
 8008290:	d3eb      	bcc.n	800826a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3724      	adds	r7, #36	; 0x24
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b089      	sub	sp, #36	; 0x24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	3303      	adds	r3, #3
 80082ba:	089b      	lsrs	r3, r3, #2
 80082bc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
 80082c2:	e00b      	b.n	80082dc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	3304      	adds	r3, #4
 80082d4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	3301      	adds	r3, #1
 80082da:	61bb      	str	r3, [r7, #24]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d3ef      	bcc.n	80082c4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80082e4:	69fb      	ldr	r3, [r7, #28]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3724      	adds	r7, #36	; 0x24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d12c      	bne.n	8008368 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	db12      	blt.n	8008346 <USB_EPSetStall+0x54>
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00f      	beq.n	8008346 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008340:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008344:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	440a      	add	r2, r1
 800835c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	e02b      	b.n	80083c0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	db12      	blt.n	80083a0 <USB_EPSetStall+0xae>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00f      	beq.n	80083a0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	0151      	lsls	r1, r2, #5
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	440a      	add	r2, r1
 8008396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800839e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b085      	sub	sp, #20
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d128      	bne.n	800843c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008404:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008408:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	78db      	ldrb	r3, [r3, #3]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d003      	beq.n	800841a <USB_EPClearStall+0x4c>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	78db      	ldrb	r3, [r3, #3]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d138      	bne.n	800848c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	e027      	b.n	800848c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	0151      	lsls	r1, r2, #5
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	440a      	add	r2, r1
 8008452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008456:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800845a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	78db      	ldrb	r3, [r3, #3]
 8008460:	2b03      	cmp	r3, #3
 8008462:	d003      	beq.n	800846c <USB_EPClearStall+0x9e>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d10f      	bne.n	800848c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800848a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800849a:	b480      	push	{r7}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084bc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	78fb      	ldrb	r3, [r7, #3]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084d4:	4313      	orrs	r3, r2
 80084d6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008500:	f023 0303 	bic.w	r3, r3, #3
 8008504:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008514:	f023 0302 	bic.w	r3, r3, #2
 8008518:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008542:	f023 0303 	bic.w	r3, r3, #3
 8008546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008556:	f043 0302 	orr.w	r3, r3, #2
 800855a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800856a:	b480      	push	{r7}
 800856c:	b085      	sub	sp, #20
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4013      	ands	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008582:	68fb      	ldr	r3, [r7, #12]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4013      	ands	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	0c1b      	lsrs	r3, r3, #16
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	4013      	ands	r3, r2
 80085e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	b29b      	uxth	r3, r3
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	4013      	ands	r3, r2
 8008624:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008626:	68bb      	ldr	r3, [r7, #8]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008656:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
 8008664:	01db      	lsls	r3, r3, #7
 8008666:	b2db      	uxtb	r3, r3
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	4313      	orrs	r3, r2
 800866c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4013      	ands	r3, r2
 8008680:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008682:	68bb      	ldr	r3, [r7, #8]
}
 8008684:	4618      	mov	r0, r3
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0301 	and.w	r3, r3, #1
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80086ca:	f023 0307 	bic.w	r3, r3, #7
 80086ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	460b      	mov	r3, r1
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	333c      	adds	r3, #60	; 0x3c
 800870a:	3304      	adds	r3, #4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4a26      	ldr	r2, [pc, #152]	; (80087ac <USB_EP0_OutStart+0xb8>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d90a      	bls.n	800872e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008728:	d101      	bne.n	800872e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	e037      	b.n	800879e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	461a      	mov	r2, r3
 8008736:	2300      	movs	r3, #0
 8008738:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800874c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800875c:	f043 0318 	orr.w	r3, r3, #24
 8008760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008770:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008774:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d10f      	bne.n	800879c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008796:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800879a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	4f54300a 	.word	0x4f54300a

080087b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4a13      	ldr	r2, [pc, #76]	; (8008814 <USB_CoreReset+0x64>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d901      	bls.n	80087ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e01b      	b.n	8008806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	daf2      	bge.n	80087bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	f043 0201 	orr.w	r2, r3, #1
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3301      	adds	r3, #1
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4a09      	ldr	r2, [pc, #36]	; (8008814 <USB_CoreReset+0x64>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d901      	bls.n	80087f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e006      	b.n	8008806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b01      	cmp	r3, #1
 8008802:	d0f0      	beq.n	80087e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	00030d40 	.word	0x00030d40

08008818 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008824:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008828:	f002 f940 	bl	800aaac <malloc>
 800882c:	4603      	mov	r3, r0
 800882e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800883e:	2302      	movs	r3, #2
 8008840:	e066      	b.n	8008910 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7c1b      	ldrb	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d119      	bne.n	8008886 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008856:	2202      	movs	r2, #2
 8008858:	2181      	movs	r1, #129	; 0x81
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 ffad 	bl	800a7ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800886a:	2202      	movs	r2, #2
 800886c:	2101      	movs	r1, #1
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 ffa3 	bl	800a7ba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2210      	movs	r2, #16
 8008880:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008884:	e016      	b.n	80088b4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008886:	2340      	movs	r3, #64	; 0x40
 8008888:	2202      	movs	r2, #2
 800888a:	2181      	movs	r1, #129	; 0x81
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 ff94 	bl	800a7ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008898:	2340      	movs	r3, #64	; 0x40
 800889a:	2202      	movs	r2, #2
 800889c:	2101      	movs	r1, #1
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 ff8b 	bl	800a7ba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2210      	movs	r2, #16
 80088b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088b4:	2308      	movs	r3, #8
 80088b6:	2203      	movs	r2, #3
 80088b8:	2182      	movs	r1, #130	; 0x82
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 ff7d 	bl	800a7ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7c1b      	ldrb	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088f4:	2101      	movs	r1, #1
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f002 f84e 	bl	800a998 <USBD_LL_PrepareReceive>
 80088fc:	e007      	b.n	800890e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008904:	2340      	movs	r3, #64	; 0x40
 8008906:	2101      	movs	r1, #1
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f002 f845 	bl	800a998 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008928:	2181      	movs	r1, #129	; 0x81
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 ff6b 	bl	800a806 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008936:	2101      	movs	r1, #1
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 ff64 	bl	800a806 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008946:	2182      	movs	r1, #130	; 0x82
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 ff5c 	bl	800a806 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00e      	beq.n	8008986 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008978:	4618      	mov	r0, r3
 800897a:	f002 f89f 	bl	800aabc <free>
    pdev->pClassData = NULL;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d03a      	beq.n	8008a30 <USBD_CDC_Setup+0xa0>
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	f040 8097 	bne.w	8008aee <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	88db      	ldrh	r3, [r3, #6]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d029      	beq.n	8008a1c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	b25b      	sxtb	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da11      	bge.n	80089f6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80089de:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	88d2      	ldrh	r2, [r2, #6]
 80089e4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80089e6:	6939      	ldr	r1, [r7, #16]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	88db      	ldrh	r3, [r3, #6]
 80089ec:	461a      	mov	r2, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 fa9d 	bl	8009f2e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80089f4:	e082      	b.n	8008afc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	785a      	ldrb	r2, [r3, #1]
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	88db      	ldrh	r3, [r3, #6]
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a0c:	6939      	ldr	r1, [r7, #16]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	88db      	ldrh	r3, [r3, #6]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 fab6 	bl	8009f86 <USBD_CtlPrepareRx>
    break;
 8008a1a:	e06f      	b.n	8008afc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	7850      	ldrb	r0, [r2, #1]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	4798      	blx	r3
    break;
 8008a2e:	e065      	b.n	8008afc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b0b      	cmp	r3, #11
 8008a36:	d84f      	bhi.n	8008ad8 <USBD_CDC_Setup+0x148>
 8008a38:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <USBD_CDC_Setup+0xb0>)
 8008a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3e:	bf00      	nop
 8008a40:	08008a71 	.word	0x08008a71
 8008a44:	08008ae7 	.word	0x08008ae7
 8008a48:	08008ad9 	.word	0x08008ad9
 8008a4c:	08008ad9 	.word	0x08008ad9
 8008a50:	08008ad9 	.word	0x08008ad9
 8008a54:	08008ad9 	.word	0x08008ad9
 8008a58:	08008ad9 	.word	0x08008ad9
 8008a5c:	08008ad9 	.word	0x08008ad9
 8008a60:	08008ad9 	.word	0x08008ad9
 8008a64:	08008ad9 	.word	0x08008ad9
 8008a68:	08008a99 	.word	0x08008a99
 8008a6c:	08008ac1 	.word	0x08008ac1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d107      	bne.n	8008a8a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	2202      	movs	r2, #2
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 fa53 	bl	8009f2e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008a88:	e030      	b.n	8008aec <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 f9dd 	bl	8009e4c <USBD_CtlError>
        ret = USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	75fb      	strb	r3, [r7, #23]
      break;
 8008a96:	e029      	b.n	8008aec <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d107      	bne.n	8008ab2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008aa2:	f107 030f 	add.w	r3, r7, #15
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fa3f 	bl	8009f2e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008ab0:	e01c      	b.n	8008aec <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 f9c9 	bl	8009e4c <USBD_CtlError>
        ret = USBD_FAIL;
 8008aba:	2303      	movs	r3, #3
 8008abc:	75fb      	strb	r3, [r7, #23]
      break;
 8008abe:	e015      	b.n	8008aec <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d00f      	beq.n	8008aea <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 f9bd 	bl	8009e4c <USBD_CtlError>
        ret = USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008ad6:	e008      	b.n	8008aea <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 f9b6 	bl	8009e4c <USBD_CtlError>
      ret = USBD_FAIL;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae4:	e002      	b.n	8008aec <USBD_CDC_Setup+0x15c>
      break;
 8008ae6:	bf00      	nop
 8008ae8:	e008      	b.n	8008afc <USBD_CDC_Setup+0x16c>
      break;
 8008aea:	bf00      	nop
    }
    break;
 8008aec:	e006      	b.n	8008afc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 f9ab 	bl	8009e4c <USBD_CtlError>
    ret = USBD_FAIL;
 8008af6:	2303      	movs	r3, #3
 8008af8:	75fb      	strb	r3, [r7, #23]
    break;
 8008afa:	bf00      	nop
  }

  return (uint8_t)ret;
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop

08008b08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e049      	b.n	8008bbe <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	3318      	adds	r3, #24
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d029      	beq.n	8008b9c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	3318      	adds	r3, #24
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	78f9      	ldrb	r1, [r7, #3]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	1a5b      	subs	r3, r3, r1
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4403      	add	r3, r0
 8008b68:	3344      	adds	r3, #68	; 0x44
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b70:	fb03 f301 	mul.w	r3, r3, r1
 8008b74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d110      	bne.n	8008b9c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	3318      	adds	r3, #24
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b8e:	78f9      	ldrb	r1, [r7, #3]
 8008b90:	2300      	movs	r3, #0
 8008b92:	2200      	movs	r2, #0
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fede 	bl	800a956 <USBD_LL_Transmit>
 8008b9a:	e00f      	b.n	8008bbc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e015      	b.n	8008c14 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fef4 	bl	800a9da <USBD_LL_GetRxDataSize>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c2a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d015      	beq.n	8008c62 <USBD_CDC_EP0_RxReady+0x46>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c3c:	2bff      	cmp	r3, #255	; 0xff
 8008c3e:	d010      	beq.n	8008c62 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008c4e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c56:	b292      	uxth	r2, r2
 8008c58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	22ff      	movs	r2, #255	; 0xff
 8008c5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2243      	movs	r2, #67	; 0x43
 8008c78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008c7a:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20000094 	.word	0x20000094

08008c8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2243      	movs	r2, #67	; 0x43
 8008c98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008c9a:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	20000050 	.word	0x20000050

08008cac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2243      	movs	r2, #67	; 0x43
 8008cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008cba:	4b03      	ldr	r3, [pc, #12]	; (8008cc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	200000d8 	.word	0x200000d8

08008ccc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	220a      	movs	r2, #10
 8008cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008cda:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	2000000c 	.word	0x2000000c

08008cec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e004      	b.n	8008d0a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b087      	sub	sp, #28
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d28:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d58:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d7e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d80:	2301      	movs	r3, #1
 8008d82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e01a      	b.n	8008dc8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d114      	bne.n	8008dc6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008dba:	2181      	movs	r1, #129	; 0x81
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 fdca 	bl	800a956 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e016      	b.n	8008e1c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7c1b      	ldrb	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e00:	2101      	movs	r1, #1
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 fdc8 	bl	800a998 <USBD_LL_PrepareReceive>
 8008e08:	e007      	b.n	8008e1a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e10:	2340      	movs	r3, #64	; 0x40
 8008e12:	2101      	movs	r1, #1
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 fdbf 	bl	800a998 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e025      	b.n	8008e88 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	79fa      	ldrb	r2, [r7, #7]
 8008e7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f001 fc35 	bl	800a6ec <USBD_LL_Init>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e010      	b.n	8008eca <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb8:	f107 020e 	add.w	r2, r7, #14
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4798      	blx	r3
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fc52 	bl	800a784 <USBD_LL_Start>
 8008ee0:	4603      	mov	r3, r0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d009      	beq.n	8008f2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	4798      	blx	r3
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	4611      	mov	r1, r2
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	4798      	blx	r3
  }

  return USBD_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 ff2c 	bl	8009dd8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d00e      	beq.n	8008fc2 <USBD_LL_SetupStage+0x5a>
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d302      	bcc.n	8008fae <USBD_LL_SetupStage+0x46>
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d014      	beq.n	8008fd6 <USBD_LL_SetupStage+0x6e>
 8008fac:	e01d      	b.n	8008fea <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fa18 	bl	80093ec <USBD_StdDevReq>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc0:	e020      	b.n	8009004 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fa7c 	bl	80094c8 <USBD_StdItfReq>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd4:	e016      	b.n	8009004 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fab8 	bl	8009554 <USBD_StdEPReq>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe8:	e00c      	b.n	8009004 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ff0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 fc23 	bl	800a844 <USBD_LL_StallEP>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
      break;
 8009002:	bf00      	nop
  }

  return ret;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	460b      	mov	r3, r1
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d137      	bne.n	8009092 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009028:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009030:	2b03      	cmp	r3, #3
 8009032:	d14a      	bne.n	80090ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d913      	bls.n	8009068 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	1ad2      	subs	r2, r2, r3
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	4293      	cmp	r3, r2
 8009058:	bf28      	it	cs
 800905a:	4613      	movcs	r3, r2
 800905c:	461a      	mov	r2, r3
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 ffad 	bl	8009fc0 <USBD_CtlContinueRx>
 8009066:	e030      	b.n	80090ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800907a:	2b03      	cmp	r3, #3
 800907c:	d105      	bne.n	800908a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 ffa9 	bl	8009fe2 <USBD_CtlSendStatus>
 8009090:	e01b      	b.n	80090ca <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d013      	beq.n	80090c6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d10e      	bne.n	80090c6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	7afa      	ldrb	r2, [r7, #11]
 80090b2:	4611      	mov	r1, r2
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	4798      	blx	r3
 80090b8:	4603      	mov	r3, r0
 80090ba:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	e002      	b.n	80090cc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e000      	b.n	80090cc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	460b      	mov	r3, r1
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80090e2:	7afb      	ldrb	r3, [r7, #11]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d16a      	bne.n	80091be <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3314      	adds	r3, #20
 80090ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d155      	bne.n	80091a4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	429a      	cmp	r2, r3
 8009102:	d914      	bls.n	800912e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	1ad2      	subs	r2, r2, r3
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	461a      	mov	r2, r3
 8009118:	6879      	ldr	r1, [r7, #4]
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 ff22 	bl	8009f64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009120:	2300      	movs	r3, #0
 8009122:	2200      	movs	r2, #0
 8009124:	2100      	movs	r1, #0
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f001 fc36 	bl	800a998 <USBD_LL_PrepareReceive>
 800912c:	e03a      	b.n	80091a4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	429a      	cmp	r2, r3
 8009138:	d11c      	bne.n	8009174 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009142:	429a      	cmp	r2, r3
 8009144:	d316      	bcc.n	8009174 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009150:	429a      	cmp	r2, r3
 8009152:	d20f      	bcs.n	8009174 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009154:	2200      	movs	r2, #0
 8009156:	2100      	movs	r1, #0
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 ff03 	bl	8009f64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009166:	2300      	movs	r3, #0
 8009168:	2200      	movs	r2, #0
 800916a:	2100      	movs	r1, #0
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f001 fc13 	bl	800a998 <USBD_LL_PrepareReceive>
 8009172:	e017      	b.n	80091a4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00a      	beq.n	8009196 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009186:	2b03      	cmp	r3, #3
 8009188:	d105      	bne.n	8009196 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009196:	2180      	movs	r1, #128	; 0x80
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f001 fb53 	bl	800a844 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 ff32 	bl	800a008 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d123      	bne.n	80091f6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff fe9b 	bl	8008eea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091bc:	e01b      	b.n	80091f6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d013      	beq.n	80091f2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d10e      	bne.n	80091f2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	7afa      	ldrb	r2, [r7, #11]
 80091de:	4611      	mov	r1, r2
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	4798      	blx	r3
 80091e4:	4603      	mov	r3, r0
 80091e6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	e002      	b.n	80091f8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e000      	b.n	80091f8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800922c:	2b00      	cmp	r3, #0
 800922e:	d009      	beq.n	8009244 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	6852      	ldr	r2, [r2, #4]
 800923c:	b2d2      	uxtb	r2, r2
 800923e:	4611      	mov	r1, r2
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 fab5 	bl	800a7ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2240      	movs	r2, #64	; 0x40
 800925c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009260:	2340      	movs	r3, #64	; 0x40
 8009262:	2200      	movs	r2, #0
 8009264:	2180      	movs	r1, #128	; 0x80
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 faa7 	bl	800a7ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2240      	movs	r2, #64	; 0x40
 8009276:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2204      	movs	r2, #4
 80092ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d105      	bne.n	80092ea <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009306:	2b03      	cmp	r3, #3
 8009308:	d10b      	bne.n	8009322 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d005      	beq.n	8009322 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938c:	2b00      	cmp	r3, #0
 800938e:	d009      	beq.n	80093a4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6852      	ldr	r2, [r2, #4]
 800939c:	b2d2      	uxtb	r2, r2
 800939e:	4611      	mov	r1, r2
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4798      	blx	r3
  }

  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b087      	sub	sp, #28
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	3301      	adds	r3, #1
 80093c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093cc:	8a3b      	ldrh	r3, [r7, #16]
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	b21a      	sxth	r2, r3
 80093d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	b21b      	sxth	r3, r3
 80093da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093dc:	89fb      	ldrh	r3, [r7, #14]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
	...

080093ec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009402:	2b20      	cmp	r3, #32
 8009404:	d004      	beq.n	8009410 <USBD_StdDevReq+0x24>
 8009406:	2b40      	cmp	r3, #64	; 0x40
 8009408:	d002      	beq.n	8009410 <USBD_StdDevReq+0x24>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <USBD_StdDevReq+0x38>
 800940e:	e050      	b.n	80094b2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	4798      	blx	r3
 800941e:	4603      	mov	r3, r0
 8009420:	73fb      	strb	r3, [r7, #15]
    break;
 8009422:	e04b      	b.n	80094bc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	2b09      	cmp	r3, #9
 800942a:	d83c      	bhi.n	80094a6 <USBD_StdDevReq+0xba>
 800942c:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <USBD_StdDevReq+0x48>)
 800942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009432:	bf00      	nop
 8009434:	08009489 	.word	0x08009489
 8009438:	0800949d 	.word	0x0800949d
 800943c:	080094a7 	.word	0x080094a7
 8009440:	08009493 	.word	0x08009493
 8009444:	080094a7 	.word	0x080094a7
 8009448:	08009467 	.word	0x08009467
 800944c:	0800945d 	.word	0x0800945d
 8009450:	080094a7 	.word	0x080094a7
 8009454:	0800947f 	.word	0x0800947f
 8009458:	08009471 	.word	0x08009471
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f9ce 	bl	8009800 <USBD_GetDescriptor>
      break;
 8009464:	e024      	b.n	80094b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fb33 	bl	8009ad4 <USBD_SetAddress>
      break;
 800946e:	e01f      	b.n	80094b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fb70 	bl	8009b58 <USBD_SetConfig>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
      break;
 800947c:	e018      	b.n	80094b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fc0d 	bl	8009ca0 <USBD_GetConfig>
      break;
 8009486:	e013      	b.n	80094b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fc3c 	bl	8009d08 <USBD_GetStatus>
      break;
 8009490:	e00e      	b.n	80094b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc6a 	bl	8009d6e <USBD_SetFeature>
      break;
 800949a:	e009      	b.n	80094b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fc79 	bl	8009d96 <USBD_ClrFeature>
      break;
 80094a4:	e004      	b.n	80094b0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fccf 	bl	8009e4c <USBD_CtlError>
      break;
 80094ae:	bf00      	nop
    }
    break;
 80094b0:	e004      	b.n	80094bc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fcc9 	bl	8009e4c <USBD_CtlError>
    break;
 80094ba:	bf00      	nop
  }

  return ret;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop

080094c8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094de:	2b20      	cmp	r3, #32
 80094e0:	d003      	beq.n	80094ea <USBD_StdItfReq+0x22>
 80094e2:	2b40      	cmp	r3, #64	; 0x40
 80094e4:	d001      	beq.n	80094ea <USBD_StdItfReq+0x22>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d12a      	bne.n	8009540 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f0:	3b01      	subs	r3, #1
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d81d      	bhi.n	8009532 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	889b      	ldrh	r3, [r3, #4]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d813      	bhi.n	8009528 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	4798      	blx	r3
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	88db      	ldrh	r3, [r3, #6]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d110      	bne.n	800953c <USBD_StdItfReq+0x74>
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10d      	bne.n	800953c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fd5e 	bl	8009fe2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009526:	e009      	b.n	800953c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fc8e 	bl	8009e4c <USBD_CtlError>
      break;
 8009530:	e004      	b.n	800953c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fc89 	bl	8009e4c <USBD_CtlError>
      break;
 800953a:	e000      	b.n	800953e <USBD_StdItfReq+0x76>
      break;
 800953c:	bf00      	nop
    }
    break;
 800953e:	e004      	b.n	800954a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fc82 	bl	8009e4c <USBD_CtlError>
    break;
 8009548:	bf00      	nop
  }

  return ret;
 800954a:	7bfb      	ldrb	r3, [r7, #15]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	889b      	ldrh	r3, [r3, #4]
 8009566:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009570:	2b20      	cmp	r3, #32
 8009572:	d004      	beq.n	800957e <USBD_StdEPReq+0x2a>
 8009574:	2b40      	cmp	r3, #64	; 0x40
 8009576:	d002      	beq.n	800957e <USBD_StdEPReq+0x2a>
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00a      	beq.n	8009592 <USBD_StdEPReq+0x3e>
 800957c:	e135      	b.n	80097ea <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]
    break;
 8009590:	e130      	b.n	80097f4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	785b      	ldrb	r3, [r3, #1]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d03e      	beq.n	8009618 <USBD_StdEPReq+0xc4>
 800959a:	2b03      	cmp	r3, #3
 800959c:	d002      	beq.n	80095a4 <USBD_StdEPReq+0x50>
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d077      	beq.n	8009692 <USBD_StdEPReq+0x13e>
 80095a2:	e11c      	b.n	80097de <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d002      	beq.n	80095b4 <USBD_StdEPReq+0x60>
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d015      	beq.n	80095de <USBD_StdEPReq+0x8a>
 80095b2:	e02b      	b.n	800960c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00c      	beq.n	80095d4 <USBD_StdEPReq+0x80>
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	2b80      	cmp	r3, #128	; 0x80
 80095be:	d009      	beq.n	80095d4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 f93d 	bl	800a844 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095ca:	2180      	movs	r1, #128	; 0x80
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 f939 	bl	800a844 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80095d2:	e020      	b.n	8009616 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fc38 	bl	8009e4c <USBD_CtlError>
        break;
 80095dc:	e01b      	b.n	8009616 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10e      	bne.n	8009604 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00b      	beq.n	8009604 <USBD_StdEPReq+0xb0>
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	2b80      	cmp	r3, #128	; 0x80
 80095f0:	d008      	beq.n	8009604 <USBD_StdEPReq+0xb0>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	88db      	ldrh	r3, [r3, #6]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d104      	bne.n	8009604 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 f920 	bl	800a844 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fcec 	bl	8009fe2 <USBD_CtlSendStatus>

        break;
 800960a:	e004      	b.n	8009616 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fc1c 	bl	8009e4c <USBD_CtlError>
        break;
 8009614:	bf00      	nop
      }
      break;
 8009616:	e0e7      	b.n	80097e8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961e:	2b02      	cmp	r3, #2
 8009620:	d002      	beq.n	8009628 <USBD_StdEPReq+0xd4>
 8009622:	2b03      	cmp	r3, #3
 8009624:	d015      	beq.n	8009652 <USBD_StdEPReq+0xfe>
 8009626:	e02d      	b.n	8009684 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00c      	beq.n	8009648 <USBD_StdEPReq+0xf4>
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	2b80      	cmp	r3, #128	; 0x80
 8009632:	d009      	beq.n	8009648 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f001 f903 	bl	800a844 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800963e:	2180      	movs	r1, #128	; 0x80
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f001 f8ff 	bl	800a844 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009646:	e023      	b.n	8009690 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fbfe 	bl	8009e4c <USBD_CtlError>
        break;
 8009650:	e01e      	b.n	8009690 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	885b      	ldrh	r3, [r3, #2]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d119      	bne.n	800968e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009664:	7bbb      	ldrb	r3, [r7, #14]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 f90a 	bl	800a882 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fcb7 	bl	8009fe2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	4798      	blx	r3
        }
        break;
 8009682:	e004      	b.n	800968e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fbe0 	bl	8009e4c <USBD_CtlError>
        break;
 800968c:	e000      	b.n	8009690 <USBD_StdEPReq+0x13c>
        break;
 800968e:	bf00      	nop
      }
      break;
 8009690:	e0aa      	b.n	80097e8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	2b02      	cmp	r3, #2
 800969a:	d002      	beq.n	80096a2 <USBD_StdEPReq+0x14e>
 800969c:	2b03      	cmp	r3, #3
 800969e:	d032      	beq.n	8009706 <USBD_StdEPReq+0x1b2>
 80096a0:	e097      	b.n	80097d2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <USBD_StdEPReq+0x164>
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	2b80      	cmp	r3, #128	; 0x80
 80096ac:	d004      	beq.n	80096b8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fbcb 	bl	8009e4c <USBD_CtlError>
          break;
 80096b6:	e091      	b.n	80097dc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	da0b      	bge.n	80096d8 <USBD_StdEPReq+0x184>
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	3310      	adds	r3, #16
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	4413      	add	r3, r2
 80096d4:	3304      	adds	r3, #4
 80096d6:	e00b      	b.n	80096f0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096de:	4613      	mov	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	4413      	add	r3, r2
 80096ee:	3304      	adds	r3, #4
 80096f0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2202      	movs	r2, #2
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fc15 	bl	8009f2e <USBD_CtlSendData>
        break;
 8009704:	e06a      	b.n	80097dc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800970a:	2b00      	cmp	r3, #0
 800970c:	da11      	bge.n	8009732 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	f003 020f 	and.w	r2, r3, #15
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3324      	adds	r3, #36	; 0x24
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d117      	bne.n	8009758 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fb8e 	bl	8009e4c <USBD_CtlError>
            break;
 8009730:	e054      	b.n	80097dc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	f003 020f 	and.w	r2, r3, #15
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	4613      	mov	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	440b      	add	r3, r1
 8009744:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d104      	bne.n	8009758 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fb7b 	bl	8009e4c <USBD_CtlError>
            break;
 8009756:	e041      	b.n	80097dc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800975c:	2b00      	cmp	r3, #0
 800975e:	da0b      	bge.n	8009778 <USBD_StdEPReq+0x224>
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	3310      	adds	r3, #16
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	4413      	add	r3, r2
 8009774:	3304      	adds	r3, #4
 8009776:	e00b      	b.n	8009790 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	4413      	add	r3, r2
 800978e:	3304      	adds	r3, #4
 8009790:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <USBD_StdEPReq+0x24a>
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	2b80      	cmp	r3, #128	; 0x80
 800979c:	d103      	bne.n	80097a6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	e00e      	b.n	80097c4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 f888 	bl	800a8c0 <USBD_LL_IsStallEP>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2201      	movs	r2, #1
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	e002      	b.n	80097c4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2200      	movs	r2, #0
 80097c2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2202      	movs	r2, #2
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fbaf 	bl	8009f2e <USBD_CtlSendData>
          break;
 80097d0:	e004      	b.n	80097dc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fb39 	bl	8009e4c <USBD_CtlError>
        break;
 80097da:	bf00      	nop
      }
      break;
 80097dc:	e004      	b.n	80097e8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fb33 	bl	8009e4c <USBD_CtlError>
      break;
 80097e6:	bf00      	nop
    }
    break;
 80097e8:	e004      	b.n	80097f4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fb2d 	bl	8009e4c <USBD_CtlError>
    break;
 80097f2:	bf00      	nop
  }

  return ret;
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800980e:	2300      	movs	r3, #0
 8009810:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	885b      	ldrh	r3, [r3, #2]
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	b29b      	uxth	r3, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	2b06      	cmp	r3, #6
 8009822:	f200 8128 	bhi.w	8009a76 <USBD_GetDescriptor+0x276>
 8009826:	a201      	add	r2, pc, #4	; (adr r2, 800982c <USBD_GetDescriptor+0x2c>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	08009849 	.word	0x08009849
 8009830:	08009861 	.word	0x08009861
 8009834:	080098a1 	.word	0x080098a1
 8009838:	08009a77 	.word	0x08009a77
 800983c:	08009a77 	.word	0x08009a77
 8009840:	08009a17 	.word	0x08009a17
 8009844:	08009a43 	.word	0x08009a43
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	7c12      	ldrb	r2, [r2, #16]
 8009854:	f107 0108 	add.w	r1, r7, #8
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
 800985c:	60f8      	str	r0, [r7, #12]
    break;
 800985e:	e112      	b.n	8009a86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	7c1b      	ldrb	r3, [r3, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10d      	bne.n	8009884 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800986e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009870:	f107 0208 	add.w	r2, r7, #8
 8009874:	4610      	mov	r0, r2
 8009876:	4798      	blx	r3
 8009878:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3301      	adds	r3, #1
 800987e:	2202      	movs	r2, #2
 8009880:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009882:	e100      	b.n	8009a86 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	f107 0208 	add.w	r2, r7, #8
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
 8009894:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3301      	adds	r3, #1
 800989a:	2202      	movs	r2, #2
 800989c:	701a      	strb	r2, [r3, #0]
    break;
 800989e:	e0f2      	b.n	8009a86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	885b      	ldrh	r3, [r3, #2]
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b05      	cmp	r3, #5
 80098a8:	f200 80ac 	bhi.w	8009a04 <USBD_GetDescriptor+0x204>
 80098ac:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <USBD_GetDescriptor+0xb4>)
 80098ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b2:	bf00      	nop
 80098b4:	080098cd 	.word	0x080098cd
 80098b8:	08009901 	.word	0x08009901
 80098bc:	08009935 	.word	0x08009935
 80098c0:	08009969 	.word	0x08009969
 80098c4:	0800999d 	.word	0x0800999d
 80098c8:	080099d1 	.word	0x080099d1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	7c12      	ldrb	r2, [r2, #16]
 80098e4:	f107 0108 	add.w	r1, r7, #8
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098ee:	e091      	b.n	8009a14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 faaa 	bl	8009e4c <USBD_CtlError>
        err++;
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	3301      	adds	r3, #1
 80098fc:	72fb      	strb	r3, [r7, #11]
      break;
 80098fe:	e089      	b.n	8009a14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00b      	beq.n	8009924 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	7c12      	ldrb	r2, [r2, #16]
 8009918:	f107 0108 	add.w	r1, r7, #8
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
 8009920:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009922:	e077      	b.n	8009a14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa90 	bl	8009e4c <USBD_CtlError>
        err++;
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	3301      	adds	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
      break;
 8009932:	e06f      	b.n	8009a14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	7c12      	ldrb	r2, [r2, #16]
 800994c:	f107 0108 	add.w	r1, r7, #8
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
 8009954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009956:	e05d      	b.n	8009a14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa76 	bl	8009e4c <USBD_CtlError>
        err++;
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	3301      	adds	r3, #1
 8009964:	72fb      	strb	r3, [r7, #11]
      break;
 8009966:	e055      	b.n	8009a14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	7c12      	ldrb	r2, [r2, #16]
 8009980:	f107 0108 	add.w	r1, r7, #8
 8009984:	4610      	mov	r0, r2
 8009986:	4798      	blx	r3
 8009988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800998a:	e043      	b.n	8009a14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fa5c 	bl	8009e4c <USBD_CtlError>
        err++;
 8009994:	7afb      	ldrb	r3, [r7, #11]
 8009996:	3301      	adds	r3, #1
 8009998:	72fb      	strb	r3, [r7, #11]
      break;
 800999a:	e03b      	b.n	8009a14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00b      	beq.n	80099c0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	7c12      	ldrb	r2, [r2, #16]
 80099b4:	f107 0108 	add.w	r1, r7, #8
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099be:	e029      	b.n	8009a14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa42 	bl	8009e4c <USBD_CtlError>
        err++;
 80099c8:	7afb      	ldrb	r3, [r7, #11]
 80099ca:	3301      	adds	r3, #1
 80099cc:	72fb      	strb	r3, [r7, #11]
      break;
 80099ce:	e021      	b.n	8009a14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	7c12      	ldrb	r2, [r2, #16]
 80099e8:	f107 0108 	add.w	r1, r7, #8
 80099ec:	4610      	mov	r0, r2
 80099ee:	4798      	blx	r3
 80099f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099f2:	e00f      	b.n	8009a14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fa28 	bl	8009e4c <USBD_CtlError>
        err++;
 80099fc:	7afb      	ldrb	r3, [r7, #11]
 80099fe:	3301      	adds	r3, #1
 8009a00:	72fb      	strb	r3, [r7, #11]
      break;
 8009a02:	e007      	b.n	8009a14 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa20 	bl	8009e4c <USBD_CtlError>
      err++;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009a12:	bf00      	nop
    }
    break;
 8009a14:	e037      	b.n	8009a86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	7c1b      	ldrb	r3, [r3, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d109      	bne.n	8009a32 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a26:	f107 0208 	add.w	r2, r7, #8
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	4798      	blx	r3
 8009a2e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009a30:	e029      	b.n	8009a86 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fa09 	bl	8009e4c <USBD_CtlError>
      err++;
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	72fb      	strb	r3, [r7, #11]
    break;
 8009a40:	e021      	b.n	8009a86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	7c1b      	ldrb	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10d      	bne.n	8009a66 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a52:	f107 0208 	add.w	r2, r7, #8
 8009a56:	4610      	mov	r0, r2
 8009a58:	4798      	blx	r3
 8009a5a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	2207      	movs	r2, #7
 8009a62:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009a64:	e00f      	b.n	8009a86 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f9ef 	bl	8009e4c <USBD_CtlError>
      err++;
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	3301      	adds	r3, #1
 8009a72:	72fb      	strb	r3, [r7, #11]
    break;
 8009a74:	e007      	b.n	8009a86 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f9e7 	bl	8009e4c <USBD_CtlError>
    err++;
 8009a7e:	7afb      	ldrb	r3, [r7, #11]
 8009a80:	3301      	adds	r3, #1
 8009a82:	72fb      	strb	r3, [r7, #11]
    break;
 8009a84:	bf00      	nop
  }

  if (err != 0U)
 8009a86:	7afb      	ldrb	r3, [r7, #11]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d11e      	bne.n	8009aca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	88db      	ldrh	r3, [r3, #6]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d016      	beq.n	8009ac2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009a94:	893b      	ldrh	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00e      	beq.n	8009ab8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	88da      	ldrh	r2, [r3, #6]
 8009a9e:	893b      	ldrh	r3, [r7, #8]
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	bf28      	it	cs
 8009aa4:	4613      	movcs	r3, r2
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009aaa:	893b      	ldrh	r3, [r7, #8]
 8009aac:	461a      	mov	r2, r3
 8009aae:	68f9      	ldr	r1, [r7, #12]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fa3c 	bl	8009f2e <USBD_CtlSendData>
 8009ab6:	e009      	b.n	8009acc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f9c6 	bl	8009e4c <USBD_CtlError>
 8009ac0:	e004      	b.n	8009acc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fa8d 	bl	8009fe2 <USBD_CtlSendStatus>
 8009ac8:	e000      	b.n	8009acc <USBD_GetDescriptor+0x2cc>
    return;
 8009aca:	bf00      	nop
    }
  }
}
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop

08009ad4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	889b      	ldrh	r3, [r3, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d130      	bne.n	8009b48 <USBD_SetAddress+0x74>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	88db      	ldrh	r3, [r3, #6]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d12c      	bne.n	8009b48 <USBD_SetAddress+0x74>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	885b      	ldrh	r3, [r3, #2]
 8009af2:	2b7f      	cmp	r3, #127	; 0x7f
 8009af4:	d828      	bhi.n	8009b48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	885b      	ldrh	r3, [r3, #2]
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	d104      	bne.n	8009b16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f99c 	bl	8009e4c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b14:	e01c      	b.n	8009b50 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	7bfa      	ldrb	r2, [r7, #15]
 8009b1a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fef8 	bl	800a918 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fa5a 	bl	8009fe2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2202      	movs	r2, #2
 8009b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3c:	e008      	b.n	8009b50 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b46:	e003      	b.n	8009b50 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f97e 	bl	8009e4c <USBD_CtlError>
  }
}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	885b      	ldrh	r3, [r3, #2]
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	4b4b      	ldr	r3, [pc, #300]	; (8009c9c <USBD_SetConfig+0x144>)
 8009b6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b70:	4b4a      	ldr	r3, [pc, #296]	; (8009c9c <USBD_SetConfig+0x144>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d905      	bls.n	8009b84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f966 	bl	8009e4c <USBD_CtlError>
    return USBD_FAIL;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e087      	b.n	8009c94 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d002      	beq.n	8009b94 <USBD_SetConfig+0x3c>
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d025      	beq.n	8009bde <USBD_SetConfig+0x86>
 8009b92:	e071      	b.n	8009c78 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009b94:	4b41      	ldr	r3, [pc, #260]	; (8009c9c <USBD_SetConfig+0x144>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d01c      	beq.n	8009bd6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009b9c:	4b3f      	ldr	r3, [pc, #252]	; (8009c9c <USBD_SetConfig+0x144>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ba6:	4b3d      	ldr	r3, [pc, #244]	; (8009c9c <USBD_SetConfig+0x144>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff f9a7 	bl	8008f00 <USBD_SetClassConfig>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f944 	bl	8009e4c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009bc4:	e065      	b.n	8009c92 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fa0b 	bl	8009fe2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2203      	movs	r2, #3
 8009bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009bd4:	e05d      	b.n	8009c92 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa03 	bl	8009fe2 <USBD_CtlSendStatus>
    break;
 8009bdc:	e059      	b.n	8009c92 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009bde:	4b2f      	ldr	r3, [pc, #188]	; (8009c9c <USBD_SetConfig+0x144>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d112      	bne.n	8009c0c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2202      	movs	r2, #2
 8009bea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009bee:	4b2b      	ldr	r3, [pc, #172]	; (8009c9c <USBD_SetConfig+0x144>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bf8:	4b28      	ldr	r3, [pc, #160]	; (8009c9c <USBD_SetConfig+0x144>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff f99a 	bl	8008f38 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f9ec 	bl	8009fe2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009c0a:	e042      	b.n	8009c92 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009c0c:	4b23      	ldr	r3, [pc, #140]	; (8009c9c <USBD_SetConfig+0x144>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d02a      	beq.n	8009c70 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff f988 	bl	8008f38 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009c28:	4b1c      	ldr	r3, [pc, #112]	; (8009c9c <USBD_SetConfig+0x144>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c32:	4b1a      	ldr	r3, [pc, #104]	; (8009c9c <USBD_SetConfig+0x144>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff f961 	bl	8008f00 <USBD_SetClassConfig>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00f      	beq.n	8009c68 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f8fe 	bl	8009e4c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff f96d 	bl	8008f38 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2202      	movs	r2, #2
 8009c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009c66:	e014      	b.n	8009c92 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f9ba 	bl	8009fe2 <USBD_CtlSendStatus>
    break;
 8009c6e:	e010      	b.n	8009c92 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f9b6 	bl	8009fe2 <USBD_CtlSendStatus>
    break;
 8009c76:	e00c      	b.n	8009c92 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f8e6 	bl	8009e4c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c80:	4b06      	ldr	r3, [pc, #24]	; (8009c9c <USBD_SetConfig+0x144>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7ff f956 	bl	8008f38 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c90:	bf00      	nop
  }

  return ret;
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200003a8 	.word	0x200003a8

08009ca0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	88db      	ldrh	r3, [r3, #6]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d004      	beq.n	8009cbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f8c9 	bl	8009e4c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009cba:	e021      	b.n	8009d00 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	db17      	blt.n	8009cf6 <USBD_GetConfig+0x56>
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	dd02      	ble.n	8009cd0 <USBD_GetConfig+0x30>
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d00b      	beq.n	8009ce6 <USBD_GetConfig+0x46>
 8009cce:	e012      	b.n	8009cf6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3308      	adds	r3, #8
 8009cda:	2201      	movs	r2, #1
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f925 	bl	8009f2e <USBD_CtlSendData>
      break;
 8009ce4:	e00c      	b.n	8009d00 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	2201      	movs	r2, #1
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f91d 	bl	8009f2e <USBD_CtlSendData>
      break;
 8009cf4:	e004      	b.n	8009d00 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f8a7 	bl	8009e4c <USBD_CtlError>
      break;
 8009cfe:	bf00      	nop
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d81e      	bhi.n	8009d5c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	88db      	ldrh	r3, [r3, #6]
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d004      	beq.n	8009d30 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f88f 	bl	8009e4c <USBD_CtlError>
      break;
 8009d2e:	e01a      	b.n	8009d66 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d005      	beq.n	8009d4c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f043 0202 	orr.w	r2, r3, #2
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	330c      	adds	r3, #12
 8009d50:	2202      	movs	r2, #2
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f8ea 	bl	8009f2e <USBD_CtlSendData>
    break;
 8009d5a:	e004      	b.n	8009d66 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f874 	bl	8009e4c <USBD_CtlError>
    break;
 8009d64:	bf00      	nop
  }
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	885b      	ldrh	r3, [r3, #2]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d106      	bne.n	8009d8e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f92a 	bl	8009fe2 <USBD_CtlSendStatus>
  }
}
 8009d8e:	bf00      	nop
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da6:	3b01      	subs	r3, #1
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d80b      	bhi.n	8009dc4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	885b      	ldrh	r3, [r3, #2]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d10c      	bne.n	8009dce <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f910 	bl	8009fe2 <USBD_CtlSendStatus>
      }
      break;
 8009dc2:	e004      	b.n	8009dce <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f840 	bl	8009e4c <USBD_CtlError>
      break;
 8009dcc:	e000      	b.n	8009dd0 <USBD_ClrFeature+0x3a>
      break;
 8009dce:	bf00      	nop
  }
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	781a      	ldrb	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3301      	adds	r3, #1
 8009df2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	781a      	ldrb	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f7ff fad3 	bl	80093ae <SWAPBYTE>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3301      	adds	r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7ff fac6 	bl	80093ae <SWAPBYTE>
 8009e22:	4603      	mov	r3, r0
 8009e24:	461a      	mov	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3301      	adds	r3, #1
 8009e34:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f7ff fab9 	bl	80093ae <SWAPBYTE>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	80da      	strh	r2, [r3, #6]
}
 8009e44:	bf00      	nop
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e56:	2180      	movs	r1, #128	; 0x80
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fcf3 	bl	800a844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e5e:	2100      	movs	r1, #0
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fcef 	bl	800a844 <USBD_LL_StallEP>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b086      	sub	sp, #24
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d036      	beq.n	8009ef2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e88:	6938      	ldr	r0, [r7, #16]
 8009e8a:	f000 f836 	bl	8009efa <USBD_GetLen>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	3301      	adds	r3, #1
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	7812      	ldrb	r2, [r2, #0]
 8009ea6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ebe:	e013      	b.n	8009ee8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	7812      	ldrb	r2, [r2, #0]
 8009eca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	613b      	str	r3, [r7, #16]
    idx++;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	4413      	add	r3, r2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e7      	bne.n	8009ec0 <USBD_GetString+0x52>
 8009ef0:	e000      	b.n	8009ef4 <USBD_GetString+0x86>
    return;
 8009ef2:	bf00      	nop
  }
}
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b085      	sub	sp, #20
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f0a:	e005      	b.n	8009f18 <USBD_GetLen+0x1e>
  {
    len++;
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	3301      	adds	r3, #1
 8009f16:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1f5      	bne.n	8009f0c <USBD_GetLen+0x12>
  }

  return len;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	2100      	movs	r1, #0
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fcfe 	bl	800a956 <USBD_LL_Transmit>

  return USBD_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	2100      	movs	r1, #0
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 fced 	bl	800a956 <USBD_LL_Transmit>

  return USBD_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2203      	movs	r2, #3
 8009f96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	2100      	movs	r1, #0
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 fcf1 	bl	800a998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fce0 	bl	800a998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2204      	movs	r2, #4
 8009fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fcac 	bl	800a956 <USBD_LL_Transmit>

  return USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2205      	movs	r2, #5
 800a014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a018:	2300      	movs	r3, #0
 800a01a:	2200      	movs	r2, #0
 800a01c:	2100      	movs	r1, #0
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fcba 	bl	800a998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a034:	2200      	movs	r2, #0
 800a036:	4912      	ldr	r1, [pc, #72]	; (800a080 <MX_USB_DEVICE_Init+0x50>)
 800a038:	4812      	ldr	r0, [pc, #72]	; (800a084 <MX_USB_DEVICE_Init+0x54>)
 800a03a:	f7fe fef3 	bl	8008e24 <USBD_Init>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a044:	f7f8 f97a 	bl	800233c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a048:	490f      	ldr	r1, [pc, #60]	; (800a088 <MX_USB_DEVICE_Init+0x58>)
 800a04a:	480e      	ldr	r0, [pc, #56]	; (800a084 <MX_USB_DEVICE_Init+0x54>)
 800a04c:	f7fe ff20 	bl	8008e90 <USBD_RegisterClass>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a056:	f7f8 f971 	bl	800233c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a05a:	490c      	ldr	r1, [pc, #48]	; (800a08c <MX_USB_DEVICE_Init+0x5c>)
 800a05c:	4809      	ldr	r0, [pc, #36]	; (800a084 <MX_USB_DEVICE_Init+0x54>)
 800a05e:	f7fe fe45 	bl	8008cec <USBD_CDC_RegisterInterface>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a068:	f7f8 f968 	bl	800233c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a06c:	4805      	ldr	r0, [pc, #20]	; (800a084 <MX_USB_DEVICE_Init+0x54>)
 800a06e:	f7fe ff30 	bl	8008ed2 <USBD_Start>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a078:	f7f8 f960 	bl	800233c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a07c:	bf00      	nop
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20000138 	.word	0x20000138
 800a084:	200006ac 	.word	0x200006ac
 800a088:	20000018 	.word	0x20000018
 800a08c:	20000124 	.word	0x20000124

0800a090 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a094:	2200      	movs	r2, #0
 800a096:	4905      	ldr	r1, [pc, #20]	; (800a0ac <CDC_Init_FS+0x1c>)
 800a098:	4805      	ldr	r0, [pc, #20]	; (800a0b0 <CDC_Init_FS+0x20>)
 800a09a:	f7fe fe3c 	bl	8008d16 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a09e:	4905      	ldr	r1, [pc, #20]	; (800a0b4 <CDC_Init_FS+0x24>)
 800a0a0:	4803      	ldr	r0, [pc, #12]	; (800a0b0 <CDC_Init_FS+0x20>)
 800a0a2:	f7fe fe51 	bl	8008d48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a0a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	2000117c 	.word	0x2000117c
 800a0b0:	200006ac 	.word	0x200006ac
 800a0b4:	2000097c 	.word	0x2000097c

0800a0b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a0bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	6039      	str	r1, [r7, #0]
 800a0d2:	71fb      	strb	r3, [r7, #7]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	2b23      	cmp	r3, #35	; 0x23
 800a0dc:	d85c      	bhi.n	800a198 <CDC_Control_FS+0xd0>
 800a0de:	a201      	add	r2, pc, #4	; (adr r2, 800a0e4 <CDC_Control_FS+0x1c>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a199 	.word	0x0800a199
 800a0e8:	0800a199 	.word	0x0800a199
 800a0ec:	0800a199 	.word	0x0800a199
 800a0f0:	0800a199 	.word	0x0800a199
 800a0f4:	0800a199 	.word	0x0800a199
 800a0f8:	0800a199 	.word	0x0800a199
 800a0fc:	0800a199 	.word	0x0800a199
 800a100:	0800a199 	.word	0x0800a199
 800a104:	0800a199 	.word	0x0800a199
 800a108:	0800a199 	.word	0x0800a199
 800a10c:	0800a199 	.word	0x0800a199
 800a110:	0800a199 	.word	0x0800a199
 800a114:	0800a199 	.word	0x0800a199
 800a118:	0800a199 	.word	0x0800a199
 800a11c:	0800a199 	.word	0x0800a199
 800a120:	0800a199 	.word	0x0800a199
 800a124:	0800a199 	.word	0x0800a199
 800a128:	0800a199 	.word	0x0800a199
 800a12c:	0800a199 	.word	0x0800a199
 800a130:	0800a199 	.word	0x0800a199
 800a134:	0800a199 	.word	0x0800a199
 800a138:	0800a199 	.word	0x0800a199
 800a13c:	0800a199 	.word	0x0800a199
 800a140:	0800a199 	.word	0x0800a199
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a199 	.word	0x0800a199
 800a14c:	0800a199 	.word	0x0800a199
 800a150:	0800a199 	.word	0x0800a199
 800a154:	0800a199 	.word	0x0800a199
 800a158:	0800a199 	.word	0x0800a199
 800a15c:	0800a199 	.word	0x0800a199
 800a160:	0800a199 	.word	0x0800a199
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a187 	.word	0x0800a187
 800a16c:	0800a199 	.word	0x0800a199
 800a170:	0800a199 	.word	0x0800a199
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a174:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <CDC_Control_FS+0xe0>)
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	6810      	ldr	r0, [r2, #0]
 800a17a:	6018      	str	r0, [r3, #0]
 800a17c:	8891      	ldrh	r1, [r2, #4]
 800a17e:	7992      	ldrb	r2, [r2, #6]
 800a180:	8099      	strh	r1, [r3, #4]
 800a182:	719a      	strb	r2, [r3, #6]
    break;
 800a184:	e009      	b.n	800a19a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	4a07      	ldr	r2, [pc, #28]	; (800a1a8 <CDC_Control_FS+0xe0>)
 800a18a:	6810      	ldr	r0, [r2, #0]
 800a18c:	6018      	str	r0, [r3, #0]
 800a18e:	8891      	ldrh	r1, [r2, #4]
 800a190:	7992      	ldrb	r2, [r2, #6]
 800a192:	8099      	strh	r1, [r3, #4]
 800a194:	719a      	strb	r2, [r3, #6]
    break;
 800a196:	e000      	b.n	800a19a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a198:	bf00      	nop
  }

  return (USBD_OK);
 800a19a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	2000011c 	.word	0x2000011c

0800a1ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4805      	ldr	r0, [pc, #20]	; (800a1d0 <CDC_Receive_FS+0x24>)
 800a1ba:	f7fe fdc5 	bl	8008d48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1be:	4804      	ldr	r0, [pc, #16]	; (800a1d0 <CDC_Receive_FS+0x24>)
 800a1c0:	f7fe fe06 	bl	8008dd0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a1c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200006ac 	.word	0x200006ac

0800a1d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a1e4:	4b0d      	ldr	r3, [pc, #52]	; (800a21c <CDC_Transmit_FS+0x48>)
 800a1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e00b      	b.n	800a212 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a1fa:	887b      	ldrh	r3, [r7, #2]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4806      	ldr	r0, [pc, #24]	; (800a21c <CDC_Transmit_FS+0x48>)
 800a202:	f7fe fd88 	bl	8008d16 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a206:	4805      	ldr	r0, [pc, #20]	; (800a21c <CDC_Transmit_FS+0x48>)
 800a208:	f7fe fdb2 	bl	8008d70 <USBD_CDC_TransmitPacket>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a210:	7bfb      	ldrb	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	200006ac 	.word	0x200006ac

0800a220 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4613      	mov	r3, r2
 800a22c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a232:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a236:	4618      	mov	r0, r3
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
	...

0800a244 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4603      	mov	r3, r0
 800a24c:	6039      	str	r1, [r7, #0]
 800a24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2212      	movs	r2, #18
 800a254:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a256:	4b03      	ldr	r3, [pc, #12]	; (800a264 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	20000154 	.word	0x20000154

0800a268 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	6039      	str	r1, [r7, #0]
 800a272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	2204      	movs	r2, #4
 800a278:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a27a:	4b03      	ldr	r3, [pc, #12]	; (800a288 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	20000168 	.word	0x20000168

0800a28c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	6039      	str	r1, [r7, #0]
 800a296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d105      	bne.n	800a2aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	4907      	ldr	r1, [pc, #28]	; (800a2c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2a2:	4808      	ldr	r0, [pc, #32]	; (800a2c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2a4:	f7ff fde3 	bl	8009e6e <USBD_GetString>
 800a2a8:	e004      	b.n	800a2b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	4904      	ldr	r1, [pc, #16]	; (800a2c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a2ae:	4805      	ldr	r0, [pc, #20]	; (800a2c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2b0:	f7ff fddd 	bl	8009e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2b4:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	2000197c 	.word	0x2000197c
 800a2c4:	0800cd88 	.word	0x0800cd88

0800a2c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	4904      	ldr	r1, [pc, #16]	; (800a2e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a2d8:	4804      	ldr	r0, [pc, #16]	; (800a2ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a2da:	f7ff fdc8 	bl	8009e6e <USBD_GetString>
  return USBD_StrDesc;
 800a2de:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	2000197c 	.word	0x2000197c
 800a2ec:	0800cda0 	.word	0x0800cda0

0800a2f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	6039      	str	r1, [r7, #0]
 800a2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	221a      	movs	r2, #26
 800a300:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a302:	f000 f843 	bl	800a38c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a306:	4b02      	ldr	r3, [pc, #8]	; (800a310 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	2000016c 	.word	0x2000016c

0800a314 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	6039      	str	r1, [r7, #0]
 800a31e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a320:	79fb      	ldrb	r3, [r7, #7]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d105      	bne.n	800a332 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	4907      	ldr	r1, [pc, #28]	; (800a348 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a32a:	4808      	ldr	r0, [pc, #32]	; (800a34c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a32c:	f7ff fd9f 	bl	8009e6e <USBD_GetString>
 800a330:	e004      	b.n	800a33c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	4904      	ldr	r1, [pc, #16]	; (800a348 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a336:	4805      	ldr	r0, [pc, #20]	; (800a34c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a338:	f7ff fd99 	bl	8009e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a33c:	4b02      	ldr	r3, [pc, #8]	; (800a348 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	2000197c 	.word	0x2000197c
 800a34c:	0800cdb4 	.word	0x0800cdb4

0800a350 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d105      	bne.n	800a36e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4907      	ldr	r1, [pc, #28]	; (800a384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a366:	4808      	ldr	r0, [pc, #32]	; (800a388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a368:	f7ff fd81 	bl	8009e6e <USBD_GetString>
 800a36c:	e004      	b.n	800a378 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4904      	ldr	r1, [pc, #16]	; (800a384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a372:	4805      	ldr	r0, [pc, #20]	; (800a388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a374:	f7ff fd7b 	bl	8009e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	2000197c 	.word	0x2000197c
 800a388:	0800cdc0 	.word	0x0800cdc0

0800a38c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a392:	4b0f      	ldr	r3, [pc, #60]	; (800a3d0 <Get_SerialNum+0x44>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a398:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <Get_SerialNum+0x48>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a39e:	4b0e      	ldr	r3, [pc, #56]	; (800a3d8 <Get_SerialNum+0x4c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d009      	beq.n	800a3c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3b2:	2208      	movs	r2, #8
 800a3b4:	4909      	ldr	r1, [pc, #36]	; (800a3dc <Get_SerialNum+0x50>)
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 f814 	bl	800a3e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3bc:	2204      	movs	r2, #4
 800a3be:	4908      	ldr	r1, [pc, #32]	; (800a3e0 <Get_SerialNum+0x54>)
 800a3c0:	68b8      	ldr	r0, [r7, #8]
 800a3c2:	f000 f80f 	bl	800a3e4 <IntToUnicode>
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	1fff7a10 	.word	0x1fff7a10
 800a3d4:	1fff7a14 	.word	0x1fff7a14
 800a3d8:	1fff7a18 	.word	0x1fff7a18
 800a3dc:	2000016e 	.word	0x2000016e
 800a3e0:	2000017e 	.word	0x2000017e

0800a3e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75fb      	strb	r3, [r7, #23]
 800a3fa:	e027      	b.n	800a44c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	0f1b      	lsrs	r3, r3, #28
 800a400:	2b09      	cmp	r3, #9
 800a402:	d80b      	bhi.n	800a41c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	0f1b      	lsrs	r3, r3, #28
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	4619      	mov	r1, r3
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	440b      	add	r3, r1
 800a414:	3230      	adds	r2, #48	; 0x30
 800a416:	b2d2      	uxtb	r2, r2
 800a418:	701a      	strb	r2, [r3, #0]
 800a41a:	e00a      	b.n	800a432 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	0f1b      	lsrs	r3, r3, #28
 800a420:	b2da      	uxtb	r2, r3
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	4619      	mov	r1, r3
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	440b      	add	r3, r1
 800a42c:	3237      	adds	r2, #55	; 0x37
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	011b      	lsls	r3, r3, #4
 800a436:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	3301      	adds	r3, #1
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	4413      	add	r3, r2
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	3301      	adds	r3, #1
 800a44a:	75fb      	strb	r3, [r7, #23]
 800a44c:	7dfa      	ldrb	r2, [r7, #23]
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	429a      	cmp	r2, r3
 800a452:	d3d3      	bcc.n	800a3fc <IntToUnicode+0x18>
  }
}
 800a454:	bf00      	nop
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	; 0x28
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a468:	f107 0314 	add.w	r3, r7, #20
 800a46c:	2200      	movs	r2, #0
 800a46e:	601a      	str	r2, [r3, #0]
 800a470:	605a      	str	r2, [r3, #4]
 800a472:	609a      	str	r2, [r3, #8]
 800a474:	60da      	str	r2, [r3, #12]
 800a476:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a480:	d13a      	bne.n	800a4f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a482:	2300      	movs	r3, #0
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	4b1e      	ldr	r3, [pc, #120]	; (800a500 <HAL_PCD_MspInit+0xa0>)
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	4a1d      	ldr	r2, [pc, #116]	; (800a500 <HAL_PCD_MspInit+0xa0>)
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	6313      	str	r3, [r2, #48]	; 0x30
 800a492:	4b1b      	ldr	r3, [pc, #108]	; (800a500 <HAL_PCD_MspInit+0xa0>)
 800a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	613b      	str	r3, [r7, #16]
 800a49c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a49e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a4a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a4b0:	230a      	movs	r3, #10
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4b4:	f107 0314 	add.w	r3, r7, #20
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4812      	ldr	r0, [pc, #72]	; (800a504 <HAL_PCD_MspInit+0xa4>)
 800a4bc:	f7f8 fe74 	bl	80031a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a4c0:	4b0f      	ldr	r3, [pc, #60]	; (800a500 <HAL_PCD_MspInit+0xa0>)
 800a4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c4:	4a0e      	ldr	r2, [pc, #56]	; (800a500 <HAL_PCD_MspInit+0xa0>)
 800a4c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ca:	6353      	str	r3, [r2, #52]	; 0x34
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <HAL_PCD_MspInit+0xa0>)
 800a4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d4:	4a0a      	ldr	r2, [pc, #40]	; (800a500 <HAL_PCD_MspInit+0xa0>)
 800a4d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4da:	6453      	str	r3, [r2, #68]	; 0x44
 800a4dc:	4b08      	ldr	r3, [pc, #32]	; (800a500 <HAL_PCD_MspInit+0xa0>)
 800a4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	2043      	movs	r0, #67	; 0x43
 800a4ee:	f7f8 fe24 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4f2:	2043      	movs	r0, #67	; 0x43
 800a4f4:	f7f8 fe3d 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4f8:	bf00      	nop
 800a4fa:	3728      	adds	r7, #40	; 0x28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	40023800 	.word	0x40023800
 800a504:	40020000 	.word	0x40020000

0800a508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f7fe fd22 	bl	8008f68 <USBD_LL_SetupStage>
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a53e:	78fa      	ldrb	r2, [r7, #3]
 800a540:	6879      	ldr	r1, [r7, #4]
 800a542:	4613      	mov	r3, r2
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	1a9b      	subs	r3, r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	440b      	add	r3, r1
 800a54c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	78fb      	ldrb	r3, [r7, #3]
 800a554:	4619      	mov	r1, r3
 800a556:	f7fe fd5a 	bl	800900e <USBD_LL_DataOutStage>
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a574:	78fa      	ldrb	r2, [r7, #3]
 800a576:	6879      	ldr	r1, [r7, #4]
 800a578:	4613      	mov	r3, r2
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	1a9b      	subs	r3, r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	3348      	adds	r3, #72	; 0x48
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	78fb      	ldrb	r3, [r7, #3]
 800a588:	4619      	mov	r1, r3
 800a58a:	f7fe fda3 	bl	80090d4 <USBD_LL_DataInStage>
}
 800a58e:	bf00      	nop
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fe fea7 	bl	80092f8 <USBD_LL_SOF>
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d102      	bne.n	800a5cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
 800a5ca:	e008      	b.n	800a5de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d102      	bne.n	800a5da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	73fb      	strb	r3, [r7, #15]
 800a5d8:	e001      	b.n	800a5de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a5da:	f7f7 feaf 	bl	800233c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5e4:	7bfa      	ldrb	r2, [r7, #15]
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fe4a 	bl	8009282 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fe fe03 	bl	8009200 <USBD_LL_Reset>
}
 800a5fa:	bf00      	nop
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe fe45 	bl	80092a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	6812      	ldr	r2, [r2, #0]
 800a626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a62a:	f043 0301 	orr.w	r3, r3, #1
 800a62e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d005      	beq.n	800a644 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a638:	4b04      	ldr	r3, [pc, #16]	; (800a64c <HAL_PCD_SuspendCallback+0x48>)
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	4a03      	ldr	r2, [pc, #12]	; (800a64c <HAL_PCD_SuspendCallback+0x48>)
 800a63e:	f043 0306 	orr.w	r3, r3, #6
 800a642:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	e000ed00 	.word	0xe000ed00

0800a650 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fe fe34 	bl	80092cc <USBD_LL_Resume>
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a67e:	78fa      	ldrb	r2, [r7, #3]
 800a680:	4611      	mov	r1, r2
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe fe5f 	bl	8009346 <USBD_LL_IsoOUTIncomplete>
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	460b      	mov	r3, r1
 800a69a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6a2:	78fa      	ldrb	r2, [r7, #3]
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fe40 	bl	800932c <USBD_LL_IsoINIncomplete>
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fe fe4c 	bl	8009360 <USBD_LL_DevConnected>
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fe fe49 	bl	8009376 <USBD_LL_DevDisconnected>
}
 800a6e4:	bf00      	nop
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d13c      	bne.n	800a776 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a6fc:	4a20      	ldr	r2, [pc, #128]	; (800a780 <USBD_LL_Init+0x94>)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a1e      	ldr	r2, [pc, #120]	; (800a780 <USBD_LL_Init+0x94>)
 800a708:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a70c:	4b1c      	ldr	r3, [pc, #112]	; (800a780 <USBD_LL_Init+0x94>)
 800a70e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a712:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a714:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <USBD_LL_Init+0x94>)
 800a716:	2204      	movs	r2, #4
 800a718:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a71a:	4b19      	ldr	r3, [pc, #100]	; (800a780 <USBD_LL_Init+0x94>)
 800a71c:	2202      	movs	r2, #2
 800a71e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a720:	4b17      	ldr	r3, [pc, #92]	; (800a780 <USBD_LL_Init+0x94>)
 800a722:	2200      	movs	r2, #0
 800a724:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a726:	4b16      	ldr	r3, [pc, #88]	; (800a780 <USBD_LL_Init+0x94>)
 800a728:	2202      	movs	r2, #2
 800a72a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a72c:	4b14      	ldr	r3, [pc, #80]	; (800a780 <USBD_LL_Init+0x94>)
 800a72e:	2200      	movs	r2, #0
 800a730:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a732:	4b13      	ldr	r3, [pc, #76]	; (800a780 <USBD_LL_Init+0x94>)
 800a734:	2200      	movs	r2, #0
 800a736:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a738:	4b11      	ldr	r3, [pc, #68]	; (800a780 <USBD_LL_Init+0x94>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a73e:	4b10      	ldr	r3, [pc, #64]	; (800a780 <USBD_LL_Init+0x94>)
 800a740:	2200      	movs	r2, #0
 800a742:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a744:	4b0e      	ldr	r3, [pc, #56]	; (800a780 <USBD_LL_Init+0x94>)
 800a746:	2200      	movs	r2, #0
 800a748:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a74a:	480d      	ldr	r0, [pc, #52]	; (800a780 <USBD_LL_Init+0x94>)
 800a74c:	f7f9 feab 	bl	80044a6 <HAL_PCD_Init>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a756:	f7f7 fdf1 	bl	800233c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a75a:	2180      	movs	r1, #128	; 0x80
 800a75c:	4808      	ldr	r0, [pc, #32]	; (800a780 <USBD_LL_Init+0x94>)
 800a75e:	f7fb f808 	bl	8005772 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a762:	2240      	movs	r2, #64	; 0x40
 800a764:	2100      	movs	r1, #0
 800a766:	4806      	ldr	r0, [pc, #24]	; (800a780 <USBD_LL_Init+0x94>)
 800a768:	f7fa ffbc 	bl	80056e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a76c:	2280      	movs	r2, #128	; 0x80
 800a76e:	2101      	movs	r1, #1
 800a770:	4803      	ldr	r0, [pc, #12]	; (800a780 <USBD_LL_Init+0x94>)
 800a772:	f7fa ffb7 	bl	80056e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20001b7c 	.word	0x20001b7c

0800a784 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7f9 ffa0 	bl	80046e0 <HAL_PCD_Start>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f92a 	bl	800aa00 <USBD_Get_USB_Status>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	70fb      	strb	r3, [r7, #3]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70bb      	strb	r3, [r7, #2]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7e2:	78bb      	ldrb	r3, [r7, #2]
 800a7e4:	883a      	ldrh	r2, [r7, #0]
 800a7e6:	78f9      	ldrb	r1, [r7, #3]
 800a7e8:	f7fa fb84 	bl	8004ef4 <HAL_PCD_EP_Open>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f904 	bl	800aa00 <USBD_Get_USB_Status>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	460b      	mov	r3, r1
 800a810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a820:	78fa      	ldrb	r2, [r7, #3]
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7fa fbcd 	bl	8004fc4 <HAL_PCD_EP_Close>
 800a82a:	4603      	mov	r3, r0
 800a82c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 f8e5 	bl	800aa00 <USBD_Get_USB_Status>
 800a836:	4603      	mov	r3, r0
 800a838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a85e:	78fa      	ldrb	r2, [r7, #3]
 800a860:	4611      	mov	r1, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f7fa fca5 	bl	80051b2 <HAL_PCD_EP_SetStall>
 800a868:	4603      	mov	r3, r0
 800a86a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 f8c6 	bl	800aa00 <USBD_Get_USB_Status>
 800a874:	4603      	mov	r3, r0
 800a876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a878:	7bbb      	ldrb	r3, [r7, #14]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a89c:	78fa      	ldrb	r2, [r7, #3]
 800a89e:	4611      	mov	r1, r2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fa fcea 	bl	800527a <HAL_PCD_EP_ClrStall>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 f8a7 	bl	800aa00 <USBD_Get_USB_Status>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	da0b      	bge.n	800a8f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8e2:	68f9      	ldr	r1, [r7, #12]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	1a9b      	subs	r3, r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	440b      	add	r3, r1
 800a8ee:	333e      	adds	r3, #62	; 0x3e
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	e00b      	b.n	800a90c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8fa:	68f9      	ldr	r1, [r7, #12]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	1a9b      	subs	r3, r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	440b      	add	r3, r1
 800a906:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a90a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a932:	78fa      	ldrb	r2, [r7, #3]
 800a934:	4611      	mov	r1, r2
 800a936:	4618      	mov	r0, r3
 800a938:	f7fa fab7 	bl	8004eaa <HAL_PCD_SetAddress>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 f85c 	bl	800aa00 <USBD_Get_USB_Status>
 800a948:	4603      	mov	r3, r0
 800a94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b086      	sub	sp, #24
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	60f8      	str	r0, [r7, #12]
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	603b      	str	r3, [r7, #0]
 800a962:	460b      	mov	r3, r1
 800a964:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a974:	7af9      	ldrb	r1, [r7, #11]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	f7fa fbd0 	bl	800511e <HAL_PCD_EP_Transmit>
 800a97e:	4603      	mov	r3, r0
 800a980:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	4618      	mov	r0, r3
 800a986:	f000 f83b 	bl	800aa00 <USBD_Get_USB_Status>
 800a98a:	4603      	mov	r3, r0
 800a98c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a98e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	607a      	str	r2, [r7, #4]
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9b6:	7af9      	ldrb	r1, [r7, #11]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	f7fa fb4c 	bl	8005058 <HAL_PCD_EP_Receive>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 f81a 	bl	800aa00 <USBD_Get_USB_Status>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3718      	adds	r7, #24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9ec:	78fa      	ldrb	r2, [r7, #3]
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fa fb7c 	bl	80050ee <HAL_PCD_EP_GetRxCount>
 800a9f6:	4603      	mov	r3, r0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa0e:	79fb      	ldrb	r3, [r7, #7]
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d817      	bhi.n	800aa44 <USBD_Get_USB_Status+0x44>
 800aa14:	a201      	add	r2, pc, #4	; (adr r2, 800aa1c <USBD_Get_USB_Status+0x1c>)
 800aa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1a:	bf00      	nop
 800aa1c:	0800aa2d 	.word	0x0800aa2d
 800aa20:	0800aa33 	.word	0x0800aa33
 800aa24:	0800aa39 	.word	0x0800aa39
 800aa28:	0800aa3f 	.word	0x0800aa3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa30:	e00b      	b.n	800aa4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa32:	2303      	movs	r3, #3
 800aa34:	73fb      	strb	r3, [r7, #15]
    break;
 800aa36:	e008      	b.n	800aa4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa3c:	e005      	b.n	800aa4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	73fb      	strb	r3, [r7, #15]
    break;
 800aa42:	e002      	b.n	800aa4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa44:	2303      	movs	r3, #3
 800aa46:	73fb      	strb	r3, [r7, #15]
    break;
 800aa48:	bf00      	nop
  }
  return usb_status;
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <__errno>:
 800aa58:	4b01      	ldr	r3, [pc, #4]	; (800aa60 <__errno+0x8>)
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	20000188 	.word	0x20000188

0800aa64 <__libc_init_array>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	4e0d      	ldr	r6, [pc, #52]	; (800aa9c <__libc_init_array+0x38>)
 800aa68:	4c0d      	ldr	r4, [pc, #52]	; (800aaa0 <__libc_init_array+0x3c>)
 800aa6a:	1ba4      	subs	r4, r4, r6
 800aa6c:	10a4      	asrs	r4, r4, #2
 800aa6e:	2500      	movs	r5, #0
 800aa70:	42a5      	cmp	r5, r4
 800aa72:	d109      	bne.n	800aa88 <__libc_init_array+0x24>
 800aa74:	4e0b      	ldr	r6, [pc, #44]	; (800aaa4 <__libc_init_array+0x40>)
 800aa76:	4c0c      	ldr	r4, [pc, #48]	; (800aaa8 <__libc_init_array+0x44>)
 800aa78:	f002 f96a 	bl	800cd50 <_init>
 800aa7c:	1ba4      	subs	r4, r4, r6
 800aa7e:	10a4      	asrs	r4, r4, #2
 800aa80:	2500      	movs	r5, #0
 800aa82:	42a5      	cmp	r5, r4
 800aa84:	d105      	bne.n	800aa92 <__libc_init_array+0x2e>
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa8c:	4798      	blx	r3
 800aa8e:	3501      	adds	r5, #1
 800aa90:	e7ee      	b.n	800aa70 <__libc_init_array+0xc>
 800aa92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa96:	4798      	blx	r3
 800aa98:	3501      	adds	r5, #1
 800aa9a:	e7f2      	b.n	800aa82 <__libc_init_array+0x1e>
 800aa9c:	0800d070 	.word	0x0800d070
 800aaa0:	0800d070 	.word	0x0800d070
 800aaa4:	0800d070 	.word	0x0800d070
 800aaa8:	0800d074 	.word	0x0800d074

0800aaac <malloc>:
 800aaac:	4b02      	ldr	r3, [pc, #8]	; (800aab8 <malloc+0xc>)
 800aaae:	4601      	mov	r1, r0
 800aab0:	6818      	ldr	r0, [r3, #0]
 800aab2:	f000 b861 	b.w	800ab78 <_malloc_r>
 800aab6:	bf00      	nop
 800aab8:	20000188 	.word	0x20000188

0800aabc <free>:
 800aabc:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <free+0xc>)
 800aabe:	4601      	mov	r1, r0
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	f000 b80b 	b.w	800aadc <_free_r>
 800aac6:	bf00      	nop
 800aac8:	20000188 	.word	0x20000188

0800aacc <memset>:
 800aacc:	4402      	add	r2, r0
 800aace:	4603      	mov	r3, r0
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d100      	bne.n	800aad6 <memset+0xa>
 800aad4:	4770      	bx	lr
 800aad6:	f803 1b01 	strb.w	r1, [r3], #1
 800aada:	e7f9      	b.n	800aad0 <memset+0x4>

0800aadc <_free_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4605      	mov	r5, r0
 800aae0:	2900      	cmp	r1, #0
 800aae2:	d045      	beq.n	800ab70 <_free_r+0x94>
 800aae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aae8:	1f0c      	subs	r4, r1, #4
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	bfb8      	it	lt
 800aaee:	18e4      	addlt	r4, r4, r3
 800aaf0:	f001 fb87 	bl	800c202 <__malloc_lock>
 800aaf4:	4a1f      	ldr	r2, [pc, #124]	; (800ab74 <_free_r+0x98>)
 800aaf6:	6813      	ldr	r3, [r2, #0]
 800aaf8:	4610      	mov	r0, r2
 800aafa:	b933      	cbnz	r3, 800ab0a <_free_r+0x2e>
 800aafc:	6063      	str	r3, [r4, #4]
 800aafe:	6014      	str	r4, [r2, #0]
 800ab00:	4628      	mov	r0, r5
 800ab02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab06:	f001 bb7d 	b.w	800c204 <__malloc_unlock>
 800ab0a:	42a3      	cmp	r3, r4
 800ab0c:	d90c      	bls.n	800ab28 <_free_r+0x4c>
 800ab0e:	6821      	ldr	r1, [r4, #0]
 800ab10:	1862      	adds	r2, r4, r1
 800ab12:	4293      	cmp	r3, r2
 800ab14:	bf04      	itt	eq
 800ab16:	681a      	ldreq	r2, [r3, #0]
 800ab18:	685b      	ldreq	r3, [r3, #4]
 800ab1a:	6063      	str	r3, [r4, #4]
 800ab1c:	bf04      	itt	eq
 800ab1e:	1852      	addeq	r2, r2, r1
 800ab20:	6022      	streq	r2, [r4, #0]
 800ab22:	6004      	str	r4, [r0, #0]
 800ab24:	e7ec      	b.n	800ab00 <_free_r+0x24>
 800ab26:	4613      	mov	r3, r2
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	b10a      	cbz	r2, 800ab30 <_free_r+0x54>
 800ab2c:	42a2      	cmp	r2, r4
 800ab2e:	d9fa      	bls.n	800ab26 <_free_r+0x4a>
 800ab30:	6819      	ldr	r1, [r3, #0]
 800ab32:	1858      	adds	r0, r3, r1
 800ab34:	42a0      	cmp	r0, r4
 800ab36:	d10b      	bne.n	800ab50 <_free_r+0x74>
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	4401      	add	r1, r0
 800ab3c:	1858      	adds	r0, r3, r1
 800ab3e:	4282      	cmp	r2, r0
 800ab40:	6019      	str	r1, [r3, #0]
 800ab42:	d1dd      	bne.n	800ab00 <_free_r+0x24>
 800ab44:	6810      	ldr	r0, [r2, #0]
 800ab46:	6852      	ldr	r2, [r2, #4]
 800ab48:	605a      	str	r2, [r3, #4]
 800ab4a:	4401      	add	r1, r0
 800ab4c:	6019      	str	r1, [r3, #0]
 800ab4e:	e7d7      	b.n	800ab00 <_free_r+0x24>
 800ab50:	d902      	bls.n	800ab58 <_free_r+0x7c>
 800ab52:	230c      	movs	r3, #12
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	e7d3      	b.n	800ab00 <_free_r+0x24>
 800ab58:	6820      	ldr	r0, [r4, #0]
 800ab5a:	1821      	adds	r1, r4, r0
 800ab5c:	428a      	cmp	r2, r1
 800ab5e:	bf04      	itt	eq
 800ab60:	6811      	ldreq	r1, [r2, #0]
 800ab62:	6852      	ldreq	r2, [r2, #4]
 800ab64:	6062      	str	r2, [r4, #4]
 800ab66:	bf04      	itt	eq
 800ab68:	1809      	addeq	r1, r1, r0
 800ab6a:	6021      	streq	r1, [r4, #0]
 800ab6c:	605c      	str	r4, [r3, #4]
 800ab6e:	e7c7      	b.n	800ab00 <_free_r+0x24>
 800ab70:	bd38      	pop	{r3, r4, r5, pc}
 800ab72:	bf00      	nop
 800ab74:	200003ac 	.word	0x200003ac

0800ab78 <_malloc_r>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	1ccd      	adds	r5, r1, #3
 800ab7c:	f025 0503 	bic.w	r5, r5, #3
 800ab80:	3508      	adds	r5, #8
 800ab82:	2d0c      	cmp	r5, #12
 800ab84:	bf38      	it	cc
 800ab86:	250c      	movcc	r5, #12
 800ab88:	2d00      	cmp	r5, #0
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	db01      	blt.n	800ab92 <_malloc_r+0x1a>
 800ab8e:	42a9      	cmp	r1, r5
 800ab90:	d903      	bls.n	800ab9a <_malloc_r+0x22>
 800ab92:	230c      	movs	r3, #12
 800ab94:	6033      	str	r3, [r6, #0]
 800ab96:	2000      	movs	r0, #0
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	f001 fb32 	bl	800c202 <__malloc_lock>
 800ab9e:	4a21      	ldr	r2, [pc, #132]	; (800ac24 <_malloc_r+0xac>)
 800aba0:	6814      	ldr	r4, [r2, #0]
 800aba2:	4621      	mov	r1, r4
 800aba4:	b991      	cbnz	r1, 800abcc <_malloc_r+0x54>
 800aba6:	4c20      	ldr	r4, [pc, #128]	; (800ac28 <_malloc_r+0xb0>)
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	b91b      	cbnz	r3, 800abb4 <_malloc_r+0x3c>
 800abac:	4630      	mov	r0, r6
 800abae:	f000 fc99 	bl	800b4e4 <_sbrk_r>
 800abb2:	6020      	str	r0, [r4, #0]
 800abb4:	4629      	mov	r1, r5
 800abb6:	4630      	mov	r0, r6
 800abb8:	f000 fc94 	bl	800b4e4 <_sbrk_r>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d124      	bne.n	800ac0a <_malloc_r+0x92>
 800abc0:	230c      	movs	r3, #12
 800abc2:	6033      	str	r3, [r6, #0]
 800abc4:	4630      	mov	r0, r6
 800abc6:	f001 fb1d 	bl	800c204 <__malloc_unlock>
 800abca:	e7e4      	b.n	800ab96 <_malloc_r+0x1e>
 800abcc:	680b      	ldr	r3, [r1, #0]
 800abce:	1b5b      	subs	r3, r3, r5
 800abd0:	d418      	bmi.n	800ac04 <_malloc_r+0x8c>
 800abd2:	2b0b      	cmp	r3, #11
 800abd4:	d90f      	bls.n	800abf6 <_malloc_r+0x7e>
 800abd6:	600b      	str	r3, [r1, #0]
 800abd8:	50cd      	str	r5, [r1, r3]
 800abda:	18cc      	adds	r4, r1, r3
 800abdc:	4630      	mov	r0, r6
 800abde:	f001 fb11 	bl	800c204 <__malloc_unlock>
 800abe2:	f104 000b 	add.w	r0, r4, #11
 800abe6:	1d23      	adds	r3, r4, #4
 800abe8:	f020 0007 	bic.w	r0, r0, #7
 800abec:	1ac3      	subs	r3, r0, r3
 800abee:	d0d3      	beq.n	800ab98 <_malloc_r+0x20>
 800abf0:	425a      	negs	r2, r3
 800abf2:	50e2      	str	r2, [r4, r3]
 800abf4:	e7d0      	b.n	800ab98 <_malloc_r+0x20>
 800abf6:	428c      	cmp	r4, r1
 800abf8:	684b      	ldr	r3, [r1, #4]
 800abfa:	bf16      	itet	ne
 800abfc:	6063      	strne	r3, [r4, #4]
 800abfe:	6013      	streq	r3, [r2, #0]
 800ac00:	460c      	movne	r4, r1
 800ac02:	e7eb      	b.n	800abdc <_malloc_r+0x64>
 800ac04:	460c      	mov	r4, r1
 800ac06:	6849      	ldr	r1, [r1, #4]
 800ac08:	e7cc      	b.n	800aba4 <_malloc_r+0x2c>
 800ac0a:	1cc4      	adds	r4, r0, #3
 800ac0c:	f024 0403 	bic.w	r4, r4, #3
 800ac10:	42a0      	cmp	r0, r4
 800ac12:	d005      	beq.n	800ac20 <_malloc_r+0xa8>
 800ac14:	1a21      	subs	r1, r4, r0
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 fc64 	bl	800b4e4 <_sbrk_r>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d0cf      	beq.n	800abc0 <_malloc_r+0x48>
 800ac20:	6025      	str	r5, [r4, #0]
 800ac22:	e7db      	b.n	800abdc <_malloc_r+0x64>
 800ac24:	200003ac 	.word	0x200003ac
 800ac28:	200003b0 	.word	0x200003b0

0800ac2c <__cvt>:
 800ac2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac30:	ec55 4b10 	vmov	r4, r5, d0
 800ac34:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ac36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	460e      	mov	r6, r1
 800ac3e:	4691      	mov	r9, r2
 800ac40:	4619      	mov	r1, r3
 800ac42:	bfb8      	it	lt
 800ac44:	4622      	movlt	r2, r4
 800ac46:	462b      	mov	r3, r5
 800ac48:	f027 0720 	bic.w	r7, r7, #32
 800ac4c:	bfbb      	ittet	lt
 800ac4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ac52:	461d      	movlt	r5, r3
 800ac54:	2300      	movge	r3, #0
 800ac56:	232d      	movlt	r3, #45	; 0x2d
 800ac58:	bfb8      	it	lt
 800ac5a:	4614      	movlt	r4, r2
 800ac5c:	2f46      	cmp	r7, #70	; 0x46
 800ac5e:	700b      	strb	r3, [r1, #0]
 800ac60:	d004      	beq.n	800ac6c <__cvt+0x40>
 800ac62:	2f45      	cmp	r7, #69	; 0x45
 800ac64:	d100      	bne.n	800ac68 <__cvt+0x3c>
 800ac66:	3601      	adds	r6, #1
 800ac68:	2102      	movs	r1, #2
 800ac6a:	e000      	b.n	800ac6e <__cvt+0x42>
 800ac6c:	2103      	movs	r1, #3
 800ac6e:	ab03      	add	r3, sp, #12
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	ab02      	add	r3, sp, #8
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	4632      	mov	r2, r6
 800ac78:	4653      	mov	r3, sl
 800ac7a:	ec45 4b10 	vmov	d0, r4, r5
 800ac7e:	f000 fcef 	bl	800b660 <_dtoa_r>
 800ac82:	2f47      	cmp	r7, #71	; 0x47
 800ac84:	4680      	mov	r8, r0
 800ac86:	d102      	bne.n	800ac8e <__cvt+0x62>
 800ac88:	f019 0f01 	tst.w	r9, #1
 800ac8c:	d026      	beq.n	800acdc <__cvt+0xb0>
 800ac8e:	2f46      	cmp	r7, #70	; 0x46
 800ac90:	eb08 0906 	add.w	r9, r8, r6
 800ac94:	d111      	bne.n	800acba <__cvt+0x8e>
 800ac96:	f898 3000 	ldrb.w	r3, [r8]
 800ac9a:	2b30      	cmp	r3, #48	; 0x30
 800ac9c:	d10a      	bne.n	800acb4 <__cvt+0x88>
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2300      	movs	r3, #0
 800aca2:	4620      	mov	r0, r4
 800aca4:	4629      	mov	r1, r5
 800aca6:	f7f5 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800acaa:	b918      	cbnz	r0, 800acb4 <__cvt+0x88>
 800acac:	f1c6 0601 	rsb	r6, r6, #1
 800acb0:	f8ca 6000 	str.w	r6, [sl]
 800acb4:	f8da 3000 	ldr.w	r3, [sl]
 800acb8:	4499      	add	r9, r3
 800acba:	2200      	movs	r2, #0
 800acbc:	2300      	movs	r3, #0
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 800acc6:	b938      	cbnz	r0, 800acd8 <__cvt+0xac>
 800acc8:	2230      	movs	r2, #48	; 0x30
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	454b      	cmp	r3, r9
 800acce:	d205      	bcs.n	800acdc <__cvt+0xb0>
 800acd0:	1c59      	adds	r1, r3, #1
 800acd2:	9103      	str	r1, [sp, #12]
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e7f8      	b.n	800acca <__cvt+0x9e>
 800acd8:	f8cd 900c 	str.w	r9, [sp, #12]
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ace0:	eba3 0308 	sub.w	r3, r3, r8
 800ace4:	4640      	mov	r0, r8
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	b004      	add	sp, #16
 800acea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800acee <__exponent>:
 800acee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acf0:	2900      	cmp	r1, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	bfba      	itte	lt
 800acf6:	4249      	neglt	r1, r1
 800acf8:	232d      	movlt	r3, #45	; 0x2d
 800acfa:	232b      	movge	r3, #43	; 0x2b
 800acfc:	2909      	cmp	r1, #9
 800acfe:	f804 2b02 	strb.w	r2, [r4], #2
 800ad02:	7043      	strb	r3, [r0, #1]
 800ad04:	dd20      	ble.n	800ad48 <__exponent+0x5a>
 800ad06:	f10d 0307 	add.w	r3, sp, #7
 800ad0a:	461f      	mov	r7, r3
 800ad0c:	260a      	movs	r6, #10
 800ad0e:	fb91 f5f6 	sdiv	r5, r1, r6
 800ad12:	fb06 1115 	mls	r1, r6, r5, r1
 800ad16:	3130      	adds	r1, #48	; 0x30
 800ad18:	2d09      	cmp	r5, #9
 800ad1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad1e:	f103 32ff 	add.w	r2, r3, #4294967295
 800ad22:	4629      	mov	r1, r5
 800ad24:	dc09      	bgt.n	800ad3a <__exponent+0x4c>
 800ad26:	3130      	adds	r1, #48	; 0x30
 800ad28:	3b02      	subs	r3, #2
 800ad2a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ad2e:	42bb      	cmp	r3, r7
 800ad30:	4622      	mov	r2, r4
 800ad32:	d304      	bcc.n	800ad3e <__exponent+0x50>
 800ad34:	1a10      	subs	r0, r2, r0
 800ad36:	b003      	add	sp, #12
 800ad38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	e7e7      	b.n	800ad0e <__exponent+0x20>
 800ad3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad42:	f804 2b01 	strb.w	r2, [r4], #1
 800ad46:	e7f2      	b.n	800ad2e <__exponent+0x40>
 800ad48:	2330      	movs	r3, #48	; 0x30
 800ad4a:	4419      	add	r1, r3
 800ad4c:	7083      	strb	r3, [r0, #2]
 800ad4e:	1d02      	adds	r2, r0, #4
 800ad50:	70c1      	strb	r1, [r0, #3]
 800ad52:	e7ef      	b.n	800ad34 <__exponent+0x46>

0800ad54 <_printf_float>:
 800ad54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad58:	b08d      	sub	sp, #52	; 0x34
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ad60:	4616      	mov	r6, r2
 800ad62:	461f      	mov	r7, r3
 800ad64:	4605      	mov	r5, r0
 800ad66:	f001 fa33 	bl	800c1d0 <_localeconv_r>
 800ad6a:	6803      	ldr	r3, [r0, #0]
 800ad6c:	9304      	str	r3, [sp, #16]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7f5 fa2e 	bl	80001d0 <strlen>
 800ad74:	2300      	movs	r3, #0
 800ad76:	930a      	str	r3, [sp, #40]	; 0x28
 800ad78:	f8d8 3000 	ldr.w	r3, [r8]
 800ad7c:	9005      	str	r0, [sp, #20]
 800ad7e:	3307      	adds	r3, #7
 800ad80:	f023 0307 	bic.w	r3, r3, #7
 800ad84:	f103 0208 	add.w	r2, r3, #8
 800ad88:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad8c:	f8d4 b000 	ldr.w	fp, [r4]
 800ad90:	f8c8 2000 	str.w	r2, [r8]
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ad9c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ada0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ada4:	9307      	str	r3, [sp, #28]
 800ada6:	f8cd 8018 	str.w	r8, [sp, #24]
 800adaa:	f04f 32ff 	mov.w	r2, #4294967295
 800adae:	4ba7      	ldr	r3, [pc, #668]	; (800b04c <_printf_float+0x2f8>)
 800adb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adb4:	f7f5 feba 	bl	8000b2c <__aeabi_dcmpun>
 800adb8:	bb70      	cbnz	r0, 800ae18 <_printf_float+0xc4>
 800adba:	f04f 32ff 	mov.w	r2, #4294967295
 800adbe:	4ba3      	ldr	r3, [pc, #652]	; (800b04c <_printf_float+0x2f8>)
 800adc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adc4:	f7f5 fe94 	bl	8000af0 <__aeabi_dcmple>
 800adc8:	bb30      	cbnz	r0, 800ae18 <_printf_float+0xc4>
 800adca:	2200      	movs	r2, #0
 800adcc:	2300      	movs	r3, #0
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f7f5 fe83 	bl	8000adc <__aeabi_dcmplt>
 800add6:	b110      	cbz	r0, 800adde <_printf_float+0x8a>
 800add8:	232d      	movs	r3, #45	; 0x2d
 800adda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adde:	4a9c      	ldr	r2, [pc, #624]	; (800b050 <_printf_float+0x2fc>)
 800ade0:	4b9c      	ldr	r3, [pc, #624]	; (800b054 <_printf_float+0x300>)
 800ade2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ade6:	bf8c      	ite	hi
 800ade8:	4690      	movhi	r8, r2
 800adea:	4698      	movls	r8, r3
 800adec:	2303      	movs	r3, #3
 800adee:	f02b 0204 	bic.w	r2, fp, #4
 800adf2:	6123      	str	r3, [r4, #16]
 800adf4:	6022      	str	r2, [r4, #0]
 800adf6:	f04f 0900 	mov.w	r9, #0
 800adfa:	9700      	str	r7, [sp, #0]
 800adfc:	4633      	mov	r3, r6
 800adfe:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae00:	4621      	mov	r1, r4
 800ae02:	4628      	mov	r0, r5
 800ae04:	f000 f9e6 	bl	800b1d4 <_printf_common>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f040 808d 	bne.w	800af28 <_printf_float+0x1d4>
 800ae0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae12:	b00d      	add	sp, #52	; 0x34
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	4649      	mov	r1, r9
 800ae20:	f7f5 fe84 	bl	8000b2c <__aeabi_dcmpun>
 800ae24:	b110      	cbz	r0, 800ae2c <_printf_float+0xd8>
 800ae26:	4a8c      	ldr	r2, [pc, #560]	; (800b058 <_printf_float+0x304>)
 800ae28:	4b8c      	ldr	r3, [pc, #560]	; (800b05c <_printf_float+0x308>)
 800ae2a:	e7da      	b.n	800ade2 <_printf_float+0x8e>
 800ae2c:	6861      	ldr	r1, [r4, #4]
 800ae2e:	1c4b      	adds	r3, r1, #1
 800ae30:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ae34:	a80a      	add	r0, sp, #40	; 0x28
 800ae36:	d13e      	bne.n	800aeb6 <_printf_float+0x162>
 800ae38:	2306      	movs	r3, #6
 800ae3a:	6063      	str	r3, [r4, #4]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ae42:	ab09      	add	r3, sp, #36	; 0x24
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	ec49 8b10 	vmov	d0, r8, r9
 800ae4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ae4e:	6022      	str	r2, [r4, #0]
 800ae50:	f8cd a004 	str.w	sl, [sp, #4]
 800ae54:	6861      	ldr	r1, [r4, #4]
 800ae56:	4628      	mov	r0, r5
 800ae58:	f7ff fee8 	bl	800ac2c <__cvt>
 800ae5c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ae60:	2b47      	cmp	r3, #71	; 0x47
 800ae62:	4680      	mov	r8, r0
 800ae64:	d109      	bne.n	800ae7a <_printf_float+0x126>
 800ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae68:	1cd8      	adds	r0, r3, #3
 800ae6a:	db02      	blt.n	800ae72 <_printf_float+0x11e>
 800ae6c:	6862      	ldr	r2, [r4, #4]
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	dd47      	ble.n	800af02 <_printf_float+0x1ae>
 800ae72:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae76:	fa5f fa8a 	uxtb.w	sl, sl
 800ae7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ae7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae80:	d824      	bhi.n	800aecc <_printf_float+0x178>
 800ae82:	3901      	subs	r1, #1
 800ae84:	4652      	mov	r2, sl
 800ae86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae8a:	9109      	str	r1, [sp, #36]	; 0x24
 800ae8c:	f7ff ff2f 	bl	800acee <__exponent>
 800ae90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae92:	1813      	adds	r3, r2, r0
 800ae94:	2a01      	cmp	r2, #1
 800ae96:	4681      	mov	r9, r0
 800ae98:	6123      	str	r3, [r4, #16]
 800ae9a:	dc02      	bgt.n	800aea2 <_printf_float+0x14e>
 800ae9c:	6822      	ldr	r2, [r4, #0]
 800ae9e:	07d1      	lsls	r1, r2, #31
 800aea0:	d501      	bpl.n	800aea6 <_printf_float+0x152>
 800aea2:	3301      	adds	r3, #1
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0a5      	beq.n	800adfa <_printf_float+0xa6>
 800aeae:	232d      	movs	r3, #45	; 0x2d
 800aeb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeb4:	e7a1      	b.n	800adfa <_printf_float+0xa6>
 800aeb6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800aeba:	f000 8177 	beq.w	800b1ac <_printf_float+0x458>
 800aebe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800aec2:	d1bb      	bne.n	800ae3c <_printf_float+0xe8>
 800aec4:	2900      	cmp	r1, #0
 800aec6:	d1b9      	bne.n	800ae3c <_printf_float+0xe8>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e7b6      	b.n	800ae3a <_printf_float+0xe6>
 800aecc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800aed0:	d119      	bne.n	800af06 <_printf_float+0x1b2>
 800aed2:	2900      	cmp	r1, #0
 800aed4:	6863      	ldr	r3, [r4, #4]
 800aed6:	dd0c      	ble.n	800aef2 <_printf_float+0x19e>
 800aed8:	6121      	str	r1, [r4, #16]
 800aeda:	b913      	cbnz	r3, 800aee2 <_printf_float+0x18e>
 800aedc:	6822      	ldr	r2, [r4, #0]
 800aede:	07d2      	lsls	r2, r2, #31
 800aee0:	d502      	bpl.n	800aee8 <_printf_float+0x194>
 800aee2:	3301      	adds	r3, #1
 800aee4:	440b      	add	r3, r1
 800aee6:	6123      	str	r3, [r4, #16]
 800aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeea:	65a3      	str	r3, [r4, #88]	; 0x58
 800aeec:	f04f 0900 	mov.w	r9, #0
 800aef0:	e7d9      	b.n	800aea6 <_printf_float+0x152>
 800aef2:	b913      	cbnz	r3, 800aefa <_printf_float+0x1a6>
 800aef4:	6822      	ldr	r2, [r4, #0]
 800aef6:	07d0      	lsls	r0, r2, #31
 800aef8:	d501      	bpl.n	800aefe <_printf_float+0x1aa>
 800aefa:	3302      	adds	r3, #2
 800aefc:	e7f3      	b.n	800aee6 <_printf_float+0x192>
 800aefe:	2301      	movs	r3, #1
 800af00:	e7f1      	b.n	800aee6 <_printf_float+0x192>
 800af02:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800af06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af0a:	4293      	cmp	r3, r2
 800af0c:	db05      	blt.n	800af1a <_printf_float+0x1c6>
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	6123      	str	r3, [r4, #16]
 800af12:	07d1      	lsls	r1, r2, #31
 800af14:	d5e8      	bpl.n	800aee8 <_printf_float+0x194>
 800af16:	3301      	adds	r3, #1
 800af18:	e7e5      	b.n	800aee6 <_printf_float+0x192>
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	bfd4      	ite	le
 800af1e:	f1c3 0302 	rsble	r3, r3, #2
 800af22:	2301      	movgt	r3, #1
 800af24:	4413      	add	r3, r2
 800af26:	e7de      	b.n	800aee6 <_printf_float+0x192>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	055a      	lsls	r2, r3, #21
 800af2c:	d407      	bmi.n	800af3e <_printf_float+0x1ea>
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	4642      	mov	r2, r8
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	47b8      	blx	r7
 800af38:	3001      	adds	r0, #1
 800af3a:	d12b      	bne.n	800af94 <_printf_float+0x240>
 800af3c:	e767      	b.n	800ae0e <_printf_float+0xba>
 800af3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800af42:	f240 80dc 	bls.w	800b0fe <_printf_float+0x3aa>
 800af46:	2200      	movs	r2, #0
 800af48:	2300      	movs	r3, #0
 800af4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af4e:	f7f5 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800af52:	2800      	cmp	r0, #0
 800af54:	d033      	beq.n	800afbe <_printf_float+0x26a>
 800af56:	2301      	movs	r3, #1
 800af58:	4a41      	ldr	r2, [pc, #260]	; (800b060 <_printf_float+0x30c>)
 800af5a:	4631      	mov	r1, r6
 800af5c:	4628      	mov	r0, r5
 800af5e:	47b8      	blx	r7
 800af60:	3001      	adds	r0, #1
 800af62:	f43f af54 	beq.w	800ae0e <_printf_float+0xba>
 800af66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af6a:	429a      	cmp	r2, r3
 800af6c:	db02      	blt.n	800af74 <_printf_float+0x220>
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	07d8      	lsls	r0, r3, #31
 800af72:	d50f      	bpl.n	800af94 <_printf_float+0x240>
 800af74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	f43f af45 	beq.w	800ae0e <_printf_float+0xba>
 800af84:	f04f 0800 	mov.w	r8, #0
 800af88:	f104 091a 	add.w	r9, r4, #26
 800af8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af8e:	3b01      	subs	r3, #1
 800af90:	4543      	cmp	r3, r8
 800af92:	dc09      	bgt.n	800afa8 <_printf_float+0x254>
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	079b      	lsls	r3, r3, #30
 800af98:	f100 8103 	bmi.w	800b1a2 <_printf_float+0x44e>
 800af9c:	68e0      	ldr	r0, [r4, #12]
 800af9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afa0:	4298      	cmp	r0, r3
 800afa2:	bfb8      	it	lt
 800afa4:	4618      	movlt	r0, r3
 800afa6:	e734      	b.n	800ae12 <_printf_float+0xbe>
 800afa8:	2301      	movs	r3, #1
 800afaa:	464a      	mov	r2, r9
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	f43f af2b 	beq.w	800ae0e <_printf_float+0xba>
 800afb8:	f108 0801 	add.w	r8, r8, #1
 800afbc:	e7e6      	b.n	800af8c <_printf_float+0x238>
 800afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	dc2b      	bgt.n	800b01c <_printf_float+0x2c8>
 800afc4:	2301      	movs	r3, #1
 800afc6:	4a26      	ldr	r2, [pc, #152]	; (800b060 <_printf_float+0x30c>)
 800afc8:	4631      	mov	r1, r6
 800afca:	4628      	mov	r0, r5
 800afcc:	47b8      	blx	r7
 800afce:	3001      	adds	r0, #1
 800afd0:	f43f af1d 	beq.w	800ae0e <_printf_float+0xba>
 800afd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd6:	b923      	cbnz	r3, 800afe2 <_printf_float+0x28e>
 800afd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afda:	b913      	cbnz	r3, 800afe2 <_printf_float+0x28e>
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	07d9      	lsls	r1, r3, #31
 800afe0:	d5d8      	bpl.n	800af94 <_printf_float+0x240>
 800afe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	f43f af0e 	beq.w	800ae0e <_printf_float+0xba>
 800aff2:	f04f 0900 	mov.w	r9, #0
 800aff6:	f104 0a1a 	add.w	sl, r4, #26
 800affa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affc:	425b      	negs	r3, r3
 800affe:	454b      	cmp	r3, r9
 800b000:	dc01      	bgt.n	800b006 <_printf_float+0x2b2>
 800b002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b004:	e794      	b.n	800af30 <_printf_float+0x1dc>
 800b006:	2301      	movs	r3, #1
 800b008:	4652      	mov	r2, sl
 800b00a:	4631      	mov	r1, r6
 800b00c:	4628      	mov	r0, r5
 800b00e:	47b8      	blx	r7
 800b010:	3001      	adds	r0, #1
 800b012:	f43f aefc 	beq.w	800ae0e <_printf_float+0xba>
 800b016:	f109 0901 	add.w	r9, r9, #1
 800b01a:	e7ee      	b.n	800affa <_printf_float+0x2a6>
 800b01c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b01e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b020:	429a      	cmp	r2, r3
 800b022:	bfa8      	it	ge
 800b024:	461a      	movge	r2, r3
 800b026:	2a00      	cmp	r2, #0
 800b028:	4691      	mov	r9, r2
 800b02a:	dd07      	ble.n	800b03c <_printf_float+0x2e8>
 800b02c:	4613      	mov	r3, r2
 800b02e:	4631      	mov	r1, r6
 800b030:	4642      	mov	r2, r8
 800b032:	4628      	mov	r0, r5
 800b034:	47b8      	blx	r7
 800b036:	3001      	adds	r0, #1
 800b038:	f43f aee9 	beq.w	800ae0e <_printf_float+0xba>
 800b03c:	f104 031a 	add.w	r3, r4, #26
 800b040:	f04f 0b00 	mov.w	fp, #0
 800b044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b048:	9306      	str	r3, [sp, #24]
 800b04a:	e015      	b.n	800b078 <_printf_float+0x324>
 800b04c:	7fefffff 	.word	0x7fefffff
 800b050:	0800ce10 	.word	0x0800ce10
 800b054:	0800ce0c 	.word	0x0800ce0c
 800b058:	0800ce18 	.word	0x0800ce18
 800b05c:	0800ce14 	.word	0x0800ce14
 800b060:	0800ce1c 	.word	0x0800ce1c
 800b064:	2301      	movs	r3, #1
 800b066:	9a06      	ldr	r2, [sp, #24]
 800b068:	4631      	mov	r1, r6
 800b06a:	4628      	mov	r0, r5
 800b06c:	47b8      	blx	r7
 800b06e:	3001      	adds	r0, #1
 800b070:	f43f aecd 	beq.w	800ae0e <_printf_float+0xba>
 800b074:	f10b 0b01 	add.w	fp, fp, #1
 800b078:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b07c:	ebaa 0309 	sub.w	r3, sl, r9
 800b080:	455b      	cmp	r3, fp
 800b082:	dcef      	bgt.n	800b064 <_printf_float+0x310>
 800b084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b088:	429a      	cmp	r2, r3
 800b08a:	44d0      	add	r8, sl
 800b08c:	db15      	blt.n	800b0ba <_printf_float+0x366>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	07da      	lsls	r2, r3, #31
 800b092:	d412      	bmi.n	800b0ba <_printf_float+0x366>
 800b094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b096:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b098:	eba3 020a 	sub.w	r2, r3, sl
 800b09c:	eba3 0a01 	sub.w	sl, r3, r1
 800b0a0:	4592      	cmp	sl, r2
 800b0a2:	bfa8      	it	ge
 800b0a4:	4692      	movge	sl, r2
 800b0a6:	f1ba 0f00 	cmp.w	sl, #0
 800b0aa:	dc0e      	bgt.n	800b0ca <_printf_float+0x376>
 800b0ac:	f04f 0800 	mov.w	r8, #0
 800b0b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0b4:	f104 091a 	add.w	r9, r4, #26
 800b0b8:	e019      	b.n	800b0ee <_printf_float+0x39a>
 800b0ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0be:	4631      	mov	r1, r6
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	47b8      	blx	r7
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	d1e5      	bne.n	800b094 <_printf_float+0x340>
 800b0c8:	e6a1      	b.n	800ae0e <_printf_float+0xba>
 800b0ca:	4653      	mov	r3, sl
 800b0cc:	4642      	mov	r2, r8
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	47b8      	blx	r7
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d1e9      	bne.n	800b0ac <_printf_float+0x358>
 800b0d8:	e699      	b.n	800ae0e <_printf_float+0xba>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	464a      	mov	r2, r9
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b8      	blx	r7
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	f43f ae92 	beq.w	800ae0e <_printf_float+0xba>
 800b0ea:	f108 0801 	add.w	r8, r8, #1
 800b0ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	eba3 030a 	sub.w	r3, r3, sl
 800b0f8:	4543      	cmp	r3, r8
 800b0fa:	dcee      	bgt.n	800b0da <_printf_float+0x386>
 800b0fc:	e74a      	b.n	800af94 <_printf_float+0x240>
 800b0fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b100:	2a01      	cmp	r2, #1
 800b102:	dc01      	bgt.n	800b108 <_printf_float+0x3b4>
 800b104:	07db      	lsls	r3, r3, #31
 800b106:	d53a      	bpl.n	800b17e <_printf_float+0x42a>
 800b108:	2301      	movs	r3, #1
 800b10a:	4642      	mov	r2, r8
 800b10c:	4631      	mov	r1, r6
 800b10e:	4628      	mov	r0, r5
 800b110:	47b8      	blx	r7
 800b112:	3001      	adds	r0, #1
 800b114:	f43f ae7b 	beq.w	800ae0e <_printf_float+0xba>
 800b118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b11c:	4631      	mov	r1, r6
 800b11e:	4628      	mov	r0, r5
 800b120:	47b8      	blx	r7
 800b122:	3001      	adds	r0, #1
 800b124:	f108 0801 	add.w	r8, r8, #1
 800b128:	f43f ae71 	beq.w	800ae0e <_printf_float+0xba>
 800b12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b12e:	2200      	movs	r2, #0
 800b130:	f103 3aff 	add.w	sl, r3, #4294967295
 800b134:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b138:	2300      	movs	r3, #0
 800b13a:	f7f5 fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b13e:	b9c8      	cbnz	r0, 800b174 <_printf_float+0x420>
 800b140:	4653      	mov	r3, sl
 800b142:	4642      	mov	r2, r8
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	d10e      	bne.n	800b16c <_printf_float+0x418>
 800b14e:	e65e      	b.n	800ae0e <_printf_float+0xba>
 800b150:	2301      	movs	r3, #1
 800b152:	4652      	mov	r2, sl
 800b154:	4631      	mov	r1, r6
 800b156:	4628      	mov	r0, r5
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	f43f ae57 	beq.w	800ae0e <_printf_float+0xba>
 800b160:	f108 0801 	add.w	r8, r8, #1
 800b164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b166:	3b01      	subs	r3, #1
 800b168:	4543      	cmp	r3, r8
 800b16a:	dcf1      	bgt.n	800b150 <_printf_float+0x3fc>
 800b16c:	464b      	mov	r3, r9
 800b16e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b172:	e6de      	b.n	800af32 <_printf_float+0x1de>
 800b174:	f04f 0800 	mov.w	r8, #0
 800b178:	f104 0a1a 	add.w	sl, r4, #26
 800b17c:	e7f2      	b.n	800b164 <_printf_float+0x410>
 800b17e:	2301      	movs	r3, #1
 800b180:	e7df      	b.n	800b142 <_printf_float+0x3ee>
 800b182:	2301      	movs	r3, #1
 800b184:	464a      	mov	r2, r9
 800b186:	4631      	mov	r1, r6
 800b188:	4628      	mov	r0, r5
 800b18a:	47b8      	blx	r7
 800b18c:	3001      	adds	r0, #1
 800b18e:	f43f ae3e 	beq.w	800ae0e <_printf_float+0xba>
 800b192:	f108 0801 	add.w	r8, r8, #1
 800b196:	68e3      	ldr	r3, [r4, #12]
 800b198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b19a:	1a9b      	subs	r3, r3, r2
 800b19c:	4543      	cmp	r3, r8
 800b19e:	dcf0      	bgt.n	800b182 <_printf_float+0x42e>
 800b1a0:	e6fc      	b.n	800af9c <_printf_float+0x248>
 800b1a2:	f04f 0800 	mov.w	r8, #0
 800b1a6:	f104 0919 	add.w	r9, r4, #25
 800b1aa:	e7f4      	b.n	800b196 <_printf_float+0x442>
 800b1ac:	2900      	cmp	r1, #0
 800b1ae:	f43f ae8b 	beq.w	800aec8 <_printf_float+0x174>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b1b8:	ab09      	add	r3, sp, #36	; 0x24
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	ec49 8b10 	vmov	d0, r8, r9
 800b1c0:	6022      	str	r2, [r4, #0]
 800b1c2:	f8cd a004 	str.w	sl, [sp, #4]
 800b1c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f7ff fd2e 	bl	800ac2c <__cvt>
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	e648      	b.n	800ae66 <_printf_float+0x112>

0800b1d4 <_printf_common>:
 800b1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	4691      	mov	r9, r2
 800b1da:	461f      	mov	r7, r3
 800b1dc:	688a      	ldr	r2, [r1, #8]
 800b1de:	690b      	ldr	r3, [r1, #16]
 800b1e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	bfb8      	it	lt
 800b1e8:	4613      	movlt	r3, r2
 800b1ea:	f8c9 3000 	str.w	r3, [r9]
 800b1ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	b112      	cbz	r2, 800b1fe <_printf_common+0x2a>
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	f8c9 3000 	str.w	r3, [r9]
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	0699      	lsls	r1, r3, #26
 800b202:	bf42      	ittt	mi
 800b204:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b208:	3302      	addmi	r3, #2
 800b20a:	f8c9 3000 	strmi.w	r3, [r9]
 800b20e:	6825      	ldr	r5, [r4, #0]
 800b210:	f015 0506 	ands.w	r5, r5, #6
 800b214:	d107      	bne.n	800b226 <_printf_common+0x52>
 800b216:	f104 0a19 	add.w	sl, r4, #25
 800b21a:	68e3      	ldr	r3, [r4, #12]
 800b21c:	f8d9 2000 	ldr.w	r2, [r9]
 800b220:	1a9b      	subs	r3, r3, r2
 800b222:	42ab      	cmp	r3, r5
 800b224:	dc28      	bgt.n	800b278 <_printf_common+0xa4>
 800b226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b22a:	6822      	ldr	r2, [r4, #0]
 800b22c:	3300      	adds	r3, #0
 800b22e:	bf18      	it	ne
 800b230:	2301      	movne	r3, #1
 800b232:	0692      	lsls	r2, r2, #26
 800b234:	d42d      	bmi.n	800b292 <_printf_common+0xbe>
 800b236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b23a:	4639      	mov	r1, r7
 800b23c:	4630      	mov	r0, r6
 800b23e:	47c0      	blx	r8
 800b240:	3001      	adds	r0, #1
 800b242:	d020      	beq.n	800b286 <_printf_common+0xb2>
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	68e5      	ldr	r5, [r4, #12]
 800b248:	f8d9 2000 	ldr.w	r2, [r9]
 800b24c:	f003 0306 	and.w	r3, r3, #6
 800b250:	2b04      	cmp	r3, #4
 800b252:	bf08      	it	eq
 800b254:	1aad      	subeq	r5, r5, r2
 800b256:	68a3      	ldr	r3, [r4, #8]
 800b258:	6922      	ldr	r2, [r4, #16]
 800b25a:	bf0c      	ite	eq
 800b25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b260:	2500      	movne	r5, #0
 800b262:	4293      	cmp	r3, r2
 800b264:	bfc4      	itt	gt
 800b266:	1a9b      	subgt	r3, r3, r2
 800b268:	18ed      	addgt	r5, r5, r3
 800b26a:	f04f 0900 	mov.w	r9, #0
 800b26e:	341a      	adds	r4, #26
 800b270:	454d      	cmp	r5, r9
 800b272:	d11a      	bne.n	800b2aa <_printf_common+0xd6>
 800b274:	2000      	movs	r0, #0
 800b276:	e008      	b.n	800b28a <_printf_common+0xb6>
 800b278:	2301      	movs	r3, #1
 800b27a:	4652      	mov	r2, sl
 800b27c:	4639      	mov	r1, r7
 800b27e:	4630      	mov	r0, r6
 800b280:	47c0      	blx	r8
 800b282:	3001      	adds	r0, #1
 800b284:	d103      	bne.n	800b28e <_printf_common+0xba>
 800b286:	f04f 30ff 	mov.w	r0, #4294967295
 800b28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28e:	3501      	adds	r5, #1
 800b290:	e7c3      	b.n	800b21a <_printf_common+0x46>
 800b292:	18e1      	adds	r1, r4, r3
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	2030      	movs	r0, #48	; 0x30
 800b298:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b29c:	4422      	add	r2, r4
 800b29e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2a6:	3302      	adds	r3, #2
 800b2a8:	e7c5      	b.n	800b236 <_printf_common+0x62>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	4639      	mov	r1, r7
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	47c0      	blx	r8
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d0e6      	beq.n	800b286 <_printf_common+0xb2>
 800b2b8:	f109 0901 	add.w	r9, r9, #1
 800b2bc:	e7d8      	b.n	800b270 <_printf_common+0x9c>
	...

0800b2c0 <_printf_i>:
 800b2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	7e09      	ldrb	r1, [r1, #24]
 800b2cc:	b085      	sub	sp, #20
 800b2ce:	296e      	cmp	r1, #110	; 0x6e
 800b2d0:	4617      	mov	r7, r2
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	4698      	mov	r8, r3
 800b2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2d8:	f000 80b3 	beq.w	800b442 <_printf_i+0x182>
 800b2dc:	d822      	bhi.n	800b324 <_printf_i+0x64>
 800b2de:	2963      	cmp	r1, #99	; 0x63
 800b2e0:	d036      	beq.n	800b350 <_printf_i+0x90>
 800b2e2:	d80a      	bhi.n	800b2fa <_printf_i+0x3a>
 800b2e4:	2900      	cmp	r1, #0
 800b2e6:	f000 80b9 	beq.w	800b45c <_printf_i+0x19c>
 800b2ea:	2958      	cmp	r1, #88	; 0x58
 800b2ec:	f000 8083 	beq.w	800b3f6 <_printf_i+0x136>
 800b2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b2f8:	e032      	b.n	800b360 <_printf_i+0xa0>
 800b2fa:	2964      	cmp	r1, #100	; 0x64
 800b2fc:	d001      	beq.n	800b302 <_printf_i+0x42>
 800b2fe:	2969      	cmp	r1, #105	; 0x69
 800b300:	d1f6      	bne.n	800b2f0 <_printf_i+0x30>
 800b302:	6820      	ldr	r0, [r4, #0]
 800b304:	6813      	ldr	r3, [r2, #0]
 800b306:	0605      	lsls	r5, r0, #24
 800b308:	f103 0104 	add.w	r1, r3, #4
 800b30c:	d52a      	bpl.n	800b364 <_printf_i+0xa4>
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6011      	str	r1, [r2, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	da03      	bge.n	800b31e <_printf_i+0x5e>
 800b316:	222d      	movs	r2, #45	; 0x2d
 800b318:	425b      	negs	r3, r3
 800b31a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b31e:	486f      	ldr	r0, [pc, #444]	; (800b4dc <_printf_i+0x21c>)
 800b320:	220a      	movs	r2, #10
 800b322:	e039      	b.n	800b398 <_printf_i+0xd8>
 800b324:	2973      	cmp	r1, #115	; 0x73
 800b326:	f000 809d 	beq.w	800b464 <_printf_i+0x1a4>
 800b32a:	d808      	bhi.n	800b33e <_printf_i+0x7e>
 800b32c:	296f      	cmp	r1, #111	; 0x6f
 800b32e:	d020      	beq.n	800b372 <_printf_i+0xb2>
 800b330:	2970      	cmp	r1, #112	; 0x70
 800b332:	d1dd      	bne.n	800b2f0 <_printf_i+0x30>
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	f043 0320 	orr.w	r3, r3, #32
 800b33a:	6023      	str	r3, [r4, #0]
 800b33c:	e003      	b.n	800b346 <_printf_i+0x86>
 800b33e:	2975      	cmp	r1, #117	; 0x75
 800b340:	d017      	beq.n	800b372 <_printf_i+0xb2>
 800b342:	2978      	cmp	r1, #120	; 0x78
 800b344:	d1d4      	bne.n	800b2f0 <_printf_i+0x30>
 800b346:	2378      	movs	r3, #120	; 0x78
 800b348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b34c:	4864      	ldr	r0, [pc, #400]	; (800b4e0 <_printf_i+0x220>)
 800b34e:	e055      	b.n	800b3fc <_printf_i+0x13c>
 800b350:	6813      	ldr	r3, [r2, #0]
 800b352:	1d19      	adds	r1, r3, #4
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6011      	str	r1, [r2, #0]
 800b358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b35c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b360:	2301      	movs	r3, #1
 800b362:	e08c      	b.n	800b47e <_printf_i+0x1be>
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6011      	str	r1, [r2, #0]
 800b368:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b36c:	bf18      	it	ne
 800b36e:	b21b      	sxthne	r3, r3
 800b370:	e7cf      	b.n	800b312 <_printf_i+0x52>
 800b372:	6813      	ldr	r3, [r2, #0]
 800b374:	6825      	ldr	r5, [r4, #0]
 800b376:	1d18      	adds	r0, r3, #4
 800b378:	6010      	str	r0, [r2, #0]
 800b37a:	0628      	lsls	r0, r5, #24
 800b37c:	d501      	bpl.n	800b382 <_printf_i+0xc2>
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	e002      	b.n	800b388 <_printf_i+0xc8>
 800b382:	0668      	lsls	r0, r5, #25
 800b384:	d5fb      	bpl.n	800b37e <_printf_i+0xbe>
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	4854      	ldr	r0, [pc, #336]	; (800b4dc <_printf_i+0x21c>)
 800b38a:	296f      	cmp	r1, #111	; 0x6f
 800b38c:	bf14      	ite	ne
 800b38e:	220a      	movne	r2, #10
 800b390:	2208      	moveq	r2, #8
 800b392:	2100      	movs	r1, #0
 800b394:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b398:	6865      	ldr	r5, [r4, #4]
 800b39a:	60a5      	str	r5, [r4, #8]
 800b39c:	2d00      	cmp	r5, #0
 800b39e:	f2c0 8095 	blt.w	800b4cc <_printf_i+0x20c>
 800b3a2:	6821      	ldr	r1, [r4, #0]
 800b3a4:	f021 0104 	bic.w	r1, r1, #4
 800b3a8:	6021      	str	r1, [r4, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d13d      	bne.n	800b42a <_printf_i+0x16a>
 800b3ae:	2d00      	cmp	r5, #0
 800b3b0:	f040 808e 	bne.w	800b4d0 <_printf_i+0x210>
 800b3b4:	4665      	mov	r5, ip
 800b3b6:	2a08      	cmp	r2, #8
 800b3b8:	d10b      	bne.n	800b3d2 <_printf_i+0x112>
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	07db      	lsls	r3, r3, #31
 800b3be:	d508      	bpl.n	800b3d2 <_printf_i+0x112>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	6862      	ldr	r2, [r4, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	bfde      	ittt	le
 800b3c8:	2330      	movle	r3, #48	; 0x30
 800b3ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3d2:	ebac 0305 	sub.w	r3, ip, r5
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	f8cd 8000 	str.w	r8, [sp]
 800b3dc:	463b      	mov	r3, r7
 800b3de:	aa03      	add	r2, sp, #12
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7ff fef6 	bl	800b1d4 <_printf_common>
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	d14d      	bne.n	800b488 <_printf_i+0x1c8>
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f0:	b005      	add	sp, #20
 800b3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3f6:	4839      	ldr	r0, [pc, #228]	; (800b4dc <_printf_i+0x21c>)
 800b3f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b3fc:	6813      	ldr	r3, [r2, #0]
 800b3fe:	6821      	ldr	r1, [r4, #0]
 800b400:	1d1d      	adds	r5, r3, #4
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6015      	str	r5, [r2, #0]
 800b406:	060a      	lsls	r2, r1, #24
 800b408:	d50b      	bpl.n	800b422 <_printf_i+0x162>
 800b40a:	07ca      	lsls	r2, r1, #31
 800b40c:	bf44      	itt	mi
 800b40e:	f041 0120 	orrmi.w	r1, r1, #32
 800b412:	6021      	strmi	r1, [r4, #0]
 800b414:	b91b      	cbnz	r3, 800b41e <_printf_i+0x15e>
 800b416:	6822      	ldr	r2, [r4, #0]
 800b418:	f022 0220 	bic.w	r2, r2, #32
 800b41c:	6022      	str	r2, [r4, #0]
 800b41e:	2210      	movs	r2, #16
 800b420:	e7b7      	b.n	800b392 <_printf_i+0xd2>
 800b422:	064d      	lsls	r5, r1, #25
 800b424:	bf48      	it	mi
 800b426:	b29b      	uxthmi	r3, r3
 800b428:	e7ef      	b.n	800b40a <_printf_i+0x14a>
 800b42a:	4665      	mov	r5, ip
 800b42c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b430:	fb02 3311 	mls	r3, r2, r1, r3
 800b434:	5cc3      	ldrb	r3, [r0, r3]
 800b436:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b43a:	460b      	mov	r3, r1
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d1f5      	bne.n	800b42c <_printf_i+0x16c>
 800b440:	e7b9      	b.n	800b3b6 <_printf_i+0xf6>
 800b442:	6813      	ldr	r3, [r2, #0]
 800b444:	6825      	ldr	r5, [r4, #0]
 800b446:	6961      	ldr	r1, [r4, #20]
 800b448:	1d18      	adds	r0, r3, #4
 800b44a:	6010      	str	r0, [r2, #0]
 800b44c:	0628      	lsls	r0, r5, #24
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	d501      	bpl.n	800b456 <_printf_i+0x196>
 800b452:	6019      	str	r1, [r3, #0]
 800b454:	e002      	b.n	800b45c <_printf_i+0x19c>
 800b456:	066a      	lsls	r2, r5, #25
 800b458:	d5fb      	bpl.n	800b452 <_printf_i+0x192>
 800b45a:	8019      	strh	r1, [r3, #0]
 800b45c:	2300      	movs	r3, #0
 800b45e:	6123      	str	r3, [r4, #16]
 800b460:	4665      	mov	r5, ip
 800b462:	e7b9      	b.n	800b3d8 <_printf_i+0x118>
 800b464:	6813      	ldr	r3, [r2, #0]
 800b466:	1d19      	adds	r1, r3, #4
 800b468:	6011      	str	r1, [r2, #0]
 800b46a:	681d      	ldr	r5, [r3, #0]
 800b46c:	6862      	ldr	r2, [r4, #4]
 800b46e:	2100      	movs	r1, #0
 800b470:	4628      	mov	r0, r5
 800b472:	f7f4 feb5 	bl	80001e0 <memchr>
 800b476:	b108      	cbz	r0, 800b47c <_printf_i+0x1bc>
 800b478:	1b40      	subs	r0, r0, r5
 800b47a:	6060      	str	r0, [r4, #4]
 800b47c:	6863      	ldr	r3, [r4, #4]
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	2300      	movs	r3, #0
 800b482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b486:	e7a7      	b.n	800b3d8 <_printf_i+0x118>
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	462a      	mov	r2, r5
 800b48c:	4639      	mov	r1, r7
 800b48e:	4630      	mov	r0, r6
 800b490:	47c0      	blx	r8
 800b492:	3001      	adds	r0, #1
 800b494:	d0aa      	beq.n	800b3ec <_printf_i+0x12c>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	079b      	lsls	r3, r3, #30
 800b49a:	d413      	bmi.n	800b4c4 <_printf_i+0x204>
 800b49c:	68e0      	ldr	r0, [r4, #12]
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	4298      	cmp	r0, r3
 800b4a2:	bfb8      	it	lt
 800b4a4:	4618      	movlt	r0, r3
 800b4a6:	e7a3      	b.n	800b3f0 <_printf_i+0x130>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	464a      	mov	r2, r9
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	47c0      	blx	r8
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	d09a      	beq.n	800b3ec <_printf_i+0x12c>
 800b4b6:	3501      	adds	r5, #1
 800b4b8:	68e3      	ldr	r3, [r4, #12]
 800b4ba:	9a03      	ldr	r2, [sp, #12]
 800b4bc:	1a9b      	subs	r3, r3, r2
 800b4be:	42ab      	cmp	r3, r5
 800b4c0:	dcf2      	bgt.n	800b4a8 <_printf_i+0x1e8>
 800b4c2:	e7eb      	b.n	800b49c <_printf_i+0x1dc>
 800b4c4:	2500      	movs	r5, #0
 800b4c6:	f104 0919 	add.w	r9, r4, #25
 800b4ca:	e7f5      	b.n	800b4b8 <_printf_i+0x1f8>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1ac      	bne.n	800b42a <_printf_i+0x16a>
 800b4d0:	7803      	ldrb	r3, [r0, #0]
 800b4d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4da:	e76c      	b.n	800b3b6 <_printf_i+0xf6>
 800b4dc:	0800ce1e 	.word	0x0800ce1e
 800b4e0:	0800ce2f 	.word	0x0800ce2f

0800b4e4 <_sbrk_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4c06      	ldr	r4, [pc, #24]	; (800b500 <_sbrk_r+0x1c>)
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	6023      	str	r3, [r4, #0]
 800b4f0:	f7f7 fc3e 	bl	8002d70 <_sbrk>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_sbrk_r+0x1a>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_sbrk_r+0x1a>
 800b4fc:	602b      	str	r3, [r5, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	20001f84 	.word	0x20001f84

0800b504 <siprintf>:
 800b504:	b40e      	push	{r1, r2, r3}
 800b506:	b500      	push	{lr}
 800b508:	b09c      	sub	sp, #112	; 0x70
 800b50a:	ab1d      	add	r3, sp, #116	; 0x74
 800b50c:	9002      	str	r0, [sp, #8]
 800b50e:	9006      	str	r0, [sp, #24]
 800b510:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b514:	4809      	ldr	r0, [pc, #36]	; (800b53c <siprintf+0x38>)
 800b516:	9107      	str	r1, [sp, #28]
 800b518:	9104      	str	r1, [sp, #16]
 800b51a:	4909      	ldr	r1, [pc, #36]	; (800b540 <siprintf+0x3c>)
 800b51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b520:	9105      	str	r1, [sp, #20]
 800b522:	6800      	ldr	r0, [r0, #0]
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	a902      	add	r1, sp, #8
 800b528:	f001 f9b0 	bl	800c88c <_svfiprintf_r>
 800b52c:	9b02      	ldr	r3, [sp, #8]
 800b52e:	2200      	movs	r2, #0
 800b530:	701a      	strb	r2, [r3, #0]
 800b532:	b01c      	add	sp, #112	; 0x70
 800b534:	f85d eb04 	ldr.w	lr, [sp], #4
 800b538:	b003      	add	sp, #12
 800b53a:	4770      	bx	lr
 800b53c:	20000188 	.word	0x20000188
 800b540:	ffff0208 	.word	0xffff0208

0800b544 <quorem>:
 800b544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	6903      	ldr	r3, [r0, #16]
 800b54a:	690c      	ldr	r4, [r1, #16]
 800b54c:	42a3      	cmp	r3, r4
 800b54e:	4680      	mov	r8, r0
 800b550:	f2c0 8082 	blt.w	800b658 <quorem+0x114>
 800b554:	3c01      	subs	r4, #1
 800b556:	f101 0714 	add.w	r7, r1, #20
 800b55a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b55e:	f100 0614 	add.w	r6, r0, #20
 800b562:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b566:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b56a:	eb06 030c 	add.w	r3, r6, ip
 800b56e:	3501      	adds	r5, #1
 800b570:	eb07 090c 	add.w	r9, r7, ip
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	fbb0 f5f5 	udiv	r5, r0, r5
 800b57a:	b395      	cbz	r5, 800b5e2 <quorem+0x9e>
 800b57c:	f04f 0a00 	mov.w	sl, #0
 800b580:	4638      	mov	r0, r7
 800b582:	46b6      	mov	lr, r6
 800b584:	46d3      	mov	fp, sl
 800b586:	f850 2b04 	ldr.w	r2, [r0], #4
 800b58a:	b293      	uxth	r3, r2
 800b58c:	fb05 a303 	mla	r3, r5, r3, sl
 800b590:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b594:	b29b      	uxth	r3, r3
 800b596:	ebab 0303 	sub.w	r3, fp, r3
 800b59a:	0c12      	lsrs	r2, r2, #16
 800b59c:	f8de b000 	ldr.w	fp, [lr]
 800b5a0:	fb05 a202 	mla	r2, r5, r2, sl
 800b5a4:	fa13 f38b 	uxtah	r3, r3, fp
 800b5a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b5ac:	fa1f fb82 	uxth.w	fp, r2
 800b5b0:	f8de 2000 	ldr.w	r2, [lr]
 800b5b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b5b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5c2:	4581      	cmp	r9, r0
 800b5c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b5c8:	f84e 3b04 	str.w	r3, [lr], #4
 800b5cc:	d2db      	bcs.n	800b586 <quorem+0x42>
 800b5ce:	f856 300c 	ldr.w	r3, [r6, ip]
 800b5d2:	b933      	cbnz	r3, 800b5e2 <quorem+0x9e>
 800b5d4:	9b01      	ldr	r3, [sp, #4]
 800b5d6:	3b04      	subs	r3, #4
 800b5d8:	429e      	cmp	r6, r3
 800b5da:	461a      	mov	r2, r3
 800b5dc:	d330      	bcc.n	800b640 <quorem+0xfc>
 800b5de:	f8c8 4010 	str.w	r4, [r8, #16]
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	f001 f824 	bl	800c630 <__mcmp>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	db25      	blt.n	800b638 <quorem+0xf4>
 800b5ec:	3501      	adds	r5, #1
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f04f 0c00 	mov.w	ip, #0
 800b5f4:	f857 2b04 	ldr.w	r2, [r7], #4
 800b5f8:	f8d0 e000 	ldr.w	lr, [r0]
 800b5fc:	b293      	uxth	r3, r2
 800b5fe:	ebac 0303 	sub.w	r3, ip, r3
 800b602:	0c12      	lsrs	r2, r2, #16
 800b604:	fa13 f38e 	uxtah	r3, r3, lr
 800b608:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b60c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b610:	b29b      	uxth	r3, r3
 800b612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b616:	45b9      	cmp	r9, r7
 800b618:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b61c:	f840 3b04 	str.w	r3, [r0], #4
 800b620:	d2e8      	bcs.n	800b5f4 <quorem+0xb0>
 800b622:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b626:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b62a:	b92a      	cbnz	r2, 800b638 <quorem+0xf4>
 800b62c:	3b04      	subs	r3, #4
 800b62e:	429e      	cmp	r6, r3
 800b630:	461a      	mov	r2, r3
 800b632:	d30b      	bcc.n	800b64c <quorem+0x108>
 800b634:	f8c8 4010 	str.w	r4, [r8, #16]
 800b638:	4628      	mov	r0, r5
 800b63a:	b003      	add	sp, #12
 800b63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b640:	6812      	ldr	r2, [r2, #0]
 800b642:	3b04      	subs	r3, #4
 800b644:	2a00      	cmp	r2, #0
 800b646:	d1ca      	bne.n	800b5de <quorem+0x9a>
 800b648:	3c01      	subs	r4, #1
 800b64a:	e7c5      	b.n	800b5d8 <quorem+0x94>
 800b64c:	6812      	ldr	r2, [r2, #0]
 800b64e:	3b04      	subs	r3, #4
 800b650:	2a00      	cmp	r2, #0
 800b652:	d1ef      	bne.n	800b634 <quorem+0xf0>
 800b654:	3c01      	subs	r4, #1
 800b656:	e7ea      	b.n	800b62e <quorem+0xea>
 800b658:	2000      	movs	r0, #0
 800b65a:	e7ee      	b.n	800b63a <quorem+0xf6>
 800b65c:	0000      	movs	r0, r0
	...

0800b660 <_dtoa_r>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	ec57 6b10 	vmov	r6, r7, d0
 800b668:	b097      	sub	sp, #92	; 0x5c
 800b66a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b66c:	9106      	str	r1, [sp, #24]
 800b66e:	4604      	mov	r4, r0
 800b670:	920b      	str	r2, [sp, #44]	; 0x2c
 800b672:	9312      	str	r3, [sp, #72]	; 0x48
 800b674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b678:	e9cd 6700 	strd	r6, r7, [sp]
 800b67c:	b93d      	cbnz	r5, 800b68e <_dtoa_r+0x2e>
 800b67e:	2010      	movs	r0, #16
 800b680:	f7ff fa14 	bl	800aaac <malloc>
 800b684:	6260      	str	r0, [r4, #36]	; 0x24
 800b686:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b68a:	6005      	str	r5, [r0, #0]
 800b68c:	60c5      	str	r5, [r0, #12]
 800b68e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b690:	6819      	ldr	r1, [r3, #0]
 800b692:	b151      	cbz	r1, 800b6aa <_dtoa_r+0x4a>
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	604a      	str	r2, [r1, #4]
 800b698:	2301      	movs	r3, #1
 800b69a:	4093      	lsls	r3, r2
 800b69c:	608b      	str	r3, [r1, #8]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 fde5 	bl	800c26e <_Bfree>
 800b6a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	1e3b      	subs	r3, r7, #0
 800b6ac:	bfbb      	ittet	lt
 800b6ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b6b2:	9301      	strlt	r3, [sp, #4]
 800b6b4:	2300      	movge	r3, #0
 800b6b6:	2201      	movlt	r2, #1
 800b6b8:	bfac      	ite	ge
 800b6ba:	f8c8 3000 	strge.w	r3, [r8]
 800b6be:	f8c8 2000 	strlt.w	r2, [r8]
 800b6c2:	4baf      	ldr	r3, [pc, #700]	; (800b980 <_dtoa_r+0x320>)
 800b6c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b6c8:	ea33 0308 	bics.w	r3, r3, r8
 800b6cc:	d114      	bne.n	800b6f8 <_dtoa_r+0x98>
 800b6ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	9b00      	ldr	r3, [sp, #0]
 800b6d8:	b923      	cbnz	r3, 800b6e4 <_dtoa_r+0x84>
 800b6da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	f000 8542 	beq.w	800c168 <_dtoa_r+0xb08>
 800b6e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b994 <_dtoa_r+0x334>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 8544 	beq.w	800c178 <_dtoa_r+0xb18>
 800b6f0:	f10b 0303 	add.w	r3, fp, #3
 800b6f4:	f000 bd3e 	b.w	800c174 <_dtoa_r+0xb14>
 800b6f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2300      	movs	r3, #0
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f5 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b708:	4681      	mov	r9, r0
 800b70a:	b168      	cbz	r0, 800b728 <_dtoa_r+0xc8>
 800b70c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b70e:	2301      	movs	r3, #1
 800b710:	6013      	str	r3, [r2, #0]
 800b712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 8524 	beq.w	800c162 <_dtoa_r+0xb02>
 800b71a:	4b9a      	ldr	r3, [pc, #616]	; (800b984 <_dtoa_r+0x324>)
 800b71c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b71e:	f103 3bff 	add.w	fp, r3, #4294967295
 800b722:	6013      	str	r3, [r2, #0]
 800b724:	f000 bd28 	b.w	800c178 <_dtoa_r+0xb18>
 800b728:	aa14      	add	r2, sp, #80	; 0x50
 800b72a:	a915      	add	r1, sp, #84	; 0x54
 800b72c:	ec47 6b10 	vmov	d0, r6, r7
 800b730:	4620      	mov	r0, r4
 800b732:	f000 fff4 	bl	800c71e <__d2b>
 800b736:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b73a:	9004      	str	r0, [sp, #16]
 800b73c:	2d00      	cmp	r5, #0
 800b73e:	d07c      	beq.n	800b83a <_dtoa_r+0x1da>
 800b740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b744:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b748:	46b2      	mov	sl, r6
 800b74a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b74e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b752:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b756:	2200      	movs	r2, #0
 800b758:	4b8b      	ldr	r3, [pc, #556]	; (800b988 <_dtoa_r+0x328>)
 800b75a:	4650      	mov	r0, sl
 800b75c:	4659      	mov	r1, fp
 800b75e:	f7f4 fd93 	bl	8000288 <__aeabi_dsub>
 800b762:	a381      	add	r3, pc, #516	; (adr r3, 800b968 <_dtoa_r+0x308>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f7f4 ff46 	bl	80005f8 <__aeabi_dmul>
 800b76c:	a380      	add	r3, pc, #512	; (adr r3, 800b970 <_dtoa_r+0x310>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f7f4 fd8b 	bl	800028c <__adddf3>
 800b776:	4606      	mov	r6, r0
 800b778:	4628      	mov	r0, r5
 800b77a:	460f      	mov	r7, r1
 800b77c:	f7f4 fed2 	bl	8000524 <__aeabi_i2d>
 800b780:	a37d      	add	r3, pc, #500	; (adr r3, 800b978 <_dtoa_r+0x318>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 ff37 	bl	80005f8 <__aeabi_dmul>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4630      	mov	r0, r6
 800b790:	4639      	mov	r1, r7
 800b792:	f7f4 fd7b 	bl	800028c <__adddf3>
 800b796:	4606      	mov	r6, r0
 800b798:	460f      	mov	r7, r1
 800b79a:	f7f5 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	f7f5 f998 	bl	8000adc <__aeabi_dcmplt>
 800b7ac:	b148      	cbz	r0, 800b7c2 <_dtoa_r+0x162>
 800b7ae:	4650      	mov	r0, sl
 800b7b0:	f7f4 feb8 	bl	8000524 <__aeabi_i2d>
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	463b      	mov	r3, r7
 800b7b8:	f7f5 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7bc:	b908      	cbnz	r0, 800b7c2 <_dtoa_r+0x162>
 800b7be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7c2:	f1ba 0f16 	cmp.w	sl, #22
 800b7c6:	d859      	bhi.n	800b87c <_dtoa_r+0x21c>
 800b7c8:	4970      	ldr	r1, [pc, #448]	; (800b98c <_dtoa_r+0x32c>)
 800b7ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b7ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7d6:	f7f5 f99f 	bl	8000b18 <__aeabi_dcmpgt>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d050      	beq.n	800b880 <_dtoa_r+0x220>
 800b7de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7e8:	1b5d      	subs	r5, r3, r5
 800b7ea:	f1b5 0801 	subs.w	r8, r5, #1
 800b7ee:	bf49      	itett	mi
 800b7f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b7f4:	2300      	movpl	r3, #0
 800b7f6:	9305      	strmi	r3, [sp, #20]
 800b7f8:	f04f 0800 	movmi.w	r8, #0
 800b7fc:	bf58      	it	pl
 800b7fe:	9305      	strpl	r3, [sp, #20]
 800b800:	f1ba 0f00 	cmp.w	sl, #0
 800b804:	db3e      	blt.n	800b884 <_dtoa_r+0x224>
 800b806:	2300      	movs	r3, #0
 800b808:	44d0      	add	r8, sl
 800b80a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b80e:	9307      	str	r3, [sp, #28]
 800b810:	9b06      	ldr	r3, [sp, #24]
 800b812:	2b09      	cmp	r3, #9
 800b814:	f200 8090 	bhi.w	800b938 <_dtoa_r+0x2d8>
 800b818:	2b05      	cmp	r3, #5
 800b81a:	bfc4      	itt	gt
 800b81c:	3b04      	subgt	r3, #4
 800b81e:	9306      	strgt	r3, [sp, #24]
 800b820:	9b06      	ldr	r3, [sp, #24]
 800b822:	f1a3 0302 	sub.w	r3, r3, #2
 800b826:	bfcc      	ite	gt
 800b828:	2500      	movgt	r5, #0
 800b82a:	2501      	movle	r5, #1
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	f200 808f 	bhi.w	800b950 <_dtoa_r+0x2f0>
 800b832:	e8df f003 	tbb	[pc, r3]
 800b836:	7f7d      	.short	0x7f7d
 800b838:	7131      	.short	0x7131
 800b83a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b83e:	441d      	add	r5, r3
 800b840:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b844:	2820      	cmp	r0, #32
 800b846:	dd13      	ble.n	800b870 <_dtoa_r+0x210>
 800b848:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b84c:	9b00      	ldr	r3, [sp, #0]
 800b84e:	fa08 f800 	lsl.w	r8, r8, r0
 800b852:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b856:	fa23 f000 	lsr.w	r0, r3, r0
 800b85a:	ea48 0000 	orr.w	r0, r8, r0
 800b85e:	f7f4 fe51 	bl	8000504 <__aeabi_ui2d>
 800b862:	2301      	movs	r3, #1
 800b864:	4682      	mov	sl, r0
 800b866:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b86a:	3d01      	subs	r5, #1
 800b86c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b86e:	e772      	b.n	800b756 <_dtoa_r+0xf6>
 800b870:	9b00      	ldr	r3, [sp, #0]
 800b872:	f1c0 0020 	rsb	r0, r0, #32
 800b876:	fa03 f000 	lsl.w	r0, r3, r0
 800b87a:	e7f0      	b.n	800b85e <_dtoa_r+0x1fe>
 800b87c:	2301      	movs	r3, #1
 800b87e:	e7b1      	b.n	800b7e4 <_dtoa_r+0x184>
 800b880:	900f      	str	r0, [sp, #60]	; 0x3c
 800b882:	e7b0      	b.n	800b7e6 <_dtoa_r+0x186>
 800b884:	9b05      	ldr	r3, [sp, #20]
 800b886:	eba3 030a 	sub.w	r3, r3, sl
 800b88a:	9305      	str	r3, [sp, #20]
 800b88c:	f1ca 0300 	rsb	r3, sl, #0
 800b890:	9307      	str	r3, [sp, #28]
 800b892:	2300      	movs	r3, #0
 800b894:	930e      	str	r3, [sp, #56]	; 0x38
 800b896:	e7bb      	b.n	800b810 <_dtoa_r+0x1b0>
 800b898:	2301      	movs	r3, #1
 800b89a:	930a      	str	r3, [sp, #40]	; 0x28
 800b89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dd59      	ble.n	800b956 <_dtoa_r+0x2f6>
 800b8a2:	9302      	str	r3, [sp, #8]
 800b8a4:	4699      	mov	r9, r3
 800b8a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	6072      	str	r2, [r6, #4]
 800b8ac:	2204      	movs	r2, #4
 800b8ae:	f102 0014 	add.w	r0, r2, #20
 800b8b2:	4298      	cmp	r0, r3
 800b8b4:	6871      	ldr	r1, [r6, #4]
 800b8b6:	d953      	bls.n	800b960 <_dtoa_r+0x300>
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fca4 	bl	800c206 <_Balloc>
 800b8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8c0:	6030      	str	r0, [r6, #0]
 800b8c2:	f1b9 0f0e 	cmp.w	r9, #14
 800b8c6:	f8d3 b000 	ldr.w	fp, [r3]
 800b8ca:	f200 80e6 	bhi.w	800ba9a <_dtoa_r+0x43a>
 800b8ce:	2d00      	cmp	r5, #0
 800b8d0:	f000 80e3 	beq.w	800ba9a <_dtoa_r+0x43a>
 800b8d4:	ed9d 7b00 	vldr	d7, [sp]
 800b8d8:	f1ba 0f00 	cmp.w	sl, #0
 800b8dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b8e0:	dd74      	ble.n	800b9cc <_dtoa_r+0x36c>
 800b8e2:	4a2a      	ldr	r2, [pc, #168]	; (800b98c <_dtoa_r+0x32c>)
 800b8e4:	f00a 030f 	and.w	r3, sl, #15
 800b8e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8ec:	ed93 7b00 	vldr	d7, [r3]
 800b8f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b8f4:	06f0      	lsls	r0, r6, #27
 800b8f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b8fa:	d565      	bpl.n	800b9c8 <_dtoa_r+0x368>
 800b8fc:	4b24      	ldr	r3, [pc, #144]	; (800b990 <_dtoa_r+0x330>)
 800b8fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b902:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b906:	f7f4 ffa1 	bl	800084c <__aeabi_ddiv>
 800b90a:	e9cd 0100 	strd	r0, r1, [sp]
 800b90e:	f006 060f 	and.w	r6, r6, #15
 800b912:	2503      	movs	r5, #3
 800b914:	4f1e      	ldr	r7, [pc, #120]	; (800b990 <_dtoa_r+0x330>)
 800b916:	e04c      	b.n	800b9b2 <_dtoa_r+0x352>
 800b918:	2301      	movs	r3, #1
 800b91a:	930a      	str	r3, [sp, #40]	; 0x28
 800b91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b91e:	4453      	add	r3, sl
 800b920:	f103 0901 	add.w	r9, r3, #1
 800b924:	9302      	str	r3, [sp, #8]
 800b926:	464b      	mov	r3, r9
 800b928:	2b01      	cmp	r3, #1
 800b92a:	bfb8      	it	lt
 800b92c:	2301      	movlt	r3, #1
 800b92e:	e7ba      	b.n	800b8a6 <_dtoa_r+0x246>
 800b930:	2300      	movs	r3, #0
 800b932:	e7b2      	b.n	800b89a <_dtoa_r+0x23a>
 800b934:	2300      	movs	r3, #0
 800b936:	e7f0      	b.n	800b91a <_dtoa_r+0x2ba>
 800b938:	2501      	movs	r5, #1
 800b93a:	2300      	movs	r3, #0
 800b93c:	9306      	str	r3, [sp, #24]
 800b93e:	950a      	str	r5, [sp, #40]	; 0x28
 800b940:	f04f 33ff 	mov.w	r3, #4294967295
 800b944:	9302      	str	r3, [sp, #8]
 800b946:	4699      	mov	r9, r3
 800b948:	2200      	movs	r2, #0
 800b94a:	2312      	movs	r3, #18
 800b94c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b94e:	e7aa      	b.n	800b8a6 <_dtoa_r+0x246>
 800b950:	2301      	movs	r3, #1
 800b952:	930a      	str	r3, [sp, #40]	; 0x28
 800b954:	e7f4      	b.n	800b940 <_dtoa_r+0x2e0>
 800b956:	2301      	movs	r3, #1
 800b958:	9302      	str	r3, [sp, #8]
 800b95a:	4699      	mov	r9, r3
 800b95c:	461a      	mov	r2, r3
 800b95e:	e7f5      	b.n	800b94c <_dtoa_r+0x2ec>
 800b960:	3101      	adds	r1, #1
 800b962:	6071      	str	r1, [r6, #4]
 800b964:	0052      	lsls	r2, r2, #1
 800b966:	e7a2      	b.n	800b8ae <_dtoa_r+0x24e>
 800b968:	636f4361 	.word	0x636f4361
 800b96c:	3fd287a7 	.word	0x3fd287a7
 800b970:	8b60c8b3 	.word	0x8b60c8b3
 800b974:	3fc68a28 	.word	0x3fc68a28
 800b978:	509f79fb 	.word	0x509f79fb
 800b97c:	3fd34413 	.word	0x3fd34413
 800b980:	7ff00000 	.word	0x7ff00000
 800b984:	0800ce1d 	.word	0x0800ce1d
 800b988:	3ff80000 	.word	0x3ff80000
 800b98c:	0800ce78 	.word	0x0800ce78
 800b990:	0800ce50 	.word	0x0800ce50
 800b994:	0800ce49 	.word	0x0800ce49
 800b998:	07f1      	lsls	r1, r6, #31
 800b99a:	d508      	bpl.n	800b9ae <_dtoa_r+0x34e>
 800b99c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9a4:	f7f4 fe28 	bl	80005f8 <__aeabi_dmul>
 800b9a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9ac:	3501      	adds	r5, #1
 800b9ae:	1076      	asrs	r6, r6, #1
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	2e00      	cmp	r6, #0
 800b9b4:	d1f0      	bne.n	800b998 <_dtoa_r+0x338>
 800b9b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b9ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9be:	f7f4 ff45 	bl	800084c <__aeabi_ddiv>
 800b9c2:	e9cd 0100 	strd	r0, r1, [sp]
 800b9c6:	e01a      	b.n	800b9fe <_dtoa_r+0x39e>
 800b9c8:	2502      	movs	r5, #2
 800b9ca:	e7a3      	b.n	800b914 <_dtoa_r+0x2b4>
 800b9cc:	f000 80a0 	beq.w	800bb10 <_dtoa_r+0x4b0>
 800b9d0:	f1ca 0600 	rsb	r6, sl, #0
 800b9d4:	4b9f      	ldr	r3, [pc, #636]	; (800bc54 <_dtoa_r+0x5f4>)
 800b9d6:	4fa0      	ldr	r7, [pc, #640]	; (800bc58 <_dtoa_r+0x5f8>)
 800b9d8:	f006 020f 	and.w	r2, r6, #15
 800b9dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9e8:	f7f4 fe06 	bl	80005f8 <__aeabi_dmul>
 800b9ec:	e9cd 0100 	strd	r0, r1, [sp]
 800b9f0:	1136      	asrs	r6, r6, #4
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2502      	movs	r5, #2
 800b9f6:	2e00      	cmp	r6, #0
 800b9f8:	d17f      	bne.n	800bafa <_dtoa_r+0x49a>
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e1      	bne.n	800b9c2 <_dtoa_r+0x362>
 800b9fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 8087 	beq.w	800bb14 <_dtoa_r+0x4b4>
 800ba06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4b93      	ldr	r3, [pc, #588]	; (800bc5c <_dtoa_r+0x5fc>)
 800ba0e:	4630      	mov	r0, r6
 800ba10:	4639      	mov	r1, r7
 800ba12:	f7f5 f863 	bl	8000adc <__aeabi_dcmplt>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d07c      	beq.n	800bb14 <_dtoa_r+0x4b4>
 800ba1a:	f1b9 0f00 	cmp.w	r9, #0
 800ba1e:	d079      	beq.n	800bb14 <_dtoa_r+0x4b4>
 800ba20:	9b02      	ldr	r3, [sp, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dd35      	ble.n	800ba92 <_dtoa_r+0x432>
 800ba26:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ba2a:	9308      	str	r3, [sp, #32]
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	2200      	movs	r2, #0
 800ba30:	4b8b      	ldr	r3, [pc, #556]	; (800bc60 <_dtoa_r+0x600>)
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7f4 fde0 	bl	80005f8 <__aeabi_dmul>
 800ba38:	e9cd 0100 	strd	r0, r1, [sp]
 800ba3c:	9f02      	ldr	r7, [sp, #8]
 800ba3e:	3501      	adds	r5, #1
 800ba40:	4628      	mov	r0, r5
 800ba42:	f7f4 fd6f 	bl	8000524 <__aeabi_i2d>
 800ba46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba4a:	f7f4 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4b84      	ldr	r3, [pc, #528]	; (800bc64 <_dtoa_r+0x604>)
 800ba52:	f7f4 fc1b 	bl	800028c <__adddf3>
 800ba56:	4605      	mov	r5, r0
 800ba58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ba5c:	2f00      	cmp	r7, #0
 800ba5e:	d15d      	bne.n	800bb1c <_dtoa_r+0x4bc>
 800ba60:	2200      	movs	r2, #0
 800ba62:	4b81      	ldr	r3, [pc, #516]	; (800bc68 <_dtoa_r+0x608>)
 800ba64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba68:	f7f4 fc0e 	bl	8000288 <__aeabi_dsub>
 800ba6c:	462a      	mov	r2, r5
 800ba6e:	4633      	mov	r3, r6
 800ba70:	e9cd 0100 	strd	r0, r1, [sp]
 800ba74:	f7f5 f850 	bl	8000b18 <__aeabi_dcmpgt>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	f040 8288 	bne.w	800bf8e <_dtoa_r+0x92e>
 800ba7e:	462a      	mov	r2, r5
 800ba80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ba84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba88:	f7f5 f828 	bl	8000adc <__aeabi_dcmplt>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	f040 827c 	bne.w	800bf8a <_dtoa_r+0x92a>
 800ba92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba96:	e9cd 2300 	strd	r2, r3, [sp]
 800ba9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f2c0 8150 	blt.w	800bd42 <_dtoa_r+0x6e2>
 800baa2:	f1ba 0f0e 	cmp.w	sl, #14
 800baa6:	f300 814c 	bgt.w	800bd42 <_dtoa_r+0x6e2>
 800baaa:	4b6a      	ldr	r3, [pc, #424]	; (800bc54 <_dtoa_r+0x5f4>)
 800baac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bab0:	ed93 7b00 	vldr	d7, [r3]
 800bab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800babc:	f280 80d8 	bge.w	800bc70 <_dtoa_r+0x610>
 800bac0:	f1b9 0f00 	cmp.w	r9, #0
 800bac4:	f300 80d4 	bgt.w	800bc70 <_dtoa_r+0x610>
 800bac8:	f040 825e 	bne.w	800bf88 <_dtoa_r+0x928>
 800bacc:	2200      	movs	r2, #0
 800bace:	4b66      	ldr	r3, [pc, #408]	; (800bc68 <_dtoa_r+0x608>)
 800bad0:	ec51 0b17 	vmov	r0, r1, d7
 800bad4:	f7f4 fd90 	bl	80005f8 <__aeabi_dmul>
 800bad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800badc:	f7f5 f812 	bl	8000b04 <__aeabi_dcmpge>
 800bae0:	464f      	mov	r7, r9
 800bae2:	464e      	mov	r6, r9
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f040 8234 	bne.w	800bf52 <_dtoa_r+0x8f2>
 800baea:	2331      	movs	r3, #49	; 0x31
 800baec:	f10b 0501 	add.w	r5, fp, #1
 800baf0:	f88b 3000 	strb.w	r3, [fp]
 800baf4:	f10a 0a01 	add.w	sl, sl, #1
 800baf8:	e22f      	b.n	800bf5a <_dtoa_r+0x8fa>
 800bafa:	07f2      	lsls	r2, r6, #31
 800bafc:	d505      	bpl.n	800bb0a <_dtoa_r+0x4aa>
 800bafe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb02:	f7f4 fd79 	bl	80005f8 <__aeabi_dmul>
 800bb06:	3501      	adds	r5, #1
 800bb08:	2301      	movs	r3, #1
 800bb0a:	1076      	asrs	r6, r6, #1
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	e772      	b.n	800b9f6 <_dtoa_r+0x396>
 800bb10:	2502      	movs	r5, #2
 800bb12:	e774      	b.n	800b9fe <_dtoa_r+0x39e>
 800bb14:	f8cd a020 	str.w	sl, [sp, #32]
 800bb18:	464f      	mov	r7, r9
 800bb1a:	e791      	b.n	800ba40 <_dtoa_r+0x3e0>
 800bb1c:	4b4d      	ldr	r3, [pc, #308]	; (800bc54 <_dtoa_r+0x5f4>)
 800bb1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d047      	beq.n	800bbbc <_dtoa_r+0x55c>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	2000      	movs	r0, #0
 800bb32:	494e      	ldr	r1, [pc, #312]	; (800bc6c <_dtoa_r+0x60c>)
 800bb34:	f7f4 fe8a 	bl	800084c <__aeabi_ddiv>
 800bb38:	462a      	mov	r2, r5
 800bb3a:	4633      	mov	r3, r6
 800bb3c:	f7f4 fba4 	bl	8000288 <__aeabi_dsub>
 800bb40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bb44:	465d      	mov	r5, fp
 800bb46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb4a:	f7f5 f805 	bl	8000b58 <__aeabi_d2iz>
 800bb4e:	4606      	mov	r6, r0
 800bb50:	f7f4 fce8 	bl	8000524 <__aeabi_i2d>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb5c:	f7f4 fb94 	bl	8000288 <__aeabi_dsub>
 800bb60:	3630      	adds	r6, #48	; 0x30
 800bb62:	f805 6b01 	strb.w	r6, [r5], #1
 800bb66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb6a:	e9cd 0100 	strd	r0, r1, [sp]
 800bb6e:	f7f4 ffb5 	bl	8000adc <__aeabi_dcmplt>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d163      	bne.n	800bc3e <_dtoa_r+0x5de>
 800bb76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	4937      	ldr	r1, [pc, #220]	; (800bc5c <_dtoa_r+0x5fc>)
 800bb7e:	f7f4 fb83 	bl	8000288 <__aeabi_dsub>
 800bb82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb86:	f7f4 ffa9 	bl	8000adc <__aeabi_dcmplt>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f040 80b7 	bne.w	800bcfe <_dtoa_r+0x69e>
 800bb90:	eba5 030b 	sub.w	r3, r5, fp
 800bb94:	429f      	cmp	r7, r3
 800bb96:	f77f af7c 	ble.w	800ba92 <_dtoa_r+0x432>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4b30      	ldr	r3, [pc, #192]	; (800bc60 <_dtoa_r+0x600>)
 800bb9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bba2:	f7f4 fd29 	bl	80005f8 <__aeabi_dmul>
 800bba6:	2200      	movs	r2, #0
 800bba8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bbac:	4b2c      	ldr	r3, [pc, #176]	; (800bc60 <_dtoa_r+0x600>)
 800bbae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbb2:	f7f4 fd21 	bl	80005f8 <__aeabi_dmul>
 800bbb6:	e9cd 0100 	strd	r0, r1, [sp]
 800bbba:	e7c4      	b.n	800bb46 <_dtoa_r+0x4e6>
 800bbbc:	462a      	mov	r2, r5
 800bbbe:	4633      	mov	r3, r6
 800bbc0:	f7f4 fd1a 	bl	80005f8 <__aeabi_dmul>
 800bbc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bbc8:	eb0b 0507 	add.w	r5, fp, r7
 800bbcc:	465e      	mov	r6, fp
 800bbce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbd2:	f7f4 ffc1 	bl	8000b58 <__aeabi_d2iz>
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	f7f4 fca4 	bl	8000524 <__aeabi_i2d>
 800bbdc:	3730      	adds	r7, #48	; 0x30
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbe6:	f7f4 fb4f 	bl	8000288 <__aeabi_dsub>
 800bbea:	f806 7b01 	strb.w	r7, [r6], #1
 800bbee:	42ae      	cmp	r6, r5
 800bbf0:	e9cd 0100 	strd	r0, r1, [sp]
 800bbf4:	f04f 0200 	mov.w	r2, #0
 800bbf8:	d126      	bne.n	800bc48 <_dtoa_r+0x5e8>
 800bbfa:	4b1c      	ldr	r3, [pc, #112]	; (800bc6c <_dtoa_r+0x60c>)
 800bbfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc00:	f7f4 fb44 	bl	800028c <__adddf3>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc0c:	f7f4 ff84 	bl	8000b18 <__aeabi_dcmpgt>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d174      	bne.n	800bcfe <_dtoa_r+0x69e>
 800bc14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc18:	2000      	movs	r0, #0
 800bc1a:	4914      	ldr	r1, [pc, #80]	; (800bc6c <_dtoa_r+0x60c>)
 800bc1c:	f7f4 fb34 	bl	8000288 <__aeabi_dsub>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc28:	f7f4 ff58 	bl	8000adc <__aeabi_dcmplt>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	f43f af30 	beq.w	800ba92 <_dtoa_r+0x432>
 800bc32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc36:	2b30      	cmp	r3, #48	; 0x30
 800bc38:	f105 32ff 	add.w	r2, r5, #4294967295
 800bc3c:	d002      	beq.n	800bc44 <_dtoa_r+0x5e4>
 800bc3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bc42:	e04a      	b.n	800bcda <_dtoa_r+0x67a>
 800bc44:	4615      	mov	r5, r2
 800bc46:	e7f4      	b.n	800bc32 <_dtoa_r+0x5d2>
 800bc48:	4b05      	ldr	r3, [pc, #20]	; (800bc60 <_dtoa_r+0x600>)
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	e9cd 0100 	strd	r0, r1, [sp]
 800bc52:	e7bc      	b.n	800bbce <_dtoa_r+0x56e>
 800bc54:	0800ce78 	.word	0x0800ce78
 800bc58:	0800ce50 	.word	0x0800ce50
 800bc5c:	3ff00000 	.word	0x3ff00000
 800bc60:	40240000 	.word	0x40240000
 800bc64:	401c0000 	.word	0x401c0000
 800bc68:	40140000 	.word	0x40140000
 800bc6c:	3fe00000 	.word	0x3fe00000
 800bc70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc74:	465d      	mov	r5, fp
 800bc76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	4639      	mov	r1, r7
 800bc7e:	f7f4 fde5 	bl	800084c <__aeabi_ddiv>
 800bc82:	f7f4 ff69 	bl	8000b58 <__aeabi_d2iz>
 800bc86:	4680      	mov	r8, r0
 800bc88:	f7f4 fc4c 	bl	8000524 <__aeabi_i2d>
 800bc8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc90:	f7f4 fcb2 	bl	80005f8 <__aeabi_dmul>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4630      	mov	r0, r6
 800bc9a:	4639      	mov	r1, r7
 800bc9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bca0:	f7f4 faf2 	bl	8000288 <__aeabi_dsub>
 800bca4:	f805 6b01 	strb.w	r6, [r5], #1
 800bca8:	eba5 060b 	sub.w	r6, r5, fp
 800bcac:	45b1      	cmp	r9, r6
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	d139      	bne.n	800bd28 <_dtoa_r+0x6c8>
 800bcb4:	f7f4 faea 	bl	800028c <__adddf3>
 800bcb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	f7f4 ff2a 	bl	8000b18 <__aeabi_dcmpgt>
 800bcc4:	b9c8      	cbnz	r0, 800bcfa <_dtoa_r+0x69a>
 800bcc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcca:	4630      	mov	r0, r6
 800bccc:	4639      	mov	r1, r7
 800bcce:	f7f4 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcd2:	b110      	cbz	r0, 800bcda <_dtoa_r+0x67a>
 800bcd4:	f018 0f01 	tst.w	r8, #1
 800bcd8:	d10f      	bne.n	800bcfa <_dtoa_r+0x69a>
 800bcda:	9904      	ldr	r1, [sp, #16]
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f000 fac6 	bl	800c26e <_Bfree>
 800bce2:	2300      	movs	r3, #0
 800bce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bce6:	702b      	strb	r3, [r5, #0]
 800bce8:	f10a 0301 	add.w	r3, sl, #1
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f000 8241 	beq.w	800c178 <_dtoa_r+0xb18>
 800bcf6:	601d      	str	r5, [r3, #0]
 800bcf8:	e23e      	b.n	800c178 <_dtoa_r+0xb18>
 800bcfa:	f8cd a020 	str.w	sl, [sp, #32]
 800bcfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd02:	2a39      	cmp	r2, #57	; 0x39
 800bd04:	f105 33ff 	add.w	r3, r5, #4294967295
 800bd08:	d108      	bne.n	800bd1c <_dtoa_r+0x6bc>
 800bd0a:	459b      	cmp	fp, r3
 800bd0c:	d10a      	bne.n	800bd24 <_dtoa_r+0x6c4>
 800bd0e:	9b08      	ldr	r3, [sp, #32]
 800bd10:	3301      	adds	r3, #1
 800bd12:	9308      	str	r3, [sp, #32]
 800bd14:	2330      	movs	r3, #48	; 0x30
 800bd16:	f88b 3000 	strb.w	r3, [fp]
 800bd1a:	465b      	mov	r3, fp
 800bd1c:	781a      	ldrb	r2, [r3, #0]
 800bd1e:	3201      	adds	r2, #1
 800bd20:	701a      	strb	r2, [r3, #0]
 800bd22:	e78c      	b.n	800bc3e <_dtoa_r+0x5de>
 800bd24:	461d      	mov	r5, r3
 800bd26:	e7ea      	b.n	800bcfe <_dtoa_r+0x69e>
 800bd28:	2200      	movs	r2, #0
 800bd2a:	4b9b      	ldr	r3, [pc, #620]	; (800bf98 <_dtoa_r+0x938>)
 800bd2c:	f7f4 fc64 	bl	80005f8 <__aeabi_dmul>
 800bd30:	2200      	movs	r2, #0
 800bd32:	2300      	movs	r3, #0
 800bd34:	4606      	mov	r6, r0
 800bd36:	460f      	mov	r7, r1
 800bd38:	f7f4 fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d09a      	beq.n	800bc76 <_dtoa_r+0x616>
 800bd40:	e7cb      	b.n	800bcda <_dtoa_r+0x67a>
 800bd42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd44:	2a00      	cmp	r2, #0
 800bd46:	f000 808b 	beq.w	800be60 <_dtoa_r+0x800>
 800bd4a:	9a06      	ldr	r2, [sp, #24]
 800bd4c:	2a01      	cmp	r2, #1
 800bd4e:	dc6e      	bgt.n	800be2e <_dtoa_r+0x7ce>
 800bd50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	d067      	beq.n	800be26 <_dtoa_r+0x7c6>
 800bd56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd5a:	9f07      	ldr	r7, [sp, #28]
 800bd5c:	9d05      	ldr	r5, [sp, #20]
 800bd5e:	9a05      	ldr	r2, [sp, #20]
 800bd60:	2101      	movs	r1, #1
 800bd62:	441a      	add	r2, r3
 800bd64:	4620      	mov	r0, r4
 800bd66:	9205      	str	r2, [sp, #20]
 800bd68:	4498      	add	r8, r3
 800bd6a:	f000 fb20 	bl	800c3ae <__i2b>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	2d00      	cmp	r5, #0
 800bd72:	dd0c      	ble.n	800bd8e <_dtoa_r+0x72e>
 800bd74:	f1b8 0f00 	cmp.w	r8, #0
 800bd78:	dd09      	ble.n	800bd8e <_dtoa_r+0x72e>
 800bd7a:	4545      	cmp	r5, r8
 800bd7c:	9a05      	ldr	r2, [sp, #20]
 800bd7e:	462b      	mov	r3, r5
 800bd80:	bfa8      	it	ge
 800bd82:	4643      	movge	r3, r8
 800bd84:	1ad2      	subs	r2, r2, r3
 800bd86:	9205      	str	r2, [sp, #20]
 800bd88:	1aed      	subs	r5, r5, r3
 800bd8a:	eba8 0803 	sub.w	r8, r8, r3
 800bd8e:	9b07      	ldr	r3, [sp, #28]
 800bd90:	b1eb      	cbz	r3, 800bdce <_dtoa_r+0x76e>
 800bd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d067      	beq.n	800be68 <_dtoa_r+0x808>
 800bd98:	b18f      	cbz	r7, 800bdbe <_dtoa_r+0x75e>
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	463a      	mov	r2, r7
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 fba4 	bl	800c4ec <__pow5mult>
 800bda4:	9a04      	ldr	r2, [sp, #16]
 800bda6:	4601      	mov	r1, r0
 800bda8:	4606      	mov	r6, r0
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 fb08 	bl	800c3c0 <__multiply>
 800bdb0:	9904      	ldr	r1, [sp, #16]
 800bdb2:	9008      	str	r0, [sp, #32]
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f000 fa5a 	bl	800c26e <_Bfree>
 800bdba:	9b08      	ldr	r3, [sp, #32]
 800bdbc:	9304      	str	r3, [sp, #16]
 800bdbe:	9b07      	ldr	r3, [sp, #28]
 800bdc0:	1bda      	subs	r2, r3, r7
 800bdc2:	d004      	beq.n	800bdce <_dtoa_r+0x76e>
 800bdc4:	9904      	ldr	r1, [sp, #16]
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f000 fb90 	bl	800c4ec <__pow5mult>
 800bdcc:	9004      	str	r0, [sp, #16]
 800bdce:	2101      	movs	r1, #1
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f000 faec 	bl	800c3ae <__i2b>
 800bdd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdd8:	4607      	mov	r7, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f000 81d0 	beq.w	800c180 <_dtoa_r+0xb20>
 800bde0:	461a      	mov	r2, r3
 800bde2:	4601      	mov	r1, r0
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 fb81 	bl	800c4ec <__pow5mult>
 800bdea:	9b06      	ldr	r3, [sp, #24]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	4607      	mov	r7, r0
 800bdf0:	dc40      	bgt.n	800be74 <_dtoa_r+0x814>
 800bdf2:	9b00      	ldr	r3, [sp, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d139      	bne.n	800be6c <_dtoa_r+0x80c>
 800bdf8:	9b01      	ldr	r3, [sp, #4]
 800bdfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d136      	bne.n	800be70 <_dtoa_r+0x810>
 800be02:	9b01      	ldr	r3, [sp, #4]
 800be04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be08:	0d1b      	lsrs	r3, r3, #20
 800be0a:	051b      	lsls	r3, r3, #20
 800be0c:	b12b      	cbz	r3, 800be1a <_dtoa_r+0x7ba>
 800be0e:	9b05      	ldr	r3, [sp, #20]
 800be10:	3301      	adds	r3, #1
 800be12:	9305      	str	r3, [sp, #20]
 800be14:	f108 0801 	add.w	r8, r8, #1
 800be18:	2301      	movs	r3, #1
 800be1a:	9307      	str	r3, [sp, #28]
 800be1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d12a      	bne.n	800be78 <_dtoa_r+0x818>
 800be22:	2001      	movs	r0, #1
 800be24:	e030      	b.n	800be88 <_dtoa_r+0x828>
 800be26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be2c:	e795      	b.n	800bd5a <_dtoa_r+0x6fa>
 800be2e:	9b07      	ldr	r3, [sp, #28]
 800be30:	f109 37ff 	add.w	r7, r9, #4294967295
 800be34:	42bb      	cmp	r3, r7
 800be36:	bfbf      	itttt	lt
 800be38:	9b07      	ldrlt	r3, [sp, #28]
 800be3a:	9707      	strlt	r7, [sp, #28]
 800be3c:	1afa      	sublt	r2, r7, r3
 800be3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800be40:	bfbb      	ittet	lt
 800be42:	189b      	addlt	r3, r3, r2
 800be44:	930e      	strlt	r3, [sp, #56]	; 0x38
 800be46:	1bdf      	subge	r7, r3, r7
 800be48:	2700      	movlt	r7, #0
 800be4a:	f1b9 0f00 	cmp.w	r9, #0
 800be4e:	bfb5      	itete	lt
 800be50:	9b05      	ldrlt	r3, [sp, #20]
 800be52:	9d05      	ldrge	r5, [sp, #20]
 800be54:	eba3 0509 	sublt.w	r5, r3, r9
 800be58:	464b      	movge	r3, r9
 800be5a:	bfb8      	it	lt
 800be5c:	2300      	movlt	r3, #0
 800be5e:	e77e      	b.n	800bd5e <_dtoa_r+0x6fe>
 800be60:	9f07      	ldr	r7, [sp, #28]
 800be62:	9d05      	ldr	r5, [sp, #20]
 800be64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800be66:	e783      	b.n	800bd70 <_dtoa_r+0x710>
 800be68:	9a07      	ldr	r2, [sp, #28]
 800be6a:	e7ab      	b.n	800bdc4 <_dtoa_r+0x764>
 800be6c:	2300      	movs	r3, #0
 800be6e:	e7d4      	b.n	800be1a <_dtoa_r+0x7ba>
 800be70:	9b00      	ldr	r3, [sp, #0]
 800be72:	e7d2      	b.n	800be1a <_dtoa_r+0x7ba>
 800be74:	2300      	movs	r3, #0
 800be76:	9307      	str	r3, [sp, #28]
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800be7e:	6918      	ldr	r0, [r3, #16]
 800be80:	f000 fa47 	bl	800c312 <__hi0bits>
 800be84:	f1c0 0020 	rsb	r0, r0, #32
 800be88:	4440      	add	r0, r8
 800be8a:	f010 001f 	ands.w	r0, r0, #31
 800be8e:	d047      	beq.n	800bf20 <_dtoa_r+0x8c0>
 800be90:	f1c0 0320 	rsb	r3, r0, #32
 800be94:	2b04      	cmp	r3, #4
 800be96:	dd3b      	ble.n	800bf10 <_dtoa_r+0x8b0>
 800be98:	9b05      	ldr	r3, [sp, #20]
 800be9a:	f1c0 001c 	rsb	r0, r0, #28
 800be9e:	4403      	add	r3, r0
 800bea0:	9305      	str	r3, [sp, #20]
 800bea2:	4405      	add	r5, r0
 800bea4:	4480      	add	r8, r0
 800bea6:	9b05      	ldr	r3, [sp, #20]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dd05      	ble.n	800beb8 <_dtoa_r+0x858>
 800beac:	461a      	mov	r2, r3
 800beae:	9904      	ldr	r1, [sp, #16]
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 fb69 	bl	800c588 <__lshift>
 800beb6:	9004      	str	r0, [sp, #16]
 800beb8:	f1b8 0f00 	cmp.w	r8, #0
 800bebc:	dd05      	ble.n	800beca <_dtoa_r+0x86a>
 800bebe:	4639      	mov	r1, r7
 800bec0:	4642      	mov	r2, r8
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 fb60 	bl	800c588 <__lshift>
 800bec8:	4607      	mov	r7, r0
 800beca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800becc:	b353      	cbz	r3, 800bf24 <_dtoa_r+0x8c4>
 800bece:	4639      	mov	r1, r7
 800bed0:	9804      	ldr	r0, [sp, #16]
 800bed2:	f000 fbad 	bl	800c630 <__mcmp>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	da24      	bge.n	800bf24 <_dtoa_r+0x8c4>
 800beda:	2300      	movs	r3, #0
 800bedc:	220a      	movs	r2, #10
 800bede:	9904      	ldr	r1, [sp, #16]
 800bee0:	4620      	mov	r0, r4
 800bee2:	f000 f9db 	bl	800c29c <__multadd>
 800bee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bee8:	9004      	str	r0, [sp, #16]
 800beea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 814d 	beq.w	800c18e <_dtoa_r+0xb2e>
 800bef4:	2300      	movs	r3, #0
 800bef6:	4631      	mov	r1, r6
 800bef8:	220a      	movs	r2, #10
 800befa:	4620      	mov	r0, r4
 800befc:	f000 f9ce 	bl	800c29c <__multadd>
 800bf00:	9b02      	ldr	r3, [sp, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	4606      	mov	r6, r0
 800bf06:	dc4f      	bgt.n	800bfa8 <_dtoa_r+0x948>
 800bf08:	9b06      	ldr	r3, [sp, #24]
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	dd4c      	ble.n	800bfa8 <_dtoa_r+0x948>
 800bf0e:	e011      	b.n	800bf34 <_dtoa_r+0x8d4>
 800bf10:	d0c9      	beq.n	800bea6 <_dtoa_r+0x846>
 800bf12:	9a05      	ldr	r2, [sp, #20]
 800bf14:	331c      	adds	r3, #28
 800bf16:	441a      	add	r2, r3
 800bf18:	9205      	str	r2, [sp, #20]
 800bf1a:	441d      	add	r5, r3
 800bf1c:	4498      	add	r8, r3
 800bf1e:	e7c2      	b.n	800bea6 <_dtoa_r+0x846>
 800bf20:	4603      	mov	r3, r0
 800bf22:	e7f6      	b.n	800bf12 <_dtoa_r+0x8b2>
 800bf24:	f1b9 0f00 	cmp.w	r9, #0
 800bf28:	dc38      	bgt.n	800bf9c <_dtoa_r+0x93c>
 800bf2a:	9b06      	ldr	r3, [sp, #24]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	dd35      	ble.n	800bf9c <_dtoa_r+0x93c>
 800bf30:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf34:	9b02      	ldr	r3, [sp, #8]
 800bf36:	b963      	cbnz	r3, 800bf52 <_dtoa_r+0x8f2>
 800bf38:	4639      	mov	r1, r7
 800bf3a:	2205      	movs	r2, #5
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 f9ad 	bl	800c29c <__multadd>
 800bf42:	4601      	mov	r1, r0
 800bf44:	4607      	mov	r7, r0
 800bf46:	9804      	ldr	r0, [sp, #16]
 800bf48:	f000 fb72 	bl	800c630 <__mcmp>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	f73f adcc 	bgt.w	800baea <_dtoa_r+0x48a>
 800bf52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf54:	465d      	mov	r5, fp
 800bf56:	ea6f 0a03 	mvn.w	sl, r3
 800bf5a:	f04f 0900 	mov.w	r9, #0
 800bf5e:	4639      	mov	r1, r7
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 f984 	bl	800c26e <_Bfree>
 800bf66:	2e00      	cmp	r6, #0
 800bf68:	f43f aeb7 	beq.w	800bcda <_dtoa_r+0x67a>
 800bf6c:	f1b9 0f00 	cmp.w	r9, #0
 800bf70:	d005      	beq.n	800bf7e <_dtoa_r+0x91e>
 800bf72:	45b1      	cmp	r9, r6
 800bf74:	d003      	beq.n	800bf7e <_dtoa_r+0x91e>
 800bf76:	4649      	mov	r1, r9
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 f978 	bl	800c26e <_Bfree>
 800bf7e:	4631      	mov	r1, r6
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 f974 	bl	800c26e <_Bfree>
 800bf86:	e6a8      	b.n	800bcda <_dtoa_r+0x67a>
 800bf88:	2700      	movs	r7, #0
 800bf8a:	463e      	mov	r6, r7
 800bf8c:	e7e1      	b.n	800bf52 <_dtoa_r+0x8f2>
 800bf8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bf92:	463e      	mov	r6, r7
 800bf94:	e5a9      	b.n	800baea <_dtoa_r+0x48a>
 800bf96:	bf00      	nop
 800bf98:	40240000 	.word	0x40240000
 800bf9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 80fa 	beq.w	800c19c <_dtoa_r+0xb3c>
 800bfa8:	2d00      	cmp	r5, #0
 800bfaa:	dd05      	ble.n	800bfb8 <_dtoa_r+0x958>
 800bfac:	4631      	mov	r1, r6
 800bfae:	462a      	mov	r2, r5
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f000 fae9 	bl	800c588 <__lshift>
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	9b07      	ldr	r3, [sp, #28]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d04c      	beq.n	800c058 <_dtoa_r+0x9f8>
 800bfbe:	6871      	ldr	r1, [r6, #4]
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 f920 	bl	800c206 <_Balloc>
 800bfc6:	6932      	ldr	r2, [r6, #16]
 800bfc8:	3202      	adds	r2, #2
 800bfca:	4605      	mov	r5, r0
 800bfcc:	0092      	lsls	r2, r2, #2
 800bfce:	f106 010c 	add.w	r1, r6, #12
 800bfd2:	300c      	adds	r0, #12
 800bfd4:	f000 f90a 	bl	800c1ec <memcpy>
 800bfd8:	2201      	movs	r2, #1
 800bfda:	4629      	mov	r1, r5
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 fad3 	bl	800c588 <__lshift>
 800bfe2:	9b00      	ldr	r3, [sp, #0]
 800bfe4:	f8cd b014 	str.w	fp, [sp, #20]
 800bfe8:	f003 0301 	and.w	r3, r3, #1
 800bfec:	46b1      	mov	r9, r6
 800bfee:	9307      	str	r3, [sp, #28]
 800bff0:	4606      	mov	r6, r0
 800bff2:	4639      	mov	r1, r7
 800bff4:	9804      	ldr	r0, [sp, #16]
 800bff6:	f7ff faa5 	bl	800b544 <quorem>
 800bffa:	4649      	mov	r1, r9
 800bffc:	4605      	mov	r5, r0
 800bffe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c002:	9804      	ldr	r0, [sp, #16]
 800c004:	f000 fb14 	bl	800c630 <__mcmp>
 800c008:	4632      	mov	r2, r6
 800c00a:	9000      	str	r0, [sp, #0]
 800c00c:	4639      	mov	r1, r7
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 fb28 	bl	800c664 <__mdiff>
 800c014:	68c3      	ldr	r3, [r0, #12]
 800c016:	4602      	mov	r2, r0
 800c018:	bb03      	cbnz	r3, 800c05c <_dtoa_r+0x9fc>
 800c01a:	4601      	mov	r1, r0
 800c01c:	9008      	str	r0, [sp, #32]
 800c01e:	9804      	ldr	r0, [sp, #16]
 800c020:	f000 fb06 	bl	800c630 <__mcmp>
 800c024:	9a08      	ldr	r2, [sp, #32]
 800c026:	4603      	mov	r3, r0
 800c028:	4611      	mov	r1, r2
 800c02a:	4620      	mov	r0, r4
 800c02c:	9308      	str	r3, [sp, #32]
 800c02e:	f000 f91e 	bl	800c26e <_Bfree>
 800c032:	9b08      	ldr	r3, [sp, #32]
 800c034:	b9a3      	cbnz	r3, 800c060 <_dtoa_r+0xa00>
 800c036:	9a06      	ldr	r2, [sp, #24]
 800c038:	b992      	cbnz	r2, 800c060 <_dtoa_r+0xa00>
 800c03a:	9a07      	ldr	r2, [sp, #28]
 800c03c:	b982      	cbnz	r2, 800c060 <_dtoa_r+0xa00>
 800c03e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c042:	d029      	beq.n	800c098 <_dtoa_r+0xa38>
 800c044:	9b00      	ldr	r3, [sp, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	dd01      	ble.n	800c04e <_dtoa_r+0x9ee>
 800c04a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c04e:	9b05      	ldr	r3, [sp, #20]
 800c050:	1c5d      	adds	r5, r3, #1
 800c052:	f883 8000 	strb.w	r8, [r3]
 800c056:	e782      	b.n	800bf5e <_dtoa_r+0x8fe>
 800c058:	4630      	mov	r0, r6
 800c05a:	e7c2      	b.n	800bfe2 <_dtoa_r+0x982>
 800c05c:	2301      	movs	r3, #1
 800c05e:	e7e3      	b.n	800c028 <_dtoa_r+0x9c8>
 800c060:	9a00      	ldr	r2, [sp, #0]
 800c062:	2a00      	cmp	r2, #0
 800c064:	db04      	blt.n	800c070 <_dtoa_r+0xa10>
 800c066:	d125      	bne.n	800c0b4 <_dtoa_r+0xa54>
 800c068:	9a06      	ldr	r2, [sp, #24]
 800c06a:	bb1a      	cbnz	r2, 800c0b4 <_dtoa_r+0xa54>
 800c06c:	9a07      	ldr	r2, [sp, #28]
 800c06e:	bb0a      	cbnz	r2, 800c0b4 <_dtoa_r+0xa54>
 800c070:	2b00      	cmp	r3, #0
 800c072:	ddec      	ble.n	800c04e <_dtoa_r+0x9ee>
 800c074:	2201      	movs	r2, #1
 800c076:	9904      	ldr	r1, [sp, #16]
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 fa85 	bl	800c588 <__lshift>
 800c07e:	4639      	mov	r1, r7
 800c080:	9004      	str	r0, [sp, #16]
 800c082:	f000 fad5 	bl	800c630 <__mcmp>
 800c086:	2800      	cmp	r0, #0
 800c088:	dc03      	bgt.n	800c092 <_dtoa_r+0xa32>
 800c08a:	d1e0      	bne.n	800c04e <_dtoa_r+0x9ee>
 800c08c:	f018 0f01 	tst.w	r8, #1
 800c090:	d0dd      	beq.n	800c04e <_dtoa_r+0x9ee>
 800c092:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c096:	d1d8      	bne.n	800c04a <_dtoa_r+0x9ea>
 800c098:	9b05      	ldr	r3, [sp, #20]
 800c09a:	9a05      	ldr	r2, [sp, #20]
 800c09c:	1c5d      	adds	r5, r3, #1
 800c09e:	2339      	movs	r3, #57	; 0x39
 800c0a0:	7013      	strb	r3, [r2, #0]
 800c0a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c0a6:	2b39      	cmp	r3, #57	; 0x39
 800c0a8:	f105 32ff 	add.w	r2, r5, #4294967295
 800c0ac:	d04f      	beq.n	800c14e <_dtoa_r+0xaee>
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	7013      	strb	r3, [r2, #0]
 800c0b2:	e754      	b.n	800bf5e <_dtoa_r+0x8fe>
 800c0b4:	9a05      	ldr	r2, [sp, #20]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f102 0501 	add.w	r5, r2, #1
 800c0bc:	dd06      	ble.n	800c0cc <_dtoa_r+0xa6c>
 800c0be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c0c2:	d0e9      	beq.n	800c098 <_dtoa_r+0xa38>
 800c0c4:	f108 0801 	add.w	r8, r8, #1
 800c0c8:	9b05      	ldr	r3, [sp, #20]
 800c0ca:	e7c2      	b.n	800c052 <_dtoa_r+0x9f2>
 800c0cc:	9a02      	ldr	r2, [sp, #8]
 800c0ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c0d2:	eba5 030b 	sub.w	r3, r5, fp
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d021      	beq.n	800c11e <_dtoa_r+0xabe>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	220a      	movs	r2, #10
 800c0de:	9904      	ldr	r1, [sp, #16]
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 f8db 	bl	800c29c <__multadd>
 800c0e6:	45b1      	cmp	r9, r6
 800c0e8:	9004      	str	r0, [sp, #16]
 800c0ea:	f04f 0300 	mov.w	r3, #0
 800c0ee:	f04f 020a 	mov.w	r2, #10
 800c0f2:	4649      	mov	r1, r9
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	d105      	bne.n	800c104 <_dtoa_r+0xaa4>
 800c0f8:	f000 f8d0 	bl	800c29c <__multadd>
 800c0fc:	4681      	mov	r9, r0
 800c0fe:	4606      	mov	r6, r0
 800c100:	9505      	str	r5, [sp, #20]
 800c102:	e776      	b.n	800bff2 <_dtoa_r+0x992>
 800c104:	f000 f8ca 	bl	800c29c <__multadd>
 800c108:	4631      	mov	r1, r6
 800c10a:	4681      	mov	r9, r0
 800c10c:	2300      	movs	r3, #0
 800c10e:	220a      	movs	r2, #10
 800c110:	4620      	mov	r0, r4
 800c112:	f000 f8c3 	bl	800c29c <__multadd>
 800c116:	4606      	mov	r6, r0
 800c118:	e7f2      	b.n	800c100 <_dtoa_r+0xaa0>
 800c11a:	f04f 0900 	mov.w	r9, #0
 800c11e:	2201      	movs	r2, #1
 800c120:	9904      	ldr	r1, [sp, #16]
 800c122:	4620      	mov	r0, r4
 800c124:	f000 fa30 	bl	800c588 <__lshift>
 800c128:	4639      	mov	r1, r7
 800c12a:	9004      	str	r0, [sp, #16]
 800c12c:	f000 fa80 	bl	800c630 <__mcmp>
 800c130:	2800      	cmp	r0, #0
 800c132:	dcb6      	bgt.n	800c0a2 <_dtoa_r+0xa42>
 800c134:	d102      	bne.n	800c13c <_dtoa_r+0xadc>
 800c136:	f018 0f01 	tst.w	r8, #1
 800c13a:	d1b2      	bne.n	800c0a2 <_dtoa_r+0xa42>
 800c13c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c140:	2b30      	cmp	r3, #48	; 0x30
 800c142:	f105 32ff 	add.w	r2, r5, #4294967295
 800c146:	f47f af0a 	bne.w	800bf5e <_dtoa_r+0x8fe>
 800c14a:	4615      	mov	r5, r2
 800c14c:	e7f6      	b.n	800c13c <_dtoa_r+0xadc>
 800c14e:	4593      	cmp	fp, r2
 800c150:	d105      	bne.n	800c15e <_dtoa_r+0xafe>
 800c152:	2331      	movs	r3, #49	; 0x31
 800c154:	f10a 0a01 	add.w	sl, sl, #1
 800c158:	f88b 3000 	strb.w	r3, [fp]
 800c15c:	e6ff      	b.n	800bf5e <_dtoa_r+0x8fe>
 800c15e:	4615      	mov	r5, r2
 800c160:	e79f      	b.n	800c0a2 <_dtoa_r+0xa42>
 800c162:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c1c8 <_dtoa_r+0xb68>
 800c166:	e007      	b.n	800c178 <_dtoa_r+0xb18>
 800c168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c16a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c1cc <_dtoa_r+0xb6c>
 800c16e:	b11b      	cbz	r3, 800c178 <_dtoa_r+0xb18>
 800c170:	f10b 0308 	add.w	r3, fp, #8
 800c174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	4658      	mov	r0, fp
 800c17a:	b017      	add	sp, #92	; 0x5c
 800c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c180:	9b06      	ldr	r3, [sp, #24]
 800c182:	2b01      	cmp	r3, #1
 800c184:	f77f ae35 	ble.w	800bdf2 <_dtoa_r+0x792>
 800c188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c18a:	9307      	str	r3, [sp, #28]
 800c18c:	e649      	b.n	800be22 <_dtoa_r+0x7c2>
 800c18e:	9b02      	ldr	r3, [sp, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	dc03      	bgt.n	800c19c <_dtoa_r+0xb3c>
 800c194:	9b06      	ldr	r3, [sp, #24]
 800c196:	2b02      	cmp	r3, #2
 800c198:	f73f aecc 	bgt.w	800bf34 <_dtoa_r+0x8d4>
 800c19c:	465d      	mov	r5, fp
 800c19e:	4639      	mov	r1, r7
 800c1a0:	9804      	ldr	r0, [sp, #16]
 800c1a2:	f7ff f9cf 	bl	800b544 <quorem>
 800c1a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c1aa:	f805 8b01 	strb.w	r8, [r5], #1
 800c1ae:	9a02      	ldr	r2, [sp, #8]
 800c1b0:	eba5 030b 	sub.w	r3, r5, fp
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	ddb0      	ble.n	800c11a <_dtoa_r+0xaba>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	220a      	movs	r2, #10
 800c1bc:	9904      	ldr	r1, [sp, #16]
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f000 f86c 	bl	800c29c <__multadd>
 800c1c4:	9004      	str	r0, [sp, #16]
 800c1c6:	e7ea      	b.n	800c19e <_dtoa_r+0xb3e>
 800c1c8:	0800ce1c 	.word	0x0800ce1c
 800c1cc:	0800ce40 	.word	0x0800ce40

0800c1d0 <_localeconv_r>:
 800c1d0:	4b04      	ldr	r3, [pc, #16]	; (800c1e4 <_localeconv_r+0x14>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6a18      	ldr	r0, [r3, #32]
 800c1d6:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <_localeconv_r+0x18>)
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	bf08      	it	eq
 800c1dc:	4618      	moveq	r0, r3
 800c1de:	30f0      	adds	r0, #240	; 0xf0
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	20000188 	.word	0x20000188
 800c1e8:	200001ec 	.word	0x200001ec

0800c1ec <memcpy>:
 800c1ec:	b510      	push	{r4, lr}
 800c1ee:	1e43      	subs	r3, r0, #1
 800c1f0:	440a      	add	r2, r1
 800c1f2:	4291      	cmp	r1, r2
 800c1f4:	d100      	bne.n	800c1f8 <memcpy+0xc>
 800c1f6:	bd10      	pop	{r4, pc}
 800c1f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c200:	e7f7      	b.n	800c1f2 <memcpy+0x6>

0800c202 <__malloc_lock>:
 800c202:	4770      	bx	lr

0800c204 <__malloc_unlock>:
 800c204:	4770      	bx	lr

0800c206 <_Balloc>:
 800c206:	b570      	push	{r4, r5, r6, lr}
 800c208:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c20a:	4604      	mov	r4, r0
 800c20c:	460e      	mov	r6, r1
 800c20e:	b93d      	cbnz	r5, 800c220 <_Balloc+0x1a>
 800c210:	2010      	movs	r0, #16
 800c212:	f7fe fc4b 	bl	800aaac <malloc>
 800c216:	6260      	str	r0, [r4, #36]	; 0x24
 800c218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c21c:	6005      	str	r5, [r0, #0]
 800c21e:	60c5      	str	r5, [r0, #12]
 800c220:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c222:	68eb      	ldr	r3, [r5, #12]
 800c224:	b183      	cbz	r3, 800c248 <_Balloc+0x42>
 800c226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c22e:	b9b8      	cbnz	r0, 800c260 <_Balloc+0x5a>
 800c230:	2101      	movs	r1, #1
 800c232:	fa01 f506 	lsl.w	r5, r1, r6
 800c236:	1d6a      	adds	r2, r5, #5
 800c238:	0092      	lsls	r2, r2, #2
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 fabe 	bl	800c7bc <_calloc_r>
 800c240:	b160      	cbz	r0, 800c25c <_Balloc+0x56>
 800c242:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c246:	e00e      	b.n	800c266 <_Balloc+0x60>
 800c248:	2221      	movs	r2, #33	; 0x21
 800c24a:	2104      	movs	r1, #4
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 fab5 	bl	800c7bc <_calloc_r>
 800c252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c254:	60e8      	str	r0, [r5, #12]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1e4      	bne.n	800c226 <_Balloc+0x20>
 800c25c:	2000      	movs	r0, #0
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	6802      	ldr	r2, [r0, #0]
 800c262:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c266:	2300      	movs	r3, #0
 800c268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c26c:	e7f7      	b.n	800c25e <_Balloc+0x58>

0800c26e <_Bfree>:
 800c26e:	b570      	push	{r4, r5, r6, lr}
 800c270:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c272:	4606      	mov	r6, r0
 800c274:	460d      	mov	r5, r1
 800c276:	b93c      	cbnz	r4, 800c288 <_Bfree+0x1a>
 800c278:	2010      	movs	r0, #16
 800c27a:	f7fe fc17 	bl	800aaac <malloc>
 800c27e:	6270      	str	r0, [r6, #36]	; 0x24
 800c280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c284:	6004      	str	r4, [r0, #0]
 800c286:	60c4      	str	r4, [r0, #12]
 800c288:	b13d      	cbz	r5, 800c29a <_Bfree+0x2c>
 800c28a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c28c:	686a      	ldr	r2, [r5, #4]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c294:	6029      	str	r1, [r5, #0]
 800c296:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c29a:	bd70      	pop	{r4, r5, r6, pc}

0800c29c <__multadd>:
 800c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a0:	690d      	ldr	r5, [r1, #16]
 800c2a2:	461f      	mov	r7, r3
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	f101 0c14 	add.w	ip, r1, #20
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f8dc 0000 	ldr.w	r0, [ip]
 800c2b2:	b281      	uxth	r1, r0
 800c2b4:	fb02 7101 	mla	r1, r2, r1, r7
 800c2b8:	0c0f      	lsrs	r7, r1, #16
 800c2ba:	0c00      	lsrs	r0, r0, #16
 800c2bc:	fb02 7000 	mla	r0, r2, r0, r7
 800c2c0:	b289      	uxth	r1, r1
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c2c8:	429d      	cmp	r5, r3
 800c2ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c2ce:	f84c 1b04 	str.w	r1, [ip], #4
 800c2d2:	dcec      	bgt.n	800c2ae <__multadd+0x12>
 800c2d4:	b1d7      	cbz	r7, 800c30c <__multadd+0x70>
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	42ab      	cmp	r3, r5
 800c2da:	dc12      	bgt.n	800c302 <__multadd+0x66>
 800c2dc:	6861      	ldr	r1, [r4, #4]
 800c2de:	4630      	mov	r0, r6
 800c2e0:	3101      	adds	r1, #1
 800c2e2:	f7ff ff90 	bl	800c206 <_Balloc>
 800c2e6:	6922      	ldr	r2, [r4, #16]
 800c2e8:	3202      	adds	r2, #2
 800c2ea:	f104 010c 	add.w	r1, r4, #12
 800c2ee:	4680      	mov	r8, r0
 800c2f0:	0092      	lsls	r2, r2, #2
 800c2f2:	300c      	adds	r0, #12
 800c2f4:	f7ff ff7a 	bl	800c1ec <memcpy>
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7ff ffb7 	bl	800c26e <_Bfree>
 800c300:	4644      	mov	r4, r8
 800c302:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c306:	3501      	adds	r5, #1
 800c308:	615f      	str	r7, [r3, #20]
 800c30a:	6125      	str	r5, [r4, #16]
 800c30c:	4620      	mov	r0, r4
 800c30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c312 <__hi0bits>:
 800c312:	0c02      	lsrs	r2, r0, #16
 800c314:	0412      	lsls	r2, r2, #16
 800c316:	4603      	mov	r3, r0
 800c318:	b9b2      	cbnz	r2, 800c348 <__hi0bits+0x36>
 800c31a:	0403      	lsls	r3, r0, #16
 800c31c:	2010      	movs	r0, #16
 800c31e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c322:	bf04      	itt	eq
 800c324:	021b      	lsleq	r3, r3, #8
 800c326:	3008      	addeq	r0, #8
 800c328:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c32c:	bf04      	itt	eq
 800c32e:	011b      	lsleq	r3, r3, #4
 800c330:	3004      	addeq	r0, #4
 800c332:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c336:	bf04      	itt	eq
 800c338:	009b      	lsleq	r3, r3, #2
 800c33a:	3002      	addeq	r0, #2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	db06      	blt.n	800c34e <__hi0bits+0x3c>
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	d503      	bpl.n	800c34c <__hi0bits+0x3a>
 800c344:	3001      	adds	r0, #1
 800c346:	4770      	bx	lr
 800c348:	2000      	movs	r0, #0
 800c34a:	e7e8      	b.n	800c31e <__hi0bits+0xc>
 800c34c:	2020      	movs	r0, #32
 800c34e:	4770      	bx	lr

0800c350 <__lo0bits>:
 800c350:	6803      	ldr	r3, [r0, #0]
 800c352:	f013 0207 	ands.w	r2, r3, #7
 800c356:	4601      	mov	r1, r0
 800c358:	d00b      	beq.n	800c372 <__lo0bits+0x22>
 800c35a:	07da      	lsls	r2, r3, #31
 800c35c:	d423      	bmi.n	800c3a6 <__lo0bits+0x56>
 800c35e:	0798      	lsls	r0, r3, #30
 800c360:	bf49      	itett	mi
 800c362:	085b      	lsrmi	r3, r3, #1
 800c364:	089b      	lsrpl	r3, r3, #2
 800c366:	2001      	movmi	r0, #1
 800c368:	600b      	strmi	r3, [r1, #0]
 800c36a:	bf5c      	itt	pl
 800c36c:	600b      	strpl	r3, [r1, #0]
 800c36e:	2002      	movpl	r0, #2
 800c370:	4770      	bx	lr
 800c372:	b298      	uxth	r0, r3
 800c374:	b9a8      	cbnz	r0, 800c3a2 <__lo0bits+0x52>
 800c376:	0c1b      	lsrs	r3, r3, #16
 800c378:	2010      	movs	r0, #16
 800c37a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c37e:	bf04      	itt	eq
 800c380:	0a1b      	lsreq	r3, r3, #8
 800c382:	3008      	addeq	r0, #8
 800c384:	071a      	lsls	r2, r3, #28
 800c386:	bf04      	itt	eq
 800c388:	091b      	lsreq	r3, r3, #4
 800c38a:	3004      	addeq	r0, #4
 800c38c:	079a      	lsls	r2, r3, #30
 800c38e:	bf04      	itt	eq
 800c390:	089b      	lsreq	r3, r3, #2
 800c392:	3002      	addeq	r0, #2
 800c394:	07da      	lsls	r2, r3, #31
 800c396:	d402      	bmi.n	800c39e <__lo0bits+0x4e>
 800c398:	085b      	lsrs	r3, r3, #1
 800c39a:	d006      	beq.n	800c3aa <__lo0bits+0x5a>
 800c39c:	3001      	adds	r0, #1
 800c39e:	600b      	str	r3, [r1, #0]
 800c3a0:	4770      	bx	lr
 800c3a2:	4610      	mov	r0, r2
 800c3a4:	e7e9      	b.n	800c37a <__lo0bits+0x2a>
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	4770      	bx	lr
 800c3aa:	2020      	movs	r0, #32
 800c3ac:	4770      	bx	lr

0800c3ae <__i2b>:
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	f7ff ff27 	bl	800c206 <_Balloc>
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	6144      	str	r4, [r0, #20]
 800c3bc:	6102      	str	r2, [r0, #16]
 800c3be:	bd10      	pop	{r4, pc}

0800c3c0 <__multiply>:
 800c3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c4:	4614      	mov	r4, r2
 800c3c6:	690a      	ldr	r2, [r1, #16]
 800c3c8:	6923      	ldr	r3, [r4, #16]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	bfb8      	it	lt
 800c3ce:	460b      	movlt	r3, r1
 800c3d0:	4688      	mov	r8, r1
 800c3d2:	bfbc      	itt	lt
 800c3d4:	46a0      	movlt	r8, r4
 800c3d6:	461c      	movlt	r4, r3
 800c3d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c3e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3e8:	eb07 0609 	add.w	r6, r7, r9
 800c3ec:	42b3      	cmp	r3, r6
 800c3ee:	bfb8      	it	lt
 800c3f0:	3101      	addlt	r1, #1
 800c3f2:	f7ff ff08 	bl	800c206 <_Balloc>
 800c3f6:	f100 0514 	add.w	r5, r0, #20
 800c3fa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c3fe:	462b      	mov	r3, r5
 800c400:	2200      	movs	r2, #0
 800c402:	4573      	cmp	r3, lr
 800c404:	d316      	bcc.n	800c434 <__multiply+0x74>
 800c406:	f104 0214 	add.w	r2, r4, #20
 800c40a:	f108 0114 	add.w	r1, r8, #20
 800c40e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c412:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	9b00      	ldr	r3, [sp, #0]
 800c41a:	9201      	str	r2, [sp, #4]
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d80c      	bhi.n	800c43a <__multiply+0x7a>
 800c420:	2e00      	cmp	r6, #0
 800c422:	dd03      	ble.n	800c42c <__multiply+0x6c>
 800c424:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d05d      	beq.n	800c4e8 <__multiply+0x128>
 800c42c:	6106      	str	r6, [r0, #16]
 800c42e:	b003      	add	sp, #12
 800c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c434:	f843 2b04 	str.w	r2, [r3], #4
 800c438:	e7e3      	b.n	800c402 <__multiply+0x42>
 800c43a:	f8b2 b000 	ldrh.w	fp, [r2]
 800c43e:	f1bb 0f00 	cmp.w	fp, #0
 800c442:	d023      	beq.n	800c48c <__multiply+0xcc>
 800c444:	4689      	mov	r9, r1
 800c446:	46ac      	mov	ip, r5
 800c448:	f04f 0800 	mov.w	r8, #0
 800c44c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c450:	f8dc a000 	ldr.w	sl, [ip]
 800c454:	b2a3      	uxth	r3, r4
 800c456:	fa1f fa8a 	uxth.w	sl, sl
 800c45a:	fb0b a303 	mla	r3, fp, r3, sl
 800c45e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c462:	f8dc 4000 	ldr.w	r4, [ip]
 800c466:	4443      	add	r3, r8
 800c468:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c46c:	fb0b 840a 	mla	r4, fp, sl, r8
 800c470:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c474:	46e2      	mov	sl, ip
 800c476:	b29b      	uxth	r3, r3
 800c478:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c47c:	454f      	cmp	r7, r9
 800c47e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c482:	f84a 3b04 	str.w	r3, [sl], #4
 800c486:	d82b      	bhi.n	800c4e0 <__multiply+0x120>
 800c488:	f8cc 8004 	str.w	r8, [ip, #4]
 800c48c:	9b01      	ldr	r3, [sp, #4]
 800c48e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c492:	3204      	adds	r2, #4
 800c494:	f1ba 0f00 	cmp.w	sl, #0
 800c498:	d020      	beq.n	800c4dc <__multiply+0x11c>
 800c49a:	682b      	ldr	r3, [r5, #0]
 800c49c:	4689      	mov	r9, r1
 800c49e:	46a8      	mov	r8, r5
 800c4a0:	f04f 0b00 	mov.w	fp, #0
 800c4a4:	f8b9 c000 	ldrh.w	ip, [r9]
 800c4a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c4ac:	fb0a 440c 	mla	r4, sl, ip, r4
 800c4b0:	445c      	add	r4, fp
 800c4b2:	46c4      	mov	ip, r8
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c4ba:	f84c 3b04 	str.w	r3, [ip], #4
 800c4be:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c4c6:	0c1b      	lsrs	r3, r3, #16
 800c4c8:	fb0a b303 	mla	r3, sl, r3, fp
 800c4cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c4d0:	454f      	cmp	r7, r9
 800c4d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c4d6:	d805      	bhi.n	800c4e4 <__multiply+0x124>
 800c4d8:	f8c8 3004 	str.w	r3, [r8, #4]
 800c4dc:	3504      	adds	r5, #4
 800c4de:	e79b      	b.n	800c418 <__multiply+0x58>
 800c4e0:	46d4      	mov	ip, sl
 800c4e2:	e7b3      	b.n	800c44c <__multiply+0x8c>
 800c4e4:	46e0      	mov	r8, ip
 800c4e6:	e7dd      	b.n	800c4a4 <__multiply+0xe4>
 800c4e8:	3e01      	subs	r6, #1
 800c4ea:	e799      	b.n	800c420 <__multiply+0x60>

0800c4ec <__pow5mult>:
 800c4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f0:	4615      	mov	r5, r2
 800c4f2:	f012 0203 	ands.w	r2, r2, #3
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	460f      	mov	r7, r1
 800c4fa:	d007      	beq.n	800c50c <__pow5mult+0x20>
 800c4fc:	3a01      	subs	r2, #1
 800c4fe:	4c21      	ldr	r4, [pc, #132]	; (800c584 <__pow5mult+0x98>)
 800c500:	2300      	movs	r3, #0
 800c502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c506:	f7ff fec9 	bl	800c29c <__multadd>
 800c50a:	4607      	mov	r7, r0
 800c50c:	10ad      	asrs	r5, r5, #2
 800c50e:	d035      	beq.n	800c57c <__pow5mult+0x90>
 800c510:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c512:	b93c      	cbnz	r4, 800c524 <__pow5mult+0x38>
 800c514:	2010      	movs	r0, #16
 800c516:	f7fe fac9 	bl	800aaac <malloc>
 800c51a:	6270      	str	r0, [r6, #36]	; 0x24
 800c51c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c520:	6004      	str	r4, [r0, #0]
 800c522:	60c4      	str	r4, [r0, #12]
 800c524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c52c:	b94c      	cbnz	r4, 800c542 <__pow5mult+0x56>
 800c52e:	f240 2171 	movw	r1, #625	; 0x271
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff ff3b 	bl	800c3ae <__i2b>
 800c538:	2300      	movs	r3, #0
 800c53a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c53e:	4604      	mov	r4, r0
 800c540:	6003      	str	r3, [r0, #0]
 800c542:	f04f 0800 	mov.w	r8, #0
 800c546:	07eb      	lsls	r3, r5, #31
 800c548:	d50a      	bpl.n	800c560 <__pow5mult+0x74>
 800c54a:	4639      	mov	r1, r7
 800c54c:	4622      	mov	r2, r4
 800c54e:	4630      	mov	r0, r6
 800c550:	f7ff ff36 	bl	800c3c0 <__multiply>
 800c554:	4639      	mov	r1, r7
 800c556:	4681      	mov	r9, r0
 800c558:	4630      	mov	r0, r6
 800c55a:	f7ff fe88 	bl	800c26e <_Bfree>
 800c55e:	464f      	mov	r7, r9
 800c560:	106d      	asrs	r5, r5, #1
 800c562:	d00b      	beq.n	800c57c <__pow5mult+0x90>
 800c564:	6820      	ldr	r0, [r4, #0]
 800c566:	b938      	cbnz	r0, 800c578 <__pow5mult+0x8c>
 800c568:	4622      	mov	r2, r4
 800c56a:	4621      	mov	r1, r4
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff ff27 	bl	800c3c0 <__multiply>
 800c572:	6020      	str	r0, [r4, #0]
 800c574:	f8c0 8000 	str.w	r8, [r0]
 800c578:	4604      	mov	r4, r0
 800c57a:	e7e4      	b.n	800c546 <__pow5mult+0x5a>
 800c57c:	4638      	mov	r0, r7
 800c57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c582:	bf00      	nop
 800c584:	0800cf40 	.word	0x0800cf40

0800c588 <__lshift>:
 800c588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c58c:	460c      	mov	r4, r1
 800c58e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c592:	6923      	ldr	r3, [r4, #16]
 800c594:	6849      	ldr	r1, [r1, #4]
 800c596:	eb0a 0903 	add.w	r9, sl, r3
 800c59a:	68a3      	ldr	r3, [r4, #8]
 800c59c:	4607      	mov	r7, r0
 800c59e:	4616      	mov	r6, r2
 800c5a0:	f109 0501 	add.w	r5, r9, #1
 800c5a4:	42ab      	cmp	r3, r5
 800c5a6:	db32      	blt.n	800c60e <__lshift+0x86>
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff fe2c 	bl	800c206 <_Balloc>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	4680      	mov	r8, r0
 800c5b2:	f100 0114 	add.w	r1, r0, #20
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	4553      	cmp	r3, sl
 800c5ba:	db2b      	blt.n	800c614 <__lshift+0x8c>
 800c5bc:	6920      	ldr	r0, [r4, #16]
 800c5be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5c2:	f104 0314 	add.w	r3, r4, #20
 800c5c6:	f016 021f 	ands.w	r2, r6, #31
 800c5ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5d2:	d025      	beq.n	800c620 <__lshift+0x98>
 800c5d4:	f1c2 0e20 	rsb	lr, r2, #32
 800c5d8:	2000      	movs	r0, #0
 800c5da:	681e      	ldr	r6, [r3, #0]
 800c5dc:	468a      	mov	sl, r1
 800c5de:	4096      	lsls	r6, r2
 800c5e0:	4330      	orrs	r0, r6
 800c5e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c5e6:	f853 0b04 	ldr.w	r0, [r3], #4
 800c5ea:	459c      	cmp	ip, r3
 800c5ec:	fa20 f00e 	lsr.w	r0, r0, lr
 800c5f0:	d814      	bhi.n	800c61c <__lshift+0x94>
 800c5f2:	6048      	str	r0, [r1, #4]
 800c5f4:	b108      	cbz	r0, 800c5fa <__lshift+0x72>
 800c5f6:	f109 0502 	add.w	r5, r9, #2
 800c5fa:	3d01      	subs	r5, #1
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	f8c8 5010 	str.w	r5, [r8, #16]
 800c602:	4621      	mov	r1, r4
 800c604:	f7ff fe33 	bl	800c26e <_Bfree>
 800c608:	4640      	mov	r0, r8
 800c60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c60e:	3101      	adds	r1, #1
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	e7c7      	b.n	800c5a4 <__lshift+0x1c>
 800c614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c618:	3301      	adds	r3, #1
 800c61a:	e7cd      	b.n	800c5b8 <__lshift+0x30>
 800c61c:	4651      	mov	r1, sl
 800c61e:	e7dc      	b.n	800c5da <__lshift+0x52>
 800c620:	3904      	subs	r1, #4
 800c622:	f853 2b04 	ldr.w	r2, [r3], #4
 800c626:	f841 2f04 	str.w	r2, [r1, #4]!
 800c62a:	459c      	cmp	ip, r3
 800c62c:	d8f9      	bhi.n	800c622 <__lshift+0x9a>
 800c62e:	e7e4      	b.n	800c5fa <__lshift+0x72>

0800c630 <__mcmp>:
 800c630:	6903      	ldr	r3, [r0, #16]
 800c632:	690a      	ldr	r2, [r1, #16]
 800c634:	1a9b      	subs	r3, r3, r2
 800c636:	b530      	push	{r4, r5, lr}
 800c638:	d10c      	bne.n	800c654 <__mcmp+0x24>
 800c63a:	0092      	lsls	r2, r2, #2
 800c63c:	3014      	adds	r0, #20
 800c63e:	3114      	adds	r1, #20
 800c640:	1884      	adds	r4, r0, r2
 800c642:	4411      	add	r1, r2
 800c644:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c648:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c64c:	4295      	cmp	r5, r2
 800c64e:	d003      	beq.n	800c658 <__mcmp+0x28>
 800c650:	d305      	bcc.n	800c65e <__mcmp+0x2e>
 800c652:	2301      	movs	r3, #1
 800c654:	4618      	mov	r0, r3
 800c656:	bd30      	pop	{r4, r5, pc}
 800c658:	42a0      	cmp	r0, r4
 800c65a:	d3f3      	bcc.n	800c644 <__mcmp+0x14>
 800c65c:	e7fa      	b.n	800c654 <__mcmp+0x24>
 800c65e:	f04f 33ff 	mov.w	r3, #4294967295
 800c662:	e7f7      	b.n	800c654 <__mcmp+0x24>

0800c664 <__mdiff>:
 800c664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c668:	460d      	mov	r5, r1
 800c66a:	4607      	mov	r7, r0
 800c66c:	4611      	mov	r1, r2
 800c66e:	4628      	mov	r0, r5
 800c670:	4614      	mov	r4, r2
 800c672:	f7ff ffdd 	bl	800c630 <__mcmp>
 800c676:	1e06      	subs	r6, r0, #0
 800c678:	d108      	bne.n	800c68c <__mdiff+0x28>
 800c67a:	4631      	mov	r1, r6
 800c67c:	4638      	mov	r0, r7
 800c67e:	f7ff fdc2 	bl	800c206 <_Balloc>
 800c682:	2301      	movs	r3, #1
 800c684:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c68c:	bfa4      	itt	ge
 800c68e:	4623      	movge	r3, r4
 800c690:	462c      	movge	r4, r5
 800c692:	4638      	mov	r0, r7
 800c694:	6861      	ldr	r1, [r4, #4]
 800c696:	bfa6      	itte	ge
 800c698:	461d      	movge	r5, r3
 800c69a:	2600      	movge	r6, #0
 800c69c:	2601      	movlt	r6, #1
 800c69e:	f7ff fdb2 	bl	800c206 <_Balloc>
 800c6a2:	692b      	ldr	r3, [r5, #16]
 800c6a4:	60c6      	str	r6, [r0, #12]
 800c6a6:	6926      	ldr	r6, [r4, #16]
 800c6a8:	f105 0914 	add.w	r9, r5, #20
 800c6ac:	f104 0214 	add.w	r2, r4, #20
 800c6b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c6b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c6b8:	f100 0514 	add.w	r5, r0, #20
 800c6bc:	f04f 0e00 	mov.w	lr, #0
 800c6c0:	f852 ab04 	ldr.w	sl, [r2], #4
 800c6c4:	f859 4b04 	ldr.w	r4, [r9], #4
 800c6c8:	fa1e f18a 	uxtah	r1, lr, sl
 800c6cc:	b2a3      	uxth	r3, r4
 800c6ce:	1ac9      	subs	r1, r1, r3
 800c6d0:	0c23      	lsrs	r3, r4, #16
 800c6d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c6d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c6da:	b289      	uxth	r1, r1
 800c6dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c6e0:	45c8      	cmp	r8, r9
 800c6e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c6e6:	4694      	mov	ip, r2
 800c6e8:	f845 3b04 	str.w	r3, [r5], #4
 800c6ec:	d8e8      	bhi.n	800c6c0 <__mdiff+0x5c>
 800c6ee:	45bc      	cmp	ip, r7
 800c6f0:	d304      	bcc.n	800c6fc <__mdiff+0x98>
 800c6f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c6f6:	b183      	cbz	r3, 800c71a <__mdiff+0xb6>
 800c6f8:	6106      	str	r6, [r0, #16]
 800c6fa:	e7c5      	b.n	800c688 <__mdiff+0x24>
 800c6fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c700:	fa1e f381 	uxtah	r3, lr, r1
 800c704:	141a      	asrs	r2, r3, #16
 800c706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c710:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c714:	f845 3b04 	str.w	r3, [r5], #4
 800c718:	e7e9      	b.n	800c6ee <__mdiff+0x8a>
 800c71a:	3e01      	subs	r6, #1
 800c71c:	e7e9      	b.n	800c6f2 <__mdiff+0x8e>

0800c71e <__d2b>:
 800c71e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c722:	460e      	mov	r6, r1
 800c724:	2101      	movs	r1, #1
 800c726:	ec59 8b10 	vmov	r8, r9, d0
 800c72a:	4615      	mov	r5, r2
 800c72c:	f7ff fd6b 	bl	800c206 <_Balloc>
 800c730:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c734:	4607      	mov	r7, r0
 800c736:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c73a:	bb34      	cbnz	r4, 800c78a <__d2b+0x6c>
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	f1b8 0300 	subs.w	r3, r8, #0
 800c742:	d027      	beq.n	800c794 <__d2b+0x76>
 800c744:	a802      	add	r0, sp, #8
 800c746:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c74a:	f7ff fe01 	bl	800c350 <__lo0bits>
 800c74e:	9900      	ldr	r1, [sp, #0]
 800c750:	b1f0      	cbz	r0, 800c790 <__d2b+0x72>
 800c752:	9a01      	ldr	r2, [sp, #4]
 800c754:	f1c0 0320 	rsb	r3, r0, #32
 800c758:	fa02 f303 	lsl.w	r3, r2, r3
 800c75c:	430b      	orrs	r3, r1
 800c75e:	40c2      	lsrs	r2, r0
 800c760:	617b      	str	r3, [r7, #20]
 800c762:	9201      	str	r2, [sp, #4]
 800c764:	9b01      	ldr	r3, [sp, #4]
 800c766:	61bb      	str	r3, [r7, #24]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bf14      	ite	ne
 800c76c:	2102      	movne	r1, #2
 800c76e:	2101      	moveq	r1, #1
 800c770:	6139      	str	r1, [r7, #16]
 800c772:	b1c4      	cbz	r4, 800c7a6 <__d2b+0x88>
 800c774:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c778:	4404      	add	r4, r0
 800c77a:	6034      	str	r4, [r6, #0]
 800c77c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c780:	6028      	str	r0, [r5, #0]
 800c782:	4638      	mov	r0, r7
 800c784:	b003      	add	sp, #12
 800c786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c78a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c78e:	e7d5      	b.n	800c73c <__d2b+0x1e>
 800c790:	6179      	str	r1, [r7, #20]
 800c792:	e7e7      	b.n	800c764 <__d2b+0x46>
 800c794:	a801      	add	r0, sp, #4
 800c796:	f7ff fddb 	bl	800c350 <__lo0bits>
 800c79a:	9b01      	ldr	r3, [sp, #4]
 800c79c:	617b      	str	r3, [r7, #20]
 800c79e:	2101      	movs	r1, #1
 800c7a0:	6139      	str	r1, [r7, #16]
 800c7a2:	3020      	adds	r0, #32
 800c7a4:	e7e5      	b.n	800c772 <__d2b+0x54>
 800c7a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c7aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c7ae:	6030      	str	r0, [r6, #0]
 800c7b0:	6918      	ldr	r0, [r3, #16]
 800c7b2:	f7ff fdae 	bl	800c312 <__hi0bits>
 800c7b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c7ba:	e7e1      	b.n	800c780 <__d2b+0x62>

0800c7bc <_calloc_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	fb02 f401 	mul.w	r4, r2, r1
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	f7fe f9d8 	bl	800ab78 <_malloc_r>
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	b118      	cbz	r0, 800c7d4 <_calloc_r+0x18>
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	f7fe f97c 	bl	800aacc <memset>
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}

0800c7d8 <__ssputs_r>:
 800c7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7dc:	688e      	ldr	r6, [r1, #8]
 800c7de:	429e      	cmp	r6, r3
 800c7e0:	4682      	mov	sl, r0
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	4690      	mov	r8, r2
 800c7e6:	4699      	mov	r9, r3
 800c7e8:	d837      	bhi.n	800c85a <__ssputs_r+0x82>
 800c7ea:	898a      	ldrh	r2, [r1, #12]
 800c7ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7f0:	d031      	beq.n	800c856 <__ssputs_r+0x7e>
 800c7f2:	6825      	ldr	r5, [r4, #0]
 800c7f4:	6909      	ldr	r1, [r1, #16]
 800c7f6:	1a6f      	subs	r7, r5, r1
 800c7f8:	6965      	ldr	r5, [r4, #20]
 800c7fa:	2302      	movs	r3, #2
 800c7fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c800:	fb95 f5f3 	sdiv	r5, r5, r3
 800c804:	f109 0301 	add.w	r3, r9, #1
 800c808:	443b      	add	r3, r7
 800c80a:	429d      	cmp	r5, r3
 800c80c:	bf38      	it	cc
 800c80e:	461d      	movcc	r5, r3
 800c810:	0553      	lsls	r3, r2, #21
 800c812:	d530      	bpl.n	800c876 <__ssputs_r+0x9e>
 800c814:	4629      	mov	r1, r5
 800c816:	f7fe f9af 	bl	800ab78 <_malloc_r>
 800c81a:	4606      	mov	r6, r0
 800c81c:	b950      	cbnz	r0, 800c834 <__ssputs_r+0x5c>
 800c81e:	230c      	movs	r3, #12
 800c820:	f8ca 3000 	str.w	r3, [sl]
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c82a:	81a3      	strh	r3, [r4, #12]
 800c82c:	f04f 30ff 	mov.w	r0, #4294967295
 800c830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c834:	463a      	mov	r2, r7
 800c836:	6921      	ldr	r1, [r4, #16]
 800c838:	f7ff fcd8 	bl	800c1ec <memcpy>
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c846:	81a3      	strh	r3, [r4, #12]
 800c848:	6126      	str	r6, [r4, #16]
 800c84a:	6165      	str	r5, [r4, #20]
 800c84c:	443e      	add	r6, r7
 800c84e:	1bed      	subs	r5, r5, r7
 800c850:	6026      	str	r6, [r4, #0]
 800c852:	60a5      	str	r5, [r4, #8]
 800c854:	464e      	mov	r6, r9
 800c856:	454e      	cmp	r6, r9
 800c858:	d900      	bls.n	800c85c <__ssputs_r+0x84>
 800c85a:	464e      	mov	r6, r9
 800c85c:	4632      	mov	r2, r6
 800c85e:	4641      	mov	r1, r8
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	f000 f91d 	bl	800caa0 <memmove>
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	1b9b      	subs	r3, r3, r6
 800c86a:	60a3      	str	r3, [r4, #8]
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	441e      	add	r6, r3
 800c870:	6026      	str	r6, [r4, #0]
 800c872:	2000      	movs	r0, #0
 800c874:	e7dc      	b.n	800c830 <__ssputs_r+0x58>
 800c876:	462a      	mov	r2, r5
 800c878:	f000 f92b 	bl	800cad2 <_realloc_r>
 800c87c:	4606      	mov	r6, r0
 800c87e:	2800      	cmp	r0, #0
 800c880:	d1e2      	bne.n	800c848 <__ssputs_r+0x70>
 800c882:	6921      	ldr	r1, [r4, #16]
 800c884:	4650      	mov	r0, sl
 800c886:	f7fe f929 	bl	800aadc <_free_r>
 800c88a:	e7c8      	b.n	800c81e <__ssputs_r+0x46>

0800c88c <_svfiprintf_r>:
 800c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	461d      	mov	r5, r3
 800c892:	898b      	ldrh	r3, [r1, #12]
 800c894:	061f      	lsls	r7, r3, #24
 800c896:	b09d      	sub	sp, #116	; 0x74
 800c898:	4680      	mov	r8, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	4616      	mov	r6, r2
 800c89e:	d50f      	bpl.n	800c8c0 <_svfiprintf_r+0x34>
 800c8a0:	690b      	ldr	r3, [r1, #16]
 800c8a2:	b96b      	cbnz	r3, 800c8c0 <_svfiprintf_r+0x34>
 800c8a4:	2140      	movs	r1, #64	; 0x40
 800c8a6:	f7fe f967 	bl	800ab78 <_malloc_r>
 800c8aa:	6020      	str	r0, [r4, #0]
 800c8ac:	6120      	str	r0, [r4, #16]
 800c8ae:	b928      	cbnz	r0, 800c8bc <_svfiprintf_r+0x30>
 800c8b0:	230c      	movs	r3, #12
 800c8b2:	f8c8 3000 	str.w	r3, [r8]
 800c8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ba:	e0c8      	b.n	800ca4e <_svfiprintf_r+0x1c2>
 800c8bc:	2340      	movs	r3, #64	; 0x40
 800c8be:	6163      	str	r3, [r4, #20]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c4:	2320      	movs	r3, #32
 800c8c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8ca:	2330      	movs	r3, #48	; 0x30
 800c8cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8d0:	9503      	str	r5, [sp, #12]
 800c8d2:	f04f 0b01 	mov.w	fp, #1
 800c8d6:	4637      	mov	r7, r6
 800c8d8:	463d      	mov	r5, r7
 800c8da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c8de:	b10b      	cbz	r3, 800c8e4 <_svfiprintf_r+0x58>
 800c8e0:	2b25      	cmp	r3, #37	; 0x25
 800c8e2:	d13e      	bne.n	800c962 <_svfiprintf_r+0xd6>
 800c8e4:	ebb7 0a06 	subs.w	sl, r7, r6
 800c8e8:	d00b      	beq.n	800c902 <_svfiprintf_r+0x76>
 800c8ea:	4653      	mov	r3, sl
 800c8ec:	4632      	mov	r2, r6
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	4640      	mov	r0, r8
 800c8f2:	f7ff ff71 	bl	800c7d8 <__ssputs_r>
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	f000 80a4 	beq.w	800ca44 <_svfiprintf_r+0x1b8>
 800c8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8fe:	4453      	add	r3, sl
 800c900:	9309      	str	r3, [sp, #36]	; 0x24
 800c902:	783b      	ldrb	r3, [r7, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	f000 809d 	beq.w	800ca44 <_svfiprintf_r+0x1b8>
 800c90a:	2300      	movs	r3, #0
 800c90c:	f04f 32ff 	mov.w	r2, #4294967295
 800c910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c914:	9304      	str	r3, [sp, #16]
 800c916:	9307      	str	r3, [sp, #28]
 800c918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c91c:	931a      	str	r3, [sp, #104]	; 0x68
 800c91e:	462f      	mov	r7, r5
 800c920:	2205      	movs	r2, #5
 800c922:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c926:	4850      	ldr	r0, [pc, #320]	; (800ca68 <_svfiprintf_r+0x1dc>)
 800c928:	f7f3 fc5a 	bl	80001e0 <memchr>
 800c92c:	9b04      	ldr	r3, [sp, #16]
 800c92e:	b9d0      	cbnz	r0, 800c966 <_svfiprintf_r+0xda>
 800c930:	06d9      	lsls	r1, r3, #27
 800c932:	bf44      	itt	mi
 800c934:	2220      	movmi	r2, #32
 800c936:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c93a:	071a      	lsls	r2, r3, #28
 800c93c:	bf44      	itt	mi
 800c93e:	222b      	movmi	r2, #43	; 0x2b
 800c940:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c944:	782a      	ldrb	r2, [r5, #0]
 800c946:	2a2a      	cmp	r2, #42	; 0x2a
 800c948:	d015      	beq.n	800c976 <_svfiprintf_r+0xea>
 800c94a:	9a07      	ldr	r2, [sp, #28]
 800c94c:	462f      	mov	r7, r5
 800c94e:	2000      	movs	r0, #0
 800c950:	250a      	movs	r5, #10
 800c952:	4639      	mov	r1, r7
 800c954:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c958:	3b30      	subs	r3, #48	; 0x30
 800c95a:	2b09      	cmp	r3, #9
 800c95c:	d94d      	bls.n	800c9fa <_svfiprintf_r+0x16e>
 800c95e:	b1b8      	cbz	r0, 800c990 <_svfiprintf_r+0x104>
 800c960:	e00f      	b.n	800c982 <_svfiprintf_r+0xf6>
 800c962:	462f      	mov	r7, r5
 800c964:	e7b8      	b.n	800c8d8 <_svfiprintf_r+0x4c>
 800c966:	4a40      	ldr	r2, [pc, #256]	; (800ca68 <_svfiprintf_r+0x1dc>)
 800c968:	1a80      	subs	r0, r0, r2
 800c96a:	fa0b f000 	lsl.w	r0, fp, r0
 800c96e:	4318      	orrs	r0, r3
 800c970:	9004      	str	r0, [sp, #16]
 800c972:	463d      	mov	r5, r7
 800c974:	e7d3      	b.n	800c91e <_svfiprintf_r+0x92>
 800c976:	9a03      	ldr	r2, [sp, #12]
 800c978:	1d11      	adds	r1, r2, #4
 800c97a:	6812      	ldr	r2, [r2, #0]
 800c97c:	9103      	str	r1, [sp, #12]
 800c97e:	2a00      	cmp	r2, #0
 800c980:	db01      	blt.n	800c986 <_svfiprintf_r+0xfa>
 800c982:	9207      	str	r2, [sp, #28]
 800c984:	e004      	b.n	800c990 <_svfiprintf_r+0x104>
 800c986:	4252      	negs	r2, r2
 800c988:	f043 0302 	orr.w	r3, r3, #2
 800c98c:	9207      	str	r2, [sp, #28]
 800c98e:	9304      	str	r3, [sp, #16]
 800c990:	783b      	ldrb	r3, [r7, #0]
 800c992:	2b2e      	cmp	r3, #46	; 0x2e
 800c994:	d10c      	bne.n	800c9b0 <_svfiprintf_r+0x124>
 800c996:	787b      	ldrb	r3, [r7, #1]
 800c998:	2b2a      	cmp	r3, #42	; 0x2a
 800c99a:	d133      	bne.n	800ca04 <_svfiprintf_r+0x178>
 800c99c:	9b03      	ldr	r3, [sp, #12]
 800c99e:	1d1a      	adds	r2, r3, #4
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	9203      	str	r2, [sp, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	bfb8      	it	lt
 800c9a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9ac:	3702      	adds	r7, #2
 800c9ae:	9305      	str	r3, [sp, #20]
 800c9b0:	4d2e      	ldr	r5, [pc, #184]	; (800ca6c <_svfiprintf_r+0x1e0>)
 800c9b2:	7839      	ldrb	r1, [r7, #0]
 800c9b4:	2203      	movs	r2, #3
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	f7f3 fc12 	bl	80001e0 <memchr>
 800c9bc:	b138      	cbz	r0, 800c9ce <_svfiprintf_r+0x142>
 800c9be:	2340      	movs	r3, #64	; 0x40
 800c9c0:	1b40      	subs	r0, r0, r5
 800c9c2:	fa03 f000 	lsl.w	r0, r3, r0
 800c9c6:	9b04      	ldr	r3, [sp, #16]
 800c9c8:	4303      	orrs	r3, r0
 800c9ca:	3701      	adds	r7, #1
 800c9cc:	9304      	str	r3, [sp, #16]
 800c9ce:	7839      	ldrb	r1, [r7, #0]
 800c9d0:	4827      	ldr	r0, [pc, #156]	; (800ca70 <_svfiprintf_r+0x1e4>)
 800c9d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9d6:	2206      	movs	r2, #6
 800c9d8:	1c7e      	adds	r6, r7, #1
 800c9da:	f7f3 fc01 	bl	80001e0 <memchr>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d038      	beq.n	800ca54 <_svfiprintf_r+0x1c8>
 800c9e2:	4b24      	ldr	r3, [pc, #144]	; (800ca74 <_svfiprintf_r+0x1e8>)
 800c9e4:	bb13      	cbnz	r3, 800ca2c <_svfiprintf_r+0x1a0>
 800c9e6:	9b03      	ldr	r3, [sp, #12]
 800c9e8:	3307      	adds	r3, #7
 800c9ea:	f023 0307 	bic.w	r3, r3, #7
 800c9ee:	3308      	adds	r3, #8
 800c9f0:	9303      	str	r3, [sp, #12]
 800c9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9f4:	444b      	add	r3, r9
 800c9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f8:	e76d      	b.n	800c8d6 <_svfiprintf_r+0x4a>
 800c9fa:	fb05 3202 	mla	r2, r5, r2, r3
 800c9fe:	2001      	movs	r0, #1
 800ca00:	460f      	mov	r7, r1
 800ca02:	e7a6      	b.n	800c952 <_svfiprintf_r+0xc6>
 800ca04:	2300      	movs	r3, #0
 800ca06:	3701      	adds	r7, #1
 800ca08:	9305      	str	r3, [sp, #20]
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	250a      	movs	r5, #10
 800ca0e:	4638      	mov	r0, r7
 800ca10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca14:	3a30      	subs	r2, #48	; 0x30
 800ca16:	2a09      	cmp	r2, #9
 800ca18:	d903      	bls.n	800ca22 <_svfiprintf_r+0x196>
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d0c8      	beq.n	800c9b0 <_svfiprintf_r+0x124>
 800ca1e:	9105      	str	r1, [sp, #20]
 800ca20:	e7c6      	b.n	800c9b0 <_svfiprintf_r+0x124>
 800ca22:	fb05 2101 	mla	r1, r5, r1, r2
 800ca26:	2301      	movs	r3, #1
 800ca28:	4607      	mov	r7, r0
 800ca2a:	e7f0      	b.n	800ca0e <_svfiprintf_r+0x182>
 800ca2c:	ab03      	add	r3, sp, #12
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	4622      	mov	r2, r4
 800ca32:	4b11      	ldr	r3, [pc, #68]	; (800ca78 <_svfiprintf_r+0x1ec>)
 800ca34:	a904      	add	r1, sp, #16
 800ca36:	4640      	mov	r0, r8
 800ca38:	f7fe f98c 	bl	800ad54 <_printf_float>
 800ca3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ca40:	4681      	mov	r9, r0
 800ca42:	d1d6      	bne.n	800c9f2 <_svfiprintf_r+0x166>
 800ca44:	89a3      	ldrh	r3, [r4, #12]
 800ca46:	065b      	lsls	r3, r3, #25
 800ca48:	f53f af35 	bmi.w	800c8b6 <_svfiprintf_r+0x2a>
 800ca4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca4e:	b01d      	add	sp, #116	; 0x74
 800ca50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca54:	ab03      	add	r3, sp, #12
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	4622      	mov	r2, r4
 800ca5a:	4b07      	ldr	r3, [pc, #28]	; (800ca78 <_svfiprintf_r+0x1ec>)
 800ca5c:	a904      	add	r1, sp, #16
 800ca5e:	4640      	mov	r0, r8
 800ca60:	f7fe fc2e 	bl	800b2c0 <_printf_i>
 800ca64:	e7ea      	b.n	800ca3c <_svfiprintf_r+0x1b0>
 800ca66:	bf00      	nop
 800ca68:	0800cf4c 	.word	0x0800cf4c
 800ca6c:	0800cf52 	.word	0x0800cf52
 800ca70:	0800cf56 	.word	0x0800cf56
 800ca74:	0800ad55 	.word	0x0800ad55
 800ca78:	0800c7d9 	.word	0x0800c7d9

0800ca7c <__ascii_mbtowc>:
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	b901      	cbnz	r1, 800ca82 <__ascii_mbtowc+0x6>
 800ca80:	a901      	add	r1, sp, #4
 800ca82:	b142      	cbz	r2, 800ca96 <__ascii_mbtowc+0x1a>
 800ca84:	b14b      	cbz	r3, 800ca9a <__ascii_mbtowc+0x1e>
 800ca86:	7813      	ldrb	r3, [r2, #0]
 800ca88:	600b      	str	r3, [r1, #0]
 800ca8a:	7812      	ldrb	r2, [r2, #0]
 800ca8c:	1c10      	adds	r0, r2, #0
 800ca8e:	bf18      	it	ne
 800ca90:	2001      	movne	r0, #1
 800ca92:	b002      	add	sp, #8
 800ca94:	4770      	bx	lr
 800ca96:	4610      	mov	r0, r2
 800ca98:	e7fb      	b.n	800ca92 <__ascii_mbtowc+0x16>
 800ca9a:	f06f 0001 	mvn.w	r0, #1
 800ca9e:	e7f8      	b.n	800ca92 <__ascii_mbtowc+0x16>

0800caa0 <memmove>:
 800caa0:	4288      	cmp	r0, r1
 800caa2:	b510      	push	{r4, lr}
 800caa4:	eb01 0302 	add.w	r3, r1, r2
 800caa8:	d807      	bhi.n	800caba <memmove+0x1a>
 800caaa:	1e42      	subs	r2, r0, #1
 800caac:	4299      	cmp	r1, r3
 800caae:	d00a      	beq.n	800cac6 <memmove+0x26>
 800cab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cab4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cab8:	e7f8      	b.n	800caac <memmove+0xc>
 800caba:	4283      	cmp	r3, r0
 800cabc:	d9f5      	bls.n	800caaa <memmove+0xa>
 800cabe:	1881      	adds	r1, r0, r2
 800cac0:	1ad2      	subs	r2, r2, r3
 800cac2:	42d3      	cmn	r3, r2
 800cac4:	d100      	bne.n	800cac8 <memmove+0x28>
 800cac6:	bd10      	pop	{r4, pc}
 800cac8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cacc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cad0:	e7f7      	b.n	800cac2 <memmove+0x22>

0800cad2 <_realloc_r>:
 800cad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad4:	4607      	mov	r7, r0
 800cad6:	4614      	mov	r4, r2
 800cad8:	460e      	mov	r6, r1
 800cada:	b921      	cbnz	r1, 800cae6 <_realloc_r+0x14>
 800cadc:	4611      	mov	r1, r2
 800cade:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cae2:	f7fe b849 	b.w	800ab78 <_malloc_r>
 800cae6:	b922      	cbnz	r2, 800caf2 <_realloc_r+0x20>
 800cae8:	f7fd fff8 	bl	800aadc <_free_r>
 800caec:	4625      	mov	r5, r4
 800caee:	4628      	mov	r0, r5
 800caf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf2:	f000 f821 	bl	800cb38 <_malloc_usable_size_r>
 800caf6:	42a0      	cmp	r0, r4
 800caf8:	d20f      	bcs.n	800cb1a <_realloc_r+0x48>
 800cafa:	4621      	mov	r1, r4
 800cafc:	4638      	mov	r0, r7
 800cafe:	f7fe f83b 	bl	800ab78 <_malloc_r>
 800cb02:	4605      	mov	r5, r0
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d0f2      	beq.n	800caee <_realloc_r+0x1c>
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	f7ff fb6e 	bl	800c1ec <memcpy>
 800cb10:	4631      	mov	r1, r6
 800cb12:	4638      	mov	r0, r7
 800cb14:	f7fd ffe2 	bl	800aadc <_free_r>
 800cb18:	e7e9      	b.n	800caee <_realloc_r+0x1c>
 800cb1a:	4635      	mov	r5, r6
 800cb1c:	e7e7      	b.n	800caee <_realloc_r+0x1c>

0800cb1e <__ascii_wctomb>:
 800cb1e:	b149      	cbz	r1, 800cb34 <__ascii_wctomb+0x16>
 800cb20:	2aff      	cmp	r2, #255	; 0xff
 800cb22:	bf85      	ittet	hi
 800cb24:	238a      	movhi	r3, #138	; 0x8a
 800cb26:	6003      	strhi	r3, [r0, #0]
 800cb28:	700a      	strbls	r2, [r1, #0]
 800cb2a:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb2e:	bf98      	it	ls
 800cb30:	2001      	movls	r0, #1
 800cb32:	4770      	bx	lr
 800cb34:	4608      	mov	r0, r1
 800cb36:	4770      	bx	lr

0800cb38 <_malloc_usable_size_r>:
 800cb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb3c:	1f18      	subs	r0, r3, #4
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	bfbc      	itt	lt
 800cb42:	580b      	ldrlt	r3, [r1, r0]
 800cb44:	18c0      	addlt	r0, r0, r3
 800cb46:	4770      	bx	lr

0800cb48 <ceil>:
 800cb48:	ec51 0b10 	vmov	r0, r1, d0
 800cb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cb54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cb58:	2e13      	cmp	r6, #19
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	ee10 5a10 	vmov	r5, s0
 800cb60:	4680      	mov	r8, r0
 800cb62:	dc30      	bgt.n	800cbc6 <ceil+0x7e>
 800cb64:	2e00      	cmp	r6, #0
 800cb66:	da12      	bge.n	800cb8e <ceil+0x46>
 800cb68:	a333      	add	r3, pc, #204	; (adr r3, 800cc38 <ceil+0xf0>)
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	f7f3 fb8d 	bl	800028c <__adddf3>
 800cb72:	2200      	movs	r2, #0
 800cb74:	2300      	movs	r3, #0
 800cb76:	f7f3 ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 800cb7a:	b128      	cbz	r0, 800cb88 <ceil+0x40>
 800cb7c:	2c00      	cmp	r4, #0
 800cb7e:	db55      	blt.n	800cc2c <ceil+0xe4>
 800cb80:	432c      	orrs	r4, r5
 800cb82:	d057      	beq.n	800cc34 <ceil+0xec>
 800cb84:	4c2e      	ldr	r4, [pc, #184]	; (800cc40 <ceil+0xf8>)
 800cb86:	2500      	movs	r5, #0
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	e025      	b.n	800cbda <ceil+0x92>
 800cb8e:	4f2d      	ldr	r7, [pc, #180]	; (800cc44 <ceil+0xfc>)
 800cb90:	4137      	asrs	r7, r6
 800cb92:	ea01 0307 	and.w	r3, r1, r7
 800cb96:	4303      	orrs	r3, r0
 800cb98:	d01f      	beq.n	800cbda <ceil+0x92>
 800cb9a:	a327      	add	r3, pc, #156	; (adr r3, 800cc38 <ceil+0xf0>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fb74 	bl	800028c <__adddf3>
 800cba4:	2200      	movs	r2, #0
 800cba6:	2300      	movs	r3, #0
 800cba8:	f7f3 ffb6 	bl	8000b18 <__aeabi_dcmpgt>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d0eb      	beq.n	800cb88 <ceil+0x40>
 800cbb0:	2c00      	cmp	r4, #0
 800cbb2:	bfc2      	ittt	gt
 800cbb4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800cbb8:	fa43 f606 	asrgt.w	r6, r3, r6
 800cbbc:	19a4      	addgt	r4, r4, r6
 800cbbe:	ea24 0407 	bic.w	r4, r4, r7
 800cbc2:	2500      	movs	r5, #0
 800cbc4:	e7e0      	b.n	800cb88 <ceil+0x40>
 800cbc6:	2e33      	cmp	r6, #51	; 0x33
 800cbc8:	dd0b      	ble.n	800cbe2 <ceil+0x9a>
 800cbca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cbce:	d104      	bne.n	800cbda <ceil+0x92>
 800cbd0:	ee10 2a10 	vmov	r2, s0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	f7f3 fb59 	bl	800028c <__adddf3>
 800cbda:	ec41 0b10 	vmov	d0, r0, r1
 800cbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbea:	fa23 f707 	lsr.w	r7, r3, r7
 800cbee:	4207      	tst	r7, r0
 800cbf0:	d0f3      	beq.n	800cbda <ceil+0x92>
 800cbf2:	a311      	add	r3, pc, #68	; (adr r3, 800cc38 <ceil+0xf0>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 fb48 	bl	800028c <__adddf3>
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f7f3 ff8a 	bl	8000b18 <__aeabi_dcmpgt>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d0bf      	beq.n	800cb88 <ceil+0x40>
 800cc08:	2c00      	cmp	r4, #0
 800cc0a:	dd02      	ble.n	800cc12 <ceil+0xca>
 800cc0c:	2e14      	cmp	r6, #20
 800cc0e:	d103      	bne.n	800cc18 <ceil+0xd0>
 800cc10:	3401      	adds	r4, #1
 800cc12:	ea25 0507 	bic.w	r5, r5, r7
 800cc16:	e7b7      	b.n	800cb88 <ceil+0x40>
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cc1e:	fa03 f606 	lsl.w	r6, r3, r6
 800cc22:	4435      	add	r5, r6
 800cc24:	4545      	cmp	r5, r8
 800cc26:	bf38      	it	cc
 800cc28:	18e4      	addcc	r4, r4, r3
 800cc2a:	e7f2      	b.n	800cc12 <ceil+0xca>
 800cc2c:	2500      	movs	r5, #0
 800cc2e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cc32:	e7a9      	b.n	800cb88 <ceil+0x40>
 800cc34:	4625      	mov	r5, r4
 800cc36:	e7a7      	b.n	800cb88 <ceil+0x40>
 800cc38:	8800759c 	.word	0x8800759c
 800cc3c:	7e37e43c 	.word	0x7e37e43c
 800cc40:	3ff00000 	.word	0x3ff00000
 800cc44:	000fffff 	.word	0x000fffff

0800cc48 <floor>:
 800cc48:	ec51 0b10 	vmov	r0, r1, d0
 800cc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cc54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cc58:	2e13      	cmp	r6, #19
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	ee10 5a10 	vmov	r5, s0
 800cc60:	4680      	mov	r8, r0
 800cc62:	dc34      	bgt.n	800ccce <floor+0x86>
 800cc64:	2e00      	cmp	r6, #0
 800cc66:	da16      	bge.n	800cc96 <floor+0x4e>
 800cc68:	a335      	add	r3, pc, #212	; (adr r3, 800cd40 <floor+0xf8>)
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	f7f3 fb0d 	bl	800028c <__adddf3>
 800cc72:	2200      	movs	r2, #0
 800cc74:	2300      	movs	r3, #0
 800cc76:	f7f3 ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 800cc7a:	b148      	cbz	r0, 800cc90 <floor+0x48>
 800cc7c:	2c00      	cmp	r4, #0
 800cc7e:	da59      	bge.n	800cd34 <floor+0xec>
 800cc80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cc84:	4a30      	ldr	r2, [pc, #192]	; (800cd48 <floor+0x100>)
 800cc86:	432b      	orrs	r3, r5
 800cc88:	2500      	movs	r5, #0
 800cc8a:	42ab      	cmp	r3, r5
 800cc8c:	bf18      	it	ne
 800cc8e:	4614      	movne	r4, r2
 800cc90:	4621      	mov	r1, r4
 800cc92:	4628      	mov	r0, r5
 800cc94:	e025      	b.n	800cce2 <floor+0x9a>
 800cc96:	4f2d      	ldr	r7, [pc, #180]	; (800cd4c <floor+0x104>)
 800cc98:	4137      	asrs	r7, r6
 800cc9a:	ea01 0307 	and.w	r3, r1, r7
 800cc9e:	4303      	orrs	r3, r0
 800cca0:	d01f      	beq.n	800cce2 <floor+0x9a>
 800cca2:	a327      	add	r3, pc, #156	; (adr r3, 800cd40 <floor+0xf8>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	f7f3 faf0 	bl	800028c <__adddf3>
 800ccac:	2200      	movs	r2, #0
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f7f3 ff32 	bl	8000b18 <__aeabi_dcmpgt>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d0eb      	beq.n	800cc90 <floor+0x48>
 800ccb8:	2c00      	cmp	r4, #0
 800ccba:	bfbe      	ittt	lt
 800ccbc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ccc0:	fa43 f606 	asrlt.w	r6, r3, r6
 800ccc4:	19a4      	addlt	r4, r4, r6
 800ccc6:	ea24 0407 	bic.w	r4, r4, r7
 800ccca:	2500      	movs	r5, #0
 800cccc:	e7e0      	b.n	800cc90 <floor+0x48>
 800ccce:	2e33      	cmp	r6, #51	; 0x33
 800ccd0:	dd0b      	ble.n	800ccea <floor+0xa2>
 800ccd2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ccd6:	d104      	bne.n	800cce2 <floor+0x9a>
 800ccd8:	ee10 2a10 	vmov	r2, s0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	f7f3 fad5 	bl	800028c <__adddf3>
 800cce2:	ec41 0b10 	vmov	d0, r0, r1
 800cce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ccee:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf2:	fa23 f707 	lsr.w	r7, r3, r7
 800ccf6:	4207      	tst	r7, r0
 800ccf8:	d0f3      	beq.n	800cce2 <floor+0x9a>
 800ccfa:	a311      	add	r3, pc, #68	; (adr r3, 800cd40 <floor+0xf8>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	f7f3 fac4 	bl	800028c <__adddf3>
 800cd04:	2200      	movs	r2, #0
 800cd06:	2300      	movs	r3, #0
 800cd08:	f7f3 ff06 	bl	8000b18 <__aeabi_dcmpgt>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d0bf      	beq.n	800cc90 <floor+0x48>
 800cd10:	2c00      	cmp	r4, #0
 800cd12:	da02      	bge.n	800cd1a <floor+0xd2>
 800cd14:	2e14      	cmp	r6, #20
 800cd16:	d103      	bne.n	800cd20 <floor+0xd8>
 800cd18:	3401      	adds	r4, #1
 800cd1a:	ea25 0507 	bic.w	r5, r5, r7
 800cd1e:	e7b7      	b.n	800cc90 <floor+0x48>
 800cd20:	2301      	movs	r3, #1
 800cd22:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd26:	fa03 f606 	lsl.w	r6, r3, r6
 800cd2a:	4435      	add	r5, r6
 800cd2c:	4545      	cmp	r5, r8
 800cd2e:	bf38      	it	cc
 800cd30:	18e4      	addcc	r4, r4, r3
 800cd32:	e7f2      	b.n	800cd1a <floor+0xd2>
 800cd34:	2500      	movs	r5, #0
 800cd36:	462c      	mov	r4, r5
 800cd38:	e7aa      	b.n	800cc90 <floor+0x48>
 800cd3a:	bf00      	nop
 800cd3c:	f3af 8000 	nop.w
 800cd40:	8800759c 	.word	0x8800759c
 800cd44:	7e37e43c 	.word	0x7e37e43c
 800cd48:	bff00000 	.word	0xbff00000
 800cd4c:	000fffff 	.word	0x000fffff

0800cd50 <_init>:
 800cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd52:	bf00      	nop
 800cd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd56:	bc08      	pop	{r3}
 800cd58:	469e      	mov	lr, r3
 800cd5a:	4770      	bx	lr

0800cd5c <_fini>:
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5e:	bf00      	nop
 800cd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd62:	bc08      	pop	{r3}
 800cd64:	469e      	mov	lr, r3
 800cd66:	4770      	bx	lr

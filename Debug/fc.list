
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007488  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007610  08007610  00017610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007678  08007678  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007680  08007680  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001960  200001ec  08007874  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001b4c  08007874  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a60  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fb6  00000000  00000000  00035c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  00038c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00039a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219cc  00000000  00000000  0003a718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea03  00000000  00000000  0005c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb8b5  00000000  00000000  0006aae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012639c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a78  00000000  00000000  00126418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080075f8 	.word	0x080075f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	080075f8 	.word	0x080075f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <BMI088_I2C_Read_Accel_ID>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_Accel_ID(I2C_HandleTypeDef *hi2c)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[8];        // Tx/Rx Buffer

	ret    = HAL_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	75fb      	strb	r3, [r7, #23]
	buf[0] = ACC_CHIP_ID;
 80004d4:	2300      	movs	r3, #0
 80004d6:	733b      	strb	r3, [r7, #12]
    ret = (ret | HAL_I2C_Master_Transmit(hi2c, BMI088_ACC_ADDR << 1, buf, 1, HAL_MAX_DELAY));
 80004d8:	f107 020c 	add.w	r2, r7, #12
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2301      	movs	r3, #1
 80004e4:	2130      	movs	r1, #48	; 0x30
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 ff3e 	bl	8001368 <HAL_I2C_Master_Transmit>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	75fb      	strb	r3, [r7, #23]
	ret = (ret | HAL_I2C_Master_Receive (hi2c, BMI088_ACC_ADDR << 1, buf, 1, HAL_MAX_DELAY));
 80004f6:	f107 020c 	add.w	r2, r7, #12
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	2130      	movs	r1, #48	; 0x30
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f001 f82d 	bl	8001564 <HAL_I2C_Master_Receive>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	7dfb      	ldrb	r3, [r7, #23]
 8000510:	4313      	orrs	r3, r2
 8000512:	75fb      	strb	r3, [r7, #23]
	if (buf[0] != BMI088_ACC_ID){ ret = HAL_ERROR; }
 8000514:	7b3b      	ldrb	r3, [r7, #12]
 8000516:	2b1e      	cmp	r3, #30
 8000518:	d001      	beq.n	800051e <BMI088_I2C_Read_Accel_ID+0x56>
 800051a:	2301      	movs	r3, #1
 800051c:	75fb      	strb	r3, [r7, #23]
	buf[0] = GYRO_CHIP_ID;
 800051e:	2300      	movs	r3, #0
 8000520:	733b      	strb	r3, [r7, #12]
	ret = (ret | HAL_I2C_Master_Transmit(hi2c, BMI088_GYRO_ADDR << 1, buf, 1, HAL_MAX_DELAY));
 8000522:	f107 020c 	add.w	r2, r7, #12
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	21d0      	movs	r1, #208	; 0xd0
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 ff19 	bl	8001368 <HAL_I2C_Master_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	4313      	orrs	r3, r2
 800053e:	75fb      	strb	r3, [r7, #23]
	ret = (ret | HAL_I2C_Master_Receive (hi2c, BMI088_GYRO_ADDR << 1, buf, 1, HAL_MAX_DELAY));
 8000540:	f107 020c 	add.w	r2, r7, #12
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	21d0      	movs	r1, #208	; 0xd0
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f001 f808 	bl	8001564 <HAL_I2C_Master_Receive>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	4313      	orrs	r3, r2
 800055c:	75fb      	strb	r3, [r7, #23]
	if (buf[0] != BMI088_GYRO_ID){ ret = HAL_ERROR; }
 800055e:	7b3b      	ldrb	r3, [r7, #12]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d001      	beq.n	8000568 <BMI088_I2C_Read_Accel_ID+0xa0>
 8000564:	2301      	movs	r3, #1
 8000566:	75fb      	strb	r3, [r7, #23]

	return ret;
 8000568:	7dfb      	ldrb	r3, [r7, #23]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fa49 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f81f 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8b7 	bl	80006f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000586:	f000 f887 	bl	8000698 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800058a:	f006 fa27 	bl	80069dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_Accel_ID(&hi2c1) != HAL_OK ) { Error_Handler(); }
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <main+0x44>)
 8000590:	f7ff ff9a 	bl	80004c8 <BMI088_I2C_Read_Accel_ID>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <main+0x2a>
 800059a:	f000 f909 	bl	80007b0 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800059e:	2140      	movs	r1, #64	; 0x40
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <main+0x48>)
 80005a2:	f000 fd8e 	bl	80010c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f000 faa3 	bl	8000af4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <main+0x48>)
 80005b2:	f000 fd86 	bl	80010c2 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80005b6:	e7f2      	b.n	800059e <main+0x2a>
 80005b8:	20000218 	.word	0x20000218
 80005bc:	40020800 	.word	0x40020800

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 ff50 	bl	8007474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b29      	ldr	r3, [pc, #164]	; (8000690 <SystemClock_Config+0xd0>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a28      	ldr	r2, [pc, #160]	; (8000690 <SystemClock_Config+0xd0>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <SystemClock_Config+0xd0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <SystemClock_Config+0xd4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <SystemClock_Config+0xd4>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <SystemClock_Config+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800061c:	2303      	movs	r3, #3
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000638:	2310      	movs	r3, #16
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800063c:	23c0      	movs	r3, #192	; 0xc0
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fe5f 	bl	8003310 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000658:	f000 f8aa 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f8ba 	bl	80037f0 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000682:	f000 f895 	bl	80007b0 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_I2C1_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006d6:	f000 fd0f 	bl	80010f8 <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 f866 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000218 	.word	0x20000218
 80006ec:	40005400 	.word	0x40005400
 80006f0:	00061a80 	.word	0x00061a80

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	21c0      	movs	r1, #192	; 0xc0
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0xb8>)
 8000780:	f000 fc86 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000784:	23c0      	movs	r3, #192	; 0xc0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0xb8>)
 800079c:	f000 fade 	bl	8000d5c <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <Error_Handler+0x24>)
 80007bc:	f000 fc68 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <Error_Handler+0x24>)
 80007c6:	f000 fc63 	bl	8001090 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 80007ca:	2106      	movs	r1, #6
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <Error_Handler+0x28>)
 80007ce:	f006 f9d7 	bl	8006b80 <CDC_Transmit_FS>
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <Error_Handler+0x22>
 80007d4:	40020800 	.word	0x40020800
 80007d8:	08007610 	.word	0x08007610

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <HAL_MspInit+0x4c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_I2C_MspInit+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d12c      	bne.n	80008a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_I2C_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <HAL_I2C_MspInit+0x88>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_I2C_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800086a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000870:	2312      	movs	r3, #18
 8000872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	2301      	movs	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800087c:	2304      	movs	r3, #4
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <HAL_I2C_MspInit+0x8c>)
 8000888:	f000 fa68 	bl	8000d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_I2C_MspInit+0x88>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_I2C_MspInit+0x88>)
 8000896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_I2C_MspInit+0x88>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40005400 	.word	0x40005400
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020400 	.word	0x40020400

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f8d4 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <OTG_FS_IRQHandler+0x10>)
 8000916:	f001 fcc8 	bl	80022aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20001740 	.word	0x20001740

08000924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800092c:	4a14      	ldr	r2, [pc, #80]	; (8000980 <_sbrk+0x5c>)
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <_sbrk+0x60>)
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <_sbrk+0x64>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <_sbrk+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d207      	bcs.n	8000964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000954:	f006 fd54 	bl	8007400 <__errno>
 8000958:	4602      	mov	r2, r0
 800095a:	230c      	movs	r3, #12
 800095c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	e009      	b.n	8000978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <_sbrk+0x64>)
 8000974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20020000 	.word	0x20020000
 8000984:	00000400 	.word	0x00000400
 8000988:	20000208 	.word	0x20000208
 800098c:	20001b50 	.word	0x20001b50

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <SystemInit+0x28>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <SystemInit+0x28>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SystemInit+0x28>)
 80009a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009aa:	609a      	str	r2, [r3, #8]
#endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009c2:	e003      	b.n	80009cc <LoopCopyDataInit>

080009c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ca:	3104      	adds	r1, #4

080009cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009d4:	d3f6      	bcc.n	80009c4 <CopyDataInit>
  ldr  r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009d8:	e002      	b.n	80009e0 <LoopFillZerobss>

080009da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009dc:	f842 3b04 	str.w	r3, [r2], #4

080009e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009e4:	d3f9      	bcc.n	80009da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd3 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f006 fd0f 	bl	800740c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fdc1 	bl	8000574 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009f8:	08007688 	.word	0x08007688
  ldr  r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a00:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000a04:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000a08:	20001b4c 	.word	0x20001b4c

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f94d 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff feca 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f965 	bl	8000d42 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f92d 	bl	8000cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	2000026c 	.word	0x2000026c

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2000026c 	.word	0x2000026c

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_Delay+0x40>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff29 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff3e 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff8e 	bl	8000c2c <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff31 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffa2 	bl	8000c94 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e16b      	b.n	8001050 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 815a 	bne.w	800104a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d00b      	beq.n	8000db6 <HAL_GPIO_Init+0x5a>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000daa:	2b11      	cmp	r3, #17
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d130      	bne.n	8000e18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0xfc>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b12      	cmp	r3, #18
 8000e56:	d123      	bne.n	8000ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	69b9      	ldr	r1, [r7, #24]
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0203 	and.w	r2, r3, #3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80b4 	beq.w	800104a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b5f      	ldr	r3, [pc, #380]	; (8001064 <HAL_GPIO_Init+0x308>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a5e      	ldr	r2, [pc, #376]	; (8001064 <HAL_GPIO_Init+0x308>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <HAL_GPIO_Init+0x308>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efe:	4a5a      	ldr	r2, [pc, #360]	; (8001068 <HAL_GPIO_Init+0x30c>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a51      	ldr	r2, [pc, #324]	; (800106c <HAL_GPIO_Init+0x310>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d02b      	beq.n	8000f82 <HAL_GPIO_Init+0x226>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a50      	ldr	r2, [pc, #320]	; (8001070 <HAL_GPIO_Init+0x314>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d025      	beq.n	8000f7e <HAL_GPIO_Init+0x222>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <HAL_GPIO_Init+0x318>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d01f      	beq.n	8000f7a <HAL_GPIO_Init+0x21e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_GPIO_Init+0x31c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x21a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4d      	ldr	r2, [pc, #308]	; (800107c <HAL_GPIO_Init+0x320>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x216>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <HAL_GPIO_Init+0x324>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x212>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_GPIO_Init+0x328>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x20e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <HAL_GPIO_Init+0x32c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x20a>
 8000f62:	2307      	movs	r3, #7
 8000f64:	e00e      	b.n	8000f84 <HAL_GPIO_Init+0x228>
 8000f66:	2308      	movs	r3, #8
 8000f68:	e00c      	b.n	8000f84 <HAL_GPIO_Init+0x228>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e00a      	b.n	8000f84 <HAL_GPIO_Init+0x228>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x228>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x228>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x228>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x228>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x228>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f94:	4934      	ldr	r1, [pc, #208]	; (8001068 <HAL_GPIO_Init+0x30c>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_GPIO_Init+0x330>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <HAL_GPIO_Init+0x330>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_GPIO_Init+0x330>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_GPIO_Init+0x330>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_GPIO_Init+0x330>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <HAL_GPIO_Init+0x330>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_GPIO_Init+0x330>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <HAL_GPIO_Init+0x330>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f ae90 	bls.w	8000d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	3724      	adds	r7, #36	; 0x24
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40021c00 	.word	0x40021c00
 800108c:	40013c00 	.word	0x40013c00

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	401a      	ands	r2, r3
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d104      	bne.n	80010e6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	041a      	lsls	r2, r3, #16
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e11f      	b.n	800134a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fb84 	bl	800082c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2224      	movs	r2, #36	; 0x24
 8001128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0201 	bic.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800114a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800115a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800115c:	f002 fd10 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8001160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a7b      	ldr	r2, [pc, #492]	; (8001354 <HAL_I2C_Init+0x25c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d807      	bhi.n	800117c <HAL_I2C_Init+0x84>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4a7a      	ldr	r2, [pc, #488]	; (8001358 <HAL_I2C_Init+0x260>)
 8001170:	4293      	cmp	r3, r2
 8001172:	bf94      	ite	ls
 8001174:	2301      	movls	r3, #1
 8001176:	2300      	movhi	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	e006      	b.n	800118a <HAL_I2C_Init+0x92>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4a77      	ldr	r2, [pc, #476]	; (800135c <HAL_I2C_Init+0x264>)
 8001180:	4293      	cmp	r3, r2
 8001182:	bf94      	ite	ls
 8001184:	2301      	movls	r3, #1
 8001186:	2300      	movhi	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e0db      	b.n	800134a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4a72      	ldr	r2, [pc, #456]	; (8001360 <HAL_I2C_Init+0x268>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9b      	lsrs	r3, r3, #18
 800119c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a64      	ldr	r2, [pc, #400]	; (8001354 <HAL_I2C_Init+0x25c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d802      	bhi.n	80011cc <HAL_I2C_Init+0xd4>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3301      	adds	r3, #1
 80011ca:	e009      	b.n	80011e0 <HAL_I2C_Init+0xe8>
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	4a63      	ldr	r2, [pc, #396]	; (8001364 <HAL_I2C_Init+0x26c>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	099b      	lsrs	r3, r3, #6
 80011de:	3301      	adds	r3, #1
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4956      	ldr	r1, [pc, #344]	; (8001354 <HAL_I2C_Init+0x25c>)
 80011fc:	428b      	cmp	r3, r1
 80011fe:	d80d      	bhi.n	800121c <HAL_I2C_Init+0x124>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e59      	subs	r1, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fbb1 f3f3 	udiv	r3, r1, r3
 800120e:	3301      	adds	r3, #1
 8001210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001214:	2b04      	cmp	r3, #4
 8001216:	bf38      	it	cc
 8001218:	2304      	movcc	r3, #4
 800121a:	e04f      	b.n	80012bc <HAL_I2C_Init+0x1c4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d111      	bne.n	8001248 <HAL_I2C_Init+0x150>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	440b      	add	r3, r1
 8001232:	fbb0 f3f3 	udiv	r3, r0, r3
 8001236:	3301      	adds	r3, #1
 8001238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	e012      	b.n	800126e <HAL_I2C_Init+0x176>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	0099      	lsls	r1, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_I2C_Init+0x17e>
 8001272:	2301      	movs	r3, #1
 8001274:	e022      	b.n	80012bc <HAL_I2C_Init+0x1c4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10e      	bne.n	800129c <HAL_I2C_Init+0x1a4>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1e58      	subs	r0, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6859      	ldr	r1, [r3, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	440b      	add	r3, r1
 800128c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001290:	3301      	adds	r3, #1
 8001292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129a:	e00f      	b.n	80012bc <HAL_I2C_Init+0x1c4>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	6809      	ldr	r1, [r1, #0]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69da      	ldr	r2, [r3, #28]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6911      	ldr	r1, [r2, #16]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68d2      	ldr	r2, [r2, #12]
 80012f6:	4311      	orrs	r1, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	000186a0 	.word	0x000186a0
 8001358:	001e847f 	.word	0x001e847f
 800135c:	003d08ff 	.word	0x003d08ff
 8001360:	431bde83 	.word	0x431bde83
 8001364:	10624dd3 	.word	0x10624dd3

08001368 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	461a      	mov	r2, r3
 8001374:	460b      	mov	r3, r1
 8001376:	817b      	strh	r3, [r7, #10]
 8001378:	4613      	mov	r3, r2
 800137a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff fbae 	bl	8000adc <HAL_GetTick>
 8001380:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b20      	cmp	r3, #32
 800138c:	f040 80e0 	bne.w	8001550 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2319      	movs	r3, #25
 8001396:	2201      	movs	r2, #1
 8001398:	4970      	ldr	r1, [pc, #448]	; (800155c <HAL_I2C_Master_Transmit+0x1f4>)
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 fc58 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0d3      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_I2C_Master_Transmit+0x50>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e0cc      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d007      	beq.n	80013de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2221      	movs	r2, #33	; 0x21
 80013f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2210      	movs	r2, #16
 80013fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	893a      	ldrh	r2, [r7, #8]
 800140e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a50      	ldr	r2, [pc, #320]	; (8001560 <HAL_I2C_Master_Transmit+0x1f8>)
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001420:	8979      	ldrh	r1, [r7, #10]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	6a3a      	ldr	r2, [r7, #32]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fac2 	bl	80019b0 <I2C_MasterRequestWrite>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e08d      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800144c:	e066      	b.n	800151c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	6a39      	ldr	r1, [r7, #32]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 fcd2 	bl	8001dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00d      	beq.n	800147a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b04      	cmp	r3, #4
 8001464:	d107      	bne.n	8001476 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06b      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d11b      	bne.n	80014f0 <HAL_I2C_Master_Transmit+0x188>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d017      	beq.n	80014f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	6a39      	ldr	r1, [r7, #32]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 fcc2 	bl	8001e7e <I2C_WaitOnBTFFlagUntilTimeout>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00d      	beq.n	800151c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	2b04      	cmp	r3, #4
 8001506:	d107      	bne.n	8001518 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001516:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e01a      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d194      	bne.n	800144e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2220      	movs	r2, #32
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e000      	b.n	8001552 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001550:	2302      	movs	r3, #2
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	00100002 	.word	0x00100002
 8001560:	ffff0000 	.word	0xffff0000

08001564 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af02      	add	r7, sp, #8
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	461a      	mov	r2, r3
 8001570:	460b      	mov	r3, r1
 8001572:	817b      	strh	r3, [r7, #10]
 8001574:	4613      	mov	r3, r2
 8001576:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff fab0 	bl	8000adc <HAL_GetTick>
 800157c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b20      	cmp	r3, #32
 8001588:	f040 820b 	bne.w	80019a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2319      	movs	r3, #25
 8001592:	2201      	movs	r2, #1
 8001594:	497c      	ldr	r1, [pc, #496]	; (8001788 <HAL_I2C_Master_Receive+0x224>)
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fb5a 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80015a2:	2302      	movs	r3, #2
 80015a4:	e1fe      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_I2C_Master_Receive+0x50>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e1f7      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d007      	beq.n	80015da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2222      	movs	r2, #34	; 0x22
 80015ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2210      	movs	r2, #16
 80015f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	893a      	ldrh	r2, [r7, #8]
 800160a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4a5c      	ldr	r2, [pc, #368]	; (800178c <HAL_I2C_Master_Receive+0x228>)
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800161c:	8979      	ldrh	r1, [r7, #10]
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fa46 	bl	8001ab4 <I2C_MasterRequestRead>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e1b8      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	2b00      	cmp	r3, #0
 8001638:	d113      	bne.n	8001662 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e18c      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	2b01      	cmp	r3, #1
 8001668:	d11b      	bne.n	80016a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e16c      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d11b      	bne.n	80016e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	e14c      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001708:	e138      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170e:	2b03      	cmp	r3, #3
 8001710:	f200 80f1 	bhi.w	80018f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	2b01      	cmp	r3, #1
 800171a:	d123      	bne.n	8001764 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 fbed 	bl	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e139      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001762:	e10b      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001768:	2b02      	cmp	r3, #2
 800176a:	d14e      	bne.n	800180a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001772:	2200      	movs	r2, #0
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <HAL_I2C_Master_Receive+0x22c>)
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fa6a 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e10e      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
 8001786:	bf00      	nop
 8001788:	00100002 	.word	0x00100002
 800178c:	ffff0000 	.word	0xffff0000
 8001790:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fe:	b29b      	uxth	r3, r3
 8001800:	3b01      	subs	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001808:	e0b8      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001810:	2200      	movs	r2, #0
 8001812:	4966      	ldr	r1, [pc, #408]	; (80019ac <HAL_I2C_Master_Receive+0x448>)
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fa1b 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0bf      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186c:	2200      	movs	r2, #0
 800186e:	494f      	ldr	r1, [pc, #316]	; (80019ac <HAL_I2C_Master_Receive+0x448>)
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f9ed 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e091      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018f4:	e042      	b.n	800197c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 fb00 	bl	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e04c      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b04      	cmp	r3, #4
 8001948:	d118      	bne.n	800197c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	f47f aec2 	bne.w	800170a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80019a2:	2302      	movs	r3, #2
  }
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	00010004 	.word	0x00010004

080019b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	460b      	mov	r3, r1
 80019be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d006      	beq.n	80019da <I2C_MasterRequestWrite+0x2a>
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d003      	beq.n	80019da <I2C_MasterRequestWrite+0x2a>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019d8:	d108      	bne.n	80019ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e00b      	b.n	8001a04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	2b12      	cmp	r3, #18
 80019f2:	d107      	bne.n	8001a04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f91d 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2a:	d103      	bne.n	8001a34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e035      	b.n	8001aa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a40:	d108      	bne.n	8001a54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a42:	897b      	ldrh	r3, [r7, #10]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	e01b      	b.n	8001a8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a54:	897b      	ldrh	r3, [r7, #10]
 8001a56:	11db      	asrs	r3, r3, #7
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f003 0306 	and.w	r3, r3, #6
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f063 030f 	orn	r3, r3, #15
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <I2C_MasterRequestWrite+0xfc>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f943 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e010      	b.n	8001aa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a82:	897b      	ldrh	r3, [r7, #10]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <I2C_MasterRequestWrite+0x100>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f933 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	00010008 	.word	0x00010008
 8001ab0:	00010002 	.word	0x00010002

08001ab4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d006      	beq.n	8001aee <I2C_MasterRequestRead+0x3a>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d003      	beq.n	8001aee <I2C_MasterRequestRead+0x3a>
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aec:	d108      	bne.n	8001b00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e00b      	b.n	8001b18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	2b11      	cmp	r3, #17
 8001b06:	d107      	bne.n	8001b18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f893 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00d      	beq.n	8001b4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3e:	d103      	bne.n	8001b48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e079      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b54:	d108      	bne.n	8001b68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b56:	897b      	ldrh	r3, [r7, #10]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	e05f      	b.n	8001c28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	11db      	asrs	r3, r3, #7
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 0306 	and.w	r3, r3, #6
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f063 030f 	orn	r3, r3, #15
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	4930      	ldr	r1, [pc, #192]	; (8001c48 <I2C_MasterRequestRead+0x194>)
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f8b9 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e054      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b96:	897b      	ldrh	r3, [r7, #10]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4929      	ldr	r1, [pc, #164]	; (8001c4c <I2C_MasterRequestRead+0x198>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f8a9 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e044      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 f831 	bl	8001c50 <I2C_WaitOnFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c02:	d103      	bne.n	8001c0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e017      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c10:	897b      	ldrh	r3, [r7, #10]
 8001c12:	11db      	asrs	r3, r3, #7
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 0306 	and.w	r3, r3, #6
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f063 030e 	orn	r3, r3, #14
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <I2C_MasterRequestRead+0x198>)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f865 	bl	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	00010008 	.word	0x00010008
 8001c4c:	00010002 	.word	0x00010002

08001c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c60:	e025      	b.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d021      	beq.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6a:	f7fe ff37 	bl	8000adc <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d302      	bcc.n	8001c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d116      	bne.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f043 0220 	orr.w	r2, r3, #32
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e023      	b.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10d      	bne.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	e00c      	b.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d0b6      	beq.n	8001c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d0c:	e051      	b.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1c:	d123      	bne.n	8001d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f043 0204 	orr.w	r2, r3, #4
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e046      	b.n	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d021      	beq.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7fe feb5 	bl	8000adc <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f043 0220 	orr.w	r2, r3, #32
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e020      	b.n	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10c      	bne.n	8001dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	e00b      	b.n	8001dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4013      	ands	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d18d      	bne.n	8001d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e08:	e02d      	b.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f8ce 	bl	8001fac <I2C_IsAcknowledgeFailed>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e02d      	b.n	8001e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d021      	beq.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7fe fe5b 	bl	8000adc <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d116      	bne.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f043 0220 	orr.w	r2, r3, #32
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e007      	b.n	8001e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d1ca      	bne.n	8001e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e8a:	e02d      	b.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f88d 	bl	8001fac <I2C_IsAcknowledgeFailed>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e02d      	b.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d021      	beq.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea4:	f7fe fe1a 	bl	8000adc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d302      	bcc.n	8001eba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d116      	bne.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d1ca      	bne.n	8001e8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f0c:	e042      	b.n	8001f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d119      	bne.n	8001f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0210 	mvn.w	r2, #16
 8001f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e029      	b.n	8001fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f50:	f7fe fdc4 	bl	8000adc <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d302      	bcc.n	8001f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f043 0220 	orr.w	r2, r3, #32
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e007      	b.n	8001fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b40      	cmp	r3, #64	; 0x40
 8001fa0:	d1b5      	bne.n	8001f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d11b      	bne.n	8001ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800200a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200c:	b08f      	sub	sp, #60	; 0x3c
 800200e:	af0a      	add	r7, sp, #40	; 0x28
 8002010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e10f      	b.n	800223c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f004 fee6 	bl	8006e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f001 feb9 	bl	8003dd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	687e      	ldr	r6, [r7, #4]
 8002068:	466d      	mov	r5, sp
 800206a:	f106 0410 	add.w	r4, r6, #16
 800206e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800207a:	e885 0003 	stmia.w	r5, {r0, r1}
 800207e:	1d33      	adds	r3, r6, #4
 8002080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	f001 fd90 	bl	8003ba8 <USB_CoreInit>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2202      	movs	r2, #2
 8002092:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0d0      	b.n	800223c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 fea7 	bl	8003df4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e04a      	b.n	8002142 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	333d      	adds	r3, #61	; 0x3d
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	333c      	adds	r3, #60	; 0x3c
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	b298      	uxth	r0, r3
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3342      	adds	r3, #66	; 0x42
 80020e8:	4602      	mov	r2, r0
 80020ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	333f      	adds	r3, #63	; 0x3f
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3344      	adds	r3, #68	; 0x44
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3348      	adds	r3, #72	; 0x48
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3350      	adds	r3, #80	; 0x50
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	3301      	adds	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d3af      	bcc.n	80020ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e044      	b.n	80021dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	3301      	adds	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3b5      	bcc.n	8002152 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	687e      	ldr	r6, [r7, #4]
 80021ee:	466d      	mov	r5, sp
 80021f0:	f106 0410 	add.w	r4, r6, #16
 80021f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002200:	e885 0003 	stmia.w	r5, {r0, r1}
 8002204:	1d33      	adds	r3, r6, #4
 8002206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f001 fe1d 	bl	8003e48 <USB_DevInit>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e00d      	b.n	800223c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fe65 	bl	8004f04 <USB_DevDisconnect>

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002244 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_PCD_Start+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e020      	b.n	80022a2 <HAL_PCD_Start+0x5e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	2b01      	cmp	r3, #1
 800226e:	d109      	bne.n	8002284 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002274:	2b01      	cmp	r3, #1
 8002276:	d005      	beq.n	8002284 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f001 fd91 	bl	8003db0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fe15 	bl	8004ec2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022aa:	b590      	push	{r4, r7, lr}
 80022ac:	b08d      	sub	sp, #52	; 0x34
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 fed3 	bl	800506c <USB_GetMode>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 839d 	bne.w	8002a08 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fe37 	bl	8004f46 <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8393 	beq.w	8002a06 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fe2e 	bl	8004f46 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d107      	bne.n	8002304 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f002 0202 	and.w	r2, r2, #2
 8002302:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f002 fe1c 	bl	8004f46 <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b10      	cmp	r3, #16
 8002316:	d161      	bne.n	80023dc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0210 	bic.w	r2, r2, #16
 8002326:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f003 020f 	and.w	r2, r3, #15
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	0c5b      	lsrs	r3, r3, #17
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	2b02      	cmp	r3, #2
 8002352:	d124      	bne.n	800239e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d035      	beq.n	80023cc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800236a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	6a38      	ldr	r0, [r7, #32]
 8002374:	f002 fc82 	bl	8004c7c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002384:	441a      	add	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002396:	441a      	add	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	619a      	str	r2, [r3, #24]
 800239c:	e016      	b.n	80023cc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	0c5b      	lsrs	r3, r3, #17
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d110      	bne.n	80023cc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023b0:	2208      	movs	r2, #8
 80023b2:	4619      	mov	r1, r3
 80023b4:	6a38      	ldr	r0, [r7, #32]
 80023b6:	f002 fc61 	bl	8004c7c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c6:	441a      	add	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0210 	orr.w	r2, r2, #16
 80023da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 fdb0 	bl	8004f46 <USB_ReadInterrupts>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023f0:	d16e      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fdb6 	bl	8004f6c <USB_ReadDevAllOutEpInterrupt>
 8002400:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002402:	e062      	b.n	80024ca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d057      	beq.n	80024be <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f002 fddb 	bl	8004fd4 <USB_ReadDevOutEPInterrupt>
 800241e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00c      	beq.n	8002444 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	2301      	movs	r3, #1
 800243a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800243c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fdb0 	bl	8002fa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00c      	beq.n	8002468 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245a:	461a      	mov	r2, r3
 800245c:	2308      	movs	r3, #8
 800245e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 feaa 	bl	80031bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247e:	461a      	mov	r2, r3
 8002480:	2310      	movs	r3, #16
 8002482:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249a:	461a      	mov	r2, r3
 800249c:	2320      	movs	r3, #32
 800249e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b6:	461a      	mov	r2, r3
 80024b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	3301      	adds	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d199      	bne.n	8002404 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 fd36 	bl	8004f46 <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024e4:	f040 80c0 	bne.w	8002668 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fd57 	bl	8004fa0 <USB_ReadDevAllInEpInterrupt>
 80024f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024f8:	e0b2      	b.n	8002660 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a7 	beq.w	8002654 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f002 fd7d 	bl	8005010 <USB_ReadDevInEPInterrupt>
 8002516:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d057      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	2201      	movs	r2, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	69f9      	ldr	r1, [r7, #28]
 800253e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002542:	4013      	ands	r3, r2
 8002544:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002552:	461a      	mov	r2, r3
 8002554:	2301      	movs	r3, #1
 8002556:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d132      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3348      	adds	r3, #72	; 0x48
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4403      	add	r3, r0
 8002580:	3344      	adds	r3, #68	; 0x44
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4419      	add	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4403      	add	r3, r0
 8002594:	3348      	adds	r3, #72	; 0x48
 8002596:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	2b00      	cmp	r3, #0
 800259c:	d113      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x31c>
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3350      	adds	r3, #80	; 0x50
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d108      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025be:	461a      	mov	r2, r3
 80025c0:	2101      	movs	r1, #1
 80025c2:	f002 fd85 	bl	80050d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f004 fc9c 	bl	8006f0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	2308      	movs	r3, #8
 80025ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002604:	461a      	mov	r2, r3
 8002606:	2310      	movs	r3, #16
 8002608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002620:	461a      	mov	r2, r3
 8002622:	2340      	movs	r3, #64	; 0x40
 8002624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	461a      	mov	r2, r3
 800263e:	2302      	movs	r3, #2
 8002640:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800264c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fc1b 	bl	8002e8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f af49 	bne.w	80024fa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fc6a 	bl	8004f46 <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800267c:	d122      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026a4:	2100      	movs	r1, #0
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fe26 	bl	80032f8 <HAL_PCDEx_LPM_Callback>
 80026ac:	e002      	b.n	80026b4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f004 fca2 	bl	8006ff8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fc3c 	bl	8004f46 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d8:	d112      	bne.n	8002700 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f004 fc5e 	bl	8006fac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026fe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f002 fc1e 	bl	8004f46 <USB_ReadInterrupts>
 800270a:	4603      	mov	r3, r0
 800270c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002714:	f040 80c7 	bne.w	80028a6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2110      	movs	r1, #16
 8002732:	4618      	mov	r0, r3
 8002734:	f001 fcec 	bl	8004110 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273c:	e056      	b.n	80027ec <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274a:	461a      	mov	r2, r3
 800274c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002750:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	0151      	lsls	r1, r2, #5
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	440a      	add	r2, r1
 8002768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800276c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002770:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002782:	0151      	lsls	r1, r2, #5
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	440a      	add	r2, r1
 8002788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800278c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002790:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279e:	461a      	mov	r2, r3
 80027a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b6:	0151      	lsls	r1, r2, #5
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	440a      	add	r2, r1
 80027bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d6:	0151      	lsls	r1, r2, #5
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	440a      	add	r2, r1
 80027dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	3301      	adds	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3a3      	bcc.n	800273e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002804:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002808:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002822:	f043 030b 	orr.w	r3, r3, #11
 8002826:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002838:	f043 030b 	orr.w	r3, r3, #11
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	e015      	b.n	800286c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002852:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002856:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002866:	f043 030b 	orr.w	r3, r3, #11
 800286a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800287a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800287e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002890:	461a      	mov	r2, r3
 8002892:	f002 fc1d 	bl	80050d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fb4b 	bl	8004f46 <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ba:	d124      	bne.n	8002906 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 fbe1 	bl	8005088 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 fc81 	bl	80041d2 <USB_GetDevSpeed>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	f001 f944 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 80028e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	4620      	mov	r0, r4
 80028ec:	f001 f9be 	bl	8003c6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f004 fb32 	bl	8006f5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002904:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fb1b 	bl	8004f46 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b08      	cmp	r3, #8
 8002918:	d10a      	bne.n	8002930 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f004 fb0f 	bl	8006f3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f002 0208 	and.w	r2, r2, #8
 800292e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f002 fb06 	bl	8004f46 <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002944:	d10f      	bne.n	8002966 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f004 fb71 	bl	8007038 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 faeb 	bl	8004f46 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297a:	d10f      	bne.n	800299c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f004 fb44 	bl	8007014 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800299a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fad0 	bl	8004f46 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d10a      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f004 fb52 	bl	800705c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 faba 	bl	8004f46 <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d115      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f004 fb42 	bl	8007078 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	e000      	b.n	8002a08 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a06:	bf00      	nop
    }
  }
}
 8002a08:	3734      	adds	r7, #52	; 0x34
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}

08002a0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_SetAddress+0x1a>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e013      	b.n	8002a50 <HAL_PCD_SetAddress+0x42>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fa18 	bl	8004e76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	70fb      	strb	r3, [r7, #3]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	803b      	strh	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0f      	bge.n	8002a9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3338      	adds	r3, #56	; 0x38
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aca:	883a      	ldrh	r2, [r7, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	78ba      	ldrb	r2, [r7, #2]
 8002ad4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ae8:	78bb      	ldrb	r3, [r7, #2]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d102      	bne.n	8002af4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_PCD_EP_Open+0xaa>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e00e      	b.n	8002b20 <HAL_PCD_EP_Open+0xc8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fb83 	bl	800421c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da0f      	bge.n	8002b5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	e00f      	b.n	8002b7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_EP_Close+0x6e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e00e      	b.n	8002bb4 <HAL_PCD_EP_Close+0x8c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fbc1 	bl	800432c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6979      	ldr	r1, [r7, #20]
 8002c30:	f001 fe9c 	bl	800496c <USB_EP0StartXfer>
 8002c34:	e008      	b.n	8002c48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6979      	ldr	r1, [r7, #20]
 8002c44:	f001 fc4e 	bl	80044e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c74:	681b      	ldr	r3, [r3, #0]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	7afb      	ldrb	r3, [r7, #11]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3338      	adds	r3, #56	; 0x38
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6979      	ldr	r1, [r7, #20]
 8002cf4:	f001 fe3a 	bl	800496c <USB_EP0StartXfer>
 8002cf8:	e008      	b.n	8002d0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	6979      	ldr	r1, [r7, #20]
 8002d08:	f001 fbec 	bl	80044e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 020f 	and.w	r2, r3, #15
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d901      	bls.n	8002d34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e050      	b.n	8002dd6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	da0f      	bge.n	8002d5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	3338      	adds	r3, #56	; 0x38
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	705a      	strb	r2, [r3, #1]
 8002d5a:	e00d      	b.n	8002d78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_PCD_EP_SetStall+0x82>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e01e      	b.n	8002dd6 <HAL_PCD_EP_SetStall+0xc0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68f9      	ldr	r1, [r7, #12]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 ff91 	bl	8004cce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	b2d9      	uxtb	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f002 f982 	bl	80050d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d901      	bls.n	8002dfc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e042      	b.n	8002e82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da0f      	bge.n	8002e24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 020f 	and.w	r2, r3, #15
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	3338      	adds	r3, #56	; 0x38
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	3304      	adds	r3, #4
 8002e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	705a      	strb	r2, [r3, #1]
 8002e22:	e00f      	b.n	8002e44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_PCD_EP_ClrStall+0x86>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e00e      	b.n	8002e82 <HAL_PCD_EP_ClrStall+0xa4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 ff99 	bl	8004daa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b08a      	sub	sp, #40	; 0x28
 8002e8e:	af02      	add	r7, sp, #8
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3338      	adds	r3, #56	; 0x38
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d901      	bls.n	8002ec2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e06c      	b.n	8002f9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d902      	bls.n	8002ede <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3303      	adds	r3, #3
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ee6:	e02b      	b.n	8002f40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d902      	bls.n	8002f04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	3303      	adds	r3, #3
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4603      	mov	r3, r0
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f001 fe75 	bl	8004c12 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d809      	bhi.n	8002f6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d203      	bcs.n	8002f6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1be      	bne.n	8002ee8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d811      	bhi.n	8002f9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	6939      	ldr	r1, [r7, #16]
 8002f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f96:	4013      	ands	r3, r2
 8002f98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	333c      	adds	r3, #60	; 0x3c
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 80a0 	bne.w	800311c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d015      	beq.n	8003012 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a72      	ldr	r2, [pc, #456]	; (80031b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	f240 80dd 	bls.w	80031aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80d7 	beq.w	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300e:	6093      	str	r3, [r2, #8]
 8003010:	e0cb      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	2320      	movs	r3, #32
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e0bc      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 80b7 	bne.w	80031aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d90f      	bls.n	8003064 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305a:	461a      	mov	r2, r3
 800305c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	e0a2      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003076:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	0159      	lsls	r1, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	440b      	add	r3, r1
 8003080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800308a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4403      	add	r3, r0
 800309a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800309e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4403      	add	r3, r0
 80030c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4419      	add	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d114      	bne.n	800310e <PCD_EP_OutXfrComplete_int+0x16a>
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d108      	bne.n	800310e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003106:	461a      	mov	r2, r3
 8003108:	2101      	movs	r1, #1
 800310a:	f001 ffe1 	bl	80050d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f003 fedd 	bl	8006ed4 <HAL_PCD_DataOutStageCallback>
 800311a:	e046      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a26      	ldr	r2, [pc, #152]	; (80031b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d124      	bne.n	800316e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313a:	461a      	mov	r2, r3
 800313c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003140:	6093      	str	r3, [r2, #8]
 8003142:	e032      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	461a      	mov	r2, r3
 800315c:	2320      	movs	r3, #32
 800315e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f003 feb4 	bl	8006ed4 <HAL_PCD_DataOutStageCallback>
 800316c:	e01d      	b.n	80031aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d114      	bne.n	800319e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d108      	bne.n	800319e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003196:	461a      	mov	r2, r3
 8003198:	2100      	movs	r1, #0
 800319a:	f001 ff99 	bl	80050d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f003 fe95 	bl	8006ed4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	4f54300a 	.word	0x4f54300a
 80031b8:	4f54310a 	.word	0x4f54310a

080031bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	333c      	adds	r3, #60	; 0x3c
 80031d4:	3304      	adds	r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d90e      	bls.n	8003210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f003 fe4d 	bl	8006eb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <PCD_EP_OutSetupPacket_int+0x88>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d90c      	bls.n	8003238 <PCD_EP_OutSetupPacket_int+0x7c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003230:	461a      	mov	r2, r3
 8003232:	2101      	movs	r1, #1
 8003234:	f001 ff4c 	bl	80050d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	4f54300a 	.word	0x4f54300a

08003248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
 8003254:	4613      	mov	r3, r2
 8003256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003266:	883b      	ldrh	r3, [r7, #0]
 8003268:	0419      	lsls	r1, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	430a      	orrs	r2, r1
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
 8003274:	e028      	b.n	80032c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e00d      	b.n	80032a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	3340      	adds	r3, #64	; 0x40
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3301      	adds	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3ec      	bcc.n	800328a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032b0:	883b      	ldrh	r3, [r7, #0]
 80032b2:	0418      	lsls	r0, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	4302      	orrs	r2, r0
 80032c0:	3340      	adds	r3, #64	; 0x40
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e25b      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d075      	beq.n	800341a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332e:	4ba3      	ldr	r3, [pc, #652]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b04      	cmp	r3, #4
 8003338:	d00c      	beq.n	8003354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333a:	4ba0      	ldr	r3, [pc, #640]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003342:	2b08      	cmp	r3, #8
 8003344:	d112      	bne.n	800336c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003346:	4b9d      	ldr	r3, [pc, #628]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003352:	d10b      	bne.n	800336c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	4b99      	ldr	r3, [pc, #612]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05b      	beq.n	8003418 <HAL_RCC_OscConfig+0x108>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d157      	bne.n	8003418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e236      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x74>
 8003376:	4b91      	ldr	r3, [pc, #580]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a90      	ldr	r2, [pc, #576]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e01d      	b.n	80033c0 <HAL_RCC_OscConfig+0xb0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x98>
 800338e:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a8a      	ldr	r2, [pc, #552]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b88      	ldr	r3, [pc, #544]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a87      	ldr	r2, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0xb0>
 80033a8:	4b84      	ldr	r3, [pc, #528]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a83      	ldr	r2, [pc, #524]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a80      	ldr	r2, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd fb88 	bl	8000adc <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fd fb84 	bl	8000adc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1fb      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b76      	ldr	r3, [pc, #472]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0xc0>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fd fb74 	bl	8000adc <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fd fb70 	bl	8000adc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e1e7      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0xe8>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d063      	beq.n	80034ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003426:	4b65      	ldr	r3, [pc, #404]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00b      	beq.n	800344a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003432:	4b62      	ldr	r3, [pc, #392]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343a:	2b08      	cmp	r3, #8
 800343c:	d11c      	bne.n	8003478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343e:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d116      	bne.n	8003478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	4b5c      	ldr	r3, [pc, #368]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_RCC_OscConfig+0x152>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1bb      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4952      	ldr	r1, [pc, #328]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	e03a      	b.n	80034ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003480:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <HAL_RCC_OscConfig+0x2b0>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd fb29 	bl	8000adc <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348e:	f7fd fb25 	bl	8000adc <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e19c      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4940      	ldr	r1, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	e015      	b.n	80034ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_RCC_OscConfig+0x2b0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd fb08 	bl	8000adc <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fd fb04 	bl	8000adc <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e17b      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d030      	beq.n	800355c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003502:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <HAL_RCC_OscConfig+0x2b4>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fd fae8 	bl	8000adc <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003510:	f7fd fae4 	bl	8000adc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e15b      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x200>
 800352e:	e015      	b.n	800355c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x2b4>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fd fad1 	bl	8000adc <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353e:	f7fd facd 	bl	8000adc <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e144      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a0 	beq.w	80036aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <HAL_RCC_OscConfig+0x2ac>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_RCC_OscConfig+0x2b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d121      	bne.n	80035ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_RCC_OscConfig+0x2b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <HAL_RCC_OscConfig+0x2b8>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fd fa93 	bl	8000adc <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e011      	b.n	80035de <HAL_RCC_OscConfig+0x2ce>
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800
 80035c0:	42470000 	.word	0x42470000
 80035c4:	42470e80 	.word	0x42470e80
 80035c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035cc:	f7fd fa86 	bl	8000adc <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0fd      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b81      	ldr	r3, [pc, #516]	; (80037e4 <HAL_RCC_OscConfig+0x4d4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x2f0>
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	4a7c      	ldr	r2, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6713      	str	r3, [r2, #112]	; 0x70
 80035fe:	e01c      	b.n	800363a <HAL_RCC_OscConfig+0x32a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d10c      	bne.n	8003622 <HAL_RCC_OscConfig+0x312>
 8003608:	4b77      	ldr	r3, [pc, #476]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a76      	ldr	r2, [pc, #472]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800360e:	f043 0304 	orr.w	r3, r3, #4
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	4b74      	ldr	r3, [pc, #464]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a73      	ldr	r2, [pc, #460]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	e00b      	b.n	800363a <HAL_RCC_OscConfig+0x32a>
 8003622:	4b71      	ldr	r3, [pc, #452]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a70      	ldr	r2, [pc, #448]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
 800362e:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a6d      	ldr	r2, [pc, #436]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d015      	beq.n	800366e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fd fa4b 	bl	8000adc <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd fa47 	bl	8000adc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0bc      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ee      	beq.n	800364a <HAL_RCC_OscConfig+0x33a>
 800366c:	e014      	b.n	8003698 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366e:	f7fd fa35 	bl	8000adc <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fd fa31 	bl	8000adc <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	; 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0a6      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ee      	bne.n	8003676 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369e:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80036a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8092 	beq.w	80037d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036b4:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d05c      	beq.n	800377a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d141      	bne.n	800374c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_RCC_OscConfig+0x4dc>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fd fa05 	bl	8000adc <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fd fa01 	bl	8000adc <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e078      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e8:	4b3f      	ldr	r3, [pc, #252]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	019b      	lsls	r3, r3, #6
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	3b01      	subs	r3, #1
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	4933      	ldr	r1, [pc, #204]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x4dc>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fd f9da 	bl	8000adc <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd f9d6 	bl	8000adc <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e04d      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x41c>
 800374a:	e045      	b.n	80037d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <HAL_RCC_OscConfig+0x4dc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fd f9c3 	bl	8000adc <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375a:	f7fd f9bf 	bl	8000adc <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e036      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376c:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x44a>
 8003778:	e02e      	b.n	80037d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e029      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_RCC_OscConfig+0x4d8>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	429a      	cmp	r2, r3
 8003798:	d11c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d115      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ae:	4013      	ands	r3, r2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10d      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40007000 	.word	0x40007000
 80037e8:	40023800 	.word	0x40023800
 80037ec:	42470060 	.word	0x42470060

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0cc      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d90c      	bls.n	800382c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d044      	beq.n	8003910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d119      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e067      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4934      	ldr	r1, [pc, #208]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e0:	f7fd f8fc 	bl	8000adc <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fd f8f8 	bl	8000adc <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 020c 	and.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	429a      	cmp	r2, r3
 800390e:	d1eb      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20c      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4601      	mov	r1, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	fa21 f303 	lsr.w	r3, r1, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f85c 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023c00 	.word	0x40023c00
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08007660 	.word	0x08007660
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	2300      	movs	r3, #0
 80039cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d007      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x32>
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d008      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x38>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 80b4 	bne.w	8003b50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039ea:	60bb      	str	r3, [r7, #8]
       break;
 80039ec:	e0b3      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039f0:	60bb      	str	r3, [r7, #8]
      break;
 80039f2:	e0b0      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f4:	4b5a      	ldr	r3, [pc, #360]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fe:	4b58      	ldr	r3, [pc, #352]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d04a      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	f04f 0400 	mov.w	r4, #0
 8003a14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	ea03 0501 	and.w	r5, r3, r1
 8003a20:	ea04 0602 	and.w	r6, r4, r2
 8003a24:	4629      	mov	r1, r5
 8003a26:	4632      	mov	r2, r6
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	f04f 0400 	mov.w	r4, #0
 8003a30:	0154      	lsls	r4, r2, #5
 8003a32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a36:	014b      	lsls	r3, r1, #5
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	1b49      	subs	r1, r1, r5
 8003a3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	f04f 0400 	mov.w	r4, #0
 8003a4a:	0194      	lsls	r4, r2, #6
 8003a4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a50:	018b      	lsls	r3, r1, #6
 8003a52:	1a5b      	subs	r3, r3, r1
 8003a54:	eb64 0402 	sbc.w	r4, r4, r2
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	00e2      	lsls	r2, r4, #3
 8003a62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a66:	00d9      	lsls	r1, r3, #3
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	195b      	adds	r3, r3, r5
 8003a6e:	eb44 0406 	adc.w	r4, r4, r6
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	02a2      	lsls	r2, r4, #10
 8003a7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a80:	0299      	lsls	r1, r3, #10
 8003a82:	460b      	mov	r3, r1
 8003a84:	4614      	mov	r4, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	4621      	mov	r1, r4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f04f 0400 	mov.w	r4, #0
 8003a90:	461a      	mov	r2, r3
 8003a92:	4623      	mov	r3, r4
 8003a94:	f7fc fb98 	bl	80001c8 <__aeabi_uldivmod>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e049      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	f04f 0400 	mov.w	r4, #0
 8003aaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	ea03 0501 	and.w	r5, r3, r1
 8003ab6:	ea04 0602 	and.w	r6, r4, r2
 8003aba:	4629      	mov	r1, r5
 8003abc:	4632      	mov	r2, r6
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	f04f 0400 	mov.w	r4, #0
 8003ac6:	0154      	lsls	r4, r2, #5
 8003ac8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003acc:	014b      	lsls	r3, r1, #5
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	1b49      	subs	r1, r1, r5
 8003ad4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	f04f 0400 	mov.w	r4, #0
 8003ae0:	0194      	lsls	r4, r2, #6
 8003ae2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ae6:	018b      	lsls	r3, r1, #6
 8003ae8:	1a5b      	subs	r3, r3, r1
 8003aea:	eb64 0402 	sbc.w	r4, r4, r2
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	00e2      	lsls	r2, r4, #3
 8003af8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003afc:	00d9      	lsls	r1, r3, #3
 8003afe:	460b      	mov	r3, r1
 8003b00:	4614      	mov	r4, r2
 8003b02:	195b      	adds	r3, r3, r5
 8003b04:	eb44 0406 	adc.w	r4, r4, r6
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	02a2      	lsls	r2, r4, #10
 8003b12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b16:	0299      	lsls	r1, r3, #10
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	4621      	mov	r1, r4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f04f 0400 	mov.w	r4, #0
 8003b26:	461a      	mov	r2, r3
 8003b28:	4623      	mov	r3, r4
 8003b2a:	f7fc fb4d 	bl	80001c8 <__aeabi_uldivmod>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	60bb      	str	r3, [r7, #8]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b52:	60bb      	str	r3, [r7, #8]
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	68bb      	ldr	r3, [r7, #8]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b60:	40023800 	.word	0x40023800
 8003b64:	00f42400 	.word	0x00f42400

08003b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08007670 	.word	0x08007670

08003ba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ba8:	b084      	sub	sp, #16
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	f107 001c 	add.w	r0, r7, #28
 8003bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d122      	bne.n	8003c06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f001 fac6 	bl	800518c <USB_CoreReset>
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	e01a      	b.n	8003c3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f001 faba 	bl	800518c <USB_CoreReset>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c2e:	e005      	b.n	8003c3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10b      	bne.n	8003c5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f043 0206 	orr.w	r2, r3, #6
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c66:	b004      	add	sp, #16
 8003c68:	4770      	bx	lr
	...

08003c6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d165      	bne.n	8003d4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4a41      	ldr	r2, [pc, #260]	; (8003d88 <USB_SetTurnaroundTime+0x11c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d906      	bls.n	8003c96 <USB_SetTurnaroundTime+0x2a>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a40      	ldr	r2, [pc, #256]	; (8003d8c <USB_SetTurnaroundTime+0x120>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d802      	bhi.n	8003c96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c90:	230f      	movs	r3, #15
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e062      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4a3c      	ldr	r2, [pc, #240]	; (8003d8c <USB_SetTurnaroundTime+0x120>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d906      	bls.n	8003cac <USB_SetTurnaroundTime+0x40>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a3b      	ldr	r2, [pc, #236]	; (8003d90 <USB_SetTurnaroundTime+0x124>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d802      	bhi.n	8003cac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ca6:	230e      	movs	r3, #14
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	e057      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4a38      	ldr	r2, [pc, #224]	; (8003d90 <USB_SetTurnaroundTime+0x124>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d906      	bls.n	8003cc2 <USB_SetTurnaroundTime+0x56>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4a37      	ldr	r2, [pc, #220]	; (8003d94 <USB_SetTurnaroundTime+0x128>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d802      	bhi.n	8003cc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cbc:	230d      	movs	r3, #13
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	e04c      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <USB_SetTurnaroundTime+0x128>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d906      	bls.n	8003cd8 <USB_SetTurnaroundTime+0x6c>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a32      	ldr	r2, [pc, #200]	; (8003d98 <USB_SetTurnaroundTime+0x12c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d802      	bhi.n	8003cd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e041      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4a2f      	ldr	r2, [pc, #188]	; (8003d98 <USB_SetTurnaroundTime+0x12c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d906      	bls.n	8003cee <USB_SetTurnaroundTime+0x82>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <USB_SetTurnaroundTime+0x130>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d802      	bhi.n	8003cee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ce8:	230b      	movs	r3, #11
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e036      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <USB_SetTurnaroundTime+0x130>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d906      	bls.n	8003d04 <USB_SetTurnaroundTime+0x98>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <USB_SetTurnaroundTime+0x134>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d802      	bhi.n	8003d04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003cfe:	230a      	movs	r3, #10
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e02b      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4a26      	ldr	r2, [pc, #152]	; (8003da0 <USB_SetTurnaroundTime+0x134>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d906      	bls.n	8003d1a <USB_SetTurnaroundTime+0xae>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a25      	ldr	r2, [pc, #148]	; (8003da4 <USB_SetTurnaroundTime+0x138>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d802      	bhi.n	8003d1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d14:	2309      	movs	r3, #9
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e020      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <USB_SetTurnaroundTime+0x138>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d906      	bls.n	8003d30 <USB_SetTurnaroundTime+0xc4>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <USB_SetTurnaroundTime+0x13c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d802      	bhi.n	8003d30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e015      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <USB_SetTurnaroundTime+0x13c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d906      	bls.n	8003d46 <USB_SetTurnaroundTime+0xda>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <USB_SetTurnaroundTime+0x140>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d802      	bhi.n	8003d46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d40:	2307      	movs	r3, #7
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e00a      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d46:	2306      	movs	r3, #6
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e007      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d52:	2309      	movs	r3, #9
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e001      	b.n	8003d5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d58:	2309      	movs	r3, #9
 8003d5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	029b      	lsls	r3, r3, #10
 8003d70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	00d8acbf 	.word	0x00d8acbf
 8003d8c:	00e4e1bf 	.word	0x00e4e1bf
 8003d90:	00f423ff 	.word	0x00f423ff
 8003d94:	0106737f 	.word	0x0106737f
 8003d98:	011a499f 	.word	0x011a499f
 8003d9c:	01312cff 	.word	0x01312cff
 8003da0:	014ca43f 	.word	0x014ca43f
 8003da4:	016e35ff 	.word	0x016e35ff
 8003da8:	01a6ab1f 	.word	0x01a6ab1f
 8003dac:	01e847ff 	.word	0x01e847ff

08003db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d106      	bne.n	8003e20 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	e00b      	b.n	8003e38 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	e001      	b.n	8003e38 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e003      	b.n	8003e40 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e38:	2032      	movs	r0, #50	; 0x32
 8003e3a:	f7fc fe5b 	bl	8000af4 <HAL_Delay>

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e48:	b084      	sub	sp, #16
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	e009      	b.n	8003e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	3340      	adds	r3, #64	; 0x40
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b0e      	cmp	r3, #14
 8003e80:	d9f2      	bls.n	8003e68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d11c      	bne.n	8003ec2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec0:	e00b      	b.n	8003eda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	4619      	mov	r1, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	680b      	ldr	r3, [r1, #0]
 8003ef8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10c      	bne.n	8003f1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f06:	2100      	movs	r1, #0
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f949 	bl	80041a0 <USB_SetDevSpeed>
 8003f0e:	e008      	b.n	8003f22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f10:	2101      	movs	r1, #1
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f944 	bl	80041a0 <USB_SetDevSpeed>
 8003f18:	e003      	b.n	8003f22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f1a:	2103      	movs	r1, #3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f93f 	bl	80041a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f22:	2110      	movs	r1, #16
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8f3 	bl	8004110 <USB_FlushTxFifo>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f911 	bl	800415c <USB_FlushRxFifo>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f56:	461a      	mov	r2, r3
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	461a      	mov	r2, r3
 8003f64:	2300      	movs	r3, #0
 8003f66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	e043      	b.n	8003ff6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f84:	d118      	bne.n	8003fb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e013      	b.n	8003fca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e008      	b.n	8003fca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d3b7      	bcc.n	8003f6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	e043      	b.n	800408c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800401a:	d118      	bne.n	800404e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402e:	461a      	mov	r2, r3
 8004030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e013      	b.n	8004060 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	461a      	mov	r2, r3
 8004046:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e008      	b.n	8004060 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	461a      	mov	r2, r3
 800405c:	2300      	movs	r3, #0
 800405e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	2300      	movs	r3, #0
 8004070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004084:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	3301      	adds	r3, #1
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d3b7      	bcc.n	8004004 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f043 0210 	orr.w	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <USB_DevInit+0x2c4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f043 0208 	orr.w	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004108:	b004      	add	sp, #16
 800410a:	4770      	bx	lr
 800410c:	803c3800 	.word	0x803c3800

08004110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <USB_FlushTxFifo+0x48>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b20      	cmp	r3, #32
 8004146:	d0f0      	beq.n	800412a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	00030d40 	.word	0x00030d40

0800415c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2210      	movs	r2, #16
 800416c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <USB_FlushRxFifo+0x40>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b10      	cmp	r3, #16
 800418a:	d0f0      	beq.n	800416e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	00030d40 	.word	0x00030d40

080041a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b087      	sub	sp, #28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0306 	and.w	r3, r3, #6
 80041ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]
 80041f6:	e00a      	b.n	800420e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d002      	beq.n	8004204 <USB_GetDevSpeed+0x32>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b06      	cmp	r3, #6
 8004202:	d102      	bne.n	800420a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004204:	2302      	movs	r3, #2
 8004206:	75fb      	strb	r3, [r7, #23]
 8004208:	e001      	b.n	800420e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800420a:	230f      	movs	r3, #15
 800420c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d13a      	bne.n	80042ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	2101      	movs	r1, #1
 800424a:	fa01 f303 	lsl.w	r3, r1, r3
 800424e:	b29b      	uxth	r3, r3
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004256:	4313      	orrs	r3, r2
 8004258:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d155      	bne.n	800431c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	78db      	ldrb	r3, [r3, #3]
 800428a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800428c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	059b      	lsls	r3, r3, #22
 8004292:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004294:	4313      	orrs	r3, r2
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	440a      	add	r2, r1
 800429e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e036      	b.n	800431c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	2101      	movs	r1, #1
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	041b      	lsls	r3, r3, #16
 80042c6:	68f9      	ldr	r1, [r7, #12]
 80042c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11a      	bne.n	800431c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	78db      	ldrb	r3, [r3, #3]
 8004300:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004302:	430b      	orrs	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	0151      	lsls	r1, r2, #5
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	440a      	add	r2, r1
 800430e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	785b      	ldrb	r3, [r3, #1]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d161      	bne.n	800440c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435e:	d11f      	bne.n	80043a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	0151      	lsls	r1, r2, #5
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	440a      	add	r2, r1
 8004376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800437e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	0151      	lsls	r1, r2, #5
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	440a      	add	r2, r1
 8004396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800439e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f303 	lsl.w	r3, r1, r3
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043c0:	4013      	ands	r3, r2
 80043c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f303 	lsl.w	r3, r1, r3
 80043da:	b29b      	uxth	r3, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e4:	4013      	ands	r3, r2
 80043e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	0159      	lsls	r1, r3, #5
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	440b      	add	r3, r1
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	4619      	mov	r1, r3
 8004404:	4b35      	ldr	r3, [pc, #212]	; (80044dc <USB_DeactivateEndpoint+0x1b0>)
 8004406:	4013      	ands	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
 800440a:	e060      	b.n	80044ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800441e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004422:	d11f      	bne.n	8004464 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	440a      	add	r2, r1
 800443a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800443e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004442:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	0151      	lsls	r1, r2, #5
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	440a      	add	r2, r1
 800445a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800445e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004462:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	43db      	mvns	r3, r3
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004484:	4013      	ands	r3, r2
 8004486:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	041b      	lsls	r3, r3, #16
 80044a0:	43db      	mvns	r3, r3
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a8:	4013      	ands	r3, r2
 80044aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	0159      	lsls	r1, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	440b      	add	r3, r1
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	4619      	mov	r1, r3
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <USB_DeactivateEndpoint+0x1b4>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	ec337800 	.word	0xec337800
 80044e0:	eff37800 	.word	0xeff37800

080044e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	785b      	ldrb	r3, [r3, #1]
 8004500:	2b01      	cmp	r3, #1
 8004502:	f040 815c 	bne.w	80047be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d132      	bne.n	8004574 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800452c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004530:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	0151      	lsls	r1, r2, #5
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	440a      	add	r2, r1
 8004568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456c:	0cdb      	lsrs	r3, r3, #19
 800456e:	04db      	lsls	r3, r3, #19
 8004570:	6113      	str	r3, [r2, #16]
 8004572:	e074      	b.n	800465e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458e:	0cdb      	lsrs	r3, r3, #19
 8004590:	04db      	lsls	r3, r3, #19
 8004592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6959      	ldr	r1, [r3, #20]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	440b      	add	r3, r1
 80045d0:	1e59      	subs	r1, r3, #1
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80045da:	04d9      	lsls	r1, r3, #19
 80045dc:	4b9d      	ldr	r3, [pc, #628]	; (8004854 <USB_EPStartXfer+0x370>)
 80045de:	400b      	ands	r3, r1
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	0148      	lsls	r0, r1, #5
 80045e4:	69f9      	ldr	r1, [r7, #28]
 80045e6:	4401      	add	r1, r0
 80045e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045ec:	4313      	orrs	r3, r2
 80045ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	0148      	lsls	r0, r1, #5
 800460a:	69f9      	ldr	r1, [r7, #28]
 800460c:	4401      	add	r1, r0
 800460e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004612:	4313      	orrs	r3, r2
 8004614:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	78db      	ldrb	r3, [r3, #3]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d11f      	bne.n	800465e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	440a      	add	r2, r1
 8004634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004638:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800463c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800465c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d14b      	bne.n	80046fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	78db      	ldrb	r3, [r3, #3]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d128      	bne.n	80046da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d110      	bne.n	80046ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	0151      	lsls	r1, r2, #5
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	440a      	add	r2, r1
 80046ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e00f      	b.n	80046da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e12f      	b.n	800495c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	440a      	add	r2, r1
 8004712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800471a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d015      	beq.n	8004750 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8117 	beq.w	800495c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	2101      	movs	r1, #1
 8004740:	fa01 f303 	lsl.w	r3, r1, r3
 8004744:	69f9      	ldr	r1, [r7, #28]
 8004746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800474a:	4313      	orrs	r3, r2
 800474c:	634b      	str	r3, [r1, #52]	; 0x34
 800474e:	e105      	b.n	800495c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d110      	bne.n	8004782 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e00f      	b.n	80047a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	68d9      	ldr	r1, [r3, #12]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	b298      	uxth	r0, r3
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	4603      	mov	r3, r0
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fa2b 	bl	8004c12 <USB_WritePacket>
 80047bc:	e0ce      	b.n	800495c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d8:	0cdb      	lsrs	r3, r3, #19
 80047da:	04db      	lsls	r3, r3, #19
 80047dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004800:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d126      	bne.n	8004858 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004820:	69b9      	ldr	r1, [r7, #24]
 8004822:	0148      	lsls	r0, r1, #5
 8004824:	69f9      	ldr	r1, [r7, #28]
 8004826:	4401      	add	r1, r0
 8004828:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800482c:	4313      	orrs	r3, r2
 800482e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800484e:	6113      	str	r3, [r2, #16]
 8004850:	e036      	b.n	80048c0 <USB_EPStartXfer+0x3dc>
 8004852:	bf00      	nop
 8004854:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4413      	add	r3, r2
 8004862:	1e5a      	subs	r2, r3, #1
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	8afb      	ldrh	r3, [r7, #22]
 800487e:	04d9      	lsls	r1, r3, #19
 8004880:	4b39      	ldr	r3, [pc, #228]	; (8004968 <USB_EPStartXfer+0x484>)
 8004882:	400b      	ands	r3, r1
 8004884:	69b9      	ldr	r1, [r7, #24]
 8004886:	0148      	lsls	r0, r1, #5
 8004888:	69f9      	ldr	r1, [r7, #28]
 800488a:	4401      	add	r1, r0
 800488c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004890:	4313      	orrs	r3, r2
 8004892:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	8af9      	ldrh	r1, [r7, #22]
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b0:	69b9      	ldr	r1, [r7, #24]
 80048b2:	0148      	lsls	r0, r1, #5
 80048b4:	69f9      	ldr	r1, [r7, #28]
 80048b6:	4401      	add	r1, r0
 80048b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048bc:	4313      	orrs	r3, r2
 80048be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d10d      	bne.n	80048e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	68d9      	ldr	r1, [r3, #12]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	460a      	mov	r2, r1
 80048e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	78db      	ldrb	r3, [r3, #3]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d128      	bne.n	800493c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d110      	bne.n	800491c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e00f      	b.n	800493c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800495a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	1ff80000 	.word	0x1ff80000

0800496c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	4613      	mov	r3, r2
 8004978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b01      	cmp	r3, #1
 800498a:	f040 80cd 	bne.w	8004b28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d132      	bne.n	80049fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	0151      	lsls	r1, r2, #5
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	440a      	add	r2, r1
 80049ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f4:	0cdb      	lsrs	r3, r3, #19
 80049f6:	04db      	lsls	r3, r3, #19
 80049f8:	6113      	str	r3, [r2, #16]
 80049fa:	e04e      	b.n	8004a9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a16:	0cdb      	lsrs	r3, r3, #19
 8004a18:	04db      	lsls	r3, r3, #19
 8004a1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d903      	bls.n	8004a54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8a:	6939      	ldr	r1, [r7, #16]
 8004a8c:	0148      	lsls	r0, r1, #5
 8004a8e:	6979      	ldr	r1, [r7, #20]
 8004a90:	4401      	add	r1, r0
 8004a92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a96:	4313      	orrs	r3, r2
 8004a98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d11e      	bne.n	8004ade <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e092      	b.n	8004c04 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	0151      	lsls	r1, r2, #5
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	440a      	add	r2, r1
 8004af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004afc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d07e      	beq.n	8004c04 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	2101      	movs	r1, #1
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b22:	4313      	orrs	r3, r2
 8004b24:	634b      	str	r3, [r1, #52]	; 0x34
 8004b26:	e06d      	b.n	8004c04 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b42:	0cdb      	lsrs	r3, r3, #19
 8004b44:	04db      	lsls	r3, r3, #19
 8004b46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b6a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb2:	6939      	ldr	r1, [r7, #16]
 8004bb4:	0148      	lsls	r0, r1, #5
 8004bb6:	6979      	ldr	r1, [r7, #20]
 8004bb8:	4401      	add	r1, r0
 8004bba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d10d      	bne.n	8004be4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	68d9      	ldr	r1, [r3, #12]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	460a      	mov	r2, r1
 8004be2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b089      	sub	sp, #36	; 0x24
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	461a      	mov	r2, r3
 8004c20:	460b      	mov	r3, r1
 8004c22:	71fb      	strb	r3, [r7, #7]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004c30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11a      	bne.n	8004c6e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c38:	88bb      	ldrh	r3, [r7, #4]
 8004c3a:	3303      	adds	r3, #3
 8004c3c:	089b      	lsrs	r3, r3, #2
 8004c3e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	e00f      	b.n	8004c66 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	031a      	lsls	r2, r3, #12
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c52:	461a      	mov	r2, r3
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	3301      	adds	r3, #1
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d3eb      	bcc.n	8004c46 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3724      	adds	r7, #36	; 0x24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b089      	sub	sp, #36	; 0x24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	3303      	adds	r3, #3
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	e00b      	b.n	8004cb8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d3ef      	bcc.n	8004ca0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004cc0:	69fb      	ldr	r3, [r7, #28]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3724      	adds	r7, #36	; 0x24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d12c      	bne.n	8004d44 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	db12      	blt.n	8004d22 <USB_EPSetStall+0x54>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00f      	beq.n	8004d22 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d20:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e02b      	b.n	8004d9c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	db12      	blt.n	8004d7c <USB_EPSetStall+0xae>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00f      	beq.n	8004d7c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d7a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d128      	bne.n	8004e18 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004de4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	78db      	ldrb	r3, [r3, #3]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d003      	beq.n	8004df6 <USB_EPClearStall+0x4c>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	78db      	ldrb	r3, [r3, #3]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d138      	bne.n	8004e68 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e027      	b.n	8004e68 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d003      	beq.n	8004e48 <USB_EPClearStall+0x9e>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	78db      	ldrb	r3, [r3, #3]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d10f      	bne.n	8004e68 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e66:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e98:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004eaa:	68f9      	ldr	r1, [r7, #12]
 8004eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004edc:	f023 0303 	bic.w	r3, r3, #3
 8004ee0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef0:	f023 0302 	bic.w	r3, r3, #2
 8004ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f32:	f043 0302 	orr.w	r3, r3, #2
 8004f36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	0c1b      	lsrs	r3, r3, #16
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	b29b      	uxth	r3, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	4013      	ands	r3, r2
 8005000:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005002:	68bb      	ldr	r3, [r7, #8]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	01db      	lsls	r3, r3, #7
 8005042:	b2db      	uxtb	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4013      	ands	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800505e:	68bb      	ldr	r3, [r7, #8]
}
 8005060:	4618      	mov	r0, r3
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0301 	and.w	r3, r3, #1
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	460b      	mov	r3, r1
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	333c      	adds	r3, #60	; 0x3c
 80050e6:	3304      	adds	r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4a26      	ldr	r2, [pc, #152]	; (8005188 <USB_EP0_OutStart+0xb8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d90a      	bls.n	800510a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005104:	d101      	bne.n	800510a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e037      	b.n	800517a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	461a      	mov	r2, r3
 8005112:	2300      	movs	r3, #0
 8005114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005138:	f043 0318 	orr.w	r3, r3, #24
 800513c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005150:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005152:	7afb      	ldrb	r3, [r7, #11]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10f      	bne.n	8005178 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	461a      	mov	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005172:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	4f54300a 	.word	0x4f54300a

0800518c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <USB_CoreReset+0x64>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e01b      	b.n	80051e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	daf2      	bge.n	8005198 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <USB_CoreReset+0x64>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d901      	bls.n	80051d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e006      	b.n	80051e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d0f0      	beq.n	80051c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	00030d40 	.word	0x00030d40

080051f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005200:	205c      	movs	r0, #92	; 0x5c
 8005202:	f002 f927 	bl	8007454 <malloc>
 8005206:	4603      	mov	r3, r0
 8005208:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005218:	2302      	movs	r3, #2
 800521a:	e05f      	b.n	80052dc <USBD_CDC_Init+0xe8>
  }

  pdev->pClassData = (void *)hcdc;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	7c1b      	ldrb	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d117      	bne.n	800525c <USBD_CDC_Init+0x68>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800522c:	2340      	movs	r3, #64	; 0x40
 800522e:	2202      	movs	r2, #2
 8005230:	2181      	movs	r1, #129	; 0x81
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f001 ff95 	bl	8007162 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	2202      	movs	r2, #2
 8005242:	2101      	movs	r1, #1
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f001 ff8c 	bl	8007162 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2210      	movs	r2, #16
 8005256:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800525a:	e016      	b.n	800528a <USBD_CDC_Init+0x96>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800525c:	2340      	movs	r3, #64	; 0x40
 800525e:	2202      	movs	r2, #2
 8005260:	2181      	movs	r1, #129	; 0x81
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 ff7d 	bl	8007162 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	2202      	movs	r2, #2
 8005272:	2101      	movs	r1, #1
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f001 ff74 	bl	8007162 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2210      	movs	r2, #16
 8005286:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800528a:	2308      	movs	r3, #8
 800528c:	2203      	movs	r2, #3
 800528e:	2182      	movs	r1, #130	; 0x82
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 ff66 	bl	8007162 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	659a      	str	r2, [r3, #88]	; 0x58

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7c1b      	ldrb	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d107      	bne.n	80052cc <USBD_CDC_Init+0xd8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c0:	2340      	movs	r3, #64	; 0x40
 80052c2:	2101      	movs	r1, #1
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f002 f83b 	bl	8007340 <USBD_LL_PrepareReceive>
 80052ca:	e006      	b.n	80052da <USBD_CDC_Init+0xe6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d0:	2340      	movs	r3, #64	; 0x40
 80052d2:	2101      	movs	r1, #1
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f002 f833 	bl	8007340 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052f4:	2181      	movs	r1, #129	; 0x81
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 ff59 	bl	80071ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005302:	2101      	movs	r1, #1
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 ff52 	bl	80071ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005312:	2182      	movs	r1, #130	; 0x82
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 ff4a 	bl	80071ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00e      	beq.n	8005352 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005344:	4618      	mov	r0, r3
 8005346:	f002 f88d 	bl	8007464 <free>
    pdev->pClassData = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800536c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005382:	2b00      	cmp	r3, #0
 8005384:	d03a      	beq.n	80053fc <USBD_CDC_Setup+0xa0>
 8005386:	2b20      	cmp	r3, #32
 8005388:	f040 8097 	bne.w	80054ba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	88db      	ldrh	r3, [r3, #6]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d029      	beq.n	80053e8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b25b      	sxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	da11      	bge.n	80053c2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80053aa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	88d2      	ldrh	r2, [r2, #6]
 80053b0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80053b2:	6939      	ldr	r1, [r7, #16]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	88db      	ldrh	r3, [r3, #6]
 80053b8:	461a      	mov	r2, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f001 fa8d 	bl	80068da <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80053c0:	e082      	b.n	80054c8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	785a      	ldrb	r2, [r3, #1]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hcdc->CmdLength = (uint8_t)req->wLength;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	88db      	ldrh	r3, [r3, #6]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80053d8:	6939      	ldr	r1, [r7, #16]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	88db      	ldrh	r3, [r3, #6]
 80053de:	461a      	mov	r2, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 faa6 	bl	8006932 <USBD_CtlPrepareRx>
    break;
 80053e6:	e06f      	b.n	80054c8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	7850      	ldrb	r0, [r2, #1]
 80053f4:	2200      	movs	r2, #0
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	4798      	blx	r3
    break;
 80053fa:	e065      	b.n	80054c8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	2b0b      	cmp	r3, #11
 8005402:	d84f      	bhi.n	80054a4 <USBD_CDC_Setup+0x148>
 8005404:	a201      	add	r2, pc, #4	; (adr r2, 800540c <USBD_CDC_Setup+0xb0>)
 8005406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540a:	bf00      	nop
 800540c:	0800543d 	.word	0x0800543d
 8005410:	080054b3 	.word	0x080054b3
 8005414:	080054a5 	.word	0x080054a5
 8005418:	080054a5 	.word	0x080054a5
 800541c:	080054a5 	.word	0x080054a5
 8005420:	080054a5 	.word	0x080054a5
 8005424:	080054a5 	.word	0x080054a5
 8005428:	080054a5 	.word	0x080054a5
 800542c:	080054a5 	.word	0x080054a5
 8005430:	080054a5 	.word	0x080054a5
 8005434:	08005465 	.word	0x08005465
 8005438:	0800548d 	.word	0x0800548d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005442:	2b03      	cmp	r3, #3
 8005444:	d107      	bne.n	8005456 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005446:	f107 030c 	add.w	r3, r7, #12
 800544a:	2202      	movs	r2, #2
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f001 fa43 	bl	80068da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005454:	e030      	b.n	80054b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 f9cd 	bl	80067f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800545e:	2303      	movs	r3, #3
 8005460:	75fb      	strb	r3, [r7, #23]
      break;
 8005462:	e029      	b.n	80054b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800546a:	2b03      	cmp	r3, #3
 800546c:	d107      	bne.n	800547e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800546e:	f107 030f 	add.w	r3, r7, #15
 8005472:	2201      	movs	r2, #1
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 fa2f 	bl	80068da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800547c:	e01c      	b.n	80054b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 f9b9 	bl	80067f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005486:	2303      	movs	r3, #3
 8005488:	75fb      	strb	r3, [r7, #23]
      break;
 800548a:	e015      	b.n	80054b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005492:	2b03      	cmp	r3, #3
 8005494:	d00f      	beq.n	80054b6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f001 f9ad 	bl	80067f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800549e:	2303      	movs	r3, #3
 80054a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80054a2:	e008      	b.n	80054b6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 f9a6 	bl	80067f8 <USBD_CtlError>
      ret = USBD_FAIL;
 80054ac:	2303      	movs	r3, #3
 80054ae:	75fb      	strb	r3, [r7, #23]
      break;
 80054b0:	e002      	b.n	80054b8 <USBD_CDC_Setup+0x15c>
      break;
 80054b2:	bf00      	nop
 80054b4:	e008      	b.n	80054c8 <USBD_CDC_Setup+0x16c>
      break;
 80054b6:	bf00      	nop
    }
    break;
 80054b8:	e006      	b.n	80054c8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 f99b 	bl	80067f8 <USBD_CtlError>
    ret = USBD_FAIL;
 80054c2:	2303      	movs	r3, #3
 80054c4:	75fb      	strb	r3, [r7, #23]
    break;
 80054c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop

080054d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80054e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e047      	b.n	8005586 <USBD_CDC_DataIn+0xb2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80054fe:	78fa      	ldrb	r2, [r7, #3]
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	3318      	adds	r3, #24
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d029      	beq.n	8005568 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005514:	78fa      	ldrb	r2, [r7, #3]
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	3318      	adds	r3, #24
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	78f9      	ldrb	r1, [r7, #3]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	460b      	mov	r3, r1
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	1a5b      	subs	r3, r3, r1
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4403      	add	r3, r0
 8005534:	3344      	adds	r3, #68	; 0x44
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	fbb2 f1f3 	udiv	r1, r2, r3
 800553c:	fb03 f301 	mul.w	r3, r3, r1
 8005540:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005542:	2b00      	cmp	r3, #0
 8005544:	d110      	bne.n	8005568 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3318      	adds	r3, #24
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800555a:	78f9      	ldrb	r1, [r7, #3]
 800555c:	2300      	movs	r3, #0
 800555e:	2200      	movs	r2, #0
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 fecc 	bl	80072fe <USBD_LL_Transmit>
 8005566:	e00d      	b.n	8005584 <USBD_CDC_DataIn+0xb0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	f102 0150 	add.w	r1, r2, #80	; 0x50
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e012      	b.n	80055d6 <USBD_CDC_DataOut+0x48>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fee4 	bl	8007382 <USBD_LL_GetRxDataSize>
 80055ba:	4602      	mov	r2, r0
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	324c      	adds	r2, #76	; 0x4c
 80055d0:	4611      	mov	r1, r2
 80055d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ec:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <USBD_CDC_EP0_RxReady+0x46>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fe:	2bff      	cmp	r3, #255	; 0xff
 8005600:	d010      	beq.n	8005624 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)hcdc->data,
 8005610:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005618:	b292      	uxth	r2, r2
 800561a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	22ff      	movs	r2, #255	; 0xff
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  }

  return (uint8_t)USBD_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2243      	movs	r2, #67	; 0x43
 800563c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800563e:	4b03      	ldr	r3, [pc, #12]	; (800564c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20000094 	.word	0x20000094

08005650 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2243      	movs	r2, #67	; 0x43
 800565c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800565e:	4b03      	ldr	r3, [pc, #12]	; (800566c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	20000050 	.word	0x20000050

08005670 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2243      	movs	r2, #67	; 0x43
 800567c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800567e:	4b03      	ldr	r3, [pc, #12]	; (800568c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	200000d8 	.word	0x200000d8

08005690 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	220a      	movs	r2, #10
 800569c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800569e:	4b03      	ldr	r3, [pc, #12]	; (80056ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	2000000c 	.word	0x2000000c

080056b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e004      	b.n	80056ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005718:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800573c:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800573e:	2301      	movs	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	e015      	b.n	800577c <USBD_CDC_TransmitPacket+0x4e>
  }

  if (hcdc->TxState == 0U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005754:	2b00      	cmp	r3, #0
 8005756:	d110      	bne.n	800577a <USBD_CDC_TransmitPacket+0x4c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2201      	movs	r2, #1
 800575c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576e:	2181      	movs	r1, #129	; 0x81
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fdc4 	bl	80072fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005792:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800579e:	2303      	movs	r3, #3
 80057a0:	e013      	b.n	80057ca <USBD_CDC_ReceivePacket+0x46>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	7c1b      	ldrb	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d107      	bne.n	80057ba <USBD_CDC_ReceivePacket+0x36>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ae:	2340      	movs	r3, #64	; 0x40
 80057b0:	2101      	movs	r1, #1
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f001 fdc4 	bl	8007340 <USBD_LL_PrepareReceive>
 80057b8:	e006      	b.n	80057c8 <USBD_CDC_ReceivePacket+0x44>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	2101      	movs	r1, #1
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f001 fdbc 	bl	8007340 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e025      	b.n	8005836 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	79fa      	ldrb	r2, [r7, #7]
 8005828:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f001 fc32 	bl	8007094 <USBD_LL_Init>
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005852:	2303      	movs	r3, #3
 8005854:	e010      	b.n	8005878 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	f107 020e 	add.w	r2, r7, #14
 800586a:	4610      	mov	r0, r2
 800586c:	4798      	blx	r3
 800586e:	4602      	mov	r2, r0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 fc4f 	bl	800712c <USBD_LL_Start>
 800588e:	4603      	mov	r3, r0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058ba:	2303      	movs	r3, #3
 80058bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	4611      	mov	r1, r2
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	4611      	mov	r1, r2
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	4798      	blx	r3
  }

  return USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 ff2b 	bl	8006784 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800593c:	461a      	mov	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2b01      	cmp	r3, #1
 8005950:	d00e      	beq.n	8005970 <USBD_LL_SetupStage+0x5a>
 8005952:	2b01      	cmp	r3, #1
 8005954:	d302      	bcc.n	800595c <USBD_LL_SetupStage+0x46>
 8005956:	2b02      	cmp	r3, #2
 8005958:	d014      	beq.n	8005984 <USBD_LL_SetupStage+0x6e>
 800595a:	e01d      	b.n	8005998 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fa17 	bl	8005d98 <USBD_StdDevReq>
 800596a:	4603      	mov	r3, r0
 800596c:	73fb      	strb	r3, [r7, #15]
      break;
 800596e:	e020      	b.n	80059b2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fa7b 	bl	8005e74 <USBD_StdItfReq>
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
      break;
 8005982:	e016      	b.n	80059b2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fab7 	bl	8005f00 <USBD_StdEPReq>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
      break;
 8005996:	e00c      	b.n	80059b2 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800599e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fc20 	bl	80071ec <USBD_LL_StallEP>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
      break;
 80059b0:	bf00      	nop
  }

  return ret;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	460b      	mov	r3, r1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d137      	bne.n	8005a40 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d14a      	bne.n	8005a78 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d913      	bls.n	8005a16 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	bf28      	it	cs
 8005a08:	4613      	movcs	r3, r2
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 ffac 	bl	800696c <USBD_CtlContinueRx>
 8005a14:	e030      	b.n	8005a78 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d105      	bne.n	8005a38 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 ffa8 	bl	800698e <USBD_CtlSendStatus>
 8005a3e:	e01b      	b.n	8005a78 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d013      	beq.n	8005a74 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d10e      	bne.n	8005a74 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	7afa      	ldrb	r2, [r7, #11]
 8005a60:	4611      	mov	r1, r2
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	4798      	blx	r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	e002      	b.n	8005a7a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e000      	b.n	8005a7a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005a90:	7afb      	ldrb	r3, [r7, #11]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d16a      	bne.n	8005b6c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3314      	adds	r3, #20
 8005a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d155      	bne.n	8005b52 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d914      	bls.n	8005adc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	1ad2      	subs	r2, r2, r3
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 ff21 	bl	8006910 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f001 fc33 	bl	8007340 <USBD_LL_PrepareReceive>
 8005ada:	e03a      	b.n	8005b52 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d11c      	bne.n	8005b22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d316      	bcc.n	8005b22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d20f      	bcs.n	8005b22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b02:	2200      	movs	r2, #0
 8005b04:	2100      	movs	r1, #0
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 ff02 	bl	8006910 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b14:	2300      	movs	r3, #0
 8005b16:	2200      	movs	r2, #0
 8005b18:	2100      	movs	r1, #0
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f001 fc10 	bl	8007340 <USBD_LL_PrepareReceive>
 8005b20:	e017      	b.n	8005b52 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d105      	bne.n	8005b44 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b44:	2180      	movs	r1, #128	; 0x80
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f001 fb50 	bl	80071ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 ff31 	bl	80069b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d123      	bne.n	8005ba4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff fe9b 	bl	8005898 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b6a:	e01b      	b.n	8005ba4 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d013      	beq.n	8005ba0 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d10e      	bne.n	8005ba0 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	7afa      	ldrb	r2, [r7, #11]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	4798      	blx	r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	e002      	b.n	8005ba6 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e000      	b.n	8005ba6 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6852      	ldr	r2, [r2, #4]
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	4611      	mov	r1, r2
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bf2:	2340      	movs	r3, #64	; 0x40
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 fab2 	bl	8007162 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2240      	movs	r2, #64	; 0x40
 8005c0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c0e:	2340      	movs	r3, #64	; 0x40
 8005c10:	2200      	movs	r2, #0
 8005c12:	2180      	movs	r1, #128	; 0x80
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 faa4 	bl	8007162 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2240      	movs	r2, #64	; 0x40
 8005c24:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2204      	movs	r2, #4
 8005c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d105      	bne.n	8005c98 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d10b      	bne.n	8005cd0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6852      	ldr	r2, [r2, #4]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
  }

  return USBD_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	3301      	adds	r3, #1
 8005d72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d7a:	8a3b      	ldrh	r3, [r7, #16]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	b21a      	sxth	r2, r3
 8005d80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b21b      	sxth	r3, r3
 8005d88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d8a:	89fb      	ldrh	r3, [r7, #14]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d004      	beq.n	8005dbc <USBD_StdDevReq+0x24>
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	d002      	beq.n	8005dbc <USBD_StdDevReq+0x24>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <USBD_StdDevReq+0x38>
 8005dba:	e050      	b.n	8005e5e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8005dce:	e04b      	b.n	8005e68 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b09      	cmp	r3, #9
 8005dd6:	d83c      	bhi.n	8005e52 <USBD_StdDevReq+0xba>
 8005dd8:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <USBD_StdDevReq+0x48>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005e49 	.word	0x08005e49
 8005de8:	08005e53 	.word	0x08005e53
 8005dec:	08005e3f 	.word	0x08005e3f
 8005df0:	08005e53 	.word	0x08005e53
 8005df4:	08005e13 	.word	0x08005e13
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005e53 	.word	0x08005e53
 8005e00:	08005e2b 	.word	0x08005e2b
 8005e04:	08005e1d 	.word	0x08005e1d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f9ce 	bl	80061ac <USBD_GetDescriptor>
      break;
 8005e10:	e024      	b.n	8005e5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fb33 	bl	8006480 <USBD_SetAddress>
      break;
 8005e1a:	e01f      	b.n	8005e5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fb70 	bl	8006504 <USBD_SetConfig>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	e018      	b.n	8005e5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fc0d 	bl	800664c <USBD_GetConfig>
      break;
 8005e32:	e013      	b.n	8005e5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fc3c 	bl	80066b4 <USBD_GetStatus>
      break;
 8005e3c:	e00e      	b.n	8005e5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fc6a 	bl	800671a <USBD_SetFeature>
      break;
 8005e46:	e009      	b.n	8005e5c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fc79 	bl	8006742 <USBD_ClrFeature>
      break;
 8005e50:	e004      	b.n	8005e5c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fccf 	bl	80067f8 <USBD_CtlError>
      break;
 8005e5a:	bf00      	nop
    }
    break;
 8005e5c:	e004      	b.n	8005e68 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fcc9 	bl	80067f8 <USBD_CtlError>
    break;
 8005e66:	bf00      	nop
  }

  return ret;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop

08005e74 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d003      	beq.n	8005e96 <USBD_StdItfReq+0x22>
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d001      	beq.n	8005e96 <USBD_StdItfReq+0x22>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d12a      	bne.n	8005eec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d81d      	bhi.n	8005ede <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	889b      	ldrh	r3, [r3, #4]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d813      	bhi.n	8005ed4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	88db      	ldrh	r3, [r3, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d110      	bne.n	8005ee8 <USBD_StdItfReq+0x74>
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10d      	bne.n	8005ee8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fd5e 	bl	800698e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005ed2:	e009      	b.n	8005ee8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fc8e 	bl	80067f8 <USBD_CtlError>
      break;
 8005edc:	e004      	b.n	8005ee8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fc89 	bl	80067f8 <USBD_CtlError>
      break;
 8005ee6:	e000      	b.n	8005eea <USBD_StdItfReq+0x76>
      break;
 8005ee8:	bf00      	nop
    }
    break;
 8005eea:	e004      	b.n	8005ef6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fc82 	bl	80067f8 <USBD_CtlError>
    break;
 8005ef4:	bf00      	nop
  }

  return ret;
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	889b      	ldrh	r3, [r3, #4]
 8005f12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d004      	beq.n	8005f2a <USBD_StdEPReq+0x2a>
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d002      	beq.n	8005f2a <USBD_StdEPReq+0x2a>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <USBD_StdEPReq+0x3e>
 8005f28:	e135      	b.n	8006196 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f3c:	e130      	b.n	80061a0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d03e      	beq.n	8005fc4 <USBD_StdEPReq+0xc4>
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d002      	beq.n	8005f50 <USBD_StdEPReq+0x50>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d077      	beq.n	800603e <USBD_StdEPReq+0x13e>
 8005f4e:	e11c      	b.n	800618a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d002      	beq.n	8005f60 <USBD_StdEPReq+0x60>
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d015      	beq.n	8005f8a <USBD_StdEPReq+0x8a>
 8005f5e:	e02b      	b.n	8005fb8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <USBD_StdEPReq+0x80>
 8005f66:	7bbb      	ldrb	r3, [r7, #14]
 8005f68:	2b80      	cmp	r3, #128	; 0x80
 8005f6a:	d009      	beq.n	8005f80 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 f93b 	bl	80071ec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f76:	2180      	movs	r1, #128	; 0x80
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 f937 	bl	80071ec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005f7e:	e020      	b.n	8005fc2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fc38 	bl	80067f8 <USBD_CtlError>
        break;
 8005f88:	e01b      	b.n	8005fc2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	885b      	ldrh	r3, [r3, #2]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10e      	bne.n	8005fb0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <USBD_StdEPReq+0xb0>
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d008      	beq.n	8005fb0 <USBD_StdEPReq+0xb0>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	88db      	ldrh	r3, [r3, #6]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fa6:	7bbb      	ldrb	r3, [r7, #14]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 f91e 	bl	80071ec <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fcec 	bl	800698e <USBD_CtlSendStatus>

        break;
 8005fb6:	e004      	b.n	8005fc2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fc1c 	bl	80067f8 <USBD_CtlError>
        break;
 8005fc0:	bf00      	nop
      }
      break;
 8005fc2:	e0e7      	b.n	8006194 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d002      	beq.n	8005fd4 <USBD_StdEPReq+0xd4>
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d015      	beq.n	8005ffe <USBD_StdEPReq+0xfe>
 8005fd2:	e02d      	b.n	8006030 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <USBD_StdEPReq+0xf4>
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d009      	beq.n	8005ff4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 f901 	bl	80071ec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f8fd 	bl	80071ec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005ff2:	e023      	b.n	800603c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fbfe 	bl	80067f8 <USBD_CtlError>
        break;
 8005ffc:	e01e      	b.n	800603c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	885b      	ldrh	r3, [r3, #2]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d119      	bne.n	800603a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 f908 	bl	800722a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fcb7 	bl	800698e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
        }
        break;
 800602e:	e004      	b.n	800603a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fbe0 	bl	80067f8 <USBD_CtlError>
        break;
 8006038:	e000      	b.n	800603c <USBD_StdEPReq+0x13c>
        break;
 800603a:	bf00      	nop
      }
      break;
 800603c:	e0aa      	b.n	8006194 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006044:	2b02      	cmp	r3, #2
 8006046:	d002      	beq.n	800604e <USBD_StdEPReq+0x14e>
 8006048:	2b03      	cmp	r3, #3
 800604a:	d032      	beq.n	80060b2 <USBD_StdEPReq+0x1b2>
 800604c:	e097      	b.n	800617e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800604e:	7bbb      	ldrb	r3, [r7, #14]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <USBD_StdEPReq+0x164>
 8006054:	7bbb      	ldrb	r3, [r7, #14]
 8006056:	2b80      	cmp	r3, #128	; 0x80
 8006058:	d004      	beq.n	8006064 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fbcb 	bl	80067f8 <USBD_CtlError>
          break;
 8006062:	e091      	b.n	8006188 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006068:	2b00      	cmp	r3, #0
 800606a:	da0b      	bge.n	8006084 <USBD_StdEPReq+0x184>
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	3310      	adds	r3, #16
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	4413      	add	r3, r2
 8006080:	3304      	adds	r3, #4
 8006082:	e00b      	b.n	800609c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006084:	7bbb      	ldrb	r3, [r7, #14]
 8006086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	3304      	adds	r3, #4
 800609c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2202      	movs	r2, #2
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fc15 	bl	80068da <USBD_CtlSendData>
        break;
 80060b0:	e06a      	b.n	8006188 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80060b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	da11      	bge.n	80060de <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3324      	adds	r3, #36	; 0x24
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d117      	bne.n	8006104 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fb8e 	bl	80067f8 <USBD_CtlError>
            break;
 80060dc:	e054      	b.n	8006188 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	f003 020f 	and.w	r2, r3, #15
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fb7b 	bl	80067f8 <USBD_CtlError>
            break;
 8006102:	e041      	b.n	8006188 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006108:	2b00      	cmp	r3, #0
 800610a:	da0b      	bge.n	8006124 <USBD_StdEPReq+0x224>
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	3310      	adds	r3, #16
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	3304      	adds	r3, #4
 8006122:	e00b      	b.n	800613c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4413      	add	r3, r2
 800613a:	3304      	adds	r3, #4
 800613c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800613e:	7bbb      	ldrb	r3, [r7, #14]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <USBD_StdEPReq+0x24a>
 8006144:	7bbb      	ldrb	r3, [r7, #14]
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d103      	bne.n	8006152 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e00e      	b.n	8006170 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 f886 	bl	8007268 <USBD_LL_IsStallEP>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e002      	b.n	8006170 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2202      	movs	r2, #2
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fbaf 	bl	80068da <USBD_CtlSendData>
          break;
 800617c:	e004      	b.n	8006188 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fb39 	bl	80067f8 <USBD_CtlError>
        break;
 8006186:	bf00      	nop
      }
      break;
 8006188:	e004      	b.n	8006194 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fb33 	bl	80067f8 <USBD_CtlError>
      break;
 8006192:	bf00      	nop
    }
    break;
 8006194:	e004      	b.n	80061a0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fb2d 	bl	80067f8 <USBD_CtlError>
    break;
 800619e:	bf00      	nop
  }

  return ret;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	885b      	ldrh	r3, [r3, #2]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	2b06      	cmp	r3, #6
 80061ce:	f200 8128 	bhi.w	8006422 <USBD_GetDescriptor+0x276>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <USBD_GetDescriptor+0x2c>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	0800620d 	.word	0x0800620d
 80061e0:	0800624d 	.word	0x0800624d
 80061e4:	08006423 	.word	0x08006423
 80061e8:	08006423 	.word	0x08006423
 80061ec:	080063c3 	.word	0x080063c3
 80061f0:	080063ef 	.word	0x080063ef
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	7c12      	ldrb	r2, [r2, #16]
 8006200:	f107 0108 	add.w	r1, r7, #8
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	60f8      	str	r0, [r7, #12]
    break;
 800620a:	e112      	b.n	8006432 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	7c1b      	ldrb	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10d      	bne.n	8006230 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	f107 0208 	add.w	r2, r7, #8
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
 8006224:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	2202      	movs	r2, #2
 800622c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800622e:	e100      	b.n	8006432 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	f107 0208 	add.w	r2, r7, #8
 800623c:	4610      	mov	r0, r2
 800623e:	4798      	blx	r3
 8006240:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3301      	adds	r3, #1
 8006246:	2202      	movs	r2, #2
 8006248:	701a      	strb	r2, [r3, #0]
    break;
 800624a:	e0f2      	b.n	8006432 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	885b      	ldrh	r3, [r3, #2]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b05      	cmp	r3, #5
 8006254:	f200 80ac 	bhi.w	80063b0 <USBD_GetDescriptor+0x204>
 8006258:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <USBD_GetDescriptor+0xb4>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	08006279 	.word	0x08006279
 8006264:	080062ad 	.word	0x080062ad
 8006268:	080062e1 	.word	0x080062e1
 800626c:	08006315 	.word	0x08006315
 8006270:	08006349 	.word	0x08006349
 8006274:	0800637d 	.word	0x0800637d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	7c12      	ldrb	r2, [r2, #16]
 8006290:	f107 0108 	add.w	r1, r7, #8
 8006294:	4610      	mov	r0, r2
 8006296:	4798      	blx	r3
 8006298:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800629a:	e091      	b.n	80063c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 faaa 	bl	80067f8 <USBD_CtlError>
        err++;
 80062a4:	7afb      	ldrb	r3, [r7, #11]
 80062a6:	3301      	adds	r3, #1
 80062a8:	72fb      	strb	r3, [r7, #11]
      break;
 80062aa:	e089      	b.n	80063c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	7c12      	ldrb	r2, [r2, #16]
 80062c4:	f107 0108 	add.w	r1, r7, #8
 80062c8:	4610      	mov	r0, r2
 80062ca:	4798      	blx	r3
 80062cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062ce:	e077      	b.n	80063c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa90 	bl	80067f8 <USBD_CtlError>
        err++;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	3301      	adds	r3, #1
 80062dc:	72fb      	strb	r3, [r7, #11]
      break;
 80062de:	e06f      	b.n	80063c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
 80062f8:	f107 0108 	add.w	r1, r7, #8
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006302:	e05d      	b.n	80063c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa76 	bl	80067f8 <USBD_CtlError>
        err++;
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	3301      	adds	r3, #1
 8006310:	72fb      	strb	r3, [r7, #11]
      break;
 8006312:	e055      	b.n	80063c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7c12      	ldrb	r2, [r2, #16]
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006336:	e043      	b.n	80063c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa5c 	bl	80067f8 <USBD_CtlError>
        err++;
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	3301      	adds	r3, #1
 8006344:	72fb      	strb	r3, [r7, #11]
      break;
 8006346:	e03b      	b.n	80063c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7c12      	ldrb	r2, [r2, #16]
 8006360:	f107 0108 	add.w	r1, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800636a:	e029      	b.n	80063c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa42 	bl	80067f8 <USBD_CtlError>
        err++;
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	3301      	adds	r3, #1
 8006378:	72fb      	strb	r3, [r7, #11]
      break;
 800637a:	e021      	b.n	80063c0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	7c12      	ldrb	r2, [r2, #16]
 8006394:	f107 0108 	add.w	r1, r7, #8
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800639e:	e00f      	b.n	80063c0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa28 	bl	80067f8 <USBD_CtlError>
        err++;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	3301      	adds	r3, #1
 80063ac:	72fb      	strb	r3, [r7, #11]
      break;
 80063ae:	e007      	b.n	80063c0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fa20 	bl	80067f8 <USBD_CtlError>
      err++;
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	3301      	adds	r3, #1
 80063bc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80063be:	bf00      	nop
    }
    break;
 80063c0:	e037      	b.n	8006432 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	7c1b      	ldrb	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d2:	f107 0208 	add.w	r2, r7, #8
 80063d6:	4610      	mov	r0, r2
 80063d8:	4798      	blx	r3
 80063da:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80063dc:	e029      	b.n	8006432 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fa09 	bl	80067f8 <USBD_CtlError>
      err++;
 80063e6:	7afb      	ldrb	r3, [r7, #11]
 80063e8:	3301      	adds	r3, #1
 80063ea:	72fb      	strb	r3, [r7, #11]
    break;
 80063ec:	e021      	b.n	8006432 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7c1b      	ldrb	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	f107 0208 	add.w	r2, r7, #8
 8006402:	4610      	mov	r0, r2
 8006404:	4798      	blx	r3
 8006406:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	2207      	movs	r2, #7
 800640e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006410:	e00f      	b.n	8006432 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f9ef 	bl	80067f8 <USBD_CtlError>
      err++;
 800641a:	7afb      	ldrb	r3, [r7, #11]
 800641c:	3301      	adds	r3, #1
 800641e:	72fb      	strb	r3, [r7, #11]
    break;
 8006420:	e007      	b.n	8006432 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f9e7 	bl	80067f8 <USBD_CtlError>
    err++;
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	3301      	adds	r3, #1
 800642e:	72fb      	strb	r3, [r7, #11]
    break;
 8006430:	bf00      	nop
  }

  if (err != 0U)
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d11e      	bne.n	8006476 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	88db      	ldrh	r3, [r3, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d016      	beq.n	800646e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006440:	893b      	ldrh	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	88da      	ldrh	r2, [r3, #6]
 800644a:	893b      	ldrh	r3, [r7, #8]
 800644c:	4293      	cmp	r3, r2
 800644e:	bf28      	it	cs
 8006450:	4613      	movcs	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006456:	893b      	ldrh	r3, [r7, #8]
 8006458:	461a      	mov	r2, r3
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fa3c 	bl	80068da <USBD_CtlSendData>
 8006462:	e009      	b.n	8006478 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f9c6 	bl	80067f8 <USBD_CtlError>
 800646c:	e004      	b.n	8006478 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa8d 	bl	800698e <USBD_CtlSendStatus>
 8006474:	e000      	b.n	8006478 <USBD_GetDescriptor+0x2cc>
    return;
 8006476:	bf00      	nop
    }
  }
}
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop

08006480 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	889b      	ldrh	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d130      	bne.n	80064f4 <USBD_SetAddress+0x74>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	88db      	ldrh	r3, [r3, #6]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d12c      	bne.n	80064f4 <USBD_SetAddress+0x74>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	885b      	ldrh	r3, [r3, #2]
 800649e:	2b7f      	cmp	r3, #127	; 0x7f
 80064a0:	d828      	bhi.n	80064f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	885b      	ldrh	r3, [r3, #2]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d104      	bne.n	80064c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f99c 	bl	80067f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c0:	e01c      	b.n	80064fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	7bfa      	ldrb	r2, [r7, #15]
 80064c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fef6 	bl	80072c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fa5a 	bl	800698e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e8:	e008      	b.n	80064fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f2:	e003      	b.n	80064fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f97e 	bl	80067f8 <USBD_CtlError>
  }
}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	885b      	ldrh	r3, [r3, #2]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	4b4b      	ldr	r3, [pc, #300]	; (8006648 <USBD_SetConfig+0x144>)
 800651a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800651c:	4b4a      	ldr	r3, [pc, #296]	; (8006648 <USBD_SetConfig+0x144>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d905      	bls.n	8006530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f966 	bl	80067f8 <USBD_CtlError>
    return USBD_FAIL;
 800652c:	2303      	movs	r3, #3
 800652e:	e087      	b.n	8006640 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006536:	2b02      	cmp	r3, #2
 8006538:	d002      	beq.n	8006540 <USBD_SetConfig+0x3c>
 800653a:	2b03      	cmp	r3, #3
 800653c:	d025      	beq.n	800658a <USBD_SetConfig+0x86>
 800653e:	e071      	b.n	8006624 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006540:	4b41      	ldr	r3, [pc, #260]	; (8006648 <USBD_SetConfig+0x144>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01c      	beq.n	8006582 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006548:	4b3f      	ldr	r3, [pc, #252]	; (8006648 <USBD_SetConfig+0x144>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006552:	4b3d      	ldr	r3, [pc, #244]	; (8006648 <USBD_SetConfig+0x144>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff f9a8 	bl	80058ae <USBD_SetClassConfig>
 800655e:	4603      	mov	r3, r0
 8006560:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f944 	bl	80067f8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006570:	e065      	b.n	800663e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa0b 	bl	800698e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2203      	movs	r2, #3
 800657c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006580:	e05d      	b.n	800663e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa03 	bl	800698e <USBD_CtlSendStatus>
    break;
 8006588:	e059      	b.n	800663e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800658a:	4b2f      	ldr	r3, [pc, #188]	; (8006648 <USBD_SetConfig+0x144>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d112      	bne.n	80065b8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800659a:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <USBD_SetConfig+0x144>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065a4:	4b28      	ldr	r3, [pc, #160]	; (8006648 <USBD_SetConfig+0x144>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff f99b 	bl	80058e6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f9ec 	bl	800698e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80065b6:	e042      	b.n	800663e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80065b8:	4b23      	ldr	r3, [pc, #140]	; (8006648 <USBD_SetConfig+0x144>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d02a      	beq.n	800661c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff f989 	bl	80058e6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80065d4:	4b1c      	ldr	r3, [pc, #112]	; (8006648 <USBD_SetConfig+0x144>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80065de:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <USBD_SetConfig+0x144>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff f962 	bl	80058ae <USBD_SetClassConfig>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00f      	beq.n	8006614 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8fe 	bl	80067f8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff f96e 	bl	80058e6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2202      	movs	r2, #2
 800660e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006612:	e014      	b.n	800663e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f9ba 	bl	800698e <USBD_CtlSendStatus>
    break;
 800661a:	e010      	b.n	800663e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f9b6 	bl	800698e <USBD_CtlSendStatus>
    break;
 8006622:	e00c      	b.n	800663e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f8e6 	bl	80067f8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <USBD_SetConfig+0x144>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff f957 	bl	80058e6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	73fb      	strb	r3, [r7, #15]
    break;
 800663c:	bf00      	nop
  }

  return ret;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	2000020c 	.word	0x2000020c

0800664c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	88db      	ldrh	r3, [r3, #6]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d004      	beq.n	8006668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f8c9 	bl	80067f8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006666:	e021      	b.n	80066ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666e:	2b01      	cmp	r3, #1
 8006670:	db17      	blt.n	80066a2 <USBD_GetConfig+0x56>
 8006672:	2b02      	cmp	r3, #2
 8006674:	dd02      	ble.n	800667c <USBD_GetConfig+0x30>
 8006676:	2b03      	cmp	r3, #3
 8006678:	d00b      	beq.n	8006692 <USBD_GetConfig+0x46>
 800667a:	e012      	b.n	80066a2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3308      	adds	r3, #8
 8006686:	2201      	movs	r2, #1
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f925 	bl	80068da <USBD_CtlSendData>
      break;
 8006690:	e00c      	b.n	80066ac <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3304      	adds	r3, #4
 8006696:	2201      	movs	r2, #1
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f91d 	bl	80068da <USBD_CtlSendData>
      break;
 80066a0:	e004      	b.n	80066ac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f8a7 	bl	80067f8 <USBD_CtlError>
      break;
 80066aa:	bf00      	nop
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c4:	3b01      	subs	r3, #1
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d81e      	bhi.n	8006708 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	88db      	ldrh	r3, [r3, #6]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d004      	beq.n	80066dc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f88f 	bl	80067f8 <USBD_CtlError>
      break;
 80066da:	e01a      	b.n	8006712 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f043 0202 	orr.w	r2, r3, #2
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	330c      	adds	r3, #12
 80066fc:	2202      	movs	r2, #2
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8ea 	bl	80068da <USBD_CtlSendData>
    break;
 8006706:	e004      	b.n	8006712 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f874 	bl	80067f8 <USBD_CtlError>
    break;
 8006710:	bf00      	nop
  }
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	885b      	ldrh	r3, [r3, #2]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d106      	bne.n	800673a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f92a 	bl	800698e <USBD_CtlSendStatus>
  }
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006752:	3b01      	subs	r3, #1
 8006754:	2b02      	cmp	r3, #2
 8006756:	d80b      	bhi.n	8006770 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	885b      	ldrh	r3, [r3, #2]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d10c      	bne.n	800677a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f910 	bl	800698e <USBD_CtlSendStatus>
      }
      break;
 800676e:	e004      	b.n	800677a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f840 	bl	80067f8 <USBD_CtlError>
      break;
 8006778:	e000      	b.n	800677c <USBD_ClrFeature+0x3a>
      break;
 800677a:	bf00      	nop
  }
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fad4 	bl	8005d5c <SWAPBYTE>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff fac7 	bl	8005d5c <SWAPBYTE>
 80067ce:	4603      	mov	r3, r0
 80067d0:	461a      	mov	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff faba 	bl	8005d5c <SWAPBYTE>
 80067e8:	4603      	mov	r3, r0
 80067ea:	461a      	mov	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	80da      	strh	r2, [r3, #6]
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006802:	2180      	movs	r1, #128	; 0x80
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fcf1 	bl	80071ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800680a:	2100      	movs	r1, #0
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fced 	bl	80071ec <USBD_LL_StallEP>
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b086      	sub	sp, #24
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d036      	beq.n	800689e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006834:	6938      	ldr	r0, [r7, #16]
 8006836:	f000 f836 	bl	80068a6 <USBD_GetLen>
 800683a:	4603      	mov	r3, r0
 800683c:	3301      	adds	r3, #1
 800683e:	b29b      	uxth	r3, r3
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4413      	add	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	7812      	ldrb	r2, [r2, #0]
 8006852:	701a      	strb	r2, [r3, #0]
  idx++;
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	3301      	adds	r3, #1
 8006858:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	4413      	add	r3, r2
 8006860:	2203      	movs	r2, #3
 8006862:	701a      	strb	r2, [r3, #0]
  idx++;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	3301      	adds	r3, #1
 8006868:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800686a:	e013      	b.n	8006894 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4413      	add	r3, r2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	7812      	ldrb	r2, [r2, #0]
 8006876:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	3301      	adds	r3, #1
 800687c:	613b      	str	r3, [r7, #16]
    idx++;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	3301      	adds	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4413      	add	r3, r2
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
    idx++;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	3301      	adds	r3, #1
 8006892:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e7      	bne.n	800686c <USBD_GetString+0x52>
 800689c:	e000      	b.n	80068a0 <USBD_GetString+0x86>
    return;
 800689e:	bf00      	nop
  }
}
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068b6:	e005      	b.n	80068c4 <USBD_GetLen+0x1e>
  {
    len++;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	3301      	adds	r3, #1
 80068bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f5      	bne.n	80068b8 <USBD_GetLen+0x12>
  }

  return len;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	2100      	movs	r1, #0
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fcfc 	bl	80072fe <USBD_LL_Transmit>

  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	2100      	movs	r1, #0
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fceb 	bl	80072fe <USBD_LL_Transmit>

  return USBD_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2203      	movs	r2, #3
 8006942:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	2100      	movs	r1, #0
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fcef 	bl	8007340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	2100      	movs	r1, #0
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fcde 	bl	8007340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b082      	sub	sp, #8
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2204      	movs	r2, #4
 800699a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800699e:	2300      	movs	r3, #0
 80069a0:	2200      	movs	r2, #0
 80069a2:	2100      	movs	r1, #0
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fcaa 	bl	80072fe <USBD_LL_Transmit>

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2205      	movs	r2, #5
 80069c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069c4:	2300      	movs	r3, #0
 80069c6:	2200      	movs	r2, #0
 80069c8:	2100      	movs	r1, #0
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fcb8 	bl	8007340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069e0:	2200      	movs	r2, #0
 80069e2:	4912      	ldr	r1, [pc, #72]	; (8006a2c <MX_USB_DEVICE_Init+0x50>)
 80069e4:	4812      	ldr	r0, [pc, #72]	; (8006a30 <MX_USB_DEVICE_Init+0x54>)
 80069e6:	f7fe fef4 	bl	80057d2 <USBD_Init>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80069f0:	f7f9 fede 	bl	80007b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80069f4:	490f      	ldr	r1, [pc, #60]	; (8006a34 <MX_USB_DEVICE_Init+0x58>)
 80069f6:	480e      	ldr	r0, [pc, #56]	; (8006a30 <MX_USB_DEVICE_Init+0x54>)
 80069f8:	f7fe ff21 	bl	800583e <USBD_RegisterClass>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a02:	f7f9 fed5 	bl	80007b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a06:	490c      	ldr	r1, [pc, #48]	; (8006a38 <MX_USB_DEVICE_Init+0x5c>)
 8006a08:	4809      	ldr	r0, [pc, #36]	; (8006a30 <MX_USB_DEVICE_Init+0x54>)
 8006a0a:	f7fe fe51 	bl	80056b0 <USBD_CDC_RegisterInterface>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a14:	f7f9 fecc 	bl	80007b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a18:	4805      	ldr	r0, [pc, #20]	; (8006a30 <MX_USB_DEVICE_Init+0x54>)
 8006a1a:	f7fe ff31 	bl	8005880 <USBD_Start>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a24:	f7f9 fec4 	bl	80007b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000138 	.word	0x20000138
 8006a30:	20000270 	.word	0x20000270
 8006a34:	20000018 	.word	0x20000018
 8006a38:	20000124 	.word	0x20000124

08006a3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a40:	2200      	movs	r2, #0
 8006a42:	4905      	ldr	r1, [pc, #20]	; (8006a58 <CDC_Init_FS+0x1c>)
 8006a44:	4805      	ldr	r0, [pc, #20]	; (8006a5c <CDC_Init_FS+0x20>)
 8006a46:	f7fe fe48 	bl	80056da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a4a:	4905      	ldr	r1, [pc, #20]	; (8006a60 <CDC_Init_FS+0x24>)
 8006a4c:	4803      	ldr	r0, [pc, #12]	; (8006a5c <CDC_Init_FS+0x20>)
 8006a4e:	f7fe fe5b 	bl	8005708 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000d40 	.word	0x20000d40
 8006a5c:	20000270 	.word	0x20000270
 8006a60:	20000540 	.word	0x20000540

08006a64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	71fb      	strb	r3, [r7, #7]
 8006a80:	4613      	mov	r3, r2
 8006a82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	2b23      	cmp	r3, #35	; 0x23
 8006a88:	d85c      	bhi.n	8006b44 <CDC_Control_FS+0xd0>
 8006a8a:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <CDC_Control_FS+0x1c>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006b45 	.word	0x08006b45
 8006a94:	08006b45 	.word	0x08006b45
 8006a98:	08006b45 	.word	0x08006b45
 8006a9c:	08006b45 	.word	0x08006b45
 8006aa0:	08006b45 	.word	0x08006b45
 8006aa4:	08006b45 	.word	0x08006b45
 8006aa8:	08006b45 	.word	0x08006b45
 8006aac:	08006b45 	.word	0x08006b45
 8006ab0:	08006b45 	.word	0x08006b45
 8006ab4:	08006b45 	.word	0x08006b45
 8006ab8:	08006b45 	.word	0x08006b45
 8006abc:	08006b45 	.word	0x08006b45
 8006ac0:	08006b45 	.word	0x08006b45
 8006ac4:	08006b45 	.word	0x08006b45
 8006ac8:	08006b45 	.word	0x08006b45
 8006acc:	08006b45 	.word	0x08006b45
 8006ad0:	08006b45 	.word	0x08006b45
 8006ad4:	08006b45 	.word	0x08006b45
 8006ad8:	08006b45 	.word	0x08006b45
 8006adc:	08006b45 	.word	0x08006b45
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006b45 	.word	0x08006b45
 8006ae8:	08006b45 	.word	0x08006b45
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006b45 	.word	0x08006b45
 8006af8:	08006b45 	.word	0x08006b45
 8006afc:	08006b45 	.word	0x08006b45
 8006b00:	08006b45 	.word	0x08006b45
 8006b04:	08006b45 	.word	0x08006b45
 8006b08:	08006b45 	.word	0x08006b45
 8006b0c:	08006b45 	.word	0x08006b45
 8006b10:	08006b21 	.word	0x08006b21
 8006b14:	08006b33 	.word	0x08006b33
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	08006b45 	.word	0x08006b45
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <CDC_Control_FS+0xe0>)
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	6810      	ldr	r0, [r2, #0]
 8006b26:	6018      	str	r0, [r3, #0]
 8006b28:	8891      	ldrh	r1, [r2, #4]
 8006b2a:	7992      	ldrb	r2, [r2, #6]
 8006b2c:	8099      	strh	r1, [r3, #4]
 8006b2e:	719a      	strb	r2, [r3, #6]
    break;
 8006b30:	e009      	b.n	8006b46 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	4a07      	ldr	r2, [pc, #28]	; (8006b54 <CDC_Control_FS+0xe0>)
 8006b36:	6810      	ldr	r0, [r2, #0]
 8006b38:	6018      	str	r0, [r3, #0]
 8006b3a:	8891      	ldrh	r1, [r2, #4]
 8006b3c:	7992      	ldrb	r2, [r2, #6]
 8006b3e:	8099      	strh	r1, [r3, #4]
 8006b40:	719a      	strb	r2, [r3, #6]
    break;
 8006b42:	e000      	b.n	8006b46 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006b44:	bf00      	nop
  }

  return (USBD_OK);
 8006b46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	2000011c 	.word	0x2000011c

08006b58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	4805      	ldr	r0, [pc, #20]	; (8006b7c <CDC_Receive_FS+0x24>)
 8006b66:	f7fe fdcf 	bl	8005708 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b6a:	4804      	ldr	r0, [pc, #16]	; (8006b7c <CDC_Receive_FS+0x24>)
 8006b6c:	f7fe fe0a 	bl	8005784 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006b70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000270 	.word	0x20000270

08006b80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b90:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <CDC_Transmit_FS+0x44>)
 8006b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <CDC_Transmit_FS+0x24>
    return USBD_BUSY;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e00b      	b.n	8006bbc <CDC_Transmit_FS+0x3c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006ba4:	887b      	ldrh	r3, [r7, #2]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4806      	ldr	r0, [pc, #24]	; (8006bc4 <CDC_Transmit_FS+0x44>)
 8006bac:	f7fe fd95 	bl	80056da <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006bb0:	4804      	ldr	r0, [pc, #16]	; (8006bc4 <CDC_Transmit_FS+0x44>)
 8006bb2:	f7fe fdbc 	bl	800572e <USBD_CDC_TransmitPacket>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20000270 	.word	0x20000270

08006bc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2212      	movs	r2, #18
 8006bfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	20000154 	.word	0x20000154

08006c10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2204      	movs	r2, #4
 8006c20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c22:	4b03      	ldr	r3, [pc, #12]	; (8006c30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	20000168 	.word	0x20000168

08006c34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	6039      	str	r1, [r7, #0]
 8006c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d105      	bne.n	8006c52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	4907      	ldr	r1, [pc, #28]	; (8006c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c4a:	4808      	ldr	r0, [pc, #32]	; (8006c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8006c4c:	f7ff fde5 	bl	800681a <USBD_GetString>
 8006c50:	e004      	b.n	8006c5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	4904      	ldr	r1, [pc, #16]	; (8006c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c56:	4805      	ldr	r0, [pc, #20]	; (8006c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8006c58:	f7ff fddf 	bl	800681a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c5c:	4b02      	ldr	r3, [pc, #8]	; (8006c68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20001540 	.word	0x20001540
 8006c6c:	08007618 	.word	0x08007618

08006c70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	4904      	ldr	r1, [pc, #16]	; (8006c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c80:	4804      	ldr	r0, [pc, #16]	; (8006c94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c82:	f7ff fdca 	bl	800681a <USBD_GetString>
  return USBD_StrDesc;
 8006c86:	4b02      	ldr	r3, [pc, #8]	; (8006c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20001540 	.word	0x20001540
 8006c94:	08007630 	.word	0x08007630

08006c98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	6039      	str	r1, [r7, #0]
 8006ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	221a      	movs	r2, #26
 8006ca8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006caa:	f000 f843 	bl	8006d34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006cae:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	2000016c 	.word	0x2000016c

08006cbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6039      	str	r1, [r7, #0]
 8006cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	4907      	ldr	r1, [pc, #28]	; (8006cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cd2:	4808      	ldr	r0, [pc, #32]	; (8006cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006cd4:	f7ff fda1 	bl	800681a <USBD_GetString>
 8006cd8:	e004      	b.n	8006ce4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	4904      	ldr	r1, [pc, #16]	; (8006cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cde:	4805      	ldr	r0, [pc, #20]	; (8006cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ce0:	f7ff fd9b 	bl	800681a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ce4:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20001540 	.word	0x20001540
 8006cf4:	08007644 	.word	0x08007644

08006cf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d105      	bne.n	8006d16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	4907      	ldr	r1, [pc, #28]	; (8006d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d0e:	4808      	ldr	r0, [pc, #32]	; (8006d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d10:	f7ff fd83 	bl	800681a <USBD_GetString>
 8006d14:	e004      	b.n	8006d20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	4904      	ldr	r1, [pc, #16]	; (8006d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d1a:	4805      	ldr	r0, [pc, #20]	; (8006d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d1c:	f7ff fd7d 	bl	800681a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d20:	4b02      	ldr	r3, [pc, #8]	; (8006d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20001540 	.word	0x20001540
 8006d30:	08007650 	.word	0x08007650

08006d34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <Get_SerialNum+0x44>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <Get_SerialNum+0x48>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d46:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <Get_SerialNum+0x4c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4413      	add	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	4909      	ldr	r1, [pc, #36]	; (8006d84 <Get_SerialNum+0x50>)
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f814 	bl	8006d8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d64:	2204      	movs	r2, #4
 8006d66:	4908      	ldr	r1, [pc, #32]	; (8006d88 <Get_SerialNum+0x54>)
 8006d68:	68b8      	ldr	r0, [r7, #8]
 8006d6a:	f000 f80f 	bl	8006d8c <IntToUnicode>
  }
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	1fff7a10 	.word	0x1fff7a10
 8006d7c:	1fff7a14 	.word	0x1fff7a14
 8006d80:	1fff7a18 	.word	0x1fff7a18
 8006d84:	2000016e 	.word	0x2000016e
 8006d88:	2000017e 	.word	0x2000017e

08006d8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
 8006da2:	e027      	b.n	8006df4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	0f1b      	lsrs	r3, r3, #28
 8006da8:	2b09      	cmp	r3, #9
 8006daa:	d80b      	bhi.n	8006dc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	0f1b      	lsrs	r3, r3, #28
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	4619      	mov	r1, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	440b      	add	r3, r1
 8006dbc:	3230      	adds	r2, #48	; 0x30
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e00a      	b.n	8006dda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	0f1b      	lsrs	r3, r3, #28
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4619      	mov	r1, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3237      	adds	r2, #55	; 0x37
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	3301      	adds	r3, #1
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4413      	add	r3, r2
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006dee:	7dfb      	ldrb	r3, [r7, #23]
 8006df0:	3301      	adds	r3, #1
 8006df2:	75fb      	strb	r3, [r7, #23]
 8006df4:	7dfa      	ldrb	r2, [r7, #23]
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d3d3      	bcc.n	8006da4 <IntToUnicode+0x18>
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08a      	sub	sp, #40	; 0x28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e10:	f107 0314 	add.w	r3, r7, #20
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	605a      	str	r2, [r3, #4]
 8006e1a:	609a      	str	r2, [r3, #8]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e28:	d13a      	bne.n	8006ea0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <HAL_PCD_MspInit+0xa0>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	4a1d      	ldr	r2, [pc, #116]	; (8006ea8 <HAL_PCD_MspInit+0xa0>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	6313      	str	r3, [r2, #48]	; 0x30
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <HAL_PCD_MspInit+0xa0>)
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e54:	2303      	movs	r3, #3
 8006e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e58:	230a      	movs	r3, #10
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e5c:	f107 0314 	add.w	r3, r7, #20
 8006e60:	4619      	mov	r1, r3
 8006e62:	4812      	ldr	r0, [pc, #72]	; (8006eac <HAL_PCD_MspInit+0xa4>)
 8006e64:	f7f9 ff7a 	bl	8000d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <HAL_PCD_MspInit+0xa0>)
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6c:	4a0e      	ldr	r2, [pc, #56]	; (8006ea8 <HAL_PCD_MspInit+0xa0>)
 8006e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e72:	6353      	str	r3, [r2, #52]	; 0x34
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <HAL_PCD_MspInit+0xa0>)
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7c:	4a0a      	ldr	r2, [pc, #40]	; (8006ea8 <HAL_PCD_MspInit+0xa0>)
 8006e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e82:	6453      	str	r3, [r2, #68]	; 0x44
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <HAL_PCD_MspInit+0xa0>)
 8006e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e90:	2200      	movs	r2, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	2043      	movs	r0, #67	; 0x43
 8006e96:	f7f9 ff2a 	bl	8000cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e9a:	2043      	movs	r0, #67	; 0x43
 8006e9c:	f7f9 ff43 	bl	8000d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	3728      	adds	r7, #40	; 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	40020000 	.word	0x40020000

08006eb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	f7fe fd25 	bl	8005916 <USBD_LL_SetupStage>
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	4619      	mov	r1, r3
 8006efe:	f7fe fd5d 	bl	80059bc <USBD_LL_DataOutStage>
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	3348      	adds	r3, #72	; 0x48
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	4619      	mov	r1, r3
 8006f32:	f7fe fda6 	bl	8005a82 <USBD_LL_DataInStage>
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe feaa 	bl	8005ca6 <USBD_LL_SOF>
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f62:	2301      	movs	r3, #1
 8006f64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]
 8006f72:	e008      	b.n	8006f86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d102      	bne.n	8006f82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
 8006f80:	e001      	b.n	8006f86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006f82:	f7f9 fc15 	bl	80007b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f8c:	7bfa      	ldrb	r2, [r7, #15]
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe fe4d 	bl	8005c30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fe06 	bl	8005bae <USBD_LL_Reset>
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fe48 	bl	8005c50 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fd2:	f043 0301 	orr.w	r3, r3, #1
 8006fd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006fe0:	4b04      	ldr	r3, [pc, #16]	; (8006ff4 <HAL_PCD_SuspendCallback+0x48>)
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	4a03      	ldr	r2, [pc, #12]	; (8006ff4 <HAL_PCD_SuspendCallback+0x48>)
 8006fe6:	f043 0306 	orr.w	r3, r3, #6
 8006fea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	e000ed00 	.word	0xe000ed00

08006ff8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fe37 	bl	8005c7a <USBD_LL_Resume>
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	4611      	mov	r1, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe fe62 	bl	8005cf4 <USBD_LL_IsoOUTIncomplete>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fe43 	bl	8005cda <USBD_LL_IsoINIncomplete>
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fe4f 	bl	8005d0e <USBD_LL_DevConnected>
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fe4c 	bl	8005d24 <USBD_LL_DevDisconnected>
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d13c      	bne.n	800711e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80070a4:	4a20      	ldr	r2, [pc, #128]	; (8007128 <USBD_LL_Init+0x94>)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a1e      	ldr	r2, [pc, #120]	; (8007128 <USBD_LL_Init+0x94>)
 80070b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80070b4:	4b1c      	ldr	r3, [pc, #112]	; (8007128 <USBD_LL_Init+0x94>)
 80070b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80070bc:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <USBD_LL_Init+0x94>)
 80070be:	2204      	movs	r2, #4
 80070c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80070c2:	4b19      	ldr	r3, [pc, #100]	; (8007128 <USBD_LL_Init+0x94>)
 80070c4:	2202      	movs	r2, #2
 80070c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80070c8:	4b17      	ldr	r3, [pc, #92]	; (8007128 <USBD_LL_Init+0x94>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <USBD_LL_Init+0x94>)
 80070d0:	2202      	movs	r2, #2
 80070d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80070d4:	4b14      	ldr	r3, [pc, #80]	; (8007128 <USBD_LL_Init+0x94>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <USBD_LL_Init+0x94>)
 80070dc:	2200      	movs	r2, #0
 80070de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80070e0:	4b11      	ldr	r3, [pc, #68]	; (8007128 <USBD_LL_Init+0x94>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <USBD_LL_Init+0x94>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80070ec:	4b0e      	ldr	r3, [pc, #56]	; (8007128 <USBD_LL_Init+0x94>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80070f2:	480d      	ldr	r0, [pc, #52]	; (8007128 <USBD_LL_Init+0x94>)
 80070f4:	f7fa ff89 	bl	800200a <HAL_PCD_Init>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80070fe:	f7f9 fb57 	bl	80007b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007102:	2180      	movs	r1, #128	; 0x80
 8007104:	4808      	ldr	r0, [pc, #32]	; (8007128 <USBD_LL_Init+0x94>)
 8007106:	f7fc f8e6 	bl	80032d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800710a:	2240      	movs	r2, #64	; 0x40
 800710c:	2100      	movs	r1, #0
 800710e:	4806      	ldr	r0, [pc, #24]	; (8007128 <USBD_LL_Init+0x94>)
 8007110:	f7fc f89a 	bl	8003248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007114:	2280      	movs	r2, #128	; 0x80
 8007116:	2101      	movs	r1, #1
 8007118:	4803      	ldr	r0, [pc, #12]	; (8007128 <USBD_LL_Init+0x94>)
 800711a:	f7fc f895 	bl	8003248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20001740 	.word	0x20001740

0800712c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007142:	4618      	mov	r0, r3
 8007144:	f7fb f87e 	bl	8002244 <HAL_PCD_Start>
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	4618      	mov	r0, r3
 8007150:	f000 f92a 	bl	80073a8 <USBD_Get_USB_Status>
 8007154:	4603      	mov	r3, r0
 8007156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007158:	7bbb      	ldrb	r3, [r7, #14]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	4608      	mov	r0, r1
 800716c:	4611      	mov	r1, r2
 800716e:	461a      	mov	r2, r3
 8007170:	4603      	mov	r3, r0
 8007172:	70fb      	strb	r3, [r7, #3]
 8007174:	460b      	mov	r3, r1
 8007176:	70bb      	strb	r3, [r7, #2]
 8007178:	4613      	mov	r3, r2
 800717a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800718a:	78bb      	ldrb	r3, [r7, #2]
 800718c:	883a      	ldrh	r2, [r7, #0]
 800718e:	78f9      	ldrb	r1, [r7, #3]
 8007190:	f7fb fc62 	bl	8002a58 <HAL_PCD_EP_Open>
 8007194:	4603      	mov	r3, r0
 8007196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f904 	bl	80073a8 <USBD_Get_USB_Status>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fb fcab 	bl	8002b28 <HAL_PCD_EP_Close>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 f8e5 	bl	80073a8 <USBD_Get_USB_Status>
 80071de:	4603      	mov	r3, r0
 80071e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007206:	78fa      	ldrb	r2, [r7, #3]
 8007208:	4611      	mov	r1, r2
 800720a:	4618      	mov	r0, r3
 800720c:	f7fb fd83 	bl	8002d16 <HAL_PCD_EP_SetStall>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f8c6 	bl	80073a8 <USBD_Get_USB_Status>
 800721c:	4603      	mov	r3, r0
 800721e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007220:	7bbb      	ldrb	r3, [r7, #14]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f7fb fdc8 	bl	8002dde <HAL_PCD_EP_ClrStall>
 800724e:	4603      	mov	r3, r0
 8007250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 f8a7 	bl	80073a8 <USBD_Get_USB_Status>
 800725a:	4603      	mov	r3, r0
 800725c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800725e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800727a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800727c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007280:	2b00      	cmp	r3, #0
 8007282:	da0b      	bge.n	800729c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	4613      	mov	r3, r2
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	1a9b      	subs	r3, r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	440b      	add	r3, r1
 8007296:	333e      	adds	r3, #62	; 0x3e
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	e00b      	b.n	80072b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072a2:	68f9      	ldr	r1, [r7, #12]
 80072a4:	4613      	mov	r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	440b      	add	r3, r1
 80072ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fb fb95 	bl	8002a0e <HAL_PCD_SetAddress>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f85c 	bl	80073a8 <USBD_Get_USB_Status>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	460b      	mov	r3, r1
 800730c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800731c:	7af9      	ldrb	r1, [r7, #11]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	f7fb fcae 	bl	8002c82 <HAL_PCD_EP_Transmit>
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f83b 	bl	80073a8 <USBD_Get_USB_Status>
 8007332:	4603      	mov	r3, r0
 8007334:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007336:	7dbb      	ldrb	r3, [r7, #22]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	460b      	mov	r3, r1
 800734e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800735e:	7af9      	ldrb	r1, [r7, #11]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	f7fb fc2a 	bl	8002bbc <HAL_PCD_EP_Receive>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f81a 	bl	80073a8 <USBD_Get_USB_Status>
 8007374:	4603      	mov	r3, r0
 8007376:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007378:	7dbb      	ldrb	r3, [r7, #22]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007394:	78fa      	ldrb	r2, [r7, #3]
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f7fb fc5a 	bl	8002c52 <HAL_PCD_EP_GetRxCount>
 800739e:	4603      	mov	r3, r0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d817      	bhi.n	80073ec <USBD_Get_USB_Status+0x44>
 80073bc:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <USBD_Get_USB_Status+0x1c>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	080073d5 	.word	0x080073d5
 80073c8:	080073db 	.word	0x080073db
 80073cc:	080073e1 	.word	0x080073e1
 80073d0:	080073e7 	.word	0x080073e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
    break;
 80073d8:	e00b      	b.n	80073f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	73fb      	strb	r3, [r7, #15]
    break;
 80073de:	e008      	b.n	80073f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073e0:	2301      	movs	r3, #1
 80073e2:	73fb      	strb	r3, [r7, #15]
    break;
 80073e4:	e005      	b.n	80073f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073e6:	2303      	movs	r3, #3
 80073e8:	73fb      	strb	r3, [r7, #15]
    break;
 80073ea:	e002      	b.n	80073f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80073ec:	2303      	movs	r3, #3
 80073ee:	73fb      	strb	r3, [r7, #15]
    break;
 80073f0:	bf00      	nop
  }
  return usb_status;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <__errno>:
 8007400:	4b01      	ldr	r3, [pc, #4]	; (8007408 <__errno+0x8>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000188 	.word	0x20000188

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4e0d      	ldr	r6, [pc, #52]	; (8007444 <__libc_init_array+0x38>)
 8007410:	4c0d      	ldr	r4, [pc, #52]	; (8007448 <__libc_init_array+0x3c>)
 8007412:	1ba4      	subs	r4, r4, r6
 8007414:	10a4      	asrs	r4, r4, #2
 8007416:	2500      	movs	r5, #0
 8007418:	42a5      	cmp	r5, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	4e0b      	ldr	r6, [pc, #44]	; (800744c <__libc_init_array+0x40>)
 800741e:	4c0c      	ldr	r4, [pc, #48]	; (8007450 <__libc_init_array+0x44>)
 8007420:	f000 f8ea 	bl	80075f8 <_init>
 8007424:	1ba4      	subs	r4, r4, r6
 8007426:	10a4      	asrs	r4, r4, #2
 8007428:	2500      	movs	r5, #0
 800742a:	42a5      	cmp	r5, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007434:	4798      	blx	r3
 8007436:	3501      	adds	r5, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800743e:	4798      	blx	r3
 8007440:	3501      	adds	r5, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	08007680 	.word	0x08007680
 8007448:	08007680 	.word	0x08007680
 800744c:	08007680 	.word	0x08007680
 8007450:	08007684 	.word	0x08007684

08007454 <malloc>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <malloc+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f000 b861 	b.w	8007520 <_malloc_r>
 800745e:	bf00      	nop
 8007460:	20000188 	.word	0x20000188

08007464 <free>:
 8007464:	4b02      	ldr	r3, [pc, #8]	; (8007470 <free+0xc>)
 8007466:	4601      	mov	r1, r0
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	f000 b80b 	b.w	8007484 <_free_r>
 800746e:	bf00      	nop
 8007470:	20000188 	.word	0x20000188

08007474 <memset>:
 8007474:	4402      	add	r2, r0
 8007476:	4603      	mov	r3, r0
 8007478:	4293      	cmp	r3, r2
 800747a:	d100      	bne.n	800747e <memset+0xa>
 800747c:	4770      	bx	lr
 800747e:	f803 1b01 	strb.w	r1, [r3], #1
 8007482:	e7f9      	b.n	8007478 <memset+0x4>

08007484 <_free_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4605      	mov	r5, r0
 8007488:	2900      	cmp	r1, #0
 800748a:	d045      	beq.n	8007518 <_free_r+0x94>
 800748c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007490:	1f0c      	subs	r4, r1, #4
 8007492:	2b00      	cmp	r3, #0
 8007494:	bfb8      	it	lt
 8007496:	18e4      	addlt	r4, r4, r3
 8007498:	f000 f8ac 	bl	80075f4 <__malloc_lock>
 800749c:	4a1f      	ldr	r2, [pc, #124]	; (800751c <_free_r+0x98>)
 800749e:	6813      	ldr	r3, [r2, #0]
 80074a0:	4610      	mov	r0, r2
 80074a2:	b933      	cbnz	r3, 80074b2 <_free_r+0x2e>
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6014      	str	r4, [r2, #0]
 80074a8:	4628      	mov	r0, r5
 80074aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ae:	f000 b8a2 	b.w	80075f6 <__malloc_unlock>
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	d90c      	bls.n	80074d0 <_free_r+0x4c>
 80074b6:	6821      	ldr	r1, [r4, #0]
 80074b8:	1862      	adds	r2, r4, r1
 80074ba:	4293      	cmp	r3, r2
 80074bc:	bf04      	itt	eq
 80074be:	681a      	ldreq	r2, [r3, #0]
 80074c0:	685b      	ldreq	r3, [r3, #4]
 80074c2:	6063      	str	r3, [r4, #4]
 80074c4:	bf04      	itt	eq
 80074c6:	1852      	addeq	r2, r2, r1
 80074c8:	6022      	streq	r2, [r4, #0]
 80074ca:	6004      	str	r4, [r0, #0]
 80074cc:	e7ec      	b.n	80074a8 <_free_r+0x24>
 80074ce:	4613      	mov	r3, r2
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	b10a      	cbz	r2, 80074d8 <_free_r+0x54>
 80074d4:	42a2      	cmp	r2, r4
 80074d6:	d9fa      	bls.n	80074ce <_free_r+0x4a>
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	1858      	adds	r0, r3, r1
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d10b      	bne.n	80074f8 <_free_r+0x74>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	4401      	add	r1, r0
 80074e4:	1858      	adds	r0, r3, r1
 80074e6:	4282      	cmp	r2, r0
 80074e8:	6019      	str	r1, [r3, #0]
 80074ea:	d1dd      	bne.n	80074a8 <_free_r+0x24>
 80074ec:	6810      	ldr	r0, [r2, #0]
 80074ee:	6852      	ldr	r2, [r2, #4]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	4401      	add	r1, r0
 80074f4:	6019      	str	r1, [r3, #0]
 80074f6:	e7d7      	b.n	80074a8 <_free_r+0x24>
 80074f8:	d902      	bls.n	8007500 <_free_r+0x7c>
 80074fa:	230c      	movs	r3, #12
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	e7d3      	b.n	80074a8 <_free_r+0x24>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	1821      	adds	r1, r4, r0
 8007504:	428a      	cmp	r2, r1
 8007506:	bf04      	itt	eq
 8007508:	6811      	ldreq	r1, [r2, #0]
 800750a:	6852      	ldreq	r2, [r2, #4]
 800750c:	6062      	str	r2, [r4, #4]
 800750e:	bf04      	itt	eq
 8007510:	1809      	addeq	r1, r1, r0
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	605c      	str	r4, [r3, #4]
 8007516:	e7c7      	b.n	80074a8 <_free_r+0x24>
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	20000210 	.word	0x20000210

08007520 <_malloc_r>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	1ccd      	adds	r5, r1, #3
 8007524:	f025 0503 	bic.w	r5, r5, #3
 8007528:	3508      	adds	r5, #8
 800752a:	2d0c      	cmp	r5, #12
 800752c:	bf38      	it	cc
 800752e:	250c      	movcc	r5, #12
 8007530:	2d00      	cmp	r5, #0
 8007532:	4606      	mov	r6, r0
 8007534:	db01      	blt.n	800753a <_malloc_r+0x1a>
 8007536:	42a9      	cmp	r1, r5
 8007538:	d903      	bls.n	8007542 <_malloc_r+0x22>
 800753a:	230c      	movs	r3, #12
 800753c:	6033      	str	r3, [r6, #0]
 800753e:	2000      	movs	r0, #0
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	f000 f857 	bl	80075f4 <__malloc_lock>
 8007546:	4a21      	ldr	r2, [pc, #132]	; (80075cc <_malloc_r+0xac>)
 8007548:	6814      	ldr	r4, [r2, #0]
 800754a:	4621      	mov	r1, r4
 800754c:	b991      	cbnz	r1, 8007574 <_malloc_r+0x54>
 800754e:	4c20      	ldr	r4, [pc, #128]	; (80075d0 <_malloc_r+0xb0>)
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	b91b      	cbnz	r3, 800755c <_malloc_r+0x3c>
 8007554:	4630      	mov	r0, r6
 8007556:	f000 f83d 	bl	80075d4 <_sbrk_r>
 800755a:	6020      	str	r0, [r4, #0]
 800755c:	4629      	mov	r1, r5
 800755e:	4630      	mov	r0, r6
 8007560:	f000 f838 	bl	80075d4 <_sbrk_r>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d124      	bne.n	80075b2 <_malloc_r+0x92>
 8007568:	230c      	movs	r3, #12
 800756a:	6033      	str	r3, [r6, #0]
 800756c:	4630      	mov	r0, r6
 800756e:	f000 f842 	bl	80075f6 <__malloc_unlock>
 8007572:	e7e4      	b.n	800753e <_malloc_r+0x1e>
 8007574:	680b      	ldr	r3, [r1, #0]
 8007576:	1b5b      	subs	r3, r3, r5
 8007578:	d418      	bmi.n	80075ac <_malloc_r+0x8c>
 800757a:	2b0b      	cmp	r3, #11
 800757c:	d90f      	bls.n	800759e <_malloc_r+0x7e>
 800757e:	600b      	str	r3, [r1, #0]
 8007580:	50cd      	str	r5, [r1, r3]
 8007582:	18cc      	adds	r4, r1, r3
 8007584:	4630      	mov	r0, r6
 8007586:	f000 f836 	bl	80075f6 <__malloc_unlock>
 800758a:	f104 000b 	add.w	r0, r4, #11
 800758e:	1d23      	adds	r3, r4, #4
 8007590:	f020 0007 	bic.w	r0, r0, #7
 8007594:	1ac3      	subs	r3, r0, r3
 8007596:	d0d3      	beq.n	8007540 <_malloc_r+0x20>
 8007598:	425a      	negs	r2, r3
 800759a:	50e2      	str	r2, [r4, r3]
 800759c:	e7d0      	b.n	8007540 <_malloc_r+0x20>
 800759e:	428c      	cmp	r4, r1
 80075a0:	684b      	ldr	r3, [r1, #4]
 80075a2:	bf16      	itet	ne
 80075a4:	6063      	strne	r3, [r4, #4]
 80075a6:	6013      	streq	r3, [r2, #0]
 80075a8:	460c      	movne	r4, r1
 80075aa:	e7eb      	b.n	8007584 <_malloc_r+0x64>
 80075ac:	460c      	mov	r4, r1
 80075ae:	6849      	ldr	r1, [r1, #4]
 80075b0:	e7cc      	b.n	800754c <_malloc_r+0x2c>
 80075b2:	1cc4      	adds	r4, r0, #3
 80075b4:	f024 0403 	bic.w	r4, r4, #3
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	d005      	beq.n	80075c8 <_malloc_r+0xa8>
 80075bc:	1a21      	subs	r1, r4, r0
 80075be:	4630      	mov	r0, r6
 80075c0:	f000 f808 	bl	80075d4 <_sbrk_r>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d0cf      	beq.n	8007568 <_malloc_r+0x48>
 80075c8:	6025      	str	r5, [r4, #0]
 80075ca:	e7db      	b.n	8007584 <_malloc_r+0x64>
 80075cc:	20000210 	.word	0x20000210
 80075d0:	20000214 	.word	0x20000214

080075d4 <_sbrk_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4c06      	ldr	r4, [pc, #24]	; (80075f0 <_sbrk_r+0x1c>)
 80075d8:	2300      	movs	r3, #0
 80075da:	4605      	mov	r5, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	f7f9 f9a0 	bl	8000924 <_sbrk>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_sbrk_r+0x1a>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_sbrk_r+0x1a>
 80075ec:	602b      	str	r3, [r5, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20001b48 	.word	0x20001b48

080075f4 <__malloc_lock>:
 80075f4:	4770      	bx	lr

080075f6 <__malloc_unlock>:
 80075f6:	4770      	bx	lr

080075f8 <_init>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	bf00      	nop
 80075fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fe:	bc08      	pop	{r3}
 8007600:	469e      	mov	lr, r3
 8007602:	4770      	bx	lr

08007604 <_fini>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	bf00      	nop
 8007608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760a:	bc08      	pop	{r3}
 800760c:	469e      	mov	lr, r3
 800760e:	4770      	bx	lr

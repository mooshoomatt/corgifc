
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007184  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007374  08007374  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800737c  0800737c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800737c  0800737c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007380  08007380  00017380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001960  200001ec  08007570  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001b4c  08007570  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b46  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fa9  00000000  00000000  00035d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00038d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  00039b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000219ea  00000000  00000000  0003a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea2f  00000000  00000000  0005c1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb975  00000000  00000000  0006ac29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012659e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  0012661c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072f4 	.word	0x080072f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	080072f4 	.word	0x080072f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af04      	add	r7, sp, #16
 80004ce:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	9302      	str	r3, [sp, #8]
 80004da:	2301      	movs	r3, #1
 80004dc:	9301      	str	r3, [sp, #4]
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2301      	movs	r3, #1
 80004e6:	2200      	movs	r2, #0
 80004e8:	2130      	movs	r1, #48	; 0x30
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 ff60 	bl	80013b0 <HAL_I2C_Mem_Read>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 80004fa:	7a3b      	ldrb	r3, [r7, #8]
 80004fc:	2b1e      	cmp	r3, #30
 80004fe:	d001      	beq.n	8000504 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000500:	2301      	movs	r3, #1
 8000502:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2301      	movs	r3, #1
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	2200      	movs	r2, #0
 8000518:	21d0      	movs	r1, #208	; 0xd0
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 ff48 	bl	80013b0 <HAL_I2C_Mem_Read>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	4313      	orrs	r3, r2
 8000528:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 800052a:	7a3b      	ldrb	r3, [r7, #8]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d001      	beq.n	8000534 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000530:	2301      	movs	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <BMI088_I2C_CORGI_INIT>:

/* CUSTOM SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_CORGI_INIT(I2C_HandleTypeDef *hi2c)
{
 800053e:	b480      	push	{r7}
 8000540:	b085      	sub	sp, #20
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	//uint8_t buf[1]; // Tx Buffer
	ret = HAL_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	73fb      	strb	r3, [r7, #15]

	// SET ACCELEROMETER LPF:

	// SET GYROSCOPE LPF:

	return ret;
 800054a:	7bfb      	ldrb	r3, [r7, #15]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <BMI088_I2C_Read_Gyro>:
	return HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
}

/* READ ALL GYROSCOPE DATA */
HAL_StatusTypeDef BMI088_I2C_Read_Gyro(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af04      	add	r7, sp, #16
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	9302      	str	r3, [sp, #8]
 8000568:	2306      	movs	r3, #6
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2301      	movs	r3, #1
 8000572:	2202      	movs	r2, #2
 8000574:	21d0      	movs	r1, #208	; 0xd0
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 ff1a 	bl	80013b0 <HAL_I2C_Mem_Read>
 800057c:	4603      	mov	r3, r0
}
 800057e:	4618      	mov	r0, r3
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fa63 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f839 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8d1 	bl	800073c <MX_GPIO_Init>
  MX_I2C1_Init();
 800059a:	f000 f8a1 	bl	80006e0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800059e:	f006 f89b 	bl	80066d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <main+0x78>)
 80005a4:	f7ff ff90 	bl	80004c8 <BMI088_I2C_Read_CHIP_IDS>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <main+0x2a>
 80005ae:	f000 f923 	bl	80007f8 <Error_Handler>

  // RUN BMI088 INITIALIZATION
  if ( BMI088_I2C_CORGI_INIT(&hi2c1) != HAL_OK ) { Error_Handler(); };
 80005b2:	4813      	ldr	r0, [pc, #76]	; (8000600 <main+0x78>)
 80005b4:	f7ff ffc3 	bl	800053e <BMI088_I2C_CORGI_INIT>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <main+0x3a>
 80005be:	f000 f91b 	bl	80007f8 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <main+0x7c>)
 80005c6:	f000 fda0 	bl	800110a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ce:	f000 fab5 	bl	8000b3c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <main+0x7c>)
 80005d6:	f000 fd98 	bl	800110a <HAL_GPIO_TogglePin>

	  // if ( BMI088_I2C_Read_Accel(&hi2c1, abuf) != HAL_OK ) { Error_Handler(); }
	  if ( BMI088_I2C_Read_Gyro (&hi2c1, gbuf) != HAL_OK ) { Error_Handler(); }
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <main+0x78>)
 80005e2:	f7ff ffb9 	bl	8000558 <BMI088_I2C_Read_Gyro>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <main+0x68>
 80005ec:	f000 f904 	bl	80007f8 <Error_Handler>

	  test = gbuf[1] << 8 | gbuf[0];
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	7b3b      	ldrb	r3, [r7, #12]
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	84fb      	strh	r3, [r7, #38]	; 0x26
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80005fe:	e7e0      	b.n	80005c2 <main+0x3a>
 8000600:	20000218 	.word	0x20000218
 8000604:	40020800 	.word	0x40020800

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fdaa 	bl	8007170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <SystemClock_Config+0xd0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <SystemClock_Config+0xd0>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a22      	ldr	r2, [pc, #136]	; (80006dc <SystemClock_Config+0xd4>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000664:	2303      	movs	r3, #3
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000684:	23c0      	movs	r3, #192	; 0xc0
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fcb9 	bl	800300c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 f8aa 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 ff14 	bl	80034ec <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ca:	f000 f895 	bl	80007f8 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f000 fd0f 	bl	8001140 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f866 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000218 	.word	0x20000218
 8000734:	40005400 	.word	0x40005400
 8000738:	00061a80 	.word	0x00061a80

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_GPIO_Init+0xb4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xb4>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_GPIO_Init+0xb4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xb4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xb4>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_GPIO_Init+0xb4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_GPIO_Init+0xb4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_GPIO_Init+0xb4>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_GPIO_Init+0xb4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_GPIO_Init+0xb4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <MX_GPIO_Init+0xb4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_GPIO_Init+0xb4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	21c0      	movs	r1, #192	; 0xc0
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <MX_GPIO_Init+0xb8>)
 80007c8:	f000 fc86 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007cc:	23c0      	movs	r3, #192	; 0xc0
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0xb8>)
 80007e4:	f000 fade 	bl	8000da4 <HAL_GPIO_Init>

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020800 	.word	0x40020800

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <Error_Handler+0x24>)
 8000804:	f000 fc68 	bl	80010d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <Error_Handler+0x24>)
 800080e:	f000 fc63 	bl	80010d8 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8000812:	2106      	movs	r1, #6
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <Error_Handler+0x28>)
 8000816:	f006 f831 	bl	800687c <CDC_Transmit_FS>
  while (1)
 800081a:	e7fe      	b.n	800081a <Error_Handler+0x22>
 800081c:	40020800 	.word	0x40020800
 8000820:	0800730c 	.word	0x0800730c

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <HAL_I2C_MspInit+0x84>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12c      	bne.n	80008f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_I2C_MspInit+0x88>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_I2C_MspInit+0x88>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_I2C_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b8:	2312      	movs	r3, #18
 80008ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c4:	2304      	movs	r3, #4
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <HAL_I2C_MspInit+0x8c>)
 80008d0:	f000 fa68 	bl	8000da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_I2C_MspInit+0x88>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_I2C_MspInit+0x88>)
 80008de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_I2C_MspInit+0x88>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40005400 	.word	0x40005400
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f8d4 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <OTG_FS_IRQHandler+0x10>)
 800095e:	f001 fb21 	bl	8001fa4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20001740 	.word	0x20001740

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800099c:	f006 fbae 	bl	80070fc <__errno>
 80009a0:	4602      	mov	r2, r0
 80009a2:	230c      	movs	r3, #12
 80009a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20020000 	.word	0x20020000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	20000208 	.word	0x20000208
 80009d4:	20001b50 	.word	0x20001b50

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <SystemInit+0x28>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <SystemInit+0x28>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <SystemInit+0x28>)
 80009ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f2:	609a      	str	r2, [r3, #8]
#endif
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a0a:	e003      	b.n	8000a14 <LoopCopyDataInit>

08000a0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a12:	3104      	adds	r1, #4

08000a14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a1c:	d3f6      	bcc.n	8000a0c <CopyDataInit>
  ldr  r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a20:	e002      	b.n	8000a28 <LoopFillZerobss>

08000a22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a24:	f842 3b04 	str.w	r3, [r2], #4

08000a28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a2c:	d3f9      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd3 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f006 fb69 	bl	8007108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fda7 	bl	8000588 <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a40:	08007384 	.word	0x08007384
  ldr  r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a48:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000a4c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000a50:	20001b4c 	.word	0x20001b4c

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <HAL_Init+0x40>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_Init+0x40>)
 8000a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x40>)
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f94d 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff feca 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f965 	bl	8000d8a <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f92d 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	2000026c 	.word	0x2000026c

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000026c 	.word	0x2000026c

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_Delay+0x40>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff3e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff31 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa2 	bl	8000cdc <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	e16b      	b.n	8001098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 815a 	bne.w	8001092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d00b      	beq.n	8000dfe <HAL_GPIO_Init+0x5a>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df2:	2b11      	cmp	r3, #17
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b12      	cmp	r3, #18
 8000dfc:	d130      	bne.n	8000e60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f003 0201 	and.w	r2, r3, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0xfc>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b12      	cmp	r3, #18
 8000e9e:	d123      	bne.n	8000ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3208      	adds	r2, #8
 8000ee2:	69b9      	ldr	r1, [r7, #24]
 8000ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0203 	and.w	r2, r3, #3
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80b4 	beq.w	8001092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b5f      	ldr	r3, [pc, #380]	; (80010ac <HAL_GPIO_Init+0x308>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a5e      	ldr	r2, [pc, #376]	; (80010ac <HAL_GPIO_Init+0x308>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <HAL_GPIO_Init+0x308>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f46:	4a5a      	ldr	r2, [pc, #360]	; (80010b0 <HAL_GPIO_Init+0x30c>)
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a51      	ldr	r2, [pc, #324]	; (80010b4 <HAL_GPIO_Init+0x310>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d02b      	beq.n	8000fca <HAL_GPIO_Init+0x226>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a50      	ldr	r2, [pc, #320]	; (80010b8 <HAL_GPIO_Init+0x314>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d025      	beq.n	8000fc6 <HAL_GPIO_Init+0x222>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <HAL_GPIO_Init+0x318>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d01f      	beq.n	8000fc2 <HAL_GPIO_Init+0x21e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <HAL_GPIO_Init+0x31c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x21a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x320>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x216>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x212>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_GPIO_Init+0x328>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x20e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <HAL_GPIO_Init+0x32c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x20a>
 8000faa:	2307      	movs	r3, #7
 8000fac:	e00e      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fae:	2308      	movs	r3, #8
 8000fb0:	e00c      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	e00a      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e008      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x228>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	f002 0203 	and.w	r2, r2, #3
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fdc:	4934      	ldr	r1, [pc, #208]	; (80010b0 <HAL_GPIO_Init+0x30c>)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <HAL_GPIO_Init+0x330>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800100e:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <HAL_GPIO_Init+0x330>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_GPIO_Init+0x330>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <HAL_GPIO_Init+0x330>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <HAL_GPIO_Init+0x330>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <HAL_GPIO_Init+0x330>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_GPIO_Init+0x330>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800108c:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <HAL_GPIO_Init+0x330>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3301      	adds	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	f67f ae90 	bls.w	8000dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a0:	bf00      	nop
 80010a2:	3724      	adds	r7, #36	; 0x24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40021400 	.word	0x40021400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40021c00 	.word	0x40021c00
 80010d4:	40013c00 	.word	0x40013c00

080010d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f4:	e003      	b.n	80010fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	041a      	lsls	r2, r3, #16
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	619a      	str	r2, [r3, #24]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	401a      	ands	r2, r3
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	429a      	cmp	r2, r3
 8001122:	d104      	bne.n	800112e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	041a      	lsls	r2, r3, #16
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800112c:	e002      	b.n	8001134 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e11f      	b.n	8001392 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fb84 	bl	8000874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2224      	movs	r2, #36	; 0x24
 8001170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011a4:	f002 fb6a 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 80011a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4a7b      	ldr	r2, [pc, #492]	; (800139c <HAL_I2C_Init+0x25c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d807      	bhi.n	80011c4 <HAL_I2C_Init+0x84>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4a7a      	ldr	r2, [pc, #488]	; (80013a0 <HAL_I2C_Init+0x260>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	bf94      	ite	ls
 80011bc:	2301      	movls	r3, #1
 80011be:	2300      	movhi	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	e006      	b.n	80011d2 <HAL_I2C_Init+0x92>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4a77      	ldr	r2, [pc, #476]	; (80013a4 <HAL_I2C_Init+0x264>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	bf94      	ite	ls
 80011cc:	2301      	movls	r3, #1
 80011ce:	2300      	movhi	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e0db      	b.n	8001392 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4a72      	ldr	r2, [pc, #456]	; (80013a8 <HAL_I2C_Init+0x268>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a64      	ldr	r2, [pc, #400]	; (800139c <HAL_I2C_Init+0x25c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d802      	bhi.n	8001214 <HAL_I2C_Init+0xd4>
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	3301      	adds	r3, #1
 8001212:	e009      	b.n	8001228 <HAL_I2C_Init+0xe8>
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	4a63      	ldr	r2, [pc, #396]	; (80013ac <HAL_I2C_Init+0x26c>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	099b      	lsrs	r3, r3, #6
 8001226:	3301      	adds	r3, #1
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	430b      	orrs	r3, r1
 800122e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800123a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4956      	ldr	r1, [pc, #344]	; (800139c <HAL_I2C_Init+0x25c>)
 8001244:	428b      	cmp	r3, r1
 8001246:	d80d      	bhi.n	8001264 <HAL_I2C_Init+0x124>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e59      	subs	r1, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fbb1 f3f3 	udiv	r3, r1, r3
 8001256:	3301      	adds	r3, #1
 8001258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125c:	2b04      	cmp	r3, #4
 800125e:	bf38      	it	cc
 8001260:	2304      	movcc	r3, #4
 8001262:	e04f      	b.n	8001304 <HAL_I2C_Init+0x1c4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d111      	bne.n	8001290 <HAL_I2C_Init+0x150>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	440b      	add	r3, r1
 800127a:	fbb0 f3f3 	udiv	r3, r0, r3
 800127e:	3301      	adds	r3, #1
 8001280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e012      	b.n	80012b6 <HAL_I2C_Init+0x176>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	0099      	lsls	r1, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf0c      	ite	eq
 80012b0:	2301      	moveq	r3, #1
 80012b2:	2300      	movne	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Init+0x17e>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e022      	b.n	8001304 <HAL_I2C_Init+0x1c4>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10e      	bne.n	80012e4 <HAL_I2C_Init+0x1a4>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1e58      	subs	r0, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Init+0x1c4>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	0099      	lsls	r1, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	6809      	ldr	r1, [r1, #0]
 8001308:	4313      	orrs	r3, r2
 800130a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69da      	ldr	r2, [r3, #28]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6911      	ldr	r1, [r2, #16]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68d2      	ldr	r2, [r2, #12]
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	430b      	orrs	r3, r1
 8001346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	000186a0 	.word	0x000186a0
 80013a0:	001e847f 	.word	0x001e847f
 80013a4:	003d08ff 	.word	0x003d08ff
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	10624dd3 	.word	0x10624dd3

080013b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	817b      	strh	r3, [r7, #10]
 80013c2:	460b      	mov	r3, r1
 80013c4:	813b      	strh	r3, [r7, #8]
 80013c6:	4613      	mov	r3, r2
 80013c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013ca:	f7ff fbab 	bl	8000b24 <HAL_GetTick>
 80013ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b20      	cmp	r3, #32
 80013da:	f040 8208 	bne.w	80017ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2319      	movs	r3, #25
 80013e4:	2201      	movs	r2, #1
 80013e6:	497b      	ldr	r1, [pc, #492]	; (80015d4 <HAL_I2C_Mem_Read+0x224>)
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 faef 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80013f4:	2302      	movs	r3, #2
 80013f6:	e1fb      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_I2C_Mem_Read+0x56>
 8001402:	2302      	movs	r3, #2
 8001404:	e1f4      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b01      	cmp	r3, #1
 800141a:	d007      	beq.n	800142c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800143a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2222      	movs	r2, #34	; 0x22
 8001440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800145c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001462:	b29a      	uxth	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a5b      	ldr	r2, [pc, #364]	; (80015d8 <HAL_I2C_Mem_Read+0x228>)
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800146e:	88f8      	ldrh	r0, [r7, #6]
 8001470:	893a      	ldrh	r2, [r7, #8]
 8001472:	8979      	ldrh	r1, [r7, #10]
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4603      	mov	r3, r0
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f9bc 	bl	80017fc <I2C_RequestMemoryRead>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1b0      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	2b00      	cmp	r3, #0
 8001494:	d113      	bne.n	80014be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	623b      	str	r3, [r7, #32]
 80014aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e184      	b.n	80017c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d11b      	bne.n	80014fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e164      	b.n	80017c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001502:	2b02      	cmp	r3, #2
 8001504:	d11b      	bne.n	800153e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001514:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	e144      	b.n	80017c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001554:	e138      	b.n	80017c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155a:	2b03      	cmp	r3, #3
 800155c:	f200 80f1 	bhi.w	8001742 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001564:	2b01      	cmp	r3, #1
 8001566:	d123      	bne.n	80015b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fb44 	bl	8001bfa <I2C_WaitOnRXNEFlagUntilTimeout>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e139      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001598:	3b01      	subs	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015ae:	e10b      	b.n	80017c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d14e      	bne.n	8001656 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015be:	2200      	movs	r2, #0
 80015c0:	4906      	ldr	r1, [pc, #24]	; (80015dc <HAL_I2C_Mem_Read+0x22c>)
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fa02 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e10e      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
 80015d2:	bf00      	nop
 80015d4:	00100002 	.word	0x00100002
 80015d8:	ffff0000 	.word	0xffff0000
 80015dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163e:	3b01      	subs	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164a:	b29b      	uxth	r3, r3
 800164c:	3b01      	subs	r3, #1
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001654:	e0b8      	b.n	80017c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165c:	2200      	movs	r2, #0
 800165e:	4966      	ldr	r1, [pc, #408]	; (80017f8 <HAL_I2C_Mem_Read+0x448>)
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f9b3 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0bf      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800167e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169c:	3b01      	subs	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016b8:	2200      	movs	r2, #0
 80016ba:	494f      	ldr	r1, [pc, #316]	; (80017f8 <HAL_I2C_Mem_Read+0x448>)
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 f985 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e091      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172a:	3b01      	subs	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001736:	b29b      	uxth	r3, r3
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001740:	e042      	b.n	80017c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fa57 	bl	8001bfa <I2C_WaitOnRXNEFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e04c      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b04      	cmp	r3, #4
 8001794:	d118      	bne.n	80017c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f47f aec2 	bne.w	8001556 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2220      	movs	r2, #32
 80017d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80017ee:	2302      	movs	r3, #2
  }
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	00010004 	.word	0x00010004

080017fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	4608      	mov	r0, r1
 8001806:	4611      	mov	r1, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4603      	mov	r3, r0
 800180c:	817b      	strh	r3, [r7, #10]
 800180e:	460b      	mov	r3, r1
 8001810:	813b      	strh	r3, [r7, #8]
 8001812:	4613      	mov	r3, r2
 8001814:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001824:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	2200      	movs	r2, #0
 800183e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f8c2 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00d      	beq.n	800186a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800185c:	d103      	bne.n	8001866 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0aa      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800186a:	897b      	ldrh	r3, [r7, #10]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001878:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	6a3a      	ldr	r2, [r7, #32]
 800187e:	4952      	ldr	r1, [pc, #328]	; (80019c8 <I2C_RequestMemoryRead+0x1cc>)
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f8fa 	bl	8001a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e097      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a8:	6a39      	ldr	r1, [r7, #32]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f964 	bl	8001b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00d      	beq.n	80018d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d107      	bne.n	80018ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e076      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018d8:	893b      	ldrh	r3, [r7, #8]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	e021      	b.n	8001928 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018e4:	893b      	ldrh	r3, [r7, #8]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f93e 	bl	8001b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00d      	beq.n	800191e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	2b04      	cmp	r3, #4
 8001908:	d107      	bne.n	800191a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001918:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e050      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800191e:	893b      	ldrh	r3, [r7, #8]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192a:	6a39      	ldr	r1, [r7, #32]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f923 	bl	8001b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00d      	beq.n	8001954 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	2b04      	cmp	r3, #4
 800193e:	d107      	bne.n	8001950 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e035      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001962:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	2200      	movs	r2, #0
 800196c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f82b 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00d      	beq.n	8001998 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800198a:	d103      	bne.n	8001994 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e013      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	6a3a      	ldr	r2, [r7, #32]
 80019ac:	4906      	ldr	r1, [pc, #24]	; (80019c8 <I2C_RequestMemoryRead+0x1cc>)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f863 	bl	8001a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	00010002 	.word	0x00010002

080019cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019dc:	e025      	b.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d021      	beq.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e6:	f7ff f89d 	bl	8000b24 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d116      	bne.n	8001a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f043 0220 	orr.w	r2, r3, #32
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e023      	b.n	8001a72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10d      	bne.n	8001a50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	e00c      	b.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf0c      	ite	eq
 8001a62:	2301      	moveq	r3, #1
 8001a64:	2300      	movne	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d0b6      	beq.n	80019de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a88:	e051      	b.n	8001b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d123      	bne.n	8001ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ab2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f043 0204 	orr.w	r2, r3, #4
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e046      	b.n	8001b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d021      	beq.n	8001b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aea:	f7ff f81b 	bl	8000b24 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d116      	bne.n	8001b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f043 0220 	orr.w	r2, r3, #32
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e020      	b.n	8001b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10c      	bne.n	8001b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4013      	ands	r3, r2
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	e00b      	b.n	8001b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d18d      	bne.n	8001a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b84:	e02d      	b.n	8001be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f88d 	bl	8001ca6 <I2C_IsAcknowledgeFailed>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e02d      	b.n	8001bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d021      	beq.n	8001be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9e:	f7fe ffc1 	bl	8000b24 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d302      	bcc.n	8001bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d116      	bne.n	8001be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f043 0220 	orr.w	r2, r3, #32
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e007      	b.n	8001bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d1ca      	bne.n	8001b86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c06:	e042      	b.n	8001c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d119      	bne.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f06f 0210 	mvn.w	r2, #16
 8001c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e029      	b.n	8001c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4a:	f7fe ff6b 	bl	8000b24 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d302      	bcc.n	8001c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d116      	bne.n	8001c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f043 0220 	orr.w	r2, r3, #32
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e007      	b.n	8001c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d1b5      	bne.n	8001c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbc:	d11b      	bne.n	8001cf6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f043 0204 	orr.w	r2, r3, #4
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b08f      	sub	sp, #60	; 0x3c
 8001d08:	af0a      	add	r7, sp, #40	; 0x28
 8001d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e10f      	b.n	8001f36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f004 fee7 	bl	8006b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 feba 	bl	8003ace <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	687e      	ldr	r6, [r7, #4]
 8001d62:	466d      	mov	r5, sp
 8001d64:	f106 0410 	add.w	r4, r6, #16
 8001d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d78:	1d33      	adds	r3, r6, #4
 8001d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f001 fd91 	bl	80038a4 <USB_CoreInit>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d0      	b.n	8001f36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 fea8 	bl	8003af0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e04a      	b.n	8001e3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	333d      	adds	r3, #61	; 0x3d
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	333c      	adds	r3, #60	; 0x3c
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	b298      	uxth	r0, r3
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	3342      	adds	r3, #66	; 0x42
 8001de2:	4602      	mov	r2, r0
 8001de4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	1a9b      	subs	r3, r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	333f      	adds	r3, #63	; 0x3f
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3344      	adds	r3, #68	; 0x44
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3348      	adds	r3, #72	; 0x48
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3350      	adds	r3, #80	; 0x50
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d3af      	bcc.n	8001da6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e044      	b.n	8001ed6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3b5      	bcc.n	8001e4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	687e      	ldr	r6, [r7, #4]
 8001ee8:	466d      	mov	r5, sp
 8001eea:	f106 0410 	add.w	r4, r6, #16
 8001eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efe:	1d33      	adds	r3, r6, #4
 8001f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f001 fe1e 	bl	8003b44 <USB_DevInit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00d      	b.n	8001f36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 fe66 	bl	8004c00 <USB_DevDisconnect>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_Start+0x1c>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e020      	b.n	8001f9c <HAL_PCD_Start+0x5e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d109      	bne.n	8001f7e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fd92 	bl	8003aac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fe16 	bl	8004bbe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b08d      	sub	sp, #52	; 0x34
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fed4 	bl	8004d68 <USB_GetMode>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 839d 	bne.w	8002702 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fe38 	bl	8004c42 <USB_ReadInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8393 	beq.w	8002700 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fe2f 	bl	8004c42 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f002 0202 	and.w	r2, r2, #2
 8001ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fe1d 	bl	8004c42 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b10      	cmp	r3, #16
 8002010:	d161      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0210 	bic.w	r2, r2, #16
 8002020:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	0c5b      	lsrs	r3, r3, #17
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	2b02      	cmp	r3, #2
 800204c:	d124      	bne.n	8002098 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d035      	beq.n	80020c6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6a38      	ldr	r0, [r7, #32]
 800206e:	f002 fc83 	bl	8004978 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800207e:	441a      	add	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	441a      	add	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	e016      	b.n	80020c6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	0c5b      	lsrs	r3, r3, #17
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d110      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020aa:	2208      	movs	r2, #8
 80020ac:	4619      	mov	r1, r3
 80020ae:	6a38      	ldr	r0, [r7, #32]
 80020b0:	f002 fc62 	bl	8004978 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c0:	441a      	add	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0210 	orr.w	r2, r2, #16
 80020d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f002 fdb1 	bl	8004c42 <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ea:	d16e      	bne.n	80021ca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 fdb7 	bl	8004c68 <USB_ReadDevAllOutEpInterrupt>
 80020fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020fc:	e062      	b.n	80021c4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d057      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f002 fddc 	bl	8004cd0 <USB_ReadDevOutEPInterrupt>
 8002118:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00c      	beq.n	800213e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002130:	461a      	mov	r2, r3
 8002132:	2301      	movs	r3, #1
 8002134:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fdb1 	bl	8002ca0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002154:	461a      	mov	r2, r3
 8002156:	2308      	movs	r3, #8
 8002158:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800215a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 feab 	bl	8002eb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002178:	461a      	mov	r2, r3
 800217a:	2310      	movs	r3, #16
 800217c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	2320      	movs	r3, #32
 8002198:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	3301      	adds	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d199      	bne.n	80020fe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f002 fd37 	bl	8004c42 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021de:	f040 80c0 	bne.w	8002362 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fd58 	bl	8004c9c <USB_ReadDevAllInEpInterrupt>
 80021ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021f2:	e0b2      	b.n	800235a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80a7 	beq.w	800234e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fd7e 	bl	8004d0c <USB_ReadDevInEPInterrupt>
 8002210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d057      	beq.n	80022cc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	2201      	movs	r2, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	69f9      	ldr	r1, [r7, #28]
 8002238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800223c:	4013      	ands	r3, r2
 800223e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224c:	461a      	mov	r2, r3
 800224e:	2301      	movs	r3, #1
 8002250:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d132      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3348      	adds	r3, #72	; 0x48
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4403      	add	r3, r0
 800227a:	3344      	adds	r3, #68	; 0x44
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4419      	add	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4403      	add	r3, r0
 800228e:	3348      	adds	r3, #72	; 0x48
 8002290:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	2b00      	cmp	r3, #0
 8002296:	d113      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x31c>
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3350      	adds	r3, #80	; 0x50
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022b8:	461a      	mov	r2, r3
 80022ba:	2101      	movs	r1, #1
 80022bc:	f002 fd86 	bl	8004dcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f004 fc9d 	bl	8006c06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e2:	461a      	mov	r2, r3
 80022e4:	2308      	movs	r3, #8
 80022e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022fe:	461a      	mov	r2, r3
 8002300:	2310      	movs	r3, #16
 8002302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231a:	461a      	mov	r2, r3
 800231c:	2340      	movs	r3, #64	; 0x40
 800231e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002336:	461a      	mov	r2, r3
 8002338:	2302      	movs	r3, #2
 800233a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fc1b 	bl	8002b84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f af49 	bne.w	80021f4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f002 fc6b 	bl	8004c42 <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002376:	d122      	bne.n	80023be <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800239e:	2100      	movs	r1, #0
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fe27 	bl	8002ff4 <HAL_PCDEx_LPM_Callback>
 80023a6:	e002      	b.n	80023ae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f004 fca3 	bl	8006cf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 fc3d 	bl	8004c42 <USB_ReadInterrupts>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d2:	d112      	bne.n	80023fa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d102      	bne.n	80023ea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f004 fc5f 	bl	8006ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fc1f 	bl	8004c42 <USB_ReadInterrupts>
 8002404:	4603      	mov	r3, r0
 8002406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240e:	f040 80c7 	bne.w	80025a0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2110      	movs	r1, #16
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fced 	bl	8003e0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	2300      	movs	r3, #0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002436:	e056      	b.n	80024e6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002444:	461a      	mov	r2, r3
 8002446:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800244a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245c:	0151      	lsls	r1, r2, #5
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	440a      	add	r2, r1
 8002462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800246a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247c:	0151      	lsls	r1, r2, #5
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	440a      	add	r2, r1
 8002482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800248a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800249e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b0:	0151      	lsls	r1, r2, #5
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	440a      	add	r2, r1
 80024b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d0:	0151      	lsls	r1, r2, #5
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	440a      	add	r2, r1
 80024d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	3301      	adds	r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d3a3      	bcc.n	8002438 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002502:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b00      	cmp	r3, #0
 800250a:	d016      	beq.n	800253a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251c:	f043 030b 	orr.w	r3, r3, #11
 8002520:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002532:	f043 030b 	orr.w	r3, r3, #11
 8002536:	6453      	str	r3, [r2, #68]	; 0x44
 8002538:	e015      	b.n	8002566 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800254c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002550:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002560:	f043 030b 	orr.w	r3, r3, #11
 8002564:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002574:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002578:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800258a:	461a      	mov	r2, r3
 800258c:	f002 fc1e 	bl	8004dcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800259e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fb4c 	bl	8004c42 <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b4:	d124      	bne.n	8002600 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fbe2 	bl	8004d84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 fc82 	bl	8003ece <USB_GetDevSpeed>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	f001 f945 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 80025da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	4620      	mov	r0, r4
 80025e6:	f001 f9bf 	bl	8003968 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f004 fb33 	bl	8006c56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fb1c 	bl	8004c42 <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d10a      	bne.n	800262a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f004 fb10 	bl	8006c3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 0208 	and.w	r2, r2, #8
 8002628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f002 fb07 	bl	8004c42 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800263e:	d10f      	bne.n	8002660 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f004 fb72 	bl	8006d34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800265e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f002 faec 	bl	8004c42 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002674:	d10f      	bne.n	8002696 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f004 fb45 	bl	8006d10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fad1 	bl	8004c42 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d10a      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f004 fb53 	bl	8006d58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 fabb 	bl	8004c42 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d115      	bne.n	8002702 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f004 fb43 	bl	8006d74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	e000      	b.n	8002702 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002700:	bf00      	nop
    }
  }
}
 8002702:	3734      	adds	r7, #52	; 0x34
 8002704:	46bd      	mov	sp, r7
 8002706:	bd90      	pop	{r4, r7, pc}

08002708 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_PCD_SetAddress+0x1a>
 800271e:	2302      	movs	r3, #2
 8002720:	e013      	b.n	800274a <HAL_PCD_SetAddress+0x42>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fa19 	bl	8004b72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	4608      	mov	r0, r1
 800275c:	4611      	mov	r1, r2
 800275e:	461a      	mov	r2, r3
 8002760:	4603      	mov	r3, r0
 8002762:	70fb      	strb	r3, [r7, #3]
 8002764:	460b      	mov	r3, r1
 8002766:	803b      	strh	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0f      	bge.n	8002798 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3338      	adds	r3, #56	; 0x38
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	705a      	strb	r2, [r3, #1]
 8002796:	e00f      	b.n	80027b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027c4:	883a      	ldrh	r2, [r7, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	78ba      	ldrb	r2, [r7, #2]
 80027ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027e2:	78bb      	ldrb	r3, [r7, #2]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d102      	bne.n	80027ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_PCD_EP_Open+0xaa>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e00e      	b.n	800281a <HAL_PCD_EP_Open+0xc8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68f9      	ldr	r1, [r7, #12]
 800280a:	4618      	mov	r0, r3
 800280c:	f001 fb84 	bl	8003f18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002818:	7afb      	ldrb	r3, [r7, #11]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800282e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002832:	2b00      	cmp	r3, #0
 8002834:	da0f      	bge.n	8002856 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	f003 020f 	and.w	r2, r3, #15
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	3338      	adds	r3, #56	; 0x38
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	3304      	adds	r3, #4
 800284c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	705a      	strb	r2, [r3, #1]
 8002854:	e00f      	b.n	8002876 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_PCD_EP_Close+0x6e>
 800288c:	2302      	movs	r3, #2
 800288e:	e00e      	b.n	80028ae <HAL_PCD_EP_Close+0x8c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68f9      	ldr	r1, [r7, #12]
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fbc2 	bl	8004028 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	460b      	mov	r3, r1
 80028c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c6:	7afb      	ldrb	r3, [r7, #11]
 80028c8:	f003 020f 	and.w	r2, r3, #15
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	3304      	adds	r3, #4
 80028de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f8:	7afb      	ldrb	r3, [r7, #11]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	6979      	ldr	r1, [r7, #20]
 800292a:	f001 fe9d 	bl	8004668 <USB_EP0StartXfer>
 800292e:	e008      	b.n	8002942 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6979      	ldr	r1, [r7, #20]
 800293e:	f001 fc4f 	bl	80041e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	460b      	mov	r3, r1
 800298a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298c:	7afb      	ldrb	r3, [r7, #11]
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	3338      	adds	r3, #56	; 0x38
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2201      	movs	r2, #1
 80029ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029bc:	7afb      	ldrb	r3, [r7, #11]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d102      	bne.n	80029d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d6:	7afb      	ldrb	r3, [r7, #11]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	6979      	ldr	r1, [r7, #20]
 80029ee:	f001 fe3b 	bl	8004668 <USB_EP0StartXfer>
 80029f2:	e008      	b.n	8002a06 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	f001 fbed 	bl	80041e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d901      	bls.n	8002a2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e050      	b.n	8002ad0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	da0f      	bge.n	8002a56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 020f 	and.w	r2, r3, #15
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	3338      	adds	r3, #56	; 0x38
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	705a      	strb	r2, [r3, #1]
 8002a54:	e00d      	b.n	8002a72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	3304      	adds	r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_EP_SetStall+0x82>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e01e      	b.n	8002ad0 <HAL_PCD_EP_SetStall+0xc0>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 ff92 	bl	80049ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	b2d9      	uxtb	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f002 f983 	bl	8004dcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d901      	bls.n	8002af6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e042      	b.n	8002b7c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da0f      	bge.n	8002b1e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	3338      	adds	r3, #56	; 0x38
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	705a      	strb	r2, [r3, #1]
 8002b1c:	e00f      	b.n	8002b3e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 020f 	and.w	r2, r3, #15
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	3304      	adds	r3, #4
 8002b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_PCD_EP_ClrStall+0x86>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e00e      	b.n	8002b7c <HAL_PCD_EP_ClrStall+0xa4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 ff9a 	bl	8004aa6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3338      	adds	r3, #56	; 0x38
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d901      	bls.n	8002bbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e06c      	b.n	8002c96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d902      	bls.n	8002bd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3303      	adds	r3, #3
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be0:	e02b      	b.n	8002c3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d902      	bls.n	8002bfe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3303      	adds	r3, #3
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6978      	ldr	r0, [r7, #20]
 8002c1e:	f001 fe76 	bl	800490e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	441a      	add	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	441a      	add	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d809      	bhi.n	8002c64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d203      	bcs.n	8002c64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1be      	bne.n	8002be2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d811      	bhi.n	8002c94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	2201      	movs	r2, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	6939      	ldr	r1, [r7, #16]
 8002c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c90:	4013      	ands	r3, r2
 8002c92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	333c      	adds	r3, #60	; 0x3c
 8002cb8:	3304      	adds	r3, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	f040 80a0 	bne.w	8002e18 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f240 80dd 	bls.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80d7 	beq.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d04:	461a      	mov	r2, r3
 8002d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0a:	6093      	str	r3, [r2, #8]
 8002d0c:	e0cb      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d24:	461a      	mov	r2, r3
 8002d26:	2320      	movs	r3, #32
 8002d28:	6093      	str	r3, [r2, #8]
 8002d2a:	e0bc      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 80b7 	bne.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a5d      	ldr	r2, [pc, #372]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d90f      	bls.n	8002d60 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	461a      	mov	r2, r3
 8002d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5c:	6093      	str	r3, [r2, #8]
 8002d5e:	e0a2      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d72:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d86:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4403      	add	r3, r0
 8002d96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d9a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4403      	add	r3, r0
 8002dbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4419      	add	r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4403      	add	r3, r0
 8002dd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dd8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d114      	bne.n	8002e0a <PCD_EP_OutXfrComplete_int+0x16a>
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d108      	bne.n	8002e0a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e02:	461a      	mov	r2, r3
 8002e04:	2101      	movs	r1, #1
 8002e06:	f001 ffe1 	bl	8004dcc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f003 fedd 	bl	8006bd0 <HAL_PCD_DataOutStageCallback>
 8002e16:	e046      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <PCD_EP_OutXfrComplete_int+0x214>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d124      	bne.n	8002e6a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e032      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	2320      	movs	r3, #32
 8002e5a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f003 feb4 	bl	8006bd0 <HAL_PCD_DataOutStageCallback>
 8002e68:	e01d      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d114      	bne.n	8002e9a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d108      	bne.n	8002e9a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e92:	461a      	mov	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	f001 ff99 	bl	8004dcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f003 fe95 	bl	8006bd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	4f54300a 	.word	0x4f54300a
 8002eb4:	4f54310a 	.word	0x4f54310a

08002eb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	333c      	adds	r3, #60	; 0x3c
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d90e      	bls.n	8002f0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f003 fe4d 	bl	8006bac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d90c      	bls.n	8002f34 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2101      	movs	r1, #1
 8002f30:	f001 ff4c 	bl	8004dcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	4f54300a 	.word	0x4f54300a

08002f44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
 8002f50:	4613      	mov	r3, r2
 8002f52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f62:	883b      	ldrh	r3, [r7, #0]
 8002f64:	0419      	lsls	r1, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f70:	e028      	b.n	8002fc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e00d      	b.n	8002fa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3ec      	bcc.n	8002f86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fac:	883b      	ldrh	r3, [r7, #0]
 8002fae:	0418      	lsls	r0, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4302      	orrs	r2, r0
 8002fbc:	3340      	adds	r3, #64	; 0x40
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e25b      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4ba3      	ldr	r3, [pc, #652]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4ba0      	ldr	r3, [pc, #640]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b9d      	ldr	r3, [pc, #628]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b99      	ldr	r3, [pc, #612]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e236      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b91      	ldr	r3, [pc, #580]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a90      	ldr	r2, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a8a      	ldr	r2, [pc, #552]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a87      	ldr	r2, [pc, #540]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b84      	ldr	r3, [pc, #528]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a83      	ldr	r2, [pc, #524]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a80      	ldr	r2, [pc, #512]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fd fd2e 	bl	8000b24 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd fd2a 	bl	8000b24 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1fb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fd fd1a 	bl	8000b24 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd fd16 	bl	8000b24 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1e7      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1bb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b56      	ldr	r3, [pc, #344]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4952      	ldr	r1, [pc, #328]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <HAL_RCC_OscConfig+0x2b0>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd fccf 	bl	8000b24 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fd fccb 	bl	8000b24 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e19c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4940      	ldr	r1, [pc, #256]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x2b0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd fcae 	bl	8000b24 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fd fcaa 	bl	8000b24 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e17b      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d030      	beq.n	8003258 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x2b4>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd fc8e 	bl	8000b24 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fd fc8a 	bl	8000b24 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e15b      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e015      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCC_OscConfig+0x2b4>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fd fc77 	bl	8000b24 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7fd fc73 	bl	8000b24 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e144      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a0 	beq.w	80033a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fd fc39 	bl	8000b24 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	e011      	b.n	80032da <HAL_RCC_OscConfig+0x2ce>
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	42470000 	.word	0x42470000
 80032c0:	42470e80 	.word	0x42470e80
 80032c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd fc2c 	bl	8000b24 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0fd      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b81      	ldr	r3, [pc, #516]	; (80034e0 <HAL_RCC_OscConfig+0x4d4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d106      	bne.n	80032fc <HAL_RCC_OscConfig+0x2f0>
 80032ee:	4b7d      	ldr	r3, [pc, #500]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a7c      	ldr	r2, [pc, #496]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	e01c      	b.n	8003336 <HAL_RCC_OscConfig+0x32a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0x312>
 8003304:	4b77      	ldr	r3, [pc, #476]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a76      	ldr	r2, [pc, #472]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	4b74      	ldr	r3, [pc, #464]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a73      	ldr	r2, [pc, #460]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x32a>
 800331e:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a70      	ldr	r2, [pc, #448]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b6e      	ldr	r3, [pc, #440]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a6d      	ldr	r2, [pc, #436]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fd fbf1 	bl	8000b24 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd fbed 	bl	8000b24 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0bc      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	4b61      	ldr	r3, [pc, #388]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ee      	beq.n	8003346 <HAL_RCC_OscConfig+0x33a>
 8003368:	e014      	b.n	8003394 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fd fbdb 	bl	8000b24 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd fbd7 	bl	8000b24 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0a6      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a51      	ldr	r2, [pc, #324]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8092 	beq.w	80034d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b0:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d05c      	beq.n	8003476 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d141      	bne.n	8003448 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_RCC_OscConfig+0x4dc>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fd fbab 	bl	8000b24 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fd fba7 	bl	8000b24 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e078      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e4:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	061b      	lsls	r3, r3, #24
 8003414:	4933      	ldr	r1, [pc, #204]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341a:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <HAL_RCC_OscConfig+0x4dc>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fb80 	bl	8000b24 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7fd fb7c 	bl	8000b24 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04d      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x41c>
 8003446:	e045      	b.n	80034d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x4dc>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fb69 	bl	8000b24 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003456:	f7fd fb65 	bl	8000b24 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e036      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x44a>
 8003474:	e02e      	b.n	80034d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e029      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003482:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_RCC_OscConfig+0x4d8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	429a      	cmp	r2, r3
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d115      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000
 80034e4:	40023800 	.word	0x40023800
 80034e8:	42470060 	.word	0x42470060

080034ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0cc      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b68      	ldr	r3, [pc, #416]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d90c      	bls.n	8003528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b8      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003540:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800354a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	494d      	ldr	r1, [pc, #308]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d044      	beq.n	800360c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d119      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e06f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e067      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4934      	ldr	r1, [pc, #208]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fd faa2 	bl	8000b24 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fd fa9e 	bl	8000b24 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e04f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d20c      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e032      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4916      	ldr	r1, [pc, #88]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	490e      	ldr	r1, [pc, #56]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003672:	f000 f821 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003676:	4601      	mov	r1, r0
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	fa21 f303 	lsr.w	r3, r1, r3
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd fa02 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023c00 	.word	0x40023c00
 80036a8:	40023800 	.word	0x40023800
 80036ac:	0800735c 	.word	0x0800735c
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	2300      	movs	r3, #0
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d007      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x32>
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d008      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x38>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f040 80b4 	bne.w	800384c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036e6:	60bb      	str	r3, [r7, #8]
       break;
 80036e8:	e0b3      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ec:	60bb      	str	r3, [r7, #8]
      break;
 80036ee:	e0b0      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b5a      	ldr	r3, [pc, #360]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fa:	4b58      	ldr	r3, [pc, #352]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04a      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b55      	ldr	r3, [pc, #340]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	f04f 0400 	mov.w	r4, #0
 8003710:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	ea03 0501 	and.w	r5, r3, r1
 800371c:	ea04 0602 	and.w	r6, r4, r2
 8003720:	4629      	mov	r1, r5
 8003722:	4632      	mov	r2, r6
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	f04f 0400 	mov.w	r4, #0
 800372c:	0154      	lsls	r4, r2, #5
 800372e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003732:	014b      	lsls	r3, r1, #5
 8003734:	4619      	mov	r1, r3
 8003736:	4622      	mov	r2, r4
 8003738:	1b49      	subs	r1, r1, r5
 800373a:	eb62 0206 	sbc.w	r2, r2, r6
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	f04f 0400 	mov.w	r4, #0
 8003746:	0194      	lsls	r4, r2, #6
 8003748:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800374c:	018b      	lsls	r3, r1, #6
 800374e:	1a5b      	subs	r3, r3, r1
 8003750:	eb64 0402 	sbc.w	r4, r4, r2
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	00e2      	lsls	r2, r4, #3
 800375e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003762:	00d9      	lsls	r1, r3, #3
 8003764:	460b      	mov	r3, r1
 8003766:	4614      	mov	r4, r2
 8003768:	195b      	adds	r3, r3, r5
 800376a:	eb44 0406 	adc.w	r4, r4, r6
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	02a2      	lsls	r2, r4, #10
 8003778:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800377c:	0299      	lsls	r1, r3, #10
 800377e:	460b      	mov	r3, r1
 8003780:	4614      	mov	r4, r2
 8003782:	4618      	mov	r0, r3
 8003784:	4621      	mov	r1, r4
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f04f 0400 	mov.w	r4, #0
 800378c:	461a      	mov	r2, r3
 800378e:	4623      	mov	r3, r4
 8003790:	f7fc fd1a 	bl	80001c8 <__aeabi_uldivmod>
 8003794:	4603      	mov	r3, r0
 8003796:	460c      	mov	r4, r1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e049      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379c:	4b2f      	ldr	r3, [pc, #188]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	f04f 0400 	mov.w	r4, #0
 80037a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	ea03 0501 	and.w	r5, r3, r1
 80037b2:	ea04 0602 	and.w	r6, r4, r2
 80037b6:	4629      	mov	r1, r5
 80037b8:	4632      	mov	r2, r6
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	f04f 0400 	mov.w	r4, #0
 80037c2:	0154      	lsls	r4, r2, #5
 80037c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037c8:	014b      	lsls	r3, r1, #5
 80037ca:	4619      	mov	r1, r3
 80037cc:	4622      	mov	r2, r4
 80037ce:	1b49      	subs	r1, r1, r5
 80037d0:	eb62 0206 	sbc.w	r2, r2, r6
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	f04f 0400 	mov.w	r4, #0
 80037dc:	0194      	lsls	r4, r2, #6
 80037de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037e2:	018b      	lsls	r3, r1, #6
 80037e4:	1a5b      	subs	r3, r3, r1
 80037e6:	eb64 0402 	sbc.w	r4, r4, r2
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037f8:	00d9      	lsls	r1, r3, #3
 80037fa:	460b      	mov	r3, r1
 80037fc:	4614      	mov	r4, r2
 80037fe:	195b      	adds	r3, r3, r5
 8003800:	eb44 0406 	adc.w	r4, r4, r6
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	02a2      	lsls	r2, r4, #10
 800380e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003812:	0299      	lsls	r1, r3, #10
 8003814:	460b      	mov	r3, r1
 8003816:	4614      	mov	r4, r2
 8003818:	4618      	mov	r0, r3
 800381a:	4621      	mov	r1, r4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f04f 0400 	mov.w	r4, #0
 8003822:	461a      	mov	r2, r3
 8003824:	4623      	mov	r3, r4
 8003826:	f7fc fccf 	bl	80001c8 <__aeabi_uldivmod>
 800382a:	4603      	mov	r3, r0
 800382c:	460c      	mov	r4, r1
 800382e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	3301      	adds	r3, #1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	60bb      	str	r3, [r7, #8]
      break;
 800384a:	e002      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800384e:	60bb      	str	r3, [r7, #8]
      break;
 8003850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003852:	68bb      	ldr	r3, [r7, #8]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	00f42400 	.word	0x00f42400

08003864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_RCC_GetHCLKFreq+0x14>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000000 	.word	0x20000000

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003880:	f7ff fff0 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 8003884:	4601      	mov	r1, r0
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	0800736c 	.word	0x0800736c

080038a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038a4:	b084      	sub	sp, #16
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	f107 001c 	add.w	r0, r7, #28
 80038b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d122      	bne.n	8003902 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f001 fac6 	bl	8004e88 <USB_CoreReset>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e01a      	b.n	8003938 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f001 faba 	bl	8004e88 <USB_CoreReset>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
 800392a:	e005      	b.n	8003938 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10b      	bne.n	8003956 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f043 0206 	orr.w	r2, r3, #6
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003962:	b004      	add	sp, #16
 8003964:	4770      	bx	lr
	...

08003968 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d165      	bne.n	8003a48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4a41      	ldr	r2, [pc, #260]	; (8003a84 <USB_SetTurnaroundTime+0x11c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d906      	bls.n	8003992 <USB_SetTurnaroundTime+0x2a>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <USB_SetTurnaroundTime+0x120>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d802      	bhi.n	8003992 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800398c:	230f      	movs	r3, #15
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e062      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4a3c      	ldr	r2, [pc, #240]	; (8003a88 <USB_SetTurnaroundTime+0x120>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d906      	bls.n	80039a8 <USB_SetTurnaroundTime+0x40>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4a3b      	ldr	r2, [pc, #236]	; (8003a8c <USB_SetTurnaroundTime+0x124>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d802      	bhi.n	80039a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80039a2:	230e      	movs	r3, #14
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e057      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <USB_SetTurnaroundTime+0x124>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d906      	bls.n	80039be <USB_SetTurnaroundTime+0x56>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4a37      	ldr	r2, [pc, #220]	; (8003a90 <USB_SetTurnaroundTime+0x128>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d802      	bhi.n	80039be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80039b8:	230d      	movs	r3, #13
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e04c      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4a33      	ldr	r2, [pc, #204]	; (8003a90 <USB_SetTurnaroundTime+0x128>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d906      	bls.n	80039d4 <USB_SetTurnaroundTime+0x6c>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4a32      	ldr	r2, [pc, #200]	; (8003a94 <USB_SetTurnaroundTime+0x12c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80039ce:	230c      	movs	r3, #12
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e041      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <USB_SetTurnaroundTime+0x12c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d906      	bls.n	80039ea <USB_SetTurnaroundTime+0x82>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4a2e      	ldr	r2, [pc, #184]	; (8003a98 <USB_SetTurnaroundTime+0x130>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d802      	bhi.n	80039ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039e4:	230b      	movs	r3, #11
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e036      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <USB_SetTurnaroundTime+0x130>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d906      	bls.n	8003a00 <USB_SetTurnaroundTime+0x98>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4a29      	ldr	r2, [pc, #164]	; (8003a9c <USB_SetTurnaroundTime+0x134>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d802      	bhi.n	8003a00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039fa:	230a      	movs	r3, #10
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e02b      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <USB_SetTurnaroundTime+0x134>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d906      	bls.n	8003a16 <USB_SetTurnaroundTime+0xae>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4a25      	ldr	r2, [pc, #148]	; (8003aa0 <USB_SetTurnaroundTime+0x138>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d802      	bhi.n	8003a16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a10:	2309      	movs	r3, #9
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e020      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <USB_SetTurnaroundTime+0x138>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d906      	bls.n	8003a2c <USB_SetTurnaroundTime+0xc4>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <USB_SetTurnaroundTime+0x13c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d802      	bhi.n	8003a2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a26:	2308      	movs	r3, #8
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e015      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <USB_SetTurnaroundTime+0x13c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d906      	bls.n	8003a42 <USB_SetTurnaroundTime+0xda>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <USB_SetTurnaroundTime+0x140>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d802      	bhi.n	8003a42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a3c:	2307      	movs	r3, #7
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e00a      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a42:	2306      	movs	r3, #6
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e007      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a4e:	2309      	movs	r3, #9
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e001      	b.n	8003a58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a54:	2309      	movs	r3, #9
 8003a56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	029b      	lsls	r3, r3, #10
 8003a6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	00d8acbf 	.word	0x00d8acbf
 8003a88:	00e4e1bf 	.word	0x00e4e1bf
 8003a8c:	00f423ff 	.word	0x00f423ff
 8003a90:	0106737f 	.word	0x0106737f
 8003a94:	011a499f 	.word	0x011a499f
 8003a98:	01312cff 	.word	0x01312cff
 8003a9c:	014ca43f 	.word	0x014ca43f
 8003aa0:	016e35ff 	.word	0x016e35ff
 8003aa4:	01a6ab1f 	.word	0x01a6ab1f
 8003aa8:	01e847ff 	.word	0x01e847ff

08003aac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d106      	bne.n	8003b1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	e00b      	b.n	8003b34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	e001      	b.n	8003b34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e003      	b.n	8003b3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003b34:	2032      	movs	r0, #50	; 0x32
 8003b36:	f7fd f801 	bl	8000b3c <HAL_Delay>

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b44:	b084      	sub	sp, #16
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e009      	b.n	8003b78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3340      	adds	r3, #64	; 0x40
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	2200      	movs	r2, #0
 8003b70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3301      	adds	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b0e      	cmp	r3, #14
 8003b7c:	d9f2      	bls.n	8003b64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11c      	bne.n	8003bbe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
 8003bbc:	e00b      	b.n	8003bd6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2300      	movs	r3, #0
 8003be0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	4619      	mov	r1, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	680b      	ldr	r3, [r1, #0]
 8003bf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10c      	bne.n	8003c16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c02:	2100      	movs	r1, #0
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f949 	bl	8003e9c <USB_SetDevSpeed>
 8003c0a:	e008      	b.n	8003c1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f944 	bl	8003e9c <USB_SetDevSpeed>
 8003c14:	e003      	b.n	8003c1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c16:	2103      	movs	r1, #3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f93f 	bl	8003e9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c1e:	2110      	movs	r1, #16
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8f3 	bl	8003e0c <USB_FlushTxFifo>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f911 	bl	8003e58 <USB_FlushRxFifo>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c46:	461a      	mov	r2, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	461a      	mov	r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2300      	movs	r3, #0
 8003c62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	e043      	b.n	8003cf2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c80:	d118      	bne.n	8003cb4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c94:	461a      	mov	r2, r3
 8003c96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	e013      	b.n	8003cc6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003caa:	461a      	mov	r2, r3
 8003cac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e008      	b.n	8003cc6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3b7      	bcc.n	8003c6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e043      	b.n	8003d88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d16:	d118      	bne.n	8003d4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e013      	b.n	8003d5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	461a      	mov	r2, r3
 8003d42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	e008      	b.n	8003d5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	461a      	mov	r2, r3
 8003d58:	2300      	movs	r3, #0
 8003d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3301      	adds	r3, #1
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d3b7      	bcc.n	8003d00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003db0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f043 0210 	orr.w	r2, r3, #16
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699a      	ldr	r2, [r3, #24]
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <USB_DevInit+0x2c4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f043 0208 	orr.w	r2, r3, #8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e04:	b004      	add	sp, #16
 8003e06:	4770      	bx	lr
 8003e08:	803c3800 	.word	0x803c3800

08003e0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	019b      	lsls	r3, r3, #6
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <USB_FlushTxFifo+0x48>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d0f0      	beq.n	8003e26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	00030d40 	.word	0x00030d40

08003e58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2210      	movs	r2, #16
 8003e68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <USB_FlushRxFifo+0x40>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e006      	b.n	8003e8a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d0f0      	beq.n	8003e6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	00030d40 	.word	0x00030d40

08003e9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0306 	and.w	r3, r3, #6
 8003ee6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]
 8003ef2:	e00a      	b.n	8003f0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d002      	beq.n	8003f00 <USB_GetDevSpeed+0x32>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d102      	bne.n	8003f06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f00:	2302      	movs	r3, #2
 8003f02:	75fb      	strb	r3, [r7, #23]
 8003f04:	e001      	b.n	8003f0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f06:	230f      	movs	r3, #15
 8003f08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d13a      	bne.n	8003faa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	68f9      	ldr	r1, [r7, #12]
 8003f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d155      	bne.n	8004018 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	78db      	ldrb	r3, [r3, #3]
 8003f86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	059b      	lsls	r3, r3, #22
 8003f8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f90:	4313      	orrs	r3, r2
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	0151      	lsls	r1, r2, #5
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	440a      	add	r2, r1
 8003f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e036      	b.n	8004018 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	2101      	movs	r1, #1
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11a      	bne.n	8004018 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	78db      	ldrb	r3, [r3, #3]
 8003ffc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ffe:	430b      	orrs	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004016:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	785b      	ldrb	r3, [r3, #1]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d161      	bne.n	8004108 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800405a:	d11f      	bne.n	800409c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	440a      	add	r2, r1
 8004072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800407a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800409a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040bc:	4013      	ands	r3, r2
 80040be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040e0:	4013      	ands	r3, r2
 80040e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0159      	lsls	r1, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	440b      	add	r3, r1
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	4619      	mov	r1, r3
 8004100:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <USB_DeactivateEndpoint+0x1b0>)
 8004102:	4013      	ands	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
 8004106:	e060      	b.n	80041ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800411a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800411e:	d11f      	bne.n	8004160 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	440a      	add	r2, r1
 8004136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800413e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	440a      	add	r2, r1
 8004156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800415a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800415e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	2101      	movs	r1, #1
 8004172:	fa01 f303 	lsl.w	r3, r1, r3
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	43db      	mvns	r3, r3
 800417a:	68f9      	ldr	r1, [r7, #12]
 800417c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004180:	4013      	ands	r3, r2
 8004182:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	2101      	movs	r1, #1
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	43db      	mvns	r3, r3
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a4:	4013      	ands	r3, r2
 80041a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	0159      	lsls	r1, r3, #5
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	440b      	add	r3, r1
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	4619      	mov	r1, r3
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <USB_DeactivateEndpoint+0x1b4>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	ec337800 	.word	0xec337800
 80041dc:	eff37800 	.word	0xeff37800

080041e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f040 815c 	bne.w	80044ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d132      	bne.n	8004270 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004224:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004228:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800422c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	440a      	add	r2, r1
 8004244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800424c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	440a      	add	r2, r1
 8004264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004268:	0cdb      	lsrs	r3, r3, #19
 800426a:	04db      	lsls	r3, r3, #19
 800426c:	6113      	str	r3, [r2, #16]
 800426e:	e074      	b.n	800435a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	0151      	lsls	r1, r2, #5
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	440a      	add	r2, r1
 8004286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428a:	0cdb      	lsrs	r3, r3, #19
 800428c:	04db      	lsls	r3, r3, #19
 800428e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6959      	ldr	r1, [r3, #20]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	440b      	add	r3, r1
 80042cc:	1e59      	subs	r1, r3, #1
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042d6:	04d9      	lsls	r1, r3, #19
 80042d8:	4b9d      	ldr	r3, [pc, #628]	; (8004550 <USB_EPStartXfer+0x370>)
 80042da:	400b      	ands	r3, r1
 80042dc:	69b9      	ldr	r1, [r7, #24]
 80042de:	0148      	lsls	r0, r1, #5
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	4401      	add	r1, r0
 80042e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042e8:	4313      	orrs	r3, r2
 80042ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004302:	69b9      	ldr	r1, [r7, #24]
 8004304:	0148      	lsls	r0, r1, #5
 8004306:	69f9      	ldr	r1, [r7, #28]
 8004308:	4401      	add	r1, r0
 800430a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800430e:	4313      	orrs	r3, r2
 8004310:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d11f      	bne.n	800435a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004334:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004338:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004358:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d14b      	bne.n	80043f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d009      	beq.n	800437c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	78db      	ldrb	r3, [r3, #3]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d128      	bne.n	80043d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d110      	bne.n	80043b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	e00f      	b.n	80043d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e12f      	b.n	8004658 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004412:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004416:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	78db      	ldrb	r3, [r3, #3]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d015      	beq.n	800444c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8117 	beq.w	8004658 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	69f9      	ldr	r1, [r7, #28]
 8004442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004446:	4313      	orrs	r3, r2
 8004448:	634b      	str	r3, [r1, #52]	; 0x34
 800444a:	e105      	b.n	8004658 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d110      	bne.n	800447e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e00f      	b.n	800449e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	440a      	add	r2, r1
 8004494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	68d9      	ldr	r1, [r3, #12]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	b298      	uxth	r0, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	4603      	mov	r3, r0
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fa2b 	bl	800490e <USB_WritePacket>
 80044b8:	e0ce      	b.n	8004658 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d4:	0cdb      	lsrs	r3, r3, #19
 80044d6:	04db      	lsls	r3, r3, #19
 80044d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d126      	bne.n	8004554 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451c:	69b9      	ldr	r1, [r7, #24]
 800451e:	0148      	lsls	r0, r1, #5
 8004520:	69f9      	ldr	r1, [r7, #28]
 8004522:	4401      	add	r1, r0
 8004524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004528:	4313      	orrs	r3, r2
 800452a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800454a:	6113      	str	r3, [r2, #16]
 800454c:	e036      	b.n	80045bc <USB_EPStartXfer+0x3dc>
 800454e:	bf00      	nop
 8004550:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4413      	add	r3, r2
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	8afb      	ldrh	r3, [r7, #22]
 800457a:	04d9      	lsls	r1, r3, #19
 800457c:	4b39      	ldr	r3, [pc, #228]	; (8004664 <USB_EPStartXfer+0x484>)
 800457e:	400b      	ands	r3, r1
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	0148      	lsls	r0, r1, #5
 8004584:	69f9      	ldr	r1, [r7, #28]
 8004586:	4401      	add	r1, r0
 8004588:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800458c:	4313      	orrs	r3, r2
 800458e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	8af9      	ldrh	r1, [r7, #22]
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ac:	69b9      	ldr	r1, [r7, #24]
 80045ae:	0148      	lsls	r0, r1, #5
 80045b0:	69f9      	ldr	r1, [r7, #28]
 80045b2:	4401      	add	r1, r0
 80045b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045b8:	4313      	orrs	r3, r2
 80045ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d10d      	bne.n	80045de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	460a      	mov	r2, r1
 80045dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	78db      	ldrb	r3, [r3, #3]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d128      	bne.n	8004638 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d110      	bne.n	8004618 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e00f      	b.n	8004638 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004636:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004652:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	1ff80000 	.word	0x1ff80000

08004668 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b01      	cmp	r3, #1
 8004686:	f040 80cd 	bne.w	8004824 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d132      	bne.n	80046f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f0:	0cdb      	lsrs	r3, r3, #19
 80046f2:	04db      	lsls	r3, r3, #19
 80046f4:	6113      	str	r3, [r2, #16]
 80046f6:	e04e      	b.n	8004796 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004712:	0cdb      	lsrs	r3, r3, #19
 8004714:	04db      	lsls	r3, r3, #19
 8004716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004732:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004736:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800473a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d903      	bls.n	8004750 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800476e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004786:	6939      	ldr	r1, [r7, #16]
 8004788:	0148      	lsls	r0, r1, #5
 800478a:	6979      	ldr	r1, [r7, #20]
 800478c:	4401      	add	r1, r0
 800478e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004792:	4313      	orrs	r3, r2
 8004794:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d11e      	bne.n	80047da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e092      	b.n	8004900 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d07e      	beq.n	8004900 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	2101      	movs	r1, #1
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800481e:	4313      	orrs	r3, r2
 8004820:	634b      	str	r3, [r1, #52]	; 0x34
 8004822:	e06d      	b.n	8004900 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800483e:	0cdb      	lsrs	r3, r3, #19
 8004840:	04db      	lsls	r3, r3, #19
 8004842:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	440a      	add	r2, r1
 800485a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004862:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004866:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	0151      	lsls	r1, r2, #5
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	440a      	add	r2, r1
 800488e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004896:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ae:	6939      	ldr	r1, [r7, #16]
 80048b0:	0148      	lsls	r0, r1, #5
 80048b2:	6979      	ldr	r1, [r7, #20]
 80048b4:	4401      	add	r1, r0
 80048b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048ba:	4313      	orrs	r3, r2
 80048bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10d      	bne.n	80048e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d009      	beq.n	80048e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	68d9      	ldr	r1, [r3, #12]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	460a      	mov	r2, r1
 80048de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800490e:	b480      	push	{r7}
 8004910:	b089      	sub	sp, #36	; 0x24
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	4611      	mov	r1, r2
 800491a:	461a      	mov	r2, r3
 800491c:	460b      	mov	r3, r1
 800491e:	71fb      	strb	r3, [r7, #7]
 8004920:	4613      	mov	r3, r2
 8004922:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800492c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11a      	bne.n	800496a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004934:	88bb      	ldrh	r3, [r7, #4]
 8004936:	3303      	adds	r3, #3
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e00f      	b.n	8004962 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	031a      	lsls	r2, r3, #12
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494e:	461a      	mov	r2, r3
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3304      	adds	r3, #4
 800495a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	3301      	adds	r3, #1
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	429a      	cmp	r2, r3
 8004968:	d3eb      	bcc.n	8004942 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3724      	adds	r7, #36	; 0x24
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	3303      	adds	r3, #3
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	e00b      	b.n	80049b4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	3304      	adds	r3, #4
 80049ac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3ef      	bcc.n	800499c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80049bc:	69fb      	ldr	r3, [r7, #28]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3724      	adds	r7, #36	; 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	785b      	ldrb	r3, [r3, #1]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d12c      	bne.n	8004a40 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	db12      	blt.n	8004a1e <USB_EPSetStall+0x54>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00f      	beq.n	8004a1e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	0151      	lsls	r1, r2, #5
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	440a      	add	r2, r1
 8004a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a1c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e02b      	b.n	8004a98 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	db12      	blt.n	8004a78 <USB_EPSetStall+0xae>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00f      	beq.n	8004a78 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a76:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	785b      	ldrb	r3, [r3, #1]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d128      	bne.n	8004b14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004adc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ae0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	78db      	ldrb	r3, [r3, #3]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d003      	beq.n	8004af2 <USB_EPClearStall+0x4c>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	78db      	ldrb	r3, [r3, #3]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d138      	bne.n	8004b64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e027      	b.n	8004b64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	78db      	ldrb	r3, [r3, #3]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d003      	beq.n	8004b44 <USB_EPClearStall+0x9e>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	78db      	ldrb	r3, [r3, #3]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d10f      	bne.n	8004b64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bd8:	f023 0303 	bic.w	r3, r3, #3
 8004bdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bec:	f023 0302 	bic.w	r3, r3, #2
 8004bf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c2e:	f043 0302 	orr.w	r3, r3, #2
 8004c32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4013      	ands	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	0c1b      	lsrs	r3, r3, #16
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	b29b      	uxth	r3, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3c:	01db      	lsls	r3, r3, #7
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0301 	and.w	r3, r3, #1
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004da2:	f023 0307 	bic.w	r3, r3, #7
 8004da6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	333c      	adds	r3, #60	; 0x3c
 8004de2:	3304      	adds	r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <USB_EP0_OutStart+0xb8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d90a      	bls.n	8004e06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e00:	d101      	bne.n	8004e06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e037      	b.n	8004e76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e34:	f043 0318 	orr.w	r3, r3, #24
 8004e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e4e:	7afb      	ldrb	r3, [r7, #11]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10f      	bne.n	8004e74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	4f54300a 	.word	0x4f54300a

08004e88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <USB_CoreReset+0x64>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e01b      	b.n	8004ede <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	daf2      	bge.n	8004e94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <USB_CoreReset+0x64>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e006      	b.n	8004ede <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d0f0      	beq.n	8004ebe <USB_CoreReset+0x36>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	00030d40 	.word	0x00030d40

08004ef0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004efc:	205c      	movs	r0, #92	; 0x5c
 8004efe:	f002 f927 	bl	8007150 <malloc>
 8004f02:	4603      	mov	r3, r0
 8004f04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004f14:	2302      	movs	r3, #2
 8004f16:	e05f      	b.n	8004fd8 <USBD_CDC_Init+0xe8>
  }

  pdev->pClassData = (void *)hcdc;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	7c1b      	ldrb	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d117      	bne.n	8004f58 <USBD_CDC_Init+0x68>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f28:	2340      	movs	r3, #64	; 0x40
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	2181      	movs	r1, #129	; 0x81
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 ff95 	bl	8006e5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f3a:	2340      	movs	r3, #64	; 0x40
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	2101      	movs	r1, #1
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 ff8c 	bl	8006e5e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2210      	movs	r2, #16
 8004f52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004f56:	e016      	b.n	8004f86 <USBD_CDC_Init+0x96>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	2181      	movs	r1, #129	; 0x81
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f001 ff7d 	bl	8006e5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f6a:	2340      	movs	r3, #64	; 0x40
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	2101      	movs	r1, #1
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 ff74 	bl	8006e5e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2210      	movs	r2, #16
 8004f82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f86:	2308      	movs	r3, #8
 8004f88:	2203      	movs	r2, #3
 8004f8a:	2182      	movs	r1, #130	; 0x82
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 ff66 	bl	8006e5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	659a      	str	r2, [r3, #88]	; 0x58

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7c1b      	ldrb	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d107      	bne.n	8004fc8 <USBD_CDC_Init+0xd8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f002 f83b 	bl	800703c <USBD_LL_PrepareReceive>
 8004fc6:	e006      	b.n	8004fd6 <USBD_CDC_Init+0xe6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	2101      	movs	r1, #1
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f002 f833 	bl	800703c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ff0:	2181      	movs	r1, #129	; 0x81
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f001 ff59 	bl	8006eaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ffe:	2101      	movs	r1, #1
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f001 ff52 	bl	8006eaa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800500e:	2182      	movs	r1, #130	; 0x82
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 ff4a 	bl	8006eaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00e      	beq.n	800504e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005040:	4618      	mov	r0, r3
 8005042:	f002 f88d 	bl	8007160 <free>
    pdev->pClassData = NULL;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005068:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800507e:	2b00      	cmp	r3, #0
 8005080:	d03a      	beq.n	80050f8 <USBD_CDC_Setup+0xa0>
 8005082:	2b20      	cmp	r3, #32
 8005084:	f040 8097 	bne.w	80051b6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	88db      	ldrh	r3, [r3, #6]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d029      	beq.n	80050e4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b25b      	sxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	da11      	bge.n	80050be <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80050a6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	88d2      	ldrh	r2, [r2, #6]
 80050ac:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80050ae:	6939      	ldr	r1, [r7, #16]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	88db      	ldrh	r3, [r3, #6]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f001 fa8d 	bl	80065d6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80050bc:	e082      	b.n	80051c4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	785a      	ldrb	r2, [r3, #1]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hcdc->CmdLength = (uint8_t)req->wLength;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	88db      	ldrh	r3, [r3, #6]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80050d4:	6939      	ldr	r1, [r7, #16]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	88db      	ldrh	r3, [r3, #6]
 80050da:	461a      	mov	r2, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 faa6 	bl	800662e <USBD_CtlPrepareRx>
    break;
 80050e2:	e06f      	b.n	80051c4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	7850      	ldrb	r0, [r2, #1]
 80050f0:	2200      	movs	r2, #0
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	4798      	blx	r3
    break;
 80050f6:	e065      	b.n	80051c4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b0b      	cmp	r3, #11
 80050fe:	d84f      	bhi.n	80051a0 <USBD_CDC_Setup+0x148>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <USBD_CDC_Setup+0xb0>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	08005139 	.word	0x08005139
 800510c:	080051af 	.word	0x080051af
 8005110:	080051a1 	.word	0x080051a1
 8005114:	080051a1 	.word	0x080051a1
 8005118:	080051a1 	.word	0x080051a1
 800511c:	080051a1 	.word	0x080051a1
 8005120:	080051a1 	.word	0x080051a1
 8005124:	080051a1 	.word	0x080051a1
 8005128:	080051a1 	.word	0x080051a1
 800512c:	080051a1 	.word	0x080051a1
 8005130:	08005161 	.word	0x08005161
 8005134:	08005189 	.word	0x08005189
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800513e:	2b03      	cmp	r3, #3
 8005140:	d107      	bne.n	8005152 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	2202      	movs	r2, #2
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f001 fa43 	bl	80065d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005150:	e030      	b.n	80051b4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f001 f9cd 	bl	80064f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800515a:	2303      	movs	r3, #3
 800515c:	75fb      	strb	r3, [r7, #23]
      break;
 800515e:	e029      	b.n	80051b4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005166:	2b03      	cmp	r3, #3
 8005168:	d107      	bne.n	800517a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800516a:	f107 030f 	add.w	r3, r7, #15
 800516e:	2201      	movs	r2, #1
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 fa2f 	bl	80065d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005178:	e01c      	b.n	80051b4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 f9b9 	bl	80064f4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005182:	2303      	movs	r3, #3
 8005184:	75fb      	strb	r3, [r7, #23]
      break;
 8005186:	e015      	b.n	80051b4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800518e:	2b03      	cmp	r3, #3
 8005190:	d00f      	beq.n	80051b2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f001 f9ad 	bl	80064f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800519a:	2303      	movs	r3, #3
 800519c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800519e:	e008      	b.n	80051b2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 f9a6 	bl	80064f4 <USBD_CtlError>
      ret = USBD_FAIL;
 80051a8:	2303      	movs	r3, #3
 80051aa:	75fb      	strb	r3, [r7, #23]
      break;
 80051ac:	e002      	b.n	80051b4 <USBD_CDC_Setup+0x15c>
      break;
 80051ae:	bf00      	nop
 80051b0:	e008      	b.n	80051c4 <USBD_CDC_Setup+0x16c>
      break;
 80051b2:	bf00      	nop
    }
    break;
 80051b4:	e006      	b.n	80051c4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 f99b 	bl	80064f4 <USBD_CtlError>
    ret = USBD_FAIL;
 80051be:	2303      	movs	r3, #3
 80051c0:	75fb      	strb	r3, [r7, #23]
    break;
 80051c2:	bf00      	nop
  }

  return (uint8_t)ret;
 80051c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop

080051d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80051e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e047      	b.n	8005282 <USBD_CDC_DataIn+0xb2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3318      	adds	r3, #24
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d029      	beq.n	8005264 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	3318      	adds	r3, #24
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	78f9      	ldrb	r1, [r7, #3]
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	460b      	mov	r3, r1
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	1a5b      	subs	r3, r3, r1
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4403      	add	r3, r0
 8005230:	3344      	adds	r3, #68	; 0x44
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	fbb2 f1f3 	udiv	r1, r2, r3
 8005238:	fb03 f301 	mul.w	r3, r3, r1
 800523c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800523e:	2b00      	cmp	r3, #0
 8005240:	d110      	bne.n	8005264 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	3318      	adds	r3, #24
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005256:	78f9      	ldrb	r1, [r7, #3]
 8005258:	2300      	movs	r3, #0
 800525a:	2200      	movs	r2, #0
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fecc 	bl	8006ffa <USBD_LL_Transmit>
 8005262:	e00d      	b.n	8005280 <USBD_CDC_DataIn+0xb0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2200      	movs	r2, #0
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	f102 0150 	add.w	r1, r2, #80	; 0x50
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	460b      	mov	r3, r1
 8005294:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800529c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e012      	b.n	80052d2 <USBD_CDC_DataOut+0x48>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 fee4 	bl	800707e <USBD_LL_GetRxDataSize>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	324c      	adds	r2, #76	; 0x4c
 80052cc:	4611      	mov	r1, r2
 80052ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <USBD_CDC_EP0_RxReady+0x46>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052fa:	2bff      	cmp	r3, #255	; 0xff
 80052fc:	d010      	beq.n	8005320 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)hcdc->data,
 800530c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005314:	b292      	uxth	r2, r2
 8005316:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	22ff      	movs	r2, #255	; 0xff
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  }

  return (uint8_t)USBD_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2243      	movs	r2, #67	; 0x43
 8005338:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800533a:	4b03      	ldr	r3, [pc, #12]	; (8005348 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	20000094 	.word	0x20000094

0800534c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2243      	movs	r2, #67	; 0x43
 8005358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	20000050 	.word	0x20000050

0800536c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2243      	movs	r2, #67	; 0x43
 8005378:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800537a:	4b03      	ldr	r3, [pc, #12]	; (8005388 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	200000d8 	.word	0x200000d8

0800538c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	220a      	movs	r2, #10
 8005398:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800539a:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	2000000c 	.word	0x2000000c

080053ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	e004      	b.n	80053ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b087      	sub	sp, #28
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005414:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005438:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005448:	2303      	movs	r3, #3
 800544a:	e015      	b.n	8005478 <USBD_CDC_TransmitPacket+0x4e>
  }

  if (hcdc->TxState == 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	2b00      	cmp	r3, #0
 8005452:	d110      	bne.n	8005476 <USBD_CDC_TransmitPacket+0x4c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2201      	movs	r2, #1
 8005458:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	2181      	movs	r1, #129	; 0x81
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 fdc4 	bl	8006ffa <USBD_LL_Transmit>

    ret = USBD_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800548e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800549a:	2303      	movs	r3, #3
 800549c:	e013      	b.n	80054c6 <USBD_CDC_ReceivePacket+0x46>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7c1b      	ldrb	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d107      	bne.n	80054b6 <USBD_CDC_ReceivePacket+0x36>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054aa:	2340      	movs	r3, #64	; 0x40
 80054ac:	2101      	movs	r1, #1
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 fdc4 	bl	800703c <USBD_LL_PrepareReceive>
 80054b4:	e006      	b.n	80054c4 <USBD_CDC_ReceivePacket+0x44>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ba:	2340      	movs	r3, #64	; 0x40
 80054bc:	2101      	movs	r1, #1
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 fdbc 	bl	800703c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	4613      	mov	r3, r2
 80054da:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e025      	b.n	8005532 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	79fa      	ldrb	r2, [r7, #7]
 8005524:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f001 fc32 	bl	8006d90 <USBD_LL_Init>
 800552c:	4603      	mov	r3, r0
 800552e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800554e:	2303      	movs	r3, #3
 8005550:	e010      	b.n	8005574 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	f107 020e 	add.w	r2, r7, #14
 8005566:	4610      	mov	r0, r2
 8005568:	4798      	blx	r3
 800556a:	4602      	mov	r2, r0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 fc4f 	bl	8006e28 <USBD_LL_Start>
 800558a:	4603      	mov	r3, r0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80055b6:	2303      	movs	r3, #3
 80055b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	4611      	mov	r1, r2
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	4611      	mov	r1, r2
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	4798      	blx	r3
  }

  return USBD_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 ff2b 	bl	8006480 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	2b01      	cmp	r3, #1
 800564c:	d00e      	beq.n	800566c <USBD_LL_SetupStage+0x5a>
 800564e:	2b01      	cmp	r3, #1
 8005650:	d302      	bcc.n	8005658 <USBD_LL_SetupStage+0x46>
 8005652:	2b02      	cmp	r3, #2
 8005654:	d014      	beq.n	8005680 <USBD_LL_SetupStage+0x6e>
 8005656:	e01d      	b.n	8005694 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fa17 	bl	8005a94 <USBD_StdDevReq>
 8005666:	4603      	mov	r3, r0
 8005668:	73fb      	strb	r3, [r7, #15]
      break;
 800566a:	e020      	b.n	80056ae <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fa7b 	bl	8005b70 <USBD_StdItfReq>
 800567a:	4603      	mov	r3, r0
 800567c:	73fb      	strb	r3, [r7, #15]
      break;
 800567e:	e016      	b.n	80056ae <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fab7 	bl	8005bfc <USBD_StdEPReq>
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]
      break;
 8005692:	e00c      	b.n	80056ae <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800569a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f001 fc20 	bl	8006ee8 <USBD_LL_StallEP>
 80056a8:	4603      	mov	r3, r0
 80056aa:	73fb      	strb	r3, [r7, #15]
      break;
 80056ac:	bf00      	nop
  }

  return ret;
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	460b      	mov	r3, r1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80056c6:	7afb      	ldrb	r3, [r7, #11]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d137      	bne.n	800573c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d14a      	bne.n	8005774 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d913      	bls.n	8005712 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	1ad2      	subs	r2, r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4293      	cmp	r3, r2
 8005702:	bf28      	it	cs
 8005704:	4613      	movcs	r3, r2
 8005706:	461a      	mov	r2, r3
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 ffac 	bl	8006668 <USBD_CtlContinueRx>
 8005710:	e030      	b.n	8005774 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005724:	2b03      	cmp	r3, #3
 8005726:	d105      	bne.n	8005734 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 ffa8 	bl	800668a <USBD_CtlSendStatus>
 800573a:	e01b      	b.n	8005774 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d013      	beq.n	8005770 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800574e:	2b03      	cmp	r3, #3
 8005750:	d10e      	bne.n	8005770 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	7afa      	ldrb	r2, [r7, #11]
 800575c:	4611      	mov	r1, r2
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	4798      	blx	r3
 8005762:	4603      	mov	r3, r0
 8005764:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005766:	7dfb      	ldrb	r3, [r7, #23]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	e002      	b.n	8005776 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005770:	2303      	movs	r3, #3
 8005772:	e000      	b.n	8005776 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	460b      	mov	r3, r1
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d16a      	bne.n	8005868 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3314      	adds	r3, #20
 8005796:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d155      	bne.n	800584e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d914      	bls.n	80057d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 ff21 	bl	800660c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057ca:	2300      	movs	r3, #0
 80057cc:	2200      	movs	r2, #0
 80057ce:	2100      	movs	r1, #0
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f001 fc33 	bl	800703c <USBD_LL_PrepareReceive>
 80057d6:	e03a      	b.n	800584e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d11c      	bne.n	800581e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d316      	bcc.n	800581e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d20f      	bcs.n	800581e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057fe:	2200      	movs	r2, #0
 8005800:	2100      	movs	r1, #0
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 ff02 	bl	800660c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005810:	2300      	movs	r3, #0
 8005812:	2200      	movs	r2, #0
 8005814:	2100      	movs	r1, #0
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f001 fc10 	bl	800703c <USBD_LL_PrepareReceive>
 800581c:	e017      	b.n	800584e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005830:	2b03      	cmp	r3, #3
 8005832:	d105      	bne.n	8005840 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005840:	2180      	movs	r1, #128	; 0x80
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f001 fb50 	bl	8006ee8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 ff31 	bl	80066b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005854:	2b01      	cmp	r3, #1
 8005856:	d123      	bne.n	80058a0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff fe9b 	bl	8005594 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005866:	e01b      	b.n	80058a0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d013      	beq.n	800589c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800587a:	2b03      	cmp	r3, #3
 800587c:	d10e      	bne.n	800589c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	7afa      	ldrb	r2, [r7, #11]
 8005888:	4611      	mov	r1, r2
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	4798      	blx	r3
 800588e:	4603      	mov	r3, r0
 8005890:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005892:	7dfb      	ldrb	r3, [r7, #23]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	e002      	b.n	80058a2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800589c:	2303      	movs	r3, #3
 800589e:	e000      	b.n	80058a2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6852      	ldr	r2, [r2, #4]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	4611      	mov	r1, r2
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058ee:	2340      	movs	r3, #64	; 0x40
 80058f0:	2200      	movs	r2, #0
 80058f2:	2100      	movs	r1, #0
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 fab2 	bl	8006e5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2240      	movs	r2, #64	; 0x40
 8005906:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800590a:	2340      	movs	r3, #64	; 0x40
 800590c:	2200      	movs	r2, #0
 800590e:	2180      	movs	r1, #128	; 0x80
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 faa4 	bl	8006e5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2240      	movs	r2, #64	; 0x40
 8005920:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2204      	movs	r2, #4
 8005964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005984:	2b04      	cmp	r3, #4
 8005986:	d105      	bne.n	8005994 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d10b      	bne.n	80059cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4611      	mov	r1, r2
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
  }

  return USBD_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a76:	8a3b      	ldrh	r3, [r7, #16]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	b21a      	sxth	r2, r3
 8005a7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005a86:	89fb      	ldrh	r3, [r7, #14]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d004      	beq.n	8005ab8 <USBD_StdDevReq+0x24>
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d002      	beq.n	8005ab8 <USBD_StdDevReq+0x24>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <USBD_StdDevReq+0x38>
 8005ab6:	e050      	b.n	8005b5a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8005aca:	e04b      	b.n	8005b64 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b09      	cmp	r3, #9
 8005ad2:	d83c      	bhi.n	8005b4e <USBD_StdDevReq+0xba>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <USBD_StdDevReq+0x48>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b31 	.word	0x08005b31
 8005ae0:	08005b45 	.word	0x08005b45
 8005ae4:	08005b4f 	.word	0x08005b4f
 8005ae8:	08005b3b 	.word	0x08005b3b
 8005aec:	08005b4f 	.word	0x08005b4f
 8005af0:	08005b0f 	.word	0x08005b0f
 8005af4:	08005b05 	.word	0x08005b05
 8005af8:	08005b4f 	.word	0x08005b4f
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b19 	.word	0x08005b19
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f9ce 	bl	8005ea8 <USBD_GetDescriptor>
      break;
 8005b0c:	e024      	b.n	8005b58 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fb33 	bl	800617c <USBD_SetAddress>
      break;
 8005b16:	e01f      	b.n	8005b58 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fb70 	bl	8006200 <USBD_SetConfig>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]
      break;
 8005b24:	e018      	b.n	8005b58 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fc0d 	bl	8006348 <USBD_GetConfig>
      break;
 8005b2e:	e013      	b.n	8005b58 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fc3c 	bl	80063b0 <USBD_GetStatus>
      break;
 8005b38:	e00e      	b.n	8005b58 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fc6a 	bl	8006416 <USBD_SetFeature>
      break;
 8005b42:	e009      	b.n	8005b58 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fc79 	bl	800643e <USBD_ClrFeature>
      break;
 8005b4c:	e004      	b.n	8005b58 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fccf 	bl	80064f4 <USBD_CtlError>
      break;
 8005b56:	bf00      	nop
    }
    break;
 8005b58:	e004      	b.n	8005b64 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fcc9 	bl	80064f4 <USBD_CtlError>
    break;
 8005b62:	bf00      	nop
  }

  return ret;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop

08005b70 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d003      	beq.n	8005b92 <USBD_StdItfReq+0x22>
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	d001      	beq.n	8005b92 <USBD_StdItfReq+0x22>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d12a      	bne.n	8005be8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d81d      	bhi.n	8005bda <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	889b      	ldrh	r3, [r3, #4]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d813      	bhi.n	8005bd0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	88db      	ldrh	r3, [r3, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d110      	bne.n	8005be4 <USBD_StdItfReq+0x74>
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10d      	bne.n	8005be4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fd5e 	bl	800668a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005bce:	e009      	b.n	8005be4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fc8e 	bl	80064f4 <USBD_CtlError>
      break;
 8005bd8:	e004      	b.n	8005be4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fc89 	bl	80064f4 <USBD_CtlError>
      break;
 8005be2:	e000      	b.n	8005be6 <USBD_StdItfReq+0x76>
      break;
 8005be4:	bf00      	nop
    }
    break;
 8005be6:	e004      	b.n	8005bf2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fc82 	bl	80064f4 <USBD_CtlError>
    break;
 8005bf0:	bf00      	nop
  }

  return ret;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	889b      	ldrh	r3, [r3, #4]
 8005c0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d004      	beq.n	8005c26 <USBD_StdEPReq+0x2a>
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d002      	beq.n	8005c26 <USBD_StdEPReq+0x2a>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <USBD_StdEPReq+0x3e>
 8005c24:	e135      	b.n	8005e92 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	4798      	blx	r3
 8005c34:	4603      	mov	r3, r0
 8005c36:	73fb      	strb	r3, [r7, #15]
    break;
 8005c38:	e130      	b.n	8005e9c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d03e      	beq.n	8005cc0 <USBD_StdEPReq+0xc4>
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d002      	beq.n	8005c4c <USBD_StdEPReq+0x50>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d077      	beq.n	8005d3a <USBD_StdEPReq+0x13e>
 8005c4a:	e11c      	b.n	8005e86 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d002      	beq.n	8005c5c <USBD_StdEPReq+0x60>
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d015      	beq.n	8005c86 <USBD_StdEPReq+0x8a>
 8005c5a:	e02b      	b.n	8005cb4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c5c:	7bbb      	ldrb	r3, [r7, #14]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <USBD_StdEPReq+0x80>
 8005c62:	7bbb      	ldrb	r3, [r7, #14]
 8005c64:	2b80      	cmp	r3, #128	; 0x80
 8005c66:	d009      	beq.n	8005c7c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f93b 	bl	8006ee8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c72:	2180      	movs	r1, #128	; 0x80
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 f937 	bl	8006ee8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005c7a:	e020      	b.n	8005cbe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fc38 	bl	80064f4 <USBD_CtlError>
        break;
 8005c84:	e01b      	b.n	8005cbe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	885b      	ldrh	r3, [r3, #2]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10e      	bne.n	8005cac <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <USBD_StdEPReq+0xb0>
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	2b80      	cmp	r3, #128	; 0x80
 8005c98:	d008      	beq.n	8005cac <USBD_StdEPReq+0xb0>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	88db      	ldrh	r3, [r3, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f001 f91e 	bl	8006ee8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fcec 	bl	800668a <USBD_CtlSendStatus>

        break;
 8005cb2:	e004      	b.n	8005cbe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fc1c 	bl	80064f4 <USBD_CtlError>
        break;
 8005cbc:	bf00      	nop
      }
      break;
 8005cbe:	e0e7      	b.n	8005e90 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d002      	beq.n	8005cd0 <USBD_StdEPReq+0xd4>
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d015      	beq.n	8005cfa <USBD_StdEPReq+0xfe>
 8005cce:	e02d      	b.n	8005d2c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <USBD_StdEPReq+0xf4>
 8005cd6:	7bbb      	ldrb	r3, [r7, #14]
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d009      	beq.n	8005cf0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f901 	bl	8006ee8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ce6:	2180      	movs	r1, #128	; 0x80
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 f8fd 	bl	8006ee8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005cee:	e023      	b.n	8005d38 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fbfe 	bl	80064f4 <USBD_CtlError>
        break;
 8005cf8:	e01e      	b.n	8005d38 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	885b      	ldrh	r3, [r3, #2]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d119      	bne.n	8005d36 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 f908 	bl	8006f26 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fcb7 	bl	800668a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
        }
        break;
 8005d2a:	e004      	b.n	8005d36 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fbe0 	bl	80064f4 <USBD_CtlError>
        break;
 8005d34:	e000      	b.n	8005d38 <USBD_StdEPReq+0x13c>
        break;
 8005d36:	bf00      	nop
      }
      break;
 8005d38:	e0aa      	b.n	8005e90 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d002      	beq.n	8005d4a <USBD_StdEPReq+0x14e>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d032      	beq.n	8005dae <USBD_StdEPReq+0x1b2>
 8005d48:	e097      	b.n	8005e7a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <USBD_StdEPReq+0x164>
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	2b80      	cmp	r3, #128	; 0x80
 8005d54:	d004      	beq.n	8005d60 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fbcb 	bl	80064f4 <USBD_CtlError>
          break;
 8005d5e:	e091      	b.n	8005e84 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da0b      	bge.n	8005d80 <USBD_StdEPReq+0x184>
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	3310      	adds	r3, #16
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	e00b      	b.n	8005d98 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	4413      	add	r3, r2
 8005d96:	3304      	adds	r3, #4
 8005d98:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2202      	movs	r2, #2
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fc15 	bl	80065d6 <USBD_CtlSendData>
        break;
 8005dac:	e06a      	b.n	8005e84 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da11      	bge.n	8005dda <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005db6:	7bbb      	ldrb	r3, [r7, #14]
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3324      	adds	r3, #36	; 0x24
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d117      	bne.n	8005e00 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fb8e 	bl	80064f4 <USBD_CtlError>
            break;
 8005dd8:	e054      	b.n	8005e84 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	f003 020f 	and.w	r2, r3, #15
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fb7b 	bl	80064f4 <USBD_CtlError>
            break;
 8005dfe:	e041      	b.n	8005e84 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da0b      	bge.n	8005e20 <USBD_StdEPReq+0x224>
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
 8005e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	3310      	adds	r3, #16
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	e00b      	b.n	8005e38 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4413      	add	r3, r2
 8005e36:	3304      	adds	r3, #4
 8005e38:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <USBD_StdEPReq+0x24a>
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d103      	bne.n	8005e4e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e00e      	b.n	8005e6c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e4e:	7bbb      	ldrb	r3, [r7, #14]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 f886 	bl	8006f64 <USBD_LL_IsStallEP>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e002      	b.n	8005e6c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fbaf 	bl	80065d6 <USBD_CtlSendData>
          break;
 8005e78:	e004      	b.n	8005e84 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb39 	bl	80064f4 <USBD_CtlError>
        break;
 8005e82:	bf00      	nop
      }
      break;
 8005e84:	e004      	b.n	8005e90 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fb33 	bl	80064f4 <USBD_CtlError>
      break;
 8005e8e:	bf00      	nop
    }
    break;
 8005e90:	e004      	b.n	8005e9c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fb2d 	bl	80064f4 <USBD_CtlError>
    break;
 8005e9a:	bf00      	nop
  }

  return ret;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	885b      	ldrh	r3, [r3, #2]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	f200 8128 	bhi.w	800611e <USBD_GetDescriptor+0x276>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <USBD_GetDescriptor+0x2c>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005f09 	.word	0x08005f09
 8005edc:	08005f49 	.word	0x08005f49
 8005ee0:	0800611f 	.word	0x0800611f
 8005ee4:	0800611f 	.word	0x0800611f
 8005ee8:	080060bf 	.word	0x080060bf
 8005eec:	080060eb 	.word	0x080060eb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	7c12      	ldrb	r2, [r2, #16]
 8005efc:	f107 0108 	add.w	r1, r7, #8
 8005f00:	4610      	mov	r0, r2
 8005f02:	4798      	blx	r3
 8005f04:	60f8      	str	r0, [r7, #12]
    break;
 8005f06:	e112      	b.n	800612e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7c1b      	ldrb	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10d      	bne.n	8005f2c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	f107 0208 	add.w	r2, r7, #8
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
 8005f20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3301      	adds	r3, #1
 8005f26:	2202      	movs	r2, #2
 8005f28:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005f2a:	e100      	b.n	800612e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	f107 0208 	add.w	r2, r7, #8
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	2202      	movs	r2, #2
 8005f44:	701a      	strb	r2, [r3, #0]
    break;
 8005f46:	e0f2      	b.n	800612e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	885b      	ldrh	r3, [r3, #2]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	f200 80ac 	bhi.w	80060ac <USBD_GetDescriptor+0x204>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <USBD_GetDescriptor+0xb4>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08005fa9 	.word	0x08005fa9
 8005f64:	08005fdd 	.word	0x08005fdd
 8005f68:	08006011 	.word	0x08006011
 8005f6c:	08006045 	.word	0x08006045
 8005f70:	08006079 	.word	0x08006079
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	7c12      	ldrb	r2, [r2, #16]
 8005f8c:	f107 0108 	add.w	r1, r7, #8
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f96:	e091      	b.n	80060bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 faaa 	bl	80064f4 <USBD_CtlError>
        err++;
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	72fb      	strb	r3, [r7, #11]
      break;
 8005fa6:	e089      	b.n	80060bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	7c12      	ldrb	r2, [r2, #16]
 8005fc0:	f107 0108 	add.w	r1, r7, #8
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4798      	blx	r3
 8005fc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fca:	e077      	b.n	80060bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa90 	bl	80064f4 <USBD_CtlError>
        err++;
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	72fb      	strb	r3, [r7, #11]
      break;
 8005fda:	e06f      	b.n	80060bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	7c12      	ldrb	r2, [r2, #16]
 8005ff4:	f107 0108 	add.w	r1, r7, #8
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4798      	blx	r3
 8005ffc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ffe:	e05d      	b.n	80060bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa76 	bl	80064f4 <USBD_CtlError>
        err++;
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	3301      	adds	r3, #1
 800600c:	72fb      	strb	r3, [r7, #11]
      break;
 800600e:	e055      	b.n	80060bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	7c12      	ldrb	r2, [r2, #16]
 8006028:	f107 0108 	add.w	r1, r7, #8
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
 8006030:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006032:	e043      	b.n	80060bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa5c 	bl	80064f4 <USBD_CtlError>
        err++;
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	3301      	adds	r3, #1
 8006040:	72fb      	strb	r3, [r7, #11]
      break;
 8006042:	e03b      	b.n	80060bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	7c12      	ldrb	r2, [r2, #16]
 800605c:	f107 0108 	add.w	r1, r7, #8
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
 8006064:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006066:	e029      	b.n	80060bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa42 	bl	80064f4 <USBD_CtlError>
        err++;
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	3301      	adds	r3, #1
 8006074:	72fb      	strb	r3, [r7, #11]
      break;
 8006076:	e021      	b.n	80060bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	7c12      	ldrb	r2, [r2, #16]
 8006090:	f107 0108 	add.w	r1, r7, #8
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800609a:	e00f      	b.n	80060bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fa28 	bl	80064f4 <USBD_CtlError>
        err++;
 80060a4:	7afb      	ldrb	r3, [r7, #11]
 80060a6:	3301      	adds	r3, #1
 80060a8:	72fb      	strb	r3, [r7, #11]
      break;
 80060aa:	e007      	b.n	80060bc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa20 	bl	80064f4 <USBD_CtlError>
      err++;
 80060b4:	7afb      	ldrb	r3, [r7, #11]
 80060b6:	3301      	adds	r3, #1
 80060b8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80060ba:	bf00      	nop
    }
    break;
 80060bc:	e037      	b.n	800612e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7c1b      	ldrb	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	f107 0208 	add.w	r2, r7, #8
 80060d2:	4610      	mov	r0, r2
 80060d4:	4798      	blx	r3
 80060d6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80060d8:	e029      	b.n	800612e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fa09 	bl	80064f4 <USBD_CtlError>
      err++;
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	3301      	adds	r3, #1
 80060e6:	72fb      	strb	r3, [r7, #11]
    break;
 80060e8:	e021      	b.n	800612e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	7c1b      	ldrb	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10d      	bne.n	800610e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	f107 0208 	add.w	r2, r7, #8
 80060fe:	4610      	mov	r0, r2
 8006100:	4798      	blx	r3
 8006102:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3301      	adds	r3, #1
 8006108:	2207      	movs	r2, #7
 800610a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800610c:	e00f      	b.n	800612e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f9ef 	bl	80064f4 <USBD_CtlError>
      err++;
 8006116:	7afb      	ldrb	r3, [r7, #11]
 8006118:	3301      	adds	r3, #1
 800611a:	72fb      	strb	r3, [r7, #11]
    break;
 800611c:	e007      	b.n	800612e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f9e7 	bl	80064f4 <USBD_CtlError>
    err++;
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	3301      	adds	r3, #1
 800612a:	72fb      	strb	r3, [r7, #11]
    break;
 800612c:	bf00      	nop
  }

  if (err != 0U)
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11e      	bne.n	8006172 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	88db      	ldrh	r3, [r3, #6]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d016      	beq.n	800616a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00e      	beq.n	8006160 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	88da      	ldrh	r2, [r3, #6]
 8006146:	893b      	ldrh	r3, [r7, #8]
 8006148:	4293      	cmp	r3, r2
 800614a:	bf28      	it	cs
 800614c:	4613      	movcs	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006152:	893b      	ldrh	r3, [r7, #8]
 8006154:	461a      	mov	r2, r3
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa3c 	bl	80065d6 <USBD_CtlSendData>
 800615e:	e009      	b.n	8006174 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9c6 	bl	80064f4 <USBD_CtlError>
 8006168:	e004      	b.n	8006174 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa8d 	bl	800668a <USBD_CtlSendStatus>
 8006170:	e000      	b.n	8006174 <USBD_GetDescriptor+0x2cc>
    return;
 8006172:	bf00      	nop
    }
  }
}
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop

0800617c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	889b      	ldrh	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d130      	bne.n	80061f0 <USBD_SetAddress+0x74>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	88db      	ldrh	r3, [r3, #6]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d12c      	bne.n	80061f0 <USBD_SetAddress+0x74>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	885b      	ldrh	r3, [r3, #2]
 800619a:	2b7f      	cmp	r3, #127	; 0x7f
 800619c:	d828      	bhi.n	80061f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d104      	bne.n	80061be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f99c 	bl	80064f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061bc:	e01c      	b.n	80061f8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7bfa      	ldrb	r2, [r7, #15]
 80061c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fef6 	bl	8006fbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fa5a 	bl	800668a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e4:	e008      	b.n	80061f8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ee:	e003      	b.n	80061f8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f97e 	bl	80064f4 <USBD_CtlError>
  }
}
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	885b      	ldrh	r3, [r3, #2]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	4b4b      	ldr	r3, [pc, #300]	; (8006344 <USBD_SetConfig+0x144>)
 8006216:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006218:	4b4a      	ldr	r3, [pc, #296]	; (8006344 <USBD_SetConfig+0x144>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d905      	bls.n	800622c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f966 	bl	80064f4 <USBD_CtlError>
    return USBD_FAIL;
 8006228:	2303      	movs	r3, #3
 800622a:	e087      	b.n	800633c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006232:	2b02      	cmp	r3, #2
 8006234:	d002      	beq.n	800623c <USBD_SetConfig+0x3c>
 8006236:	2b03      	cmp	r3, #3
 8006238:	d025      	beq.n	8006286 <USBD_SetConfig+0x86>
 800623a:	e071      	b.n	8006320 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800623c:	4b41      	ldr	r3, [pc, #260]	; (8006344 <USBD_SetConfig+0x144>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01c      	beq.n	800627e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006244:	4b3f      	ldr	r3, [pc, #252]	; (8006344 <USBD_SetConfig+0x144>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800624e:	4b3d      	ldr	r3, [pc, #244]	; (8006344 <USBD_SetConfig+0x144>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff f9a8 	bl	80055aa <USBD_SetClassConfig>
 800625a:	4603      	mov	r3, r0
 800625c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f944 	bl	80064f4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800626c:	e065      	b.n	800633a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa0b 	bl	800668a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2203      	movs	r2, #3
 8006278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800627c:	e05d      	b.n	800633a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fa03 	bl	800668a <USBD_CtlSendStatus>
    break;
 8006284:	e059      	b.n	800633a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <USBD_SetConfig+0x144>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d112      	bne.n	80062b4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2202      	movs	r2, #2
 8006292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006296:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <USBD_SetConfig+0x144>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <USBD_SetConfig+0x144>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff f99b 	bl	80055e2 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f9ec 	bl	800668a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80062b2:	e042      	b.n	800633a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80062b4:	4b23      	ldr	r3, [pc, #140]	; (8006344 <USBD_SetConfig+0x144>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d02a      	beq.n	8006318 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff f989 	bl	80055e2 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <USBD_SetConfig+0x144>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80062da:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <USBD_SetConfig+0x144>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff f962 	bl	80055aa <USBD_SetClassConfig>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f8fe 	bl	80064f4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff f96e 	bl	80055e2 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800630e:	e014      	b.n	800633a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f9ba 	bl	800668a <USBD_CtlSendStatus>
    break;
 8006316:	e010      	b.n	800633a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f9b6 	bl	800668a <USBD_CtlSendStatus>
    break;
 800631e:	e00c      	b.n	800633a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f8e6 	bl	80064f4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <USBD_SetConfig+0x144>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff f957 	bl	80055e2 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	73fb      	strb	r3, [r7, #15]
    break;
 8006338:	bf00      	nop
  }

  return ret;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	2000020c 	.word	0x2000020c

08006348 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	88db      	ldrh	r3, [r3, #6]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d004      	beq.n	8006364 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f8c9 	bl	80064f4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006362:	e021      	b.n	80063a8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636a:	2b01      	cmp	r3, #1
 800636c:	db17      	blt.n	800639e <USBD_GetConfig+0x56>
 800636e:	2b02      	cmp	r3, #2
 8006370:	dd02      	ble.n	8006378 <USBD_GetConfig+0x30>
 8006372:	2b03      	cmp	r3, #3
 8006374:	d00b      	beq.n	800638e <USBD_GetConfig+0x46>
 8006376:	e012      	b.n	800639e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3308      	adds	r3, #8
 8006382:	2201      	movs	r2, #1
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f925 	bl	80065d6 <USBD_CtlSendData>
      break;
 800638c:	e00c      	b.n	80063a8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3304      	adds	r3, #4
 8006392:	2201      	movs	r2, #1
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f91d 	bl	80065d6 <USBD_CtlSendData>
      break;
 800639c:	e004      	b.n	80063a8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f8a7 	bl	80064f4 <USBD_CtlError>
      break;
 80063a6:	bf00      	nop
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c0:	3b01      	subs	r3, #1
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d81e      	bhi.n	8006404 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	88db      	ldrh	r3, [r3, #6]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d004      	beq.n	80063d8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f88f 	bl	80064f4 <USBD_CtlError>
      break;
 80063d6:	e01a      	b.n	800640e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f043 0202 	orr.w	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	330c      	adds	r3, #12
 80063f8:	2202      	movs	r2, #2
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f8ea 	bl	80065d6 <USBD_CtlSendData>
    break;
 8006402:	e004      	b.n	800640e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f874 	bl	80064f4 <USBD_CtlError>
    break;
 800640c:	bf00      	nop
  }
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	885b      	ldrh	r3, [r3, #2]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d106      	bne.n	8006436 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f92a 	bl	800668a <USBD_CtlSendStatus>
  }
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644e:	3b01      	subs	r3, #1
 8006450:	2b02      	cmp	r3, #2
 8006452:	d80b      	bhi.n	800646c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	885b      	ldrh	r3, [r3, #2]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d10c      	bne.n	8006476 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f910 	bl	800668a <USBD_CtlSendStatus>
      }
      break;
 800646a:	e004      	b.n	8006476 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f840 	bl	80064f4 <USBD_CtlError>
      break;
 8006474:	e000      	b.n	8006478 <USBD_ClrFeature+0x3a>
      break;
 8006476:	bf00      	nop
  }
}
 8006478:	bf00      	nop
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3301      	adds	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	781a      	ldrb	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fad4 	bl	8005a58 <SWAPBYTE>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3301      	adds	r3, #1
 80064bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff fac7 	bl	8005a58 <SWAPBYTE>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3301      	adds	r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff faba 	bl	8005a58 <SWAPBYTE>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	80da      	strh	r2, [r3, #6]
}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fcf1 	bl	8006ee8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006506:	2100      	movs	r1, #0
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fced 	bl	8006ee8 <USBD_LL_StallEP>
}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b086      	sub	sp, #24
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d036      	beq.n	800659a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006530:	6938      	ldr	r0, [r7, #16]
 8006532:	f000 f836 	bl	80065a2 <USBD_GetLen>
 8006536:	4603      	mov	r3, r0
 8006538:	3301      	adds	r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4413      	add	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	3301      	adds	r3, #1
 8006554:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	4413      	add	r3, r2
 800655c:	2203      	movs	r2, #3
 800655e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	3301      	adds	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006566:	e013      	b.n	8006590 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4413      	add	r3, r2
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	3301      	adds	r3, #1
 8006578:	613b      	str	r3, [r7, #16]
    idx++;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	3301      	adds	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	4413      	add	r3, r2
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]
    idx++;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	3301      	adds	r3, #1
 800658e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e7      	bne.n	8006568 <USBD_GetString+0x52>
 8006598:	e000      	b.n	800659c <USBD_GetString+0x86>
    return;
 800659a:	bf00      	nop
  }
}
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80065b2:	e005      	b.n	80065c0 <USBD_GetLen+0x1e>
  {
    len++;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	3301      	adds	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	3301      	adds	r3, #1
 80065be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1f5      	bne.n	80065b4 <USBD_GetLen+0x12>
  }

  return len;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	2100      	movs	r1, #0
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fcfc 	bl	8006ffa <USBD_LL_Transmit>

  return USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	2100      	movs	r1, #0
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fceb 	bl	8006ffa <USBD_LL_Transmit>

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2203      	movs	r2, #3
 800663e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	2100      	movs	r1, #0
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fcef 	bl	800703c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	2100      	movs	r1, #0
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fcde 	bl	800703c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800669a:	2300      	movs	r3, #0
 800669c:	2200      	movs	r2, #0
 800669e:	2100      	movs	r1, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fcaa 	bl	8006ffa <USBD_LL_Transmit>

  return USBD_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2205      	movs	r2, #5
 80066bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066c0:	2300      	movs	r3, #0
 80066c2:	2200      	movs	r2, #0
 80066c4:	2100      	movs	r1, #0
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fcb8 	bl	800703c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066dc:	2200      	movs	r2, #0
 80066de:	4912      	ldr	r1, [pc, #72]	; (8006728 <MX_USB_DEVICE_Init+0x50>)
 80066e0:	4812      	ldr	r0, [pc, #72]	; (800672c <MX_USB_DEVICE_Init+0x54>)
 80066e2:	f7fe fef4 	bl	80054ce <USBD_Init>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066ec:	f7fa f884 	bl	80007f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066f0:	490f      	ldr	r1, [pc, #60]	; (8006730 <MX_USB_DEVICE_Init+0x58>)
 80066f2:	480e      	ldr	r0, [pc, #56]	; (800672c <MX_USB_DEVICE_Init+0x54>)
 80066f4:	f7fe ff21 	bl	800553a <USBD_RegisterClass>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066fe:	f7fa f87b 	bl	80007f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006702:	490c      	ldr	r1, [pc, #48]	; (8006734 <MX_USB_DEVICE_Init+0x5c>)
 8006704:	4809      	ldr	r0, [pc, #36]	; (800672c <MX_USB_DEVICE_Init+0x54>)
 8006706:	f7fe fe51 	bl	80053ac <USBD_CDC_RegisterInterface>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006710:	f7fa f872 	bl	80007f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006714:	4805      	ldr	r0, [pc, #20]	; (800672c <MX_USB_DEVICE_Init+0x54>)
 8006716:	f7fe ff31 	bl	800557c <USBD_Start>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006720:	f7fa f86a 	bl	80007f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006724:	bf00      	nop
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20000138 	.word	0x20000138
 800672c:	20000270 	.word	0x20000270
 8006730:	20000018 	.word	0x20000018
 8006734:	20000124 	.word	0x20000124

08006738 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800673c:	2200      	movs	r2, #0
 800673e:	4905      	ldr	r1, [pc, #20]	; (8006754 <CDC_Init_FS+0x1c>)
 8006740:	4805      	ldr	r0, [pc, #20]	; (8006758 <CDC_Init_FS+0x20>)
 8006742:	f7fe fe48 	bl	80053d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006746:	4905      	ldr	r1, [pc, #20]	; (800675c <CDC_Init_FS+0x24>)
 8006748:	4803      	ldr	r0, [pc, #12]	; (8006758 <CDC_Init_FS+0x20>)
 800674a:	f7fe fe5b 	bl	8005404 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800674e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006750:	4618      	mov	r0, r3
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000d40 	.word	0x20000d40
 8006758:	20000270 	.word	0x20000270
 800675c:	20000540 	.word	0x20000540

08006760 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006764:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006766:	4618      	mov	r0, r3
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	6039      	str	r1, [r7, #0]
 800677a:	71fb      	strb	r3, [r7, #7]
 800677c:	4613      	mov	r3, r2
 800677e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	2b23      	cmp	r3, #35	; 0x23
 8006784:	d85c      	bhi.n	8006840 <CDC_Control_FS+0xd0>
 8006786:	a201      	add	r2, pc, #4	; (adr r2, 800678c <CDC_Control_FS+0x1c>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	08006841 	.word	0x08006841
 8006790:	08006841 	.word	0x08006841
 8006794:	08006841 	.word	0x08006841
 8006798:	08006841 	.word	0x08006841
 800679c:	08006841 	.word	0x08006841
 80067a0:	08006841 	.word	0x08006841
 80067a4:	08006841 	.word	0x08006841
 80067a8:	08006841 	.word	0x08006841
 80067ac:	08006841 	.word	0x08006841
 80067b0:	08006841 	.word	0x08006841
 80067b4:	08006841 	.word	0x08006841
 80067b8:	08006841 	.word	0x08006841
 80067bc:	08006841 	.word	0x08006841
 80067c0:	08006841 	.word	0x08006841
 80067c4:	08006841 	.word	0x08006841
 80067c8:	08006841 	.word	0x08006841
 80067cc:	08006841 	.word	0x08006841
 80067d0:	08006841 	.word	0x08006841
 80067d4:	08006841 	.word	0x08006841
 80067d8:	08006841 	.word	0x08006841
 80067dc:	08006841 	.word	0x08006841
 80067e0:	08006841 	.word	0x08006841
 80067e4:	08006841 	.word	0x08006841
 80067e8:	08006841 	.word	0x08006841
 80067ec:	08006841 	.word	0x08006841
 80067f0:	08006841 	.word	0x08006841
 80067f4:	08006841 	.word	0x08006841
 80067f8:	08006841 	.word	0x08006841
 80067fc:	08006841 	.word	0x08006841
 8006800:	08006841 	.word	0x08006841
 8006804:	08006841 	.word	0x08006841
 8006808:	08006841 	.word	0x08006841
 800680c:	0800681d 	.word	0x0800681d
 8006810:	0800682f 	.word	0x0800682f
 8006814:	08006841 	.word	0x08006841
 8006818:	08006841 	.word	0x08006841
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800681c:	4b0c      	ldr	r3, [pc, #48]	; (8006850 <CDC_Control_FS+0xe0>)
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	6810      	ldr	r0, [r2, #0]
 8006822:	6018      	str	r0, [r3, #0]
 8006824:	8891      	ldrh	r1, [r2, #4]
 8006826:	7992      	ldrb	r2, [r2, #6]
 8006828:	8099      	strh	r1, [r3, #4]
 800682a:	719a      	strb	r2, [r3, #6]
    break;
 800682c:	e009      	b.n	8006842 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	4a07      	ldr	r2, [pc, #28]	; (8006850 <CDC_Control_FS+0xe0>)
 8006832:	6810      	ldr	r0, [r2, #0]
 8006834:	6018      	str	r0, [r3, #0]
 8006836:	8891      	ldrh	r1, [r2, #4]
 8006838:	7992      	ldrb	r2, [r2, #6]
 800683a:	8099      	strh	r1, [r3, #4]
 800683c:	719a      	strb	r2, [r3, #6]
    break;
 800683e:	e000      	b.n	8006842 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006840:	bf00      	nop
  }

  return (USBD_OK);
 8006842:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	2000011c 	.word	0x2000011c

08006854 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	4805      	ldr	r0, [pc, #20]	; (8006878 <CDC_Receive_FS+0x24>)
 8006862:	f7fe fdcf 	bl	8005404 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006866:	4804      	ldr	r0, [pc, #16]	; (8006878 <CDC_Receive_FS+0x24>)
 8006868:	f7fe fe0a 	bl	8005480 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800686c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000270 	.word	0x20000270

0800687c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <CDC_Transmit_FS+0x44>)
 800688e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006892:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <CDC_Transmit_FS+0x24>
    return USBD_BUSY;
 800689c:	2301      	movs	r3, #1
 800689e:	e00b      	b.n	80068b8 <CDC_Transmit_FS+0x3c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80068a0:	887b      	ldrh	r3, [r7, #2]
 80068a2:	461a      	mov	r2, r3
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4806      	ldr	r0, [pc, #24]	; (80068c0 <CDC_Transmit_FS+0x44>)
 80068a8:	f7fe fd95 	bl	80053d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80068ac:	4804      	ldr	r0, [pc, #16]	; (80068c0 <CDC_Transmit_FS+0x44>)
 80068ae:	f7fe fdbc 	bl	800542a <USBD_CDC_TransmitPacket>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000270 	.word	0x20000270

080068c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80068d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2212      	movs	r2, #18
 80068f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068fa:	4b03      	ldr	r3, [pc, #12]	; (8006908 <USBD_FS_DeviceDescriptor+0x20>)
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	20000154 	.word	0x20000154

0800690c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	6039      	str	r1, [r7, #0]
 8006916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2204      	movs	r2, #4
 800691c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800691e:	4b03      	ldr	r3, [pc, #12]	; (800692c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	20000168 	.word	0x20000168

08006930 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d105      	bne.n	800694e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4907      	ldr	r1, [pc, #28]	; (8006964 <USBD_FS_ProductStrDescriptor+0x34>)
 8006946:	4808      	ldr	r0, [pc, #32]	; (8006968 <USBD_FS_ProductStrDescriptor+0x38>)
 8006948:	f7ff fde5 	bl	8006516 <USBD_GetString>
 800694c:	e004      	b.n	8006958 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4904      	ldr	r1, [pc, #16]	; (8006964 <USBD_FS_ProductStrDescriptor+0x34>)
 8006952:	4805      	ldr	r0, [pc, #20]	; (8006968 <USBD_FS_ProductStrDescriptor+0x38>)
 8006954:	f7ff fddf 	bl	8006516 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006958:	4b02      	ldr	r3, [pc, #8]	; (8006964 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20001540 	.word	0x20001540
 8006968:	08007314 	.word	0x08007314

0800696c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	6039      	str	r1, [r7, #0]
 8006976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	4904      	ldr	r1, [pc, #16]	; (800698c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800697c:	4804      	ldr	r0, [pc, #16]	; (8006990 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800697e:	f7ff fdca 	bl	8006516 <USBD_GetString>
  return USBD_StrDesc;
 8006982:	4b02      	ldr	r3, [pc, #8]	; (800698c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20001540 	.word	0x20001540
 8006990:	0800732c 	.word	0x0800732c

08006994 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	221a      	movs	r2, #26
 80069a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069a6:	f000 f843 	bl	8006a30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069aa:	4b02      	ldr	r3, [pc, #8]	; (80069b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	2000016c 	.word	0x2000016c

080069b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	6039      	str	r1, [r7, #0]
 80069c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d105      	bne.n	80069d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	4907      	ldr	r1, [pc, #28]	; (80069ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80069ce:	4808      	ldr	r0, [pc, #32]	; (80069f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069d0:	f7ff fda1 	bl	8006516 <USBD_GetString>
 80069d4:	e004      	b.n	80069e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	4904      	ldr	r1, [pc, #16]	; (80069ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80069da:	4805      	ldr	r0, [pc, #20]	; (80069f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069dc:	f7ff fd9b 	bl	8006516 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069e0:	4b02      	ldr	r3, [pc, #8]	; (80069ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20001540 	.word	0x20001540
 80069f0:	08007340 	.word	0x08007340

080069f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	4603      	mov	r3, r0
 80069fc:	6039      	str	r1, [r7, #0]
 80069fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d105      	bne.n	8006a12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4907      	ldr	r1, [pc, #28]	; (8006a28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a0a:	4808      	ldr	r0, [pc, #32]	; (8006a2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a0c:	f7ff fd83 	bl	8006516 <USBD_GetString>
 8006a10:	e004      	b.n	8006a1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	4904      	ldr	r1, [pc, #16]	; (8006a28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a16:	4805      	ldr	r0, [pc, #20]	; (8006a2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a18:	f7ff fd7d 	bl	8006516 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a1c:	4b02      	ldr	r3, [pc, #8]	; (8006a28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20001540 	.word	0x20001540
 8006a2c:	0800734c 	.word	0x0800734c

08006a30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a36:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <Get_SerialNum+0x44>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <Get_SerialNum+0x48>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a42:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <Get_SerialNum+0x4c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a56:	2208      	movs	r2, #8
 8006a58:	4909      	ldr	r1, [pc, #36]	; (8006a80 <Get_SerialNum+0x50>)
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f814 	bl	8006a88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a60:	2204      	movs	r2, #4
 8006a62:	4908      	ldr	r1, [pc, #32]	; (8006a84 <Get_SerialNum+0x54>)
 8006a64:	68b8      	ldr	r0, [r7, #8]
 8006a66:	f000 f80f 	bl	8006a88 <IntToUnicode>
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	1fff7a10 	.word	0x1fff7a10
 8006a78:	1fff7a14 	.word	0x1fff7a14
 8006a7c:	1fff7a18 	.word	0x1fff7a18
 8006a80:	2000016e 	.word	0x2000016e
 8006a84:	2000017e 	.word	0x2000017e

08006a88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	75fb      	strb	r3, [r7, #23]
 8006a9e:	e027      	b.n	8006af0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	0f1b      	lsrs	r3, r3, #28
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	d80b      	bhi.n	8006ac0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	0f1b      	lsrs	r3, r3, #28
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3230      	adds	r2, #48	; 0x30
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e00a      	b.n	8006ad6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	0f1b      	lsrs	r3, r3, #28
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	4619      	mov	r1, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	440b      	add	r3, r1
 8006ad0:	3237      	adds	r2, #55	; 0x37
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	3301      	adds	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
 8006af0:	7dfa      	ldrb	r2, [r7, #23]
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d3d3      	bcc.n	8006aa0 <IntToUnicode+0x18>
  }
}
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	; 0x28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b0c:	f107 0314 	add.w	r3, r7, #20
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b24:	d13a      	bne.n	8006b9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	6313      	str	r3, [r2, #48]	; 0x30
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b50:	2303      	movs	r3, #3
 8006b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b54:	230a      	movs	r3, #10
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b58:	f107 0314 	add.w	r3, r7, #20
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4812      	ldr	r0, [pc, #72]	; (8006ba8 <HAL_PCD_MspInit+0xa4>)
 8006b60:	f7fa f920 	bl	8000da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b64:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	4a0e      	ldr	r2, [pc, #56]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6e:	6353      	str	r3, [r2, #52]	; 0x34
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	4a0a      	ldr	r2, [pc, #40]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8006b80:	4b08      	ldr	r3, [pc, #32]	; (8006ba4 <HAL_PCD_MspInit+0xa0>)
 8006b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2100      	movs	r1, #0
 8006b90:	2043      	movs	r0, #67	; 0x43
 8006b92:	f7fa f8d0 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b96:	2043      	movs	r0, #67	; 0x43
 8006b98:	f7fa f8e9 	bl	8000d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3728      	adds	r7, #40	; 0x28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	40020000 	.word	0x40020000

08006bac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe fd25 	bl	8005612 <USBD_LL_SetupStage>
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f7fe fd5d 	bl	80056b8 <USBD_LL_DataOutStage>
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b082      	sub	sp, #8
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c18:	78fa      	ldrb	r2, [r7, #3]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	3348      	adds	r3, #72	; 0x48
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7fe fda6 	bl	800577e <USBD_LL_DataInStage>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe feaa 	bl	80059a2 <USBD_LL_SOF>
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d102      	bne.n	8006c70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	e008      	b.n	8006c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d102      	bne.n	8006c7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	e001      	b.n	8006c82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006c7e:	f7f9 fdbb 	bl	80007f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe fe4d 	bl	800592c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fe06 	bl	80058aa <USBD_LL_Reset>
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fe48 	bl	800594c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <HAL_PCD_SuspendCallback+0x48>)
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	4a03      	ldr	r2, [pc, #12]	; (8006cf0 <HAL_PCD_SuspendCallback+0x48>)
 8006ce2:	f043 0306 	orr.w	r3, r3, #6
 8006ce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	e000ed00 	.word	0xe000ed00

08006cf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fe37 	bl	8005976 <USBD_LL_Resume>
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	4611      	mov	r1, r2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fe62 	bl	80059f0 <USBD_LL_IsoOUTIncomplete>
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fe43 	bl	80059d6 <USBD_LL_IsoINIncomplete>
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fe4f 	bl	8005a0a <USBD_LL_DevConnected>
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fe4c 	bl	8005a20 <USBD_LL_DevDisconnected>
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d13c      	bne.n	8006e1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <USBD_LL_Init+0x94>)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006db0:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <USBD_LL_Init+0x94>)
 8006db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006db6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dba:	2204      	movs	r2, #4
 8006dbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006dbe:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006dc4:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006dca:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dcc:	2202      	movs	r2, #2
 8006dce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006dd0:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006dd6:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ddc:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <USBD_LL_Init+0x94>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006de8:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <USBD_LL_Init+0x94>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006dee:	480d      	ldr	r0, [pc, #52]	; (8006e24 <USBD_LL_Init+0x94>)
 8006df0:	f7fa ff88 	bl	8001d04 <HAL_PCD_Init>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006dfa:	f7f9 fcfd 	bl	80007f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006dfe:	2180      	movs	r1, #128	; 0x80
 8006e00:	4808      	ldr	r0, [pc, #32]	; (8006e24 <USBD_LL_Init+0x94>)
 8006e02:	f7fc f8e6 	bl	8002fd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e06:	2240      	movs	r2, #64	; 0x40
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4806      	ldr	r0, [pc, #24]	; (8006e24 <USBD_LL_Init+0x94>)
 8006e0c:	f7fc f89a 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e10:	2280      	movs	r2, #128	; 0x80
 8006e12:	2101      	movs	r1, #1
 8006e14:	4803      	ldr	r0, [pc, #12]	; (8006e24 <USBD_LL_Init+0x94>)
 8006e16:	f7fc f895 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20001740 	.word	0x20001740

08006e28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fb f87d 	bl	8001f3e <HAL_PCD_Start>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f92a 	bl	80070a4 <USBD_Get_USB_Status>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	4608      	mov	r0, r1
 8006e68:	4611      	mov	r1, r2
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	70fb      	strb	r3, [r7, #3]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70bb      	strb	r3, [r7, #2]
 8006e74:	4613      	mov	r3, r2
 8006e76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e86:	78bb      	ldrb	r3, [r7, #2]
 8006e88:	883a      	ldrh	r2, [r7, #0]
 8006e8a:	78f9      	ldrb	r1, [r7, #3]
 8006e8c:	f7fb fc61 	bl	8002752 <HAL_PCD_EP_Open>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f904 	bl	80070a4 <USBD_Get_USB_Status>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fb fcaa 	bl	8002822 <HAL_PCD_EP_Close>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 f8e5 	bl	80070a4 <USBD_Get_USB_Status>
 8006eda:	4603      	mov	r3, r0
 8006edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fb fd82 	bl	8002a10 <HAL_PCD_EP_SetStall>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f8c6 	bl	80070a4 <USBD_Get_USB_Status>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fb fdc7 	bl	8002ad8 <HAL_PCD_EP_ClrStall>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 f8a7 	bl	80070a4 <USBD_Get_USB_Status>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	da0b      	bge.n	8006f98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	1a9b      	subs	r3, r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	333e      	adds	r3, #62	; 0x3e
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	e00b      	b.n	8006fb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006fae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fb fb94 	bl	8002708 <HAL_PCD_SetAddress>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f85c 	bl	80070a4 <USBD_Get_USB_Status>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	460b      	mov	r3, r1
 8007008:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007018:	7af9      	ldrb	r1, [r7, #11]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	f7fb fcad 	bl	800297c <HAL_PCD_EP_Transmit>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f83b 	bl	80070a4 <USBD_Get_USB_Status>
 800702e:	4603      	mov	r3, r0
 8007030:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007032:	7dbb      	ldrb	r3, [r7, #22]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	460b      	mov	r3, r1
 800704a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800705a:	7af9      	ldrb	r1, [r7, #11]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	f7fb fc29 	bl	80028b6 <HAL_PCD_EP_Receive>
 8007064:	4603      	mov	r3, r0
 8007066:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f81a 	bl	80070a4 <USBD_Get_USB_Status>
 8007070:	4603      	mov	r3, r0
 8007072:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007074:	7dbb      	ldrb	r3, [r7, #22]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	460b      	mov	r3, r1
 8007088:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f7fb fc59 	bl	800294c <HAL_PCD_EP_GetRxCount>
 800709a:	4603      	mov	r3, r0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d817      	bhi.n	80070e8 <USBD_Get_USB_Status+0x44>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <USBD_Get_USB_Status+0x1c>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	080070d1 	.word	0x080070d1
 80070c4:	080070d7 	.word	0x080070d7
 80070c8:	080070dd 	.word	0x080070dd
 80070cc:	080070e3 	.word	0x080070e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
    break;
 80070d4:	e00b      	b.n	80070ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070d6:	2303      	movs	r3, #3
 80070d8:	73fb      	strb	r3, [r7, #15]
    break;
 80070da:	e008      	b.n	80070ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
    break;
 80070e0:	e005      	b.n	80070ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070e2:	2303      	movs	r3, #3
 80070e4:	73fb      	strb	r3, [r7, #15]
    break;
 80070e6:	e002      	b.n	80070ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80070e8:	2303      	movs	r3, #3
 80070ea:	73fb      	strb	r3, [r7, #15]
    break;
 80070ec:	bf00      	nop
  }
  return usb_status;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <__errno>:
 80070fc:	4b01      	ldr	r3, [pc, #4]	; (8007104 <__errno+0x8>)
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000188 	.word	0x20000188

08007108 <__libc_init_array>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4e0d      	ldr	r6, [pc, #52]	; (8007140 <__libc_init_array+0x38>)
 800710c:	4c0d      	ldr	r4, [pc, #52]	; (8007144 <__libc_init_array+0x3c>)
 800710e:	1ba4      	subs	r4, r4, r6
 8007110:	10a4      	asrs	r4, r4, #2
 8007112:	2500      	movs	r5, #0
 8007114:	42a5      	cmp	r5, r4
 8007116:	d109      	bne.n	800712c <__libc_init_array+0x24>
 8007118:	4e0b      	ldr	r6, [pc, #44]	; (8007148 <__libc_init_array+0x40>)
 800711a:	4c0c      	ldr	r4, [pc, #48]	; (800714c <__libc_init_array+0x44>)
 800711c:	f000 f8ea 	bl	80072f4 <_init>
 8007120:	1ba4      	subs	r4, r4, r6
 8007122:	10a4      	asrs	r4, r4, #2
 8007124:	2500      	movs	r5, #0
 8007126:	42a5      	cmp	r5, r4
 8007128:	d105      	bne.n	8007136 <__libc_init_array+0x2e>
 800712a:	bd70      	pop	{r4, r5, r6, pc}
 800712c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007130:	4798      	blx	r3
 8007132:	3501      	adds	r5, #1
 8007134:	e7ee      	b.n	8007114 <__libc_init_array+0xc>
 8007136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800713a:	4798      	blx	r3
 800713c:	3501      	adds	r5, #1
 800713e:	e7f2      	b.n	8007126 <__libc_init_array+0x1e>
 8007140:	0800737c 	.word	0x0800737c
 8007144:	0800737c 	.word	0x0800737c
 8007148:	0800737c 	.word	0x0800737c
 800714c:	08007380 	.word	0x08007380

08007150 <malloc>:
 8007150:	4b02      	ldr	r3, [pc, #8]	; (800715c <malloc+0xc>)
 8007152:	4601      	mov	r1, r0
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f000 b861 	b.w	800721c <_malloc_r>
 800715a:	bf00      	nop
 800715c:	20000188 	.word	0x20000188

08007160 <free>:
 8007160:	4b02      	ldr	r3, [pc, #8]	; (800716c <free+0xc>)
 8007162:	4601      	mov	r1, r0
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f000 b80b 	b.w	8007180 <_free_r>
 800716a:	bf00      	nop
 800716c:	20000188 	.word	0x20000188

08007170 <memset>:
 8007170:	4402      	add	r2, r0
 8007172:	4603      	mov	r3, r0
 8007174:	4293      	cmp	r3, r2
 8007176:	d100      	bne.n	800717a <memset+0xa>
 8007178:	4770      	bx	lr
 800717a:	f803 1b01 	strb.w	r1, [r3], #1
 800717e:	e7f9      	b.n	8007174 <memset+0x4>

08007180 <_free_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4605      	mov	r5, r0
 8007184:	2900      	cmp	r1, #0
 8007186:	d045      	beq.n	8007214 <_free_r+0x94>
 8007188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718c:	1f0c      	subs	r4, r1, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	18e4      	addlt	r4, r4, r3
 8007194:	f000 f8ac 	bl	80072f0 <__malloc_lock>
 8007198:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <_free_r+0x98>)
 800719a:	6813      	ldr	r3, [r2, #0]
 800719c:	4610      	mov	r0, r2
 800719e:	b933      	cbnz	r3, 80071ae <_free_r+0x2e>
 80071a0:	6063      	str	r3, [r4, #4]
 80071a2:	6014      	str	r4, [r2, #0]
 80071a4:	4628      	mov	r0, r5
 80071a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071aa:	f000 b8a2 	b.w	80072f2 <__malloc_unlock>
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	d90c      	bls.n	80071cc <_free_r+0x4c>
 80071b2:	6821      	ldr	r1, [r4, #0]
 80071b4:	1862      	adds	r2, r4, r1
 80071b6:	4293      	cmp	r3, r2
 80071b8:	bf04      	itt	eq
 80071ba:	681a      	ldreq	r2, [r3, #0]
 80071bc:	685b      	ldreq	r3, [r3, #4]
 80071be:	6063      	str	r3, [r4, #4]
 80071c0:	bf04      	itt	eq
 80071c2:	1852      	addeq	r2, r2, r1
 80071c4:	6022      	streq	r2, [r4, #0]
 80071c6:	6004      	str	r4, [r0, #0]
 80071c8:	e7ec      	b.n	80071a4 <_free_r+0x24>
 80071ca:	4613      	mov	r3, r2
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	b10a      	cbz	r2, 80071d4 <_free_r+0x54>
 80071d0:	42a2      	cmp	r2, r4
 80071d2:	d9fa      	bls.n	80071ca <_free_r+0x4a>
 80071d4:	6819      	ldr	r1, [r3, #0]
 80071d6:	1858      	adds	r0, r3, r1
 80071d8:	42a0      	cmp	r0, r4
 80071da:	d10b      	bne.n	80071f4 <_free_r+0x74>
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	4401      	add	r1, r0
 80071e0:	1858      	adds	r0, r3, r1
 80071e2:	4282      	cmp	r2, r0
 80071e4:	6019      	str	r1, [r3, #0]
 80071e6:	d1dd      	bne.n	80071a4 <_free_r+0x24>
 80071e8:	6810      	ldr	r0, [r2, #0]
 80071ea:	6852      	ldr	r2, [r2, #4]
 80071ec:	605a      	str	r2, [r3, #4]
 80071ee:	4401      	add	r1, r0
 80071f0:	6019      	str	r1, [r3, #0]
 80071f2:	e7d7      	b.n	80071a4 <_free_r+0x24>
 80071f4:	d902      	bls.n	80071fc <_free_r+0x7c>
 80071f6:	230c      	movs	r3, #12
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	e7d3      	b.n	80071a4 <_free_r+0x24>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	1821      	adds	r1, r4, r0
 8007200:	428a      	cmp	r2, r1
 8007202:	bf04      	itt	eq
 8007204:	6811      	ldreq	r1, [r2, #0]
 8007206:	6852      	ldreq	r2, [r2, #4]
 8007208:	6062      	str	r2, [r4, #4]
 800720a:	bf04      	itt	eq
 800720c:	1809      	addeq	r1, r1, r0
 800720e:	6021      	streq	r1, [r4, #0]
 8007210:	605c      	str	r4, [r3, #4]
 8007212:	e7c7      	b.n	80071a4 <_free_r+0x24>
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	bf00      	nop
 8007218:	20000210 	.word	0x20000210

0800721c <_malloc_r>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	1ccd      	adds	r5, r1, #3
 8007220:	f025 0503 	bic.w	r5, r5, #3
 8007224:	3508      	adds	r5, #8
 8007226:	2d0c      	cmp	r5, #12
 8007228:	bf38      	it	cc
 800722a:	250c      	movcc	r5, #12
 800722c:	2d00      	cmp	r5, #0
 800722e:	4606      	mov	r6, r0
 8007230:	db01      	blt.n	8007236 <_malloc_r+0x1a>
 8007232:	42a9      	cmp	r1, r5
 8007234:	d903      	bls.n	800723e <_malloc_r+0x22>
 8007236:	230c      	movs	r3, #12
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	2000      	movs	r0, #0
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	f000 f857 	bl	80072f0 <__malloc_lock>
 8007242:	4a21      	ldr	r2, [pc, #132]	; (80072c8 <_malloc_r+0xac>)
 8007244:	6814      	ldr	r4, [r2, #0]
 8007246:	4621      	mov	r1, r4
 8007248:	b991      	cbnz	r1, 8007270 <_malloc_r+0x54>
 800724a:	4c20      	ldr	r4, [pc, #128]	; (80072cc <_malloc_r+0xb0>)
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	b91b      	cbnz	r3, 8007258 <_malloc_r+0x3c>
 8007250:	4630      	mov	r0, r6
 8007252:	f000 f83d 	bl	80072d0 <_sbrk_r>
 8007256:	6020      	str	r0, [r4, #0]
 8007258:	4629      	mov	r1, r5
 800725a:	4630      	mov	r0, r6
 800725c:	f000 f838 	bl	80072d0 <_sbrk_r>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d124      	bne.n	80072ae <_malloc_r+0x92>
 8007264:	230c      	movs	r3, #12
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	4630      	mov	r0, r6
 800726a:	f000 f842 	bl	80072f2 <__malloc_unlock>
 800726e:	e7e4      	b.n	800723a <_malloc_r+0x1e>
 8007270:	680b      	ldr	r3, [r1, #0]
 8007272:	1b5b      	subs	r3, r3, r5
 8007274:	d418      	bmi.n	80072a8 <_malloc_r+0x8c>
 8007276:	2b0b      	cmp	r3, #11
 8007278:	d90f      	bls.n	800729a <_malloc_r+0x7e>
 800727a:	600b      	str	r3, [r1, #0]
 800727c:	50cd      	str	r5, [r1, r3]
 800727e:	18cc      	adds	r4, r1, r3
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f836 	bl	80072f2 <__malloc_unlock>
 8007286:	f104 000b 	add.w	r0, r4, #11
 800728a:	1d23      	adds	r3, r4, #4
 800728c:	f020 0007 	bic.w	r0, r0, #7
 8007290:	1ac3      	subs	r3, r0, r3
 8007292:	d0d3      	beq.n	800723c <_malloc_r+0x20>
 8007294:	425a      	negs	r2, r3
 8007296:	50e2      	str	r2, [r4, r3]
 8007298:	e7d0      	b.n	800723c <_malloc_r+0x20>
 800729a:	428c      	cmp	r4, r1
 800729c:	684b      	ldr	r3, [r1, #4]
 800729e:	bf16      	itet	ne
 80072a0:	6063      	strne	r3, [r4, #4]
 80072a2:	6013      	streq	r3, [r2, #0]
 80072a4:	460c      	movne	r4, r1
 80072a6:	e7eb      	b.n	8007280 <_malloc_r+0x64>
 80072a8:	460c      	mov	r4, r1
 80072aa:	6849      	ldr	r1, [r1, #4]
 80072ac:	e7cc      	b.n	8007248 <_malloc_r+0x2c>
 80072ae:	1cc4      	adds	r4, r0, #3
 80072b0:	f024 0403 	bic.w	r4, r4, #3
 80072b4:	42a0      	cmp	r0, r4
 80072b6:	d005      	beq.n	80072c4 <_malloc_r+0xa8>
 80072b8:	1a21      	subs	r1, r4, r0
 80072ba:	4630      	mov	r0, r6
 80072bc:	f000 f808 	bl	80072d0 <_sbrk_r>
 80072c0:	3001      	adds	r0, #1
 80072c2:	d0cf      	beq.n	8007264 <_malloc_r+0x48>
 80072c4:	6025      	str	r5, [r4, #0]
 80072c6:	e7db      	b.n	8007280 <_malloc_r+0x64>
 80072c8:	20000210 	.word	0x20000210
 80072cc:	20000214 	.word	0x20000214

080072d0 <_sbrk_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4c06      	ldr	r4, [pc, #24]	; (80072ec <_sbrk_r+0x1c>)
 80072d4:	2300      	movs	r3, #0
 80072d6:	4605      	mov	r5, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	f7f9 fb46 	bl	800096c <_sbrk>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_sbrk_r+0x1a>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_sbrk_r+0x1a>
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	20001b48 	.word	0x20001b48

080072f0 <__malloc_lock>:
 80072f0:	4770      	bx	lr

080072f2 <__malloc_unlock>:
 80072f2:	4770      	bx	lr

080072f4 <_init>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	bf00      	nop
 80072f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fa:	bc08      	pop	{r3}
 80072fc:	469e      	mov	lr, r3
 80072fe:	4770      	bx	lr

08007300 <_fini>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	bf00      	nop
 8007304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007306:	bc08      	pop	{r3}
 8007308:	469e      	mov	lr, r3
 800730a:	4770      	bx	lr


fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008000  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08008190  08008190  00018190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008420  08008420  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008420  08008420  00018420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008428  08008428  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  200001dc  0800860c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20000ab8  0800860c  00020ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016784  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed4  00000000  00000000  00036990  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00039868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  0003a898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004f9e  00000000  00000000  0003b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e84f  00000000  00000000  0004070e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c266d  00000000  00000000  0004ef5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001115ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d00  00000000  00000000  00111648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008178 	.word	0x08008178

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008178 	.word	0x08008178

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
volatile uint16_t gu16_TIM3_OVC = 0;
volatile uint32_t gu32_Freq = 0;
TIM_HandleTypeDef htim3;

int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    HAL_Init();
 8000eac:	f000 fb3a 	bl	8001524 <HAL_Init>
    SystemClock_Config();
 8000eb0:	f000 f87c 	bl	8000fac <SystemClock_Config>
    MX_GPIO_Init();
 8000eb4:	f000 f942 	bl	800113c <MX_GPIO_Init>
    MX_TIM2_Init();
 8000eb8:	f000 f8e0 	bl	800107c <MX_TIM2_Init>
   // MX_USART1_UART_Init();
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <main+0x20>)
 8000ec0:	f002 fa18 	bl	80032f4 <HAL_TIM_IC_Start_IT>
    while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <main+0x1c>
 8000ec6:	bf00      	nop
 8000ec8:	20000298 	.word	0x20000298

08000ecc <HAL_TIM_IC_CaptureCallback>:
    {
    }
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	if(gu8_State == IDLE)
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10a      	bne.n	8000ef4 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		gu32_T1 = TIM3->CCR2;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee2:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ee4:	6013      	str	r3, [r2, #0]
		gu16_TIM3_OVC = 0;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	801a      	strh	r2, [r3, #0]
		gu8_State = DONE;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
		  sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
		  CDC_Transmit_FS((uint8_t*)gu8_MSG, sizeof(gu8_MSG));
		}
		gu8_State = IDLE;
	}
}
 8000ef2:	e02e      	b.n	8000f52 <HAL_TIM_IC_CaptureCallback+0x86>
	else if(gu8_State == DONE)
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d129      	bne.n	8000f52 <HAL_TIM_IC_CaptureCallback+0x86>
		gu32_T2 = TIM3->CCR2;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f02:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000f04:	6013      	str	r3, [r2, #0]
		gu32_Ticks = (gu32_T2 + (gu16_TIM3_OVC * 65536)) - gu32_T1;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	041b      	lsls	r3, r3, #16
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	441a      	add	r2, r3
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f1e:	6013      	str	r3, [r2, #0]
		gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f2c:	6013      	str	r3, [r2, #0]
		if(gu32_Freq != 0)
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00a      	beq.n	8000f4c <HAL_TIM_IC_CaptureCallback+0x80>
		  sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	490f      	ldr	r1, [pc, #60]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f3e:	4810      	ldr	r0, [pc, #64]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f40:	f005 fdfa 	bl	8006b38 <siprintf>
		  CDC_Transmit_FS((uint8_t*)gu8_MSG, sizeof(gu8_MSG));
 8000f44:	2123      	movs	r1, #35	; 0x23
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f48:	f004 fe72 	bl	8005c30 <CDC_Transmit_FS>
		gu8_State = IDLE;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001f8 	.word	0x200001f8
 8000f60:	40000400 	.word	0x40000400
 8000f64:	20000220 	.word	0x20000220
 8000f68:	2000022c 	.word	0x2000022c
 8000f6c:	20000224 	.word	0x20000224
 8000f70:	20000228 	.word	0x20000228
 8000f74:	044aa200 	.word	0x044aa200
 8000f78:	20000230 	.word	0x20000230
 8000f7c:	08008190 	.word	0x08008190
 8000f80:	200001fc 	.word	0x200001fc

08000f84 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	gu16_TIM3_OVC++;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f98:	801a      	strh	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2000022c 	.word	0x2000022c

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2230      	movs	r2, #48	; 0x30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 f8a0 	bl	8006100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <SystemClock_Config+0xc8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <SystemClock_Config+0xc8>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <SystemClock_Config+0xc8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <SystemClock_Config+0xcc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <SystemClock_Config+0xcc>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <SystemClock_Config+0xcc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800101c:	2310      	movs	r3, #16
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001020:	23c0      	movs	r3, #192	; 0xc0
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001024:	2302      	movs	r3, #2
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fcfb 	bl	8002a2c <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800103c:	f000 f8dc 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f001 ff56 	bl	8002f0c <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001066:	f000 f8c7 	bl	80011f8 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	; 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_TIM2_Init+0xbc>)
 800109a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <MX_TIM2_Init+0xbc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_TIM2_Init+0xbc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_TIM2_Init+0xbc>)
 80010ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_TIM2_Init+0xbc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_TIM2_Init+0xbc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010c0:	481d      	ldr	r0, [pc, #116]	; (8001138 <MX_TIM2_Init+0xbc>)
 80010c2:	f002 f8eb 	bl	800329c <HAL_TIM_IC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010cc:	f000 f894 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4816      	ldr	r0, [pc, #88]	; (8001138 <MX_TIM2_Init+0xbc>)
 80010e0:	f002 fd22 	bl	8003b28 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010ea:	f000 f885 	bl	80011f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f2:	2301      	movs	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	2204      	movs	r2, #4
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_TIM2_Init+0xbc>)
 8001106:	f002 fa65 	bl	80035d4 <HAL_TIM_IC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001110:	f000 f872 	bl	80011f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001114:	2302      	movs	r3, #2
 8001116:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	2208      	movs	r2, #8
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_TIM2_Init+0xbc>)
 8001120:	f002 fa58 	bl	80035d4 <HAL_TIM_IC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800112a:	f000 f865 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000358 	.word	0x20000358

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_GPIO_Init+0xb4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <MX_GPIO_Init+0xb4>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_GPIO_Init+0xb4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_GPIO_Init+0xb4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <MX_GPIO_Init+0xb4>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_GPIO_Init+0xb4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_GPIO_Init+0xb4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <MX_GPIO_Init+0xb4>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_GPIO_Init+0xb4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_GPIO_Init+0xb4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <MX_GPIO_Init+0xb4>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_GPIO_Init+0xb4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	21c0      	movs	r1, #192	; 0xc0
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <MX_GPIO_Init+0xb8>)
 80011c8:	f000 fc9e 	bl	8001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011cc:	23c0      	movs	r3, #192	; 0xc0
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_GPIO_Init+0xb8>)
 80011e4:	f000 faf6 	bl	80017d4 <HAL_GPIO_Init>

}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020800 	.word	0x40020800

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <Error_Handler+0x24>)
 8001204:	f000 fc80 	bl	8001b08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <Error_Handler+0x24>)
 800120e:	f000 fc7b 	bl	8001b08 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8001212:	2106      	movs	r1, #6
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <Error_Handler+0x28>)
 8001216:	f004 fd0b 	bl	8005c30 <CDC_Transmit_FS>
  while (1)
 800121a:	e7fe      	b.n	800121a <Error_Handler+0x22>
 800121c:	40020800 	.word	0x40020800
 8001220:	080081a8 	.word	0x080081a8

08001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_MspInit+0x4c>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_MspInit+0x4c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_MspInit+0x4c>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_MspInit+0x4c>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001294:	d12c      	bne.n	80012f0 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a3e      	ldr	r2, [pc, #248]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a37      	ldr	r2, [pc, #220]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b35      	ldr	r3, [pc, #212]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012ce:	2306      	movs	r3, #6
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012de:	2301      	movs	r3, #1
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	482c      	ldr	r0, [pc, #176]	; (800139c <HAL_TIM_IC_MspInit+0x128>)
 80012ea:	f000 fa73 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012ee:	e04e      	b.n	800138e <HAL_TIM_IC_MspInit+0x11a>
  else if(htim_ic->Instance==TIM3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2a      	ldr	r2, [pc, #168]	; (80013a0 <HAL_TIM_IC_MspInit+0x12c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d149      	bne.n	800138e <HAL_TIM_IC_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a25      	ldr	r2, [pc, #148]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_TIM_IC_MspInit+0x124>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800135e:	2302      	movs	r3, #2
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_TIM_IC_MspInit+0x128>)
 800136a:	f000 fa33 	bl	80017d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800137e:	2302      	movs	r3, #2
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <HAL_TIM_IC_MspInit+0x130>)
 800138a:	f000 fa23 	bl	80017d4 <HAL_GPIO_Init>
}
 800138e:	bf00      	nop
 8001390:	3730      	adds	r7, #48	; 0x30
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40020400 	.word	0x40020400

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f8e8 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM6_DAC_IRQHandler+0x10>)
 8001402:	f001 ffdf 	bl	80033c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002d8 	.word	0x200002d8

08001410 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM7_IRQHandler+0x10>)
 8001416:	f001 ffd5 	bl	80033c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000398 	.word	0x20000398

08001424 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <OTG_FS_IRQHandler+0x10>)
 800142a:	f000 fb86 	bl	8001b3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200006ac 	.word	0x200006ac

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f004 fe18 	bl	800609c <__errno>
 800146c:	4602      	mov	r2, r0
 800146e:	230c      	movs	r3, #12
 8001470:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20020000 	.word	0x20020000
 8001498:	00000400 	.word	0x00000400
 800149c:	20000234 	.word	0x20000234
 80014a0:	20000ab8 	.word	0x20000ab8

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <SystemInit+0x28>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <SystemInit+0x28>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SystemInit+0x28>)
 80014ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014be:	609a      	str	r2, [r3, #8]
#endif
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014d6:	e003      	b.n	80014e0 <LoopCopyDataInit>

080014d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014de:	3104      	adds	r1, #4

080014e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e8:	d3f6      	bcc.n	80014d8 <CopyDataInit>
  ldr  r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014ec:	e002      	b.n	80014f4 <LoopFillZerobss>

080014ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014f0:	f842 3b04 	str.w	r3, [r2], #4

080014f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f8:	d3f9      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014fa:	f7ff ffd3 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f004 fdd3 	bl	80060a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff fcd1 	bl	8000ea8 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001508:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800150c:	08008430 	.word	0x08008430
  ldr  r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001514:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001518:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800151c:	20000ab8 	.word	0x20000ab8

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_Init+0x40>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_Init+0x40>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_Init+0x40>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f90d 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	2000      	movs	r0, #0
 8001554:	f000 f808 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fe64 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x54>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x58>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f917 	bl	80017ba <HAL_SYSTICK_Config>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00e      	b.n	80015b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d80a      	bhi.n	80015b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	2200      	movs	r2, #0
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f000 f8ed 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_InitTick+0x5c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008
 80015ec:	200003d8 	.word	0x200003d8

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200003d8 	.word	0x200003d8

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff47 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff5c 	bl	8001650 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffb0 	bl	8001728 <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e16b      	b.n	8001ac8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 815a 	bne.w	8001ac2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d00b      	beq.n	800182e <HAL_GPIO_Init+0x5a>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001822:	2b11      	cmp	r3, #17
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b12      	cmp	r3, #18
 800182c:	d130      	bne.n	8001890 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 0201 	and.w	r2, r3, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0xfc>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b12      	cmp	r3, #18
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80b4 	beq.w	8001ac2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <HAL_GPIO_Init+0x308>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a5e      	ldr	r2, [pc, #376]	; (8001adc <HAL_GPIO_Init+0x308>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <HAL_GPIO_Init+0x308>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a5a      	ldr	r2, [pc, #360]	; (8001ae0 <HAL_GPIO_Init+0x30c>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a51      	ldr	r2, [pc, #324]	; (8001ae4 <HAL_GPIO_Init+0x310>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d02b      	beq.n	80019fa <HAL_GPIO_Init+0x226>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a50      	ldr	r2, [pc, #320]	; (8001ae8 <HAL_GPIO_Init+0x314>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d025      	beq.n	80019f6 <HAL_GPIO_Init+0x222>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4f      	ldr	r2, [pc, #316]	; (8001aec <HAL_GPIO_Init+0x318>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01f      	beq.n	80019f2 <HAL_GPIO_Init+0x21e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_GPIO_Init+0x31c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x21a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <HAL_GPIO_Init+0x320>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x216>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_GPIO_Init+0x324>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x212>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_GPIO_Init+0x328>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x20e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x32c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x20a>
 80019da:	2307      	movs	r3, #7
 80019dc:	e00e      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019de:	2308      	movs	r3, #8
 80019e0:	e00c      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019e2:	2306      	movs	r3, #6
 80019e4:	e00a      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019e6:	2305      	movs	r3, #5
 80019e8:	e008      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019ee:	2303      	movs	r3, #3
 80019f0:	e004      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e002      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019fa:	2300      	movs	r3, #0
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	f002 0203 	and.w	r2, r2, #3
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	4093      	lsls	r3, r2
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a0c:	4934      	ldr	r1, [pc, #208]	; (8001ae0 <HAL_GPIO_Init+0x30c>)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a3e:	4a31      	ldr	r2, [pc, #196]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a44:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a68:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a92:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001abc:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b0f      	cmp	r3, #15
 8001acc:	f67f ae90 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3724      	adds	r7, #36	; 0x24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40021400 	.word	0x40021400
 8001afc:	40021800 	.word	0x40021800
 8001b00:	40021c00 	.word	0x40021c00
 8001b04:	40013c00 	.word	0x40013c00

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b24:	e003      	b.n	8001b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	619a      	str	r2, [r3, #24]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b3a:	b590      	push	{r4, r7, lr}
 8001b3c:	b08d      	sub	sp, #52	; 0x34
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 ff6f 	bl	8004a34 <USB_GetMode>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 839d 	bne.w	8002298 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fed3 	bl	800490e <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8393 	beq.w	8002296 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 feca 	bl	800490e <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d107      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f002 0202 	and.w	r2, r2, #2
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 feb8 	bl	800490e <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d161      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0210 	bic.w	r2, r2, #16
 8001bb6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f003 020f 	and.w	r2, r3, #15
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	0c5b      	lsrs	r3, r3, #17
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d124      	bne.n	8001c2e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d035      	beq.n	8001c5c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	6a38      	ldr	r0, [r7, #32]
 8001c04:	f002 fd60 	bl	80046c8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c14:	441a      	add	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c26:	441a      	add	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	619a      	str	r2, [r3, #24]
 8001c2c:	e016      	b.n	8001c5c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	0c5b      	lsrs	r3, r3, #17
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d110      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c40:	2208      	movs	r2, #8
 8001c42:	4619      	mov	r1, r3
 8001c44:	6a38      	ldr	r0, [r7, #32]
 8001c46:	f002 fd3f 	bl	80046c8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c56:	441a      	add	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0210 	orr.w	r2, r2, #16
 8001c6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fe4c 	bl	800490e <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c80:	d16e      	bne.n	8001d60 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fe52 	bl	8004934 <USB_ReadDevAllOutEpInterrupt>
 8001c90:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c92:	e062      	b.n	8001d5a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d057      	beq.n	8001d4e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 fe77 	bl	800499c <USB_ReadDevOutEPInterrupt>
 8001cae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2301      	movs	r3, #1
 8001cca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fd4e 	bl	8002770 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cea:	461a      	mov	r2, r3
 8001cec:	2308      	movs	r3, #8
 8001cee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fe48 	bl	8002988 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2310      	movs	r3, #16
 8001d12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d46:	461a      	mov	r2, r3
 8001d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	3301      	adds	r3, #1
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d199      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fdd2 	bl	800490e <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d74:	f040 80c0 	bne.w	8001ef8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 fdf3 	bl	8004968 <USB_ReadDevAllInEpInterrupt>
 8001d82:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d88:	e0b2      	b.n	8001ef0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a7 	beq.w	8001ee4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fe19 	bl	80049d8 <USB_ReadDevInEPInterrupt>
 8001da6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d057      	beq.n	8001e62 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	2201      	movs	r2, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69f9      	ldr	r1, [r7, #28]
 8001dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001de2:	461a      	mov	r2, r3
 8001de4:	2301      	movs	r3, #1
 8001de6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d132      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3348      	adds	r3, #72	; 0x48
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4403      	add	r3, r0
 8001e10:	3344      	adds	r3, #68	; 0x44
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4419      	add	r1, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4403      	add	r3, r0
 8001e24:	3348      	adds	r3, #72	; 0x48
 8001e26:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d113      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x31c>
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3350      	adds	r3, #80	; 0x50
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d108      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2101      	movs	r1, #1
 8001e52:	f002 fe21 	bl	8004a98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f003 ff3a 	bl	8005cd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e94:	461a      	mov	r2, r3
 8001e96:	2310      	movs	r3, #16
 8001e98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2302      	movs	r3, #2
 8001ed0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fbb9 	bl	8002656 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f47f af49 	bne.w	8001d8a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fd06 	bl	800490e <USB_ReadInterrupts>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f0c:	d122      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d108      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f34:	2100      	movs	r1, #0
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fd6c 	bl	8002a14 <HAL_PCDEx_LPM_Callback>
 8001f3c:	e002      	b.n	8001f44 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f003 ff40 	bl	8005dc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fcd8 	bl	800490e <USB_ReadInterrupts>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f68:	d112      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f003 fefc 	bl	8005d78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f8e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 fcba 	bl	800490e <USB_ReadInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa4:	f040 80c7 	bne.w	8002136 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 fee2 	bl	8003d8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	e056      	b.n	800207c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fe0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff2:	0151      	lsls	r1, r2, #5
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	440a      	add	r2, r1
 8001ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002000:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002012:	0151      	lsls	r1, r2, #5
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	440a      	add	r2, r1
 8002018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800201c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002020:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202e:	461a      	mov	r2, r3
 8002030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002034:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002046:	0151      	lsls	r1, r2, #5
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	440a      	add	r2, r1
 800204c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002054:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002066:	0151      	lsls	r1, r2, #5
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	440a      	add	r2, r1
 800206c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002070:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002074:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	3301      	adds	r3, #1
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002082:	429a      	cmp	r2, r3
 8002084:	d3a3      	bcc.n	8001fce <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002094:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002098:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b2:	f043 030b 	orr.w	r3, r3, #11
 80020b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c8:	f043 030b 	orr.w	r3, r3, #11
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	e015      	b.n	80020fc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f6:	f043 030b 	orr.w	r3, r3, #11
 80020fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800210a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800210e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002120:	461a      	mov	r2, r3
 8002122:	f002 fcb9 	bl	8004a98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f002 fbe7 	bl	800490e <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800214a:	d124      	bne.n	8002196 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fc7d 	bl	8004a50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f001 fe3c 	bl	8003dd8 <USB_GetDevSpeed>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681c      	ldr	r4, [r3, #0]
 800216c:	f001 f88a 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 8002170:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4620      	mov	r0, r4
 800217c:	f001 fd64 	bl	8003c48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f003 fdd0 	bl	8005d26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002194:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f002 fbb7 	bl	800490e <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d10a      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f003 fdad 	bl	8005d0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f002 0208 	and.w	r2, r2, #8
 80021be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fba2 	bl	800490e <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021d4:	d10f      	bne.n	80021f6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f003 fe0f 	bl	8005e04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 fb87 	bl	800490e <USB_ReadInterrupts>
 8002200:	4603      	mov	r3, r0
 8002202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800220a:	d10f      	bne.n	800222c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f003 fde2 	bl	8005de0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800222a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fb6c 	bl	800490e <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800223c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002240:	d10a      	bne.n	8002258 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f003 fdf0 	bl	8005e28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fb56 	bl	800490e <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d115      	bne.n	8002298 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f003 fde0 	bl	8005e44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	e000      	b.n	8002298 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002296:	bf00      	nop
    }
  }
}
 8002298:	3734      	adds	r7, #52	; 0x34
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}

0800229e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_PCD_SetAddress+0x1a>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e013      	b.n	80022e0 <HAL_PCD_SetAddress+0x42>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 faf6 	bl	80048c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	70fb      	strb	r3, [r7, #3]
 80022fa:	460b      	mov	r3, r1
 80022fc:	803b      	strh	r3, [r7, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230a:	2b00      	cmp	r3, #0
 800230c:	da0f      	bge.n	800232e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 020f 	and.w	r2, r3, #15
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	3338      	adds	r3, #56	; 0x38
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	705a      	strb	r2, [r3, #1]
 800232c:	e00f      	b.n	800234e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 020f 	and.w	r2, r3, #15
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	b2da      	uxtb	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800235a:	883a      	ldrh	r2, [r7, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	78ba      	ldrb	r2, [r7, #2]
 8002364:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	785b      	ldrb	r3, [r3, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002378:	78bb      	ldrb	r3, [r7, #2]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d102      	bne.n	8002384 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_PCD_EP_Open+0xaa>
 800238e:	2302      	movs	r3, #2
 8002390:	e00e      	b.n	80023b0 <HAL_PCD_EP_Open+0xc8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68f9      	ldr	r1, [r7, #12]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 fd3e 	bl	8003e22 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80023ae:	7afb      	ldrb	r3, [r7, #11]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	460b      	mov	r3, r1
 80023c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	f003 020f 	and.w	r2, r3, #15
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2200      	movs	r2, #0
 80023f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023fa:	7afb      	ldrb	r3, [r7, #11]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	b2da      	uxtb	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	f001 ffc4 	bl	80043b8 <USB_EP0StartXfer>
 8002430:	e008      	b.n	8002444 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	6979      	ldr	r1, [r7, #20]
 8002440:	f001 fd76 	bl	8003f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	460b      	mov	r3, r1
 800245c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	f003 020f 	and.w	r2, r3, #15
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	3338      	adds	r3, #56	; 0x38
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2201      	movs	r2, #1
 800248c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	b2da      	uxtb	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d102      	bne.n	80024a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024a8:	7afb      	ldrb	r3, [r7, #11]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6979      	ldr	r1, [r7, #20]
 80024c0:	f001 ff7a 	bl	80043b8 <USB_EP0StartXfer>
 80024c4:	e008      	b.n	80024d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	6979      	ldr	r1, [r7, #20]
 80024d4:	f001 fd2c 	bl	8003f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	f003 020f 	and.w	r2, r3, #15
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d901      	bls.n	8002500 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e050      	b.n	80025a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002504:	2b00      	cmp	r3, #0
 8002506:	da0f      	bge.n	8002528 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f003 020f 	and.w	r2, r3, #15
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	3338      	adds	r3, #56	; 0x38
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	3304      	adds	r3, #4
 800251e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	705a      	strb	r2, [r3, #1]
 8002526:	e00d      	b.n	8002544 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_PCD_EP_SetStall+0x82>
 8002560:	2302      	movs	r3, #2
 8002562:	e01e      	b.n	80025a2 <HAL_PCD_EP_SetStall+0xc0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	4618      	mov	r0, r3
 8002574:	f002 f8d1 	bl	800471a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10a      	bne.n	8002598 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	b2d9      	uxtb	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002592:	461a      	mov	r2, r3
 8002594:	f002 fa80 	bl	8004a98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 020f 	and.w	r2, r3, #15
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d901      	bls.n	80025c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e042      	b.n	800264e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	da0f      	bge.n	80025f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 020f 	and.w	r2, r3, #15
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	3338      	adds	r3, #56	; 0x38
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	3304      	adds	r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	705a      	strb	r2, [r3, #1]
 80025ee:	e00f      	b.n	8002610 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 020f 	and.w	r2, r3, #15
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	3304      	adds	r3, #4
 8002608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_PCD_EP_ClrStall+0x86>
 800262c:	2302      	movs	r3, #2
 800262e:	e00e      	b.n	800264e <HAL_PCD_EP_ClrStall+0xa4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	4618      	mov	r0, r3
 8002640:	f002 f8d9 	bl	80047f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b08a      	sub	sp, #40	; 0x28
 800265a:	af02      	add	r7, sp, #8
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3338      	adds	r3, #56	; 0x38
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	429a      	cmp	r2, r3
 8002688:	d901      	bls.n	800268e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06c      	b.n	8002768 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d902      	bls.n	80026aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3303      	adds	r3, #3
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026b2:	e02b      	b.n	800270c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d902      	bls.n	80026d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	3303      	adds	r3, #3
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	68d9      	ldr	r1, [r3, #12]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4603      	mov	r3, r0
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f001 ffb5 	bl	800465e <USB_WritePacket>

    ep->xfer_buff  += len;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	441a      	add	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	441a      	add	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	b29b      	uxth	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	429a      	cmp	r2, r3
 8002720:	d809      	bhi.n	8002736 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800272a:	429a      	cmp	r2, r3
 800272c:	d203      	bcs.n	8002736 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1be      	bne.n	80026b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	429a      	cmp	r2, r3
 8002740:	d811      	bhi.n	8002766 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	2201      	movs	r2, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	43db      	mvns	r3, r3
 800275c:	6939      	ldr	r1, [r7, #16]
 800275e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002762:	4013      	ands	r3, r2
 8002764:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	333c      	adds	r3, #60	; 0x3c
 8002788:	3304      	adds	r3, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f040 80a0 	bne.w	80028e8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a72      	ldr	r2, [pc, #456]	; (8002980 <PCD_EP_OutXfrComplete_int+0x210>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f240 80dd 	bls.w	8002976 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80d7 	beq.w	8002976 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027da:	6093      	str	r3, [r2, #8]
 80027dc:	e0cb      	b.n	8002976 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f4:	461a      	mov	r2, r3
 80027f6:	2320      	movs	r3, #32
 80027f8:	6093      	str	r3, [r2, #8]
 80027fa:	e0bc      	b.n	8002976 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 80b7 	bne.w	8002976 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <PCD_EP_OutXfrComplete_int+0x210>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d90f      	bls.n	8002830 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002826:	461a      	mov	r2, r3
 8002828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800282c:	6093      	str	r3, [r2, #8]
 800282e:	e0a2      	b.n	8002976 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002842:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	0159      	lsls	r1, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	440b      	add	r3, r1
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002856:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4403      	add	r3, r0
 8002866:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800286a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4419      	add	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4403      	add	r3, r0
 80028a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028a8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d114      	bne.n	80028da <PCD_EP_OutXfrComplete_int+0x16a>
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028d2:	461a      	mov	r2, r3
 80028d4:	2101      	movs	r1, #1
 80028d6:	f002 f8df 	bl	8004a98 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f003 f9dd 	bl	8005ca0 <HAL_PCD_DataOutStageCallback>
 80028e6:	e046      	b.n	8002976 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a26      	ldr	r2, [pc, #152]	; (8002984 <PCD_EP_OutXfrComplete_int+0x214>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d124      	bne.n	800293a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002906:	461a      	mov	r2, r3
 8002908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290c:	6093      	str	r3, [r2, #8]
 800290e:	e032      	b.n	8002976 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002926:	461a      	mov	r2, r3
 8002928:	2320      	movs	r3, #32
 800292a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f003 f9b4 	bl	8005ca0 <HAL_PCD_DataOutStageCallback>
 8002938:	e01d      	b.n	8002976 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d114      	bne.n	800296a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002962:	461a      	mov	r2, r3
 8002964:	2100      	movs	r1, #0
 8002966:	f002 f897 	bl	8004a98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f003 f995 	bl	8005ca0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	4f54300a 	.word	0x4f54300a
 8002984:	4f54310a 	.word	0x4f54310a

08002988 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	333c      	adds	r3, #60	; 0x3c
 80029a0:	3304      	adds	r3, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <PCD_EP_OutSetupPacket_int+0x88>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d90e      	bls.n	80029dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	461a      	mov	r2, r3
 80029d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f003 f94d 	bl	8005c7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <PCD_EP_OutSetupPacket_int+0x88>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d90c      	bls.n	8002a04 <PCD_EP_OutSetupPacket_int+0x7c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029fc:	461a      	mov	r2, r3
 80029fe:	2101      	movs	r1, #1
 8002a00:	f002 f84a 	bl	8004a98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	4f54300a 	.word	0x4f54300a

08002a14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e25b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d075      	beq.n	8002b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4a:	4ba3      	ldr	r3, [pc, #652]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d00c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4ba0      	ldr	r3, [pc, #640]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d112      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b9d      	ldr	r3, [pc, #628]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	4b99      	ldr	r3, [pc, #612]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05b      	beq.n	8002b34 <HAL_RCC_OscConfig+0x108>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d157      	bne.n	8002b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e236      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x74>
 8002a92:	4b91      	ldr	r3, [pc, #580]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a90      	ldr	r2, [pc, #576]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a8a      	ldr	r2, [pc, #552]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a87      	ldr	r2, [pc, #540]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002ac4:	4b84      	ldr	r3, [pc, #528]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a83      	ldr	r2, [pc, #524]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a80      	ldr	r2, [pc, #512]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fd84 	bl	80015f0 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fd80 	bl	80015f0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1fb      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xc0>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fd70 	bl	80015f0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe fd6c 	bl	80015f0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1e7      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b6c      	ldr	r3, [pc, #432]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0xe8>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b42:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1bb      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4952      	ldr	r1, [pc, #328]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b4f      	ldr	r3, [pc, #316]	; (8002cdc <HAL_RCC_OscConfig+0x2b0>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fd25 	bl	80015f0 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe fd21 	bl	80015f0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e19c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b46      	ldr	r3, [pc, #280]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4940      	ldr	r1, [pc, #256]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <HAL_RCC_OscConfig+0x2b0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fd04 	bl	80015f0 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bec:	f7fe fd00 	bl	80015f0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e17b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d030      	beq.n	8002c78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <HAL_RCC_OscConfig+0x2b4>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe fce4 	bl	80015f0 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fce0 	bl	80015f0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e15b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x200>
 8002c4a:	e015      	b.n	8002c78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x2b4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7fe fccd 	bl	80015f0 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5a:	f7fe fcc9 	bl	80015f0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e144      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a0 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_OscConfig+0x2b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d121      	bne.n	8002d06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_RCC_OscConfig+0x2b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_RCC_OscConfig+0x2b8>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fc8f 	bl	80015f0 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	e011      	b.n	8002cfa <HAL_RCC_OscConfig+0x2ce>
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	42470000 	.word	0x42470000
 8002ce0:	42470e80 	.word	0x42470e80
 8002ce4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce8:	f7fe fc82 	bl	80015f0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0fd      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x4d4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
 8002d0e:	4b7d      	ldr	r3, [pc, #500]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a7c      	ldr	r2, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1a:	e01c      	b.n	8002d56 <HAL_RCC_OscConfig+0x32a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d10c      	bne.n	8002d3e <HAL_RCC_OscConfig+0x312>
 8002d24:	4b77      	ldr	r3, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4a76      	ldr	r2, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d30:	4b74      	ldr	r3, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a73      	ldr	r2, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	e00b      	b.n	8002d56 <HAL_RCC_OscConfig+0x32a>
 8002d3e:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a70      	ldr	r2, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4a:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a6d      	ldr	r2, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d015      	beq.n	8002d8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fc47 	bl	80015f0 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe fc43 	bl	80015f0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0bc      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ee      	beq.n	8002d66 <HAL_RCC_OscConfig+0x33a>
 8002d88:	e014      	b.n	8002db4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fc31 	bl	80015f0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fe fc2d 	bl	80015f0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0a6      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da8:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ee      	bne.n	8002d92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a51      	ldr	r2, [pc, #324]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8092 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d05c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d141      	bne.n	8002e68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <HAL_RCC_OscConfig+0x4dc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fe fc01 	bl	80015f0 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fe fbfd 	bl	80015f0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e078      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	4933      	ldr	r1, [pc, #204]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3a:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_RCC_OscConfig+0x4dc>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fbd6 	bl	80015f0 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fbd2 	bl	80015f0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x41c>
 8002e66:	e045      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x4dc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fbbf 	bl	80015f0 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fbbb 	bl	80015f0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e036      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x44a>
 8002e94:	e02e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e029      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_RCC_OscConfig+0x4d8>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d115      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eca:	4013      	ands	r3, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40007000 	.word	0x40007000
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470060 	.word	0x42470060

08002f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0cc      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d90c      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0b8      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a58      	ldr	r2, [pc, #352]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a52      	ldr	r2, [pc, #328]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	494d      	ldr	r1, [pc, #308]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d044      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d119      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e07f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e067      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4934      	ldr	r1, [pc, #208]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7fe faf8 	bl	80015f0 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe faf4 	bl	80015f0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e04f      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d20c      	bcs.n	8003054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e032      	b.n	80030ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4916      	ldr	r1, [pc, #88]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003092:	f000 f821 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 8003096:	4601      	mov	r1, r0
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	5cd3      	ldrb	r3, [r2, r3]
 80030a6:	fa21 f303 	lsr.w	r3, r1, r3
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fa58 	bl	8001568 <HAL_InitTick>

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023c00 	.word	0x40023c00
 80030c8:	40023800 	.word	0x40023800
 80030cc:	080081b0 	.word	0x080081b0
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ee:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d007      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x32>
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d008      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x38>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 80b4 	bne.w	800326c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003106:	60bb      	str	r3, [r7, #8]
       break;
 8003108:	e0b3      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310a:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800310c:	60bb      	str	r3, [r7, #8]
      break;
 800310e:	e0b0      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003110:	4b5a      	ldr	r3, [pc, #360]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003118:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311a:	4b58      	ldr	r3, [pc, #352]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d04a      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b55      	ldr	r3, [pc, #340]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	f04f 0400 	mov.w	r4, #0
 8003130:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	ea03 0501 	and.w	r5, r3, r1
 800313c:	ea04 0602 	and.w	r6, r4, r2
 8003140:	4629      	mov	r1, r5
 8003142:	4632      	mov	r2, r6
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	0154      	lsls	r4, r2, #5
 800314e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003152:	014b      	lsls	r3, r1, #5
 8003154:	4619      	mov	r1, r3
 8003156:	4622      	mov	r2, r4
 8003158:	1b49      	subs	r1, r1, r5
 800315a:	eb62 0206 	sbc.w	r2, r2, r6
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	0194      	lsls	r4, r2, #6
 8003168:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800316c:	018b      	lsls	r3, r1, #6
 800316e:	1a5b      	subs	r3, r3, r1
 8003170:	eb64 0402 	sbc.w	r4, r4, r2
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	00e2      	lsls	r2, r4, #3
 800317e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003182:	00d9      	lsls	r1, r3, #3
 8003184:	460b      	mov	r3, r1
 8003186:	4614      	mov	r4, r2
 8003188:	195b      	adds	r3, r3, r5
 800318a:	eb44 0406 	adc.w	r4, r4, r6
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	02a2      	lsls	r2, r4, #10
 8003198:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800319c:	0299      	lsls	r1, r3, #10
 800319e:	460b      	mov	r3, r1
 80031a0:	4614      	mov	r4, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	4621      	mov	r1, r4
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f04f 0400 	mov.w	r4, #0
 80031ac:	461a      	mov	r2, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	f7fd fcfa 	bl	8000ba8 <__aeabi_uldivmod>
 80031b4:	4603      	mov	r3, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e049      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	f04f 0400 	mov.w	r4, #0
 80031c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	ea03 0501 	and.w	r5, r3, r1
 80031d2:	ea04 0602 	and.w	r6, r4, r2
 80031d6:	4629      	mov	r1, r5
 80031d8:	4632      	mov	r2, r6
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	f04f 0400 	mov.w	r4, #0
 80031e2:	0154      	lsls	r4, r2, #5
 80031e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031e8:	014b      	lsls	r3, r1, #5
 80031ea:	4619      	mov	r1, r3
 80031ec:	4622      	mov	r2, r4
 80031ee:	1b49      	subs	r1, r1, r5
 80031f0:	eb62 0206 	sbc.w	r2, r2, r6
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	f04f 0400 	mov.w	r4, #0
 80031fc:	0194      	lsls	r4, r2, #6
 80031fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003202:	018b      	lsls	r3, r1, #6
 8003204:	1a5b      	subs	r3, r3, r1
 8003206:	eb64 0402 	sbc.w	r4, r4, r2
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	00e2      	lsls	r2, r4, #3
 8003214:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003218:	00d9      	lsls	r1, r3, #3
 800321a:	460b      	mov	r3, r1
 800321c:	4614      	mov	r4, r2
 800321e:	195b      	adds	r3, r3, r5
 8003220:	eb44 0406 	adc.w	r4, r4, r6
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	02a2      	lsls	r2, r4, #10
 800322e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003232:	0299      	lsls	r1, r3, #10
 8003234:	460b      	mov	r3, r1
 8003236:	4614      	mov	r4, r2
 8003238:	4618      	mov	r0, r3
 800323a:	4621      	mov	r1, r4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f04f 0400 	mov.w	r4, #0
 8003242:	461a      	mov	r2, r3
 8003244:	4623      	mov	r3, r4
 8003246:	f7fd fcaf 	bl	8000ba8 <__aeabi_uldivmod>
 800324a:	4603      	mov	r3, r0
 800324c:	460c      	mov	r4, r1
 800324e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	60bb      	str	r3, [r7, #8]
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800326e:	60bb      	str	r3, [r7, #8]
      break;
 8003270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003272:	68bb      	ldr	r3, [r7, #8]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	00f42400 	.word	0x00f42400

08003284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e01d      	b.n	80032ea <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd ffd6 	bl	8001274 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f000 fa34 	bl	8003748 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d841      	bhi.n	8003388 <HAL_TIM_IC_Start_IT+0x94>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <HAL_TIM_IC_Start_IT+0x18>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	08003341 	.word	0x08003341
 8003310:	08003389 	.word	0x08003389
 8003314:	08003389 	.word	0x08003389
 8003318:	08003389 	.word	0x08003389
 800331c:	08003353 	.word	0x08003353
 8003320:	08003389 	.word	0x08003389
 8003324:	08003389 	.word	0x08003389
 8003328:	08003389 	.word	0x08003389
 800332c:	08003365 	.word	0x08003365
 8003330:	08003389 	.word	0x08003389
 8003334:	08003389 	.word	0x08003389
 8003338:	08003389 	.word	0x08003389
 800333c:	08003377 	.word	0x08003377
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0202 	orr.w	r2, r2, #2
 800334e:	60da      	str	r2, [r3, #12]
      break;
 8003350:	e01b      	b.n	800338a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0204 	orr.w	r2, r2, #4
 8003360:	60da      	str	r2, [r3, #12]
      break;
 8003362:	e012      	b.n	800338a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	60da      	str	r2, [r3, #12]
      break;
 8003374:	e009      	b.n	800338a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0210 	orr.w	r2, r2, #16
 8003384:	60da      	str	r2, [r3, #12]
      break;
 8003386:	e000      	b.n	800338a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003388:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fba2 	bl	8003adc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d007      	beq.n	80033ba <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d122      	bne.n	8003420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d11b      	bne.n	8003420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0202 	mvn.w	r2, #2
 80033f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd fd60 	bl	8000ecc <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f97c 	bl	800370c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f983 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d122      	bne.n	8003474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d11b      	bne.n	8003474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0204 	mvn.w	r2, #4
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fd36 	bl	8000ecc <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f952 	bl	800370c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f959 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b08      	cmp	r3, #8
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0208 	mvn.w	r2, #8
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2204      	movs	r2, #4
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fd0c 	bl	8000ecc <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f928 	bl	800370c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f92f 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0210 	mvn.w	r2, #16
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2208      	movs	r2, #8
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fce2 	bl	8000ecc <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8fe 	bl	800370c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f905 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0201 	mvn.w	r2, #1
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd fd1e 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	2b80      	cmp	r3, #128	; 0x80
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fb60 	bl	8003c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8ca 	bl	8003734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d10e      	bne.n	80035cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d107      	bne.n	80035cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0220 	mvn.w	r2, #32
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fb2a 	bl	8003c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_TIM_IC_ConfigChannel+0x1a>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e08a      	b.n	8003704 <HAL_TIM_IC_ConfigChannel+0x130>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f000 f938 	bl	8003888 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 020c 	bic.w	r2, r2, #12
 8003626:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6999      	ldr	r1, [r3, #24]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	619a      	str	r2, [r3, #24]
 800363a:	e05a      	b.n	80036f2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b04      	cmp	r3, #4
 8003640:	d11c      	bne.n	800367c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f000 f98d 	bl	8003970 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003664:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6999      	ldr	r1, [r3, #24]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	021a      	lsls	r2, r3, #8
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	619a      	str	r2, [r3, #24]
 800367a:	e03a      	b.n	80036f2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11b      	bne.n	80036ba <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6819      	ldr	r1, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f000 f9aa 	bl	80039ea <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 020c 	bic.w	r2, r2, #12
 80036a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	61da      	str	r2, [r3, #28]
 80036b8:	e01b      	b.n	80036f2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f000 f9ca 	bl	8003a62 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	021a      	lsls	r2, r3, #8
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a40      	ldr	r2, [pc, #256]	; (800385c <TIM_Base_SetConfig+0x114>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003766:	d00f      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3d      	ldr	r2, [pc, #244]	; (8003860 <TIM_Base_SetConfig+0x118>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00b      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <TIM_Base_SetConfig+0x11c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3b      	ldr	r2, [pc, #236]	; (8003868 <TIM_Base_SetConfig+0x120>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3a      	ldr	r2, [pc, #232]	; (800386c <TIM_Base_SetConfig+0x124>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2f      	ldr	r2, [pc, #188]	; (800385c <TIM_Base_SetConfig+0x114>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d02b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d027      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2c      	ldr	r2, [pc, #176]	; (8003860 <TIM_Base_SetConfig+0x118>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d023      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2b      	ldr	r2, [pc, #172]	; (8003864 <TIM_Base_SetConfig+0x11c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01f      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <TIM_Base_SetConfig+0x120>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a29      	ldr	r2, [pc, #164]	; (800386c <TIM_Base_SetConfig+0x124>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d017      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a28      	ldr	r2, [pc, #160]	; (8003870 <TIM_Base_SetConfig+0x128>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a27      	ldr	r2, [pc, #156]	; (8003874 <TIM_Base_SetConfig+0x12c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a26      	ldr	r2, [pc, #152]	; (8003878 <TIM_Base_SetConfig+0x130>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a25      	ldr	r2, [pc, #148]	; (800387c <TIM_Base_SetConfig+0x134>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a24      	ldr	r2, [pc, #144]	; (8003880 <TIM_Base_SetConfig+0x138>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a23      	ldr	r2, [pc, #140]	; (8003884 <TIM_Base_SetConfig+0x13c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d108      	bne.n	800380c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <TIM_Base_SetConfig+0x114>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_Base_SetConfig+0xf8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0c      	ldr	r2, [pc, #48]	; (800386c <TIM_Base_SetConfig+0x124>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d103      	bne.n	8003848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	615a      	str	r2, [r3, #20]
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40010000 	.word	0x40010000
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800
 8003868:	40000c00 	.word	0x40000c00
 800386c:	40010400 	.word	0x40010400
 8003870:	40014000 	.word	0x40014000
 8003874:	40014400 	.word	0x40014400
 8003878:	40014800 	.word	0x40014800
 800387c:	40001800 	.word	0x40001800
 8003880:	40001c00 	.word	0x40001c00
 8003884:	40002000 	.word	0x40002000

08003888 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0201 	bic.w	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a28      	ldr	r2, [pc, #160]	; (8003954 <TIM_TI1_SetConfig+0xcc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01b      	beq.n	80038ee <TIM_TI1_SetConfig+0x66>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d017      	beq.n	80038ee <TIM_TI1_SetConfig+0x66>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <TIM_TI1_SetConfig+0xd0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <TIM_TI1_SetConfig+0x66>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a24      	ldr	r2, [pc, #144]	; (800395c <TIM_TI1_SetConfig+0xd4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_TI1_SetConfig+0x66>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a23      	ldr	r2, [pc, #140]	; (8003960 <TIM_TI1_SetConfig+0xd8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_TI1_SetConfig+0x66>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <TIM_TI1_SetConfig+0xdc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_TI1_SetConfig+0x66>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a21      	ldr	r2, [pc, #132]	; (8003968 <TIM_TI1_SetConfig+0xe0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_TI1_SetConfig+0x66>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a20      	ldr	r2, [pc, #128]	; (800396c <TIM_TI1_SetConfig+0xe4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <TIM_TI1_SetConfig+0x6a>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <TIM_TI1_SetConfig+0x6c>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e003      	b.n	8003912 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	b2db      	uxtb	r3, r3
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f023 030a 	bic.w	r3, r3, #10
 800392c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f003 030a 	and.w	r3, r3, #10
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40010400 	.word	0x40010400
 8003968:	40014000 	.word	0x40014000
 800396c:	40001800 	.word	0x40001800

08003970 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	031b      	lsls	r3, r3, #12
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b087      	sub	sp, #28
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 0303 	bic.w	r3, r3, #3
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b087      	sub	sp, #28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	031b      	lsls	r3, r3, #12
 8003aba:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	621a      	str	r2, [r3, #32]
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2201      	movs	r2, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1a      	ldr	r2, [r3, #32]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a1a      	ldr	r2, [r3, #32]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e05a      	b.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8c:	d01d      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10c      	bne.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40010000 	.word	0x40010000
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800
 8003c10:	40000c00 	.word	0x40000c00
 8003c14:	40010400 	.word	0x40010400
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40001800 	.word	0x40001800

08003c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d165      	bne.n	8003d28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4a41      	ldr	r2, [pc, #260]	; (8003d64 <USB_SetTurnaroundTime+0x11c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d906      	bls.n	8003c72 <USB_SetTurnaroundTime+0x2a>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <USB_SetTurnaroundTime+0x120>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d802      	bhi.n	8003c72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e062      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <USB_SetTurnaroundTime+0x120>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d906      	bls.n	8003c88 <USB_SetTurnaroundTime+0x40>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4a3b      	ldr	r2, [pc, #236]	; (8003d6c <USB_SetTurnaroundTime+0x124>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d802      	bhi.n	8003c88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003c82:	230e      	movs	r3, #14
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e057      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <USB_SetTurnaroundTime+0x124>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d906      	bls.n	8003c9e <USB_SetTurnaroundTime+0x56>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4a37      	ldr	r2, [pc, #220]	; (8003d70 <USB_SetTurnaroundTime+0x128>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d802      	bhi.n	8003c9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c98:	230d      	movs	r3, #13
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e04c      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <USB_SetTurnaroundTime+0x128>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d906      	bls.n	8003cb4 <USB_SetTurnaroundTime+0x6c>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4a32      	ldr	r2, [pc, #200]	; (8003d74 <USB_SetTurnaroundTime+0x12c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d802      	bhi.n	8003cb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cae:	230c      	movs	r3, #12
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e041      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4a2f      	ldr	r2, [pc, #188]	; (8003d74 <USB_SetTurnaroundTime+0x12c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d906      	bls.n	8003cca <USB_SetTurnaroundTime+0x82>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4a2e      	ldr	r2, [pc, #184]	; (8003d78 <USB_SetTurnaroundTime+0x130>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d802      	bhi.n	8003cca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003cc4:	230b      	movs	r3, #11
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e036      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <USB_SetTurnaroundTime+0x130>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d906      	bls.n	8003ce0 <USB_SetTurnaroundTime+0x98>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <USB_SetTurnaroundTime+0x134>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d802      	bhi.n	8003ce0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003cda:	230a      	movs	r3, #10
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	e02b      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <USB_SetTurnaroundTime+0x134>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d906      	bls.n	8003cf6 <USB_SetTurnaroundTime+0xae>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <USB_SetTurnaroundTime+0x138>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d802      	bhi.n	8003cf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003cf0:	2309      	movs	r3, #9
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e020      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <USB_SetTurnaroundTime+0x138>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d906      	bls.n	8003d0c <USB_SetTurnaroundTime+0xc4>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a20      	ldr	r2, [pc, #128]	; (8003d84 <USB_SetTurnaroundTime+0x13c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d802      	bhi.n	8003d0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d06:	2308      	movs	r3, #8
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e015      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <USB_SetTurnaroundTime+0x13c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d906      	bls.n	8003d22 <USB_SetTurnaroundTime+0xda>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <USB_SetTurnaroundTime+0x140>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d802      	bhi.n	8003d22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d1c:	2307      	movs	r3, #7
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e00a      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d22:	2306      	movs	r3, #6
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e007      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d2e:	2309      	movs	r3, #9
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e001      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d34:	2309      	movs	r3, #9
 8003d36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	029b      	lsls	r3, r3, #10
 8003d4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	00d8acbf 	.word	0x00d8acbf
 8003d68:	00e4e1bf 	.word	0x00e4e1bf
 8003d6c:	00f423ff 	.word	0x00f423ff
 8003d70:	0106737f 	.word	0x0106737f
 8003d74:	011a499f 	.word	0x011a499f
 8003d78:	01312cff 	.word	0x01312cff
 8003d7c:	014ca43f 	.word	0x014ca43f
 8003d80:	016e35ff 	.word	0x016e35ff
 8003d84:	01a6ab1f 	.word	0x01a6ab1f
 8003d88:	01e847ff 	.word	0x01e847ff

08003d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <USB_FlushTxFifo+0x48>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e006      	b.n	8003dc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d0f0      	beq.n	8003da6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	00030d40 	.word	0x00030d40

08003dd8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0306 	and.w	r3, r3, #6
 8003df0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	75fb      	strb	r3, [r7, #23]
 8003dfc:	e00a      	b.n	8003e14 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d002      	beq.n	8003e0a <USB_GetDevSpeed+0x32>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d102      	bne.n	8003e10 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	75fb      	strb	r3, [r7, #23]
 8003e0e:	e001      	b.n	8003e14 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e10:	230f      	movs	r3, #15
 8003e12:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d13a      	bne.n	8003eb4 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d155      	bne.n	8003f22 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	78db      	ldrb	r3, [r3, #3]
 8003e90:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e92:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	059b      	lsls	r3, r3, #22
 8003e98:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e036      	b.n	8003f22 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d11a      	bne.n	8003f22 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	78db      	ldrb	r3, [r3, #3]
 8003f06:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f20:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	f040 815c 	bne.w	800420a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d132      	bne.n	8003fc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb8:	0cdb      	lsrs	r3, r3, #19
 8003fba:	04db      	lsls	r3, r3, #19
 8003fbc:	6113      	str	r3, [r2, #16]
 8003fbe:	e074      	b.n	80040aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fda:	0cdb      	lsrs	r3, r3, #19
 8003fdc:	04db      	lsls	r3, r3, #19
 8003fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6959      	ldr	r1, [r3, #20]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	440b      	add	r3, r1
 800401c:	1e59      	subs	r1, r3, #1
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	fbb1 f3f3 	udiv	r3, r1, r3
 8004026:	04d9      	lsls	r1, r3, #19
 8004028:	4b9d      	ldr	r3, [pc, #628]	; (80042a0 <USB_EPStartXfer+0x370>)
 800402a:	400b      	ands	r3, r1
 800402c:	69b9      	ldr	r1, [r7, #24]
 800402e:	0148      	lsls	r0, r1, #5
 8004030:	69f9      	ldr	r1, [r7, #28]
 8004032:	4401      	add	r1, r0
 8004034:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004038:	4313      	orrs	r3, r2
 800403a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004052:	69b9      	ldr	r1, [r7, #24]
 8004054:	0148      	lsls	r0, r1, #5
 8004056:	69f9      	ldr	r1, [r7, #28]
 8004058:	4401      	add	r1, r0
 800405a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800405e:	4313      	orrs	r3, r2
 8004060:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	78db      	ldrb	r3, [r3, #3]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d11f      	bne.n	80040aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	440a      	add	r2, r1
 8004080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004084:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004088:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d14b      	bne.n	8004148 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	461a      	mov	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	78db      	ldrb	r3, [r3, #3]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d128      	bne.n	8004126 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d110      	bne.n	8004106 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e00f      	b.n	8004126 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	440a      	add	r2, r1
 800411c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	440a      	add	r2, r1
 800413c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e12f      	b.n	80043a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	0151      	lsls	r1, r2, #5
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	440a      	add	r2, r1
 800415e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004166:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	78db      	ldrb	r3, [r3, #3]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d015      	beq.n	800419c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8117 	beq.w	80043a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	2101      	movs	r1, #1
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	69f9      	ldr	r1, [r7, #28]
 8004192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004196:	4313      	orrs	r3, r2
 8004198:	634b      	str	r3, [r1, #52]	; 0x34
 800419a:	e105      	b.n	80043a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d110      	bne.n	80041ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e00f      	b.n	80041ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	68d9      	ldr	r1, [r3, #12]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	b298      	uxth	r0, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	4603      	mov	r3, r0
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fa2b 	bl	800465e <USB_WritePacket>
 8004208:	e0ce      	b.n	80043a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004224:	0cdb      	lsrs	r3, r3, #19
 8004226:	04db      	lsls	r3, r3, #19
 8004228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	0151      	lsls	r1, r2, #5
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	440a      	add	r2, r1
 8004240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800424c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d126      	bne.n	80042a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426c:	69b9      	ldr	r1, [r7, #24]
 800426e:	0148      	lsls	r0, r1, #5
 8004270:	69f9      	ldr	r1, [r7, #28]
 8004272:	4401      	add	r1, r0
 8004274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004278:	4313      	orrs	r3, r2
 800427a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800429a:	6113      	str	r3, [r2, #16]
 800429c:	e036      	b.n	800430c <USB_EPStartXfer+0x3dc>
 800429e:	bf00      	nop
 80042a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4413      	add	r3, r2
 80042ae:	1e5a      	subs	r2, r3, #1
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	8afb      	ldrh	r3, [r7, #22]
 80042ca:	04d9      	lsls	r1, r3, #19
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <USB_EPStartXfer+0x484>)
 80042ce:	400b      	ands	r3, r1
 80042d0:	69b9      	ldr	r1, [r7, #24]
 80042d2:	0148      	lsls	r0, r1, #5
 80042d4:	69f9      	ldr	r1, [r7, #28]
 80042d6:	4401      	add	r1, r0
 80042d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042dc:	4313      	orrs	r3, r2
 80042de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	8af9      	ldrh	r1, [r7, #22]
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fc:	69b9      	ldr	r1, [r7, #24]
 80042fe:	0148      	lsls	r0, r1, #5
 8004300:	69f9      	ldr	r1, [r7, #28]
 8004302:	4401      	add	r1, r0
 8004304:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004308:	4313      	orrs	r3, r2
 800430a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d10d      	bne.n	800432e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	68d9      	ldr	r1, [r3, #12]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	460a      	mov	r2, r1
 800432c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	78db      	ldrb	r3, [r3, #3]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d128      	bne.n	8004388 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d110      	bne.n	8004368 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	440a      	add	r2, r1
 800435c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e00f      	b.n	8004388 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	440a      	add	r2, r1
 800439e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	1ff80000 	.word	0x1ff80000

080043b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	f040 80cd 	bne.w	8004574 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d132      	bne.n	8004448 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004400:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004404:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004424:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004440:	0cdb      	lsrs	r3, r3, #19
 8004442:	04db      	lsls	r3, r3, #19
 8004444:	6113      	str	r3, [r2, #16]
 8004446:	e04e      	b.n	80044e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004462:	0cdb      	lsrs	r3, r3, #19
 8004464:	04db      	lsls	r3, r3, #19
 8004466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	0151      	lsls	r1, r2, #5
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	440a      	add	r2, r1
 800447e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004482:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004486:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800448a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d903      	bls.n	80044a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d6:	6939      	ldr	r1, [r7, #16]
 80044d8:	0148      	lsls	r0, r1, #5
 80044da:	6979      	ldr	r1, [r7, #20]
 80044dc:	4401      	add	r1, r0
 80044de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044e2:	4313      	orrs	r3, r2
 80044e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d11e      	bne.n	800452a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e092      	b.n	8004650 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	440a      	add	r2, r1
 8004540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004544:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004548:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d07e      	beq.n	8004650 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	2101      	movs	r1, #1
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800456e:	4313      	orrs	r3, r2
 8004570:	634b      	str	r3, [r1, #52]	; 0x34
 8004572:	e06d      	b.n	8004650 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458e:	0cdb      	lsrs	r3, r3, #19
 8004590:	04db      	lsls	r3, r3, #19
 8004592:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fe:	6939      	ldr	r1, [r7, #16]
 8004600:	0148      	lsls	r0, r1, #5
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	4401      	add	r1, r0
 8004606:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800460a:	4313      	orrs	r3, r2
 800460c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d10d      	bne.n	8004630 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	68d9      	ldr	r1, [r3, #12]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	460a      	mov	r2, r1
 800462e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800464e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800465e:	b480      	push	{r7}
 8004660:	b089      	sub	sp, #36	; 0x24
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	4611      	mov	r1, r2
 800466a:	461a      	mov	r2, r3
 800466c:	460b      	mov	r3, r1
 800466e:	71fb      	strb	r3, [r7, #7]
 8004670:	4613      	mov	r3, r2
 8004672:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800467c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11a      	bne.n	80046ba <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004684:	88bb      	ldrh	r3, [r7, #4]
 8004686:	3303      	adds	r3, #3
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	e00f      	b.n	80046b2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	031a      	lsls	r2, r3, #12
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4413      	add	r3, r2
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	461a      	mov	r2, r3
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3304      	adds	r3, #4
 80046aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	3301      	adds	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d3eb      	bcc.n	8004692 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3724      	adds	r7, #36	; 0x24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b089      	sub	sp, #36	; 0x24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	3303      	adds	r3, #3
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e00b      	b.n	8004704 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3304      	adds	r3, #4
 80046fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3301      	adds	r3, #1
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	429a      	cmp	r2, r3
 800470a:	d3ef      	bcc.n	80046ec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800470c:	69fb      	ldr	r3, [r7, #28]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	; 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d12c      	bne.n	8004790 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	db12      	blt.n	800476e <USB_EPSetStall+0x54>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00f      	beq.n	800476e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004768:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800476c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	0151      	lsls	r1, r2, #5
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	440a      	add	r2, r1
 8004784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e02b      	b.n	80047e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	db12      	blt.n	80047c8 <USB_EPSetStall+0xae>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00f      	beq.n	80047c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	0151      	lsls	r1, r2, #5
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	440a      	add	r2, r1
 80047de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d128      	bne.n	8004864 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	440a      	add	r2, r1
 8004828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004830:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	78db      	ldrb	r3, [r3, #3]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d003      	beq.n	8004842 <USB_EPClearStall+0x4c>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	78db      	ldrb	r3, [r3, #3]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d138      	bne.n	80048b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e027      	b.n	80048b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800487e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004882:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	78db      	ldrb	r3, [r3, #3]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d003      	beq.n	8004894 <USB_EPClearStall+0x9e>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	78db      	ldrb	r3, [r3, #3]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d10f      	bne.n	80048b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80048f6:	68f9      	ldr	r1, [r7, #12]
 80048f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4013      	ands	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004926:	68fb      	ldr	r3, [r7, #12]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	0c1b      	lsrs	r3, r3, #16
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	b29b      	uxth	r3, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049ca:	68bb      	ldr	r3, [r7, #8]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
 8004a08:	01db      	lsls	r3, r3, #7
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4013      	ands	r3, r2
 8004a24:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a26:	68bb      	ldr	r3, [r7, #8]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0301 	and.w	r3, r3, #1
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a6e:	f023 0307 	bic.w	r3, r3, #7
 8004a72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	333c      	adds	r3, #60	; 0x3c
 8004aae:	3304      	adds	r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <USB_EP0_OutStart+0xb8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d90a      	bls.n	8004ad2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004acc:	d101      	bne.n	8004ad2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e037      	b.n	8004b42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2300      	movs	r3, #0
 8004adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b00:	f043 0318 	orr.w	r3, r3, #24
 8004b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10f      	bne.n	8004b40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	461a      	mov	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004b3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	4f54300a 	.word	0x4f54300a

08004b54 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b66:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b94:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004b96:	2301      	movs	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e01a      	b.n	8004bde <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d114      	bne.n	8004bdc <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004bd0:	2181      	movs	r1, #129	; 0x81
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f001 f9f3 	bl	8005fbe <USBD_LL_Transmit>

    ret = USBD_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	4611      	mov	r1, r2
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	4611      	mov	r1, r2
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
  }

  return USBD_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 ff2c 	bl	8005ad4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d00e      	beq.n	8004cbe <USBD_LL_SetupStage+0x5a>
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d302      	bcc.n	8004caa <USBD_LL_SetupStage+0x46>
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d014      	beq.n	8004cd2 <USBD_LL_SetupStage+0x6e>
 8004ca8:	e01d      	b.n	8004ce6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa18 	bl	80050e8 <USBD_StdDevReq>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
      break;
 8004cbc:	e020      	b.n	8004d00 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fa7c 	bl	80051c4 <USBD_StdItfReq>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd0:	e016      	b.n	8004d00 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fab8 	bl	8005250 <USBD_StdEPReq>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	e00c      	b.n	8004d00 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004cec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 f8d9 	bl	8005eac <USBD_LL_StallEP>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfe:	bf00      	nop
  }

  return ret;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	460b      	mov	r3, r1
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d18:	7afb      	ldrb	r3, [r7, #11]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d137      	bne.n	8004d8e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004d24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d14a      	bne.n	8004dc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d913      	bls.n	8004d64 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	1ad2      	subs	r2, r2, r3
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	4293      	cmp	r3, r2
 8004d54:	bf28      	it	cs
 8004d56:	4613      	movcs	r3, r2
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 ff30 	bl	8005bc2 <USBD_CtlContinueRx>
 8004d62:	e030      	b.n	8004dc6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d105      	bne.n	8004d86 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 ff2c 	bl	8005be4 <USBD_CtlSendStatus>
 8004d8c:	e01b      	b.n	8004dc6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d013      	beq.n	8004dc2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d10e      	bne.n	8004dc2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	7afa      	ldrb	r2, [r7, #11]
 8004dae:	4611      	mov	r1, r2
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	4798      	blx	r3
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	e002      	b.n	8004dc8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e000      	b.n	8004dc8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004dde:	7afb      	ldrb	r3, [r7, #11]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d16a      	bne.n	8004eba <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3314      	adds	r3, #20
 8004de8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d155      	bne.n	8004ea0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d914      	bls.n	8004e2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	1ad2      	subs	r2, r2, r3
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	461a      	mov	r2, r3
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fec2 	bl	8005ba0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2100      	movs	r1, #0
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f001 f8ec 	bl	8006000 <USBD_LL_PrepareReceive>
 8004e28:	e03a      	b.n	8004ea0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d11c      	bne.n	8004e70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d316      	bcc.n	8004e70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d20f      	bcs.n	8004e70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004e50:	2200      	movs	r2, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fea3 	bl	8005ba0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e62:	2300      	movs	r3, #0
 8004e64:	2200      	movs	r2, #0
 8004e66:	2100      	movs	r1, #0
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f001 f8c9 	bl	8006000 <USBD_LL_PrepareReceive>
 8004e6e:	e017      	b.n	8004ea0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d105      	bne.n	8004e92 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f001 f809 	bl	8005eac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 feb5 	bl	8005c0a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d123      	bne.n	8004ef2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff fe9b 	bl	8004be6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004eb8:	e01b      	b.n	8004ef2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d013      	beq.n	8004eee <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d10e      	bne.n	8004eee <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	7afa      	ldrb	r2, [r7, #11]
 8004eda:	4611      	mov	r1, r2
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	4798      	blx	r3
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	e002      	b.n	8004ef4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e000      	b.n	8004ef4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6852      	ldr	r2, [r2, #4]
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f40:	2340      	movs	r3, #64	; 0x40
 8004f42:	2200      	movs	r2, #0
 8004f44:	2100      	movs	r1, #0
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 ff8a 	bl	8005e60 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2240      	movs	r2, #64	; 0x40
 8004f58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f5c:	2340      	movs	r3, #64	; 0x40
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2180      	movs	r1, #128	; 0x80
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 ff7c 	bl	8005e60 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d105      	bne.n	8004fe6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005002:	2b03      	cmp	r3, #3
 8005004:	d10b      	bne.n	800501e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	460b      	mov	r3, r1
 800504c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6852      	ldr	r2, [r2, #4]
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	4611      	mov	r1, r2
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
  }

  return USBD_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b087      	sub	sp, #28
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3301      	adds	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80050c8:	8a3b      	ldrh	r3, [r7, #16]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	b21a      	sxth	r2, r3
 80050ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	b21b      	sxth	r3, r3
 80050d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80050d8:	89fb      	ldrh	r3, [r7, #14]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d004      	beq.n	800510c <USBD_StdDevReq+0x24>
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d002      	beq.n	800510c <USBD_StdDevReq+0x24>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <USBD_StdDevReq+0x38>
 800510a:	e050      	b.n	80051ae <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
    break;
 800511e:	e04b      	b.n	80051b8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b09      	cmp	r3, #9
 8005126:	d83c      	bhi.n	80051a2 <USBD_StdDevReq+0xba>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <USBD_StdDevReq+0x48>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005185 	.word	0x08005185
 8005134:	08005199 	.word	0x08005199
 8005138:	080051a3 	.word	0x080051a3
 800513c:	0800518f 	.word	0x0800518f
 8005140:	080051a3 	.word	0x080051a3
 8005144:	08005163 	.word	0x08005163
 8005148:	08005159 	.word	0x08005159
 800514c:	080051a3 	.word	0x080051a3
 8005150:	0800517b 	.word	0x0800517b
 8005154:	0800516d 	.word	0x0800516d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9ce 	bl	80054fc <USBD_GetDescriptor>
      break;
 8005160:	e024      	b.n	80051ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005162:	6839      	ldr	r1, [r7, #0]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fb33 	bl	80057d0 <USBD_SetAddress>
      break;
 800516a:	e01f      	b.n	80051ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fb70 	bl	8005854 <USBD_SetConfig>
 8005174:	4603      	mov	r3, r0
 8005176:	73fb      	strb	r3, [r7, #15]
      break;
 8005178:	e018      	b.n	80051ac <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fc0d 	bl	800599c <USBD_GetConfig>
      break;
 8005182:	e013      	b.n	80051ac <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fc3c 	bl	8005a04 <USBD_GetStatus>
      break;
 800518c:	e00e      	b.n	80051ac <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fc6a 	bl	8005a6a <USBD_SetFeature>
      break;
 8005196:	e009      	b.n	80051ac <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fc79 	bl	8005a92 <USBD_ClrFeature>
      break;
 80051a0:	e004      	b.n	80051ac <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fccf 	bl	8005b48 <USBD_CtlError>
      break;
 80051aa:	bf00      	nop
    }
    break;
 80051ac:	e004      	b.n	80051b8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fcc9 	bl	8005b48 <USBD_CtlError>
    break;
 80051b6:	bf00      	nop
  }

  return ret;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d003      	beq.n	80051e6 <USBD_StdItfReq+0x22>
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d001      	beq.n	80051e6 <USBD_StdItfReq+0x22>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d12a      	bne.n	800523c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ec:	3b01      	subs	r3, #1
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d81d      	bhi.n	800522e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	889b      	ldrh	r3, [r3, #4]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d813      	bhi.n	8005224 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
 800520a:	4603      	mov	r3, r0
 800520c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	88db      	ldrh	r3, [r3, #6]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d110      	bne.n	8005238 <USBD_StdItfReq+0x74>
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10d      	bne.n	8005238 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fce1 	bl	8005be4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005222:	e009      	b.n	8005238 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fc8e 	bl	8005b48 <USBD_CtlError>
      break;
 800522c:	e004      	b.n	8005238 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800522e:	6839      	ldr	r1, [r7, #0]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fc89 	bl	8005b48 <USBD_CtlError>
      break;
 8005236:	e000      	b.n	800523a <USBD_StdItfReq+0x76>
      break;
 8005238:	bf00      	nop
    }
    break;
 800523a:	e004      	b.n	8005246 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fc82 	bl	8005b48 <USBD_CtlError>
    break;
 8005244:	bf00      	nop
  }

  return ret;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	889b      	ldrh	r3, [r3, #4]
 8005262:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800526c:	2b20      	cmp	r3, #32
 800526e:	d004      	beq.n	800527a <USBD_StdEPReq+0x2a>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d002      	beq.n	800527a <USBD_StdEPReq+0x2a>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <USBD_StdEPReq+0x3e>
 8005278:	e135      	b.n	80054e6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
 8005288:	4603      	mov	r3, r0
 800528a:	73fb      	strb	r3, [r7, #15]
    break;
 800528c:	e130      	b.n	80054f0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d03e      	beq.n	8005314 <USBD_StdEPReq+0xc4>
 8005296:	2b03      	cmp	r3, #3
 8005298:	d002      	beq.n	80052a0 <USBD_StdEPReq+0x50>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d077      	beq.n	800538e <USBD_StdEPReq+0x13e>
 800529e:	e11c      	b.n	80054da <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d002      	beq.n	80052b0 <USBD_StdEPReq+0x60>
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d015      	beq.n	80052da <USBD_StdEPReq+0x8a>
 80052ae:	e02b      	b.n	8005308 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <USBD_StdEPReq+0x80>
 80052b6:	7bbb      	ldrb	r3, [r7, #14]
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d009      	beq.n	80052d0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fdf3 	bl	8005eac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052c6:	2180      	movs	r1, #128	; 0x80
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fdef 	bl	8005eac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80052ce:	e020      	b.n	8005312 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fc38 	bl	8005b48 <USBD_CtlError>
        break;
 80052d8:	e01b      	b.n	8005312 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	885b      	ldrh	r3, [r3, #2]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10e      	bne.n	8005300 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <USBD_StdEPReq+0xb0>
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	2b80      	cmp	r3, #128	; 0x80
 80052ec:	d008      	beq.n	8005300 <USBD_StdEPReq+0xb0>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	88db      	ldrh	r3, [r3, #6]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fdd6 	bl	8005eac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fc6f 	bl	8005be4 <USBD_CtlSendStatus>

        break;
 8005306:	e004      	b.n	8005312 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fc1c 	bl	8005b48 <USBD_CtlError>
        break;
 8005310:	bf00      	nop
      }
      break;
 8005312:	e0e7      	b.n	80054e4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531a:	2b02      	cmp	r3, #2
 800531c:	d002      	beq.n	8005324 <USBD_StdEPReq+0xd4>
 800531e:	2b03      	cmp	r3, #3
 8005320:	d015      	beq.n	800534e <USBD_StdEPReq+0xfe>
 8005322:	e02d      	b.n	8005380 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005324:	7bbb      	ldrb	r3, [r7, #14]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00c      	beq.n	8005344 <USBD_StdEPReq+0xf4>
 800532a:	7bbb      	ldrb	r3, [r7, #14]
 800532c:	2b80      	cmp	r3, #128	; 0x80
 800532e:	d009      	beq.n	8005344 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fdb9 	bl	8005eac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fdb5 	bl	8005eac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005342:	e023      	b.n	800538c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fbfe 	bl	8005b48 <USBD_CtlError>
        break;
 800534c:	e01e      	b.n	800538c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	885b      	ldrh	r3, [r3, #2]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d119      	bne.n	800538a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005356:	7bbb      	ldrb	r3, [r7, #14]
 8005358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fdc0 	bl	8005eea <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fc3a 	bl	8005be4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
        }
        break;
 800537e:	e004      	b.n	800538a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fbe0 	bl	8005b48 <USBD_CtlError>
        break;
 8005388:	e000      	b.n	800538c <USBD_StdEPReq+0x13c>
        break;
 800538a:	bf00      	nop
      }
      break;
 800538c:	e0aa      	b.n	80054e4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005394:	2b02      	cmp	r3, #2
 8005396:	d002      	beq.n	800539e <USBD_StdEPReq+0x14e>
 8005398:	2b03      	cmp	r3, #3
 800539a:	d032      	beq.n	8005402 <USBD_StdEPReq+0x1b2>
 800539c:	e097      	b.n	80054ce <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <USBD_StdEPReq+0x164>
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d004      	beq.n	80053b4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fbcb 	bl	8005b48 <USBD_CtlError>
          break;
 80053b2:	e091      	b.n	80054d8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da0b      	bge.n	80053d4 <USBD_StdEPReq+0x184>
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	3310      	adds	r3, #16
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	3304      	adds	r3, #4
 80053d2:	e00b      	b.n	80053ec <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	4413      	add	r3, r2
 80053ea:	3304      	adds	r3, #4
 80053ec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2202      	movs	r2, #2
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fbb5 	bl	8005b6a <USBD_CtlSendData>
        break;
 8005400:	e06a      	b.n	80054d8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005406:	2b00      	cmp	r3, #0
 8005408:	da11      	bge.n	800542e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	f003 020f 	and.w	r2, r3, #15
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	3324      	adds	r3, #36	; 0x24
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d117      	bne.n	8005454 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fb8e 	bl	8005b48 <USBD_CtlError>
            break;
 800542c:	e054      	b.n	80054d8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fb7b 	bl	8005b48 <USBD_CtlError>
            break;
 8005452:	e041      	b.n	80054d8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005458:	2b00      	cmp	r3, #0
 800545a:	da0b      	bge.n	8005474 <USBD_StdEPReq+0x224>
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	3310      	adds	r3, #16
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	3304      	adds	r3, #4
 8005472:	e00b      	b.n	800548c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005474:	7bbb      	ldrb	r3, [r7, #14]
 8005476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	3304      	adds	r3, #4
 800548c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <USBD_StdEPReq+0x24a>
 8005494:	7bbb      	ldrb	r3, [r7, #14]
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d103      	bne.n	80054a2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e00e      	b.n	80054c0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80054a2:	7bbb      	ldrb	r3, [r7, #14]
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fd3e 	bl	8005f28 <USBD_LL_IsStallEP>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2201      	movs	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e002      	b.n	80054c0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2202      	movs	r2, #2
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fb4f 	bl	8005b6a <USBD_CtlSendData>
          break;
 80054cc:	e004      	b.n	80054d8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fb39 	bl	8005b48 <USBD_CtlError>
        break;
 80054d6:	bf00      	nop
      }
      break;
 80054d8:	e004      	b.n	80054e4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fb33 	bl	8005b48 <USBD_CtlError>
      break;
 80054e2:	bf00      	nop
    }
    break;
 80054e4:	e004      	b.n	80054f0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb2d 	bl	8005b48 <USBD_CtlError>
    break;
 80054ee:	bf00      	nop
  }

  return ret;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	885b      	ldrh	r3, [r3, #2]
 8005516:	0a1b      	lsrs	r3, r3, #8
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	2b06      	cmp	r3, #6
 800551e:	f200 8128 	bhi.w	8005772 <USBD_GetDescriptor+0x276>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <USBD_GetDescriptor+0x2c>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	08005545 	.word	0x08005545
 800552c:	0800555d 	.word	0x0800555d
 8005530:	0800559d 	.word	0x0800559d
 8005534:	08005773 	.word	0x08005773
 8005538:	08005773 	.word	0x08005773
 800553c:	08005713 	.word	0x08005713
 8005540:	0800573f 	.word	0x0800573f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	7c12      	ldrb	r2, [r2, #16]
 8005550:	f107 0108 	add.w	r1, r7, #8
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
 8005558:	60f8      	str	r0, [r7, #12]
    break;
 800555a:	e112      	b.n	8005782 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7c1b      	ldrb	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f107 0208 	add.w	r2, r7, #8
 8005570:	4610      	mov	r0, r2
 8005572:	4798      	blx	r3
 8005574:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3301      	adds	r3, #1
 800557a:	2202      	movs	r2, #2
 800557c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800557e:	e100      	b.n	8005782 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	f107 0208 	add.w	r2, r7, #8
 800558c:	4610      	mov	r0, r2
 800558e:	4798      	blx	r3
 8005590:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	2202      	movs	r2, #2
 8005598:	701a      	strb	r2, [r3, #0]
    break;
 800559a:	e0f2      	b.n	8005782 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	885b      	ldrh	r3, [r3, #2]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	f200 80ac 	bhi.w	8005700 <USBD_GetDescriptor+0x204>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <USBD_GetDescriptor+0xb4>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055c9 	.word	0x080055c9
 80055b4:	080055fd 	.word	0x080055fd
 80055b8:	08005631 	.word	0x08005631
 80055bc:	08005665 	.word	0x08005665
 80055c0:	08005699 	.word	0x08005699
 80055c4:	080056cd 	.word	0x080056cd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	7c12      	ldrb	r2, [r2, #16]
 80055e0:	f107 0108 	add.w	r1, r7, #8
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
 80055e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055ea:	e091      	b.n	8005710 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 faaa 	bl	8005b48 <USBD_CtlError>
        err++;
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	3301      	adds	r3, #1
 80055f8:	72fb      	strb	r3, [r7, #11]
      break;
 80055fa:	e089      	b.n	8005710 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	7c12      	ldrb	r2, [r2, #16]
 8005614:	f107 0108 	add.w	r1, r7, #8
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
 800561c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800561e:	e077      	b.n	8005710 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa90 	bl	8005b48 <USBD_CtlError>
        err++;
 8005628:	7afb      	ldrb	r3, [r7, #11]
 800562a:	3301      	adds	r3, #1
 800562c:	72fb      	strb	r3, [r7, #11]
      break;
 800562e:	e06f      	b.n	8005710 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	7c12      	ldrb	r2, [r2, #16]
 8005648:	f107 0108 	add.w	r1, r7, #8
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
 8005650:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005652:	e05d      	b.n	8005710 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa76 	bl	8005b48 <USBD_CtlError>
        err++;
 800565c:	7afb      	ldrb	r3, [r7, #11]
 800565e:	3301      	adds	r3, #1
 8005660:	72fb      	strb	r3, [r7, #11]
      break;
 8005662:	e055      	b.n	8005710 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	7c12      	ldrb	r2, [r2, #16]
 800567c:	f107 0108 	add.w	r1, r7, #8
 8005680:	4610      	mov	r0, r2
 8005682:	4798      	blx	r3
 8005684:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005686:	e043      	b.n	8005710 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa5c 	bl	8005b48 <USBD_CtlError>
        err++;
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	3301      	adds	r3, #1
 8005694:	72fb      	strb	r3, [r7, #11]
      break;
 8005696:	e03b      	b.n	8005710 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	7c12      	ldrb	r2, [r2, #16]
 80056b0:	f107 0108 	add.w	r1, r7, #8
 80056b4:	4610      	mov	r0, r2
 80056b6:	4798      	blx	r3
 80056b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056ba:	e029      	b.n	8005710 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa42 	bl	8005b48 <USBD_CtlError>
        err++;
 80056c4:	7afb      	ldrb	r3, [r7, #11]
 80056c6:	3301      	adds	r3, #1
 80056c8:	72fb      	strb	r3, [r7, #11]
      break;
 80056ca:	e021      	b.n	8005710 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	7c12      	ldrb	r2, [r2, #16]
 80056e4:	f107 0108 	add.w	r1, r7, #8
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
 80056ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056ee:	e00f      	b.n	8005710 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa28 	bl	8005b48 <USBD_CtlError>
        err++;
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	3301      	adds	r3, #1
 80056fc:	72fb      	strb	r3, [r7, #11]
      break;
 80056fe:	e007      	b.n	8005710 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fa20 	bl	8005b48 <USBD_CtlError>
      err++;
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	3301      	adds	r3, #1
 800570c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800570e:	bf00      	nop
    }
    break;
 8005710:	e037      	b.n	8005782 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7c1b      	ldrb	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	f107 0208 	add.w	r2, r7, #8
 8005726:	4610      	mov	r0, r2
 8005728:	4798      	blx	r3
 800572a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800572c:	e029      	b.n	8005782 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fa09 	bl	8005b48 <USBD_CtlError>
      err++;
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	3301      	adds	r3, #1
 800573a:	72fb      	strb	r3, [r7, #11]
    break;
 800573c:	e021      	b.n	8005782 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	7c1b      	ldrb	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10d      	bne.n	8005762 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f107 0208 	add.w	r2, r7, #8
 8005752:	4610      	mov	r0, r2
 8005754:	4798      	blx	r3
 8005756:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	2207      	movs	r2, #7
 800575e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005760:	e00f      	b.n	8005782 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f9ef 	bl	8005b48 <USBD_CtlError>
      err++;
 800576a:	7afb      	ldrb	r3, [r7, #11]
 800576c:	3301      	adds	r3, #1
 800576e:	72fb      	strb	r3, [r7, #11]
    break;
 8005770:	e007      	b.n	8005782 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f9e7 	bl	8005b48 <USBD_CtlError>
    err++;
 800577a:	7afb      	ldrb	r3, [r7, #11]
 800577c:	3301      	adds	r3, #1
 800577e:	72fb      	strb	r3, [r7, #11]
    break;
 8005780:	bf00      	nop
  }

  if (err != 0U)
 8005782:	7afb      	ldrb	r3, [r7, #11]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d11e      	bne.n	80057c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	88db      	ldrh	r3, [r3, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d016      	beq.n	80057be <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005790:	893b      	ldrh	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00e      	beq.n	80057b4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	88da      	ldrh	r2, [r3, #6]
 800579a:	893b      	ldrh	r3, [r7, #8]
 800579c:	4293      	cmp	r3, r2
 800579e:	bf28      	it	cs
 80057a0:	4613      	movcs	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80057a6:	893b      	ldrh	r3, [r7, #8]
 80057a8:	461a      	mov	r2, r3
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f9dc 	bl	8005b6a <USBD_CtlSendData>
 80057b2:	e009      	b.n	80057c8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9c6 	bl	8005b48 <USBD_CtlError>
 80057bc:	e004      	b.n	80057c8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa10 	bl	8005be4 <USBD_CtlSendStatus>
 80057c4:	e000      	b.n	80057c8 <USBD_GetDescriptor+0x2cc>
    return;
 80057c6:	bf00      	nop
    }
  }
}
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop

080057d0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	889b      	ldrh	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d130      	bne.n	8005844 <USBD_SetAddress+0x74>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	88db      	ldrh	r3, [r3, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d12c      	bne.n	8005844 <USBD_SetAddress+0x74>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	885b      	ldrh	r3, [r3, #2]
 80057ee:	2b7f      	cmp	r3, #127	; 0x7f
 80057f0:	d828      	bhi.n	8005844 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	885b      	ldrh	r3, [r3, #2]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005804:	2b03      	cmp	r3, #3
 8005806:	d104      	bne.n	8005812 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f99c 	bl	8005b48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005810:	e01c      	b.n	800584c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	7bfa      	ldrb	r2, [r7, #15]
 8005816:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fbae 	bl	8005f80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f9dd 	bl	8005be4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005838:	e008      	b.n	800584c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005842:	e003      	b.n	800584c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f97e 	bl	8005b48 <USBD_CtlError>
  }
}
 800584c:	bf00      	nop
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	885b      	ldrh	r3, [r3, #2]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	4b4b      	ldr	r3, [pc, #300]	; (8005998 <USBD_SetConfig+0x144>)
 800586a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800586c:	4b4a      	ldr	r3, [pc, #296]	; (8005998 <USBD_SetConfig+0x144>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d905      	bls.n	8005880 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f966 	bl	8005b48 <USBD_CtlError>
    return USBD_FAIL;
 800587c:	2303      	movs	r3, #3
 800587e:	e087      	b.n	8005990 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005886:	2b02      	cmp	r3, #2
 8005888:	d002      	beq.n	8005890 <USBD_SetConfig+0x3c>
 800588a:	2b03      	cmp	r3, #3
 800588c:	d025      	beq.n	80058da <USBD_SetConfig+0x86>
 800588e:	e071      	b.n	8005974 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005890:	4b41      	ldr	r3, [pc, #260]	; (8005998 <USBD_SetConfig+0x144>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01c      	beq.n	80058d2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005898:	4b3f      	ldr	r3, [pc, #252]	; (8005998 <USBD_SetConfig+0x144>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80058a2:	4b3d      	ldr	r3, [pc, #244]	; (8005998 <USBD_SetConfig+0x144>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff f9a7 	bl	8004bfc <USBD_SetClassConfig>
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d004      	beq.n	80058c2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f944 	bl	8005b48 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80058c0:	e065      	b.n	800598e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f98e 	bl	8005be4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2203      	movs	r2, #3
 80058cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80058d0:	e05d      	b.n	800598e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f986 	bl	8005be4 <USBD_CtlSendStatus>
    break;
 80058d8:	e059      	b.n	800598e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80058da:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <USBD_SetConfig+0x144>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d112      	bne.n	8005908 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80058ea:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <USBD_SetConfig+0x144>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80058f4:	4b28      	ldr	r3, [pc, #160]	; (8005998 <USBD_SetConfig+0x144>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff f99a 	bl	8004c34 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f96f 	bl	8005be4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005906:	e042      	b.n	800598e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005908:	4b23      	ldr	r3, [pc, #140]	; (8005998 <USBD_SetConfig+0x144>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d02a      	beq.n	800596c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff f988 	bl	8004c34 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005924:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <USBD_SetConfig+0x144>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800592e:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <USBD_SetConfig+0x144>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff f961 	bl	8004bfc <USBD_SetClassConfig>
 800593a:	4603      	mov	r3, r0
 800593c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00f      	beq.n	8005964 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8fe 	bl	8005b48 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff f96d 	bl	8004c34 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005962:	e014      	b.n	800598e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f93d 	bl	8005be4 <USBD_CtlSendStatus>
    break;
 800596a:	e010      	b.n	800598e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f939 	bl	8005be4 <USBD_CtlSendStatus>
    break;
 8005972:	e00c      	b.n	800598e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8e6 	bl	8005b48 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <USBD_SetConfig+0x144>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff f956 	bl	8004c34 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005988:	2303      	movs	r3, #3
 800598a:	73fb      	strb	r3, [r7, #15]
    break;
 800598c:	bf00      	nop
  }

  return ret;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000238 	.word	0x20000238

0800599c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	88db      	ldrh	r3, [r3, #6]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d004      	beq.n	80059b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8c9 	bl	8005b48 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80059b6:	e021      	b.n	80059fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	db17      	blt.n	80059f2 <USBD_GetConfig+0x56>
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	dd02      	ble.n	80059cc <USBD_GetConfig+0x30>
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d00b      	beq.n	80059e2 <USBD_GetConfig+0x46>
 80059ca:	e012      	b.n	80059f2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3308      	adds	r3, #8
 80059d6:	2201      	movs	r2, #1
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8c5 	bl	8005b6a <USBD_CtlSendData>
      break;
 80059e0:	e00c      	b.n	80059fc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	2201      	movs	r2, #1
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f8bd 	bl	8005b6a <USBD_CtlSendData>
      break;
 80059f0:	e004      	b.n	80059fc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8a7 	bl	8005b48 <USBD_CtlError>
      break;
 80059fa:	bf00      	nop
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a14:	3b01      	subs	r3, #1
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d81e      	bhi.n	8005a58 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	88db      	ldrh	r3, [r3, #6]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d004      	beq.n	8005a2c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f88f 	bl	8005b48 <USBD_CtlError>
      break;
 8005a2a:	e01a      	b.n	8005a62 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f043 0202 	orr.w	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f88a 	bl	8005b6a <USBD_CtlSendData>
    break;
 8005a56:	e004      	b.n	8005a62 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f874 	bl	8005b48 <USBD_CtlError>
    break;
 8005a60:	bf00      	nop
  }
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	885b      	ldrh	r3, [r3, #2]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d106      	bne.n	8005a8a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f8ad 	bl	8005be4 <USBD_CtlSendStatus>
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d80b      	bhi.n	8005ac0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	885b      	ldrh	r3, [r3, #2]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d10c      	bne.n	8005aca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f893 	bl	8005be4 <USBD_CtlSendStatus>
      }
      break;
 8005abe:	e004      	b.n	8005aca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f840 	bl	8005b48 <USBD_CtlError>
      break;
 8005ac8:	e000      	b.n	8005acc <USBD_ClrFeature+0x3a>
      break;
 8005aca:	bf00      	nop
  }
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3301      	adds	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	781a      	ldrb	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fad3 	bl	80050aa <SWAPBYTE>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff fac6 	bl	80050aa <SWAPBYTE>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	461a      	mov	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fab9 	bl	80050aa <SWAPBYTE>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	80da      	strh	r2, [r3, #6]
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b52:	2180      	movs	r1, #128	; 0x80
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f9a9 	bl	8005eac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f9a5 	bl	8005eac <USBD_LL_StallEP>
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	2100      	movs	r1, #0
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fa14 	bl	8005fbe <USBD_LL_Transmit>

  return USBD_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fa03 	bl	8005fbe <USBD_LL_Transmit>

  return USBD_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa13 	bl	8006000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f9df 	bl	8005fbe <USBD_LL_Transmit>

  return USBD_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2205      	movs	r2, #5
 8005c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f9ed 	bl	8006000 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <CDC_Transmit_FS+0x48>)
 8005c42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e00b      	b.n	8005c6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005c56:	887b      	ldrh	r3, [r7, #2]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	4806      	ldr	r0, [pc, #24]	; (8005c78 <CDC_Transmit_FS+0x48>)
 8005c5e:	f7fe ff79 	bl	8004b54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005c62:	4805      	ldr	r0, [pc, #20]	; (8005c78 <CDC_Transmit_FS+0x48>)
 8005c64:	f7fe ff8f 	bl	8004b86 <USBD_CDC_TransmitPacket>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200003dc 	.word	0x200003dc

08005c7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7fe ffe6 	bl	8004c64 <USBD_LL_SetupStage>
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f7ff f81e 	bl	8004d0a <USBD_LL_DataOutStage>
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	3348      	adds	r3, #72	; 0x48
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f7ff f867 	bl	8004dd0 <USBD_LL_DataInStage>
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff f96b 	bl	8004ff4 <USBD_LL_SOF>
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
 8005d3e:	e008      	b.n	8005d52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d102      	bne.n	8005d4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	e001      	b.n	8005d52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005d4e:	f7fb fa53 	bl	80011f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d58:	7bfa      	ldrb	r2, [r7, #15]
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff f90e 	bl	8004f7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff f8c7 	bl	8004efc <USBD_LL_Reset>
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff f909 	bl	8004f9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <HAL_PCD_SuspendCallback+0x48>)
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	4a03      	ldr	r2, [pc, #12]	; (8005dc0 <HAL_PCD_SuspendCallback+0x48>)
 8005db2:	f043 0306 	orr.w	r3, r3, #6
 8005db6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	e000ed00 	.word	0xe000ed00

08005dc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff f8f8 	bl	8004fc8 <USBD_LL_Resume>
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005df2:	78fa      	ldrb	r2, [r7, #3]
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff f923 	bl	8005042 <USBD_LL_IsoOUTIncomplete>
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff f904 	bl	8005028 <USBD_LL_IsoINIncomplete>
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff f910 	bl	800505c <USBD_LL_DevConnected>
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff f90d 	bl	8005072 <USBD_LL_DevDisconnected>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	4608      	mov	r0, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	70fb      	strb	r3, [r7, #3]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70bb      	strb	r3, [r7, #2]
 8005e76:	4613      	mov	r3, r2
 8005e78:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005e88:	78bb      	ldrb	r3, [r7, #2]
 8005e8a:	883a      	ldrh	r2, [r7, #0]
 8005e8c:	78f9      	ldrb	r1, [r7, #3]
 8005e8e:	f7fc fa2b 	bl	80022e8 <HAL_PCD_EP_Open>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f8d3 	bl	8006044 <USBD_Get_USB_Status>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fc fb09 	bl	80024e2 <HAL_PCD_EP_SetStall>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f8b4 	bl	8006044 <USBD_Get_USB_Status>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fc fb4e 	bl	80025aa <HAL_PCD_EP_ClrStall>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f895 	bl	8006044 <USBD_Get_USB_Status>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	da0b      	bge.n	8005f5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	333e      	adds	r3, #62	; 0x3e
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	e00b      	b.n	8005f74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fc f97d 	bl	800229e <HAL_PCD_SetAddress>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f84a 	bl	8006044 <USBD_Get_USB_Status>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005fdc:	7af9      	ldrb	r1, [r7, #11]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	f7fc fa34 	bl	800244e <HAL_PCD_EP_Transmit>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 f829 	bl	8006044 <USBD_Get_USB_Status>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005ff6:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	460b      	mov	r3, r1
 800600e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800601e:	7af9      	ldrb	r1, [r7, #11]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	f7fc f9c8 	bl	80023b8 <HAL_PCD_EP_Receive>
 8006028:	4603      	mov	r3, r0
 800602a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f808 	bl	8006044 <USBD_Get_USB_Status>
 8006034:	4603      	mov	r3, r0
 8006036:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006038:	7dbb      	ldrb	r3, [r7, #22]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	2b03      	cmp	r3, #3
 8006056:	d817      	bhi.n	8006088 <USBD_Get_USB_Status+0x44>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <USBD_Get_USB_Status+0x1c>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006071 	.word	0x08006071
 8006064:	08006077 	.word	0x08006077
 8006068:	0800607d 	.word	0x0800607d
 800606c:	08006083 	.word	0x08006083
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	73fb      	strb	r3, [r7, #15]
    break;
 8006074:	e00b      	b.n	800608e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006076:	2303      	movs	r3, #3
 8006078:	73fb      	strb	r3, [r7, #15]
    break;
 800607a:	e008      	b.n	800608e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
    break;
 8006080:	e005      	b.n	800608e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006082:	2303      	movs	r3, #3
 8006084:	73fb      	strb	r3, [r7, #15]
    break;
 8006086:	e002      	b.n	800608e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006088:	2303      	movs	r3, #3
 800608a:	73fb      	strb	r3, [r7, #15]
    break;
 800608c:	bf00      	nop
  }
  return usb_status;
 800608e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <__errno>:
 800609c:	4b01      	ldr	r3, [pc, #4]	; (80060a4 <__errno+0x8>)
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	2000000c 	.word	0x2000000c

080060a8 <__libc_init_array>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4e0d      	ldr	r6, [pc, #52]	; (80060e0 <__libc_init_array+0x38>)
 80060ac:	4c0d      	ldr	r4, [pc, #52]	; (80060e4 <__libc_init_array+0x3c>)
 80060ae:	1ba4      	subs	r4, r4, r6
 80060b0:	10a4      	asrs	r4, r4, #2
 80060b2:	2500      	movs	r5, #0
 80060b4:	42a5      	cmp	r5, r4
 80060b6:	d109      	bne.n	80060cc <__libc_init_array+0x24>
 80060b8:	4e0b      	ldr	r6, [pc, #44]	; (80060e8 <__libc_init_array+0x40>)
 80060ba:	4c0c      	ldr	r4, [pc, #48]	; (80060ec <__libc_init_array+0x44>)
 80060bc:	f002 f85c 	bl	8008178 <_init>
 80060c0:	1ba4      	subs	r4, r4, r6
 80060c2:	10a4      	asrs	r4, r4, #2
 80060c4:	2500      	movs	r5, #0
 80060c6:	42a5      	cmp	r5, r4
 80060c8:	d105      	bne.n	80060d6 <__libc_init_array+0x2e>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060d0:	4798      	blx	r3
 80060d2:	3501      	adds	r5, #1
 80060d4:	e7ee      	b.n	80060b4 <__libc_init_array+0xc>
 80060d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060da:	4798      	blx	r3
 80060dc:	3501      	adds	r5, #1
 80060de:	e7f2      	b.n	80060c6 <__libc_init_array+0x1e>
 80060e0:	08008428 	.word	0x08008428
 80060e4:	08008428 	.word	0x08008428
 80060e8:	08008428 	.word	0x08008428
 80060ec:	0800842c 	.word	0x0800842c

080060f0 <malloc>:
 80060f0:	4b02      	ldr	r3, [pc, #8]	; (80060fc <malloc+0xc>)
 80060f2:	4601      	mov	r1, r0
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	f000 b859 	b.w	80061ac <_malloc_r>
 80060fa:	bf00      	nop
 80060fc:	2000000c 	.word	0x2000000c

08006100 <memset>:
 8006100:	4402      	add	r2, r0
 8006102:	4603      	mov	r3, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	d100      	bne.n	800610a <memset+0xa>
 8006108:	4770      	bx	lr
 800610a:	f803 1b01 	strb.w	r1, [r3], #1
 800610e:	e7f9      	b.n	8006104 <memset+0x4>

08006110 <_free_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4605      	mov	r5, r0
 8006114:	2900      	cmp	r1, #0
 8006116:	d045      	beq.n	80061a4 <_free_r+0x94>
 8006118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800611c:	1f0c      	subs	r4, r1, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	bfb8      	it	lt
 8006122:	18e4      	addlt	r4, r4, r3
 8006124:	f001 fb85 	bl	8007832 <__malloc_lock>
 8006128:	4a1f      	ldr	r2, [pc, #124]	; (80061a8 <_free_r+0x98>)
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	4610      	mov	r0, r2
 800612e:	b933      	cbnz	r3, 800613e <_free_r+0x2e>
 8006130:	6063      	str	r3, [r4, #4]
 8006132:	6014      	str	r4, [r2, #0]
 8006134:	4628      	mov	r0, r5
 8006136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800613a:	f001 bb7b 	b.w	8007834 <__malloc_unlock>
 800613e:	42a3      	cmp	r3, r4
 8006140:	d90c      	bls.n	800615c <_free_r+0x4c>
 8006142:	6821      	ldr	r1, [r4, #0]
 8006144:	1862      	adds	r2, r4, r1
 8006146:	4293      	cmp	r3, r2
 8006148:	bf04      	itt	eq
 800614a:	681a      	ldreq	r2, [r3, #0]
 800614c:	685b      	ldreq	r3, [r3, #4]
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	bf04      	itt	eq
 8006152:	1852      	addeq	r2, r2, r1
 8006154:	6022      	streq	r2, [r4, #0]
 8006156:	6004      	str	r4, [r0, #0]
 8006158:	e7ec      	b.n	8006134 <_free_r+0x24>
 800615a:	4613      	mov	r3, r2
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	b10a      	cbz	r2, 8006164 <_free_r+0x54>
 8006160:	42a2      	cmp	r2, r4
 8006162:	d9fa      	bls.n	800615a <_free_r+0x4a>
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	1858      	adds	r0, r3, r1
 8006168:	42a0      	cmp	r0, r4
 800616a:	d10b      	bne.n	8006184 <_free_r+0x74>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	4401      	add	r1, r0
 8006170:	1858      	adds	r0, r3, r1
 8006172:	4282      	cmp	r2, r0
 8006174:	6019      	str	r1, [r3, #0]
 8006176:	d1dd      	bne.n	8006134 <_free_r+0x24>
 8006178:	6810      	ldr	r0, [r2, #0]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	4401      	add	r1, r0
 8006180:	6019      	str	r1, [r3, #0]
 8006182:	e7d7      	b.n	8006134 <_free_r+0x24>
 8006184:	d902      	bls.n	800618c <_free_r+0x7c>
 8006186:	230c      	movs	r3, #12
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	e7d3      	b.n	8006134 <_free_r+0x24>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	1821      	adds	r1, r4, r0
 8006190:	428a      	cmp	r2, r1
 8006192:	bf04      	itt	eq
 8006194:	6811      	ldreq	r1, [r2, #0]
 8006196:	6852      	ldreq	r2, [r2, #4]
 8006198:	6062      	str	r2, [r4, #4]
 800619a:	bf04      	itt	eq
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	605c      	str	r4, [r3, #4]
 80061a2:	e7c7      	b.n	8006134 <_free_r+0x24>
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
 80061a6:	bf00      	nop
 80061a8:	2000023c 	.word	0x2000023c

080061ac <_malloc_r>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	1ccd      	adds	r5, r1, #3
 80061b0:	f025 0503 	bic.w	r5, r5, #3
 80061b4:	3508      	adds	r5, #8
 80061b6:	2d0c      	cmp	r5, #12
 80061b8:	bf38      	it	cc
 80061ba:	250c      	movcc	r5, #12
 80061bc:	2d00      	cmp	r5, #0
 80061be:	4606      	mov	r6, r0
 80061c0:	db01      	blt.n	80061c6 <_malloc_r+0x1a>
 80061c2:	42a9      	cmp	r1, r5
 80061c4:	d903      	bls.n	80061ce <_malloc_r+0x22>
 80061c6:	230c      	movs	r3, #12
 80061c8:	6033      	str	r3, [r6, #0]
 80061ca:	2000      	movs	r0, #0
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
 80061ce:	f001 fb30 	bl	8007832 <__malloc_lock>
 80061d2:	4a21      	ldr	r2, [pc, #132]	; (8006258 <_malloc_r+0xac>)
 80061d4:	6814      	ldr	r4, [r2, #0]
 80061d6:	4621      	mov	r1, r4
 80061d8:	b991      	cbnz	r1, 8006200 <_malloc_r+0x54>
 80061da:	4c20      	ldr	r4, [pc, #128]	; (800625c <_malloc_r+0xb0>)
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	b91b      	cbnz	r3, 80061e8 <_malloc_r+0x3c>
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 fc99 	bl	8006b18 <_sbrk_r>
 80061e6:	6020      	str	r0, [r4, #0]
 80061e8:	4629      	mov	r1, r5
 80061ea:	4630      	mov	r0, r6
 80061ec:	f000 fc94 	bl	8006b18 <_sbrk_r>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d124      	bne.n	800623e <_malloc_r+0x92>
 80061f4:	230c      	movs	r3, #12
 80061f6:	6033      	str	r3, [r6, #0]
 80061f8:	4630      	mov	r0, r6
 80061fa:	f001 fb1b 	bl	8007834 <__malloc_unlock>
 80061fe:	e7e4      	b.n	80061ca <_malloc_r+0x1e>
 8006200:	680b      	ldr	r3, [r1, #0]
 8006202:	1b5b      	subs	r3, r3, r5
 8006204:	d418      	bmi.n	8006238 <_malloc_r+0x8c>
 8006206:	2b0b      	cmp	r3, #11
 8006208:	d90f      	bls.n	800622a <_malloc_r+0x7e>
 800620a:	600b      	str	r3, [r1, #0]
 800620c:	50cd      	str	r5, [r1, r3]
 800620e:	18cc      	adds	r4, r1, r3
 8006210:	4630      	mov	r0, r6
 8006212:	f001 fb0f 	bl	8007834 <__malloc_unlock>
 8006216:	f104 000b 	add.w	r0, r4, #11
 800621a:	1d23      	adds	r3, r4, #4
 800621c:	f020 0007 	bic.w	r0, r0, #7
 8006220:	1ac3      	subs	r3, r0, r3
 8006222:	d0d3      	beq.n	80061cc <_malloc_r+0x20>
 8006224:	425a      	negs	r2, r3
 8006226:	50e2      	str	r2, [r4, r3]
 8006228:	e7d0      	b.n	80061cc <_malloc_r+0x20>
 800622a:	428c      	cmp	r4, r1
 800622c:	684b      	ldr	r3, [r1, #4]
 800622e:	bf16      	itet	ne
 8006230:	6063      	strne	r3, [r4, #4]
 8006232:	6013      	streq	r3, [r2, #0]
 8006234:	460c      	movne	r4, r1
 8006236:	e7eb      	b.n	8006210 <_malloc_r+0x64>
 8006238:	460c      	mov	r4, r1
 800623a:	6849      	ldr	r1, [r1, #4]
 800623c:	e7cc      	b.n	80061d8 <_malloc_r+0x2c>
 800623e:	1cc4      	adds	r4, r0, #3
 8006240:	f024 0403 	bic.w	r4, r4, #3
 8006244:	42a0      	cmp	r0, r4
 8006246:	d005      	beq.n	8006254 <_malloc_r+0xa8>
 8006248:	1a21      	subs	r1, r4, r0
 800624a:	4630      	mov	r0, r6
 800624c:	f000 fc64 	bl	8006b18 <_sbrk_r>
 8006250:	3001      	adds	r0, #1
 8006252:	d0cf      	beq.n	80061f4 <_malloc_r+0x48>
 8006254:	6025      	str	r5, [r4, #0]
 8006256:	e7db      	b.n	8006210 <_malloc_r+0x64>
 8006258:	2000023c 	.word	0x2000023c
 800625c:	20000240 	.word	0x20000240

08006260 <__cvt>:
 8006260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	ec55 4b10 	vmov	r4, r5, d0
 8006268:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800626a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800626e:	2d00      	cmp	r5, #0
 8006270:	460e      	mov	r6, r1
 8006272:	4691      	mov	r9, r2
 8006274:	4619      	mov	r1, r3
 8006276:	bfb8      	it	lt
 8006278:	4622      	movlt	r2, r4
 800627a:	462b      	mov	r3, r5
 800627c:	f027 0720 	bic.w	r7, r7, #32
 8006280:	bfbb      	ittet	lt
 8006282:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006286:	461d      	movlt	r5, r3
 8006288:	2300      	movge	r3, #0
 800628a:	232d      	movlt	r3, #45	; 0x2d
 800628c:	bfb8      	it	lt
 800628e:	4614      	movlt	r4, r2
 8006290:	2f46      	cmp	r7, #70	; 0x46
 8006292:	700b      	strb	r3, [r1, #0]
 8006294:	d004      	beq.n	80062a0 <__cvt+0x40>
 8006296:	2f45      	cmp	r7, #69	; 0x45
 8006298:	d100      	bne.n	800629c <__cvt+0x3c>
 800629a:	3601      	adds	r6, #1
 800629c:	2102      	movs	r1, #2
 800629e:	e000      	b.n	80062a2 <__cvt+0x42>
 80062a0:	2103      	movs	r1, #3
 80062a2:	ab03      	add	r3, sp, #12
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	ab02      	add	r3, sp, #8
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	4632      	mov	r2, r6
 80062ac:	4653      	mov	r3, sl
 80062ae:	ec45 4b10 	vmov	d0, r4, r5
 80062b2:	f000 fced 	bl	8006c90 <_dtoa_r>
 80062b6:	2f47      	cmp	r7, #71	; 0x47
 80062b8:	4680      	mov	r8, r0
 80062ba:	d102      	bne.n	80062c2 <__cvt+0x62>
 80062bc:	f019 0f01 	tst.w	r9, #1
 80062c0:	d026      	beq.n	8006310 <__cvt+0xb0>
 80062c2:	2f46      	cmp	r7, #70	; 0x46
 80062c4:	eb08 0906 	add.w	r9, r8, r6
 80062c8:	d111      	bne.n	80062ee <__cvt+0x8e>
 80062ca:	f898 3000 	ldrb.w	r3, [r8]
 80062ce:	2b30      	cmp	r3, #48	; 0x30
 80062d0:	d10a      	bne.n	80062e8 <__cvt+0x88>
 80062d2:	2200      	movs	r2, #0
 80062d4:	2300      	movs	r3, #0
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7fa fbf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80062de:	b918      	cbnz	r0, 80062e8 <__cvt+0x88>
 80062e0:	f1c6 0601 	rsb	r6, r6, #1
 80062e4:	f8ca 6000 	str.w	r6, [sl]
 80062e8:	f8da 3000 	ldr.w	r3, [sl]
 80062ec:	4499      	add	r9, r3
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7fa fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80062fa:	b938      	cbnz	r0, 800630c <__cvt+0xac>
 80062fc:	2230      	movs	r2, #48	; 0x30
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	454b      	cmp	r3, r9
 8006302:	d205      	bcs.n	8006310 <__cvt+0xb0>
 8006304:	1c59      	adds	r1, r3, #1
 8006306:	9103      	str	r1, [sp, #12]
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	e7f8      	b.n	80062fe <__cvt+0x9e>
 800630c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006314:	eba3 0308 	sub.w	r3, r3, r8
 8006318:	4640      	mov	r0, r8
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	b004      	add	sp, #16
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006322 <__exponent>:
 8006322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006324:	2900      	cmp	r1, #0
 8006326:	4604      	mov	r4, r0
 8006328:	bfba      	itte	lt
 800632a:	4249      	neglt	r1, r1
 800632c:	232d      	movlt	r3, #45	; 0x2d
 800632e:	232b      	movge	r3, #43	; 0x2b
 8006330:	2909      	cmp	r1, #9
 8006332:	f804 2b02 	strb.w	r2, [r4], #2
 8006336:	7043      	strb	r3, [r0, #1]
 8006338:	dd20      	ble.n	800637c <__exponent+0x5a>
 800633a:	f10d 0307 	add.w	r3, sp, #7
 800633e:	461f      	mov	r7, r3
 8006340:	260a      	movs	r6, #10
 8006342:	fb91 f5f6 	sdiv	r5, r1, r6
 8006346:	fb06 1115 	mls	r1, r6, r5, r1
 800634a:	3130      	adds	r1, #48	; 0x30
 800634c:	2d09      	cmp	r5, #9
 800634e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006352:	f103 32ff 	add.w	r2, r3, #4294967295
 8006356:	4629      	mov	r1, r5
 8006358:	dc09      	bgt.n	800636e <__exponent+0x4c>
 800635a:	3130      	adds	r1, #48	; 0x30
 800635c:	3b02      	subs	r3, #2
 800635e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006362:	42bb      	cmp	r3, r7
 8006364:	4622      	mov	r2, r4
 8006366:	d304      	bcc.n	8006372 <__exponent+0x50>
 8006368:	1a10      	subs	r0, r2, r0
 800636a:	b003      	add	sp, #12
 800636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636e:	4613      	mov	r3, r2
 8006370:	e7e7      	b.n	8006342 <__exponent+0x20>
 8006372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006376:	f804 2b01 	strb.w	r2, [r4], #1
 800637a:	e7f2      	b.n	8006362 <__exponent+0x40>
 800637c:	2330      	movs	r3, #48	; 0x30
 800637e:	4419      	add	r1, r3
 8006380:	7083      	strb	r3, [r0, #2]
 8006382:	1d02      	adds	r2, r0, #4
 8006384:	70c1      	strb	r1, [r0, #3]
 8006386:	e7ef      	b.n	8006368 <__exponent+0x46>

08006388 <_printf_float>:
 8006388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638c:	b08d      	sub	sp, #52	; 0x34
 800638e:	460c      	mov	r4, r1
 8006390:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006394:	4616      	mov	r6, r2
 8006396:	461f      	mov	r7, r3
 8006398:	4605      	mov	r5, r0
 800639a:	f001 fa31 	bl	8007800 <_localeconv_r>
 800639e:	6803      	ldr	r3, [r0, #0]
 80063a0:	9304      	str	r3, [sp, #16]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7f9 ff14 	bl	80001d0 <strlen>
 80063a8:	2300      	movs	r3, #0
 80063aa:	930a      	str	r3, [sp, #40]	; 0x28
 80063ac:	f8d8 3000 	ldr.w	r3, [r8]
 80063b0:	9005      	str	r0, [sp, #20]
 80063b2:	3307      	adds	r3, #7
 80063b4:	f023 0307 	bic.w	r3, r3, #7
 80063b8:	f103 0208 	add.w	r2, r3, #8
 80063bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063c0:	f8d4 b000 	ldr.w	fp, [r4]
 80063c4:	f8c8 2000 	str.w	r2, [r8]
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80063d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063d8:	9307      	str	r3, [sp, #28]
 80063da:	f8cd 8018 	str.w	r8, [sp, #24]
 80063de:	f04f 32ff 	mov.w	r2, #4294967295
 80063e2:	4ba7      	ldr	r3, [pc, #668]	; (8006680 <_printf_float+0x2f8>)
 80063e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063e8:	f7fa fba0 	bl	8000b2c <__aeabi_dcmpun>
 80063ec:	bb70      	cbnz	r0, 800644c <_printf_float+0xc4>
 80063ee:	f04f 32ff 	mov.w	r2, #4294967295
 80063f2:	4ba3      	ldr	r3, [pc, #652]	; (8006680 <_printf_float+0x2f8>)
 80063f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063f8:	f7fa fb7a 	bl	8000af0 <__aeabi_dcmple>
 80063fc:	bb30      	cbnz	r0, 800644c <_printf_float+0xc4>
 80063fe:	2200      	movs	r2, #0
 8006400:	2300      	movs	r3, #0
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	f7fa fb69 	bl	8000adc <__aeabi_dcmplt>
 800640a:	b110      	cbz	r0, 8006412 <_printf_float+0x8a>
 800640c:	232d      	movs	r3, #45	; 0x2d
 800640e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006412:	4a9c      	ldr	r2, [pc, #624]	; (8006684 <_printf_float+0x2fc>)
 8006414:	4b9c      	ldr	r3, [pc, #624]	; (8006688 <_printf_float+0x300>)
 8006416:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800641a:	bf8c      	ite	hi
 800641c:	4690      	movhi	r8, r2
 800641e:	4698      	movls	r8, r3
 8006420:	2303      	movs	r3, #3
 8006422:	f02b 0204 	bic.w	r2, fp, #4
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	6022      	str	r2, [r4, #0]
 800642a:	f04f 0900 	mov.w	r9, #0
 800642e:	9700      	str	r7, [sp, #0]
 8006430:	4633      	mov	r3, r6
 8006432:	aa0b      	add	r2, sp, #44	; 0x2c
 8006434:	4621      	mov	r1, r4
 8006436:	4628      	mov	r0, r5
 8006438:	f000 f9e6 	bl	8006808 <_printf_common>
 800643c:	3001      	adds	r0, #1
 800643e:	f040 808d 	bne.w	800655c <_printf_float+0x1d4>
 8006442:	f04f 30ff 	mov.w	r0, #4294967295
 8006446:	b00d      	add	sp, #52	; 0x34
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	4642      	mov	r2, r8
 800644e:	464b      	mov	r3, r9
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7fa fb6a 	bl	8000b2c <__aeabi_dcmpun>
 8006458:	b110      	cbz	r0, 8006460 <_printf_float+0xd8>
 800645a:	4a8c      	ldr	r2, [pc, #560]	; (800668c <_printf_float+0x304>)
 800645c:	4b8c      	ldr	r3, [pc, #560]	; (8006690 <_printf_float+0x308>)
 800645e:	e7da      	b.n	8006416 <_printf_float+0x8e>
 8006460:	6861      	ldr	r1, [r4, #4]
 8006462:	1c4b      	adds	r3, r1, #1
 8006464:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006468:	a80a      	add	r0, sp, #40	; 0x28
 800646a:	d13e      	bne.n	80064ea <_printf_float+0x162>
 800646c:	2306      	movs	r3, #6
 800646e:	6063      	str	r3, [r4, #4]
 8006470:	2300      	movs	r3, #0
 8006472:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006476:	ab09      	add	r3, sp, #36	; 0x24
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	ec49 8b10 	vmov	d0, r8, r9
 800647e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006482:	6022      	str	r2, [r4, #0]
 8006484:	f8cd a004 	str.w	sl, [sp, #4]
 8006488:	6861      	ldr	r1, [r4, #4]
 800648a:	4628      	mov	r0, r5
 800648c:	f7ff fee8 	bl	8006260 <__cvt>
 8006490:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006494:	2b47      	cmp	r3, #71	; 0x47
 8006496:	4680      	mov	r8, r0
 8006498:	d109      	bne.n	80064ae <_printf_float+0x126>
 800649a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649c:	1cd8      	adds	r0, r3, #3
 800649e:	db02      	blt.n	80064a6 <_printf_float+0x11e>
 80064a0:	6862      	ldr	r2, [r4, #4]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	dd47      	ble.n	8006536 <_printf_float+0x1ae>
 80064a6:	f1aa 0a02 	sub.w	sl, sl, #2
 80064aa:	fa5f fa8a 	uxtb.w	sl, sl
 80064ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80064b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064b4:	d824      	bhi.n	8006500 <_printf_float+0x178>
 80064b6:	3901      	subs	r1, #1
 80064b8:	4652      	mov	r2, sl
 80064ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064be:	9109      	str	r1, [sp, #36]	; 0x24
 80064c0:	f7ff ff2f 	bl	8006322 <__exponent>
 80064c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c6:	1813      	adds	r3, r2, r0
 80064c8:	2a01      	cmp	r2, #1
 80064ca:	4681      	mov	r9, r0
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	dc02      	bgt.n	80064d6 <_printf_float+0x14e>
 80064d0:	6822      	ldr	r2, [r4, #0]
 80064d2:	07d1      	lsls	r1, r2, #31
 80064d4:	d501      	bpl.n	80064da <_printf_float+0x152>
 80064d6:	3301      	adds	r3, #1
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0a5      	beq.n	800642e <_printf_float+0xa6>
 80064e2:	232d      	movs	r3, #45	; 0x2d
 80064e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064e8:	e7a1      	b.n	800642e <_printf_float+0xa6>
 80064ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80064ee:	f000 8177 	beq.w	80067e0 <_printf_float+0x458>
 80064f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80064f6:	d1bb      	bne.n	8006470 <_printf_float+0xe8>
 80064f8:	2900      	cmp	r1, #0
 80064fa:	d1b9      	bne.n	8006470 <_printf_float+0xe8>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e7b6      	b.n	800646e <_printf_float+0xe6>
 8006500:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006504:	d119      	bne.n	800653a <_printf_float+0x1b2>
 8006506:	2900      	cmp	r1, #0
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	dd0c      	ble.n	8006526 <_printf_float+0x19e>
 800650c:	6121      	str	r1, [r4, #16]
 800650e:	b913      	cbnz	r3, 8006516 <_printf_float+0x18e>
 8006510:	6822      	ldr	r2, [r4, #0]
 8006512:	07d2      	lsls	r2, r2, #31
 8006514:	d502      	bpl.n	800651c <_printf_float+0x194>
 8006516:	3301      	adds	r3, #1
 8006518:	440b      	add	r3, r1
 800651a:	6123      	str	r3, [r4, #16]
 800651c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006520:	f04f 0900 	mov.w	r9, #0
 8006524:	e7d9      	b.n	80064da <_printf_float+0x152>
 8006526:	b913      	cbnz	r3, 800652e <_printf_float+0x1a6>
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	07d0      	lsls	r0, r2, #31
 800652c:	d501      	bpl.n	8006532 <_printf_float+0x1aa>
 800652e:	3302      	adds	r3, #2
 8006530:	e7f3      	b.n	800651a <_printf_float+0x192>
 8006532:	2301      	movs	r3, #1
 8006534:	e7f1      	b.n	800651a <_printf_float+0x192>
 8006536:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800653a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800653e:	4293      	cmp	r3, r2
 8006540:	db05      	blt.n	800654e <_printf_float+0x1c6>
 8006542:	6822      	ldr	r2, [r4, #0]
 8006544:	6123      	str	r3, [r4, #16]
 8006546:	07d1      	lsls	r1, r2, #31
 8006548:	d5e8      	bpl.n	800651c <_printf_float+0x194>
 800654a:	3301      	adds	r3, #1
 800654c:	e7e5      	b.n	800651a <_printf_float+0x192>
 800654e:	2b00      	cmp	r3, #0
 8006550:	bfd4      	ite	le
 8006552:	f1c3 0302 	rsble	r3, r3, #2
 8006556:	2301      	movgt	r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	e7de      	b.n	800651a <_printf_float+0x192>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	055a      	lsls	r2, r3, #21
 8006560:	d407      	bmi.n	8006572 <_printf_float+0x1ea>
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	4642      	mov	r2, r8
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	d12b      	bne.n	80065c8 <_printf_float+0x240>
 8006570:	e767      	b.n	8006442 <_printf_float+0xba>
 8006572:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006576:	f240 80dc 	bls.w	8006732 <_printf_float+0x3aa>
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006582:	f7fa faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006586:	2800      	cmp	r0, #0
 8006588:	d033      	beq.n	80065f2 <_printf_float+0x26a>
 800658a:	2301      	movs	r3, #1
 800658c:	4a41      	ldr	r2, [pc, #260]	; (8006694 <_printf_float+0x30c>)
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	f43f af54 	beq.w	8006442 <_printf_float+0xba>
 800659a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800659e:	429a      	cmp	r2, r3
 80065a0:	db02      	blt.n	80065a8 <_printf_float+0x220>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	07d8      	lsls	r0, r3, #31
 80065a6:	d50f      	bpl.n	80065c8 <_printf_float+0x240>
 80065a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	47b8      	blx	r7
 80065b2:	3001      	adds	r0, #1
 80065b4:	f43f af45 	beq.w	8006442 <_printf_float+0xba>
 80065b8:	f04f 0800 	mov.w	r8, #0
 80065bc:	f104 091a 	add.w	r9, r4, #26
 80065c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c2:	3b01      	subs	r3, #1
 80065c4:	4543      	cmp	r3, r8
 80065c6:	dc09      	bgt.n	80065dc <_printf_float+0x254>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	079b      	lsls	r3, r3, #30
 80065cc:	f100 8103 	bmi.w	80067d6 <_printf_float+0x44e>
 80065d0:	68e0      	ldr	r0, [r4, #12]
 80065d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d4:	4298      	cmp	r0, r3
 80065d6:	bfb8      	it	lt
 80065d8:	4618      	movlt	r0, r3
 80065da:	e734      	b.n	8006446 <_printf_float+0xbe>
 80065dc:	2301      	movs	r3, #1
 80065de:	464a      	mov	r2, r9
 80065e0:	4631      	mov	r1, r6
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	f43f af2b 	beq.w	8006442 <_printf_float+0xba>
 80065ec:	f108 0801 	add.w	r8, r8, #1
 80065f0:	e7e6      	b.n	80065c0 <_printf_float+0x238>
 80065f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dc2b      	bgt.n	8006650 <_printf_float+0x2c8>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4a26      	ldr	r2, [pc, #152]	; (8006694 <_printf_float+0x30c>)
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f af1d 	beq.w	8006442 <_printf_float+0xba>
 8006608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660a:	b923      	cbnz	r3, 8006616 <_printf_float+0x28e>
 800660c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660e:	b913      	cbnz	r3, 8006616 <_printf_float+0x28e>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	07d9      	lsls	r1, r3, #31
 8006614:	d5d8      	bpl.n	80065c8 <_printf_float+0x240>
 8006616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	f43f af0e 	beq.w	8006442 <_printf_float+0xba>
 8006626:	f04f 0900 	mov.w	r9, #0
 800662a:	f104 0a1a 	add.w	sl, r4, #26
 800662e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006630:	425b      	negs	r3, r3
 8006632:	454b      	cmp	r3, r9
 8006634:	dc01      	bgt.n	800663a <_printf_float+0x2b2>
 8006636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006638:	e794      	b.n	8006564 <_printf_float+0x1dc>
 800663a:	2301      	movs	r3, #1
 800663c:	4652      	mov	r2, sl
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	f43f aefc 	beq.w	8006442 <_printf_float+0xba>
 800664a:	f109 0901 	add.w	r9, r9, #1
 800664e:	e7ee      	b.n	800662e <_printf_float+0x2a6>
 8006650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006652:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006654:	429a      	cmp	r2, r3
 8006656:	bfa8      	it	ge
 8006658:	461a      	movge	r2, r3
 800665a:	2a00      	cmp	r2, #0
 800665c:	4691      	mov	r9, r2
 800665e:	dd07      	ble.n	8006670 <_printf_float+0x2e8>
 8006660:	4613      	mov	r3, r2
 8006662:	4631      	mov	r1, r6
 8006664:	4642      	mov	r2, r8
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f aee9 	beq.w	8006442 <_printf_float+0xba>
 8006670:	f104 031a 	add.w	r3, r4, #26
 8006674:	f04f 0b00 	mov.w	fp, #0
 8006678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800667c:	9306      	str	r3, [sp, #24]
 800667e:	e015      	b.n	80066ac <_printf_float+0x324>
 8006680:	7fefffff 	.word	0x7fefffff
 8006684:	080081c4 	.word	0x080081c4
 8006688:	080081c0 	.word	0x080081c0
 800668c:	080081cc 	.word	0x080081cc
 8006690:	080081c8 	.word	0x080081c8
 8006694:	080081d0 	.word	0x080081d0
 8006698:	2301      	movs	r3, #1
 800669a:	9a06      	ldr	r2, [sp, #24]
 800669c:	4631      	mov	r1, r6
 800669e:	4628      	mov	r0, r5
 80066a0:	47b8      	blx	r7
 80066a2:	3001      	adds	r0, #1
 80066a4:	f43f aecd 	beq.w	8006442 <_printf_float+0xba>
 80066a8:	f10b 0b01 	add.w	fp, fp, #1
 80066ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066b0:	ebaa 0309 	sub.w	r3, sl, r9
 80066b4:	455b      	cmp	r3, fp
 80066b6:	dcef      	bgt.n	8006698 <_printf_float+0x310>
 80066b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066bc:	429a      	cmp	r2, r3
 80066be:	44d0      	add	r8, sl
 80066c0:	db15      	blt.n	80066ee <_printf_float+0x366>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	07da      	lsls	r2, r3, #31
 80066c6:	d412      	bmi.n	80066ee <_printf_float+0x366>
 80066c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066cc:	eba3 020a 	sub.w	r2, r3, sl
 80066d0:	eba3 0a01 	sub.w	sl, r3, r1
 80066d4:	4592      	cmp	sl, r2
 80066d6:	bfa8      	it	ge
 80066d8:	4692      	movge	sl, r2
 80066da:	f1ba 0f00 	cmp.w	sl, #0
 80066de:	dc0e      	bgt.n	80066fe <_printf_float+0x376>
 80066e0:	f04f 0800 	mov.w	r8, #0
 80066e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066e8:	f104 091a 	add.w	r9, r4, #26
 80066ec:	e019      	b.n	8006722 <_printf_float+0x39a>
 80066ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	d1e5      	bne.n	80066c8 <_printf_float+0x340>
 80066fc:	e6a1      	b.n	8006442 <_printf_float+0xba>
 80066fe:	4653      	mov	r3, sl
 8006700:	4642      	mov	r2, r8
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	d1e9      	bne.n	80066e0 <_printf_float+0x358>
 800670c:	e699      	b.n	8006442 <_printf_float+0xba>
 800670e:	2301      	movs	r3, #1
 8006710:	464a      	mov	r2, r9
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f ae92 	beq.w	8006442 <_printf_float+0xba>
 800671e:	f108 0801 	add.w	r8, r8, #1
 8006722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	eba3 030a 	sub.w	r3, r3, sl
 800672c:	4543      	cmp	r3, r8
 800672e:	dcee      	bgt.n	800670e <_printf_float+0x386>
 8006730:	e74a      	b.n	80065c8 <_printf_float+0x240>
 8006732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006734:	2a01      	cmp	r2, #1
 8006736:	dc01      	bgt.n	800673c <_printf_float+0x3b4>
 8006738:	07db      	lsls	r3, r3, #31
 800673a:	d53a      	bpl.n	80067b2 <_printf_float+0x42a>
 800673c:	2301      	movs	r3, #1
 800673e:	4642      	mov	r2, r8
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f ae7b 	beq.w	8006442 <_printf_float+0xba>
 800674c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	f108 0801 	add.w	r8, r8, #1
 800675c:	f43f ae71 	beq.w	8006442 <_printf_float+0xba>
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	2200      	movs	r2, #0
 8006764:	f103 3aff 	add.w	sl, r3, #4294967295
 8006768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800676c:	2300      	movs	r3, #0
 800676e:	f7fa f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006772:	b9c8      	cbnz	r0, 80067a8 <_printf_float+0x420>
 8006774:	4653      	mov	r3, sl
 8006776:	4642      	mov	r2, r8
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	d10e      	bne.n	80067a0 <_printf_float+0x418>
 8006782:	e65e      	b.n	8006442 <_printf_float+0xba>
 8006784:	2301      	movs	r3, #1
 8006786:	4652      	mov	r2, sl
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f ae57 	beq.w	8006442 <_printf_float+0xba>
 8006794:	f108 0801 	add.w	r8, r8, #1
 8006798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800679a:	3b01      	subs	r3, #1
 800679c:	4543      	cmp	r3, r8
 800679e:	dcf1      	bgt.n	8006784 <_printf_float+0x3fc>
 80067a0:	464b      	mov	r3, r9
 80067a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067a6:	e6de      	b.n	8006566 <_printf_float+0x1de>
 80067a8:	f04f 0800 	mov.w	r8, #0
 80067ac:	f104 0a1a 	add.w	sl, r4, #26
 80067b0:	e7f2      	b.n	8006798 <_printf_float+0x410>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e7df      	b.n	8006776 <_printf_float+0x3ee>
 80067b6:	2301      	movs	r3, #1
 80067b8:	464a      	mov	r2, r9
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	f43f ae3e 	beq.w	8006442 <_printf_float+0xba>
 80067c6:	f108 0801 	add.w	r8, r8, #1
 80067ca:	68e3      	ldr	r3, [r4, #12]
 80067cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067ce:	1a9b      	subs	r3, r3, r2
 80067d0:	4543      	cmp	r3, r8
 80067d2:	dcf0      	bgt.n	80067b6 <_printf_float+0x42e>
 80067d4:	e6fc      	b.n	80065d0 <_printf_float+0x248>
 80067d6:	f04f 0800 	mov.w	r8, #0
 80067da:	f104 0919 	add.w	r9, r4, #25
 80067de:	e7f4      	b.n	80067ca <_printf_float+0x442>
 80067e0:	2900      	cmp	r1, #0
 80067e2:	f43f ae8b 	beq.w	80064fc <_printf_float+0x174>
 80067e6:	2300      	movs	r3, #0
 80067e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80067ec:	ab09      	add	r3, sp, #36	; 0x24
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	ec49 8b10 	vmov	d0, r8, r9
 80067f4:	6022      	str	r2, [r4, #0]
 80067f6:	f8cd a004 	str.w	sl, [sp, #4]
 80067fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067fe:	4628      	mov	r0, r5
 8006800:	f7ff fd2e 	bl	8006260 <__cvt>
 8006804:	4680      	mov	r8, r0
 8006806:	e648      	b.n	800649a <_printf_float+0x112>

08006808 <_printf_common>:
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	4691      	mov	r9, r2
 800680e:	461f      	mov	r7, r3
 8006810:	688a      	ldr	r2, [r1, #8]
 8006812:	690b      	ldr	r3, [r1, #16]
 8006814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006818:	4293      	cmp	r3, r2
 800681a:	bfb8      	it	lt
 800681c:	4613      	movlt	r3, r2
 800681e:	f8c9 3000 	str.w	r3, [r9]
 8006822:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006826:	4606      	mov	r6, r0
 8006828:	460c      	mov	r4, r1
 800682a:	b112      	cbz	r2, 8006832 <_printf_common+0x2a>
 800682c:	3301      	adds	r3, #1
 800682e:	f8c9 3000 	str.w	r3, [r9]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	0699      	lsls	r1, r3, #26
 8006836:	bf42      	ittt	mi
 8006838:	f8d9 3000 	ldrmi.w	r3, [r9]
 800683c:	3302      	addmi	r3, #2
 800683e:	f8c9 3000 	strmi.w	r3, [r9]
 8006842:	6825      	ldr	r5, [r4, #0]
 8006844:	f015 0506 	ands.w	r5, r5, #6
 8006848:	d107      	bne.n	800685a <_printf_common+0x52>
 800684a:	f104 0a19 	add.w	sl, r4, #25
 800684e:	68e3      	ldr	r3, [r4, #12]
 8006850:	f8d9 2000 	ldr.w	r2, [r9]
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	42ab      	cmp	r3, r5
 8006858:	dc28      	bgt.n	80068ac <_printf_common+0xa4>
 800685a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800685e:	6822      	ldr	r2, [r4, #0]
 8006860:	3300      	adds	r3, #0
 8006862:	bf18      	it	ne
 8006864:	2301      	movne	r3, #1
 8006866:	0692      	lsls	r2, r2, #26
 8006868:	d42d      	bmi.n	80068c6 <_printf_common+0xbe>
 800686a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800686e:	4639      	mov	r1, r7
 8006870:	4630      	mov	r0, r6
 8006872:	47c0      	blx	r8
 8006874:	3001      	adds	r0, #1
 8006876:	d020      	beq.n	80068ba <_printf_common+0xb2>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	68e5      	ldr	r5, [r4, #12]
 800687c:	f8d9 2000 	ldr.w	r2, [r9]
 8006880:	f003 0306 	and.w	r3, r3, #6
 8006884:	2b04      	cmp	r3, #4
 8006886:	bf08      	it	eq
 8006888:	1aad      	subeq	r5, r5, r2
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	6922      	ldr	r2, [r4, #16]
 800688e:	bf0c      	ite	eq
 8006890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006894:	2500      	movne	r5, #0
 8006896:	4293      	cmp	r3, r2
 8006898:	bfc4      	itt	gt
 800689a:	1a9b      	subgt	r3, r3, r2
 800689c:	18ed      	addgt	r5, r5, r3
 800689e:	f04f 0900 	mov.w	r9, #0
 80068a2:	341a      	adds	r4, #26
 80068a4:	454d      	cmp	r5, r9
 80068a6:	d11a      	bne.n	80068de <_printf_common+0xd6>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e008      	b.n	80068be <_printf_common+0xb6>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4652      	mov	r2, sl
 80068b0:	4639      	mov	r1, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	47c0      	blx	r8
 80068b6:	3001      	adds	r0, #1
 80068b8:	d103      	bne.n	80068c2 <_printf_common+0xba>
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c2:	3501      	adds	r5, #1
 80068c4:	e7c3      	b.n	800684e <_printf_common+0x46>
 80068c6:	18e1      	adds	r1, r4, r3
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	2030      	movs	r0, #48	; 0x30
 80068cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068d0:	4422      	add	r2, r4
 80068d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068da:	3302      	adds	r3, #2
 80068dc:	e7c5      	b.n	800686a <_printf_common+0x62>
 80068de:	2301      	movs	r3, #1
 80068e0:	4622      	mov	r2, r4
 80068e2:	4639      	mov	r1, r7
 80068e4:	4630      	mov	r0, r6
 80068e6:	47c0      	blx	r8
 80068e8:	3001      	adds	r0, #1
 80068ea:	d0e6      	beq.n	80068ba <_printf_common+0xb2>
 80068ec:	f109 0901 	add.w	r9, r9, #1
 80068f0:	e7d8      	b.n	80068a4 <_printf_common+0x9c>
	...

080068f4 <_printf_i>:
 80068f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80068fc:	460c      	mov	r4, r1
 80068fe:	7e09      	ldrb	r1, [r1, #24]
 8006900:	b085      	sub	sp, #20
 8006902:	296e      	cmp	r1, #110	; 0x6e
 8006904:	4617      	mov	r7, r2
 8006906:	4606      	mov	r6, r0
 8006908:	4698      	mov	r8, r3
 800690a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800690c:	f000 80b3 	beq.w	8006a76 <_printf_i+0x182>
 8006910:	d822      	bhi.n	8006958 <_printf_i+0x64>
 8006912:	2963      	cmp	r1, #99	; 0x63
 8006914:	d036      	beq.n	8006984 <_printf_i+0x90>
 8006916:	d80a      	bhi.n	800692e <_printf_i+0x3a>
 8006918:	2900      	cmp	r1, #0
 800691a:	f000 80b9 	beq.w	8006a90 <_printf_i+0x19c>
 800691e:	2958      	cmp	r1, #88	; 0x58
 8006920:	f000 8083 	beq.w	8006a2a <_printf_i+0x136>
 8006924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006928:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800692c:	e032      	b.n	8006994 <_printf_i+0xa0>
 800692e:	2964      	cmp	r1, #100	; 0x64
 8006930:	d001      	beq.n	8006936 <_printf_i+0x42>
 8006932:	2969      	cmp	r1, #105	; 0x69
 8006934:	d1f6      	bne.n	8006924 <_printf_i+0x30>
 8006936:	6820      	ldr	r0, [r4, #0]
 8006938:	6813      	ldr	r3, [r2, #0]
 800693a:	0605      	lsls	r5, r0, #24
 800693c:	f103 0104 	add.w	r1, r3, #4
 8006940:	d52a      	bpl.n	8006998 <_printf_i+0xa4>
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6011      	str	r1, [r2, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	da03      	bge.n	8006952 <_printf_i+0x5e>
 800694a:	222d      	movs	r2, #45	; 0x2d
 800694c:	425b      	negs	r3, r3
 800694e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006952:	486f      	ldr	r0, [pc, #444]	; (8006b10 <_printf_i+0x21c>)
 8006954:	220a      	movs	r2, #10
 8006956:	e039      	b.n	80069cc <_printf_i+0xd8>
 8006958:	2973      	cmp	r1, #115	; 0x73
 800695a:	f000 809d 	beq.w	8006a98 <_printf_i+0x1a4>
 800695e:	d808      	bhi.n	8006972 <_printf_i+0x7e>
 8006960:	296f      	cmp	r1, #111	; 0x6f
 8006962:	d020      	beq.n	80069a6 <_printf_i+0xb2>
 8006964:	2970      	cmp	r1, #112	; 0x70
 8006966:	d1dd      	bne.n	8006924 <_printf_i+0x30>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	f043 0320 	orr.w	r3, r3, #32
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	e003      	b.n	800697a <_printf_i+0x86>
 8006972:	2975      	cmp	r1, #117	; 0x75
 8006974:	d017      	beq.n	80069a6 <_printf_i+0xb2>
 8006976:	2978      	cmp	r1, #120	; 0x78
 8006978:	d1d4      	bne.n	8006924 <_printf_i+0x30>
 800697a:	2378      	movs	r3, #120	; 0x78
 800697c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006980:	4864      	ldr	r0, [pc, #400]	; (8006b14 <_printf_i+0x220>)
 8006982:	e055      	b.n	8006a30 <_printf_i+0x13c>
 8006984:	6813      	ldr	r3, [r2, #0]
 8006986:	1d19      	adds	r1, r3, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6011      	str	r1, [r2, #0]
 800698c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006994:	2301      	movs	r3, #1
 8006996:	e08c      	b.n	8006ab2 <_printf_i+0x1be>
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6011      	str	r1, [r2, #0]
 800699c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069a0:	bf18      	it	ne
 80069a2:	b21b      	sxthne	r3, r3
 80069a4:	e7cf      	b.n	8006946 <_printf_i+0x52>
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	6825      	ldr	r5, [r4, #0]
 80069aa:	1d18      	adds	r0, r3, #4
 80069ac:	6010      	str	r0, [r2, #0]
 80069ae:	0628      	lsls	r0, r5, #24
 80069b0:	d501      	bpl.n	80069b6 <_printf_i+0xc2>
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	e002      	b.n	80069bc <_printf_i+0xc8>
 80069b6:	0668      	lsls	r0, r5, #25
 80069b8:	d5fb      	bpl.n	80069b2 <_printf_i+0xbe>
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	4854      	ldr	r0, [pc, #336]	; (8006b10 <_printf_i+0x21c>)
 80069be:	296f      	cmp	r1, #111	; 0x6f
 80069c0:	bf14      	ite	ne
 80069c2:	220a      	movne	r2, #10
 80069c4:	2208      	moveq	r2, #8
 80069c6:	2100      	movs	r1, #0
 80069c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069cc:	6865      	ldr	r5, [r4, #4]
 80069ce:	60a5      	str	r5, [r4, #8]
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	f2c0 8095 	blt.w	8006b00 <_printf_i+0x20c>
 80069d6:	6821      	ldr	r1, [r4, #0]
 80069d8:	f021 0104 	bic.w	r1, r1, #4
 80069dc:	6021      	str	r1, [r4, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d13d      	bne.n	8006a5e <_printf_i+0x16a>
 80069e2:	2d00      	cmp	r5, #0
 80069e4:	f040 808e 	bne.w	8006b04 <_printf_i+0x210>
 80069e8:	4665      	mov	r5, ip
 80069ea:	2a08      	cmp	r2, #8
 80069ec:	d10b      	bne.n	8006a06 <_printf_i+0x112>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	07db      	lsls	r3, r3, #31
 80069f2:	d508      	bpl.n	8006a06 <_printf_i+0x112>
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	6862      	ldr	r2, [r4, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	bfde      	ittt	le
 80069fc:	2330      	movle	r3, #48	; 0x30
 80069fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a06:	ebac 0305 	sub.w	r3, ip, r5
 8006a0a:	6123      	str	r3, [r4, #16]
 8006a0c:	f8cd 8000 	str.w	r8, [sp]
 8006a10:	463b      	mov	r3, r7
 8006a12:	aa03      	add	r2, sp, #12
 8006a14:	4621      	mov	r1, r4
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7ff fef6 	bl	8006808 <_printf_common>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d14d      	bne.n	8006abc <_printf_i+0x1c8>
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	b005      	add	sp, #20
 8006a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a2a:	4839      	ldr	r0, [pc, #228]	; (8006b10 <_printf_i+0x21c>)
 8006a2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a30:	6813      	ldr	r3, [r2, #0]
 8006a32:	6821      	ldr	r1, [r4, #0]
 8006a34:	1d1d      	adds	r5, r3, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6015      	str	r5, [r2, #0]
 8006a3a:	060a      	lsls	r2, r1, #24
 8006a3c:	d50b      	bpl.n	8006a56 <_printf_i+0x162>
 8006a3e:	07ca      	lsls	r2, r1, #31
 8006a40:	bf44      	itt	mi
 8006a42:	f041 0120 	orrmi.w	r1, r1, #32
 8006a46:	6021      	strmi	r1, [r4, #0]
 8006a48:	b91b      	cbnz	r3, 8006a52 <_printf_i+0x15e>
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	f022 0220 	bic.w	r2, r2, #32
 8006a50:	6022      	str	r2, [r4, #0]
 8006a52:	2210      	movs	r2, #16
 8006a54:	e7b7      	b.n	80069c6 <_printf_i+0xd2>
 8006a56:	064d      	lsls	r5, r1, #25
 8006a58:	bf48      	it	mi
 8006a5a:	b29b      	uxthmi	r3, r3
 8006a5c:	e7ef      	b.n	8006a3e <_printf_i+0x14a>
 8006a5e:	4665      	mov	r5, ip
 8006a60:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a64:	fb02 3311 	mls	r3, r2, r1, r3
 8006a68:	5cc3      	ldrb	r3, [r0, r3]
 8006a6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a6e:	460b      	mov	r3, r1
 8006a70:	2900      	cmp	r1, #0
 8006a72:	d1f5      	bne.n	8006a60 <_printf_i+0x16c>
 8006a74:	e7b9      	b.n	80069ea <_printf_i+0xf6>
 8006a76:	6813      	ldr	r3, [r2, #0]
 8006a78:	6825      	ldr	r5, [r4, #0]
 8006a7a:	6961      	ldr	r1, [r4, #20]
 8006a7c:	1d18      	adds	r0, r3, #4
 8006a7e:	6010      	str	r0, [r2, #0]
 8006a80:	0628      	lsls	r0, r5, #24
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	d501      	bpl.n	8006a8a <_printf_i+0x196>
 8006a86:	6019      	str	r1, [r3, #0]
 8006a88:	e002      	b.n	8006a90 <_printf_i+0x19c>
 8006a8a:	066a      	lsls	r2, r5, #25
 8006a8c:	d5fb      	bpl.n	8006a86 <_printf_i+0x192>
 8006a8e:	8019      	strh	r1, [r3, #0]
 8006a90:	2300      	movs	r3, #0
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	4665      	mov	r5, ip
 8006a96:	e7b9      	b.n	8006a0c <_printf_i+0x118>
 8006a98:	6813      	ldr	r3, [r2, #0]
 8006a9a:	1d19      	adds	r1, r3, #4
 8006a9c:	6011      	str	r1, [r2, #0]
 8006a9e:	681d      	ldr	r5, [r3, #0]
 8006aa0:	6862      	ldr	r2, [r4, #4]
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f7f9 fb9b 	bl	80001e0 <memchr>
 8006aaa:	b108      	cbz	r0, 8006ab0 <_printf_i+0x1bc>
 8006aac:	1b40      	subs	r0, r0, r5
 8006aae:	6060      	str	r0, [r4, #4]
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	6123      	str	r3, [r4, #16]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aba:	e7a7      	b.n	8006a0c <_printf_i+0x118>
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	462a      	mov	r2, r5
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	47c0      	blx	r8
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d0aa      	beq.n	8006a20 <_printf_i+0x12c>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	079b      	lsls	r3, r3, #30
 8006ace:	d413      	bmi.n	8006af8 <_printf_i+0x204>
 8006ad0:	68e0      	ldr	r0, [r4, #12]
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	4298      	cmp	r0, r3
 8006ad6:	bfb8      	it	lt
 8006ad8:	4618      	movlt	r0, r3
 8006ada:	e7a3      	b.n	8006a24 <_printf_i+0x130>
 8006adc:	2301      	movs	r3, #1
 8006ade:	464a      	mov	r2, r9
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	47c0      	blx	r8
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d09a      	beq.n	8006a20 <_printf_i+0x12c>
 8006aea:	3501      	adds	r5, #1
 8006aec:	68e3      	ldr	r3, [r4, #12]
 8006aee:	9a03      	ldr	r2, [sp, #12]
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	42ab      	cmp	r3, r5
 8006af4:	dcf2      	bgt.n	8006adc <_printf_i+0x1e8>
 8006af6:	e7eb      	b.n	8006ad0 <_printf_i+0x1dc>
 8006af8:	2500      	movs	r5, #0
 8006afa:	f104 0919 	add.w	r9, r4, #25
 8006afe:	e7f5      	b.n	8006aec <_printf_i+0x1f8>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1ac      	bne.n	8006a5e <_printf_i+0x16a>
 8006b04:	7803      	ldrb	r3, [r0, #0]
 8006b06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b0e:	e76c      	b.n	80069ea <_printf_i+0xf6>
 8006b10:	080081d2 	.word	0x080081d2
 8006b14:	080081e3 	.word	0x080081e3

08006b18 <_sbrk_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4c06      	ldr	r4, [pc, #24]	; (8006b34 <_sbrk_r+0x1c>)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4605      	mov	r5, r0
 8006b20:	4608      	mov	r0, r1
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	f7fa fc88 	bl	8001438 <_sbrk>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_sbrk_r+0x1a>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_sbrk_r+0x1a>
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20000ab4 	.word	0x20000ab4

08006b38 <siprintf>:
 8006b38:	b40e      	push	{r1, r2, r3}
 8006b3a:	b500      	push	{lr}
 8006b3c:	b09c      	sub	sp, #112	; 0x70
 8006b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b40:	9002      	str	r0, [sp, #8]
 8006b42:	9006      	str	r0, [sp, #24]
 8006b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b48:	4809      	ldr	r0, [pc, #36]	; (8006b70 <siprintf+0x38>)
 8006b4a:	9107      	str	r1, [sp, #28]
 8006b4c:	9104      	str	r1, [sp, #16]
 8006b4e:	4909      	ldr	r1, [pc, #36]	; (8006b74 <siprintf+0x3c>)
 8006b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b54:	9105      	str	r1, [sp, #20]
 8006b56:	6800      	ldr	r0, [r0, #0]
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	a902      	add	r1, sp, #8
 8006b5c:	f001 f9ae 	bl	8007ebc <_svfiprintf_r>
 8006b60:	9b02      	ldr	r3, [sp, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	b01c      	add	sp, #112	; 0x70
 8006b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b6c:	b003      	add	sp, #12
 8006b6e:	4770      	bx	lr
 8006b70:	2000000c 	.word	0x2000000c
 8006b74:	ffff0208 	.word	0xffff0208

08006b78 <quorem>:
 8006b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	6903      	ldr	r3, [r0, #16]
 8006b7e:	690c      	ldr	r4, [r1, #16]
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	4680      	mov	r8, r0
 8006b84:	f2c0 8082 	blt.w	8006c8c <quorem+0x114>
 8006b88:	3c01      	subs	r4, #1
 8006b8a:	f101 0714 	add.w	r7, r1, #20
 8006b8e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006b92:	f100 0614 	add.w	r6, r0, #20
 8006b96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006b9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006b9e:	eb06 030c 	add.w	r3, r6, ip
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	eb07 090c 	add.w	r9, r7, ip
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	fbb0 f5f5 	udiv	r5, r0, r5
 8006bae:	b395      	cbz	r5, 8006c16 <quorem+0x9e>
 8006bb0:	f04f 0a00 	mov.w	sl, #0
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	46b6      	mov	lr, r6
 8006bb8:	46d3      	mov	fp, sl
 8006bba:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bbe:	b293      	uxth	r3, r2
 8006bc0:	fb05 a303 	mla	r3, r5, r3, sl
 8006bc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	ebab 0303 	sub.w	r3, fp, r3
 8006bce:	0c12      	lsrs	r2, r2, #16
 8006bd0:	f8de b000 	ldr.w	fp, [lr]
 8006bd4:	fb05 a202 	mla	r2, r5, r2, sl
 8006bd8:	fa13 f38b 	uxtah	r3, r3, fp
 8006bdc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006be0:	fa1f fb82 	uxth.w	fp, r2
 8006be4:	f8de 2000 	ldr.w	r2, [lr]
 8006be8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bf6:	4581      	cmp	r9, r0
 8006bf8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006bfc:	f84e 3b04 	str.w	r3, [lr], #4
 8006c00:	d2db      	bcs.n	8006bba <quorem+0x42>
 8006c02:	f856 300c 	ldr.w	r3, [r6, ip]
 8006c06:	b933      	cbnz	r3, 8006c16 <quorem+0x9e>
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	3b04      	subs	r3, #4
 8006c0c:	429e      	cmp	r6, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	d330      	bcc.n	8006c74 <quorem+0xfc>
 8006c12:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c16:	4640      	mov	r0, r8
 8006c18:	f001 f822 	bl	8007c60 <__mcmp>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	db25      	blt.n	8006c6c <quorem+0xf4>
 8006c20:	3501      	adds	r5, #1
 8006c22:	4630      	mov	r0, r6
 8006c24:	f04f 0c00 	mov.w	ip, #0
 8006c28:	f857 2b04 	ldr.w	r2, [r7], #4
 8006c2c:	f8d0 e000 	ldr.w	lr, [r0]
 8006c30:	b293      	uxth	r3, r2
 8006c32:	ebac 0303 	sub.w	r3, ip, r3
 8006c36:	0c12      	lsrs	r2, r2, #16
 8006c38:	fa13 f38e 	uxtah	r3, r3, lr
 8006c3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c4a:	45b9      	cmp	r9, r7
 8006c4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c50:	f840 3b04 	str.w	r3, [r0], #4
 8006c54:	d2e8      	bcs.n	8006c28 <quorem+0xb0>
 8006c56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006c5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006c5e:	b92a      	cbnz	r2, 8006c6c <quorem+0xf4>
 8006c60:	3b04      	subs	r3, #4
 8006c62:	429e      	cmp	r6, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	d30b      	bcc.n	8006c80 <quorem+0x108>
 8006c68:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	b003      	add	sp, #12
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	3b04      	subs	r3, #4
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	d1ca      	bne.n	8006c12 <quorem+0x9a>
 8006c7c:	3c01      	subs	r4, #1
 8006c7e:	e7c5      	b.n	8006c0c <quorem+0x94>
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	3b04      	subs	r3, #4
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	d1ef      	bne.n	8006c68 <quorem+0xf0>
 8006c88:	3c01      	subs	r4, #1
 8006c8a:	e7ea      	b.n	8006c62 <quorem+0xea>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7ee      	b.n	8006c6e <quorem+0xf6>

08006c90 <_dtoa_r>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	ec57 6b10 	vmov	r6, r7, d0
 8006c98:	b097      	sub	sp, #92	; 0x5c
 8006c9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c9c:	9106      	str	r1, [sp, #24]
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ca2:	9312      	str	r3, [sp, #72]	; 0x48
 8006ca4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ca8:	e9cd 6700 	strd	r6, r7, [sp]
 8006cac:	b93d      	cbnz	r5, 8006cbe <_dtoa_r+0x2e>
 8006cae:	2010      	movs	r0, #16
 8006cb0:	f7ff fa1e 	bl	80060f0 <malloc>
 8006cb4:	6260      	str	r0, [r4, #36]	; 0x24
 8006cb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cba:	6005      	str	r5, [r0, #0]
 8006cbc:	60c5      	str	r5, [r0, #12]
 8006cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc0:	6819      	ldr	r1, [r3, #0]
 8006cc2:	b151      	cbz	r1, 8006cda <_dtoa_r+0x4a>
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	604a      	str	r2, [r1, #4]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4093      	lsls	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 fde5 	bl	800789e <_Bfree>
 8006cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	1e3b      	subs	r3, r7, #0
 8006cdc:	bfbb      	ittet	lt
 8006cde:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ce2:	9301      	strlt	r3, [sp, #4]
 8006ce4:	2300      	movge	r3, #0
 8006ce6:	2201      	movlt	r2, #1
 8006ce8:	bfac      	ite	ge
 8006cea:	f8c8 3000 	strge.w	r3, [r8]
 8006cee:	f8c8 2000 	strlt.w	r2, [r8]
 8006cf2:	4baf      	ldr	r3, [pc, #700]	; (8006fb0 <_dtoa_r+0x320>)
 8006cf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006cf8:	ea33 0308 	bics.w	r3, r3, r8
 8006cfc:	d114      	bne.n	8006d28 <_dtoa_r+0x98>
 8006cfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d00:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	9b00      	ldr	r3, [sp, #0]
 8006d08:	b923      	cbnz	r3, 8006d14 <_dtoa_r+0x84>
 8006d0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f000 8542 	beq.w	8007798 <_dtoa_r+0xb08>
 8006d14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006fc4 <_dtoa_r+0x334>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 8544 	beq.w	80077a8 <_dtoa_r+0xb18>
 8006d20:	f10b 0303 	add.w	r3, fp, #3
 8006d24:	f000 bd3e 	b.w	80077a4 <_dtoa_r+0xb14>
 8006d28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4630      	mov	r0, r6
 8006d32:	4639      	mov	r1, r7
 8006d34:	f7f9 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d38:	4681      	mov	r9, r0
 8006d3a:	b168      	cbz	r0, 8006d58 <_dtoa_r+0xc8>
 8006d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d3e:	2301      	movs	r3, #1
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8524 	beq.w	8007792 <_dtoa_r+0xb02>
 8006d4a:	4b9a      	ldr	r3, [pc, #616]	; (8006fb4 <_dtoa_r+0x324>)
 8006d4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d4e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	f000 bd28 	b.w	80077a8 <_dtoa_r+0xb18>
 8006d58:	aa14      	add	r2, sp, #80	; 0x50
 8006d5a:	a915      	add	r1, sp, #84	; 0x54
 8006d5c:	ec47 6b10 	vmov	d0, r6, r7
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 fff4 	bl	8007d4e <__d2b>
 8006d66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d6a:	9004      	str	r0, [sp, #16]
 8006d6c:	2d00      	cmp	r5, #0
 8006d6e:	d07c      	beq.n	8006e6a <_dtoa_r+0x1da>
 8006d70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006d78:	46b2      	mov	sl, r6
 8006d7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006d7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b8b      	ldr	r3, [pc, #556]	; (8006fb8 <_dtoa_r+0x328>)
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	f7f9 fa7b 	bl	8000288 <__aeabi_dsub>
 8006d92:	a381      	add	r3, pc, #516	; (adr r3, 8006f98 <_dtoa_r+0x308>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7f9 fc2e 	bl	80005f8 <__aeabi_dmul>
 8006d9c:	a380      	add	r3, pc, #512	; (adr r3, 8006fa0 <_dtoa_r+0x310>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 fa73 	bl	800028c <__adddf3>
 8006da6:	4606      	mov	r6, r0
 8006da8:	4628      	mov	r0, r5
 8006daa:	460f      	mov	r7, r1
 8006dac:	f7f9 fbba 	bl	8000524 <__aeabi_i2d>
 8006db0:	a37d      	add	r3, pc, #500	; (adr r3, 8006fa8 <_dtoa_r+0x318>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f7f9 fc1f 	bl	80005f8 <__aeabi_dmul>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fa63 	bl	800028c <__adddf3>
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	f7f9 fec5 	bl	8000b58 <__aeabi_d2iz>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	4682      	mov	sl, r0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fe80 	bl	8000adc <__aeabi_dcmplt>
 8006ddc:	b148      	cbz	r0, 8006df2 <_dtoa_r+0x162>
 8006dde:	4650      	mov	r0, sl
 8006de0:	f7f9 fba0 	bl	8000524 <__aeabi_i2d>
 8006de4:	4632      	mov	r2, r6
 8006de6:	463b      	mov	r3, r7
 8006de8:	f7f9 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dec:	b908      	cbnz	r0, 8006df2 <_dtoa_r+0x162>
 8006dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006df2:	f1ba 0f16 	cmp.w	sl, #22
 8006df6:	d859      	bhi.n	8006eac <_dtoa_r+0x21c>
 8006df8:	4970      	ldr	r1, [pc, #448]	; (8006fbc <_dtoa_r+0x32c>)
 8006dfa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e06:	f7f9 fe87 	bl	8000b18 <__aeabi_dcmpgt>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d050      	beq.n	8006eb0 <_dtoa_r+0x220>
 8006e0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e12:	2300      	movs	r3, #0
 8006e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e18:	1b5d      	subs	r5, r3, r5
 8006e1a:	f1b5 0801 	subs.w	r8, r5, #1
 8006e1e:	bf49      	itett	mi
 8006e20:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e24:	2300      	movpl	r3, #0
 8006e26:	9305      	strmi	r3, [sp, #20]
 8006e28:	f04f 0800 	movmi.w	r8, #0
 8006e2c:	bf58      	it	pl
 8006e2e:	9305      	strpl	r3, [sp, #20]
 8006e30:	f1ba 0f00 	cmp.w	sl, #0
 8006e34:	db3e      	blt.n	8006eb4 <_dtoa_r+0x224>
 8006e36:	2300      	movs	r3, #0
 8006e38:	44d0      	add	r8, sl
 8006e3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006e3e:	9307      	str	r3, [sp, #28]
 8006e40:	9b06      	ldr	r3, [sp, #24]
 8006e42:	2b09      	cmp	r3, #9
 8006e44:	f200 8090 	bhi.w	8006f68 <_dtoa_r+0x2d8>
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	bfc4      	itt	gt
 8006e4c:	3b04      	subgt	r3, #4
 8006e4e:	9306      	strgt	r3, [sp, #24]
 8006e50:	9b06      	ldr	r3, [sp, #24]
 8006e52:	f1a3 0302 	sub.w	r3, r3, #2
 8006e56:	bfcc      	ite	gt
 8006e58:	2500      	movgt	r5, #0
 8006e5a:	2501      	movle	r5, #1
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	f200 808f 	bhi.w	8006f80 <_dtoa_r+0x2f0>
 8006e62:	e8df f003 	tbb	[pc, r3]
 8006e66:	7f7d      	.short	0x7f7d
 8006e68:	7131      	.short	0x7131
 8006e6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006e6e:	441d      	add	r5, r3
 8006e70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006e74:	2820      	cmp	r0, #32
 8006e76:	dd13      	ble.n	8006ea0 <_dtoa_r+0x210>
 8006e78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006e7c:	9b00      	ldr	r3, [sp, #0]
 8006e7e:	fa08 f800 	lsl.w	r8, r8, r0
 8006e82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006e86:	fa23 f000 	lsr.w	r0, r3, r0
 8006e8a:	ea48 0000 	orr.w	r0, r8, r0
 8006e8e:	f7f9 fb39 	bl	8000504 <__aeabi_ui2d>
 8006e92:	2301      	movs	r3, #1
 8006e94:	4682      	mov	sl, r0
 8006e96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006e9a:	3d01      	subs	r5, #1
 8006e9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e9e:	e772      	b.n	8006d86 <_dtoa_r+0xf6>
 8006ea0:	9b00      	ldr	r3, [sp, #0]
 8006ea2:	f1c0 0020 	rsb	r0, r0, #32
 8006ea6:	fa03 f000 	lsl.w	r0, r3, r0
 8006eaa:	e7f0      	b.n	8006e8e <_dtoa_r+0x1fe>
 8006eac:	2301      	movs	r3, #1
 8006eae:	e7b1      	b.n	8006e14 <_dtoa_r+0x184>
 8006eb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8006eb2:	e7b0      	b.n	8006e16 <_dtoa_r+0x186>
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	eba3 030a 	sub.w	r3, r3, sl
 8006eba:	9305      	str	r3, [sp, #20]
 8006ebc:	f1ca 0300 	rsb	r3, sl, #0
 8006ec0:	9307      	str	r3, [sp, #28]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec6:	e7bb      	b.n	8006e40 <_dtoa_r+0x1b0>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	930a      	str	r3, [sp, #40]	; 0x28
 8006ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dd59      	ble.n	8006f86 <_dtoa_r+0x2f6>
 8006ed2:	9302      	str	r3, [sp, #8]
 8006ed4:	4699      	mov	r9, r3
 8006ed6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ed8:	2200      	movs	r2, #0
 8006eda:	6072      	str	r2, [r6, #4]
 8006edc:	2204      	movs	r2, #4
 8006ede:	f102 0014 	add.w	r0, r2, #20
 8006ee2:	4298      	cmp	r0, r3
 8006ee4:	6871      	ldr	r1, [r6, #4]
 8006ee6:	d953      	bls.n	8006f90 <_dtoa_r+0x300>
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 fca4 	bl	8007836 <_Balloc>
 8006eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ef0:	6030      	str	r0, [r6, #0]
 8006ef2:	f1b9 0f0e 	cmp.w	r9, #14
 8006ef6:	f8d3 b000 	ldr.w	fp, [r3]
 8006efa:	f200 80e6 	bhi.w	80070ca <_dtoa_r+0x43a>
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	f000 80e3 	beq.w	80070ca <_dtoa_r+0x43a>
 8006f04:	ed9d 7b00 	vldr	d7, [sp]
 8006f08:	f1ba 0f00 	cmp.w	sl, #0
 8006f0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006f10:	dd74      	ble.n	8006ffc <_dtoa_r+0x36c>
 8006f12:	4a2a      	ldr	r2, [pc, #168]	; (8006fbc <_dtoa_r+0x32c>)
 8006f14:	f00a 030f 	and.w	r3, sl, #15
 8006f18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f1c:	ed93 7b00 	vldr	d7, [r3]
 8006f20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006f24:	06f0      	lsls	r0, r6, #27
 8006f26:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f2a:	d565      	bpl.n	8006ff8 <_dtoa_r+0x368>
 8006f2c:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <_dtoa_r+0x330>)
 8006f2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f36:	f7f9 fc89 	bl	800084c <__aeabi_ddiv>
 8006f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f3e:	f006 060f 	and.w	r6, r6, #15
 8006f42:	2503      	movs	r5, #3
 8006f44:	4f1e      	ldr	r7, [pc, #120]	; (8006fc0 <_dtoa_r+0x330>)
 8006f46:	e04c      	b.n	8006fe2 <_dtoa_r+0x352>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f4e:	4453      	add	r3, sl
 8006f50:	f103 0901 	add.w	r9, r3, #1
 8006f54:	9302      	str	r3, [sp, #8]
 8006f56:	464b      	mov	r3, r9
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	bfb8      	it	lt
 8006f5c:	2301      	movlt	r3, #1
 8006f5e:	e7ba      	b.n	8006ed6 <_dtoa_r+0x246>
 8006f60:	2300      	movs	r3, #0
 8006f62:	e7b2      	b.n	8006eca <_dtoa_r+0x23a>
 8006f64:	2300      	movs	r3, #0
 8006f66:	e7f0      	b.n	8006f4a <_dtoa_r+0x2ba>
 8006f68:	2501      	movs	r5, #1
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9306      	str	r3, [sp, #24]
 8006f6e:	950a      	str	r5, [sp, #40]	; 0x28
 8006f70:	f04f 33ff 	mov.w	r3, #4294967295
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	4699      	mov	r9, r3
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2312      	movs	r3, #18
 8006f7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f7e:	e7aa      	b.n	8006ed6 <_dtoa_r+0x246>
 8006f80:	2301      	movs	r3, #1
 8006f82:	930a      	str	r3, [sp, #40]	; 0x28
 8006f84:	e7f4      	b.n	8006f70 <_dtoa_r+0x2e0>
 8006f86:	2301      	movs	r3, #1
 8006f88:	9302      	str	r3, [sp, #8]
 8006f8a:	4699      	mov	r9, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	e7f5      	b.n	8006f7c <_dtoa_r+0x2ec>
 8006f90:	3101      	adds	r1, #1
 8006f92:	6071      	str	r1, [r6, #4]
 8006f94:	0052      	lsls	r2, r2, #1
 8006f96:	e7a2      	b.n	8006ede <_dtoa_r+0x24e>
 8006f98:	636f4361 	.word	0x636f4361
 8006f9c:	3fd287a7 	.word	0x3fd287a7
 8006fa0:	8b60c8b3 	.word	0x8b60c8b3
 8006fa4:	3fc68a28 	.word	0x3fc68a28
 8006fa8:	509f79fb 	.word	0x509f79fb
 8006fac:	3fd34413 	.word	0x3fd34413
 8006fb0:	7ff00000 	.word	0x7ff00000
 8006fb4:	080081d1 	.word	0x080081d1
 8006fb8:	3ff80000 	.word	0x3ff80000
 8006fbc:	08008230 	.word	0x08008230
 8006fc0:	08008208 	.word	0x08008208
 8006fc4:	080081fd 	.word	0x080081fd
 8006fc8:	07f1      	lsls	r1, r6, #31
 8006fca:	d508      	bpl.n	8006fde <_dtoa_r+0x34e>
 8006fcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd4:	f7f9 fb10 	bl	80005f8 <__aeabi_dmul>
 8006fd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006fdc:	3501      	adds	r5, #1
 8006fde:	1076      	asrs	r6, r6, #1
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	2e00      	cmp	r6, #0
 8006fe4:	d1f0      	bne.n	8006fc8 <_dtoa_r+0x338>
 8006fe6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fee:	f7f9 fc2d 	bl	800084c <__aeabi_ddiv>
 8006ff2:	e9cd 0100 	strd	r0, r1, [sp]
 8006ff6:	e01a      	b.n	800702e <_dtoa_r+0x39e>
 8006ff8:	2502      	movs	r5, #2
 8006ffa:	e7a3      	b.n	8006f44 <_dtoa_r+0x2b4>
 8006ffc:	f000 80a0 	beq.w	8007140 <_dtoa_r+0x4b0>
 8007000:	f1ca 0600 	rsb	r6, sl, #0
 8007004:	4b9f      	ldr	r3, [pc, #636]	; (8007284 <_dtoa_r+0x5f4>)
 8007006:	4fa0      	ldr	r7, [pc, #640]	; (8007288 <_dtoa_r+0x5f8>)
 8007008:	f006 020f 	and.w	r2, r6, #15
 800700c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007018:	f7f9 faee 	bl	80005f8 <__aeabi_dmul>
 800701c:	e9cd 0100 	strd	r0, r1, [sp]
 8007020:	1136      	asrs	r6, r6, #4
 8007022:	2300      	movs	r3, #0
 8007024:	2502      	movs	r5, #2
 8007026:	2e00      	cmp	r6, #0
 8007028:	d17f      	bne.n	800712a <_dtoa_r+0x49a>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e1      	bne.n	8006ff2 <_dtoa_r+0x362>
 800702e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 8087 	beq.w	8007144 <_dtoa_r+0x4b4>
 8007036:	e9dd 6700 	ldrd	r6, r7, [sp]
 800703a:	2200      	movs	r2, #0
 800703c:	4b93      	ldr	r3, [pc, #588]	; (800728c <_dtoa_r+0x5fc>)
 800703e:	4630      	mov	r0, r6
 8007040:	4639      	mov	r1, r7
 8007042:	f7f9 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8007046:	2800      	cmp	r0, #0
 8007048:	d07c      	beq.n	8007144 <_dtoa_r+0x4b4>
 800704a:	f1b9 0f00 	cmp.w	r9, #0
 800704e:	d079      	beq.n	8007144 <_dtoa_r+0x4b4>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dd35      	ble.n	80070c2 <_dtoa_r+0x432>
 8007056:	f10a 33ff 	add.w	r3, sl, #4294967295
 800705a:	9308      	str	r3, [sp, #32]
 800705c:	4639      	mov	r1, r7
 800705e:	2200      	movs	r2, #0
 8007060:	4b8b      	ldr	r3, [pc, #556]	; (8007290 <_dtoa_r+0x600>)
 8007062:	4630      	mov	r0, r6
 8007064:	f7f9 fac8 	bl	80005f8 <__aeabi_dmul>
 8007068:	e9cd 0100 	strd	r0, r1, [sp]
 800706c:	9f02      	ldr	r7, [sp, #8]
 800706e:	3501      	adds	r5, #1
 8007070:	4628      	mov	r0, r5
 8007072:	f7f9 fa57 	bl	8000524 <__aeabi_i2d>
 8007076:	e9dd 2300 	ldrd	r2, r3, [sp]
 800707a:	f7f9 fabd 	bl	80005f8 <__aeabi_dmul>
 800707e:	2200      	movs	r2, #0
 8007080:	4b84      	ldr	r3, [pc, #528]	; (8007294 <_dtoa_r+0x604>)
 8007082:	f7f9 f903 	bl	800028c <__adddf3>
 8007086:	4605      	mov	r5, r0
 8007088:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800708c:	2f00      	cmp	r7, #0
 800708e:	d15d      	bne.n	800714c <_dtoa_r+0x4bc>
 8007090:	2200      	movs	r2, #0
 8007092:	4b81      	ldr	r3, [pc, #516]	; (8007298 <_dtoa_r+0x608>)
 8007094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007098:	f7f9 f8f6 	bl	8000288 <__aeabi_dsub>
 800709c:	462a      	mov	r2, r5
 800709e:	4633      	mov	r3, r6
 80070a0:	e9cd 0100 	strd	r0, r1, [sp]
 80070a4:	f7f9 fd38 	bl	8000b18 <__aeabi_dcmpgt>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	f040 8288 	bne.w	80075be <_dtoa_r+0x92e>
 80070ae:	462a      	mov	r2, r5
 80070b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80070b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070b8:	f7f9 fd10 	bl	8000adc <__aeabi_dcmplt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	f040 827c 	bne.w	80075ba <_dtoa_r+0x92a>
 80070c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070c6:	e9cd 2300 	strd	r2, r3, [sp]
 80070ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f2c0 8150 	blt.w	8007372 <_dtoa_r+0x6e2>
 80070d2:	f1ba 0f0e 	cmp.w	sl, #14
 80070d6:	f300 814c 	bgt.w	8007372 <_dtoa_r+0x6e2>
 80070da:	4b6a      	ldr	r3, [pc, #424]	; (8007284 <_dtoa_r+0x5f4>)
 80070dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070e0:	ed93 7b00 	vldr	d7, [r3]
 80070e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070ec:	f280 80d8 	bge.w	80072a0 <_dtoa_r+0x610>
 80070f0:	f1b9 0f00 	cmp.w	r9, #0
 80070f4:	f300 80d4 	bgt.w	80072a0 <_dtoa_r+0x610>
 80070f8:	f040 825e 	bne.w	80075b8 <_dtoa_r+0x928>
 80070fc:	2200      	movs	r2, #0
 80070fe:	4b66      	ldr	r3, [pc, #408]	; (8007298 <_dtoa_r+0x608>)
 8007100:	ec51 0b17 	vmov	r0, r1, d7
 8007104:	f7f9 fa78 	bl	80005f8 <__aeabi_dmul>
 8007108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800710c:	f7f9 fcfa 	bl	8000b04 <__aeabi_dcmpge>
 8007110:	464f      	mov	r7, r9
 8007112:	464e      	mov	r6, r9
 8007114:	2800      	cmp	r0, #0
 8007116:	f040 8234 	bne.w	8007582 <_dtoa_r+0x8f2>
 800711a:	2331      	movs	r3, #49	; 0x31
 800711c:	f10b 0501 	add.w	r5, fp, #1
 8007120:	f88b 3000 	strb.w	r3, [fp]
 8007124:	f10a 0a01 	add.w	sl, sl, #1
 8007128:	e22f      	b.n	800758a <_dtoa_r+0x8fa>
 800712a:	07f2      	lsls	r2, r6, #31
 800712c:	d505      	bpl.n	800713a <_dtoa_r+0x4aa>
 800712e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007132:	f7f9 fa61 	bl	80005f8 <__aeabi_dmul>
 8007136:	3501      	adds	r5, #1
 8007138:	2301      	movs	r3, #1
 800713a:	1076      	asrs	r6, r6, #1
 800713c:	3708      	adds	r7, #8
 800713e:	e772      	b.n	8007026 <_dtoa_r+0x396>
 8007140:	2502      	movs	r5, #2
 8007142:	e774      	b.n	800702e <_dtoa_r+0x39e>
 8007144:	f8cd a020 	str.w	sl, [sp, #32]
 8007148:	464f      	mov	r7, r9
 800714a:	e791      	b.n	8007070 <_dtoa_r+0x3e0>
 800714c:	4b4d      	ldr	r3, [pc, #308]	; (8007284 <_dtoa_r+0x5f4>)
 800714e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007152:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007158:	2b00      	cmp	r3, #0
 800715a:	d047      	beq.n	80071ec <_dtoa_r+0x55c>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	2000      	movs	r0, #0
 8007162:	494e      	ldr	r1, [pc, #312]	; (800729c <_dtoa_r+0x60c>)
 8007164:	f7f9 fb72 	bl	800084c <__aeabi_ddiv>
 8007168:	462a      	mov	r2, r5
 800716a:	4633      	mov	r3, r6
 800716c:	f7f9 f88c 	bl	8000288 <__aeabi_dsub>
 8007170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007174:	465d      	mov	r5, fp
 8007176:	e9dd 0100 	ldrd	r0, r1, [sp]
 800717a:	f7f9 fced 	bl	8000b58 <__aeabi_d2iz>
 800717e:	4606      	mov	r6, r0
 8007180:	f7f9 f9d0 	bl	8000524 <__aeabi_i2d>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	e9dd 0100 	ldrd	r0, r1, [sp]
 800718c:	f7f9 f87c 	bl	8000288 <__aeabi_dsub>
 8007190:	3630      	adds	r6, #48	; 0x30
 8007192:	f805 6b01 	strb.w	r6, [r5], #1
 8007196:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800719a:	e9cd 0100 	strd	r0, r1, [sp]
 800719e:	f7f9 fc9d 	bl	8000adc <__aeabi_dcmplt>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d163      	bne.n	800726e <_dtoa_r+0x5de>
 80071a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071aa:	2000      	movs	r0, #0
 80071ac:	4937      	ldr	r1, [pc, #220]	; (800728c <_dtoa_r+0x5fc>)
 80071ae:	f7f9 f86b 	bl	8000288 <__aeabi_dsub>
 80071b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071b6:	f7f9 fc91 	bl	8000adc <__aeabi_dcmplt>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	f040 80b7 	bne.w	800732e <_dtoa_r+0x69e>
 80071c0:	eba5 030b 	sub.w	r3, r5, fp
 80071c4:	429f      	cmp	r7, r3
 80071c6:	f77f af7c 	ble.w	80070c2 <_dtoa_r+0x432>
 80071ca:	2200      	movs	r2, #0
 80071cc:	4b30      	ldr	r3, [pc, #192]	; (8007290 <_dtoa_r+0x600>)
 80071ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071d2:	f7f9 fa11 	bl	80005f8 <__aeabi_dmul>
 80071d6:	2200      	movs	r2, #0
 80071d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071dc:	4b2c      	ldr	r3, [pc, #176]	; (8007290 <_dtoa_r+0x600>)
 80071de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071e2:	f7f9 fa09 	bl	80005f8 <__aeabi_dmul>
 80071e6:	e9cd 0100 	strd	r0, r1, [sp]
 80071ea:	e7c4      	b.n	8007176 <_dtoa_r+0x4e6>
 80071ec:	462a      	mov	r2, r5
 80071ee:	4633      	mov	r3, r6
 80071f0:	f7f9 fa02 	bl	80005f8 <__aeabi_dmul>
 80071f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071f8:	eb0b 0507 	add.w	r5, fp, r7
 80071fc:	465e      	mov	r6, fp
 80071fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007202:	f7f9 fca9 	bl	8000b58 <__aeabi_d2iz>
 8007206:	4607      	mov	r7, r0
 8007208:	f7f9 f98c 	bl	8000524 <__aeabi_i2d>
 800720c:	3730      	adds	r7, #48	; 0x30
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007216:	f7f9 f837 	bl	8000288 <__aeabi_dsub>
 800721a:	f806 7b01 	strb.w	r7, [r6], #1
 800721e:	42ae      	cmp	r6, r5
 8007220:	e9cd 0100 	strd	r0, r1, [sp]
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	d126      	bne.n	8007278 <_dtoa_r+0x5e8>
 800722a:	4b1c      	ldr	r3, [pc, #112]	; (800729c <_dtoa_r+0x60c>)
 800722c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007230:	f7f9 f82c 	bl	800028c <__adddf3>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800723c:	f7f9 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 8007240:	2800      	cmp	r0, #0
 8007242:	d174      	bne.n	800732e <_dtoa_r+0x69e>
 8007244:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007248:	2000      	movs	r0, #0
 800724a:	4914      	ldr	r1, [pc, #80]	; (800729c <_dtoa_r+0x60c>)
 800724c:	f7f9 f81c 	bl	8000288 <__aeabi_dsub>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007258:	f7f9 fc40 	bl	8000adc <__aeabi_dcmplt>
 800725c:	2800      	cmp	r0, #0
 800725e:	f43f af30 	beq.w	80070c2 <_dtoa_r+0x432>
 8007262:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007266:	2b30      	cmp	r3, #48	; 0x30
 8007268:	f105 32ff 	add.w	r2, r5, #4294967295
 800726c:	d002      	beq.n	8007274 <_dtoa_r+0x5e4>
 800726e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007272:	e04a      	b.n	800730a <_dtoa_r+0x67a>
 8007274:	4615      	mov	r5, r2
 8007276:	e7f4      	b.n	8007262 <_dtoa_r+0x5d2>
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <_dtoa_r+0x600>)
 800727a:	f7f9 f9bd 	bl	80005f8 <__aeabi_dmul>
 800727e:	e9cd 0100 	strd	r0, r1, [sp]
 8007282:	e7bc      	b.n	80071fe <_dtoa_r+0x56e>
 8007284:	08008230 	.word	0x08008230
 8007288:	08008208 	.word	0x08008208
 800728c:	3ff00000 	.word	0x3ff00000
 8007290:	40240000 	.word	0x40240000
 8007294:	401c0000 	.word	0x401c0000
 8007298:	40140000 	.word	0x40140000
 800729c:	3fe00000 	.word	0x3fe00000
 80072a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072a4:	465d      	mov	r5, fp
 80072a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072aa:	4630      	mov	r0, r6
 80072ac:	4639      	mov	r1, r7
 80072ae:	f7f9 facd 	bl	800084c <__aeabi_ddiv>
 80072b2:	f7f9 fc51 	bl	8000b58 <__aeabi_d2iz>
 80072b6:	4680      	mov	r8, r0
 80072b8:	f7f9 f934 	bl	8000524 <__aeabi_i2d>
 80072bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c0:	f7f9 f99a 	bl	80005f8 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80072d0:	f7f8 ffda 	bl	8000288 <__aeabi_dsub>
 80072d4:	f805 6b01 	strb.w	r6, [r5], #1
 80072d8:	eba5 060b 	sub.w	r6, r5, fp
 80072dc:	45b1      	cmp	r9, r6
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	d139      	bne.n	8007358 <_dtoa_r+0x6c8>
 80072e4:	f7f8 ffd2 	bl	800028c <__adddf3>
 80072e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072ec:	4606      	mov	r6, r0
 80072ee:	460f      	mov	r7, r1
 80072f0:	f7f9 fc12 	bl	8000b18 <__aeabi_dcmpgt>
 80072f4:	b9c8      	cbnz	r0, 800732a <_dtoa_r+0x69a>
 80072f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f9 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007302:	b110      	cbz	r0, 800730a <_dtoa_r+0x67a>
 8007304:	f018 0f01 	tst.w	r8, #1
 8007308:	d10f      	bne.n	800732a <_dtoa_r+0x69a>
 800730a:	9904      	ldr	r1, [sp, #16]
 800730c:	4620      	mov	r0, r4
 800730e:	f000 fac6 	bl	800789e <_Bfree>
 8007312:	2300      	movs	r3, #0
 8007314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007316:	702b      	strb	r3, [r5, #0]
 8007318:	f10a 0301 	add.w	r3, sl, #1
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 8241 	beq.w	80077a8 <_dtoa_r+0xb18>
 8007326:	601d      	str	r5, [r3, #0]
 8007328:	e23e      	b.n	80077a8 <_dtoa_r+0xb18>
 800732a:	f8cd a020 	str.w	sl, [sp, #32]
 800732e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007332:	2a39      	cmp	r2, #57	; 0x39
 8007334:	f105 33ff 	add.w	r3, r5, #4294967295
 8007338:	d108      	bne.n	800734c <_dtoa_r+0x6bc>
 800733a:	459b      	cmp	fp, r3
 800733c:	d10a      	bne.n	8007354 <_dtoa_r+0x6c4>
 800733e:	9b08      	ldr	r3, [sp, #32]
 8007340:	3301      	adds	r3, #1
 8007342:	9308      	str	r3, [sp, #32]
 8007344:	2330      	movs	r3, #48	; 0x30
 8007346:	f88b 3000 	strb.w	r3, [fp]
 800734a:	465b      	mov	r3, fp
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	3201      	adds	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e78c      	b.n	800726e <_dtoa_r+0x5de>
 8007354:	461d      	mov	r5, r3
 8007356:	e7ea      	b.n	800732e <_dtoa_r+0x69e>
 8007358:	2200      	movs	r2, #0
 800735a:	4b9b      	ldr	r3, [pc, #620]	; (80075c8 <_dtoa_r+0x938>)
 800735c:	f7f9 f94c 	bl	80005f8 <__aeabi_dmul>
 8007360:	2200      	movs	r2, #0
 8007362:	2300      	movs	r3, #0
 8007364:	4606      	mov	r6, r0
 8007366:	460f      	mov	r7, r1
 8007368:	f7f9 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800736c:	2800      	cmp	r0, #0
 800736e:	d09a      	beq.n	80072a6 <_dtoa_r+0x616>
 8007370:	e7cb      	b.n	800730a <_dtoa_r+0x67a>
 8007372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007374:	2a00      	cmp	r2, #0
 8007376:	f000 808b 	beq.w	8007490 <_dtoa_r+0x800>
 800737a:	9a06      	ldr	r2, [sp, #24]
 800737c:	2a01      	cmp	r2, #1
 800737e:	dc6e      	bgt.n	800745e <_dtoa_r+0x7ce>
 8007380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007382:	2a00      	cmp	r2, #0
 8007384:	d067      	beq.n	8007456 <_dtoa_r+0x7c6>
 8007386:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800738a:	9f07      	ldr	r7, [sp, #28]
 800738c:	9d05      	ldr	r5, [sp, #20]
 800738e:	9a05      	ldr	r2, [sp, #20]
 8007390:	2101      	movs	r1, #1
 8007392:	441a      	add	r2, r3
 8007394:	4620      	mov	r0, r4
 8007396:	9205      	str	r2, [sp, #20]
 8007398:	4498      	add	r8, r3
 800739a:	f000 fb20 	bl	80079de <__i2b>
 800739e:	4606      	mov	r6, r0
 80073a0:	2d00      	cmp	r5, #0
 80073a2:	dd0c      	ble.n	80073be <_dtoa_r+0x72e>
 80073a4:	f1b8 0f00 	cmp.w	r8, #0
 80073a8:	dd09      	ble.n	80073be <_dtoa_r+0x72e>
 80073aa:	4545      	cmp	r5, r8
 80073ac:	9a05      	ldr	r2, [sp, #20]
 80073ae:	462b      	mov	r3, r5
 80073b0:	bfa8      	it	ge
 80073b2:	4643      	movge	r3, r8
 80073b4:	1ad2      	subs	r2, r2, r3
 80073b6:	9205      	str	r2, [sp, #20]
 80073b8:	1aed      	subs	r5, r5, r3
 80073ba:	eba8 0803 	sub.w	r8, r8, r3
 80073be:	9b07      	ldr	r3, [sp, #28]
 80073c0:	b1eb      	cbz	r3, 80073fe <_dtoa_r+0x76e>
 80073c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d067      	beq.n	8007498 <_dtoa_r+0x808>
 80073c8:	b18f      	cbz	r7, 80073ee <_dtoa_r+0x75e>
 80073ca:	4631      	mov	r1, r6
 80073cc:	463a      	mov	r2, r7
 80073ce:	4620      	mov	r0, r4
 80073d0:	f000 fba4 	bl	8007b1c <__pow5mult>
 80073d4:	9a04      	ldr	r2, [sp, #16]
 80073d6:	4601      	mov	r1, r0
 80073d8:	4606      	mov	r6, r0
 80073da:	4620      	mov	r0, r4
 80073dc:	f000 fb08 	bl	80079f0 <__multiply>
 80073e0:	9904      	ldr	r1, [sp, #16]
 80073e2:	9008      	str	r0, [sp, #32]
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 fa5a 	bl	800789e <_Bfree>
 80073ea:	9b08      	ldr	r3, [sp, #32]
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	9b07      	ldr	r3, [sp, #28]
 80073f0:	1bda      	subs	r2, r3, r7
 80073f2:	d004      	beq.n	80073fe <_dtoa_r+0x76e>
 80073f4:	9904      	ldr	r1, [sp, #16]
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 fb90 	bl	8007b1c <__pow5mult>
 80073fc:	9004      	str	r0, [sp, #16]
 80073fe:	2101      	movs	r1, #1
 8007400:	4620      	mov	r0, r4
 8007402:	f000 faec 	bl	80079de <__i2b>
 8007406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007408:	4607      	mov	r7, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 81d0 	beq.w	80077b0 <_dtoa_r+0xb20>
 8007410:	461a      	mov	r2, r3
 8007412:	4601      	mov	r1, r0
 8007414:	4620      	mov	r0, r4
 8007416:	f000 fb81 	bl	8007b1c <__pow5mult>
 800741a:	9b06      	ldr	r3, [sp, #24]
 800741c:	2b01      	cmp	r3, #1
 800741e:	4607      	mov	r7, r0
 8007420:	dc40      	bgt.n	80074a4 <_dtoa_r+0x814>
 8007422:	9b00      	ldr	r3, [sp, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d139      	bne.n	800749c <_dtoa_r+0x80c>
 8007428:	9b01      	ldr	r3, [sp, #4]
 800742a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800742e:	2b00      	cmp	r3, #0
 8007430:	d136      	bne.n	80074a0 <_dtoa_r+0x810>
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007438:	0d1b      	lsrs	r3, r3, #20
 800743a:	051b      	lsls	r3, r3, #20
 800743c:	b12b      	cbz	r3, 800744a <_dtoa_r+0x7ba>
 800743e:	9b05      	ldr	r3, [sp, #20]
 8007440:	3301      	adds	r3, #1
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	f108 0801 	add.w	r8, r8, #1
 8007448:	2301      	movs	r3, #1
 800744a:	9307      	str	r3, [sp, #28]
 800744c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800744e:	2b00      	cmp	r3, #0
 8007450:	d12a      	bne.n	80074a8 <_dtoa_r+0x818>
 8007452:	2001      	movs	r0, #1
 8007454:	e030      	b.n	80074b8 <_dtoa_r+0x828>
 8007456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007458:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800745c:	e795      	b.n	800738a <_dtoa_r+0x6fa>
 800745e:	9b07      	ldr	r3, [sp, #28]
 8007460:	f109 37ff 	add.w	r7, r9, #4294967295
 8007464:	42bb      	cmp	r3, r7
 8007466:	bfbf      	itttt	lt
 8007468:	9b07      	ldrlt	r3, [sp, #28]
 800746a:	9707      	strlt	r7, [sp, #28]
 800746c:	1afa      	sublt	r2, r7, r3
 800746e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007470:	bfbb      	ittet	lt
 8007472:	189b      	addlt	r3, r3, r2
 8007474:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007476:	1bdf      	subge	r7, r3, r7
 8007478:	2700      	movlt	r7, #0
 800747a:	f1b9 0f00 	cmp.w	r9, #0
 800747e:	bfb5      	itete	lt
 8007480:	9b05      	ldrlt	r3, [sp, #20]
 8007482:	9d05      	ldrge	r5, [sp, #20]
 8007484:	eba3 0509 	sublt.w	r5, r3, r9
 8007488:	464b      	movge	r3, r9
 800748a:	bfb8      	it	lt
 800748c:	2300      	movlt	r3, #0
 800748e:	e77e      	b.n	800738e <_dtoa_r+0x6fe>
 8007490:	9f07      	ldr	r7, [sp, #28]
 8007492:	9d05      	ldr	r5, [sp, #20]
 8007494:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007496:	e783      	b.n	80073a0 <_dtoa_r+0x710>
 8007498:	9a07      	ldr	r2, [sp, #28]
 800749a:	e7ab      	b.n	80073f4 <_dtoa_r+0x764>
 800749c:	2300      	movs	r3, #0
 800749e:	e7d4      	b.n	800744a <_dtoa_r+0x7ba>
 80074a0:	9b00      	ldr	r3, [sp, #0]
 80074a2:	e7d2      	b.n	800744a <_dtoa_r+0x7ba>
 80074a4:	2300      	movs	r3, #0
 80074a6:	9307      	str	r3, [sp, #28]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80074ae:	6918      	ldr	r0, [r3, #16]
 80074b0:	f000 fa47 	bl	8007942 <__hi0bits>
 80074b4:	f1c0 0020 	rsb	r0, r0, #32
 80074b8:	4440      	add	r0, r8
 80074ba:	f010 001f 	ands.w	r0, r0, #31
 80074be:	d047      	beq.n	8007550 <_dtoa_r+0x8c0>
 80074c0:	f1c0 0320 	rsb	r3, r0, #32
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	dd3b      	ble.n	8007540 <_dtoa_r+0x8b0>
 80074c8:	9b05      	ldr	r3, [sp, #20]
 80074ca:	f1c0 001c 	rsb	r0, r0, #28
 80074ce:	4403      	add	r3, r0
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	4405      	add	r5, r0
 80074d4:	4480      	add	r8, r0
 80074d6:	9b05      	ldr	r3, [sp, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	dd05      	ble.n	80074e8 <_dtoa_r+0x858>
 80074dc:	461a      	mov	r2, r3
 80074de:	9904      	ldr	r1, [sp, #16]
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fb69 	bl	8007bb8 <__lshift>
 80074e6:	9004      	str	r0, [sp, #16]
 80074e8:	f1b8 0f00 	cmp.w	r8, #0
 80074ec:	dd05      	ble.n	80074fa <_dtoa_r+0x86a>
 80074ee:	4639      	mov	r1, r7
 80074f0:	4642      	mov	r2, r8
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 fb60 	bl	8007bb8 <__lshift>
 80074f8:	4607      	mov	r7, r0
 80074fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074fc:	b353      	cbz	r3, 8007554 <_dtoa_r+0x8c4>
 80074fe:	4639      	mov	r1, r7
 8007500:	9804      	ldr	r0, [sp, #16]
 8007502:	f000 fbad 	bl	8007c60 <__mcmp>
 8007506:	2800      	cmp	r0, #0
 8007508:	da24      	bge.n	8007554 <_dtoa_r+0x8c4>
 800750a:	2300      	movs	r3, #0
 800750c:	220a      	movs	r2, #10
 800750e:	9904      	ldr	r1, [sp, #16]
 8007510:	4620      	mov	r0, r4
 8007512:	f000 f9db 	bl	80078cc <__multadd>
 8007516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007518:	9004      	str	r0, [sp, #16]
 800751a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 814d 	beq.w	80077be <_dtoa_r+0xb2e>
 8007524:	2300      	movs	r3, #0
 8007526:	4631      	mov	r1, r6
 8007528:	220a      	movs	r2, #10
 800752a:	4620      	mov	r0, r4
 800752c:	f000 f9ce 	bl	80078cc <__multadd>
 8007530:	9b02      	ldr	r3, [sp, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	4606      	mov	r6, r0
 8007536:	dc4f      	bgt.n	80075d8 <_dtoa_r+0x948>
 8007538:	9b06      	ldr	r3, [sp, #24]
 800753a:	2b02      	cmp	r3, #2
 800753c:	dd4c      	ble.n	80075d8 <_dtoa_r+0x948>
 800753e:	e011      	b.n	8007564 <_dtoa_r+0x8d4>
 8007540:	d0c9      	beq.n	80074d6 <_dtoa_r+0x846>
 8007542:	9a05      	ldr	r2, [sp, #20]
 8007544:	331c      	adds	r3, #28
 8007546:	441a      	add	r2, r3
 8007548:	9205      	str	r2, [sp, #20]
 800754a:	441d      	add	r5, r3
 800754c:	4498      	add	r8, r3
 800754e:	e7c2      	b.n	80074d6 <_dtoa_r+0x846>
 8007550:	4603      	mov	r3, r0
 8007552:	e7f6      	b.n	8007542 <_dtoa_r+0x8b2>
 8007554:	f1b9 0f00 	cmp.w	r9, #0
 8007558:	dc38      	bgt.n	80075cc <_dtoa_r+0x93c>
 800755a:	9b06      	ldr	r3, [sp, #24]
 800755c:	2b02      	cmp	r3, #2
 800755e:	dd35      	ble.n	80075cc <_dtoa_r+0x93c>
 8007560:	f8cd 9008 	str.w	r9, [sp, #8]
 8007564:	9b02      	ldr	r3, [sp, #8]
 8007566:	b963      	cbnz	r3, 8007582 <_dtoa_r+0x8f2>
 8007568:	4639      	mov	r1, r7
 800756a:	2205      	movs	r2, #5
 800756c:	4620      	mov	r0, r4
 800756e:	f000 f9ad 	bl	80078cc <__multadd>
 8007572:	4601      	mov	r1, r0
 8007574:	4607      	mov	r7, r0
 8007576:	9804      	ldr	r0, [sp, #16]
 8007578:	f000 fb72 	bl	8007c60 <__mcmp>
 800757c:	2800      	cmp	r0, #0
 800757e:	f73f adcc 	bgt.w	800711a <_dtoa_r+0x48a>
 8007582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007584:	465d      	mov	r5, fp
 8007586:	ea6f 0a03 	mvn.w	sl, r3
 800758a:	f04f 0900 	mov.w	r9, #0
 800758e:	4639      	mov	r1, r7
 8007590:	4620      	mov	r0, r4
 8007592:	f000 f984 	bl	800789e <_Bfree>
 8007596:	2e00      	cmp	r6, #0
 8007598:	f43f aeb7 	beq.w	800730a <_dtoa_r+0x67a>
 800759c:	f1b9 0f00 	cmp.w	r9, #0
 80075a0:	d005      	beq.n	80075ae <_dtoa_r+0x91e>
 80075a2:	45b1      	cmp	r9, r6
 80075a4:	d003      	beq.n	80075ae <_dtoa_r+0x91e>
 80075a6:	4649      	mov	r1, r9
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 f978 	bl	800789e <_Bfree>
 80075ae:	4631      	mov	r1, r6
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 f974 	bl	800789e <_Bfree>
 80075b6:	e6a8      	b.n	800730a <_dtoa_r+0x67a>
 80075b8:	2700      	movs	r7, #0
 80075ba:	463e      	mov	r6, r7
 80075bc:	e7e1      	b.n	8007582 <_dtoa_r+0x8f2>
 80075be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80075c2:	463e      	mov	r6, r7
 80075c4:	e5a9      	b.n	800711a <_dtoa_r+0x48a>
 80075c6:	bf00      	nop
 80075c8:	40240000 	.word	0x40240000
 80075cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80fa 	beq.w	80077cc <_dtoa_r+0xb3c>
 80075d8:	2d00      	cmp	r5, #0
 80075da:	dd05      	ble.n	80075e8 <_dtoa_r+0x958>
 80075dc:	4631      	mov	r1, r6
 80075de:	462a      	mov	r2, r5
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 fae9 	bl	8007bb8 <__lshift>
 80075e6:	4606      	mov	r6, r0
 80075e8:	9b07      	ldr	r3, [sp, #28]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d04c      	beq.n	8007688 <_dtoa_r+0x9f8>
 80075ee:	6871      	ldr	r1, [r6, #4]
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 f920 	bl	8007836 <_Balloc>
 80075f6:	6932      	ldr	r2, [r6, #16]
 80075f8:	3202      	adds	r2, #2
 80075fa:	4605      	mov	r5, r0
 80075fc:	0092      	lsls	r2, r2, #2
 80075fe:	f106 010c 	add.w	r1, r6, #12
 8007602:	300c      	adds	r0, #12
 8007604:	f000 f90a 	bl	800781c <memcpy>
 8007608:	2201      	movs	r2, #1
 800760a:	4629      	mov	r1, r5
 800760c:	4620      	mov	r0, r4
 800760e:	f000 fad3 	bl	8007bb8 <__lshift>
 8007612:	9b00      	ldr	r3, [sp, #0]
 8007614:	f8cd b014 	str.w	fp, [sp, #20]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	46b1      	mov	r9, r6
 800761e:	9307      	str	r3, [sp, #28]
 8007620:	4606      	mov	r6, r0
 8007622:	4639      	mov	r1, r7
 8007624:	9804      	ldr	r0, [sp, #16]
 8007626:	f7ff faa7 	bl	8006b78 <quorem>
 800762a:	4649      	mov	r1, r9
 800762c:	4605      	mov	r5, r0
 800762e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007632:	9804      	ldr	r0, [sp, #16]
 8007634:	f000 fb14 	bl	8007c60 <__mcmp>
 8007638:	4632      	mov	r2, r6
 800763a:	9000      	str	r0, [sp, #0]
 800763c:	4639      	mov	r1, r7
 800763e:	4620      	mov	r0, r4
 8007640:	f000 fb28 	bl	8007c94 <__mdiff>
 8007644:	68c3      	ldr	r3, [r0, #12]
 8007646:	4602      	mov	r2, r0
 8007648:	bb03      	cbnz	r3, 800768c <_dtoa_r+0x9fc>
 800764a:	4601      	mov	r1, r0
 800764c:	9008      	str	r0, [sp, #32]
 800764e:	9804      	ldr	r0, [sp, #16]
 8007650:	f000 fb06 	bl	8007c60 <__mcmp>
 8007654:	9a08      	ldr	r2, [sp, #32]
 8007656:	4603      	mov	r3, r0
 8007658:	4611      	mov	r1, r2
 800765a:	4620      	mov	r0, r4
 800765c:	9308      	str	r3, [sp, #32]
 800765e:	f000 f91e 	bl	800789e <_Bfree>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	b9a3      	cbnz	r3, 8007690 <_dtoa_r+0xa00>
 8007666:	9a06      	ldr	r2, [sp, #24]
 8007668:	b992      	cbnz	r2, 8007690 <_dtoa_r+0xa00>
 800766a:	9a07      	ldr	r2, [sp, #28]
 800766c:	b982      	cbnz	r2, 8007690 <_dtoa_r+0xa00>
 800766e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007672:	d029      	beq.n	80076c8 <_dtoa_r+0xa38>
 8007674:	9b00      	ldr	r3, [sp, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	dd01      	ble.n	800767e <_dtoa_r+0x9ee>
 800767a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800767e:	9b05      	ldr	r3, [sp, #20]
 8007680:	1c5d      	adds	r5, r3, #1
 8007682:	f883 8000 	strb.w	r8, [r3]
 8007686:	e782      	b.n	800758e <_dtoa_r+0x8fe>
 8007688:	4630      	mov	r0, r6
 800768a:	e7c2      	b.n	8007612 <_dtoa_r+0x982>
 800768c:	2301      	movs	r3, #1
 800768e:	e7e3      	b.n	8007658 <_dtoa_r+0x9c8>
 8007690:	9a00      	ldr	r2, [sp, #0]
 8007692:	2a00      	cmp	r2, #0
 8007694:	db04      	blt.n	80076a0 <_dtoa_r+0xa10>
 8007696:	d125      	bne.n	80076e4 <_dtoa_r+0xa54>
 8007698:	9a06      	ldr	r2, [sp, #24]
 800769a:	bb1a      	cbnz	r2, 80076e4 <_dtoa_r+0xa54>
 800769c:	9a07      	ldr	r2, [sp, #28]
 800769e:	bb0a      	cbnz	r2, 80076e4 <_dtoa_r+0xa54>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	ddec      	ble.n	800767e <_dtoa_r+0x9ee>
 80076a4:	2201      	movs	r2, #1
 80076a6:	9904      	ldr	r1, [sp, #16]
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fa85 	bl	8007bb8 <__lshift>
 80076ae:	4639      	mov	r1, r7
 80076b0:	9004      	str	r0, [sp, #16]
 80076b2:	f000 fad5 	bl	8007c60 <__mcmp>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	dc03      	bgt.n	80076c2 <_dtoa_r+0xa32>
 80076ba:	d1e0      	bne.n	800767e <_dtoa_r+0x9ee>
 80076bc:	f018 0f01 	tst.w	r8, #1
 80076c0:	d0dd      	beq.n	800767e <_dtoa_r+0x9ee>
 80076c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076c6:	d1d8      	bne.n	800767a <_dtoa_r+0x9ea>
 80076c8:	9b05      	ldr	r3, [sp, #20]
 80076ca:	9a05      	ldr	r2, [sp, #20]
 80076cc:	1c5d      	adds	r5, r3, #1
 80076ce:	2339      	movs	r3, #57	; 0x39
 80076d0:	7013      	strb	r3, [r2, #0]
 80076d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076d6:	2b39      	cmp	r3, #57	; 0x39
 80076d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80076dc:	d04f      	beq.n	800777e <_dtoa_r+0xaee>
 80076de:	3301      	adds	r3, #1
 80076e0:	7013      	strb	r3, [r2, #0]
 80076e2:	e754      	b.n	800758e <_dtoa_r+0x8fe>
 80076e4:	9a05      	ldr	r2, [sp, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f102 0501 	add.w	r5, r2, #1
 80076ec:	dd06      	ble.n	80076fc <_dtoa_r+0xa6c>
 80076ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076f2:	d0e9      	beq.n	80076c8 <_dtoa_r+0xa38>
 80076f4:	f108 0801 	add.w	r8, r8, #1
 80076f8:	9b05      	ldr	r3, [sp, #20]
 80076fa:	e7c2      	b.n	8007682 <_dtoa_r+0x9f2>
 80076fc:	9a02      	ldr	r2, [sp, #8]
 80076fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007702:	eba5 030b 	sub.w	r3, r5, fp
 8007706:	4293      	cmp	r3, r2
 8007708:	d021      	beq.n	800774e <_dtoa_r+0xabe>
 800770a:	2300      	movs	r3, #0
 800770c:	220a      	movs	r2, #10
 800770e:	9904      	ldr	r1, [sp, #16]
 8007710:	4620      	mov	r0, r4
 8007712:	f000 f8db 	bl	80078cc <__multadd>
 8007716:	45b1      	cmp	r9, r6
 8007718:	9004      	str	r0, [sp, #16]
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	f04f 020a 	mov.w	r2, #10
 8007722:	4649      	mov	r1, r9
 8007724:	4620      	mov	r0, r4
 8007726:	d105      	bne.n	8007734 <_dtoa_r+0xaa4>
 8007728:	f000 f8d0 	bl	80078cc <__multadd>
 800772c:	4681      	mov	r9, r0
 800772e:	4606      	mov	r6, r0
 8007730:	9505      	str	r5, [sp, #20]
 8007732:	e776      	b.n	8007622 <_dtoa_r+0x992>
 8007734:	f000 f8ca 	bl	80078cc <__multadd>
 8007738:	4631      	mov	r1, r6
 800773a:	4681      	mov	r9, r0
 800773c:	2300      	movs	r3, #0
 800773e:	220a      	movs	r2, #10
 8007740:	4620      	mov	r0, r4
 8007742:	f000 f8c3 	bl	80078cc <__multadd>
 8007746:	4606      	mov	r6, r0
 8007748:	e7f2      	b.n	8007730 <_dtoa_r+0xaa0>
 800774a:	f04f 0900 	mov.w	r9, #0
 800774e:	2201      	movs	r2, #1
 8007750:	9904      	ldr	r1, [sp, #16]
 8007752:	4620      	mov	r0, r4
 8007754:	f000 fa30 	bl	8007bb8 <__lshift>
 8007758:	4639      	mov	r1, r7
 800775a:	9004      	str	r0, [sp, #16]
 800775c:	f000 fa80 	bl	8007c60 <__mcmp>
 8007760:	2800      	cmp	r0, #0
 8007762:	dcb6      	bgt.n	80076d2 <_dtoa_r+0xa42>
 8007764:	d102      	bne.n	800776c <_dtoa_r+0xadc>
 8007766:	f018 0f01 	tst.w	r8, #1
 800776a:	d1b2      	bne.n	80076d2 <_dtoa_r+0xa42>
 800776c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007770:	2b30      	cmp	r3, #48	; 0x30
 8007772:	f105 32ff 	add.w	r2, r5, #4294967295
 8007776:	f47f af0a 	bne.w	800758e <_dtoa_r+0x8fe>
 800777a:	4615      	mov	r5, r2
 800777c:	e7f6      	b.n	800776c <_dtoa_r+0xadc>
 800777e:	4593      	cmp	fp, r2
 8007780:	d105      	bne.n	800778e <_dtoa_r+0xafe>
 8007782:	2331      	movs	r3, #49	; 0x31
 8007784:	f10a 0a01 	add.w	sl, sl, #1
 8007788:	f88b 3000 	strb.w	r3, [fp]
 800778c:	e6ff      	b.n	800758e <_dtoa_r+0x8fe>
 800778e:	4615      	mov	r5, r2
 8007790:	e79f      	b.n	80076d2 <_dtoa_r+0xa42>
 8007792:	f8df b064 	ldr.w	fp, [pc, #100]	; 80077f8 <_dtoa_r+0xb68>
 8007796:	e007      	b.n	80077a8 <_dtoa_r+0xb18>
 8007798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800779a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80077fc <_dtoa_r+0xb6c>
 800779e:	b11b      	cbz	r3, 80077a8 <_dtoa_r+0xb18>
 80077a0:	f10b 0308 	add.w	r3, fp, #8
 80077a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	4658      	mov	r0, fp
 80077aa:	b017      	add	sp, #92	; 0x5c
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	9b06      	ldr	r3, [sp, #24]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	f77f ae35 	ble.w	8007422 <_dtoa_r+0x792>
 80077b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ba:	9307      	str	r3, [sp, #28]
 80077bc:	e649      	b.n	8007452 <_dtoa_r+0x7c2>
 80077be:	9b02      	ldr	r3, [sp, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dc03      	bgt.n	80077cc <_dtoa_r+0xb3c>
 80077c4:	9b06      	ldr	r3, [sp, #24]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	f73f aecc 	bgt.w	8007564 <_dtoa_r+0x8d4>
 80077cc:	465d      	mov	r5, fp
 80077ce:	4639      	mov	r1, r7
 80077d0:	9804      	ldr	r0, [sp, #16]
 80077d2:	f7ff f9d1 	bl	8006b78 <quorem>
 80077d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80077da:	f805 8b01 	strb.w	r8, [r5], #1
 80077de:	9a02      	ldr	r2, [sp, #8]
 80077e0:	eba5 030b 	sub.w	r3, r5, fp
 80077e4:	429a      	cmp	r2, r3
 80077e6:	ddb0      	ble.n	800774a <_dtoa_r+0xaba>
 80077e8:	2300      	movs	r3, #0
 80077ea:	220a      	movs	r2, #10
 80077ec:	9904      	ldr	r1, [sp, #16]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f86c 	bl	80078cc <__multadd>
 80077f4:	9004      	str	r0, [sp, #16]
 80077f6:	e7ea      	b.n	80077ce <_dtoa_r+0xb3e>
 80077f8:	080081d0 	.word	0x080081d0
 80077fc:	080081f4 	.word	0x080081f4

08007800 <_localeconv_r>:
 8007800:	4b04      	ldr	r3, [pc, #16]	; (8007814 <_localeconv_r+0x14>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6a18      	ldr	r0, [r3, #32]
 8007806:	4b04      	ldr	r3, [pc, #16]	; (8007818 <_localeconv_r+0x18>)
 8007808:	2800      	cmp	r0, #0
 800780a:	bf08      	it	eq
 800780c:	4618      	moveq	r0, r3
 800780e:	30f0      	adds	r0, #240	; 0xf0
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	2000000c 	.word	0x2000000c
 8007818:	20000070 	.word	0x20000070

0800781c <memcpy>:
 800781c:	b510      	push	{r4, lr}
 800781e:	1e43      	subs	r3, r0, #1
 8007820:	440a      	add	r2, r1
 8007822:	4291      	cmp	r1, r2
 8007824:	d100      	bne.n	8007828 <memcpy+0xc>
 8007826:	bd10      	pop	{r4, pc}
 8007828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800782c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007830:	e7f7      	b.n	8007822 <memcpy+0x6>

08007832 <__malloc_lock>:
 8007832:	4770      	bx	lr

08007834 <__malloc_unlock>:
 8007834:	4770      	bx	lr

08007836 <_Balloc>:
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800783a:	4604      	mov	r4, r0
 800783c:	460e      	mov	r6, r1
 800783e:	b93d      	cbnz	r5, 8007850 <_Balloc+0x1a>
 8007840:	2010      	movs	r0, #16
 8007842:	f7fe fc55 	bl	80060f0 <malloc>
 8007846:	6260      	str	r0, [r4, #36]	; 0x24
 8007848:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800784c:	6005      	str	r5, [r0, #0]
 800784e:	60c5      	str	r5, [r0, #12]
 8007850:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007852:	68eb      	ldr	r3, [r5, #12]
 8007854:	b183      	cbz	r3, 8007878 <_Balloc+0x42>
 8007856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800785e:	b9b8      	cbnz	r0, 8007890 <_Balloc+0x5a>
 8007860:	2101      	movs	r1, #1
 8007862:	fa01 f506 	lsl.w	r5, r1, r6
 8007866:	1d6a      	adds	r2, r5, #5
 8007868:	0092      	lsls	r2, r2, #2
 800786a:	4620      	mov	r0, r4
 800786c:	f000 fabe 	bl	8007dec <_calloc_r>
 8007870:	b160      	cbz	r0, 800788c <_Balloc+0x56>
 8007872:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007876:	e00e      	b.n	8007896 <_Balloc+0x60>
 8007878:	2221      	movs	r2, #33	; 0x21
 800787a:	2104      	movs	r1, #4
 800787c:	4620      	mov	r0, r4
 800787e:	f000 fab5 	bl	8007dec <_calloc_r>
 8007882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007884:	60e8      	str	r0, [r5, #12]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e4      	bne.n	8007856 <_Balloc+0x20>
 800788c:	2000      	movs	r0, #0
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	6802      	ldr	r2, [r0, #0]
 8007892:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007896:	2300      	movs	r3, #0
 8007898:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800789c:	e7f7      	b.n	800788e <_Balloc+0x58>

0800789e <_Bfree>:
 800789e:	b570      	push	{r4, r5, r6, lr}
 80078a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80078a2:	4606      	mov	r6, r0
 80078a4:	460d      	mov	r5, r1
 80078a6:	b93c      	cbnz	r4, 80078b8 <_Bfree+0x1a>
 80078a8:	2010      	movs	r0, #16
 80078aa:	f7fe fc21 	bl	80060f0 <malloc>
 80078ae:	6270      	str	r0, [r6, #36]	; 0x24
 80078b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078b4:	6004      	str	r4, [r0, #0]
 80078b6:	60c4      	str	r4, [r0, #12]
 80078b8:	b13d      	cbz	r5, 80078ca <_Bfree+0x2c>
 80078ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80078bc:	686a      	ldr	r2, [r5, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078c4:	6029      	str	r1, [r5, #0]
 80078c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80078ca:	bd70      	pop	{r4, r5, r6, pc}

080078cc <__multadd>:
 80078cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d0:	690d      	ldr	r5, [r1, #16]
 80078d2:	461f      	mov	r7, r3
 80078d4:	4606      	mov	r6, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	f101 0c14 	add.w	ip, r1, #20
 80078dc:	2300      	movs	r3, #0
 80078de:	f8dc 0000 	ldr.w	r0, [ip]
 80078e2:	b281      	uxth	r1, r0
 80078e4:	fb02 7101 	mla	r1, r2, r1, r7
 80078e8:	0c0f      	lsrs	r7, r1, #16
 80078ea:	0c00      	lsrs	r0, r0, #16
 80078ec:	fb02 7000 	mla	r0, r2, r0, r7
 80078f0:	b289      	uxth	r1, r1
 80078f2:	3301      	adds	r3, #1
 80078f4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80078f8:	429d      	cmp	r5, r3
 80078fa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80078fe:	f84c 1b04 	str.w	r1, [ip], #4
 8007902:	dcec      	bgt.n	80078de <__multadd+0x12>
 8007904:	b1d7      	cbz	r7, 800793c <__multadd+0x70>
 8007906:	68a3      	ldr	r3, [r4, #8]
 8007908:	42ab      	cmp	r3, r5
 800790a:	dc12      	bgt.n	8007932 <__multadd+0x66>
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	4630      	mov	r0, r6
 8007910:	3101      	adds	r1, #1
 8007912:	f7ff ff90 	bl	8007836 <_Balloc>
 8007916:	6922      	ldr	r2, [r4, #16]
 8007918:	3202      	adds	r2, #2
 800791a:	f104 010c 	add.w	r1, r4, #12
 800791e:	4680      	mov	r8, r0
 8007920:	0092      	lsls	r2, r2, #2
 8007922:	300c      	adds	r0, #12
 8007924:	f7ff ff7a 	bl	800781c <memcpy>
 8007928:	4621      	mov	r1, r4
 800792a:	4630      	mov	r0, r6
 800792c:	f7ff ffb7 	bl	800789e <_Bfree>
 8007930:	4644      	mov	r4, r8
 8007932:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007936:	3501      	adds	r5, #1
 8007938:	615f      	str	r7, [r3, #20]
 800793a:	6125      	str	r5, [r4, #16]
 800793c:	4620      	mov	r0, r4
 800793e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007942 <__hi0bits>:
 8007942:	0c02      	lsrs	r2, r0, #16
 8007944:	0412      	lsls	r2, r2, #16
 8007946:	4603      	mov	r3, r0
 8007948:	b9b2      	cbnz	r2, 8007978 <__hi0bits+0x36>
 800794a:	0403      	lsls	r3, r0, #16
 800794c:	2010      	movs	r0, #16
 800794e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007952:	bf04      	itt	eq
 8007954:	021b      	lsleq	r3, r3, #8
 8007956:	3008      	addeq	r0, #8
 8007958:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800795c:	bf04      	itt	eq
 800795e:	011b      	lsleq	r3, r3, #4
 8007960:	3004      	addeq	r0, #4
 8007962:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007966:	bf04      	itt	eq
 8007968:	009b      	lsleq	r3, r3, #2
 800796a:	3002      	addeq	r0, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	db06      	blt.n	800797e <__hi0bits+0x3c>
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	d503      	bpl.n	800797c <__hi0bits+0x3a>
 8007974:	3001      	adds	r0, #1
 8007976:	4770      	bx	lr
 8007978:	2000      	movs	r0, #0
 800797a:	e7e8      	b.n	800794e <__hi0bits+0xc>
 800797c:	2020      	movs	r0, #32
 800797e:	4770      	bx	lr

08007980 <__lo0bits>:
 8007980:	6803      	ldr	r3, [r0, #0]
 8007982:	f013 0207 	ands.w	r2, r3, #7
 8007986:	4601      	mov	r1, r0
 8007988:	d00b      	beq.n	80079a2 <__lo0bits+0x22>
 800798a:	07da      	lsls	r2, r3, #31
 800798c:	d423      	bmi.n	80079d6 <__lo0bits+0x56>
 800798e:	0798      	lsls	r0, r3, #30
 8007990:	bf49      	itett	mi
 8007992:	085b      	lsrmi	r3, r3, #1
 8007994:	089b      	lsrpl	r3, r3, #2
 8007996:	2001      	movmi	r0, #1
 8007998:	600b      	strmi	r3, [r1, #0]
 800799a:	bf5c      	itt	pl
 800799c:	600b      	strpl	r3, [r1, #0]
 800799e:	2002      	movpl	r0, #2
 80079a0:	4770      	bx	lr
 80079a2:	b298      	uxth	r0, r3
 80079a4:	b9a8      	cbnz	r0, 80079d2 <__lo0bits+0x52>
 80079a6:	0c1b      	lsrs	r3, r3, #16
 80079a8:	2010      	movs	r0, #16
 80079aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80079ae:	bf04      	itt	eq
 80079b0:	0a1b      	lsreq	r3, r3, #8
 80079b2:	3008      	addeq	r0, #8
 80079b4:	071a      	lsls	r2, r3, #28
 80079b6:	bf04      	itt	eq
 80079b8:	091b      	lsreq	r3, r3, #4
 80079ba:	3004      	addeq	r0, #4
 80079bc:	079a      	lsls	r2, r3, #30
 80079be:	bf04      	itt	eq
 80079c0:	089b      	lsreq	r3, r3, #2
 80079c2:	3002      	addeq	r0, #2
 80079c4:	07da      	lsls	r2, r3, #31
 80079c6:	d402      	bmi.n	80079ce <__lo0bits+0x4e>
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	d006      	beq.n	80079da <__lo0bits+0x5a>
 80079cc:	3001      	adds	r0, #1
 80079ce:	600b      	str	r3, [r1, #0]
 80079d0:	4770      	bx	lr
 80079d2:	4610      	mov	r0, r2
 80079d4:	e7e9      	b.n	80079aa <__lo0bits+0x2a>
 80079d6:	2000      	movs	r0, #0
 80079d8:	4770      	bx	lr
 80079da:	2020      	movs	r0, #32
 80079dc:	4770      	bx	lr

080079de <__i2b>:
 80079de:	b510      	push	{r4, lr}
 80079e0:	460c      	mov	r4, r1
 80079e2:	2101      	movs	r1, #1
 80079e4:	f7ff ff27 	bl	8007836 <_Balloc>
 80079e8:	2201      	movs	r2, #1
 80079ea:	6144      	str	r4, [r0, #20]
 80079ec:	6102      	str	r2, [r0, #16]
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <__multiply>:
 80079f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	4614      	mov	r4, r2
 80079f6:	690a      	ldr	r2, [r1, #16]
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	bfb8      	it	lt
 80079fe:	460b      	movlt	r3, r1
 8007a00:	4688      	mov	r8, r1
 8007a02:	bfbc      	itt	lt
 8007a04:	46a0      	movlt	r8, r4
 8007a06:	461c      	movlt	r4, r3
 8007a08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007a10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a18:	eb07 0609 	add.w	r6, r7, r9
 8007a1c:	42b3      	cmp	r3, r6
 8007a1e:	bfb8      	it	lt
 8007a20:	3101      	addlt	r1, #1
 8007a22:	f7ff ff08 	bl	8007836 <_Balloc>
 8007a26:	f100 0514 	add.w	r5, r0, #20
 8007a2a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007a2e:	462b      	mov	r3, r5
 8007a30:	2200      	movs	r2, #0
 8007a32:	4573      	cmp	r3, lr
 8007a34:	d316      	bcc.n	8007a64 <__multiply+0x74>
 8007a36:	f104 0214 	add.w	r2, r4, #20
 8007a3a:	f108 0114 	add.w	r1, r8, #20
 8007a3e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007a42:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	9b00      	ldr	r3, [sp, #0]
 8007a4a:	9201      	str	r2, [sp, #4]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d80c      	bhi.n	8007a6a <__multiply+0x7a>
 8007a50:	2e00      	cmp	r6, #0
 8007a52:	dd03      	ble.n	8007a5c <__multiply+0x6c>
 8007a54:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d05d      	beq.n	8007b18 <__multiply+0x128>
 8007a5c:	6106      	str	r6, [r0, #16]
 8007a5e:	b003      	add	sp, #12
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	f843 2b04 	str.w	r2, [r3], #4
 8007a68:	e7e3      	b.n	8007a32 <__multiply+0x42>
 8007a6a:	f8b2 b000 	ldrh.w	fp, [r2]
 8007a6e:	f1bb 0f00 	cmp.w	fp, #0
 8007a72:	d023      	beq.n	8007abc <__multiply+0xcc>
 8007a74:	4689      	mov	r9, r1
 8007a76:	46ac      	mov	ip, r5
 8007a78:	f04f 0800 	mov.w	r8, #0
 8007a7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007a80:	f8dc a000 	ldr.w	sl, [ip]
 8007a84:	b2a3      	uxth	r3, r4
 8007a86:	fa1f fa8a 	uxth.w	sl, sl
 8007a8a:	fb0b a303 	mla	r3, fp, r3, sl
 8007a8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a92:	f8dc 4000 	ldr.w	r4, [ip]
 8007a96:	4443      	add	r3, r8
 8007a98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007a9c:	fb0b 840a 	mla	r4, fp, sl, r8
 8007aa0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007aa4:	46e2      	mov	sl, ip
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007aac:	454f      	cmp	r7, r9
 8007aae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007ab2:	f84a 3b04 	str.w	r3, [sl], #4
 8007ab6:	d82b      	bhi.n	8007b10 <__multiply+0x120>
 8007ab8:	f8cc 8004 	str.w	r8, [ip, #4]
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007ac2:	3204      	adds	r2, #4
 8007ac4:	f1ba 0f00 	cmp.w	sl, #0
 8007ac8:	d020      	beq.n	8007b0c <__multiply+0x11c>
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	4689      	mov	r9, r1
 8007ace:	46a8      	mov	r8, r5
 8007ad0:	f04f 0b00 	mov.w	fp, #0
 8007ad4:	f8b9 c000 	ldrh.w	ip, [r9]
 8007ad8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007adc:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ae0:	445c      	add	r4, fp
 8007ae2:	46c4      	mov	ip, r8
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007aea:	f84c 3b04 	str.w	r3, [ip], #4
 8007aee:	f859 3b04 	ldr.w	r3, [r9], #4
 8007af2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007af6:	0c1b      	lsrs	r3, r3, #16
 8007af8:	fb0a b303 	mla	r3, sl, r3, fp
 8007afc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007b00:	454f      	cmp	r7, r9
 8007b02:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007b06:	d805      	bhi.n	8007b14 <__multiply+0x124>
 8007b08:	f8c8 3004 	str.w	r3, [r8, #4]
 8007b0c:	3504      	adds	r5, #4
 8007b0e:	e79b      	b.n	8007a48 <__multiply+0x58>
 8007b10:	46d4      	mov	ip, sl
 8007b12:	e7b3      	b.n	8007a7c <__multiply+0x8c>
 8007b14:	46e0      	mov	r8, ip
 8007b16:	e7dd      	b.n	8007ad4 <__multiply+0xe4>
 8007b18:	3e01      	subs	r6, #1
 8007b1a:	e799      	b.n	8007a50 <__multiply+0x60>

08007b1c <__pow5mult>:
 8007b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	4615      	mov	r5, r2
 8007b22:	f012 0203 	ands.w	r2, r2, #3
 8007b26:	4606      	mov	r6, r0
 8007b28:	460f      	mov	r7, r1
 8007b2a:	d007      	beq.n	8007b3c <__pow5mult+0x20>
 8007b2c:	3a01      	subs	r2, #1
 8007b2e:	4c21      	ldr	r4, [pc, #132]	; (8007bb4 <__pow5mult+0x98>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b36:	f7ff fec9 	bl	80078cc <__multadd>
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	10ad      	asrs	r5, r5, #2
 8007b3e:	d035      	beq.n	8007bac <__pow5mult+0x90>
 8007b40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b42:	b93c      	cbnz	r4, 8007b54 <__pow5mult+0x38>
 8007b44:	2010      	movs	r0, #16
 8007b46:	f7fe fad3 	bl	80060f0 <malloc>
 8007b4a:	6270      	str	r0, [r6, #36]	; 0x24
 8007b4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b50:	6004      	str	r4, [r0, #0]
 8007b52:	60c4      	str	r4, [r0, #12]
 8007b54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b5c:	b94c      	cbnz	r4, 8007b72 <__pow5mult+0x56>
 8007b5e:	f240 2171 	movw	r1, #625	; 0x271
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7ff ff3b 	bl	80079de <__i2b>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b6e:	4604      	mov	r4, r0
 8007b70:	6003      	str	r3, [r0, #0]
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	07eb      	lsls	r3, r5, #31
 8007b78:	d50a      	bpl.n	8007b90 <__pow5mult+0x74>
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f7ff ff36 	bl	80079f0 <__multiply>
 8007b84:	4639      	mov	r1, r7
 8007b86:	4681      	mov	r9, r0
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f7ff fe88 	bl	800789e <_Bfree>
 8007b8e:	464f      	mov	r7, r9
 8007b90:	106d      	asrs	r5, r5, #1
 8007b92:	d00b      	beq.n	8007bac <__pow5mult+0x90>
 8007b94:	6820      	ldr	r0, [r4, #0]
 8007b96:	b938      	cbnz	r0, 8007ba8 <__pow5mult+0x8c>
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7ff ff27 	bl	80079f0 <__multiply>
 8007ba2:	6020      	str	r0, [r4, #0]
 8007ba4:	f8c0 8000 	str.w	r8, [r0]
 8007ba8:	4604      	mov	r4, r0
 8007baa:	e7e4      	b.n	8007b76 <__pow5mult+0x5a>
 8007bac:	4638      	mov	r0, r7
 8007bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb2:	bf00      	nop
 8007bb4:	080082f8 	.word	0x080082f8

08007bb8 <__lshift>:
 8007bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	6849      	ldr	r1, [r1, #4]
 8007bc6:	eb0a 0903 	add.w	r9, sl, r3
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	4607      	mov	r7, r0
 8007bce:	4616      	mov	r6, r2
 8007bd0:	f109 0501 	add.w	r5, r9, #1
 8007bd4:	42ab      	cmp	r3, r5
 8007bd6:	db32      	blt.n	8007c3e <__lshift+0x86>
 8007bd8:	4638      	mov	r0, r7
 8007bda:	f7ff fe2c 	bl	8007836 <_Balloc>
 8007bde:	2300      	movs	r3, #0
 8007be0:	4680      	mov	r8, r0
 8007be2:	f100 0114 	add.w	r1, r0, #20
 8007be6:	461a      	mov	r2, r3
 8007be8:	4553      	cmp	r3, sl
 8007bea:	db2b      	blt.n	8007c44 <__lshift+0x8c>
 8007bec:	6920      	ldr	r0, [r4, #16]
 8007bee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bf2:	f104 0314 	add.w	r3, r4, #20
 8007bf6:	f016 021f 	ands.w	r2, r6, #31
 8007bfa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bfe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c02:	d025      	beq.n	8007c50 <__lshift+0x98>
 8007c04:	f1c2 0e20 	rsb	lr, r2, #32
 8007c08:	2000      	movs	r0, #0
 8007c0a:	681e      	ldr	r6, [r3, #0]
 8007c0c:	468a      	mov	sl, r1
 8007c0e:	4096      	lsls	r6, r2
 8007c10:	4330      	orrs	r0, r6
 8007c12:	f84a 0b04 	str.w	r0, [sl], #4
 8007c16:	f853 0b04 	ldr.w	r0, [r3], #4
 8007c1a:	459c      	cmp	ip, r3
 8007c1c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007c20:	d814      	bhi.n	8007c4c <__lshift+0x94>
 8007c22:	6048      	str	r0, [r1, #4]
 8007c24:	b108      	cbz	r0, 8007c2a <__lshift+0x72>
 8007c26:	f109 0502 	add.w	r5, r9, #2
 8007c2a:	3d01      	subs	r5, #1
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007c32:	4621      	mov	r1, r4
 8007c34:	f7ff fe33 	bl	800789e <_Bfree>
 8007c38:	4640      	mov	r0, r8
 8007c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c3e:	3101      	adds	r1, #1
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	e7c7      	b.n	8007bd4 <__lshift+0x1c>
 8007c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	e7cd      	b.n	8007be8 <__lshift+0x30>
 8007c4c:	4651      	mov	r1, sl
 8007c4e:	e7dc      	b.n	8007c0a <__lshift+0x52>
 8007c50:	3904      	subs	r1, #4
 8007c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c56:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c5a:	459c      	cmp	ip, r3
 8007c5c:	d8f9      	bhi.n	8007c52 <__lshift+0x9a>
 8007c5e:	e7e4      	b.n	8007c2a <__lshift+0x72>

08007c60 <__mcmp>:
 8007c60:	6903      	ldr	r3, [r0, #16]
 8007c62:	690a      	ldr	r2, [r1, #16]
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	b530      	push	{r4, r5, lr}
 8007c68:	d10c      	bne.n	8007c84 <__mcmp+0x24>
 8007c6a:	0092      	lsls	r2, r2, #2
 8007c6c:	3014      	adds	r0, #20
 8007c6e:	3114      	adds	r1, #20
 8007c70:	1884      	adds	r4, r0, r2
 8007c72:	4411      	add	r1, r2
 8007c74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c7c:	4295      	cmp	r5, r2
 8007c7e:	d003      	beq.n	8007c88 <__mcmp+0x28>
 8007c80:	d305      	bcc.n	8007c8e <__mcmp+0x2e>
 8007c82:	2301      	movs	r3, #1
 8007c84:	4618      	mov	r0, r3
 8007c86:	bd30      	pop	{r4, r5, pc}
 8007c88:	42a0      	cmp	r0, r4
 8007c8a:	d3f3      	bcc.n	8007c74 <__mcmp+0x14>
 8007c8c:	e7fa      	b.n	8007c84 <__mcmp+0x24>
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c92:	e7f7      	b.n	8007c84 <__mcmp+0x24>

08007c94 <__mdiff>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	460d      	mov	r5, r1
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	f7ff ffdd 	bl	8007c60 <__mcmp>
 8007ca6:	1e06      	subs	r6, r0, #0
 8007ca8:	d108      	bne.n	8007cbc <__mdiff+0x28>
 8007caa:	4631      	mov	r1, r6
 8007cac:	4638      	mov	r0, r7
 8007cae:	f7ff fdc2 	bl	8007836 <_Balloc>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbc:	bfa4      	itt	ge
 8007cbe:	4623      	movge	r3, r4
 8007cc0:	462c      	movge	r4, r5
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	6861      	ldr	r1, [r4, #4]
 8007cc6:	bfa6      	itte	ge
 8007cc8:	461d      	movge	r5, r3
 8007cca:	2600      	movge	r6, #0
 8007ccc:	2601      	movlt	r6, #1
 8007cce:	f7ff fdb2 	bl	8007836 <_Balloc>
 8007cd2:	692b      	ldr	r3, [r5, #16]
 8007cd4:	60c6      	str	r6, [r0, #12]
 8007cd6:	6926      	ldr	r6, [r4, #16]
 8007cd8:	f105 0914 	add.w	r9, r5, #20
 8007cdc:	f104 0214 	add.w	r2, r4, #20
 8007ce0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007ce4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ce8:	f100 0514 	add.w	r5, r0, #20
 8007cec:	f04f 0e00 	mov.w	lr, #0
 8007cf0:	f852 ab04 	ldr.w	sl, [r2], #4
 8007cf4:	f859 4b04 	ldr.w	r4, [r9], #4
 8007cf8:	fa1e f18a 	uxtah	r1, lr, sl
 8007cfc:	b2a3      	uxth	r3, r4
 8007cfe:	1ac9      	subs	r1, r1, r3
 8007d00:	0c23      	lsrs	r3, r4, #16
 8007d02:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007d06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d0a:	b289      	uxth	r1, r1
 8007d0c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007d10:	45c8      	cmp	r8, r9
 8007d12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007d16:	4694      	mov	ip, r2
 8007d18:	f845 3b04 	str.w	r3, [r5], #4
 8007d1c:	d8e8      	bhi.n	8007cf0 <__mdiff+0x5c>
 8007d1e:	45bc      	cmp	ip, r7
 8007d20:	d304      	bcc.n	8007d2c <__mdiff+0x98>
 8007d22:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007d26:	b183      	cbz	r3, 8007d4a <__mdiff+0xb6>
 8007d28:	6106      	str	r6, [r0, #16]
 8007d2a:	e7c5      	b.n	8007cb8 <__mdiff+0x24>
 8007d2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d30:	fa1e f381 	uxtah	r3, lr, r1
 8007d34:	141a      	asrs	r2, r3, #16
 8007d36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d40:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007d44:	f845 3b04 	str.w	r3, [r5], #4
 8007d48:	e7e9      	b.n	8007d1e <__mdiff+0x8a>
 8007d4a:	3e01      	subs	r6, #1
 8007d4c:	e7e9      	b.n	8007d22 <__mdiff+0x8e>

08007d4e <__d2b>:
 8007d4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d52:	460e      	mov	r6, r1
 8007d54:	2101      	movs	r1, #1
 8007d56:	ec59 8b10 	vmov	r8, r9, d0
 8007d5a:	4615      	mov	r5, r2
 8007d5c:	f7ff fd6b 	bl	8007836 <_Balloc>
 8007d60:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d64:	4607      	mov	r7, r0
 8007d66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d6a:	bb34      	cbnz	r4, 8007dba <__d2b+0x6c>
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	f1b8 0300 	subs.w	r3, r8, #0
 8007d72:	d027      	beq.n	8007dc4 <__d2b+0x76>
 8007d74:	a802      	add	r0, sp, #8
 8007d76:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007d7a:	f7ff fe01 	bl	8007980 <__lo0bits>
 8007d7e:	9900      	ldr	r1, [sp, #0]
 8007d80:	b1f0      	cbz	r0, 8007dc0 <__d2b+0x72>
 8007d82:	9a01      	ldr	r2, [sp, #4]
 8007d84:	f1c0 0320 	rsb	r3, r0, #32
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	40c2      	lsrs	r2, r0
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	9201      	str	r2, [sp, #4]
 8007d94:	9b01      	ldr	r3, [sp, #4]
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bf14      	ite	ne
 8007d9c:	2102      	movne	r1, #2
 8007d9e:	2101      	moveq	r1, #1
 8007da0:	6139      	str	r1, [r7, #16]
 8007da2:	b1c4      	cbz	r4, 8007dd6 <__d2b+0x88>
 8007da4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007da8:	4404      	add	r4, r0
 8007daa:	6034      	str	r4, [r6, #0]
 8007dac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007db0:	6028      	str	r0, [r5, #0]
 8007db2:	4638      	mov	r0, r7
 8007db4:	b003      	add	sp, #12
 8007db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dbe:	e7d5      	b.n	8007d6c <__d2b+0x1e>
 8007dc0:	6179      	str	r1, [r7, #20]
 8007dc2:	e7e7      	b.n	8007d94 <__d2b+0x46>
 8007dc4:	a801      	add	r0, sp, #4
 8007dc6:	f7ff fddb 	bl	8007980 <__lo0bits>
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	6139      	str	r1, [r7, #16]
 8007dd2:	3020      	adds	r0, #32
 8007dd4:	e7e5      	b.n	8007da2 <__d2b+0x54>
 8007dd6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007dda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dde:	6030      	str	r0, [r6, #0]
 8007de0:	6918      	ldr	r0, [r3, #16]
 8007de2:	f7ff fdae 	bl	8007942 <__hi0bits>
 8007de6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007dea:	e7e1      	b.n	8007db0 <__d2b+0x62>

08007dec <_calloc_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	fb02 f401 	mul.w	r4, r2, r1
 8007df2:	4621      	mov	r1, r4
 8007df4:	f7fe f9da 	bl	80061ac <_malloc_r>
 8007df8:	4605      	mov	r5, r0
 8007dfa:	b118      	cbz	r0, 8007e04 <_calloc_r+0x18>
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f7fe f97e 	bl	8006100 <memset>
 8007e04:	4628      	mov	r0, r5
 8007e06:	bd38      	pop	{r3, r4, r5, pc}

08007e08 <__ssputs_r>:
 8007e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e0c:	688e      	ldr	r6, [r1, #8]
 8007e0e:	429e      	cmp	r6, r3
 8007e10:	4682      	mov	sl, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	4690      	mov	r8, r2
 8007e16:	4699      	mov	r9, r3
 8007e18:	d837      	bhi.n	8007e8a <__ssputs_r+0x82>
 8007e1a:	898a      	ldrh	r2, [r1, #12]
 8007e1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e20:	d031      	beq.n	8007e86 <__ssputs_r+0x7e>
 8007e22:	6825      	ldr	r5, [r4, #0]
 8007e24:	6909      	ldr	r1, [r1, #16]
 8007e26:	1a6f      	subs	r7, r5, r1
 8007e28:	6965      	ldr	r5, [r4, #20]
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e30:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e34:	f109 0301 	add.w	r3, r9, #1
 8007e38:	443b      	add	r3, r7
 8007e3a:	429d      	cmp	r5, r3
 8007e3c:	bf38      	it	cc
 8007e3e:	461d      	movcc	r5, r3
 8007e40:	0553      	lsls	r3, r2, #21
 8007e42:	d530      	bpl.n	8007ea6 <__ssputs_r+0x9e>
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7fe f9b1 	bl	80061ac <_malloc_r>
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	b950      	cbnz	r0, 8007e64 <__ssputs_r+0x5c>
 8007e4e:	230c      	movs	r3, #12
 8007e50:	f8ca 3000 	str.w	r3, [sl]
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e64:	463a      	mov	r2, r7
 8007e66:	6921      	ldr	r1, [r4, #16]
 8007e68:	f7ff fcd8 	bl	800781c <memcpy>
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e76:	81a3      	strh	r3, [r4, #12]
 8007e78:	6126      	str	r6, [r4, #16]
 8007e7a:	6165      	str	r5, [r4, #20]
 8007e7c:	443e      	add	r6, r7
 8007e7e:	1bed      	subs	r5, r5, r7
 8007e80:	6026      	str	r6, [r4, #0]
 8007e82:	60a5      	str	r5, [r4, #8]
 8007e84:	464e      	mov	r6, r9
 8007e86:	454e      	cmp	r6, r9
 8007e88:	d900      	bls.n	8007e8c <__ssputs_r+0x84>
 8007e8a:	464e      	mov	r6, r9
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	4641      	mov	r1, r8
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	f000 f91d 	bl	80080d0 <memmove>
 8007e96:	68a3      	ldr	r3, [r4, #8]
 8007e98:	1b9b      	subs	r3, r3, r6
 8007e9a:	60a3      	str	r3, [r4, #8]
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	441e      	add	r6, r3
 8007ea0:	6026      	str	r6, [r4, #0]
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7dc      	b.n	8007e60 <__ssputs_r+0x58>
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	f000 f92b 	bl	8008102 <_realloc_r>
 8007eac:	4606      	mov	r6, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d1e2      	bne.n	8007e78 <__ssputs_r+0x70>
 8007eb2:	6921      	ldr	r1, [r4, #16]
 8007eb4:	4650      	mov	r0, sl
 8007eb6:	f7fe f92b 	bl	8006110 <_free_r>
 8007eba:	e7c8      	b.n	8007e4e <__ssputs_r+0x46>

08007ebc <_svfiprintf_r>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	461d      	mov	r5, r3
 8007ec2:	898b      	ldrh	r3, [r1, #12]
 8007ec4:	061f      	lsls	r7, r3, #24
 8007ec6:	b09d      	sub	sp, #116	; 0x74
 8007ec8:	4680      	mov	r8, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	4616      	mov	r6, r2
 8007ece:	d50f      	bpl.n	8007ef0 <_svfiprintf_r+0x34>
 8007ed0:	690b      	ldr	r3, [r1, #16]
 8007ed2:	b96b      	cbnz	r3, 8007ef0 <_svfiprintf_r+0x34>
 8007ed4:	2140      	movs	r1, #64	; 0x40
 8007ed6:	f7fe f969 	bl	80061ac <_malloc_r>
 8007eda:	6020      	str	r0, [r4, #0]
 8007edc:	6120      	str	r0, [r4, #16]
 8007ede:	b928      	cbnz	r0, 8007eec <_svfiprintf_r+0x30>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	f8c8 3000 	str.w	r3, [r8]
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eea:	e0c8      	b.n	800807e <_svfiprintf_r+0x1c2>
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	6163      	str	r3, [r4, #20]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef4:	2320      	movs	r3, #32
 8007ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007efa:	2330      	movs	r3, #48	; 0x30
 8007efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f00:	9503      	str	r5, [sp, #12]
 8007f02:	f04f 0b01 	mov.w	fp, #1
 8007f06:	4637      	mov	r7, r6
 8007f08:	463d      	mov	r5, r7
 8007f0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f0e:	b10b      	cbz	r3, 8007f14 <_svfiprintf_r+0x58>
 8007f10:	2b25      	cmp	r3, #37	; 0x25
 8007f12:	d13e      	bne.n	8007f92 <_svfiprintf_r+0xd6>
 8007f14:	ebb7 0a06 	subs.w	sl, r7, r6
 8007f18:	d00b      	beq.n	8007f32 <_svfiprintf_r+0x76>
 8007f1a:	4653      	mov	r3, sl
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4640      	mov	r0, r8
 8007f22:	f7ff ff71 	bl	8007e08 <__ssputs_r>
 8007f26:	3001      	adds	r0, #1
 8007f28:	f000 80a4 	beq.w	8008074 <_svfiprintf_r+0x1b8>
 8007f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2e:	4453      	add	r3, sl
 8007f30:	9309      	str	r3, [sp, #36]	; 0x24
 8007f32:	783b      	ldrb	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 809d 	beq.w	8008074 <_svfiprintf_r+0x1b8>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	9307      	str	r3, [sp, #28]
 8007f48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f4e:	462f      	mov	r7, r5
 8007f50:	2205      	movs	r2, #5
 8007f52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f56:	4850      	ldr	r0, [pc, #320]	; (8008098 <_svfiprintf_r+0x1dc>)
 8007f58:	f7f8 f942 	bl	80001e0 <memchr>
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	b9d0      	cbnz	r0, 8007f96 <_svfiprintf_r+0xda>
 8007f60:	06d9      	lsls	r1, r3, #27
 8007f62:	bf44      	itt	mi
 8007f64:	2220      	movmi	r2, #32
 8007f66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f6a:	071a      	lsls	r2, r3, #28
 8007f6c:	bf44      	itt	mi
 8007f6e:	222b      	movmi	r2, #43	; 0x2b
 8007f70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f74:	782a      	ldrb	r2, [r5, #0]
 8007f76:	2a2a      	cmp	r2, #42	; 0x2a
 8007f78:	d015      	beq.n	8007fa6 <_svfiprintf_r+0xea>
 8007f7a:	9a07      	ldr	r2, [sp, #28]
 8007f7c:	462f      	mov	r7, r5
 8007f7e:	2000      	movs	r0, #0
 8007f80:	250a      	movs	r5, #10
 8007f82:	4639      	mov	r1, r7
 8007f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f88:	3b30      	subs	r3, #48	; 0x30
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	d94d      	bls.n	800802a <_svfiprintf_r+0x16e>
 8007f8e:	b1b8      	cbz	r0, 8007fc0 <_svfiprintf_r+0x104>
 8007f90:	e00f      	b.n	8007fb2 <_svfiprintf_r+0xf6>
 8007f92:	462f      	mov	r7, r5
 8007f94:	e7b8      	b.n	8007f08 <_svfiprintf_r+0x4c>
 8007f96:	4a40      	ldr	r2, [pc, #256]	; (8008098 <_svfiprintf_r+0x1dc>)
 8007f98:	1a80      	subs	r0, r0, r2
 8007f9a:	fa0b f000 	lsl.w	r0, fp, r0
 8007f9e:	4318      	orrs	r0, r3
 8007fa0:	9004      	str	r0, [sp, #16]
 8007fa2:	463d      	mov	r5, r7
 8007fa4:	e7d3      	b.n	8007f4e <_svfiprintf_r+0x92>
 8007fa6:	9a03      	ldr	r2, [sp, #12]
 8007fa8:	1d11      	adds	r1, r2, #4
 8007faa:	6812      	ldr	r2, [r2, #0]
 8007fac:	9103      	str	r1, [sp, #12]
 8007fae:	2a00      	cmp	r2, #0
 8007fb0:	db01      	blt.n	8007fb6 <_svfiprintf_r+0xfa>
 8007fb2:	9207      	str	r2, [sp, #28]
 8007fb4:	e004      	b.n	8007fc0 <_svfiprintf_r+0x104>
 8007fb6:	4252      	negs	r2, r2
 8007fb8:	f043 0302 	orr.w	r3, r3, #2
 8007fbc:	9207      	str	r2, [sp, #28]
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	783b      	ldrb	r3, [r7, #0]
 8007fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8007fc4:	d10c      	bne.n	8007fe0 <_svfiprintf_r+0x124>
 8007fc6:	787b      	ldrb	r3, [r7, #1]
 8007fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007fca:	d133      	bne.n	8008034 <_svfiprintf_r+0x178>
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	1d1a      	adds	r2, r3, #4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	9203      	str	r2, [sp, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bfb8      	it	lt
 8007fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fdc:	3702      	adds	r7, #2
 8007fde:	9305      	str	r3, [sp, #20]
 8007fe0:	4d2e      	ldr	r5, [pc, #184]	; (800809c <_svfiprintf_r+0x1e0>)
 8007fe2:	7839      	ldrb	r1, [r7, #0]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7f8 f8fa 	bl	80001e0 <memchr>
 8007fec:	b138      	cbz	r0, 8007ffe <_svfiprintf_r+0x142>
 8007fee:	2340      	movs	r3, #64	; 0x40
 8007ff0:	1b40      	subs	r0, r0, r5
 8007ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	4303      	orrs	r3, r0
 8007ffa:	3701      	adds	r7, #1
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	7839      	ldrb	r1, [r7, #0]
 8008000:	4827      	ldr	r0, [pc, #156]	; (80080a0 <_svfiprintf_r+0x1e4>)
 8008002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008006:	2206      	movs	r2, #6
 8008008:	1c7e      	adds	r6, r7, #1
 800800a:	f7f8 f8e9 	bl	80001e0 <memchr>
 800800e:	2800      	cmp	r0, #0
 8008010:	d038      	beq.n	8008084 <_svfiprintf_r+0x1c8>
 8008012:	4b24      	ldr	r3, [pc, #144]	; (80080a4 <_svfiprintf_r+0x1e8>)
 8008014:	bb13      	cbnz	r3, 800805c <_svfiprintf_r+0x1a0>
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	3307      	adds	r3, #7
 800801a:	f023 0307 	bic.w	r3, r3, #7
 800801e:	3308      	adds	r3, #8
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008024:	444b      	add	r3, r9
 8008026:	9309      	str	r3, [sp, #36]	; 0x24
 8008028:	e76d      	b.n	8007f06 <_svfiprintf_r+0x4a>
 800802a:	fb05 3202 	mla	r2, r5, r2, r3
 800802e:	2001      	movs	r0, #1
 8008030:	460f      	mov	r7, r1
 8008032:	e7a6      	b.n	8007f82 <_svfiprintf_r+0xc6>
 8008034:	2300      	movs	r3, #0
 8008036:	3701      	adds	r7, #1
 8008038:	9305      	str	r3, [sp, #20]
 800803a:	4619      	mov	r1, r3
 800803c:	250a      	movs	r5, #10
 800803e:	4638      	mov	r0, r7
 8008040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008044:	3a30      	subs	r2, #48	; 0x30
 8008046:	2a09      	cmp	r2, #9
 8008048:	d903      	bls.n	8008052 <_svfiprintf_r+0x196>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0c8      	beq.n	8007fe0 <_svfiprintf_r+0x124>
 800804e:	9105      	str	r1, [sp, #20]
 8008050:	e7c6      	b.n	8007fe0 <_svfiprintf_r+0x124>
 8008052:	fb05 2101 	mla	r1, r5, r1, r2
 8008056:	2301      	movs	r3, #1
 8008058:	4607      	mov	r7, r0
 800805a:	e7f0      	b.n	800803e <_svfiprintf_r+0x182>
 800805c:	ab03      	add	r3, sp, #12
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4622      	mov	r2, r4
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <_svfiprintf_r+0x1ec>)
 8008064:	a904      	add	r1, sp, #16
 8008066:	4640      	mov	r0, r8
 8008068:	f7fe f98e 	bl	8006388 <_printf_float>
 800806c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008070:	4681      	mov	r9, r0
 8008072:	d1d6      	bne.n	8008022 <_svfiprintf_r+0x166>
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	065b      	lsls	r3, r3, #25
 8008078:	f53f af35 	bmi.w	8007ee6 <_svfiprintf_r+0x2a>
 800807c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800807e:	b01d      	add	sp, #116	; 0x74
 8008080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008084:	ab03      	add	r3, sp, #12
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	4622      	mov	r2, r4
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <_svfiprintf_r+0x1ec>)
 800808c:	a904      	add	r1, sp, #16
 800808e:	4640      	mov	r0, r8
 8008090:	f7fe fc30 	bl	80068f4 <_printf_i>
 8008094:	e7ea      	b.n	800806c <_svfiprintf_r+0x1b0>
 8008096:	bf00      	nop
 8008098:	08008304 	.word	0x08008304
 800809c:	0800830a 	.word	0x0800830a
 80080a0:	0800830e 	.word	0x0800830e
 80080a4:	08006389 	.word	0x08006389
 80080a8:	08007e09 	.word	0x08007e09

080080ac <__ascii_mbtowc>:
 80080ac:	b082      	sub	sp, #8
 80080ae:	b901      	cbnz	r1, 80080b2 <__ascii_mbtowc+0x6>
 80080b0:	a901      	add	r1, sp, #4
 80080b2:	b142      	cbz	r2, 80080c6 <__ascii_mbtowc+0x1a>
 80080b4:	b14b      	cbz	r3, 80080ca <__ascii_mbtowc+0x1e>
 80080b6:	7813      	ldrb	r3, [r2, #0]
 80080b8:	600b      	str	r3, [r1, #0]
 80080ba:	7812      	ldrb	r2, [r2, #0]
 80080bc:	1c10      	adds	r0, r2, #0
 80080be:	bf18      	it	ne
 80080c0:	2001      	movne	r0, #1
 80080c2:	b002      	add	sp, #8
 80080c4:	4770      	bx	lr
 80080c6:	4610      	mov	r0, r2
 80080c8:	e7fb      	b.n	80080c2 <__ascii_mbtowc+0x16>
 80080ca:	f06f 0001 	mvn.w	r0, #1
 80080ce:	e7f8      	b.n	80080c2 <__ascii_mbtowc+0x16>

080080d0 <memmove>:
 80080d0:	4288      	cmp	r0, r1
 80080d2:	b510      	push	{r4, lr}
 80080d4:	eb01 0302 	add.w	r3, r1, r2
 80080d8:	d807      	bhi.n	80080ea <memmove+0x1a>
 80080da:	1e42      	subs	r2, r0, #1
 80080dc:	4299      	cmp	r1, r3
 80080de:	d00a      	beq.n	80080f6 <memmove+0x26>
 80080e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80080e8:	e7f8      	b.n	80080dc <memmove+0xc>
 80080ea:	4283      	cmp	r3, r0
 80080ec:	d9f5      	bls.n	80080da <memmove+0xa>
 80080ee:	1881      	adds	r1, r0, r2
 80080f0:	1ad2      	subs	r2, r2, r3
 80080f2:	42d3      	cmn	r3, r2
 80080f4:	d100      	bne.n	80080f8 <memmove+0x28>
 80080f6:	bd10      	pop	{r4, pc}
 80080f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008100:	e7f7      	b.n	80080f2 <memmove+0x22>

08008102 <_realloc_r>:
 8008102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008104:	4607      	mov	r7, r0
 8008106:	4614      	mov	r4, r2
 8008108:	460e      	mov	r6, r1
 800810a:	b921      	cbnz	r1, 8008116 <_realloc_r+0x14>
 800810c:	4611      	mov	r1, r2
 800810e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008112:	f7fe b84b 	b.w	80061ac <_malloc_r>
 8008116:	b922      	cbnz	r2, 8008122 <_realloc_r+0x20>
 8008118:	f7fd fffa 	bl	8006110 <_free_r>
 800811c:	4625      	mov	r5, r4
 800811e:	4628      	mov	r0, r5
 8008120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008122:	f000 f821 	bl	8008168 <_malloc_usable_size_r>
 8008126:	42a0      	cmp	r0, r4
 8008128:	d20f      	bcs.n	800814a <_realloc_r+0x48>
 800812a:	4621      	mov	r1, r4
 800812c:	4638      	mov	r0, r7
 800812e:	f7fe f83d 	bl	80061ac <_malloc_r>
 8008132:	4605      	mov	r5, r0
 8008134:	2800      	cmp	r0, #0
 8008136:	d0f2      	beq.n	800811e <_realloc_r+0x1c>
 8008138:	4631      	mov	r1, r6
 800813a:	4622      	mov	r2, r4
 800813c:	f7ff fb6e 	bl	800781c <memcpy>
 8008140:	4631      	mov	r1, r6
 8008142:	4638      	mov	r0, r7
 8008144:	f7fd ffe4 	bl	8006110 <_free_r>
 8008148:	e7e9      	b.n	800811e <_realloc_r+0x1c>
 800814a:	4635      	mov	r5, r6
 800814c:	e7e7      	b.n	800811e <_realloc_r+0x1c>

0800814e <__ascii_wctomb>:
 800814e:	b149      	cbz	r1, 8008164 <__ascii_wctomb+0x16>
 8008150:	2aff      	cmp	r2, #255	; 0xff
 8008152:	bf85      	ittet	hi
 8008154:	238a      	movhi	r3, #138	; 0x8a
 8008156:	6003      	strhi	r3, [r0, #0]
 8008158:	700a      	strbls	r2, [r1, #0]
 800815a:	f04f 30ff 	movhi.w	r0, #4294967295
 800815e:	bf98      	it	ls
 8008160:	2001      	movls	r0, #1
 8008162:	4770      	bx	lr
 8008164:	4608      	mov	r0, r1
 8008166:	4770      	bx	lr

08008168 <_malloc_usable_size_r>:
 8008168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800816c:	1f18      	subs	r0, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	bfbc      	itt	lt
 8008172:	580b      	ldrlt	r3, [r1, r0]
 8008174:	18c0      	addlt	r0, r0, r3
 8008176:	4770      	bx	lr

08008178 <_init>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	bf00      	nop
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr

08008184 <_fini>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr

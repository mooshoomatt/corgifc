
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800b170  0800b170  0001b170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b448  0800b448  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800b448  0800b448  0001b448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b450  0800b450  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b450  0800b450  0001b450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b454  0800b454  0001b454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800b458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a28  20000358  0800b7b0  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001d80  0800b7b0  00021d80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3b6  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003505  00000000  00000000  0003a73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  0003dc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003efe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000229fb  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ae7  00000000  00000000  00062c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c354b  00000000  00000000  000746fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137c45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c50  00000000  00000000  00137cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b158 	.word	0x0800b158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800b158 	.word	0x0800b158

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	2200      	movs	r2, #0
 8000f68:	2130      	movs	r1, #48	; 0x30
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f001 fe12 	bl	8002b94 <HAL_I2C_Mem_Read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000f7a:	7a3b      	ldrb	r3, [r7, #8]
 8000f7c:	2b1e      	cmp	r3, #30
 8000f7e:	d001      	beq.n	8000f84 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2200      	movs	r2, #0
 8000f98:	21d0      	movs	r1, #208	; 0xd0
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 fdfa 	bl	8002b94 <HAL_I2C_Mem_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000faa:	7a3b      	ldrb	r3, [r7, #8]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d001      	beq.n	8000fb4 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <BMI088_I2C_GYRO_INIT>:

/* CUSTOM GYROSCOPE SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_GYRO_INIT(I2C_HandleTypeDef *hi2c)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	 * WRITING BACK TO THE REGISTER
	 */

	HAL_StatusTypeDef ret;
	uint8_t buf[1]; // Tx/Rx Buffer
	ret = HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
	// ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_RANGE, buf));

	// SET GYROSCOPE DATA RATE AND BANDWIDTH
	// DATA RATE: [1000 HZ]    400 HZ
	// BANDWIDTH: [116 Hz]     47 HZ
	buf[0] = 0x82;
 8000fca:	2382      	movs	r3, #130	; 0x82
 8000fcc:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_BANDWIDTH, buf);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	2168      	movs	r1, #104	; 0x68
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f878 	bl	80010cc <BMI088_I2C_Reg_Write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	73fb      	strb	r3, [r7, #15]

	// SET GYROSCOPE INT3 MODE TO PUSH-PULL
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2216      	movs	r2, #22
 8000fec:	2168      	movs	r1, #104	; 0x68
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f88b 	bl	800110a <BMI088_I2C_Reg_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	73fb      	strb	r3, [r7, #15]
	buf[0] &= 0xFD;
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	f023 0302 	bic.w	r3, r3, #2
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2216      	movs	r2, #22
 800100e:	2168      	movs	r1, #104	; 0x68
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f85b 	bl	80010cc <BMI088_I2C_Reg_Write>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	4313      	orrs	r3, r2
 800101e:	73fb      	strb	r3, [r7, #15]

	// MAP GYROSCOPE DATA-READY INTERRUPT TO INT3
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2218      	movs	r2, #24
 8001026:	2168      	movs	r1, #104	; 0x68
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f86e 	bl	800110a <BMI088_I2C_Reg_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4313      	orrs	r3, r2
 8001036:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x01;
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2218      	movs	r2, #24
 8001048:	2168      	movs	r1, #104	; 0x68
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f83e 	bl	80010cc <BMI088_I2C_Reg_Write>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4313      	orrs	r3, r2
 8001058:	73fb      	strb	r3, [r7, #15]

	// ENABLE GYROSCOPE DATA-READY INTERRUPT
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2215      	movs	r2, #21
 8001060:	2168      	movs	r1, #104	; 0x68
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f851 	bl	800110a <BMI088_I2C_Reg_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4313      	orrs	r3, r2
 8001070:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x80;
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001078:	b2db      	uxtb	r3, r3
 800107a:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2215      	movs	r2, #21
 8001082:	2168      	movs	r1, #104	; 0x68
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f821 	bl	80010cc <BMI088_I2C_Reg_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	4313      	orrs	r3, r2
 8001092:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <BMI088_I2C_Read_Gyro>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_ACC_ADDR << 1, ACC_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* READ ALL GYROSCOPE DATA IN POLLING MODE */
HAL_StatusTypeDef BMI088_I2C_Read_Gyro(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af04      	add	r7, sp, #16
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2306      	movs	r3, #6
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	2202      	movs	r2, #2
 80010ba:	21d0      	movs	r1, #208	; 0xd0
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f001 fd69 	bl	8002b94 <HAL_I2C_Mem_Read>
 80010c2:	4603      	mov	r3, r0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <BMI088_I2C_Reg_Write>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* WRITE REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
 80010da:	4613      	mov	r3, r2
 80010dc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b299      	uxth	r1, r3
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f001 fc50 	bl	80029a0 <HAL_I2C_Mem_Write>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <BMI088_I2C_Reg_Read>:

/* READ REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b088      	sub	sp, #32
 800110e:	af04      	add	r7, sp, #16
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	72fb      	strb	r3, [r7, #11]
 8001118:	4613      	mov	r3, r2
 800111a:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	b29b      	uxth	r3, r3
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	b299      	uxth	r1, r3
 8001124:	7abb      	ldrb	r3, [r7, #10]
 8001126:	b29a      	uxth	r2, r3
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f001 fd2b 	bl	8002b94 <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <PID1_Init>:

#include "PID1.h"

/* INITIALIZATION FUNCTION */
PID_StatusTypeDef PID1_Init(PID1 *pid, float p, float i, float d)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	ed87 0a02 	vstr	s0, [r7, #8]
 8001154:	edc7 0a01 	vstr	s1, [r7, #4]
 8001158:	ed87 1a00 	vstr	s2, [r7]
	/* CLEAR ALL VARIABLES */
	pid->set        = 0.0;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
	pid->output     = 0.0;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
	pid->integral   = 0.0;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
	pid->prevError  = 0.0;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
	pid->derivative = 0.0;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->prevMeas   = 0.0;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	641a      	str	r2, [r3, #64]	; 0x40

	/* SET GAINS */
	pid->Kp = p;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	60da      	str	r2, [r3, #12]
	pid->Ki = i;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	611a      	str	r2, [r3, #16]
	pid->Kd = d;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	615a      	str	r2, [r3, #20]

	/* SET CLAMPS */
	pid->intLimMax = PID_MAXINT;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <PID1_Init+0xc8>)
 80011a2:	619a      	str	r2, [r3, #24]
	pid->intLimMin = PID_MININT;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <PID1_Init+0xcc>)
 80011a8:	61da      	str	r2, [r3, #28]
	pid->outLimMax = PID_MAXOUT;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4a18      	ldr	r2, [pc, #96]	; (8001210 <PID1_Init+0xc8>)
 80011ae:	621a      	str	r2, [r3, #32]
	pid->outLimMin = PID_MINOUT;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <PID1_Init+0xcc>)
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

	if ((p <= 0) & (i <= 0) & (d <= 0)) { return PID_ERROR; }
 80011b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	bf94      	ite	ls
 80011c4:	2301      	movls	r3, #1
 80011c6:	2300      	movhi	r3, #0
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	bf94      	ite	ls
 80011d8:	2301      	movls	r3, #1
 80011da:	2300      	movhi	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4013      	ands	r3, r2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	edd7 7a00 	vldr	s15, [r7]
 80011e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	bf94      	ite	ls
 80011f2:	2301      	movls	r3, #1
 80011f4:	2300      	movhi	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <PID1_Init+0xba>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <PID1_Init+0xbc>

	return PID_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	447a0000 	.word	0x447a0000
 8001214:	c47a0000 	.word	0xc47a0000

08001218 <PID1_Set_Tau>:

/* SET FILTER TIME CONSTANT */
PID_StatusTypeDef PID1_Set_Tau(PID1 *pid, float t)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (t < 0.0) { return PID_ERROR; }
 8001224:	edd7 7a00 	vldr	s15, [r7]
 8001228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d501      	bpl.n	8001236 <PID1_Set_Tau+0x1e>
 8001232:	2301      	movs	r3, #1
 8001234:	e003      	b.n	800123e <PID1_Set_Tau+0x26>

	pid->tau = t;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28

	return PID_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PID1_Set_Integrator_Limit>:

/* SET INTEGRATOR LIMIT */
PID_StatusTypeDef PID1_Set_Integrator_Limit(PID1 *pid, float min, float max)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	ed87 0a02 	vstr	s0, [r7, #8]
 8001256:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((min >= 0.0) | (max <= 0.0)) { return PID_ERROR; }
 800125a:	edd7 7a02 	vldr	s15, [r7, #8]
 800125e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	bfac      	ite	ge
 8001268:	2301      	movge	r3, #1
 800126a:	2300      	movlt	r3, #0
 800126c:	b2da      	uxtb	r2, r3
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	bf94      	ite	ls
 800127c:	2301      	movls	r3, #1
 800127e:	2300      	movhi	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <PID1_Set_Integrator_Limit+0x44>
 800128a:	2301      	movs	r3, #1
 800128c:	e006      	b.n	800129c <PID1_Set_Integrator_Limit+0x52>

	pid->intLimMax = max;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
	pid->intLimMin = min;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	61da      	str	r2, [r3, #28]

	return PID_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <PID1_Set_Output_Limit>:

/* SET OUTPUT LIMIT */
PID_StatusTypeDef PID1_Set_Output_Limit(PID1 *pid, float min, float max)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80012b4:	edc7 0a01 	vstr	s1, [r7, #4]
	if ((min >= 0.0) | (max <= 0.0)) { return PID_ERROR; }
 80012b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	bfac      	ite	ge
 80012c6:	2301      	movge	r3, #1
 80012c8:	2300      	movlt	r3, #0
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	bf94      	ite	ls
 80012da:	2301      	movls	r3, #1
 80012dc:	2300      	movhi	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <PID1_Set_Output_Limit+0x44>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e006      	b.n	80012fa <PID1_Set_Output_Limit+0x52>

	pid->outLimMax = max;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	621a      	str	r2, [r3, #32]
	pid->outLimMin = min;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24

	return PID_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <PID1_Update>:

/* ADVANCE TIMESTEP FUNCTION */
PID_StatusTypeDef PID1_Update(PID1 *pid, float T)
{
 8001308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	ed87 0a00 	vstr	s0, [r7]
	// CALCULATE ERROR
	pid->error = pid->set - pid->meas;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// CALCULATE PROPORTIONAL TERM
	pid->proportional = pid->Kp * pid->error;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	// CALCULATE INTEGRAL TERM AND CLAMP
	pid->integral = pid->integral + 0.5*(pid->Ki)*T*(pid->error + pid->prevError);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8fe 	bl	8000548 <__aeabi_f2d>
 800134c:	4680      	mov	r8, r0
 800134e:	4689      	mov	r9, r1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8f7 	bl	8000548 <__aeabi_f2d>
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b8e      	ldr	r3, [pc, #568]	; (8001598 <PID1_Update+0x290>)
 8001360:	f7ff f94a 	bl	80005f8 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4692      	mov	sl, r2
 800136a:	469b      	mov	fp, r3
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff f8eb 	bl	8000548 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4650      	mov	r0, sl
 8001378:	4659      	mov	r1, fp
 800137a:	f7ff f93d 	bl	80005f8 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4692      	mov	sl, r2
 8001384:	469b      	mov	fp, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	ee17 0a90 	vmov	r0, s15
 800139a:	f7ff f8d5 	bl	8000548 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4650      	mov	r0, sl
 80013a4:	4659      	mov	r1, fp
 80013a6:	f7ff f927 	bl	80005f8 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4640      	mov	r0, r8
 80013b0:	4649      	mov	r1, r9
 80013b2:	f7fe ff6b 	bl	800028c <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbf3 	bl	8000ba8 <__aeabi_d2f>
 80013c2:	4602      	mov	r2, r0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
	pid->integral = (pid->integral > pid->intLimMax) ? pid->intLimMax : pid->integral;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80013d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	dd02      	ble.n	80013e4 <PID1_Update+0xdc>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	e001      	b.n	80013e8 <PID1_Update+0xe0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6353      	str	r3, [r2, #52]	; 0x34
	pid->integral = (pid->integral < pid->intLimMin) ? pid->intLimMin : pid->integral;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80013f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	d502      	bpl.n	8001408 <PID1_Update+0x100>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	e001      	b.n	800140c <PID1_Update+0x104>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6353      	str	r3, [r2, #52]	; 0x34

	// CALCULATE DERIVATIVE TERM (ON MEASUREMENT)
	if (T == 0) { return PID_ERROR; }
 8001410:	edd7 7a00 	vldr	s15, [r7]
 8001414:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d101      	bne.n	8001422 <PID1_Update+0x11a>
 800141e:	2301      	movs	r3, #1
 8001420:	e0b4      	b.n	800158c <PID1_Update+0x284>
	pid->derivative = -(2.0*(pid->Kd)*(pid->meas - pid->prevMeas) + (2.0*pid->tau - T)*pid->derivative)/(2.0*pid->tau + T);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f88e 	bl	8000548 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	f7fe ff2c 	bl	800028c <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4690      	mov	r8, r2
 800143a:	4699      	mov	r9, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144c:	ee17 0a90 	vmov	r0, s15
 8001450:	f7ff f87a 	bl	8000548 <__aeabi_f2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4640      	mov	r0, r8
 800145a:	4649      	mov	r1, r9
 800145c:	f7ff f8cc 	bl	80005f8 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4690      	mov	r8, r2
 8001466:	4699      	mov	r9, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f86b 	bl	8000548 <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	f7fe ff09 	bl	800028c <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4692      	mov	sl, r2
 8001480:	469b      	mov	fp, r3
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f7ff f860 	bl	8000548 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4650      	mov	r0, sl
 800148e:	4659      	mov	r1, fp
 8001490:	f7fe fefa 	bl	8000288 <__aeabi_dsub>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4692      	mov	sl, r2
 800149a:	469b      	mov	fp, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f851 	bl	8000548 <__aeabi_f2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4650      	mov	r0, sl
 80014ac:	4659      	mov	r1, fp
 80014ae:	f7ff f8a3 	bl	80005f8 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4640      	mov	r0, r8
 80014b8:	4649      	mov	r1, r9
 80014ba:	f7fe fee7 	bl	800028c <__adddf3>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4614      	mov	r4, r2
 80014c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f83b 	bl	8000548 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	f7fe fed9 	bl	800028c <__adddf3>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4690      	mov	r8, r2
 80014e0:	4699      	mov	r9, r3
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f7ff f830 	bl	8000548 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4640      	mov	r0, r8
 80014ee:	4649      	mov	r1, r9
 80014f0:	f7fe fecc 	bl	800028c <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7ff f9a6 	bl	800084c <__aeabi_ddiv>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	4618      	mov	r0, r3
 8001506:	4621      	mov	r1, r4
 8001508:	f7ff fb4e 	bl	8000ba8 <__aeabi_d2f>
 800150c:	4602      	mov	r2, r0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c

	// CALCULATE OUTPUT AND CLAMP
	pid->output = pid->proportional + pid->integral + pid->derivative;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800151e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->output = (pid->output > pid->outLimMax) ? pid->outLimMax : pid->output;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	ed93 7a02 	vldr	s14, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	edd3 7a08 	vldr	s15, [r3, #32]
 800153e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	dd02      	ble.n	800154e <PID1_Update+0x246>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	e001      	b.n	8001552 <PID1_Update+0x24a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6093      	str	r3, [r2, #8]
	pid->output = (pid->output < pid->outLimMin) ? pid->outLimMin : pid->output;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a02 	vldr	s14, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	d502      	bpl.n	8001572 <PID1_Update+0x26a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	e001      	b.n	8001576 <PID1_Update+0x26e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6093      	str	r3, [r2, #8]

	// UPDATE TEMPVARS
	pid->prevError = pid->error;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
	pid->prevMeas  = pid->meas;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40

	return PID_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001596:	bf00      	nop
 8001598:	3fe00000 	.word	0x3fe00000
 800159c:	00000000 	.word	0x00000000

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b0ac      	sub	sp, #176	; 0xb0
 80015a6:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* CONSTANTS */
  const float pi = 3.14159265;
 80015a8:	4bd9      	ldr	r3, [pc, #868]	; (8001910 <main+0x370>)
 80015aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const float GYRO_RATE_SCALE = 2000.0;
 80015ae:	4bd9      	ldr	r3, [pc, #868]	; (8001914 <main+0x374>)
 80015b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  const float RATES[] = {XRATE, YRATE, ZRATE};

  /* ORIENTATION */
  float rot[] = {0.0, 0.0, 0.0};
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	673b      	str	r3, [r7, #112]	; 0x70
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	677b      	str	r3, [r7, #116]	; 0x74

  /* SETPOINT */
  float set[] = {0.0, 0.0, 0.0};
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	663b      	str	r3, [r7, #96]	; 0x60
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	667b      	str	r3, [r7, #100]	; 0x64
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	66bb      	str	r3, [r7, #104]	; 0x68

  /* BUFFERS */
  char    tx_buf[64];    // TX BUFFER
  uint8_t gyro_buf[6];   // GYROSCOPE BYTE BUFFER

  float  gyro_rate[]  = {0.0, 0.0, 0.0}; // GYROSCOPE RATE BUFFER
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  float  stick_rate[] = {0.0, 0.0, 0.0}; // CONTROL RATE BUFFER
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fa:	f000 fd27 	bl	800204c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fe:	f000 fa01 	bl	8001a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f000 fb03 	bl	8001c0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001606:	f000 fa67 	bl	8001ad8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800160a:	f007 f819 	bl	8008640 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 800160e:	f000 fac7 	bl	8001ba0 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001612:	f000 fa8f 	bl	8001b34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 8001616:	48c0      	ldr	r0, [pc, #768]	; (8001918 <main+0x378>)
 8001618:	f7ff fc96 	bl	8000f48 <BMI088_I2C_Read_CHIP_IDS>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <main+0x86>
 8001622:	f000 fb93 	bl	8001d4c <Error_Handler>

  // RUN BMI088 GYROSCOPE INITIALIZATION
  if ( BMI088_I2C_GYRO_INIT(&hi2c1) != HAL_OK )     { Error_Handler(); };
 8001626:	48bc      	ldr	r0, [pc, #752]	; (8001918 <main+0x378>)
 8001628:	f7ff fcc9 	bl	8000fbe <BMI088_I2C_GYRO_INIT>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <main+0x96>
 8001632:	f000 fb8b 	bl	8001d4c <Error_Handler>

  // INITALIZE PID CONTROLLER
  if ( PID1_Init(&PID, Kp, Ki, Kd) != PID_OK )                   { Error_Handler(); }
 8001636:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800163a:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 800191c <main+0x37c>
 800163e:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8001920 <main+0x380>
 8001642:	eeb0 1a66 	vmov.f32	s2, s13
 8001646:	eef0 0a47 	vmov.f32	s1, s14
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	48b5      	ldr	r0, [pc, #724]	; (8001924 <main+0x384>)
 8001650:	f7ff fd7a 	bl	8001148 <PID1_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <main+0xbe>
 800165a:	f000 fb77 	bl	8001d4c <Error_Handler>
  if ( PID1_Set_Tau(&PID, 0.02) != PID_OK)                       { Error_Handler(); }
 800165e:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8001928 <main+0x388>
 8001662:	48b0      	ldr	r0, [pc, #704]	; (8001924 <main+0x384>)
 8001664:	f7ff fdd8 	bl	8001218 <PID1_Set_Tau>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <main+0xd2>
 800166e:	f000 fb6d 	bl	8001d4c <Error_Handler>
  if ( PID1_Set_Integrator_Limit(&PID, -100.0, 100.0) != PID_OK) { Error_Handler(); }
 8001672:	eddf 0aae 	vldr	s1, [pc, #696]	; 800192c <main+0x38c>
 8001676:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8001930 <main+0x390>
 800167a:	48aa      	ldr	r0, [pc, #680]	; (8001924 <main+0x384>)
 800167c:	f7ff fde5 	bl	800124a <PID1_Set_Integrator_Limit>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <main+0xea>
 8001686:	f000 fb61 	bl	8001d4c <Error_Handler>
  if ( PID1_Set_Output_Limit(&PID, -100.0, 100.0) != PID_OK)     { Error_Handler(); }
 800168a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800192c <main+0x38c>
 800168e:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8001930 <main+0x390>
 8001692:	48a4      	ldr	r0, [pc, #656]	; (8001924 <main+0x384>)
 8001694:	f7ff fe08 	bl	80012a8 <PID1_Set_Output_Limit>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <main+0x102>
 800169e:	f000 fb55 	bl	8001d4c <Error_Handler>

  // START TIMERS
  HAL_TIM_Base_Start_IT(&htim7);
 80016a2:	48a4      	ldr	r0, [pc, #656]	; (8001934 <main+0x394>)
 80016a4:	f003 fe15 	bl	80052d2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80016a8:	48a3      	ldr	r0, [pc, #652]	; (8001938 <main+0x398>)
 80016aa:	f003 fdee 	bl	800528a <HAL_TIM_Base_Start>

  // Get starting time
  tprev = __HAL_TIM_GET_COUNTER(&htim6);
 80016ae:	4ba2      	ldr	r3, [pc, #648]	; (8001938 <main+0x398>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

  // TURN ON STATUS LED
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2140      	movs	r1, #64	; 0x40
 80016bc:	489f      	ldr	r0, [pc, #636]	; (800193c <main+0x39c>)
 80016be:	f001 f805 	bl	80026cc <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // CHECK IF DATA_READY FLAG IS SET
	  if (DATA_STATUS == DATA_READY)
 80016c2:	4b9f      	ldr	r3, [pc, #636]	; (8001940 <main+0x3a0>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8156 	bne.w	800197a <main+0x3da>
	  {
		  // READ GYROSCOPE
		  if ( BMI088_I2C_Read_Gyro(&hi2c1, gyro_buf) != HAL_OK ) { Error_Handler(); }
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	4619      	mov	r1, r3
 80016d4:	4890      	ldr	r0, [pc, #576]	; (8001918 <main+0x378>)
 80016d6:	f7ff fce2 	bl	800109e <BMI088_I2C_Read_Gyro>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <main+0x144>
 80016e0:	f000 fb34 	bl	8001d4c <Error_Handler>

		  // UPDATE TIMER
		  telapsed = __HAL_TIM_GET_COUNTER(&htim6) - tprev;
 80016e4:	4b94      	ldr	r3, [pc, #592]	; (8001938 <main+0x398>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		  tprev    = tprev + telapsed;
 80016f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80016fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80016fe:	4413      	add	r3, r2
 8001700:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

		  // CONVERT TO SIGNED INTEGER, SCALE, AND INTEGRATE
		  for (int i = 0; i < 3; i++)
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800170a:	e07c      	b.n	8001806 <main+0x266>
		  {
			  temp         = gyro_buf[2*i + 1] << 8 | gyro_buf[2*i];
 800170c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3301      	adds	r3, #1
 8001714:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001718:	4413      	add	r3, r2
 800171a:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	b21a      	sxth	r2, r3
 8001722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800172c:	440b      	add	r3, r1
 800172e:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			  gyro_rate[i] = ((float)temp*GYRO_RATE_SCALE*pi)/(32767.0*180.0);
 800173a:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001746:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800174a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001756:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001944 <main+0x3a4>
 800175a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001768:	4413      	add	r3, r2
 800176a:	3b8c      	subs	r3, #140	; 0x8c
 800176c:	edc3 7a00 	vstr	s15, [r3]
			  rot[i]       = rot[i] + 0.000001*(float)telapsed*gyro_rate[i];
 8001770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800177a:	4413      	add	r3, r2
 800177c:	3b2c      	subs	r3, #44	; 0x2c
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fee1 	bl	8000548 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
 800178a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001796:	ee17 0a90 	vmov	r0, s15
 800179a:	f7fe fed5 	bl	8000548 <__aeabi_f2d>
 800179e:	a35a      	add	r3, pc, #360	; (adr r3, 8001908 <main+0x368>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe ff28 	bl	80005f8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4690      	mov	r8, r2
 80017ae:	4699      	mov	r9, r3
 80017b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80017ba:	4413      	add	r3, r2
 80017bc:	3b8c      	subs	r3, #140	; 0x8c
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fec1 	bl	8000548 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4640      	mov	r0, r8
 80017cc:	4649      	mov	r1, r9
 80017ce:	f7fe ff13 	bl	80005f8 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe fd57 	bl	800028c <__adddf3>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4618      	mov	r0, r3
 80017e4:	4621      	mov	r1, r4
 80017e6:	f7ff f9df 	bl	8000ba8 <__aeabi_d2f>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80017f6:	440b      	add	r3, r1
 80017f8:	3b2c      	subs	r3, #44	; 0x2c
 80017fa:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 3; i++)
 80017fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001800:	3301      	adds	r3, #1
 8001802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800180a:	2b02      	cmp	r3, #2
 800180c:	f77f af7e 	ble.w	800170c <main+0x16c>
		  }
		  PID.meas = rot[0];
 8001810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001812:	4a44      	ldr	r2, [pc, #272]	; (8001924 <main+0x384>)
 8001814:	6053      	str	r3, [r2, #4]

		  // UPDATE ROTATION SETPOINT
		  for (int i = 0; i < 3; i++)
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800181c:	e04a      	b.n	80018b4 <main+0x314>
		  {
			  // {TODO} GET PWM RAW DATA
			  // {TODO} CONVERT PWM DATA
			  // {TODO} CALCULTE stick_rate[i] as a function of RATES[i]
			  set[i] = set[i] + 0.000001*(float)telapsed*stick_rate[i];
 800181e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001828:	4413      	add	r3, r2
 800182a:	3b38      	subs	r3, #56	; 0x38
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe8a 	bl	8000548 <__aeabi_f2d>
 8001834:	4604      	mov	r4, r0
 8001836:	460d      	mov	r5, r1
 8001838:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001844:	ee17 0a90 	vmov	r0, s15
 8001848:	f7fe fe7e 	bl	8000548 <__aeabi_f2d>
 800184c:	a32e      	add	r3, pc, #184	; (adr r3, 8001908 <main+0x368>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fed1 	bl	80005f8 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4690      	mov	r8, r2
 800185c:	4699      	mov	r9, r3
 800185e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001868:	4413      	add	r3, r2
 800186a:	3b98      	subs	r3, #152	; 0x98
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe6a 	bl	8000548 <__aeabi_f2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4640      	mov	r0, r8
 800187a:	4649      	mov	r1, r9
 800187c:	f7fe febc 	bl	80005f8 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7fe fd00 	bl	800028c <__adddf3>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	4618      	mov	r0, r3
 8001892:	4621      	mov	r1, r4
 8001894:	f7ff f988 	bl	8000ba8 <__aeabi_d2f>
 8001898:	4602      	mov	r2, r0
 800189a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80018a4:	440b      	add	r3, r1
 80018a6:	3b38      	subs	r3, #56	; 0x38
 80018a8:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 3; i++)
 80018aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ae:	3301      	adds	r3, #1
 80018b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80018b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	ddb0      	ble.n	800181e <main+0x27e>
		  }

		  // IMPLEMENT PID ALGORITHM
		  if (PID1_Update(&PID, 0.000001*(float)telapsed) != PID_OK) { Error_Handler(); }
 80018bc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c8:	ee17 0a90 	vmov	r0, s15
 80018cc:	f7fe fe3c 	bl	8000548 <__aeabi_f2d>
 80018d0:	a30d      	add	r3, pc, #52	; (adr r3, 8001908 <main+0x368>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe8f 	bl	80005f8 <__aeabi_dmul>
 80018da:	4603      	mov	r3, r0
 80018dc:	460c      	mov	r4, r1
 80018de:	4618      	mov	r0, r3
 80018e0:	4621      	mov	r1, r4
 80018e2:	f7ff f961 	bl	8000ba8 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	ee00 3a10 	vmov	s0, r3
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <main+0x384>)
 80018ee:	f7ff fd0b 	bl	8001308 <PID1_Update>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <main+0x35c>
 80018f8:	f000 fa28 	bl	8001d4c <Error_Handler>
		  for (int i = 0; i < 3; i++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001902:	e026      	b.n	8001952 <main+0x3b2>
 8001904:	f3af 8000 	nop.w
 8001908:	a0b5ed8d 	.word	0xa0b5ed8d
 800190c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001910:	40490fdb 	.word	0x40490fdb
 8001914:	44fa0000 	.word	0x44fa0000
 8001918:	20000388 	.word	0x20000388
 800191c:	3dcccccd 	.word	0x3dcccccd
 8001920:	00000000 	.word	0x00000000
 8001924:	200003dc 	.word	0x200003dc
 8001928:	3ca3d70a 	.word	0x3ca3d70a
 800192c:	42c80000 	.word	0x42c80000
 8001930:	c2c80000 	.word	0xc2c80000
 8001934:	20000460 	.word	0x20000460
 8001938:	20000420 	.word	0x20000420
 800193c:	40020800 	.word	0x40020800
 8001940:	20000374 	.word	0x20000374
 8001944:	4ab3fe98 	.word	0x4ab3fe98
 8001948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800194c:	3301      	adds	r3, #1
 800194e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001956:	2b02      	cmp	r3, #2
 8001958:	ddf6      	ble.n	8001948 <main+0x3a8>
			  // {TODO} CALCULATE I TERM
			  // {TODO} CALCULATE D TERM
		  }

		  // UPDATE MOTOR SETTINGS
		  for (int i = 0; i < 3; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001960:	e004      	b.n	800196c <main+0x3cc>
 8001962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001966:	3301      	adds	r3, #1
 8001968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800196c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001970:	2b02      	cmp	r3, #2
 8001972:	ddf6      	ble.n	8001962 <main+0x3c2>
		  {
			  // {TODO} UPDATE AXIS PWM RATE
		  }

		  // RESET DATA_READY FLAG
		  DATA_STATUS = DATA_RESET;
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <main+0x454>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	  }

	  // CHECK IF UPDATE_READY FLAG IS SET
	  if (UPDATE_STATUS == UPDATE_READY)
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <main+0x458>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	f47f ae9e 	bne.w	80016c2 <main+0x122>
	  {
		  // SEND ORIENTATION DATA OVER VIRTUAL COM PORT
		  // DATA FORMAT: [X ANGLE]    [Y ANGLE]    [Z ANGLE]    [COMPUTATION TIME (uSec)]
		  sprintf(tx_buf, "%f\t%f\t%f\t%f\n", rot[0], rot[1], rot[2], PID.output);
 8001986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fddd 	bl	8000548 <__aeabi_f2d>
 800198e:	4682      	mov	sl, r0
 8001990:	468b      	mov	fp, r1
 8001992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fdd7 	bl	8000548 <__aeabi_f2d>
 800199a:	4604      	mov	r4, r0
 800199c:	460d      	mov	r5, r1
 800199e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdd1 	bl	8000548 <__aeabi_f2d>
 80019a6:	4680      	mov	r8, r0
 80019a8:	4689      	mov	r9, r1
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <main+0x45c>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdca 	bl	8000548 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	f107 0020 	add.w	r0, r7, #32
 80019bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80019c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80019c4:	e9cd 4500 	strd	r4, r5, [sp]
 80019c8:	4652      	mov	r2, sl
 80019ca:	465b      	mov	r3, fp
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <main+0x460>)
 80019ce:	f008 f8a1 	bl	8009b14 <siprintf>
		  CDC_Transmit_FS((uint8_t*)tx_buf, strlen(tx_buf));
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fbfa 	bl	80001d0 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f006 fefc 	bl	80087e4 <CDC_Transmit_FS>

		  // RESET UPDATE_READY FLAG
		  UPDATE_STATUS = UPDATE_RESET;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <main+0x458>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
	  if (DATA_STATUS == DATA_READY)
 80019f2:	e666      	b.n	80016c2 <main+0x122>
 80019f4:	20000374 	.word	0x20000374
 80019f8:	20000375 	.word	0x20000375
 80019fc:	200003dc 	.word	0x200003dc
 8001a00:	0800b170 	.word	0x0800b170

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b094      	sub	sp, #80	; 0x50
 8001a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	2230      	movs	r2, #48	; 0x30
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f007 fb62 	bl	80090dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <SystemClock_Config+0xcc>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <SystemClock_Config+0xcc>)
 8001a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a36:	6413      	str	r3, [r2, #64]	; 0x40
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <SystemClock_Config+0xcc>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <SystemClock_Config+0xd0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <SystemClock_Config+0xd0>)
 8001a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <SystemClock_Config+0xd0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a74:	2310      	movs	r3, #16
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 8001a78:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001a82:	2306      	movs	r3, #6
 8001a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a86:	f107 0320 	add.w	r3, r7, #32
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 ff86 	bl	800499c <HAL_RCC_OscConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a96:	f000 f959 	bl	8001d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001aac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ab0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 f9df 	bl	8004e7c <HAL_RCC_ClockConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ac4:	f000 f942 	bl	8001d4c <Error_Handler>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3750      	adds	r7, #80	; 0x50
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <MX_I2C1_Init+0x54>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <MX_I2C1_Init+0x58>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_I2C1_Init+0x50>)
 8001b16:	f000 fe0b 	bl	8002730 <HAL_I2C_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b20:	f000 f914 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000388 	.word	0x20000388
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	00061a80 	.word	0x00061a80

08001b34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_TIM6_Init+0x64>)
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <MX_TIM6_Init+0x68>)
 8001b46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_TIM6_Init+0x64>)
 8001b4a:	2247      	movs	r2, #71	; 0x47
 8001b4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_TIM6_Init+0x64>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_TIM6_Init+0x64>)
 8001b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_TIM6_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <MX_TIM6_Init+0x64>)
 8001b64:	f003 fb66 	bl	8005234 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b6e:	f000 f8ed 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_TIM6_Init+0x64>)
 8001b80:	f003 fd9c 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b8a:	f000 f8df 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000420 	.word	0x20000420
 8001b9c:	40001000 	.word	0x40001000

08001ba0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bb0:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <MX_TIM7_Init+0x68>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72 - 1;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bb6:	2247      	movs	r2, #71	; 0x47
 8001bb8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bc2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001bc6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bd0:	f003 fb30 	bl	8005234 <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001bda:	f000 f8b7 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_TIM7_Init+0x64>)
 8001bec:	f003 fd66 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001bf6:	f000 f8a9 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000460 	.word	0x20000460
 8001c08:	40001400 	.word	0x40001400

08001c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a30      	ldr	r2, [pc, #192]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a29      	ldr	r2, [pc, #164]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a22      	ldr	r2, [pc, #136]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_GPIO_Init+0xe0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	21c0      	movs	r1, #192	; 0xc0
 8001c96:	4816      	ldr	r0, [pc, #88]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001c98:	f000 fd18 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8001c9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_GPIO_Init+0xe8>)
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480f      	ldr	r0, [pc, #60]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001cb2:	f000 fb71 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <MX_GPIO_Init+0xe4>)
 8001cce:	f000 fb63 	bl	8002398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2028      	movs	r0, #40	; 0x28
 8001cd8:	f000 fb27 	bl	800232a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cdc:	2028      	movs	r0, #40	; 0x28
 8001cde:	f000 fb40 	bl	8002362 <HAL_NVIC_EnableIRQ>

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	10110000 	.word	0x10110000

08001cf8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/* GYROSCOPE DATA READY INTERRUPT CALLBACK */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_14)
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d08:	d102      	bne.n	8001d10 <HAL_GPIO_EXTI_Callback+0x18>
	{
		// SET DATA_READY FLAG
		DATA_STATUS = DATA_READY;
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x24>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
	}
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20000374 	.word	0x20000374

08001d20 <HAL_TIM_PeriodElapsedCallback>:

/* TIMER INTERRUPT FOR 50Hz UPDATE OVER SERIAL */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d102      	bne.n	8001d38 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		// SET UPDATE_READY FLAG
		UPDATE_STATUS = UPDATE_READY;
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
	}
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40001400 	.word	0x40001400
 8001d48:	20000375 	.word	0x20000375

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i

  __disable_irq();

  // {TODO} SET ALL MOTOR OUTPUTS TO ZERO!

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	4806      	ldr	r0, [pc, #24]	; (8001d70 <Error_Handler+0x24>)
 8001d58:	f000 fcb8 	bl	80026cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <Error_Handler+0x24>)
 8001d62:	f000 fcb3 	bl	80026cc <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 8001d66:	2106      	movs	r1, #6
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <Error_Handler+0x28>)
 8001d6a:	f006 fd3b 	bl	80087e4 <CDC_Transmit_FS>

  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <Error_Handler+0x22>
 8001d70:	40020800 	.word	0x40020800
 8001d74:	0800b180 	.word	0x0800b180

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_I2C_MspInit+0x84>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12c      	bne.n	8001e44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0c:	2312      	movs	r3, #18
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	480c      	ldr	r0, [pc, #48]	; (8001e54 <HAL_I2C_MspInit+0x8c>)
 8001e24:	f000 fab8 	bl	8002398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e36:	6413      	str	r3, [r2, #64]	; 0x40
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40005400 	.word	0x40005400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020400 	.word	0x40020400

08001e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIM_Base_MspInit+0x70>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_TIM_Base_MspInit+0x74>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_TIM_Base_MspInit+0x74>)
 8001e74:	f043 0310 	orr.w	r3, r3, #16
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_TIM_Base_MspInit+0x74>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e86:	e01a      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <HAL_TIM_Base_MspInit+0x78>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d115      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_TIM_Base_MspInit+0x74>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <HAL_TIM_Base_MspInit+0x74>)
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_TIM_Base_MspInit+0x74>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	2037      	movs	r0, #55	; 0x37
 8001eb4:	f000 fa39 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001eb8:	2037      	movs	r0, #55	; 0x37
 8001eba:	f000 fa52 	bl	8002362 <HAL_NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40001000 	.word	0x40001000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40001400 	.word	0x40001400

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f20:	f000 f8e6 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f30:	f000 fbe6 	bl	8002700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM7_IRQHandler+0x10>)
 8001f3e:	f003 f9ec 	bl	800531a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000460 	.word	0x20000460

08001f4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <OTG_FS_IRQHandler+0x10>)
 8001f52:	f001 fcf0 	bl	8003936 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001974 	.word	0x20001974

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f007 f86a 	bl	8009068 <__errno>
 8001f94:	4602      	mov	r2, r0
 8001f96:	230c      	movs	r3, #12
 8001f98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20020000 	.word	0x20020000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	20000378 	.word	0x20000378
 8001fc8:	20001d80 	.word	0x20001d80

08001fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <SystemInit+0x28>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <SystemInit+0x28>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SystemInit+0x28>)
 8001fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe6:	609a      	str	r2, [r3, #8]
#endif
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ffc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ffe:	e003      	b.n	8002008 <LoopCopyDataInit>

08002000 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002002:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002004:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002006:	3104      	adds	r1, #4

08002008 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800200c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800200e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002010:	d3f6      	bcc.n	8002000 <CopyDataInit>
  ldr  r2, =_sbss
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002014:	e002      	b.n	800201c <LoopFillZerobss>

08002016 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002016:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002018:	f842 3b04 	str.w	r3, [r2], #4

0800201c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800201e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002020:	d3f9      	bcc.n	8002016 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002022:	f7ff ffd3 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f007 f825 	bl	8009074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7ff fab9 	bl	80015a0 <main>
  bx  lr    
 800202e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002030:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002034:	0800b458 	.word	0x0800b458
  ldr  r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800203c:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8002040:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8002044:	20001d80 	.word	0x20001d80

08002048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <HAL_Init+0x40>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_Init+0x40>)
 8002062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_Init+0x40>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f000 f94d 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	2000      	movs	r0, #0
 800207c:	f000 f808 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7ff fe7a 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f965 	bl	800237e <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f92d 	bl	800232a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000008 	.word	0x20000008
 8002114:	200004a0 	.word	0x200004a0

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	200004a0 	.word	0x200004a0

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff ffee 	bl	8002118 <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_Delay+0x40>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffde 	bl	8002118 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000008 	.word	0x20000008

08002174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800219c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__NVIC_GetPriorityGrouping+0x18>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0307 	and.w	r3, r3, #7
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db0b      	blt.n	8002202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	4907      	ldr	r1, [pc, #28]	; (8002210 <__NVIC_EnableIRQ+0x38>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000e100 	.word	0xe000e100

08002214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
         );
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff8e 	bl	8002214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff29 	bl	8002174 <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff3e 	bl	80021bc <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff8e 	bl	8002268 <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5d 	bl	8002214 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff31 	bl	80021d8 <__NVIC_EnableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffa2 	bl	80022d0 <SysTick_Config>
 800238c:	4603      	mov	r3, r0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e16b      	b.n	800268c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 815a 	bne.w	8002686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d00b      	beq.n	80023f2 <HAL_GPIO_Init+0x5a>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e6:	2b11      	cmp	r3, #17
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b12      	cmp	r3, #18
 80023f0:	d130      	bne.n	8002454 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 0201 	and.w	r2, r3, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0xfc>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b12      	cmp	r3, #18
 8002492:	d123      	bne.n	80024dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	08da      	lsrs	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3208      	adds	r2, #8
 800249c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	69b9      	ldr	r1, [r7, #24]
 80024d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0203 	and.w	r2, r3, #3
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80b4 	beq.w	8002686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_GPIO_Init+0x308>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <HAL_GPIO_Init+0x308>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252c:	6453      	str	r3, [r2, #68]	; 0x44
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_GPIO_Init+0x308>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253a:	4a5a      	ldr	r2, [pc, #360]	; (80026a4 <HAL_GPIO_Init+0x30c>)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	220f      	movs	r2, #15
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <HAL_GPIO_Init+0x310>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d02b      	beq.n	80025be <HAL_GPIO_Init+0x226>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_GPIO_Init+0x314>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d025      	beq.n	80025ba <HAL_GPIO_Init+0x222>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4f      	ldr	r2, [pc, #316]	; (80026b0 <HAL_GPIO_Init+0x318>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01f      	beq.n	80025b6 <HAL_GPIO_Init+0x21e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4e      	ldr	r2, [pc, #312]	; (80026b4 <HAL_GPIO_Init+0x31c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d019      	beq.n	80025b2 <HAL_GPIO_Init+0x21a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4d      	ldr	r2, [pc, #308]	; (80026b8 <HAL_GPIO_Init+0x320>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0x216>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <HAL_GPIO_Init+0x324>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00d      	beq.n	80025aa <HAL_GPIO_Init+0x212>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4b      	ldr	r2, [pc, #300]	; (80026c0 <HAL_GPIO_Init+0x328>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x20e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4a      	ldr	r2, [pc, #296]	; (80026c4 <HAL_GPIO_Init+0x32c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_GPIO_Init+0x20a>
 800259e:	2307      	movs	r3, #7
 80025a0:	e00e      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025a2:	2308      	movs	r3, #8
 80025a4:	e00c      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025a6:	2306      	movs	r3, #6
 80025a8:	e00a      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x228>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4934      	ldr	r1, [pc, #208]	; (80026a4 <HAL_GPIO_Init+0x30c>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <HAL_GPIO_Init+0x330>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002602:	4a31      	ldr	r2, [pc, #196]	; (80026c8 <HAL_GPIO_Init+0x330>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_GPIO_Init+0x330>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <HAL_GPIO_Init+0x330>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_GPIO_Init+0x330>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a1c      	ldr	r2, [pc, #112]	; (80026c8 <HAL_GPIO_Init+0x330>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_GPIO_Init+0x330>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_GPIO_Init+0x330>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f ae90 	bls.w	80023b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	3724      	adds	r7, #36	; 0x24
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40021c00 	.word	0x40021c00
 80026c8:	40013c00 	.word	0x40013c00

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e8:	e003      	b.n	80026f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	619a      	str	r2, [r3, #24]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff faea 	bl	8001cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e11f      	b.n	8002982 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fb36 	bl	8001dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002794:	f002 fd3a 	bl	800520c <HAL_RCC_GetPCLK1Freq>
 8002798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a7b      	ldr	r2, [pc, #492]	; (800298c <HAL_I2C_Init+0x25c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d807      	bhi.n	80027b4 <HAL_I2C_Init+0x84>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a7a      	ldr	r2, [pc, #488]	; (8002990 <HAL_I2C_Init+0x260>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	bf94      	ite	ls
 80027ac:	2301      	movls	r3, #1
 80027ae:	2300      	movhi	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e006      	b.n	80027c2 <HAL_I2C_Init+0x92>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a77      	ldr	r2, [pc, #476]	; (8002994 <HAL_I2C_Init+0x264>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bf94      	ite	ls
 80027bc:	2301      	movls	r3, #1
 80027be:	2300      	movhi	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0db      	b.n	8002982 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a72      	ldr	r2, [pc, #456]	; (8002998 <HAL_I2C_Init+0x268>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0c9b      	lsrs	r3, r3, #18
 80027d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a64      	ldr	r2, [pc, #400]	; (800298c <HAL_I2C_Init+0x25c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d802      	bhi.n	8002804 <HAL_I2C_Init+0xd4>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3301      	adds	r3, #1
 8002802:	e009      	b.n	8002818 <HAL_I2C_Init+0xe8>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	4a63      	ldr	r2, [pc, #396]	; (800299c <HAL_I2C_Init+0x26c>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	3301      	adds	r3, #1
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	430b      	orrs	r3, r1
 800281e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800282a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4956      	ldr	r1, [pc, #344]	; (800298c <HAL_I2C_Init+0x25c>)
 8002834:	428b      	cmp	r3, r1
 8002836:	d80d      	bhi.n	8002854 <HAL_I2C_Init+0x124>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1e59      	subs	r1, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fbb1 f3f3 	udiv	r3, r1, r3
 8002846:	3301      	adds	r3, #1
 8002848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284c:	2b04      	cmp	r3, #4
 800284e:	bf38      	it	cc
 8002850:	2304      	movcc	r3, #4
 8002852:	e04f      	b.n	80028f4 <HAL_I2C_Init+0x1c4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d111      	bne.n	8002880 <HAL_I2C_Init+0x150>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	440b      	add	r3, r1
 800286a:	fbb0 f3f3 	udiv	r3, r0, r3
 800286e:	3301      	adds	r3, #1
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e012      	b.n	80028a6 <HAL_I2C_Init+0x176>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x17e>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e022      	b.n	80028f4 <HAL_I2C_Init+0x1c4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10e      	bne.n	80028d4 <HAL_I2C_Init+0x1a4>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e58      	subs	r0, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	440b      	add	r3, r1
 80028c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d2:	e00f      	b.n	80028f4 <HAL_I2C_Init+0x1c4>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e58      	subs	r0, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	0099      	lsls	r1, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	6809      	ldr	r1, [r1, #0]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6911      	ldr	r1, [r2, #16]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68d2      	ldr	r2, [r2, #12]
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	000186a0 	.word	0x000186a0
 8002990:	001e847f 	.word	0x001e847f
 8002994:	003d08ff 	.word	0x003d08ff
 8002998:	431bde83 	.word	0x431bde83
 800299c:	10624dd3 	.word	0x10624dd3

080029a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	4608      	mov	r0, r1
 80029aa:	4611      	mov	r1, r2
 80029ac:	461a      	mov	r2, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	817b      	strh	r3, [r7, #10]
 80029b2:	460b      	mov	r3, r1
 80029b4:	813b      	strh	r3, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ba:	f7ff fbad 	bl	8002118 <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	f040 80d9 	bne.w	8002b80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2319      	movs	r3, #25
 80029d4:	2201      	movs	r2, #1
 80029d6:	496d      	ldr	r1, [pc, #436]	; (8002b8c <HAL_I2C_Mem_Write+0x1ec>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fc7f 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0cc      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Mem_Write+0x56>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0c5      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d007      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2221      	movs	r2, #33	; 0x21
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <HAL_I2C_Mem_Write+0x1f0>)
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a5e:	88f8      	ldrh	r0, [r7, #6]
 8002a60:	893a      	ldrh	r2, [r7, #8]
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fab6 	bl	8002fe0 <I2C_RequestMemoryWrite>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d052      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e081      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fd00 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e06b      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d11b      	bne.n	8002b20 <HAL_I2C_Mem_Write+0x180>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1aa      	bne.n	8002a7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fcec 	bl	800350a <I2C_WaitOnBTFFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e016      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	00100002 	.word	0x00100002
 8002b90:	ffff0000 	.word	0xffff0000

08002b94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7ff fab3 	bl	8002118 <HAL_GetTick>
 8002bb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 8208 	bne.w	8002fd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2319      	movs	r3, #25
 8002bc8:	2201      	movs	r2, #1
 8002bca:	497b      	ldr	r1, [pc, #492]	; (8002db8 <HAL_I2C_Mem_Read+0x224>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fb85 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e1fb      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Mem_Read+0x56>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e1f4      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d007      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2222      	movs	r2, #34	; 0x22
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	; (8002dbc <HAL_I2C_Mem_Read+0x228>)
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c52:	88f8      	ldrh	r0, [r7, #6]
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fa52 	bl	800310c <I2C_RequestMemoryRead>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1b0      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d113      	bne.n	8002ca2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e184      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e164      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d11b      	bne.n	8002d22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	e144      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d38:	e138      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	f200 80f1 	bhi.w	8002f26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d123      	bne.n	8002d94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fc1b 	bl	800358c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e139      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d92:	e10b      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d14e      	bne.n	8002e3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	2200      	movs	r2, #0
 8002da4:	4906      	ldr	r1, [pc, #24]	; (8002dc0 <HAL_I2C_Mem_Read+0x22c>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fa98 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e10e      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
 8002db6:	bf00      	nop
 8002db8:	00100002 	.word	0x00100002
 8002dbc:	ffff0000 	.word	0xffff0000
 8002dc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e38:	e0b8      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	2200      	movs	r2, #0
 8002e42:	4966      	ldr	r1, [pc, #408]	; (8002fdc <HAL_I2C_Mem_Read+0x448>)
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fa49 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0bf      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	494f      	ldr	r1, [pc, #316]	; (8002fdc <HAL_I2C_Mem_Read+0x448>)
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fa1b 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e091      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f24:	e042      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fb2e 	bl	800358c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e04c      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d118      	bne.n	8002fac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f aec2 	bne.w	8002d3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
  }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3728      	adds	r7, #40	; 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	00010004 	.word	0x00010004

08002fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	813b      	strh	r3, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2200      	movs	r2, #0
 8003012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f960 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003030:	d103      	bne.n	800303a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e05f      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800304c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	492d      	ldr	r1, [pc, #180]	; (8003108 <I2C_RequestMemoryWrite+0x128>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f998 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04c      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa02 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e02b      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	611a      	str	r2, [r3, #16]
 80030b6:	e021      	b.n	80030fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030b8:	893b      	ldrh	r3, [r7, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9dc 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e005      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	00010002 	.word	0x00010002

0800310c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	4608      	mov	r0, r1
 8003116:	4611      	mov	r1, r2
 8003118:	461a      	mov	r2, r3
 800311a:	4603      	mov	r3, r0
 800311c:	817b      	strh	r3, [r7, #10]
 800311e:	460b      	mov	r3, r1
 8003120:	813b      	strh	r3, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2200      	movs	r2, #0
 800314e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8c2 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316c:	d103      	bne.n	8003176 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0aa      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003188:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	4952      	ldr	r1, [pc, #328]	; (80032d8 <I2C_RequestMemoryRead+0x1cc>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8fa 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e097      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f964 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d107      	bne.n	80031de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e076      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	e021      	b.n	8003238 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f93e 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003228:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e050      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f923 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e035      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003272:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	2200      	movs	r2, #0
 800327c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f82b 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d103      	bne.n	80032a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e013      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032a8:	897b      	ldrh	r3, [r7, #10]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	4906      	ldr	r1, [pc, #24]	; (80032d8 <I2C_RequestMemoryRead+0x1cc>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f863 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	e025      	b.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d021      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe ff0f 	bl	8002118 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e023      	b.n	8003382 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10d      	bne.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	e00c      	b.n	800337a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	429a      	cmp	r2, r3
 800337e:	d0b6      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003398:	e051      	b.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d123      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0204 	orr.w	r2, r3, #4
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e046      	b.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d021      	beq.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe fe8d 	bl	8002118 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e020      	b.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10c      	bne.n	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	e00b      	b.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d18d      	bne.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003494:	e02d      	b.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8ce 	bl	8003638 <I2C_IsAcknowledgeFailed>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e02d      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe fe33 	bl	8002118 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e007      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d1ca      	bne.n	8003496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003516:	e02d      	b.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f88d 	bl	8003638 <I2C_IsAcknowledgeFailed>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e02d      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d021      	beq.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fe fdf2 	bl	8002118 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d1ca      	bne.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003598:	e042      	b.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d119      	bne.n	80035dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e029      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035dc:	f7fe fd9c 	bl	8002118 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d1b5      	bne.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d11b      	bne.n	8003688 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003658:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003698:	b08f      	sub	sp, #60	; 0x3c
 800369a:	af0a      	add	r7, sp, #40	; 0x28
 800369c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e10f      	b.n	80038c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f005 f9d4 	bl	8008a70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2203      	movs	r2, #3
 80036cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 f98d 	bl	8005a06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	687e      	ldr	r6, [r7, #4]
 80036f4:	466d      	mov	r5, sp
 80036f6:	f106 0410 	add.w	r4, r6, #16
 80036fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003702:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003706:	e885 0003 	stmia.w	r5, {r0, r1}
 800370a:	1d33      	adds	r3, r6, #4
 800370c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800370e:	6838      	ldr	r0, [r7, #0]
 8003710:	f002 f864 	bl	80057dc <USB_CoreInit>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0d0      	b.n	80038c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f002 f97b 	bl	8005a28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e04a      	b.n	80037ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	333d      	adds	r3, #61	; 0x3d
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	333c      	adds	r3, #60	; 0x3c
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	b298      	uxth	r0, r3
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	3342      	adds	r3, #66	; 0x42
 8003774:	4602      	mov	r2, r0
 8003776:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	333f      	adds	r3, #63	; 0x3f
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3344      	adds	r3, #68	; 0x44
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3348      	adds	r3, #72	; 0x48
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3350      	adds	r3, #80	; 0x50
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	3301      	adds	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d3af      	bcc.n	8003738 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	e044      	b.n	8003868 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	3301      	adds	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d3b5      	bcc.n	80037de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	687e      	ldr	r6, [r7, #4]
 800387a:	466d      	mov	r5, sp
 800387c:	f106 0410 	add.w	r4, r6, #16
 8003880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003888:	e894 0003 	ldmia.w	r4, {r0, r1}
 800388c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003890:	1d33      	adds	r3, r6, #4
 8003892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	f002 f8f1 	bl	8005a7c <USB_DevInit>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e00d      	b.n	80038c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 f939 	bl	8006b38 <USB_DevDisconnect>

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_PCD_Start+0x1c>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e020      	b.n	800392e <HAL_PCD_Start+0x5e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d109      	bne.n	8003910 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003900:	2b01      	cmp	r3, #1
 8003902:	d005      	beq.n	8003910 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f002 f865 	bl	80059e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f003 f8e9 	bl	8006af6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b08d      	sub	sp, #52	; 0x34
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f003 f9a7 	bl	8006ca0 <USB_GetMode>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 839d 	bne.w	8004094 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f003 f90b 	bl	8006b7a <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8393 	beq.w	8004092 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f003 f902 	bl	8006b7a <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b02      	cmp	r3, #2
 800397e:	d107      	bne.n	8003990 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f002 0202 	and.w	r2, r2, #2
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f003 f8f0 	bl	8006b7a <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d161      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0210 	bic.w	r2, r2, #16
 80039b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	0c5b      	lsrs	r3, r3, #17
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d124      	bne.n	8003a2a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d035      	beq.n	8003a58 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	6a38      	ldr	r0, [r7, #32]
 8003a00:	f002 ff56 	bl	80068b0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a10:	441a      	add	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a22:	441a      	add	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	619a      	str	r2, [r3, #24]
 8003a28:	e016      	b.n	8003a58 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	0c5b      	lsrs	r3, r3, #17
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d110      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6a38      	ldr	r0, [r7, #32]
 8003a42:	f002 ff35 	bl	80068b0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a52:	441a      	add	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0210 	orr.w	r2, r2, #16
 8003a66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 f884 	bl	8006b7a <USB_ReadInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a7c:	d16e      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f003 f88a 	bl	8006ba0 <USB_ReadDevAllOutEpInterrupt>
 8003a8c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a8e:	e062      	b.n	8003b56 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d057      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 f8af 	bl	8006c08 <USB_ReadDevOutEPInterrupt>
 8003aaa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fdb0 	bl	8004630 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00c      	beq.n	8003af4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2308      	movs	r3, #8
 8003aea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 feaa 	bl	8004848 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	461a      	mov	r2, r3
 8003b28:	2320      	movs	r3, #32
 8003b2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	461a      	mov	r2, r3
 8003b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d199      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f003 f80a 	bl	8006b7a <USB_ReadInterrupts>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b70:	f040 80c0 	bne.w	8003cf4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f003 f82b 	bl	8006bd4 <USB_ReadDevAllInEpInterrupt>
 8003b7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b84:	e0b2      	b.n	8003cec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80a7 	beq.w	8003ce0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f003 f851 	bl	8006c44 <USB_ReadDevInEPInterrupt>
 8003ba2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d057      	beq.n	8003c5e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69f9      	ldr	r1, [r7, #28]
 8003bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bce:	4013      	ands	r3, r2
 8003bd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bde:	461a      	mov	r2, r3
 8003be0:	2301      	movs	r3, #1
 8003be2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d132      	bne.n	8003c52 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3348      	adds	r3, #72	; 0x48
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4403      	add	r3, r0
 8003c0c:	3344      	adds	r3, #68	; 0x44
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4419      	add	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4403      	add	r3, r0
 8003c20:	3348      	adds	r3, #72	; 0x48
 8003c22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <HAL_PCD_IRQHandler+0x31c>
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3350      	adds	r3, #80	; 0x50
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d108      	bne.n	8003c52 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	f003 f859 	bl	8006d04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f004 ff8a 	bl	8008b72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c74:	461a      	mov	r2, r3
 8003c76:	2308      	movs	r3, #8
 8003c78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	461a      	mov	r2, r3
 8003c92:	2310      	movs	r3, #16
 8003c94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cac:	461a      	mov	r2, r3
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2302      	movs	r3, #2
 8003ccc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fc1b 	bl	8004516 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f47f af49 	bne.w	8003b86 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f002 ff3e 	bl	8006b7a <USB_ReadInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d08:	d122      	bne.n	8003d50 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d108      	bne.n	8003d3a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d30:	2100      	movs	r1, #0
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fe26 	bl	8004984 <HAL_PCDEx_LPM_Callback>
 8003d38:	e002      	b.n	8003d40 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f004 ff90 	bl	8008c60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f002 ff10 	bl	8006b7a <USB_ReadInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d64:	d112      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d102      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f004 ff4c 	bl	8008c14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d8a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f002 fef2 	bl	8006b7a <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	f040 80c7 	bne.w	8003f32 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2110      	movs	r1, #16
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 ffc0 	bl	8005d44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc8:	e056      	b.n	8003e78 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ddc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dfc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	3301      	adds	r3, #1
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d3a3      	bcc.n	8003dca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e90:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eae:	f043 030b 	orr.w	r3, r3, #11
 8003eb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec4:	f043 030b 	orr.w	r3, r3, #11
 8003ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eca:	e015      	b.n	8003ef8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ede:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ee2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef2:	f043 030b 	orr.w	r3, r3, #11
 8003ef6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f002 fef1 	bl	8006d04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f002 fe1f 	bl	8006b7a <USB_ReadInterrupts>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f46:	d124      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f002 feb5 	bl	8006cbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 ff55 	bl	8005e06 <USB_GetDevSpeed>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681c      	ldr	r4, [r3, #0]
 8003f68:	f001 f944 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	4620      	mov	r0, r4
 8003f78:	f001 fc92 	bl	80058a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f004 fe20 	bl	8008bc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f002 fdef 	bl	8006b7a <USB_ReadInterrupts>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d10a      	bne.n	8003fbc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f004 fdfd 	bl	8008ba6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f002 0208 	and.w	r2, r2, #8
 8003fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f002 fdda 	bl	8006b7a <USB_ReadInterrupts>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f004 fe5f 	bl	8008ca0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f002 fdbf 	bl	8006b7a <USB_ReadInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004006:	d10f      	bne.n	8004028 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	b2db      	uxtb	r3, r3
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f004 fe32 	bl	8008c7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004026:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f002 fda4 	bl	8006b7a <USB_ReadInterrupts>
 8004032:	4603      	mov	r3, r0
 8004034:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d10a      	bne.n	8004054 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f004 fe40 	bl	8008cc4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004052:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f002 fd8e 	bl	8006b7a <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d115      	bne.n	8004094 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f004 fe30 	bl	8008ce0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6859      	ldr	r1, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	e000      	b.n	8004094 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004092:	bf00      	nop
    }
  }
}
 8004094:	3734      	adds	r7, #52	; 0x34
 8004096:	46bd      	mov	sp, r7
 8004098:	bd90      	pop	{r4, r7, pc}

0800409a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_PCD_SetAddress+0x1a>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e013      	b.n	80040dc <HAL_PCD_SetAddress+0x42>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 fcec 	bl	8006aaa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	70fb      	strb	r3, [r7, #3]
 80040f6:	460b      	mov	r3, r1
 80040f8:	803b      	strh	r3, [r7, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	da0f      	bge.n	800412a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 020f 	and.w	r2, r3, #15
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	3338      	adds	r3, #56	; 0x38
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4413      	add	r3, r2
 800411e:	3304      	adds	r3, #4
 8004120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	705a      	strb	r2, [r3, #1]
 8004128:	e00f      	b.n	800414a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	3304      	adds	r3, #4
 8004142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004156:	883a      	ldrh	r2, [r7, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	78ba      	ldrb	r2, [r7, #2]
 8004160:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004174:	78bb      	ldrb	r3, [r7, #2]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d102      	bne.n	8004180 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_PCD_EP_Open+0xaa>
 800418a:	2302      	movs	r3, #2
 800418c:	e00e      	b.n	80041ac <HAL_PCD_EP_Open+0xc8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	4618      	mov	r0, r3
 800419e:	f001 fe57 	bl	8005e50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80041aa:	7afb      	ldrb	r3, [r7, #11]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	da0f      	bge.n	80041e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	3338      	adds	r3, #56	; 0x38
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	705a      	strb	r2, [r3, #1]
 80041e6:	e00f      	b.n	8004208 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f003 020f 	and.w	r2, r3, #15
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_PCD_EP_Close+0x6e>
 800421e:	2302      	movs	r3, #2
 8004220:	e00e      	b.n	8004240 <HAL_PCD_EP_Close+0x8c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fe95 	bl	8005f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	460b      	mov	r3, r1
 8004256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	f003 020f 	and.w	r2, r3, #15
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2200      	movs	r2, #0
 8004288:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800428a:	7afb      	ldrb	r3, [r7, #11]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	b2da      	uxtb	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d102      	bne.n	80042a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042a4:	7afb      	ldrb	r3, [r7, #11]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	6979      	ldr	r1, [r7, #20]
 80042bc:	f002 f970 	bl	80065a0 <USB_EP0StartXfer>
 80042c0:	e008      	b.n	80042d4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	6979      	ldr	r1, [r7, #20]
 80042d0:	f001 ff22 	bl	8006118 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004300:	681b      	ldr	r3, [r3, #0]
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b086      	sub	sp, #24
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	460b      	mov	r3, r1
 800431c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431e:	7afb      	ldrb	r3, [r7, #11]
 8004320:	f003 020f 	and.w	r2, r3, #15
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	3338      	adds	r3, #56	; 0x38
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	3304      	adds	r3, #4
 8004334:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2201      	movs	r2, #1
 800434c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d102      	bne.n	8004368 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004368:	7afb      	ldrb	r3, [r7, #11]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	6979      	ldr	r1, [r7, #20]
 8004380:	f002 f90e 	bl	80065a0 <USB_EP0StartXfer>
 8004384:	e008      	b.n	8004398 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	f001 fec0 	bl	8006118 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d901      	bls.n	80043c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e050      	b.n	8004462 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da0f      	bge.n	80043e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 020f 	and.w	r2, r3, #15
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	3338      	adds	r3, #56	; 0x38
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4413      	add	r3, r2
 80043dc:	3304      	adds	r3, #4
 80043de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	705a      	strb	r2, [r3, #1]
 80043e6:	e00d      	b.n	8004404 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	3304      	adds	r3, #4
 80043fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_PCD_EP_SetStall+0x82>
 8004420:	2302      	movs	r3, #2
 8004422:	e01e      	b.n	8004462 <HAL_PCD_EP_SetStall+0xc0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	4618      	mov	r0, r3
 8004434:	f002 fa65 	bl	8006902 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	b2d9      	uxtb	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004452:	461a      	mov	r2, r3
 8004454:	f002 fc56 	bl	8006d04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	f003 020f 	and.w	r2, r3, #15
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d901      	bls.n	8004488 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e042      	b.n	800450e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800448c:	2b00      	cmp	r3, #0
 800448e:	da0f      	bge.n	80044b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	f003 020f 	and.w	r2, r3, #15
 8004496:	4613      	mov	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	3338      	adds	r3, #56	; 0x38
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	3304      	adds	r3, #4
 80044a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	705a      	strb	r2, [r3, #1]
 80044ae:	e00f      	b.n	80044d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	f003 020f 	and.w	r2, r3, #15
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	3304      	adds	r3, #4
 80044c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_PCD_EP_ClrStall+0x86>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e00e      	b.n	800450e <HAL_PCD_EP_ClrStall+0xa4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68f9      	ldr	r1, [r7, #12]
 80044fe:	4618      	mov	r0, r3
 8004500:	f002 fa6d 	bl	80069de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b08a      	sub	sp, #40	; 0x28
 800451a:	af02      	add	r7, sp, #8
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	3338      	adds	r3, #56	; 0x38
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	3304      	adds	r3, #4
 800453c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	429a      	cmp	r2, r3
 8004548:	d901      	bls.n	800454e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e06c      	b.n	8004628 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	429a      	cmp	r2, r3
 8004562:	d902      	bls.n	800456a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3303      	adds	r3, #3
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004572:	e02b      	b.n	80045cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	429a      	cmp	r2, r3
 8004588:	d902      	bls.n	8004590 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3303      	adds	r3, #3
 8004594:	089b      	lsrs	r3, r3, #2
 8004596:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68d9      	ldr	r1, [r3, #12]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	4603      	mov	r3, r0
 80045ae:	6978      	ldr	r0, [r7, #20]
 80045b0:	f002 f949 	bl	8006846 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	441a      	add	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	441a      	add	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d809      	bhi.n	80045f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d203      	bcs.n	80045f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1be      	bne.n	8004574 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d811      	bhi.n	8004626 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	2201      	movs	r2, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	43db      	mvns	r3, r3
 800461c:	6939      	ldr	r1, [r7, #16]
 800461e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004622:	4013      	ands	r3, r2
 8004624:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	333c      	adds	r3, #60	; 0x3c
 8004648:	3304      	adds	r3, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b01      	cmp	r3, #1
 8004664:	f040 80a0 	bne.w	80047a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d015      	beq.n	800469e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a72      	ldr	r2, [pc, #456]	; (8004840 <PCD_EP_OutXfrComplete_int+0x210>)
 8004676:	4293      	cmp	r3, r2
 8004678:	f240 80dd 	bls.w	8004836 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80d7 	beq.w	8004836 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	461a      	mov	r2, r3
 8004696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469a:	6093      	str	r3, [r2, #8]
 800469c:	e0cb      	b.n	8004836 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d009      	beq.n	80046bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	461a      	mov	r2, r3
 80046b6:	2320      	movs	r3, #32
 80046b8:	6093      	str	r3, [r2, #8]
 80046ba:	e0bc      	b.n	8004836 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 80b7 	bne.w	8004836 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a5d      	ldr	r2, [pc, #372]	; (8004840 <PCD_EP_OutXfrComplete_int+0x210>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d90f      	bls.n	80046f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ec:	6093      	str	r3, [r2, #8]
 80046ee:	e0a2      	b.n	8004836 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004702:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	0159      	lsls	r1, r3, #5
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	440b      	add	r3, r1
 800470c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004716:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4403      	add	r3, r0
 8004726:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800472a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4403      	add	r3, r0
 800474e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4419      	add	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4403      	add	r3, r0
 8004764:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004768:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d114      	bne.n	800479a <PCD_EP_OutXfrComplete_int+0x16a>
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d108      	bne.n	800479a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004792:	461a      	mov	r2, r3
 8004794:	2101      	movs	r1, #1
 8004796:	f002 fab5 	bl	8006d04 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f004 f9cb 	bl	8008b3c <HAL_PCD_DataOutStageCallback>
 80047a6:	e046      	b.n	8004836 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a26      	ldr	r2, [pc, #152]	; (8004844 <PCD_EP_OutXfrComplete_int+0x214>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d124      	bne.n	80047fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	461a      	mov	r2, r3
 80047c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047cc:	6093      	str	r3, [r2, #8]
 80047ce:	e032      	b.n	8004836 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	461a      	mov	r2, r3
 80047e8:	2320      	movs	r3, #32
 80047ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f004 f9a2 	bl	8008b3c <HAL_PCD_DataOutStageCallback>
 80047f8:	e01d      	b.n	8004836 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d114      	bne.n	800482a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d108      	bne.n	800482a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004822:	461a      	mov	r2, r3
 8004824:	2100      	movs	r1, #0
 8004826:	f002 fa6d 	bl	8006d04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	4619      	mov	r1, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f004 f983 	bl	8008b3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	4f54300a 	.word	0x4f54300a
 8004844:	4f54310a 	.word	0x4f54310a

08004848 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	333c      	adds	r3, #60	; 0x3c
 8004860:	3304      	adds	r3, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d90e      	bls.n	800489c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	461a      	mov	r2, r3
 8004896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f004 f93b 	bl	8008b18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d90c      	bls.n	80048c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d108      	bne.n	80048c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048bc:	461a      	mov	r2, r3
 80048be:	2101      	movs	r1, #1
 80048c0:	f002 fa20 	bl	8006d04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	4f54300a 	.word	0x4f54300a

080048d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
 80048e0:	4613      	mov	r3, r2
 80048e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048f2:	883b      	ldrh	r3, [r7, #0]
 80048f4:	0419      	lsls	r1, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004900:	e028      	b.n	8004954 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	e00d      	b.n	8004932 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	3340      	adds	r3, #64	; 0x40
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4413      	add	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	3301      	adds	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
 8004932:	7bfa      	ldrb	r2, [r7, #15]
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	3b01      	subs	r3, #1
 8004938:	429a      	cmp	r2, r3
 800493a:	d3ec      	bcc.n	8004916 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800493c:	883b      	ldrh	r3, [r7, #0]
 800493e:	0418      	lsls	r0, r3, #16
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	3b01      	subs	r3, #1
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	4302      	orrs	r2, r0
 800494c:	3340      	adds	r3, #64	; 0x40
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	887a      	ldrh	r2, [r7, #2]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e25b      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d075      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ba:	4ba3      	ldr	r3, [pc, #652]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d00c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c6:	4ba0      	ldr	r3, [pc, #640]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d112      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d2:	4b9d      	ldr	r3, [pc, #628]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049de:	d10b      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	4b99      	ldr	r3, [pc, #612]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05b      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x108>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d157      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e236      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x74>
 8004a02:	4b91      	ldr	r3, [pc, #580]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a90      	ldr	r2, [pc, #576]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0xb0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x98>
 8004a1a:	4b8b      	ldr	r3, [pc, #556]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a8a      	ldr	r2, [pc, #552]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b88      	ldr	r3, [pc, #544]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a87      	ldr	r2, [pc, #540]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0xb0>
 8004a34:	4b84      	ldr	r3, [pc, #528]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a83      	ldr	r2, [pc, #524]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a80      	ldr	r2, [pc, #512]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fd fb60 	bl	8002118 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fd fb5c 	bl	8002118 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1fb      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b76      	ldr	r3, [pc, #472]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0xc0>
 8004a7a:	e014      	b.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fb4c 	bl	8002118 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fd fb48 	bl	8002118 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1e7      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a96:	4b6c      	ldr	r3, [pc, #432]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0xe8>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d063      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ab2:	4b65      	ldr	r3, [pc, #404]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004abe:	4b62      	ldr	r3, [pc, #392]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d11c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aca:	4b5f      	ldr	r3, [pc, #380]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	4b5c      	ldr	r3, [pc, #368]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_RCC_OscConfig+0x152>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d001      	beq.n	8004aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e1bb      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4952      	ldr	r1, [pc, #328]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	e03a      	b.n	8004b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b0c:	4b4f      	ldr	r3, [pc, #316]	; (8004c4c <HAL_RCC_OscConfig+0x2b0>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fd fb01 	bl	8002118 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fd fafd 	bl	8002118 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e19c      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2c:	4b46      	ldr	r3, [pc, #280]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4940      	ldr	r1, [pc, #256]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4e:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <HAL_RCC_OscConfig+0x2b0>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fae0 	bl	8002118 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fd fadc 	bl	8002118 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e17b      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d030      	beq.n	8004be8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8e:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <HAL_RCC_OscConfig+0x2b4>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fd fac0 	bl	8002118 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7fd fabc 	bl	8002118 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e15b      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bae:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x200>
 8004bba:	e015      	b.n	8004be8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bbc:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <HAL_RCC_OscConfig+0x2b4>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7fd faa9 	bl	8002118 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fd faa5 	bl	8002118 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e144      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a0 	beq.w	8004d36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_OscConfig+0x2b8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d121      	bne.n	8004c76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x2b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <HAL_RCC_OscConfig+0x2b8>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3e:	f7fd fa6b 	bl	8002118 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	e011      	b.n	8004c6a <HAL_RCC_OscConfig+0x2ce>
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	42470000 	.word	0x42470000
 8004c50:	42470e80 	.word	0x42470e80
 8004c54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c58:	f7fd fa5e 	bl	8002118 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e0fd      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6a:	4b81      	ldr	r3, [pc, #516]	; (8004e70 <HAL_RCC_OscConfig+0x4d4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d106      	bne.n	8004c8c <HAL_RCC_OscConfig+0x2f0>
 8004c7e:	4b7d      	ldr	r3, [pc, #500]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	4a7c      	ldr	r2, [pc, #496]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8a:	e01c      	b.n	8004cc6 <HAL_RCC_OscConfig+0x32a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d10c      	bne.n	8004cae <HAL_RCC_OscConfig+0x312>
 8004c94:	4b77      	ldr	r3, [pc, #476]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	4a76      	ldr	r2, [pc, #472]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004c9a:	f043 0304 	orr.w	r3, r3, #4
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca0:	4b74      	ldr	r3, [pc, #464]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a73      	ldr	r2, [pc, #460]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cac:	e00b      	b.n	8004cc6 <HAL_RCC_OscConfig+0x32a>
 8004cae:	4b71      	ldr	r3, [pc, #452]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	4a70      	ldr	r2, [pc, #448]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cba:	4b6e      	ldr	r3, [pc, #440]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	4a6d      	ldr	r2, [pc, #436]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004cc0:	f023 0304 	bic.w	r3, r3, #4
 8004cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d015      	beq.n	8004cfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fd fa23 	bl	8002118 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd6:	f7fd fa1f 	bl	8002118 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0bc      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ee      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x33a>
 8004cf8:	e014      	b.n	8004d24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fd fa0d 	bl	8002118 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fd fa09 	bl	8002118 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e0a6      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d18:	4b56      	ldr	r3, [pc, #344]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ee      	bne.n	8004d02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4b52      	ldr	r3, [pc, #328]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a51      	ldr	r2, [pc, #324]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8092 	beq.w	8004e64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d40:	4b4c      	ldr	r3, [pc, #304]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d05c      	beq.n	8004e06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d141      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b48      	ldr	r3, [pc, #288]	; (8004e78 <HAL_RCC_OscConfig+0x4dc>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fd f9dd 	bl	8002118 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d62:	f7fd f9d9 	bl	8002118 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e078      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d74:	4b3f      	ldr	r3, [pc, #252]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	019b      	lsls	r3, r3, #6
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	061b      	lsls	r3, r3, #24
 8004da4:	4933      	ldr	r1, [pc, #204]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004daa:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <HAL_RCC_OscConfig+0x4dc>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fd f9b2 	bl	8002118 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fd f9ae 	bl	8002118 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e04d      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b2a      	ldr	r3, [pc, #168]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x41c>
 8004dd6:	e045      	b.n	8004e64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <HAL_RCC_OscConfig+0x4dc>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fd f99b 	bl	8002118 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fd f997 	bl	8002118 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e036      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df8:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f0      	bne.n	8004de6 <HAL_RCC_OscConfig+0x44a>
 8004e04:	e02e      	b.n	8004e64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e029      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e12:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <HAL_RCC_OscConfig+0x4d8>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d11c      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d115      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d10d      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d106      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40007000 	.word	0x40007000
 8004e74:	40023800 	.word	0x40023800
 8004e78:	42470060 	.word	0x42470060

08004e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0cc      	b.n	800502a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e90:	4b68      	ldr	r3, [pc, #416]	; (8005034 <HAL_RCC_ClockConfig+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d90c      	bls.n	8004eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b65      	ldr	r3, [pc, #404]	; (8005034 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	4b63      	ldr	r3, [pc, #396]	; (8005034 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0b8      	b.n	800502a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d020      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed0:	4b59      	ldr	r3, [pc, #356]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a58      	ldr	r2, [pc, #352]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ee8:	4b53      	ldr	r3, [pc, #332]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	4a52      	ldr	r2, [pc, #328]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef4:	4b50      	ldr	r3, [pc, #320]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	494d      	ldr	r1, [pc, #308]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d044      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d107      	bne.n	8004f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	4b47      	ldr	r3, [pc, #284]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d119      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e07f      	b.n	800502a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d003      	beq.n	8004f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	4b3f      	ldr	r3, [pc, #252]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e06f      	b.n	800502a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4a:	4b3b      	ldr	r3, [pc, #236]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e067      	b.n	800502a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5a:	4b37      	ldr	r3, [pc, #220]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f023 0203 	bic.w	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4934      	ldr	r1, [pc, #208]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f6c:	f7fd f8d4 	bl	8002118 <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f74:	f7fd f8d0 	bl	8002118 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e04f      	b.n	800502a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8a:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 020c 	and.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d1eb      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <HAL_RCC_ClockConfig+0x1b8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d20c      	bcs.n	8004fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b22      	ldr	r3, [pc, #136]	; (8005034 <HAL_RCC_ClockConfig+0x1b8>)
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	4b20      	ldr	r3, [pc, #128]	; (8005034 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e032      	b.n	800502a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4916      	ldr	r1, [pc, #88]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	490e      	ldr	r1, [pc, #56]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005002:	f000 f821 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 8005006:	4601      	mov	r1, r0
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	4a0a      	ldr	r2, [pc, #40]	; (800503c <HAL_RCC_ClockConfig+0x1c0>)
 8005014:	5cd3      	ldrb	r3, [r2, r3]
 8005016:	fa21 f303 	lsr.w	r3, r1, r3
 800501a:	4a09      	ldr	r2, [pc, #36]	; (8005040 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_RCC_ClockConfig+0x1c8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd f834 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40023c00 	.word	0x40023c00
 8005038:	40023800 	.word	0x40023800
 800503c:	0800b1d0 	.word	0x0800b1d0
 8005040:	20000000 	.word	0x20000000
 8005044:	20000004 	.word	0x20000004

08005048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	2300      	movs	r3, #0
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800505e:	4b63      	ldr	r3, [pc, #396]	; (80051ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b04      	cmp	r3, #4
 8005068:	d007      	beq.n	800507a <HAL_RCC_GetSysClockFreq+0x32>
 800506a:	2b08      	cmp	r3, #8
 800506c:	d008      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x38>
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 80b4 	bne.w	80051dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b5e      	ldr	r3, [pc, #376]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005076:	60bb      	str	r3, [r7, #8]
       break;
 8005078:	e0b3      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800507a:	4b5d      	ldr	r3, [pc, #372]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800507c:	60bb      	str	r3, [r7, #8]
      break;
 800507e:	e0b0      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005080:	4b5a      	ldr	r3, [pc, #360]	; (80051ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005088:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800508a:	4b58      	ldr	r3, [pc, #352]	; (80051ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d04a      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005096:	4b55      	ldr	r3, [pc, #340]	; (80051ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	f04f 0400 	mov.w	r4, #0
 80050a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	ea03 0501 	and.w	r5, r3, r1
 80050ac:	ea04 0602 	and.w	r6, r4, r2
 80050b0:	4629      	mov	r1, r5
 80050b2:	4632      	mov	r2, r6
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	0154      	lsls	r4, r2, #5
 80050be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050c2:	014b      	lsls	r3, r1, #5
 80050c4:	4619      	mov	r1, r3
 80050c6:	4622      	mov	r2, r4
 80050c8:	1b49      	subs	r1, r1, r5
 80050ca:	eb62 0206 	sbc.w	r2, r2, r6
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	f04f 0400 	mov.w	r4, #0
 80050d6:	0194      	lsls	r4, r2, #6
 80050d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050dc:	018b      	lsls	r3, r1, #6
 80050de:	1a5b      	subs	r3, r3, r1
 80050e0:	eb64 0402 	sbc.w	r4, r4, r2
 80050e4:	f04f 0100 	mov.w	r1, #0
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	00e2      	lsls	r2, r4, #3
 80050ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050f2:	00d9      	lsls	r1, r3, #3
 80050f4:	460b      	mov	r3, r1
 80050f6:	4614      	mov	r4, r2
 80050f8:	195b      	adds	r3, r3, r5
 80050fa:	eb44 0406 	adc.w	r4, r4, r6
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	02a2      	lsls	r2, r4, #10
 8005108:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800510c:	0299      	lsls	r1, r3, #10
 800510e:	460b      	mov	r3, r1
 8005110:	4614      	mov	r4, r2
 8005112:	4618      	mov	r0, r3
 8005114:	4621      	mov	r1, r4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f04f 0400 	mov.w	r4, #0
 800511c:	461a      	mov	r2, r3
 800511e:	4623      	mov	r3, r4
 8005120:	f7fb fd92 	bl	8000c48 <__aeabi_uldivmod>
 8005124:	4603      	mov	r3, r0
 8005126:	460c      	mov	r4, r1
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e049      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800512c:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	099b      	lsrs	r3, r3, #6
 8005132:	f04f 0400 	mov.w	r4, #0
 8005136:	f240 11ff 	movw	r1, #511	; 0x1ff
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	ea03 0501 	and.w	r5, r3, r1
 8005142:	ea04 0602 	and.w	r6, r4, r2
 8005146:	4629      	mov	r1, r5
 8005148:	4632      	mov	r2, r6
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	0154      	lsls	r4, r2, #5
 8005154:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005158:	014b      	lsls	r3, r1, #5
 800515a:	4619      	mov	r1, r3
 800515c:	4622      	mov	r2, r4
 800515e:	1b49      	subs	r1, r1, r5
 8005160:	eb62 0206 	sbc.w	r2, r2, r6
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	f04f 0400 	mov.w	r4, #0
 800516c:	0194      	lsls	r4, r2, #6
 800516e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005172:	018b      	lsls	r3, r1, #6
 8005174:	1a5b      	subs	r3, r3, r1
 8005176:	eb64 0402 	sbc.w	r4, r4, r2
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	00e2      	lsls	r2, r4, #3
 8005184:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005188:	00d9      	lsls	r1, r3, #3
 800518a:	460b      	mov	r3, r1
 800518c:	4614      	mov	r4, r2
 800518e:	195b      	adds	r3, r3, r5
 8005190:	eb44 0406 	adc.w	r4, r4, r6
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	02a2      	lsls	r2, r4, #10
 800519e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051a2:	0299      	lsls	r1, r3, #10
 80051a4:	460b      	mov	r3, r1
 80051a6:	4614      	mov	r4, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	4621      	mov	r1, r4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f04f 0400 	mov.w	r4, #0
 80051b2:	461a      	mov	r2, r3
 80051b4:	4623      	mov	r3, r4
 80051b6:	f7fb fd47 	bl	8000c48 <__aeabi_uldivmod>
 80051ba:	4603      	mov	r3, r0
 80051bc:	460c      	mov	r4, r1
 80051be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	3301      	adds	r3, #1
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	60bb      	str	r3, [r7, #8]
      break;
 80051da:	e002      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051de:	60bb      	str	r3, [r7, #8]
      break;
 80051e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051e2:	68bb      	ldr	r3, [r7, #8]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ec:	40023800 	.word	0x40023800
 80051f0:	00f42400 	.word	0x00f42400

080051f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <HAL_RCC_GetHCLKFreq+0x14>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000

0800520c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005210:	f7ff fff0 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005214:	4601      	mov	r1, r0
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	0a9b      	lsrs	r3, r3, #10
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4a03      	ldr	r2, [pc, #12]	; (8005230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005222:	5cd3      	ldrb	r3, [r2, r3]
 8005224:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40023800 	.word	0x40023800
 8005230:	0800b1e0 	.word	0x0800b1e0

08005234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e01d      	b.n	8005282 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fc fdfc 	bl	8001e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f000 f982 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d007      	beq.n	80052bc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	d007      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b02      	cmp	r3, #2
 800532e:	d122      	bne.n	8005376 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d11b      	bne.n	8005376 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f06f 0202 	mvn.w	r2, #2
 8005346:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f8ee 	bl	800553e <HAL_TIM_IC_CaptureCallback>
 8005362:	e005      	b.n	8005370 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f8e0 	bl	800552a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8f1 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b04      	cmp	r3, #4
 8005382:	d122      	bne.n	80053ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b04      	cmp	r3, #4
 8005390:	d11b      	bne.n	80053ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0204 	mvn.w	r2, #4
 800539a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8c4 	bl	800553e <HAL_TIM_IC_CaptureCallback>
 80053b6:	e005      	b.n	80053c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8b6 	bl	800552a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f8c7 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d122      	bne.n	800541e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d11b      	bne.n	800541e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0208 	mvn.w	r2, #8
 80053ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2204      	movs	r2, #4
 80053f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f89a 	bl	800553e <HAL_TIM_IC_CaptureCallback>
 800540a:	e005      	b.n	8005418 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f88c 	bl	800552a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f89d 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b10      	cmp	r3, #16
 800542a:	d122      	bne.n	8005472 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b10      	cmp	r3, #16
 8005438:	d11b      	bne.n	8005472 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f06f 0210 	mvn.w	r2, #16
 8005442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2208      	movs	r2, #8
 8005448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f870 	bl	800553e <HAL_TIM_IC_CaptureCallback>
 800545e:	e005      	b.n	800546c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f862 	bl	800552a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f873 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d10e      	bne.n	800549e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d107      	bne.n	800549e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f06f 0201 	mvn.w	r2, #1
 8005496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7fc fc41 	bl	8001d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d10e      	bne.n	80054ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d107      	bne.n	80054ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f97f 	bl	80057c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d10e      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d107      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f838 	bl	8005566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d10e      	bne.n	8005522 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b20      	cmp	r3, #32
 8005510:	d107      	bne.n	8005522 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0220 	mvn.w	r2, #32
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f949 	bl	80057b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a40      	ldr	r2, [pc, #256]	; (8005690 <TIM_Base_SetConfig+0x114>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559a:	d00f      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3d      	ldr	r2, [pc, #244]	; (8005694 <TIM_Base_SetConfig+0x118>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00b      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3c      	ldr	r2, [pc, #240]	; (8005698 <TIM_Base_SetConfig+0x11c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3b      	ldr	r2, [pc, #236]	; (800569c <TIM_Base_SetConfig+0x120>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3a      	ldr	r2, [pc, #232]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <TIM_Base_SetConfig+0x114>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055dc:	d027      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <TIM_Base_SetConfig+0x118>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d023      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <TIM_Base_SetConfig+0x11c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	; (800569c <TIM_Base_SetConfig+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a29      	ldr	r2, [pc, #164]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d017      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <TIM_Base_SetConfig+0x128>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <TIM_Base_SetConfig+0x12c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00f      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a26      	ldr	r2, [pc, #152]	; (80056ac <TIM_Base_SetConfig+0x130>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a25      	ldr	r2, [pc, #148]	; (80056b0 <TIM_Base_SetConfig+0x134>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a24      	ldr	r2, [pc, #144]	; (80056b4 <TIM_Base_SetConfig+0x138>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a23      	ldr	r2, [pc, #140]	; (80056b8 <TIM_Base_SetConfig+0x13c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d108      	bne.n	8005640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <TIM_Base_SetConfig+0x114>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d103      	bne.n	800567c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	615a      	str	r2, [r3, #20]
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40010400 	.word	0x40010400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800
 80056b0:	40001800 	.word	0x40001800
 80056b4:	40001c00 	.word	0x40001c00
 80056b8:	40002000 	.word	0x40002000

080056bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e05a      	b.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d01d      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a17      	ldr	r2, [pc, #92]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d10c      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4313      	orrs	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800
 80057a4:	40000c00 	.word	0x40000c00
 80057a8:	40010400 	.word	0x40010400
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40001800 	.word	0x40001800

080057b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057dc:	b084      	sub	sp, #16
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	f107 001c 	add.w	r0, r7, #28
 80057ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d122      	bne.n	800583a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800581c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 fac6 	bl	8006dc0 <USB_CoreReset>
 8005834:	4603      	mov	r3, r0
 8005836:	73fb      	strb	r3, [r7, #15]
 8005838:	e01a      	b.n	8005870 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 faba 	bl	8006dc0 <USB_CoreReset>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
 8005862:	e005      	b.n	8005870 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10b      	bne.n	800588e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f043 0206 	orr.w	r2, r3, #6
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f043 0220 	orr.w	r2, r3, #32
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800589a:	b004      	add	sp, #16
 800589c:	4770      	bx	lr
	...

080058a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d165      	bne.n	8005980 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4a41      	ldr	r2, [pc, #260]	; (80059bc <USB_SetTurnaroundTime+0x11c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d906      	bls.n	80058ca <USB_SetTurnaroundTime+0x2a>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a40      	ldr	r2, [pc, #256]	; (80059c0 <USB_SetTurnaroundTime+0x120>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d802      	bhi.n	80058ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058c4:	230f      	movs	r3, #15
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e062      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4a3c      	ldr	r2, [pc, #240]	; (80059c0 <USB_SetTurnaroundTime+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d906      	bls.n	80058e0 <USB_SetTurnaroundTime+0x40>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4a3b      	ldr	r2, [pc, #236]	; (80059c4 <USB_SetTurnaroundTime+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d802      	bhi.n	80058e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058da:	230e      	movs	r3, #14
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e057      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4a38      	ldr	r2, [pc, #224]	; (80059c4 <USB_SetTurnaroundTime+0x124>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d906      	bls.n	80058f6 <USB_SetTurnaroundTime+0x56>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4a37      	ldr	r2, [pc, #220]	; (80059c8 <USB_SetTurnaroundTime+0x128>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d802      	bhi.n	80058f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058f0:	230d      	movs	r3, #13
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e04c      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	4a33      	ldr	r2, [pc, #204]	; (80059c8 <USB_SetTurnaroundTime+0x128>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d906      	bls.n	800590c <USB_SetTurnaroundTime+0x6c>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4a32      	ldr	r2, [pc, #200]	; (80059cc <USB_SetTurnaroundTime+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d802      	bhi.n	800590c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005906:	230c      	movs	r3, #12
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e041      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <USB_SetTurnaroundTime+0x12c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d906      	bls.n	8005922 <USB_SetTurnaroundTime+0x82>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <USB_SetTurnaroundTime+0x130>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d802      	bhi.n	8005922 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800591c:	230b      	movs	r3, #11
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e036      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <USB_SetTurnaroundTime+0x130>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d906      	bls.n	8005938 <USB_SetTurnaroundTime+0x98>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a29      	ldr	r2, [pc, #164]	; (80059d4 <USB_SetTurnaroundTime+0x134>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d802      	bhi.n	8005938 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005932:	230a      	movs	r3, #10
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e02b      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4a26      	ldr	r2, [pc, #152]	; (80059d4 <USB_SetTurnaroundTime+0x134>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d906      	bls.n	800594e <USB_SetTurnaroundTime+0xae>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a25      	ldr	r2, [pc, #148]	; (80059d8 <USB_SetTurnaroundTime+0x138>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d802      	bhi.n	800594e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005948:	2309      	movs	r3, #9
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e020      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <USB_SetTurnaroundTime+0x138>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d906      	bls.n	8005964 <USB_SetTurnaroundTime+0xc4>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a20      	ldr	r2, [pc, #128]	; (80059dc <USB_SetTurnaroundTime+0x13c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d802      	bhi.n	8005964 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800595e:	2308      	movs	r3, #8
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e015      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <USB_SetTurnaroundTime+0x13c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d906      	bls.n	800597a <USB_SetTurnaroundTime+0xda>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <USB_SetTurnaroundTime+0x140>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d802      	bhi.n	800597a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005974:	2307      	movs	r3, #7
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e00a      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800597a:	2306      	movs	r3, #6
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e007      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005986:	2309      	movs	r3, #9
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e001      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800598c:	2309      	movs	r3, #9
 800598e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	00d8acbf 	.word	0x00d8acbf
 80059c0:	00e4e1bf 	.word	0x00e4e1bf
 80059c4:	00f423ff 	.word	0x00f423ff
 80059c8:	0106737f 	.word	0x0106737f
 80059cc:	011a499f 	.word	0x011a499f
 80059d0:	01312cff 	.word	0x01312cff
 80059d4:	014ca43f 	.word	0x014ca43f
 80059d8:	016e35ff 	.word	0x016e35ff
 80059dc:	01a6ab1f 	.word	0x01a6ab1f
 80059e0:	01e847ff 	.word	0x01e847ff

080059e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f043 0201 	orr.w	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d106      	bne.n	8005a54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	e00b      	b.n	8005a6c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e001      	b.n	8005a6c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e003      	b.n	8005a74 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005a6c:	2032      	movs	r0, #50	; 0x32
 8005a6e:	f7fc fb5f 	bl	8002130 <HAL_Delay>

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e009      	b.n	8005ab0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	3340      	adds	r3, #64	; 0x40
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3301      	adds	r3, #1
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b0e      	cmp	r3, #14
 8005ab4:	d9f2      	bls.n	8005a9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11c      	bne.n	8005af6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
 8005af4:	e00b      	b.n	8005b0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	4619      	mov	r1, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	461a      	mov	r2, r3
 8005b2a:	680b      	ldr	r3, [r1, #0]
 8005b2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d10c      	bne.n	8005b4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f949 	bl	8005dd4 <USB_SetDevSpeed>
 8005b42:	e008      	b.n	8005b56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b44:	2101      	movs	r1, #1
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f944 	bl	8005dd4 <USB_SetDevSpeed>
 8005b4c:	e003      	b.n	8005b56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b4e:	2103      	movs	r1, #3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f93f 	bl	8005dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b56:	2110      	movs	r1, #16
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f8f3 	bl	8005d44 <USB_FlushTxFifo>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f911 	bl	8005d90 <USB_FlushRxFifo>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2300      	movs	r3, #0
 8005b82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	461a      	mov	r2, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	e043      	b.n	8005c2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb8:	d118      	bne.n	8005bec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e013      	b.n	8005bfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	461a      	mov	r2, r3
 8005be4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e008      	b.n	8005bfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	3301      	adds	r3, #1
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d3b7      	bcc.n	8005ba2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	e043      	b.n	8005cc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c4e:	d118      	bne.n	8005c82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e013      	b.n	8005c94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	e008      	b.n	8005c94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2300      	movs	r3, #0
 8005c92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d3b7      	bcc.n	8005c38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d105      	bne.n	8005cfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f043 0210 	orr.w	r2, r3, #16
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <USB_DevInit+0x2c4>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f043 0208 	orr.w	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d107      	bne.n	8005d30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d28:	f043 0304 	orr.w	r3, r3, #4
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d3c:	b004      	add	sp, #16
 8005d3e:	4770      	bx	lr
 8005d40:	803c3800 	.word	0x803c3800

08005d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	019b      	lsls	r3, r3, #6
 8005d56:	f043 0220 	orr.w	r2, r3, #32
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <USB_FlushTxFifo+0x48>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d901      	bls.n	8005d70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e006      	b.n	8005d7e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d0f0      	beq.n	8005d5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	00030d40 	.word	0x00030d40

08005d90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <USB_FlushRxFifo+0x40>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d901      	bls.n	8005db4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e006      	b.n	8005dc2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d0f0      	beq.n	8005da2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	00030d40 	.word	0x00030d40

08005dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005df4:	4313      	orrs	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b087      	sub	sp, #28
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0306 	and.w	r3, r3, #6
 8005e1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]
 8005e2a:	e00a      	b.n	8005e42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d002      	beq.n	8005e38 <USB_GetDevSpeed+0x32>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b06      	cmp	r3, #6
 8005e36:	d102      	bne.n	8005e3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	75fb      	strb	r3, [r7, #23]
 8005e3c:	e001      	b.n	8005e42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e3e:	230f      	movs	r3, #15
 8005e40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d13a      	bne.n	8005ee2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d155      	bne.n	8005f50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	78db      	ldrb	r3, [r3, #3]
 8005ebe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ec0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	059b      	lsls	r3, r3, #22
 8005ec6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e036      	b.n	8005f50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee8:	69da      	ldr	r2, [r3, #28]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d11a      	bne.n	8005f50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f36:	430b      	orrs	r3, r1
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d161      	bne.n	8006040 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f92:	d11f      	bne.n	8005fd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	68f9      	ldr	r1, [r7, #12]
 8005ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	b29b      	uxth	r3, r3
 8006010:	43db      	mvns	r3, r3
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006018:	4013      	ands	r3, r2
 800601a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	0159      	lsls	r1, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	440b      	add	r3, r1
 8006032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006036:	4619      	mov	r1, r3
 8006038:	4b35      	ldr	r3, [pc, #212]	; (8006110 <USB_DeactivateEndpoint+0x1b0>)
 800603a:	4013      	ands	r3, r2
 800603c:	600b      	str	r3, [r1, #0]
 800603e:	e060      	b.n	8006102 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006056:	d11f      	bne.n	8006098 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006076:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	2101      	movs	r1, #1
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	041b      	lsls	r3, r3, #16
 80060b0:	43db      	mvns	r3, r3
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060b8:	4013      	ands	r3, r2
 80060ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	2101      	movs	r1, #1
 80060ce:	fa01 f303 	lsl.w	r3, r1, r3
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	43db      	mvns	r3, r3
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060dc:	4013      	ands	r3, r2
 80060de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	0159      	lsls	r1, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	4619      	mov	r1, r3
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <USB_DeactivateEndpoint+0x1b4>)
 80060fe:	4013      	ands	r3, r2
 8006100:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	ec337800 	.word	0xec337800
 8006114:	eff37800 	.word	0xeff37800

08006118 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	; 0x28
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b01      	cmp	r3, #1
 8006136:	f040 815c 	bne.w	80063f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d132      	bne.n	80061a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a0:	0cdb      	lsrs	r3, r3, #19
 80061a2:	04db      	lsls	r3, r3, #19
 80061a4:	6113      	str	r3, [r2, #16]
 80061a6:	e074      	b.n	8006292 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	0cdb      	lsrs	r3, r3, #19
 80061c4:	04db      	lsls	r3, r3, #19
 80061c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	69fa      	ldr	r2, [r7, #28]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6959      	ldr	r1, [r3, #20]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	440b      	add	r3, r1
 8006204:	1e59      	subs	r1, r3, #1
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	fbb1 f3f3 	udiv	r3, r1, r3
 800620e:	04d9      	lsls	r1, r3, #19
 8006210:	4b9d      	ldr	r3, [pc, #628]	; (8006488 <USB_EPStartXfer+0x370>)
 8006212:	400b      	ands	r3, r1
 8006214:	69b9      	ldr	r1, [r7, #24]
 8006216:	0148      	lsls	r0, r1, #5
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	4401      	add	r1, r0
 800621c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006220:	4313      	orrs	r3, r2
 8006222:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800623a:	69b9      	ldr	r1, [r7, #24]
 800623c:	0148      	lsls	r0, r1, #5
 800623e:	69f9      	ldr	r1, [r7, #28]
 8006240:	4401      	add	r1, r0
 8006242:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006246:	4313      	orrs	r3, r2
 8006248:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	78db      	ldrb	r3, [r3, #3]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d11f      	bne.n	8006292 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006270:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006290:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d14b      	bne.n	8006330 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	461a      	mov	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	78db      	ldrb	r3, [r3, #3]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d128      	bne.n	800630e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d110      	bne.n	80062ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e00f      	b.n	800630e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800630c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006328:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e12f      	b.n	8006590 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	440a      	add	r2, r1
 8006346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800634e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	78db      	ldrb	r3, [r3, #3]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d015      	beq.n	8006384 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8117 	beq.w	8006590 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	2101      	movs	r1, #1
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	69f9      	ldr	r1, [r7, #28]
 800637a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800637e:	4313      	orrs	r3, r2
 8006380:	634b      	str	r3, [r1, #52]	; 0x34
 8006382:	e105      	b.n	8006590 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d110      	bne.n	80063b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	e00f      	b.n	80063d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	68d9      	ldr	r1, [r3, #12]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	b298      	uxth	r0, r3
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	4603      	mov	r3, r0
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fa2b 	bl	8006846 <USB_WritePacket>
 80063f0:	e0ce      	b.n	8006590 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640c:	0cdb      	lsrs	r3, r3, #19
 800640e:	04db      	lsls	r3, r3, #19
 8006410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006434:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d126      	bne.n	800648c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006454:	69b9      	ldr	r1, [r7, #24]
 8006456:	0148      	lsls	r0, r1, #5
 8006458:	69f9      	ldr	r1, [r7, #28]
 800645a:	4401      	add	r1, r0
 800645c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006460:	4313      	orrs	r3, r2
 8006462:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006482:	6113      	str	r3, [r2, #16]
 8006484:	e036      	b.n	80064f4 <USB_EPStartXfer+0x3dc>
 8006486:	bf00      	nop
 8006488:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	4413      	add	r3, r2
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	8afb      	ldrh	r3, [r7, #22]
 80064b2:	04d9      	lsls	r1, r3, #19
 80064b4:	4b39      	ldr	r3, [pc, #228]	; (800659c <USB_EPStartXfer+0x484>)
 80064b6:	400b      	ands	r3, r1
 80064b8:	69b9      	ldr	r1, [r7, #24]
 80064ba:	0148      	lsls	r0, r1, #5
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	4401      	add	r1, r0
 80064c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064c4:	4313      	orrs	r3, r2
 80064c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d4:	691a      	ldr	r2, [r3, #16]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	8af9      	ldrh	r1, [r7, #22]
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e4:	69b9      	ldr	r1, [r7, #24]
 80064e6:	0148      	lsls	r0, r1, #5
 80064e8:	69f9      	ldr	r1, [r7, #28]
 80064ea:	4401      	add	r1, r0
 80064ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064f0:	4313      	orrs	r3, r2
 80064f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d10d      	bne.n	8006516 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	68d9      	ldr	r1, [r3, #12]
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006512:	460a      	mov	r2, r1
 8006514:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	78db      	ldrb	r3, [r3, #3]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d128      	bne.n	8006570 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d110      	bne.n	8006550 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	e00f      	b.n	8006570 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800656a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800658e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	1ff80000 	.word	0x1ff80000

080065a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	f040 80cd 	bne.w	800675c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d132      	bne.n	8006630 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800660c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006628:	0cdb      	lsrs	r3, r3, #19
 800662a:	04db      	lsls	r3, r3, #19
 800662c:	6113      	str	r3, [r2, #16]
 800662e:	e04e      	b.n	80066ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664a:	0cdb      	lsrs	r3, r3, #19
 800664c:	04db      	lsls	r3, r3, #19
 800664e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800666a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800666e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006672:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	695a      	ldr	r2, [r3, #20]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	d903      	bls.n	8006688 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066be:	6939      	ldr	r1, [r7, #16]
 80066c0:	0148      	lsls	r0, r1, #5
 80066c2:	6979      	ldr	r1, [r7, #20]
 80066c4:	4401      	add	r1, r0
 80066c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066ca:	4313      	orrs	r3, r2
 80066cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d11e      	bne.n	8006712 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e092      	b.n	8006838 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	440a      	add	r2, r1
 8006728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006730:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d07e      	beq.n	8006838 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	2101      	movs	r1, #1
 800674c:	fa01 f303 	lsl.w	r3, r1, r3
 8006750:	6979      	ldr	r1, [r7, #20]
 8006752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006756:	4313      	orrs	r3, r2
 8006758:	634b      	str	r3, [r1, #52]	; 0x34
 800675a:	e06d      	b.n	8006838 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	440a      	add	r2, r1
 8006772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006776:	0cdb      	lsrs	r3, r3, #19
 8006778:	04db      	lsls	r3, r3, #19
 800677a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	440a      	add	r2, r1
 8006792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006796:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800679a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800679e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067e6:	6939      	ldr	r1, [r7, #16]
 80067e8:	0148      	lsls	r0, r1, #5
 80067ea:	6979      	ldr	r1, [r7, #20]
 80067ec:	4401      	add	r1, r0
 80067ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067f2:	4313      	orrs	r3, r2
 80067f4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10d      	bne.n	8006818 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d009      	beq.n	8006818 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	68d9      	ldr	r1, [r3, #12]
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	460a      	mov	r2, r1
 8006816:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	440a      	add	r2, r1
 800682e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006846:	b480      	push	{r7}
 8006848:	b089      	sub	sp, #36	; 0x24
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	4611      	mov	r1, r2
 8006852:	461a      	mov	r2, r3
 8006854:	460b      	mov	r3, r1
 8006856:	71fb      	strb	r3, [r7, #7]
 8006858:	4613      	mov	r3, r2
 800685a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11a      	bne.n	80068a2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800686c:	88bb      	ldrh	r3, [r7, #4]
 800686e:	3303      	adds	r3, #3
 8006870:	089b      	lsrs	r3, r3, #2
 8006872:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006874:	2300      	movs	r3, #0
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	e00f      	b.n	800689a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	031a      	lsls	r2, r3, #12
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006886:	461a      	mov	r2, r3
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3304      	adds	r3, #4
 8006892:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	3301      	adds	r3, #1
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d3eb      	bcc.n	800687a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3724      	adds	r7, #36	; 0x24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b089      	sub	sp, #36	; 0x24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	3303      	adds	r3, #3
 80068ca:	089b      	lsrs	r3, r3, #2
 80068cc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	e00b      	b.n	80068ec <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	601a      	str	r2, [r3, #0]
    pDest++;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	3304      	adds	r3, #4
 80068e4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	3301      	adds	r3, #1
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d3ef      	bcc.n	80068d4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80068f4:	69fb      	ldr	r3, [r7, #28]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3724      	adds	r7, #36	; 0x24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d12c      	bne.n	8006978 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	db12      	blt.n	8006956 <USB_EPSetStall+0x54>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006954:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	e02b      	b.n	80069d0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db12      	blt.n	80069b0 <USB_EPSetStall+0xae>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00f      	beq.n	80069b0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069ae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d128      	bne.n	8006a4c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	78db      	ldrb	r3, [r3, #3]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d003      	beq.n	8006a2a <USB_EPClearStall+0x4c>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	78db      	ldrb	r3, [r3, #3]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d138      	bne.n	8006a9c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	e027      	b.n	8006a9c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	78db      	ldrb	r3, [r3, #3]
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d003      	beq.n	8006a7c <USB_EPClearStall+0x9e>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	78db      	ldrb	r3, [r3, #3]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d10f      	bne.n	8006a9c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006acc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b10:	f023 0303 	bic.w	r3, r3, #3
 8006b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b24:	f023 0302 	bic.w	r3, r3, #2
 8006b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b66:	f043 0302 	orr.w	r3, r3, #2
 8006b6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	0c1b      	lsrs	r3, r3, #16
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	b29b      	uxth	r3, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	4013      	ands	r3, r2
 8006c34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c36:	68bb      	ldr	r3, [r7, #8]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c66:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	fa22 f303 	lsr.w	r3, r2, r3
 8006c74:	01db      	lsls	r3, r3, #7
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c92:	68bb      	ldr	r3, [r7, #8]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	f003 0301 	and.w	r3, r3, #1
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	333c      	adds	r3, #60	; 0x3c
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	4a26      	ldr	r2, [pc, #152]	; (8006dbc <USB_EP0_OutStart+0xb8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d90a      	bls.n	8006d3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d38:	d101      	bne.n	8006d3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e037      	b.n	8006dae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	461a      	mov	r2, r3
 8006d46:	2300      	movs	r3, #0
 8006d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6c:	f043 0318 	orr.w	r3, r3, #24
 8006d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d86:	7afb      	ldrb	r3, [r7, #11]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d10f      	bne.n	8006dac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d92:	461a      	mov	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006daa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	4f54300a 	.word	0x4f54300a

08006dc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <USB_CoreReset+0x64>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e01b      	b.n	8006e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	daf2      	bge.n	8006dcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f043 0201 	orr.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a09      	ldr	r2, [pc, #36]	; (8006e24 <USB_CoreReset+0x64>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d901      	bls.n	8006e08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e006      	b.n	8006e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d0f0      	beq.n	8006df6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	00030d40 	.word	0x00030d40

08006e28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e38:	f002 f940 	bl	80090bc <malloc>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d105      	bne.n	8006e52 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e066      	b.n	8006f20 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7c1b      	ldrb	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d119      	bne.n	8006e96 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e66:	2202      	movs	r2, #2
 8006e68:	2181      	movs	r1, #129	; 0x81
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 ffad 	bl	8008dca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 ffa3 	bl	8008dca <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2210      	movs	r2, #16
 8006e90:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006e94:	e016      	b.n	8006ec4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e96:	2340      	movs	r3, #64	; 0x40
 8006e98:	2202      	movs	r2, #2
 8006e9a:	2181      	movs	r1, #129	; 0x81
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 ff94 	bl	8008dca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ea8:	2340      	movs	r3, #64	; 0x40
 8006eaa:	2202      	movs	r2, #2
 8006eac:	2101      	movs	r1, #1
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 ff8b 	bl	8008dca <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	2182      	movs	r1, #130	; 0x82
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 ff7d 	bl	8008dca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	7c1b      	ldrb	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d109      	bne.n	8006f0e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f04:	2101      	movs	r1, #1
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f002 f84e 	bl	8008fa8 <USBD_LL_PrepareReceive>
 8006f0c:	e007      	b.n	8006f1e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f14:	2340      	movs	r3, #64	; 0x40
 8006f16:	2101      	movs	r1, #1
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f002 f845 	bl	8008fa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f38:	2181      	movs	r1, #129	; 0x81
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 ff6b 	bl	8008e16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f46:	2101      	movs	r1, #1
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 ff64 	bl	8008e16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f56:	2182      	movs	r1, #130	; 0x82
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 ff5c 	bl	8008e16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00e      	beq.n	8006f96 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f002 f89f 	bl	80090cc <free>
    pdev->pClassData = NULL;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d03a      	beq.n	8007040 <USBD_CDC_Setup+0xa0>
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	f040 8097 	bne.w	80070fe <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	88db      	ldrh	r3, [r3, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d029      	beq.n	800702c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	b25b      	sxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	da11      	bge.n	8007006 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006fee:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	88d2      	ldrh	r2, [r2, #6]
 8006ff4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ff6:	6939      	ldr	r1, [r7, #16]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	88db      	ldrh	r3, [r3, #6]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fa9d 	bl	800853e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007004:	e082      	b.n	800710c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	785a      	ldrb	r2, [r3, #1]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	88db      	ldrh	r3, [r3, #6]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800701c:	6939      	ldr	r1, [r7, #16]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	88db      	ldrh	r3, [r3, #6]
 8007022:	461a      	mov	r2, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 fab6 	bl	8008596 <USBD_CtlPrepareRx>
    break;
 800702a:	e06f      	b.n	800710c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	7850      	ldrb	r0, [r2, #1]
 8007038:	2200      	movs	r2, #0
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	4798      	blx	r3
    break;
 800703e:	e065      	b.n	800710c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	785b      	ldrb	r3, [r3, #1]
 8007044:	2b0b      	cmp	r3, #11
 8007046:	d84f      	bhi.n	80070e8 <USBD_CDC_Setup+0x148>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <USBD_CDC_Setup+0xb0>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007081 	.word	0x08007081
 8007054:	080070f7 	.word	0x080070f7
 8007058:	080070e9 	.word	0x080070e9
 800705c:	080070e9 	.word	0x080070e9
 8007060:	080070e9 	.word	0x080070e9
 8007064:	080070e9 	.word	0x080070e9
 8007068:	080070e9 	.word	0x080070e9
 800706c:	080070e9 	.word	0x080070e9
 8007070:	080070e9 	.word	0x080070e9
 8007074:	080070e9 	.word	0x080070e9
 8007078:	080070a9 	.word	0x080070a9
 800707c:	080070d1 	.word	0x080070d1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007086:	2b03      	cmp	r3, #3
 8007088:	d107      	bne.n	800709a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800708a:	f107 030c 	add.w	r3, r7, #12
 800708e:	2202      	movs	r2, #2
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fa53 	bl	800853e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007098:	e030      	b.n	80070fc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f9dd 	bl	800845c <USBD_CtlError>
        ret = USBD_FAIL;
 80070a2:	2303      	movs	r3, #3
 80070a4:	75fb      	strb	r3, [r7, #23]
      break;
 80070a6:	e029      	b.n	80070fc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d107      	bne.n	80070c2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80070b2:	f107 030f 	add.w	r3, r7, #15
 80070b6:	2201      	movs	r2, #1
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 fa3f 	bl	800853e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80070c0:	e01c      	b.n	80070fc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 f9c9 	bl	800845c <USBD_CtlError>
        ret = USBD_FAIL;
 80070ca:	2303      	movs	r3, #3
 80070cc:	75fb      	strb	r3, [r7, #23]
      break;
 80070ce:	e015      	b.n	80070fc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d00f      	beq.n	80070fa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f9bd 	bl	800845c <USBD_CtlError>
        ret = USBD_FAIL;
 80070e2:	2303      	movs	r3, #3
 80070e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80070e6:	e008      	b.n	80070fa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f9b6 	bl	800845c <USBD_CtlError>
      ret = USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	75fb      	strb	r3, [r7, #23]
      break;
 80070f4:	e002      	b.n	80070fc <USBD_CDC_Setup+0x15c>
      break;
 80070f6:	bf00      	nop
 80070f8:	e008      	b.n	800710c <USBD_CDC_Setup+0x16c>
      break;
 80070fa:	bf00      	nop
    }
    break;
 80070fc:	e006      	b.n	800710c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 f9ab 	bl	800845c <USBD_CtlError>
    ret = USBD_FAIL;
 8007106:	2303      	movs	r3, #3
 8007108:	75fb      	strb	r3, [r7, #23]
    break;
 800710a:	bf00      	nop
  }

  return (uint8_t)ret;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop

08007118 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800712a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007136:	2303      	movs	r3, #3
 8007138:	e049      	b.n	80071ce <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007140:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	3318      	adds	r3, #24
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d029      	beq.n	80071ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	3318      	adds	r3, #24
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	78f9      	ldrb	r1, [r7, #3]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	460b      	mov	r3, r1
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	1a5b      	subs	r3, r3, r1
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4403      	add	r3, r0
 8007178:	3344      	adds	r3, #68	; 0x44
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007180:	fb03 f301 	mul.w	r3, r3, r1
 8007184:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007186:	2b00      	cmp	r3, #0
 8007188:	d110      	bne.n	80071ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	3318      	adds	r3, #24
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800719e:	78f9      	ldrb	r1, [r7, #3]
 80071a0:	2300      	movs	r3, #0
 80071a2:	2200      	movs	r2, #0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fede 	bl	8008f66 <USBD_LL_Transmit>
 80071aa:	e00f      	b.n	80071cc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e015      	b.n	8007224 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 fef4 	bl	8008fea <USBD_LL_GetRxDataSize>
 8007202:	4602      	mov	r2, r0
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800721e:	4611      	mov	r1, r2
 8007220:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800723a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d015      	beq.n	8007272 <USBD_CDC_EP0_RxReady+0x46>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800724c:	2bff      	cmp	r3, #255	; 0xff
 800724e:	d010      	beq.n	8007272 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800725e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007266:	b292      	uxth	r2, r2
 8007268:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	22ff      	movs	r2, #255	; 0xff
 800726e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2243      	movs	r2, #67	; 0x43
 8007288:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800728a:	4b03      	ldr	r3, [pc, #12]	; (8007298 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	20000094 	.word	0x20000094

0800729c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2243      	movs	r2, #67	; 0x43
 80072a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80072aa:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	20000050 	.word	0x20000050

080072bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2243      	movs	r2, #67	; 0x43
 80072c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80072ca:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	200000d8 	.word	0x200000d8

080072dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	220a      	movs	r2, #10
 80072e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80072ea:	4b03      	ldr	r3, [pc, #12]	; (80072f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	2000000c 	.word	0x2000000c

080072fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	e004      	b.n	800731a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007326:	b480      	push	{r7}
 8007328:	b087      	sub	sp, #28
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007338:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007368:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800738e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007390:	2301      	movs	r3, #1
 8007392:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800739e:	2303      	movs	r3, #3
 80073a0:	e01a      	b.n	80073d8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d114      	bne.n	80073d6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073ca:	2181      	movs	r1, #129	; 0x81
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fdca 	bl	8008f66 <USBD_LL_Transmit>

    ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e016      	b.n	800742c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7c1b      	ldrb	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800740c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007410:	2101      	movs	r1, #1
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fdc8 	bl	8008fa8 <USBD_LL_PrepareReceive>
 8007418:	e007      	b.n	800742a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007420:	2340      	movs	r3, #64	; 0x40
 8007422:	2101      	movs	r1, #1
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 fdbf 	bl	8008fa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	4613      	mov	r3, r2
 8007440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	e025      	b.n	8007498 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	79fa      	ldrb	r2, [r7, #7]
 800748a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f001 fc35 	bl	8008cfc <USBD_LL_Init>
 8007492:	4603      	mov	r3, r0
 8007494:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e010      	b.n	80074da <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	f107 020e 	add.w	r2, r7, #14
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
 80074d0:	4602      	mov	r2, r0
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fc52 	bl	8008d94 <USBD_LL_Start>
 80074f0:	4603      	mov	r3, r0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800751c:	2303      	movs	r3, #3
 800751e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	4611      	mov	r1, r2
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	4611      	mov	r1, r2
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
  }

  return USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f000 ff2c 	bl	80083e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800759e:	461a      	mov	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d00e      	beq.n	80075d2 <USBD_LL_SetupStage+0x5a>
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d302      	bcc.n	80075be <USBD_LL_SetupStage+0x46>
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d014      	beq.n	80075e6 <USBD_LL_SetupStage+0x6e>
 80075bc:	e01d      	b.n	80075fa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa18 	bl	80079fc <USBD_StdDevReq>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73fb      	strb	r3, [r7, #15]
      break;
 80075d0:	e020      	b.n	8007614 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa7c 	bl	8007ad8 <USBD_StdItfReq>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]
      break;
 80075e4:	e016      	b.n	8007614 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fab8 	bl	8007b64 <USBD_StdEPReq>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]
      break;
 80075f8:	e00c      	b.n	8007614 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007600:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007604:	b2db      	uxtb	r3, r3
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fc23 	bl	8008e54 <USBD_LL_StallEP>
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
      break;
 8007612:	bf00      	nop
  }

  return ret;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	460b      	mov	r3, r1
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d137      	bne.n	80076a2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007638:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007640:	2b03      	cmp	r3, #3
 8007642:	d14a      	bne.n	80076da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	429a      	cmp	r2, r3
 800764e:	d913      	bls.n	8007678 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	4293      	cmp	r3, r2
 8007668:	bf28      	it	cs
 800766a:	4613      	movcs	r3, r2
 800766c:	461a      	mov	r2, r3
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 ffad 	bl	80085d0 <USBD_CtlContinueRx>
 8007676:	e030      	b.n	80076da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800768a:	2b03      	cmp	r3, #3
 800768c:	d105      	bne.n	800769a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 ffa9 	bl	80085f2 <USBD_CtlSendStatus>
 80076a0:	e01b      	b.n	80076da <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d013      	beq.n	80076d6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d10e      	bne.n	80076d6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	7afa      	ldrb	r2, [r7, #11]
 80076c2:	4611      	mov	r1, r2
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	4798      	blx	r3
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	e002      	b.n	80076dc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e000      	b.n	80076dc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	460b      	mov	r3, r1
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80076f2:	7afb      	ldrb	r3, [r7, #11]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d16a      	bne.n	80077ce <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3314      	adds	r3, #20
 80076fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007704:	2b02      	cmp	r3, #2
 8007706:	d155      	bne.n	80077b4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	429a      	cmp	r2, r3
 8007712:	d914      	bls.n	800773e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	1ad2      	subs	r2, r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	461a      	mov	r2, r3
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 ff22 	bl	8008574 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007730:	2300      	movs	r3, #0
 8007732:	2200      	movs	r2, #0
 8007734:	2100      	movs	r1, #0
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f001 fc36 	bl	8008fa8 <USBD_LL_PrepareReceive>
 800773c:	e03a      	b.n	80077b4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	d11c      	bne.n	8007784 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007752:	429a      	cmp	r2, r3
 8007754:	d316      	bcc.n	8007784 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007760:	429a      	cmp	r2, r3
 8007762:	d20f      	bcs.n	8007784 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 ff03 	bl	8008574 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007776:	2300      	movs	r3, #0
 8007778:	2200      	movs	r2, #0
 800777a:	2100      	movs	r1, #0
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f001 fc13 	bl	8008fa8 <USBD_LL_PrepareReceive>
 8007782:	e017      	b.n	80077b4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007796:	2b03      	cmp	r3, #3
 8007798:	d105      	bne.n	80077a6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077a6:	2180      	movs	r1, #128	; 0x80
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f001 fb53 	bl	8008e54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 ff32 	bl	8008618 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d123      	bne.n	8007806 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fe9b 	bl	80074fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077cc:	e01b      	b.n	8007806 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d013      	beq.n	8007802 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d10e      	bne.n	8007802 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	7afa      	ldrb	r2, [r7, #11]
 80077ee:	4611      	mov	r1, r2
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	4798      	blx	r3
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	e002      	b.n	8007808 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	e000      	b.n	8007808 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6852      	ldr	r2, [r2, #4]
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	4611      	mov	r1, r2
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	2200      	movs	r2, #0
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fab5 	bl	8008dca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2240      	movs	r2, #64	; 0x40
 800786c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007870:	2340      	movs	r3, #64	; 0x40
 8007872:	2200      	movs	r2, #0
 8007874:	2180      	movs	r1, #128	; 0x80
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f001 faa7 	bl	8008dca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2240      	movs	r2, #64	; 0x40
 8007886:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	78fa      	ldrb	r2, [r7, #3]
 80078a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2204      	movs	r2, #4
 80078ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d105      	bne.n	80078fa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007916:	2b03      	cmp	r3, #3
 8007918:	d10b      	bne.n	8007932 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799c:	2b00      	cmp	r3, #0
 800799e:	d009      	beq.n	80079b4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6852      	ldr	r2, [r2, #4]
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	4611      	mov	r1, r2
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
  }

  return USBD_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079be:	b480      	push	{r7}
 80079c0:	b087      	sub	sp, #28
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	3301      	adds	r3, #1
 80079d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079dc:	8a3b      	ldrh	r3, [r7, #16]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	b21a      	sxth	r2, r3
 80079e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	b21b      	sxth	r3, r3
 80079ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079ec:	89fb      	ldrh	r3, [r7, #14]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d004      	beq.n	8007a20 <USBD_StdDevReq+0x24>
 8007a16:	2b40      	cmp	r3, #64	; 0x40
 8007a18:	d002      	beq.n	8007a20 <USBD_StdDevReq+0x24>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <USBD_StdDevReq+0x38>
 8007a1e:	e050      	b.n	8007ac2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73fb      	strb	r3, [r7, #15]
    break;
 8007a32:	e04b      	b.n	8007acc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	d83c      	bhi.n	8007ab6 <USBD_StdDevReq+0xba>
 8007a3c:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <USBD_StdDevReq+0x48>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a99 	.word	0x08007a99
 8007a48:	08007aad 	.word	0x08007aad
 8007a4c:	08007ab7 	.word	0x08007ab7
 8007a50:	08007aa3 	.word	0x08007aa3
 8007a54:	08007ab7 	.word	0x08007ab7
 8007a58:	08007a77 	.word	0x08007a77
 8007a5c:	08007a6d 	.word	0x08007a6d
 8007a60:	08007ab7 	.word	0x08007ab7
 8007a64:	08007a8f 	.word	0x08007a8f
 8007a68:	08007a81 	.word	0x08007a81
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9ce 	bl	8007e10 <USBD_GetDescriptor>
      break;
 8007a74:	e024      	b.n	8007ac0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fb33 	bl	80080e4 <USBD_SetAddress>
      break;
 8007a7e:	e01f      	b.n	8007ac0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fb70 	bl	8008168 <USBD_SetConfig>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8c:	e018      	b.n	8007ac0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc0d 	bl	80082b0 <USBD_GetConfig>
      break;
 8007a96:	e013      	b.n	8007ac0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fc3c 	bl	8008318 <USBD_GetStatus>
      break;
 8007aa0:	e00e      	b.n	8007ac0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc6a 	bl	800837e <USBD_SetFeature>
      break;
 8007aaa:	e009      	b.n	8007ac0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fc79 	bl	80083a6 <USBD_ClrFeature>
      break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fccf 	bl	800845c <USBD_CtlError>
      break;
 8007abe:	bf00      	nop
    }
    break;
 8007ac0:	e004      	b.n	8007acc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fcc9 	bl	800845c <USBD_CtlError>
    break;
 8007aca:	bf00      	nop
  }

  return ret;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	d003      	beq.n	8007afa <USBD_StdItfReq+0x22>
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d001      	beq.n	8007afa <USBD_StdItfReq+0x22>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d12a      	bne.n	8007b50 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b00:	3b01      	subs	r3, #1
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d81d      	bhi.n	8007b42 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	889b      	ldrh	r3, [r3, #4]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d813      	bhi.n	8007b38 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88db      	ldrh	r3, [r3, #6]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d110      	bne.n	8007b4c <USBD_StdItfReq+0x74>
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10d      	bne.n	8007b4c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fd5e 	bl	80085f2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007b36:	e009      	b.n	8007b4c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fc8e 	bl	800845c <USBD_CtlError>
      break;
 8007b40:	e004      	b.n	8007b4c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc89 	bl	800845c <USBD_CtlError>
      break;
 8007b4a:	e000      	b.n	8007b4e <USBD_StdItfReq+0x76>
      break;
 8007b4c:	bf00      	nop
    }
    break;
 8007b4e:	e004      	b.n	8007b5a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fc82 	bl	800845c <USBD_CtlError>
    break;
 8007b58:	bf00      	nop
  }

  return ret;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	889b      	ldrh	r3, [r3, #4]
 8007b76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b80:	2b20      	cmp	r3, #32
 8007b82:	d004      	beq.n	8007b8e <USBD_StdEPReq+0x2a>
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d002      	beq.n	8007b8e <USBD_StdEPReq+0x2a>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <USBD_StdEPReq+0x3e>
 8007b8c:	e135      	b.n	8007dfa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba0:	e130      	b.n	8007e04 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d03e      	beq.n	8007c28 <USBD_StdEPReq+0xc4>
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d002      	beq.n	8007bb4 <USBD_StdEPReq+0x50>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d077      	beq.n	8007ca2 <USBD_StdEPReq+0x13e>
 8007bb2:	e11c      	b.n	8007dee <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d002      	beq.n	8007bc4 <USBD_StdEPReq+0x60>
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d015      	beq.n	8007bee <USBD_StdEPReq+0x8a>
 8007bc2:	e02b      	b.n	8007c1c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00c      	beq.n	8007be4 <USBD_StdEPReq+0x80>
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b80      	cmp	r3, #128	; 0x80
 8007bce:	d009      	beq.n	8007be4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f93d 	bl	8008e54 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bda:	2180      	movs	r1, #128	; 0x80
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f939 	bl	8008e54 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007be2:	e020      	b.n	8007c26 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc38 	bl	800845c <USBD_CtlError>
        break;
 8007bec:	e01b      	b.n	8007c26 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	885b      	ldrh	r3, [r3, #2]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10e      	bne.n	8007c14 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_StdEPReq+0xb0>
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2b80      	cmp	r3, #128	; 0x80
 8007c00:	d008      	beq.n	8007c14 <USBD_StdEPReq+0xb0>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	88db      	ldrh	r3, [r3, #6]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d104      	bne.n	8007c14 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 f920 	bl	8008e54 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fcec 	bl	80085f2 <USBD_CtlSendStatus>

        break;
 8007c1a:	e004      	b.n	8007c26 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fc1c 	bl	800845c <USBD_CtlError>
        break;
 8007c24:	bf00      	nop
      }
      break;
 8007c26:	e0e7      	b.n	8007df8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d002      	beq.n	8007c38 <USBD_StdEPReq+0xd4>
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d015      	beq.n	8007c62 <USBD_StdEPReq+0xfe>
 8007c36:	e02d      	b.n	8007c94 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <USBD_StdEPReq+0xf4>
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d009      	beq.n	8007c58 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f903 	bl	8008e54 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c4e:	2180      	movs	r1, #128	; 0x80
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 f8ff 	bl	8008e54 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007c56:	e023      	b.n	8007ca0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fbfe 	bl	800845c <USBD_CtlError>
        break;
 8007c60:	e01e      	b.n	8007ca0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	885b      	ldrh	r3, [r3, #2]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d119      	bne.n	8007c9e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d004      	beq.n	8007c7e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 f90a 	bl	8008e92 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fcb7 	bl	80085f2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
        }
        break;
 8007c92:	e004      	b.n	8007c9e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fbe0 	bl	800845c <USBD_CtlError>
        break;
 8007c9c:	e000      	b.n	8007ca0 <USBD_StdEPReq+0x13c>
        break;
 8007c9e:	bf00      	nop
      }
      break;
 8007ca0:	e0aa      	b.n	8007df8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d002      	beq.n	8007cb2 <USBD_StdEPReq+0x14e>
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d032      	beq.n	8007d16 <USBD_StdEPReq+0x1b2>
 8007cb0:	e097      	b.n	8007de2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d007      	beq.n	8007cc8 <USBD_StdEPReq+0x164>
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	2b80      	cmp	r3, #128	; 0x80
 8007cbc:	d004      	beq.n	8007cc8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fbcb 	bl	800845c <USBD_CtlError>
          break;
 8007cc6:	e091      	b.n	8007dec <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da0b      	bge.n	8007ce8 <USBD_StdEPReq+0x184>
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	3310      	adds	r3, #16
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	e00b      	b.n	8007d00 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3304      	adds	r3, #4
 8007d00:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2200      	movs	r2, #0
 8007d06:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fc15 	bl	800853e <USBD_CtlSendData>
        break;
 8007d14:	e06a      	b.n	8007dec <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da11      	bge.n	8007d42 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	f003 020f 	and.w	r2, r3, #15
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	440b      	add	r3, r1
 8007d30:	3324      	adds	r3, #36	; 0x24
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d117      	bne.n	8007d68 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fb8e 	bl	800845c <USBD_CtlError>
            break;
 8007d40:	e054      	b.n	8007dec <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	f003 020f 	and.w	r2, r3, #15
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fb7b 	bl	800845c <USBD_CtlError>
            break;
 8007d66:	e041      	b.n	8007dec <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da0b      	bge.n	8007d88 <USBD_StdEPReq+0x224>
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	3310      	adds	r3, #16
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	4413      	add	r3, r2
 8007d84:	3304      	adds	r3, #4
 8007d86:	e00b      	b.n	8007da0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	3304      	adds	r3, #4
 8007da0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <USBD_StdEPReq+0x24a>
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b80      	cmp	r3, #128	; 0x80
 8007dac:	d103      	bne.n	8007db6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	e00e      	b.n	8007dd4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 f888 	bl	8008ed0 <USBD_LL_IsStallEP>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	e002      	b.n	8007dd4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fbaf 	bl	800853e <USBD_CtlSendData>
          break;
 8007de0:	e004      	b.n	8007dec <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fb39 	bl	800845c <USBD_CtlError>
        break;
 8007dea:	bf00      	nop
      }
      break;
 8007dec:	e004      	b.n	8007df8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fb33 	bl	800845c <USBD_CtlError>
      break;
 8007df6:	bf00      	nop
    }
    break;
 8007df8:	e004      	b.n	8007e04 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fb2d 	bl	800845c <USBD_CtlError>
    break;
 8007e02:	bf00      	nop
  }

  return ret;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	885b      	ldrh	r3, [r3, #2]
 8007e2a:	0a1b      	lsrs	r3, r3, #8
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	2b06      	cmp	r3, #6
 8007e32:	f200 8128 	bhi.w	8008086 <USBD_GetDescriptor+0x276>
 8007e36:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <USBD_GetDescriptor+0x2c>)
 8007e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3c:	08007e59 	.word	0x08007e59
 8007e40:	08007e71 	.word	0x08007e71
 8007e44:	08007eb1 	.word	0x08007eb1
 8007e48:	08008087 	.word	0x08008087
 8007e4c:	08008087 	.word	0x08008087
 8007e50:	08008027 	.word	0x08008027
 8007e54:	08008053 	.word	0x08008053
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
    break;
 8007e6e:	e112      	b.n	8008096 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	7c1b      	ldrb	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10d      	bne.n	8007e94 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	f107 0208 	add.w	r2, r7, #8
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	2202      	movs	r2, #2
 8007e90:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007e92:	e100      	b.n	8008096 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	f107 0208 	add.w	r2, r7, #8
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4798      	blx	r3
 8007ea4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	2202      	movs	r2, #2
 8007eac:	701a      	strb	r2, [r3, #0]
    break;
 8007eae:	e0f2      	b.n	8008096 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	885b      	ldrh	r3, [r3, #2]
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b05      	cmp	r3, #5
 8007eb8:	f200 80ac 	bhi.w	8008014 <USBD_GetDescriptor+0x204>
 8007ebc:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <USBD_GetDescriptor+0xb4>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007edd 	.word	0x08007edd
 8007ec8:	08007f11 	.word	0x08007f11
 8007ecc:	08007f45 	.word	0x08007f45
 8007ed0:	08007f79 	.word	0x08007f79
 8007ed4:	08007fad 	.word	0x08007fad
 8007ed8:	08007fe1 	.word	0x08007fe1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	7c12      	ldrb	r2, [r2, #16]
 8007ef4:	f107 0108 	add.w	r1, r7, #8
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4798      	blx	r3
 8007efc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007efe:	e091      	b.n	8008024 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 faaa 	bl	800845c <USBD_CtlError>
        err++;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	72fb      	strb	r3, [r7, #11]
      break;
 8007f0e:	e089      	b.n	8008024 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	7c12      	ldrb	r2, [r2, #16]
 8007f28:	f107 0108 	add.w	r1, r7, #8
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
 8007f30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f32:	e077      	b.n	8008024 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa90 	bl	800845c <USBD_CtlError>
        err++;
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	72fb      	strb	r3, [r7, #11]
      break;
 8007f42:	e06f      	b.n	8008024 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	7c12      	ldrb	r2, [r2, #16]
 8007f5c:	f107 0108 	add.w	r1, r7, #8
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f66:	e05d      	b.n	8008024 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa76 	bl	800845c <USBD_CtlError>
        err++;
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	3301      	adds	r3, #1
 8007f74:	72fb      	strb	r3, [r7, #11]
      break;
 8007f76:	e055      	b.n	8008024 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	7c12      	ldrb	r2, [r2, #16]
 8007f90:	f107 0108 	add.w	r1, r7, #8
 8007f94:	4610      	mov	r0, r2
 8007f96:	4798      	blx	r3
 8007f98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f9a:	e043      	b.n	8008024 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa5c 	bl	800845c <USBD_CtlError>
        err++;
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	72fb      	strb	r3, [r7, #11]
      break;
 8007faa:	e03b      	b.n	8008024 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00b      	beq.n	8007fd0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	7c12      	ldrb	r2, [r2, #16]
 8007fc4:	f107 0108 	add.w	r1, r7, #8
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
 8007fcc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fce:	e029      	b.n	8008024 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa42 	bl	800845c <USBD_CtlError>
        err++;
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	72fb      	strb	r3, [r7, #11]
      break;
 8007fde:	e021      	b.n	8008024 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	7c12      	ldrb	r2, [r2, #16]
 8007ff8:	f107 0108 	add.w	r1, r7, #8
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4798      	blx	r3
 8008000:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008002:	e00f      	b.n	8008024 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa28 	bl	800845c <USBD_CtlError>
        err++;
 800800c:	7afb      	ldrb	r3, [r7, #11]
 800800e:	3301      	adds	r3, #1
 8008010:	72fb      	strb	r3, [r7, #11]
      break;
 8008012:	e007      	b.n	8008024 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa20 	bl	800845c <USBD_CtlError>
      err++;
 800801c:	7afb      	ldrb	r3, [r7, #11]
 800801e:	3301      	adds	r3, #1
 8008020:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008022:	bf00      	nop
    }
    break;
 8008024:	e037      	b.n	8008096 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	7c1b      	ldrb	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d109      	bne.n	8008042 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	f107 0208 	add.w	r2, r7, #8
 800803a:	4610      	mov	r0, r2
 800803c:	4798      	blx	r3
 800803e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008040:	e029      	b.n	8008096 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fa09 	bl	800845c <USBD_CtlError>
      err++;
 800804a:	7afb      	ldrb	r3, [r7, #11]
 800804c:	3301      	adds	r3, #1
 800804e:	72fb      	strb	r3, [r7, #11]
    break;
 8008050:	e021      	b.n	8008096 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7c1b      	ldrb	r3, [r3, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10d      	bne.n	8008076 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008062:	f107 0208 	add.w	r2, r7, #8
 8008066:	4610      	mov	r0, r2
 8008068:	4798      	blx	r3
 800806a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	2207      	movs	r2, #7
 8008072:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008074:	e00f      	b.n	8008096 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f9ef 	bl	800845c <USBD_CtlError>
      err++;
 800807e:	7afb      	ldrb	r3, [r7, #11]
 8008080:	3301      	adds	r3, #1
 8008082:	72fb      	strb	r3, [r7, #11]
    break;
 8008084:	e007      	b.n	8008096 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f9e7 	bl	800845c <USBD_CtlError>
    err++;
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	3301      	adds	r3, #1
 8008092:	72fb      	strb	r3, [r7, #11]
    break;
 8008094:	bf00      	nop
  }

  if (err != 0U)
 8008096:	7afb      	ldrb	r3, [r7, #11]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d11e      	bne.n	80080da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	88db      	ldrh	r3, [r3, #6]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d016      	beq.n	80080d2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80080a4:	893b      	ldrh	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00e      	beq.n	80080c8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	88da      	ldrh	r2, [r3, #6]
 80080ae:	893b      	ldrh	r3, [r7, #8]
 80080b0:	4293      	cmp	r3, r2
 80080b2:	bf28      	it	cs
 80080b4:	4613      	movcs	r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80080ba:	893b      	ldrh	r3, [r7, #8]
 80080bc:	461a      	mov	r2, r3
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fa3c 	bl	800853e <USBD_CtlSendData>
 80080c6:	e009      	b.n	80080dc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f9c6 	bl	800845c <USBD_CtlError>
 80080d0:	e004      	b.n	80080dc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa8d 	bl	80085f2 <USBD_CtlSendStatus>
 80080d8:	e000      	b.n	80080dc <USBD_GetDescriptor+0x2cc>
    return;
 80080da:	bf00      	nop
    }
  }
}
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop

080080e4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	889b      	ldrh	r3, [r3, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d130      	bne.n	8008158 <USBD_SetAddress+0x74>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	88db      	ldrh	r3, [r3, #6]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d12c      	bne.n	8008158 <USBD_SetAddress+0x74>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	885b      	ldrh	r3, [r3, #2]
 8008102:	2b7f      	cmp	r3, #127	; 0x7f
 8008104:	d828      	bhi.n	8008158 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	885b      	ldrh	r3, [r3, #2]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008110:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	2b03      	cmp	r3, #3
 800811a:	d104      	bne.n	8008126 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f99c 	bl	800845c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008124:	e01c      	b.n	8008160 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7bfa      	ldrb	r2, [r7, #15]
 800812a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fef8 	bl	8008f28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa5a 	bl	80085f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814c:	e008      	b.n	8008160 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008156:	e003      	b.n	8008160 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f97e 	bl	800845c <USBD_CtlError>
  }
}
 8008160:	bf00      	nop
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	885b      	ldrh	r3, [r3, #2]
 800817a:	b2da      	uxtb	r2, r3
 800817c:	4b4b      	ldr	r3, [pc, #300]	; (80082ac <USBD_SetConfig+0x144>)
 800817e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008180:	4b4a      	ldr	r3, [pc, #296]	; (80082ac <USBD_SetConfig+0x144>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d905      	bls.n	8008194 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f966 	bl	800845c <USBD_CtlError>
    return USBD_FAIL;
 8008190:	2303      	movs	r3, #3
 8008192:	e087      	b.n	80082a4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819a:	2b02      	cmp	r3, #2
 800819c:	d002      	beq.n	80081a4 <USBD_SetConfig+0x3c>
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d025      	beq.n	80081ee <USBD_SetConfig+0x86>
 80081a2:	e071      	b.n	8008288 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80081a4:	4b41      	ldr	r3, [pc, #260]	; (80082ac <USBD_SetConfig+0x144>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01c      	beq.n	80081e6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80081ac:	4b3f      	ldr	r3, [pc, #252]	; (80082ac <USBD_SetConfig+0x144>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80081b6:	4b3d      	ldr	r3, [pc, #244]	; (80082ac <USBD_SetConfig+0x144>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff f9a7 	bl	8007510 <USBD_SetClassConfig>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f944 	bl	800845c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80081d4:	e065      	b.n	80082a2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa0b 	bl	80085f2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2203      	movs	r2, #3
 80081e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80081e4:	e05d      	b.n	80082a2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa03 	bl	80085f2 <USBD_CtlSendStatus>
    break;
 80081ec:	e059      	b.n	80082a2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80081ee:	4b2f      	ldr	r3, [pc, #188]	; (80082ac <USBD_SetConfig+0x144>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d112      	bne.n	800821c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80081fe:	4b2b      	ldr	r3, [pc, #172]	; (80082ac <USBD_SetConfig+0x144>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008208:	4b28      	ldr	r3, [pc, #160]	; (80082ac <USBD_SetConfig+0x144>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff f99a 	bl	8007548 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f9ec 	bl	80085f2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800821a:	e042      	b.n	80082a2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800821c:	4b23      	ldr	r3, [pc, #140]	; (80082ac <USBD_SetConfig+0x144>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d02a      	beq.n	8008280 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7ff f988 	bl	8007548 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008238:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <USBD_SetConfig+0x144>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008242:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <USBD_SetConfig+0x144>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff f961 	bl	8007510 <USBD_SetClassConfig>
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00f      	beq.n	8008278 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f8fe 	bl	800845c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff f96d 	bl	8007548 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008276:	e014      	b.n	80082a2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f9ba 	bl	80085f2 <USBD_CtlSendStatus>
    break;
 800827e:	e010      	b.n	80082a2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f9b6 	bl	80085f2 <USBD_CtlSendStatus>
    break;
 8008286:	e00c      	b.n	80082a2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8e6 	bl	800845c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008290:	4b06      	ldr	r3, [pc, #24]	; (80082ac <USBD_SetConfig+0x144>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff f956 	bl	8007548 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800829c:	2303      	movs	r3, #3
 800829e:	73fb      	strb	r3, [r7, #15]
    break;
 80082a0:	bf00      	nop
  }

  return ret;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	2000037c 	.word	0x2000037c

080082b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	88db      	ldrh	r3, [r3, #6]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d004      	beq.n	80082cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f8c9 	bl	800845c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80082ca:	e021      	b.n	8008310 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	db17      	blt.n	8008306 <USBD_GetConfig+0x56>
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	dd02      	ble.n	80082e0 <USBD_GetConfig+0x30>
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d00b      	beq.n	80082f6 <USBD_GetConfig+0x46>
 80082de:	e012      	b.n	8008306 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3308      	adds	r3, #8
 80082ea:	2201      	movs	r2, #1
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f925 	bl	800853e <USBD_CtlSendData>
      break;
 80082f4:	e00c      	b.n	8008310 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3304      	adds	r3, #4
 80082fa:	2201      	movs	r2, #1
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f91d 	bl	800853e <USBD_CtlSendData>
      break;
 8008304:	e004      	b.n	8008310 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f8a7 	bl	800845c <USBD_CtlError>
      break;
 800830e:	bf00      	nop
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008328:	3b01      	subs	r3, #1
 800832a:	2b02      	cmp	r3, #2
 800832c:	d81e      	bhi.n	800836c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	88db      	ldrh	r3, [r3, #6]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d004      	beq.n	8008340 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f88f 	bl	800845c <USBD_CtlError>
      break;
 800833e:	e01a      	b.n	8008376 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f043 0202 	orr.w	r2, r3, #2
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	330c      	adds	r3, #12
 8008360:	2202      	movs	r2, #2
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f8ea 	bl	800853e <USBD_CtlSendData>
    break;
 800836a:	e004      	b.n	8008376 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f874 	bl	800845c <USBD_CtlError>
    break;
 8008374:	bf00      	nop
  }
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	885b      	ldrh	r3, [r3, #2]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d106      	bne.n	800839e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f92a 	bl	80085f2 <USBD_CtlSendStatus>
  }
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b6:	3b01      	subs	r3, #1
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d80b      	bhi.n	80083d4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d10c      	bne.n	80083de <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f910 	bl	80085f2 <USBD_CtlSendStatus>
      }
      break;
 80083d2:	e004      	b.n	80083de <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f840 	bl	800845c <USBD_CtlError>
      break;
 80083dc:	e000      	b.n	80083e0 <USBD_ClrFeature+0x3a>
      break;
 80083de:	bf00      	nop
  }
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	781a      	ldrb	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7ff fad3 	bl	80079be <SWAPBYTE>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3301      	adds	r3, #1
 8008424:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f7ff fac6 	bl	80079be <SWAPBYTE>
 8008432:	4603      	mov	r3, r0
 8008434:	461a      	mov	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3301      	adds	r3, #1
 800843e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff fab9 	bl	80079be <SWAPBYTE>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	80da      	strh	r2, [r3, #6]
}
 8008454:	bf00      	nop
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008466:	2180      	movs	r1, #128	; 0x80
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fcf3 	bl	8008e54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800846e:	2100      	movs	r1, #0
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fcef 	bl	8008e54 <USBD_LL_StallEP>
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b086      	sub	sp, #24
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d036      	beq.n	8008502 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008498:	6938      	ldr	r0, [r7, #16]
 800849a:	f000 f836 	bl	800850a <USBD_GetLen>
 800849e:	4603      	mov	r3, r0
 80084a0:	3301      	adds	r3, #1
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	4413      	add	r3, r2
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	7812      	ldrb	r2, [r2, #0]
 80084b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	3301      	adds	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	4413      	add	r3, r2
 80084c4:	2203      	movs	r2, #3
 80084c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
 80084ca:	3301      	adds	r3, #1
 80084cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084ce:	e013      	b.n	80084f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	4413      	add	r3, r2
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	7812      	ldrb	r2, [r2, #0]
 80084da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	3301      	adds	r3, #1
 80084e0:	613b      	str	r3, [r7, #16]
    idx++;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	3301      	adds	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	4413      	add	r3, r2
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	3301      	adds	r3, #1
 80084f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e7      	bne.n	80084d0 <USBD_GetString+0x52>
 8008500:	e000      	b.n	8008504 <USBD_GetString+0x86>
    return;
 8008502:	bf00      	nop
  }
}
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800850a:	b480      	push	{r7}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800851a:	e005      	b.n	8008528 <USBD_GetLen+0x1e>
  {
    len++;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	3301      	adds	r3, #1
 8008520:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	3301      	adds	r3, #1
 8008526:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1f5      	bne.n	800851c <USBD_GetLen+0x12>
  }

  return len;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2202      	movs	r2, #2
 800854e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	2100      	movs	r1, #0
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fcfe 	bl	8008f66 <USBD_LL_Transmit>

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	2100      	movs	r1, #0
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fced 	bl	8008f66 <USBD_LL_Transmit>

  return USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2203      	movs	r2, #3
 80085a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	2100      	movs	r1, #0
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fcf1 	bl	8008fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	2100      	movs	r1, #0
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 fce0 	bl	8008fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2204      	movs	r2, #4
 80085fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008602:	2300      	movs	r3, #0
 8008604:	2200      	movs	r2, #0
 8008606:	2100      	movs	r1, #0
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fcac 	bl	8008f66 <USBD_LL_Transmit>

  return USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2205      	movs	r2, #5
 8008624:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008628:	2300      	movs	r3, #0
 800862a:	2200      	movs	r2, #0
 800862c:	2100      	movs	r1, #0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fcba 	bl	8008fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008644:	2200      	movs	r2, #0
 8008646:	4912      	ldr	r1, [pc, #72]	; (8008690 <MX_USB_DEVICE_Init+0x50>)
 8008648:	4812      	ldr	r0, [pc, #72]	; (8008694 <MX_USB_DEVICE_Init+0x54>)
 800864a:	f7fe fef3 	bl	8007434 <USBD_Init>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008654:	f7f9 fb7a 	bl	8001d4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008658:	490f      	ldr	r1, [pc, #60]	; (8008698 <MX_USB_DEVICE_Init+0x58>)
 800865a:	480e      	ldr	r0, [pc, #56]	; (8008694 <MX_USB_DEVICE_Init+0x54>)
 800865c:	f7fe ff20 	bl	80074a0 <USBD_RegisterClass>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008666:	f7f9 fb71 	bl	8001d4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800866a:	490c      	ldr	r1, [pc, #48]	; (800869c <MX_USB_DEVICE_Init+0x5c>)
 800866c:	4809      	ldr	r0, [pc, #36]	; (8008694 <MX_USB_DEVICE_Init+0x54>)
 800866e:	f7fe fe45 	bl	80072fc <USBD_CDC_RegisterInterface>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008678:	f7f9 fb68 	bl	8001d4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800867c:	4805      	ldr	r0, [pc, #20]	; (8008694 <MX_USB_DEVICE_Init+0x54>)
 800867e:	f7fe ff30 	bl	80074e2 <USBD_Start>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008688:	f7f9 fb60 	bl	8001d4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800868c:	bf00      	nop
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20000138 	.word	0x20000138
 8008694:	200004a4 	.word	0x200004a4
 8008698:	20000018 	.word	0x20000018
 800869c:	20000124 	.word	0x20000124

080086a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80086a4:	2200      	movs	r2, #0
 80086a6:	4905      	ldr	r1, [pc, #20]	; (80086bc <CDC_Init_FS+0x1c>)
 80086a8:	4805      	ldr	r0, [pc, #20]	; (80086c0 <CDC_Init_FS+0x20>)
 80086aa:	f7fe fe3c 	bl	8007326 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80086ae:	4905      	ldr	r1, [pc, #20]	; (80086c4 <CDC_Init_FS+0x24>)
 80086b0:	4803      	ldr	r0, [pc, #12]	; (80086c0 <CDC_Init_FS+0x20>)
 80086b2:	f7fe fe51 	bl	8007358 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80086b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20000f74 	.word	0x20000f74
 80086c0:	200004a4 	.word	0x200004a4
 80086c4:	20000774 	.word	0x20000774

080086c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80086cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	6039      	str	r1, [r7, #0]
 80086e2:	71fb      	strb	r3, [r7, #7]
 80086e4:	4613      	mov	r3, r2
 80086e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	2b23      	cmp	r3, #35	; 0x23
 80086ec:	d85c      	bhi.n	80087a8 <CDC_Control_FS+0xd0>
 80086ee:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <CDC_Control_FS+0x1c>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	080087a9 	.word	0x080087a9
 80086f8:	080087a9 	.word	0x080087a9
 80086fc:	080087a9 	.word	0x080087a9
 8008700:	080087a9 	.word	0x080087a9
 8008704:	080087a9 	.word	0x080087a9
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087a9 	.word	0x080087a9
 8008710:	080087a9 	.word	0x080087a9
 8008714:	080087a9 	.word	0x080087a9
 8008718:	080087a9 	.word	0x080087a9
 800871c:	080087a9 	.word	0x080087a9
 8008720:	080087a9 	.word	0x080087a9
 8008724:	080087a9 	.word	0x080087a9
 8008728:	080087a9 	.word	0x080087a9
 800872c:	080087a9 	.word	0x080087a9
 8008730:	080087a9 	.word	0x080087a9
 8008734:	080087a9 	.word	0x080087a9
 8008738:	080087a9 	.word	0x080087a9
 800873c:	080087a9 	.word	0x080087a9
 8008740:	080087a9 	.word	0x080087a9
 8008744:	080087a9 	.word	0x080087a9
 8008748:	080087a9 	.word	0x080087a9
 800874c:	080087a9 	.word	0x080087a9
 8008750:	080087a9 	.word	0x080087a9
 8008754:	080087a9 	.word	0x080087a9
 8008758:	080087a9 	.word	0x080087a9
 800875c:	080087a9 	.word	0x080087a9
 8008760:	080087a9 	.word	0x080087a9
 8008764:	080087a9 	.word	0x080087a9
 8008768:	080087a9 	.word	0x080087a9
 800876c:	080087a9 	.word	0x080087a9
 8008770:	080087a9 	.word	0x080087a9
 8008774:	08008785 	.word	0x08008785
 8008778:	08008797 	.word	0x08008797
 800877c:	080087a9 	.word	0x080087a9
 8008780:	080087a9 	.word	0x080087a9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <CDC_Control_FS+0xe0>)
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	6810      	ldr	r0, [r2, #0]
 800878a:	6018      	str	r0, [r3, #0]
 800878c:	8891      	ldrh	r1, [r2, #4]
 800878e:	7992      	ldrb	r2, [r2, #6]
 8008790:	8099      	strh	r1, [r3, #4]
 8008792:	719a      	strb	r2, [r3, #6]
    break;
 8008794:	e009      	b.n	80087aa <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	4a07      	ldr	r2, [pc, #28]	; (80087b8 <CDC_Control_FS+0xe0>)
 800879a:	6810      	ldr	r0, [r2, #0]
 800879c:	6018      	str	r0, [r3, #0]
 800879e:	8891      	ldrh	r1, [r2, #4]
 80087a0:	7992      	ldrb	r2, [r2, #6]
 80087a2:	8099      	strh	r1, [r3, #4]
 80087a4:	719a      	strb	r2, [r3, #6]
    break;
 80087a6:	e000      	b.n	80087aa <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80087a8:	bf00      	nop
  }

  return (USBD_OK);
 80087aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	2000011c 	.word	0x2000011c

080087bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4805      	ldr	r0, [pc, #20]	; (80087e0 <CDC_Receive_FS+0x24>)
 80087ca:	f7fe fdc5 	bl	8007358 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087ce:	4804      	ldr	r0, [pc, #16]	; (80087e0 <CDC_Receive_FS+0x24>)
 80087d0:	f7fe fe06 	bl	80073e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80087d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	200004a4 	.word	0x200004a4

080087e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80087f4:	4b0d      	ldr	r3, [pc, #52]	; (800882c <CDC_Transmit_FS+0x48>)
 80087f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008806:	2301      	movs	r3, #1
 8008808:	e00b      	b.n	8008822 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800880a:	887b      	ldrh	r3, [r7, #2]
 800880c:	461a      	mov	r2, r3
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	4806      	ldr	r0, [pc, #24]	; (800882c <CDC_Transmit_FS+0x48>)
 8008812:	f7fe fd88 	bl	8007326 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008816:	4805      	ldr	r0, [pc, #20]	; (800882c <CDC_Transmit_FS+0x48>)
 8008818:	f7fe fdb2 	bl	8007380 <USBD_CDC_TransmitPacket>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200004a4 	.word	0x200004a4

08008830 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4613      	mov	r3, r2
 800883c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008846:	4618      	mov	r0, r3
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	6039      	str	r1, [r7, #0]
 800885e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2212      	movs	r2, #18
 8008864:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008866:	4b03      	ldr	r3, [pc, #12]	; (8008874 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	20000154 	.word	0x20000154

08008878 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	6039      	str	r1, [r7, #0]
 8008882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2204      	movs	r2, #4
 8008888:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800888a:	4b03      	ldr	r3, [pc, #12]	; (8008898 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	20000168 	.word	0x20000168

0800889c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d105      	bne.n	80088ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	4907      	ldr	r1, [pc, #28]	; (80088d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80088b2:	4808      	ldr	r0, [pc, #32]	; (80088d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80088b4:	f7ff fde3 	bl	800847e <USBD_GetString>
 80088b8:	e004      	b.n	80088c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	4904      	ldr	r1, [pc, #16]	; (80088d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80088be:	4805      	ldr	r0, [pc, #20]	; (80088d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80088c0:	f7ff fddd 	bl	800847e <USBD_GetString>
  }
  return USBD_StrDesc;
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20001774 	.word	0x20001774
 80088d4:	0800b188 	.word	0x0800b188

080088d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	6039      	str	r1, [r7, #0]
 80088e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	4904      	ldr	r1, [pc, #16]	; (80088f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088e8:	4804      	ldr	r0, [pc, #16]	; (80088fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088ea:	f7ff fdc8 	bl	800847e <USBD_GetString>
  return USBD_StrDesc;
 80088ee:	4b02      	ldr	r3, [pc, #8]	; (80088f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	20001774 	.word	0x20001774
 80088fc:	0800b1a0 	.word	0x0800b1a0

08008900 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	6039      	str	r1, [r7, #0]
 800890a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	221a      	movs	r2, #26
 8008910:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008912:	f000 f843 	bl	800899c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008916:	4b02      	ldr	r3, [pc, #8]	; (8008920 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	2000016c 	.word	0x2000016c

08008924 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	6039      	str	r1, [r7, #0]
 800892e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d105      	bne.n	8008942 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	4907      	ldr	r1, [pc, #28]	; (8008958 <USBD_FS_ConfigStrDescriptor+0x34>)
 800893a:	4808      	ldr	r0, [pc, #32]	; (800895c <USBD_FS_ConfigStrDescriptor+0x38>)
 800893c:	f7ff fd9f 	bl	800847e <USBD_GetString>
 8008940:	e004      	b.n	800894c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	4904      	ldr	r1, [pc, #16]	; (8008958 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008946:	4805      	ldr	r0, [pc, #20]	; (800895c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008948:	f7ff fd99 	bl	800847e <USBD_GetString>
  }
  return USBD_StrDesc;
 800894c:	4b02      	ldr	r3, [pc, #8]	; (8008958 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20001774 	.word	0x20001774
 800895c:	0800b1b4 	.word	0x0800b1b4

08008960 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d105      	bne.n	800897e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	4907      	ldr	r1, [pc, #28]	; (8008994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008976:	4808      	ldr	r0, [pc, #32]	; (8008998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008978:	f7ff fd81 	bl	800847e <USBD_GetString>
 800897c:	e004      	b.n	8008988 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	4904      	ldr	r1, [pc, #16]	; (8008994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008982:	4805      	ldr	r0, [pc, #20]	; (8008998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008984:	f7ff fd7b 	bl	800847e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008988:	4b02      	ldr	r3, [pc, #8]	; (8008994 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20001774 	.word	0x20001774
 8008998:	0800b1c0 	.word	0x0800b1c0

0800899c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089a2:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <Get_SerialNum+0x44>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089a8:	4b0e      	ldr	r3, [pc, #56]	; (80089e4 <Get_SerialNum+0x48>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089ae:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <Get_SerialNum+0x4c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089c2:	2208      	movs	r2, #8
 80089c4:	4909      	ldr	r1, [pc, #36]	; (80089ec <Get_SerialNum+0x50>)
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 f814 	bl	80089f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089cc:	2204      	movs	r2, #4
 80089ce:	4908      	ldr	r1, [pc, #32]	; (80089f0 <Get_SerialNum+0x54>)
 80089d0:	68b8      	ldr	r0, [r7, #8]
 80089d2:	f000 f80f 	bl	80089f4 <IntToUnicode>
  }
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	1fff7a10 	.word	0x1fff7a10
 80089e4:	1fff7a14 	.word	0x1fff7a14
 80089e8:	1fff7a18 	.word	0x1fff7a18
 80089ec:	2000016e 	.word	0x2000016e
 80089f0:	2000017e 	.word	0x2000017e

080089f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	4613      	mov	r3, r2
 8008a00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]
 8008a0a:	e027      	b.n	8008a5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	0f1b      	lsrs	r3, r3, #28
 8008a10:	2b09      	cmp	r3, #9
 8008a12:	d80b      	bhi.n	8008a2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	0f1b      	lsrs	r3, r3, #28
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	4619      	mov	r1, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	440b      	add	r3, r1
 8008a24:	3230      	adds	r2, #48	; 0x30
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	701a      	strb	r2, [r3, #0]
 8008a2a:	e00a      	b.n	8008a42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	0f1b      	lsrs	r3, r3, #28
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	4619      	mov	r1, r3
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	440b      	add	r3, r1
 8008a3c:	3237      	adds	r2, #55	; 0x37
 8008a3e:	b2d2      	uxtb	r2, r2
 8008a40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a56:	7dfb      	ldrb	r3, [r7, #23]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	75fb      	strb	r3, [r7, #23]
 8008a5c:	7dfa      	ldrb	r2, [r7, #23]
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d3d3      	bcc.n	8008a0c <IntToUnicode+0x18>
  }
}
 8008a64:	bf00      	nop
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08a      	sub	sp, #40	; 0x28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a78:	f107 0314 	add.w	r3, r7, #20
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	605a      	str	r2, [r3, #4]
 8008a82:	609a      	str	r2, [r3, #8]
 8008a84:	60da      	str	r2, [r3, #12]
 8008a86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a90:	d13a      	bne.n	8008b08 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a92:	2300      	movs	r3, #0
 8008a94:	613b      	str	r3, [r7, #16]
 8008a96:	4b1e      	ldr	r3, [pc, #120]	; (8008b10 <HAL_PCD_MspInit+0xa0>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9a:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <HAL_PCD_MspInit+0xa0>)
 8008a9c:	f043 0301 	orr.w	r3, r3, #1
 8008aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <HAL_PCD_MspInit+0xa0>)
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	613b      	str	r3, [r7, #16]
 8008aac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008aae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008abc:	2303      	movs	r3, #3
 8008abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ac0:	230a      	movs	r3, #10
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4812      	ldr	r0, [pc, #72]	; (8008b14 <HAL_PCD_MspInit+0xa4>)
 8008acc:	f7f9 fc64 	bl	8002398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <HAL_PCD_MspInit+0xa0>)
 8008ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad4:	4a0e      	ldr	r2, [pc, #56]	; (8008b10 <HAL_PCD_MspInit+0xa0>)
 8008ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ada:	6353      	str	r3, [r2, #52]	; 0x34
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <HAL_PCD_MspInit+0xa0>)
 8008ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae4:	4a0a      	ldr	r2, [pc, #40]	; (8008b10 <HAL_PCD_MspInit+0xa0>)
 8008ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008aea:	6453      	str	r3, [r2, #68]	; 0x44
 8008aec:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <HAL_PCD_MspInit+0xa0>)
 8008aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8008af8:	2200      	movs	r2, #0
 8008afa:	2101      	movs	r1, #1
 8008afc:	2043      	movs	r0, #67	; 0x43
 8008afe:	f7f9 fc14 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b02:	2043      	movs	r0, #67	; 0x43
 8008b04:	f7f9 fc2d 	bl	8002362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b08:	bf00      	nop
 8008b0a:	3728      	adds	r7, #40	; 0x28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	40023800 	.word	0x40023800
 8008b14:	40020000 	.word	0x40020000

08008b18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	4610      	mov	r0, r2
 8008b30:	f7fe fd22 	bl	8007578 <USBD_LL_SetupStage>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	4613      	mov	r3, r2
 8008b54:	00db      	lsls	r3, r3, #3
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	4619      	mov	r1, r3
 8008b66:	f7fe fd5a 	bl	800761e <USBD_LL_DataOutStage>
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008b84:	78fa      	ldrb	r2, [r7, #3]
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	1a9b      	subs	r3, r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	3348      	adds	r3, #72	; 0x48
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	f7fe fda3 	bl	80076e4 <USBD_LL_DataInStage>
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fea7 	bl	8007908 <USBD_LL_SOF>
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]
 8008bda:	e008      	b.n	8008bee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d102      	bne.n	8008bea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008be4:	2301      	movs	r3, #1
 8008be6:	73fb      	strb	r3, [r7, #15]
 8008be8:	e001      	b.n	8008bee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008bea:	f7f9 f8af 	bl	8001d4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bf4:	7bfa      	ldrb	r2, [r7, #15]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fe4a 	bl	8007892 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe fe03 	bl	8007810 <USBD_LL_Reset>
}
 8008c0a:	bf00      	nop
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fe45 	bl	80078b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d005      	beq.n	8008c54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c48:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <HAL_PCD_SuspendCallback+0x48>)
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	4a03      	ldr	r2, [pc, #12]	; (8008c5c <HAL_PCD_SuspendCallback+0x48>)
 8008c4e:	f043 0306 	orr.w	r3, r3, #6
 8008c52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	e000ed00 	.word	0xe000ed00

08008c60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fe34 	bl	80078dc <USBD_LL_Resume>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	4611      	mov	r1, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fe5f 	bl	8007956 <USBD_LL_IsoOUTIncomplete>
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cb2:	78fa      	ldrb	r2, [r7, #3]
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fe40 	bl	800793c <USBD_LL_IsoINIncomplete>
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fe4c 	bl	8007970 <USBD_LL_DevConnected>
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fe49 	bl	8007986 <USBD_LL_DevDisconnected>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d13c      	bne.n	8008d86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008d0c:	4a20      	ldr	r2, [pc, #128]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d1c:	4b1c      	ldr	r3, [pc, #112]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d24:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d26:	2204      	movs	r2, #4
 8008d28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d2a:	4b19      	ldr	r3, [pc, #100]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d30:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d36:	4b16      	ldr	r3, [pc, #88]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d38:	2202      	movs	r2, #2
 8008d3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d3c:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d42:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d48:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d4e:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d5a:	480d      	ldr	r0, [pc, #52]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d5c:	f7fa fc9b 	bl	8003696 <HAL_PCD_Init>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d66:	f7f8 fff1 	bl	8001d4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d6a:	2180      	movs	r1, #128	; 0x80
 8008d6c:	4808      	ldr	r0, [pc, #32]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d6e:	f7fb fdf8 	bl	8004962 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d72:	2240      	movs	r2, #64	; 0x40
 8008d74:	2100      	movs	r1, #0
 8008d76:	4806      	ldr	r0, [pc, #24]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d78:	f7fb fdac 	bl	80048d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d7c:	2280      	movs	r2, #128	; 0x80
 8008d7e:	2101      	movs	r1, #1
 8008d80:	4803      	ldr	r0, [pc, #12]	; (8008d90 <USBD_LL_Init+0x94>)
 8008d82:	f7fb fda7 	bl	80048d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20001974 	.word	0x20001974

08008d94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fa fd90 	bl	80038d0 <HAL_PCD_Start>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 f92a 	bl	8009010 <USBD_Get_USB_Status>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4603      	mov	r3, r0
 8008dda:	70fb      	strb	r3, [r7, #3]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70bb      	strb	r3, [r7, #2]
 8008de0:	4613      	mov	r3, r2
 8008de2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008df2:	78bb      	ldrb	r3, [r7, #2]
 8008df4:	883a      	ldrh	r2, [r7, #0]
 8008df6:	78f9      	ldrb	r1, [r7, #3]
 8008df8:	f7fb f974 	bl	80040e4 <HAL_PCD_EP_Open>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f904 	bl	8009010 <USBD_Get_USB_Status>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	4611      	mov	r1, r2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fb f9bd 	bl	80041b4 <HAL_PCD_EP_Close>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f8e5 	bl	8009010 <USBD_Get_USB_Status>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	4611      	mov	r1, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fb fa95 	bl	80043a2 <HAL_PCD_EP_SetStall>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 f8c6 	bl	8009010 <USBD_Get_USB_Status>
 8008e84:	4603      	mov	r3, r0
 8008e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008eac:	78fa      	ldrb	r2, [r7, #3]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fb fada 	bl	800446a <HAL_PCD_EP_ClrStall>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f8a7 	bl	8009010 <USBD_Get_USB_Status>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ee2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	da0b      	bge.n	8008f04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	333e      	adds	r3, #62	; 0x3e
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	e00b      	b.n	8008f1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	4611      	mov	r1, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fb f8a7 	bl	800409a <HAL_PCD_SetAddress>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f85c 	bl	8009010 <USBD_Get_USB_Status>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	460b      	mov	r3, r1
 8008f74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f84:	7af9      	ldrb	r1, [r7, #11]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	f7fb f9c0 	bl	800430e <HAL_PCD_EP_Transmit>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 f83b 	bl	8009010 <USBD_Get_USB_Status>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	607a      	str	r2, [r7, #4]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008fc6:	7af9      	ldrb	r1, [r7, #11]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	f7fb f93c 	bl	8004248 <HAL_PCD_EP_Receive>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f81a 	bl	8009010 <USBD_Get_USB_Status>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fe0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f7fb f96c 	bl	80042de <HAL_PCD_EP_GetRxCount>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	2b03      	cmp	r3, #3
 8009022:	d817      	bhi.n	8009054 <USBD_Get_USB_Status+0x44>
 8009024:	a201      	add	r2, pc, #4	; (adr r2, 800902c <USBD_Get_USB_Status+0x1c>)
 8009026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902a:	bf00      	nop
 800902c:	0800903d 	.word	0x0800903d
 8009030:	08009043 	.word	0x08009043
 8009034:	08009049 	.word	0x08009049
 8009038:	0800904f 	.word	0x0800904f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
    break;
 8009040:	e00b      	b.n	800905a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009042:	2303      	movs	r3, #3
 8009044:	73fb      	strb	r3, [r7, #15]
    break;
 8009046:	e008      	b.n	800905a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009048:	2301      	movs	r3, #1
 800904a:	73fb      	strb	r3, [r7, #15]
    break;
 800904c:	e005      	b.n	800905a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800904e:	2303      	movs	r3, #3
 8009050:	73fb      	strb	r3, [r7, #15]
    break;
 8009052:	e002      	b.n	800905a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009054:	2303      	movs	r3, #3
 8009056:	73fb      	strb	r3, [r7, #15]
    break;
 8009058:	bf00      	nop
  }
  return usb_status;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <__errno>:
 8009068:	4b01      	ldr	r3, [pc, #4]	; (8009070 <__errno+0x8>)
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	20000188 	.word	0x20000188

08009074 <__libc_init_array>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	4e0d      	ldr	r6, [pc, #52]	; (80090ac <__libc_init_array+0x38>)
 8009078:	4c0d      	ldr	r4, [pc, #52]	; (80090b0 <__libc_init_array+0x3c>)
 800907a:	1ba4      	subs	r4, r4, r6
 800907c:	10a4      	asrs	r4, r4, #2
 800907e:	2500      	movs	r5, #0
 8009080:	42a5      	cmp	r5, r4
 8009082:	d109      	bne.n	8009098 <__libc_init_array+0x24>
 8009084:	4e0b      	ldr	r6, [pc, #44]	; (80090b4 <__libc_init_array+0x40>)
 8009086:	4c0c      	ldr	r4, [pc, #48]	; (80090b8 <__libc_init_array+0x44>)
 8009088:	f002 f866 	bl	800b158 <_init>
 800908c:	1ba4      	subs	r4, r4, r6
 800908e:	10a4      	asrs	r4, r4, #2
 8009090:	2500      	movs	r5, #0
 8009092:	42a5      	cmp	r5, r4
 8009094:	d105      	bne.n	80090a2 <__libc_init_array+0x2e>
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800909c:	4798      	blx	r3
 800909e:	3501      	adds	r5, #1
 80090a0:	e7ee      	b.n	8009080 <__libc_init_array+0xc>
 80090a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80090a6:	4798      	blx	r3
 80090a8:	3501      	adds	r5, #1
 80090aa:	e7f2      	b.n	8009092 <__libc_init_array+0x1e>
 80090ac:	0800b450 	.word	0x0800b450
 80090b0:	0800b450 	.word	0x0800b450
 80090b4:	0800b450 	.word	0x0800b450
 80090b8:	0800b454 	.word	0x0800b454

080090bc <malloc>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <malloc+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f000 b861 	b.w	8009188 <_malloc_r>
 80090c6:	bf00      	nop
 80090c8:	20000188 	.word	0x20000188

080090cc <free>:
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <free+0xc>)
 80090ce:	4601      	mov	r1, r0
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	f000 b80b 	b.w	80090ec <_free_r>
 80090d6:	bf00      	nop
 80090d8:	20000188 	.word	0x20000188

080090dc <memset>:
 80090dc:	4402      	add	r2, r0
 80090de:	4603      	mov	r3, r0
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d100      	bne.n	80090e6 <memset+0xa>
 80090e4:	4770      	bx	lr
 80090e6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ea:	e7f9      	b.n	80090e0 <memset+0x4>

080090ec <_free_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4605      	mov	r5, r0
 80090f0:	2900      	cmp	r1, #0
 80090f2:	d045      	beq.n	8009180 <_free_r+0x94>
 80090f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090f8:	1f0c      	subs	r4, r1, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfb8      	it	lt
 80090fe:	18e4      	addlt	r4, r4, r3
 8009100:	f001 fb87 	bl	800a812 <__malloc_lock>
 8009104:	4a1f      	ldr	r2, [pc, #124]	; (8009184 <_free_r+0x98>)
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	4610      	mov	r0, r2
 800910a:	b933      	cbnz	r3, 800911a <_free_r+0x2e>
 800910c:	6063      	str	r3, [r4, #4]
 800910e:	6014      	str	r4, [r2, #0]
 8009110:	4628      	mov	r0, r5
 8009112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009116:	f001 bb7d 	b.w	800a814 <__malloc_unlock>
 800911a:	42a3      	cmp	r3, r4
 800911c:	d90c      	bls.n	8009138 <_free_r+0x4c>
 800911e:	6821      	ldr	r1, [r4, #0]
 8009120:	1862      	adds	r2, r4, r1
 8009122:	4293      	cmp	r3, r2
 8009124:	bf04      	itt	eq
 8009126:	681a      	ldreq	r2, [r3, #0]
 8009128:	685b      	ldreq	r3, [r3, #4]
 800912a:	6063      	str	r3, [r4, #4]
 800912c:	bf04      	itt	eq
 800912e:	1852      	addeq	r2, r2, r1
 8009130:	6022      	streq	r2, [r4, #0]
 8009132:	6004      	str	r4, [r0, #0]
 8009134:	e7ec      	b.n	8009110 <_free_r+0x24>
 8009136:	4613      	mov	r3, r2
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	b10a      	cbz	r2, 8009140 <_free_r+0x54>
 800913c:	42a2      	cmp	r2, r4
 800913e:	d9fa      	bls.n	8009136 <_free_r+0x4a>
 8009140:	6819      	ldr	r1, [r3, #0]
 8009142:	1858      	adds	r0, r3, r1
 8009144:	42a0      	cmp	r0, r4
 8009146:	d10b      	bne.n	8009160 <_free_r+0x74>
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	4401      	add	r1, r0
 800914c:	1858      	adds	r0, r3, r1
 800914e:	4282      	cmp	r2, r0
 8009150:	6019      	str	r1, [r3, #0]
 8009152:	d1dd      	bne.n	8009110 <_free_r+0x24>
 8009154:	6810      	ldr	r0, [r2, #0]
 8009156:	6852      	ldr	r2, [r2, #4]
 8009158:	605a      	str	r2, [r3, #4]
 800915a:	4401      	add	r1, r0
 800915c:	6019      	str	r1, [r3, #0]
 800915e:	e7d7      	b.n	8009110 <_free_r+0x24>
 8009160:	d902      	bls.n	8009168 <_free_r+0x7c>
 8009162:	230c      	movs	r3, #12
 8009164:	602b      	str	r3, [r5, #0]
 8009166:	e7d3      	b.n	8009110 <_free_r+0x24>
 8009168:	6820      	ldr	r0, [r4, #0]
 800916a:	1821      	adds	r1, r4, r0
 800916c:	428a      	cmp	r2, r1
 800916e:	bf04      	itt	eq
 8009170:	6811      	ldreq	r1, [r2, #0]
 8009172:	6852      	ldreq	r2, [r2, #4]
 8009174:	6062      	str	r2, [r4, #4]
 8009176:	bf04      	itt	eq
 8009178:	1809      	addeq	r1, r1, r0
 800917a:	6021      	streq	r1, [r4, #0]
 800917c:	605c      	str	r4, [r3, #4]
 800917e:	e7c7      	b.n	8009110 <_free_r+0x24>
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	bf00      	nop
 8009184:	20000380 	.word	0x20000380

08009188 <_malloc_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	1ccd      	adds	r5, r1, #3
 800918c:	f025 0503 	bic.w	r5, r5, #3
 8009190:	3508      	adds	r5, #8
 8009192:	2d0c      	cmp	r5, #12
 8009194:	bf38      	it	cc
 8009196:	250c      	movcc	r5, #12
 8009198:	2d00      	cmp	r5, #0
 800919a:	4606      	mov	r6, r0
 800919c:	db01      	blt.n	80091a2 <_malloc_r+0x1a>
 800919e:	42a9      	cmp	r1, r5
 80091a0:	d903      	bls.n	80091aa <_malloc_r+0x22>
 80091a2:	230c      	movs	r3, #12
 80091a4:	6033      	str	r3, [r6, #0]
 80091a6:	2000      	movs	r0, #0
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	f001 fb32 	bl	800a812 <__malloc_lock>
 80091ae:	4a21      	ldr	r2, [pc, #132]	; (8009234 <_malloc_r+0xac>)
 80091b0:	6814      	ldr	r4, [r2, #0]
 80091b2:	4621      	mov	r1, r4
 80091b4:	b991      	cbnz	r1, 80091dc <_malloc_r+0x54>
 80091b6:	4c20      	ldr	r4, [pc, #128]	; (8009238 <_malloc_r+0xb0>)
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	b91b      	cbnz	r3, 80091c4 <_malloc_r+0x3c>
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 fc99 	bl	8009af4 <_sbrk_r>
 80091c2:	6020      	str	r0, [r4, #0]
 80091c4:	4629      	mov	r1, r5
 80091c6:	4630      	mov	r0, r6
 80091c8:	f000 fc94 	bl	8009af4 <_sbrk_r>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d124      	bne.n	800921a <_malloc_r+0x92>
 80091d0:	230c      	movs	r3, #12
 80091d2:	6033      	str	r3, [r6, #0]
 80091d4:	4630      	mov	r0, r6
 80091d6:	f001 fb1d 	bl	800a814 <__malloc_unlock>
 80091da:	e7e4      	b.n	80091a6 <_malloc_r+0x1e>
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	1b5b      	subs	r3, r3, r5
 80091e0:	d418      	bmi.n	8009214 <_malloc_r+0x8c>
 80091e2:	2b0b      	cmp	r3, #11
 80091e4:	d90f      	bls.n	8009206 <_malloc_r+0x7e>
 80091e6:	600b      	str	r3, [r1, #0]
 80091e8:	50cd      	str	r5, [r1, r3]
 80091ea:	18cc      	adds	r4, r1, r3
 80091ec:	4630      	mov	r0, r6
 80091ee:	f001 fb11 	bl	800a814 <__malloc_unlock>
 80091f2:	f104 000b 	add.w	r0, r4, #11
 80091f6:	1d23      	adds	r3, r4, #4
 80091f8:	f020 0007 	bic.w	r0, r0, #7
 80091fc:	1ac3      	subs	r3, r0, r3
 80091fe:	d0d3      	beq.n	80091a8 <_malloc_r+0x20>
 8009200:	425a      	negs	r2, r3
 8009202:	50e2      	str	r2, [r4, r3]
 8009204:	e7d0      	b.n	80091a8 <_malloc_r+0x20>
 8009206:	428c      	cmp	r4, r1
 8009208:	684b      	ldr	r3, [r1, #4]
 800920a:	bf16      	itet	ne
 800920c:	6063      	strne	r3, [r4, #4]
 800920e:	6013      	streq	r3, [r2, #0]
 8009210:	460c      	movne	r4, r1
 8009212:	e7eb      	b.n	80091ec <_malloc_r+0x64>
 8009214:	460c      	mov	r4, r1
 8009216:	6849      	ldr	r1, [r1, #4]
 8009218:	e7cc      	b.n	80091b4 <_malloc_r+0x2c>
 800921a:	1cc4      	adds	r4, r0, #3
 800921c:	f024 0403 	bic.w	r4, r4, #3
 8009220:	42a0      	cmp	r0, r4
 8009222:	d005      	beq.n	8009230 <_malloc_r+0xa8>
 8009224:	1a21      	subs	r1, r4, r0
 8009226:	4630      	mov	r0, r6
 8009228:	f000 fc64 	bl	8009af4 <_sbrk_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d0cf      	beq.n	80091d0 <_malloc_r+0x48>
 8009230:	6025      	str	r5, [r4, #0]
 8009232:	e7db      	b.n	80091ec <_malloc_r+0x64>
 8009234:	20000380 	.word	0x20000380
 8009238:	20000384 	.word	0x20000384

0800923c <__cvt>:
 800923c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009240:	ec55 4b10 	vmov	r4, r5, d0
 8009244:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009246:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800924a:	2d00      	cmp	r5, #0
 800924c:	460e      	mov	r6, r1
 800924e:	4691      	mov	r9, r2
 8009250:	4619      	mov	r1, r3
 8009252:	bfb8      	it	lt
 8009254:	4622      	movlt	r2, r4
 8009256:	462b      	mov	r3, r5
 8009258:	f027 0720 	bic.w	r7, r7, #32
 800925c:	bfbb      	ittet	lt
 800925e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009262:	461d      	movlt	r5, r3
 8009264:	2300      	movge	r3, #0
 8009266:	232d      	movlt	r3, #45	; 0x2d
 8009268:	bfb8      	it	lt
 800926a:	4614      	movlt	r4, r2
 800926c:	2f46      	cmp	r7, #70	; 0x46
 800926e:	700b      	strb	r3, [r1, #0]
 8009270:	d004      	beq.n	800927c <__cvt+0x40>
 8009272:	2f45      	cmp	r7, #69	; 0x45
 8009274:	d100      	bne.n	8009278 <__cvt+0x3c>
 8009276:	3601      	adds	r6, #1
 8009278:	2102      	movs	r1, #2
 800927a:	e000      	b.n	800927e <__cvt+0x42>
 800927c:	2103      	movs	r1, #3
 800927e:	ab03      	add	r3, sp, #12
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	ab02      	add	r3, sp, #8
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4632      	mov	r2, r6
 8009288:	4653      	mov	r3, sl
 800928a:	ec45 4b10 	vmov	d0, r4, r5
 800928e:	f000 fcef 	bl	8009c70 <_dtoa_r>
 8009292:	2f47      	cmp	r7, #71	; 0x47
 8009294:	4680      	mov	r8, r0
 8009296:	d102      	bne.n	800929e <__cvt+0x62>
 8009298:	f019 0f01 	tst.w	r9, #1
 800929c:	d026      	beq.n	80092ec <__cvt+0xb0>
 800929e:	2f46      	cmp	r7, #70	; 0x46
 80092a0:	eb08 0906 	add.w	r9, r8, r6
 80092a4:	d111      	bne.n	80092ca <__cvt+0x8e>
 80092a6:	f898 3000 	ldrb.w	r3, [r8]
 80092aa:	2b30      	cmp	r3, #48	; 0x30
 80092ac:	d10a      	bne.n	80092c4 <__cvt+0x88>
 80092ae:	2200      	movs	r2, #0
 80092b0:	2300      	movs	r3, #0
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7f7 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ba:	b918      	cbnz	r0, 80092c4 <__cvt+0x88>
 80092bc:	f1c6 0601 	rsb	r6, r6, #1
 80092c0:	f8ca 6000 	str.w	r6, [sl]
 80092c4:	f8da 3000 	ldr.w	r3, [sl]
 80092c8:	4499      	add	r9, r3
 80092ca:	2200      	movs	r2, #0
 80092cc:	2300      	movs	r3, #0
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f7 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80092d6:	b938      	cbnz	r0, 80092e8 <__cvt+0xac>
 80092d8:	2230      	movs	r2, #48	; 0x30
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	454b      	cmp	r3, r9
 80092de:	d205      	bcs.n	80092ec <__cvt+0xb0>
 80092e0:	1c59      	adds	r1, r3, #1
 80092e2:	9103      	str	r1, [sp, #12]
 80092e4:	701a      	strb	r2, [r3, #0]
 80092e6:	e7f8      	b.n	80092da <__cvt+0x9e>
 80092e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092f0:	eba3 0308 	sub.w	r3, r3, r8
 80092f4:	4640      	mov	r0, r8
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	b004      	add	sp, #16
 80092fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080092fe <__exponent>:
 80092fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009300:	2900      	cmp	r1, #0
 8009302:	4604      	mov	r4, r0
 8009304:	bfba      	itte	lt
 8009306:	4249      	neglt	r1, r1
 8009308:	232d      	movlt	r3, #45	; 0x2d
 800930a:	232b      	movge	r3, #43	; 0x2b
 800930c:	2909      	cmp	r1, #9
 800930e:	f804 2b02 	strb.w	r2, [r4], #2
 8009312:	7043      	strb	r3, [r0, #1]
 8009314:	dd20      	ble.n	8009358 <__exponent+0x5a>
 8009316:	f10d 0307 	add.w	r3, sp, #7
 800931a:	461f      	mov	r7, r3
 800931c:	260a      	movs	r6, #10
 800931e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009322:	fb06 1115 	mls	r1, r6, r5, r1
 8009326:	3130      	adds	r1, #48	; 0x30
 8009328:	2d09      	cmp	r5, #9
 800932a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800932e:	f103 32ff 	add.w	r2, r3, #4294967295
 8009332:	4629      	mov	r1, r5
 8009334:	dc09      	bgt.n	800934a <__exponent+0x4c>
 8009336:	3130      	adds	r1, #48	; 0x30
 8009338:	3b02      	subs	r3, #2
 800933a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800933e:	42bb      	cmp	r3, r7
 8009340:	4622      	mov	r2, r4
 8009342:	d304      	bcc.n	800934e <__exponent+0x50>
 8009344:	1a10      	subs	r0, r2, r0
 8009346:	b003      	add	sp, #12
 8009348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800934a:	4613      	mov	r3, r2
 800934c:	e7e7      	b.n	800931e <__exponent+0x20>
 800934e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009352:	f804 2b01 	strb.w	r2, [r4], #1
 8009356:	e7f2      	b.n	800933e <__exponent+0x40>
 8009358:	2330      	movs	r3, #48	; 0x30
 800935a:	4419      	add	r1, r3
 800935c:	7083      	strb	r3, [r0, #2]
 800935e:	1d02      	adds	r2, r0, #4
 8009360:	70c1      	strb	r1, [r0, #3]
 8009362:	e7ef      	b.n	8009344 <__exponent+0x46>

08009364 <_printf_float>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	b08d      	sub	sp, #52	; 0x34
 800936a:	460c      	mov	r4, r1
 800936c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009370:	4616      	mov	r6, r2
 8009372:	461f      	mov	r7, r3
 8009374:	4605      	mov	r5, r0
 8009376:	f001 fa33 	bl	800a7e0 <_localeconv_r>
 800937a:	6803      	ldr	r3, [r0, #0]
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	4618      	mov	r0, r3
 8009380:	f7f6 ff26 	bl	80001d0 <strlen>
 8009384:	2300      	movs	r3, #0
 8009386:	930a      	str	r3, [sp, #40]	; 0x28
 8009388:	f8d8 3000 	ldr.w	r3, [r8]
 800938c:	9005      	str	r0, [sp, #20]
 800938e:	3307      	adds	r3, #7
 8009390:	f023 0307 	bic.w	r3, r3, #7
 8009394:	f103 0208 	add.w	r2, r3, #8
 8009398:	f894 a018 	ldrb.w	sl, [r4, #24]
 800939c:	f8d4 b000 	ldr.w	fp, [r4]
 80093a0:	f8c8 2000 	str.w	r2, [r8]
 80093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093ac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093b4:	9307      	str	r3, [sp, #28]
 80093b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80093ba:	f04f 32ff 	mov.w	r2, #4294967295
 80093be:	4ba7      	ldr	r3, [pc, #668]	; (800965c <_printf_float+0x2f8>)
 80093c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093c4:	f7f7 fbb2 	bl	8000b2c <__aeabi_dcmpun>
 80093c8:	bb70      	cbnz	r0, 8009428 <_printf_float+0xc4>
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295
 80093ce:	4ba3      	ldr	r3, [pc, #652]	; (800965c <_printf_float+0x2f8>)
 80093d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093d4:	f7f7 fb8c 	bl	8000af0 <__aeabi_dcmple>
 80093d8:	bb30      	cbnz	r0, 8009428 <_printf_float+0xc4>
 80093da:	2200      	movs	r2, #0
 80093dc:	2300      	movs	r3, #0
 80093de:	4640      	mov	r0, r8
 80093e0:	4649      	mov	r1, r9
 80093e2:	f7f7 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80093e6:	b110      	cbz	r0, 80093ee <_printf_float+0x8a>
 80093e8:	232d      	movs	r3, #45	; 0x2d
 80093ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ee:	4a9c      	ldr	r2, [pc, #624]	; (8009660 <_printf_float+0x2fc>)
 80093f0:	4b9c      	ldr	r3, [pc, #624]	; (8009664 <_printf_float+0x300>)
 80093f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80093f6:	bf8c      	ite	hi
 80093f8:	4690      	movhi	r8, r2
 80093fa:	4698      	movls	r8, r3
 80093fc:	2303      	movs	r3, #3
 80093fe:	f02b 0204 	bic.w	r2, fp, #4
 8009402:	6123      	str	r3, [r4, #16]
 8009404:	6022      	str	r2, [r4, #0]
 8009406:	f04f 0900 	mov.w	r9, #0
 800940a:	9700      	str	r7, [sp, #0]
 800940c:	4633      	mov	r3, r6
 800940e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009410:	4621      	mov	r1, r4
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f9e6 	bl	80097e4 <_printf_common>
 8009418:	3001      	adds	r0, #1
 800941a:	f040 808d 	bne.w	8009538 <_printf_float+0x1d4>
 800941e:	f04f 30ff 	mov.w	r0, #4294967295
 8009422:	b00d      	add	sp, #52	; 0x34
 8009424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009428:	4642      	mov	r2, r8
 800942a:	464b      	mov	r3, r9
 800942c:	4640      	mov	r0, r8
 800942e:	4649      	mov	r1, r9
 8009430:	f7f7 fb7c 	bl	8000b2c <__aeabi_dcmpun>
 8009434:	b110      	cbz	r0, 800943c <_printf_float+0xd8>
 8009436:	4a8c      	ldr	r2, [pc, #560]	; (8009668 <_printf_float+0x304>)
 8009438:	4b8c      	ldr	r3, [pc, #560]	; (800966c <_printf_float+0x308>)
 800943a:	e7da      	b.n	80093f2 <_printf_float+0x8e>
 800943c:	6861      	ldr	r1, [r4, #4]
 800943e:	1c4b      	adds	r3, r1, #1
 8009440:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009444:	a80a      	add	r0, sp, #40	; 0x28
 8009446:	d13e      	bne.n	80094c6 <_printf_float+0x162>
 8009448:	2306      	movs	r3, #6
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	2300      	movs	r3, #0
 800944e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009452:	ab09      	add	r3, sp, #36	; 0x24
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	ec49 8b10 	vmov	d0, r8, r9
 800945a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800945e:	6022      	str	r2, [r4, #0]
 8009460:	f8cd a004 	str.w	sl, [sp, #4]
 8009464:	6861      	ldr	r1, [r4, #4]
 8009466:	4628      	mov	r0, r5
 8009468:	f7ff fee8 	bl	800923c <__cvt>
 800946c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009470:	2b47      	cmp	r3, #71	; 0x47
 8009472:	4680      	mov	r8, r0
 8009474:	d109      	bne.n	800948a <_printf_float+0x126>
 8009476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009478:	1cd8      	adds	r0, r3, #3
 800947a:	db02      	blt.n	8009482 <_printf_float+0x11e>
 800947c:	6862      	ldr	r2, [r4, #4]
 800947e:	4293      	cmp	r3, r2
 8009480:	dd47      	ble.n	8009512 <_printf_float+0x1ae>
 8009482:	f1aa 0a02 	sub.w	sl, sl, #2
 8009486:	fa5f fa8a 	uxtb.w	sl, sl
 800948a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800948e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009490:	d824      	bhi.n	80094dc <_printf_float+0x178>
 8009492:	3901      	subs	r1, #1
 8009494:	4652      	mov	r2, sl
 8009496:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800949a:	9109      	str	r1, [sp, #36]	; 0x24
 800949c:	f7ff ff2f 	bl	80092fe <__exponent>
 80094a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094a2:	1813      	adds	r3, r2, r0
 80094a4:	2a01      	cmp	r2, #1
 80094a6:	4681      	mov	r9, r0
 80094a8:	6123      	str	r3, [r4, #16]
 80094aa:	dc02      	bgt.n	80094b2 <_printf_float+0x14e>
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	07d1      	lsls	r1, r2, #31
 80094b0:	d501      	bpl.n	80094b6 <_printf_float+0x152>
 80094b2:	3301      	adds	r3, #1
 80094b4:	6123      	str	r3, [r4, #16]
 80094b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0a5      	beq.n	800940a <_printf_float+0xa6>
 80094be:	232d      	movs	r3, #45	; 0x2d
 80094c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c4:	e7a1      	b.n	800940a <_printf_float+0xa6>
 80094c6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80094ca:	f000 8177 	beq.w	80097bc <_printf_float+0x458>
 80094ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80094d2:	d1bb      	bne.n	800944c <_printf_float+0xe8>
 80094d4:	2900      	cmp	r1, #0
 80094d6:	d1b9      	bne.n	800944c <_printf_float+0xe8>
 80094d8:	2301      	movs	r3, #1
 80094da:	e7b6      	b.n	800944a <_printf_float+0xe6>
 80094dc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80094e0:	d119      	bne.n	8009516 <_printf_float+0x1b2>
 80094e2:	2900      	cmp	r1, #0
 80094e4:	6863      	ldr	r3, [r4, #4]
 80094e6:	dd0c      	ble.n	8009502 <_printf_float+0x19e>
 80094e8:	6121      	str	r1, [r4, #16]
 80094ea:	b913      	cbnz	r3, 80094f2 <_printf_float+0x18e>
 80094ec:	6822      	ldr	r2, [r4, #0]
 80094ee:	07d2      	lsls	r2, r2, #31
 80094f0:	d502      	bpl.n	80094f8 <_printf_float+0x194>
 80094f2:	3301      	adds	r3, #1
 80094f4:	440b      	add	r3, r1
 80094f6:	6123      	str	r3, [r4, #16]
 80094f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80094fc:	f04f 0900 	mov.w	r9, #0
 8009500:	e7d9      	b.n	80094b6 <_printf_float+0x152>
 8009502:	b913      	cbnz	r3, 800950a <_printf_float+0x1a6>
 8009504:	6822      	ldr	r2, [r4, #0]
 8009506:	07d0      	lsls	r0, r2, #31
 8009508:	d501      	bpl.n	800950e <_printf_float+0x1aa>
 800950a:	3302      	adds	r3, #2
 800950c:	e7f3      	b.n	80094f6 <_printf_float+0x192>
 800950e:	2301      	movs	r3, #1
 8009510:	e7f1      	b.n	80094f6 <_printf_float+0x192>
 8009512:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009516:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800951a:	4293      	cmp	r3, r2
 800951c:	db05      	blt.n	800952a <_printf_float+0x1c6>
 800951e:	6822      	ldr	r2, [r4, #0]
 8009520:	6123      	str	r3, [r4, #16]
 8009522:	07d1      	lsls	r1, r2, #31
 8009524:	d5e8      	bpl.n	80094f8 <_printf_float+0x194>
 8009526:	3301      	adds	r3, #1
 8009528:	e7e5      	b.n	80094f6 <_printf_float+0x192>
 800952a:	2b00      	cmp	r3, #0
 800952c:	bfd4      	ite	le
 800952e:	f1c3 0302 	rsble	r3, r3, #2
 8009532:	2301      	movgt	r3, #1
 8009534:	4413      	add	r3, r2
 8009536:	e7de      	b.n	80094f6 <_printf_float+0x192>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	055a      	lsls	r2, r3, #21
 800953c:	d407      	bmi.n	800954e <_printf_float+0x1ea>
 800953e:	6923      	ldr	r3, [r4, #16]
 8009540:	4642      	mov	r2, r8
 8009542:	4631      	mov	r1, r6
 8009544:	4628      	mov	r0, r5
 8009546:	47b8      	blx	r7
 8009548:	3001      	adds	r0, #1
 800954a:	d12b      	bne.n	80095a4 <_printf_float+0x240>
 800954c:	e767      	b.n	800941e <_printf_float+0xba>
 800954e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009552:	f240 80dc 	bls.w	800970e <_printf_float+0x3aa>
 8009556:	2200      	movs	r2, #0
 8009558:	2300      	movs	r3, #0
 800955a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800955e:	f7f7 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009562:	2800      	cmp	r0, #0
 8009564:	d033      	beq.n	80095ce <_printf_float+0x26a>
 8009566:	2301      	movs	r3, #1
 8009568:	4a41      	ldr	r2, [pc, #260]	; (8009670 <_printf_float+0x30c>)
 800956a:	4631      	mov	r1, r6
 800956c:	4628      	mov	r0, r5
 800956e:	47b8      	blx	r7
 8009570:	3001      	adds	r0, #1
 8009572:	f43f af54 	beq.w	800941e <_printf_float+0xba>
 8009576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800957a:	429a      	cmp	r2, r3
 800957c:	db02      	blt.n	8009584 <_printf_float+0x220>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	07d8      	lsls	r0, r3, #31
 8009582:	d50f      	bpl.n	80095a4 <_printf_float+0x240>
 8009584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009588:	4631      	mov	r1, r6
 800958a:	4628      	mov	r0, r5
 800958c:	47b8      	blx	r7
 800958e:	3001      	adds	r0, #1
 8009590:	f43f af45 	beq.w	800941e <_printf_float+0xba>
 8009594:	f04f 0800 	mov.w	r8, #0
 8009598:	f104 091a 	add.w	r9, r4, #26
 800959c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959e:	3b01      	subs	r3, #1
 80095a0:	4543      	cmp	r3, r8
 80095a2:	dc09      	bgt.n	80095b8 <_printf_float+0x254>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	079b      	lsls	r3, r3, #30
 80095a8:	f100 8103 	bmi.w	80097b2 <_printf_float+0x44e>
 80095ac:	68e0      	ldr	r0, [r4, #12]
 80095ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b0:	4298      	cmp	r0, r3
 80095b2:	bfb8      	it	lt
 80095b4:	4618      	movlt	r0, r3
 80095b6:	e734      	b.n	8009422 <_printf_float+0xbe>
 80095b8:	2301      	movs	r3, #1
 80095ba:	464a      	mov	r2, r9
 80095bc:	4631      	mov	r1, r6
 80095be:	4628      	mov	r0, r5
 80095c0:	47b8      	blx	r7
 80095c2:	3001      	adds	r0, #1
 80095c4:	f43f af2b 	beq.w	800941e <_printf_float+0xba>
 80095c8:	f108 0801 	add.w	r8, r8, #1
 80095cc:	e7e6      	b.n	800959c <_printf_float+0x238>
 80095ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dc2b      	bgt.n	800962c <_printf_float+0x2c8>
 80095d4:	2301      	movs	r3, #1
 80095d6:	4a26      	ldr	r2, [pc, #152]	; (8009670 <_printf_float+0x30c>)
 80095d8:	4631      	mov	r1, r6
 80095da:	4628      	mov	r0, r5
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	f43f af1d 	beq.w	800941e <_printf_float+0xba>
 80095e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e6:	b923      	cbnz	r3, 80095f2 <_printf_float+0x28e>
 80095e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ea:	b913      	cbnz	r3, 80095f2 <_printf_float+0x28e>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	07d9      	lsls	r1, r3, #31
 80095f0:	d5d8      	bpl.n	80095a4 <_printf_float+0x240>
 80095f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095f6:	4631      	mov	r1, r6
 80095f8:	4628      	mov	r0, r5
 80095fa:	47b8      	blx	r7
 80095fc:	3001      	adds	r0, #1
 80095fe:	f43f af0e 	beq.w	800941e <_printf_float+0xba>
 8009602:	f04f 0900 	mov.w	r9, #0
 8009606:	f104 0a1a 	add.w	sl, r4, #26
 800960a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960c:	425b      	negs	r3, r3
 800960e:	454b      	cmp	r3, r9
 8009610:	dc01      	bgt.n	8009616 <_printf_float+0x2b2>
 8009612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009614:	e794      	b.n	8009540 <_printf_float+0x1dc>
 8009616:	2301      	movs	r3, #1
 8009618:	4652      	mov	r2, sl
 800961a:	4631      	mov	r1, r6
 800961c:	4628      	mov	r0, r5
 800961e:	47b8      	blx	r7
 8009620:	3001      	adds	r0, #1
 8009622:	f43f aefc 	beq.w	800941e <_printf_float+0xba>
 8009626:	f109 0901 	add.w	r9, r9, #1
 800962a:	e7ee      	b.n	800960a <_printf_float+0x2a6>
 800962c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800962e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009630:	429a      	cmp	r2, r3
 8009632:	bfa8      	it	ge
 8009634:	461a      	movge	r2, r3
 8009636:	2a00      	cmp	r2, #0
 8009638:	4691      	mov	r9, r2
 800963a:	dd07      	ble.n	800964c <_printf_float+0x2e8>
 800963c:	4613      	mov	r3, r2
 800963e:	4631      	mov	r1, r6
 8009640:	4642      	mov	r2, r8
 8009642:	4628      	mov	r0, r5
 8009644:	47b8      	blx	r7
 8009646:	3001      	adds	r0, #1
 8009648:	f43f aee9 	beq.w	800941e <_printf_float+0xba>
 800964c:	f104 031a 	add.w	r3, r4, #26
 8009650:	f04f 0b00 	mov.w	fp, #0
 8009654:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009658:	9306      	str	r3, [sp, #24]
 800965a:	e015      	b.n	8009688 <_printf_float+0x324>
 800965c:	7fefffff 	.word	0x7fefffff
 8009660:	0800b1ec 	.word	0x0800b1ec
 8009664:	0800b1e8 	.word	0x0800b1e8
 8009668:	0800b1f4 	.word	0x0800b1f4
 800966c:	0800b1f0 	.word	0x0800b1f0
 8009670:	0800b1f8 	.word	0x0800b1f8
 8009674:	2301      	movs	r3, #1
 8009676:	9a06      	ldr	r2, [sp, #24]
 8009678:	4631      	mov	r1, r6
 800967a:	4628      	mov	r0, r5
 800967c:	47b8      	blx	r7
 800967e:	3001      	adds	r0, #1
 8009680:	f43f aecd 	beq.w	800941e <_printf_float+0xba>
 8009684:	f10b 0b01 	add.w	fp, fp, #1
 8009688:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800968c:	ebaa 0309 	sub.w	r3, sl, r9
 8009690:	455b      	cmp	r3, fp
 8009692:	dcef      	bgt.n	8009674 <_printf_float+0x310>
 8009694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009698:	429a      	cmp	r2, r3
 800969a:	44d0      	add	r8, sl
 800969c:	db15      	blt.n	80096ca <_printf_float+0x366>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	07da      	lsls	r2, r3, #31
 80096a2:	d412      	bmi.n	80096ca <_printf_float+0x366>
 80096a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096a8:	eba3 020a 	sub.w	r2, r3, sl
 80096ac:	eba3 0a01 	sub.w	sl, r3, r1
 80096b0:	4592      	cmp	sl, r2
 80096b2:	bfa8      	it	ge
 80096b4:	4692      	movge	sl, r2
 80096b6:	f1ba 0f00 	cmp.w	sl, #0
 80096ba:	dc0e      	bgt.n	80096da <_printf_float+0x376>
 80096bc:	f04f 0800 	mov.w	r8, #0
 80096c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096c4:	f104 091a 	add.w	r9, r4, #26
 80096c8:	e019      	b.n	80096fe <_printf_float+0x39a>
 80096ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	d1e5      	bne.n	80096a4 <_printf_float+0x340>
 80096d8:	e6a1      	b.n	800941e <_printf_float+0xba>
 80096da:	4653      	mov	r3, sl
 80096dc:	4642      	mov	r2, r8
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	d1e9      	bne.n	80096bc <_printf_float+0x358>
 80096e8:	e699      	b.n	800941e <_printf_float+0xba>
 80096ea:	2301      	movs	r3, #1
 80096ec:	464a      	mov	r2, r9
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	47b8      	blx	r7
 80096f4:	3001      	adds	r0, #1
 80096f6:	f43f ae92 	beq.w	800941e <_printf_float+0xba>
 80096fa:	f108 0801 	add.w	r8, r8, #1
 80096fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	eba3 030a 	sub.w	r3, r3, sl
 8009708:	4543      	cmp	r3, r8
 800970a:	dcee      	bgt.n	80096ea <_printf_float+0x386>
 800970c:	e74a      	b.n	80095a4 <_printf_float+0x240>
 800970e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009710:	2a01      	cmp	r2, #1
 8009712:	dc01      	bgt.n	8009718 <_printf_float+0x3b4>
 8009714:	07db      	lsls	r3, r3, #31
 8009716:	d53a      	bpl.n	800978e <_printf_float+0x42a>
 8009718:	2301      	movs	r3, #1
 800971a:	4642      	mov	r2, r8
 800971c:	4631      	mov	r1, r6
 800971e:	4628      	mov	r0, r5
 8009720:	47b8      	blx	r7
 8009722:	3001      	adds	r0, #1
 8009724:	f43f ae7b 	beq.w	800941e <_printf_float+0xba>
 8009728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800972c:	4631      	mov	r1, r6
 800972e:	4628      	mov	r0, r5
 8009730:	47b8      	blx	r7
 8009732:	3001      	adds	r0, #1
 8009734:	f108 0801 	add.w	r8, r8, #1
 8009738:	f43f ae71 	beq.w	800941e <_printf_float+0xba>
 800973c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973e:	2200      	movs	r2, #0
 8009740:	f103 3aff 	add.w	sl, r3, #4294967295
 8009744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009748:	2300      	movs	r3, #0
 800974a:	f7f7 f9bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800974e:	b9c8      	cbnz	r0, 8009784 <_printf_float+0x420>
 8009750:	4653      	mov	r3, sl
 8009752:	4642      	mov	r2, r8
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	d10e      	bne.n	800977c <_printf_float+0x418>
 800975e:	e65e      	b.n	800941e <_printf_float+0xba>
 8009760:	2301      	movs	r3, #1
 8009762:	4652      	mov	r2, sl
 8009764:	4631      	mov	r1, r6
 8009766:	4628      	mov	r0, r5
 8009768:	47b8      	blx	r7
 800976a:	3001      	adds	r0, #1
 800976c:	f43f ae57 	beq.w	800941e <_printf_float+0xba>
 8009770:	f108 0801 	add.w	r8, r8, #1
 8009774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009776:	3b01      	subs	r3, #1
 8009778:	4543      	cmp	r3, r8
 800977a:	dcf1      	bgt.n	8009760 <_printf_float+0x3fc>
 800977c:	464b      	mov	r3, r9
 800977e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009782:	e6de      	b.n	8009542 <_printf_float+0x1de>
 8009784:	f04f 0800 	mov.w	r8, #0
 8009788:	f104 0a1a 	add.w	sl, r4, #26
 800978c:	e7f2      	b.n	8009774 <_printf_float+0x410>
 800978e:	2301      	movs	r3, #1
 8009790:	e7df      	b.n	8009752 <_printf_float+0x3ee>
 8009792:	2301      	movs	r3, #1
 8009794:	464a      	mov	r2, r9
 8009796:	4631      	mov	r1, r6
 8009798:	4628      	mov	r0, r5
 800979a:	47b8      	blx	r7
 800979c:	3001      	adds	r0, #1
 800979e:	f43f ae3e 	beq.w	800941e <_printf_float+0xba>
 80097a2:	f108 0801 	add.w	r8, r8, #1
 80097a6:	68e3      	ldr	r3, [r4, #12]
 80097a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097aa:	1a9b      	subs	r3, r3, r2
 80097ac:	4543      	cmp	r3, r8
 80097ae:	dcf0      	bgt.n	8009792 <_printf_float+0x42e>
 80097b0:	e6fc      	b.n	80095ac <_printf_float+0x248>
 80097b2:	f04f 0800 	mov.w	r8, #0
 80097b6:	f104 0919 	add.w	r9, r4, #25
 80097ba:	e7f4      	b.n	80097a6 <_printf_float+0x442>
 80097bc:	2900      	cmp	r1, #0
 80097be:	f43f ae8b 	beq.w	80094d8 <_printf_float+0x174>
 80097c2:	2300      	movs	r3, #0
 80097c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80097c8:	ab09      	add	r3, sp, #36	; 0x24
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	ec49 8b10 	vmov	d0, r8, r9
 80097d0:	6022      	str	r2, [r4, #0]
 80097d2:	f8cd a004 	str.w	sl, [sp, #4]
 80097d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097da:	4628      	mov	r0, r5
 80097dc:	f7ff fd2e 	bl	800923c <__cvt>
 80097e0:	4680      	mov	r8, r0
 80097e2:	e648      	b.n	8009476 <_printf_float+0x112>

080097e4 <_printf_common>:
 80097e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e8:	4691      	mov	r9, r2
 80097ea:	461f      	mov	r7, r3
 80097ec:	688a      	ldr	r2, [r1, #8]
 80097ee:	690b      	ldr	r3, [r1, #16]
 80097f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097f4:	4293      	cmp	r3, r2
 80097f6:	bfb8      	it	lt
 80097f8:	4613      	movlt	r3, r2
 80097fa:	f8c9 3000 	str.w	r3, [r9]
 80097fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009802:	4606      	mov	r6, r0
 8009804:	460c      	mov	r4, r1
 8009806:	b112      	cbz	r2, 800980e <_printf_common+0x2a>
 8009808:	3301      	adds	r3, #1
 800980a:	f8c9 3000 	str.w	r3, [r9]
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	0699      	lsls	r1, r3, #26
 8009812:	bf42      	ittt	mi
 8009814:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009818:	3302      	addmi	r3, #2
 800981a:	f8c9 3000 	strmi.w	r3, [r9]
 800981e:	6825      	ldr	r5, [r4, #0]
 8009820:	f015 0506 	ands.w	r5, r5, #6
 8009824:	d107      	bne.n	8009836 <_printf_common+0x52>
 8009826:	f104 0a19 	add.w	sl, r4, #25
 800982a:	68e3      	ldr	r3, [r4, #12]
 800982c:	f8d9 2000 	ldr.w	r2, [r9]
 8009830:	1a9b      	subs	r3, r3, r2
 8009832:	42ab      	cmp	r3, r5
 8009834:	dc28      	bgt.n	8009888 <_printf_common+0xa4>
 8009836:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800983a:	6822      	ldr	r2, [r4, #0]
 800983c:	3300      	adds	r3, #0
 800983e:	bf18      	it	ne
 8009840:	2301      	movne	r3, #1
 8009842:	0692      	lsls	r2, r2, #26
 8009844:	d42d      	bmi.n	80098a2 <_printf_common+0xbe>
 8009846:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800984a:	4639      	mov	r1, r7
 800984c:	4630      	mov	r0, r6
 800984e:	47c0      	blx	r8
 8009850:	3001      	adds	r0, #1
 8009852:	d020      	beq.n	8009896 <_printf_common+0xb2>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	68e5      	ldr	r5, [r4, #12]
 8009858:	f8d9 2000 	ldr.w	r2, [r9]
 800985c:	f003 0306 	and.w	r3, r3, #6
 8009860:	2b04      	cmp	r3, #4
 8009862:	bf08      	it	eq
 8009864:	1aad      	subeq	r5, r5, r2
 8009866:	68a3      	ldr	r3, [r4, #8]
 8009868:	6922      	ldr	r2, [r4, #16]
 800986a:	bf0c      	ite	eq
 800986c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009870:	2500      	movne	r5, #0
 8009872:	4293      	cmp	r3, r2
 8009874:	bfc4      	itt	gt
 8009876:	1a9b      	subgt	r3, r3, r2
 8009878:	18ed      	addgt	r5, r5, r3
 800987a:	f04f 0900 	mov.w	r9, #0
 800987e:	341a      	adds	r4, #26
 8009880:	454d      	cmp	r5, r9
 8009882:	d11a      	bne.n	80098ba <_printf_common+0xd6>
 8009884:	2000      	movs	r0, #0
 8009886:	e008      	b.n	800989a <_printf_common+0xb6>
 8009888:	2301      	movs	r3, #1
 800988a:	4652      	mov	r2, sl
 800988c:	4639      	mov	r1, r7
 800988e:	4630      	mov	r0, r6
 8009890:	47c0      	blx	r8
 8009892:	3001      	adds	r0, #1
 8009894:	d103      	bne.n	800989e <_printf_common+0xba>
 8009896:	f04f 30ff 	mov.w	r0, #4294967295
 800989a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989e:	3501      	adds	r5, #1
 80098a0:	e7c3      	b.n	800982a <_printf_common+0x46>
 80098a2:	18e1      	adds	r1, r4, r3
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	2030      	movs	r0, #48	; 0x30
 80098a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098ac:	4422      	add	r2, r4
 80098ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098b6:	3302      	adds	r3, #2
 80098b8:	e7c5      	b.n	8009846 <_printf_common+0x62>
 80098ba:	2301      	movs	r3, #1
 80098bc:	4622      	mov	r2, r4
 80098be:	4639      	mov	r1, r7
 80098c0:	4630      	mov	r0, r6
 80098c2:	47c0      	blx	r8
 80098c4:	3001      	adds	r0, #1
 80098c6:	d0e6      	beq.n	8009896 <_printf_common+0xb2>
 80098c8:	f109 0901 	add.w	r9, r9, #1
 80098cc:	e7d8      	b.n	8009880 <_printf_common+0x9c>
	...

080098d0 <_printf_i>:
 80098d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80098d8:	460c      	mov	r4, r1
 80098da:	7e09      	ldrb	r1, [r1, #24]
 80098dc:	b085      	sub	sp, #20
 80098de:	296e      	cmp	r1, #110	; 0x6e
 80098e0:	4617      	mov	r7, r2
 80098e2:	4606      	mov	r6, r0
 80098e4:	4698      	mov	r8, r3
 80098e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098e8:	f000 80b3 	beq.w	8009a52 <_printf_i+0x182>
 80098ec:	d822      	bhi.n	8009934 <_printf_i+0x64>
 80098ee:	2963      	cmp	r1, #99	; 0x63
 80098f0:	d036      	beq.n	8009960 <_printf_i+0x90>
 80098f2:	d80a      	bhi.n	800990a <_printf_i+0x3a>
 80098f4:	2900      	cmp	r1, #0
 80098f6:	f000 80b9 	beq.w	8009a6c <_printf_i+0x19c>
 80098fa:	2958      	cmp	r1, #88	; 0x58
 80098fc:	f000 8083 	beq.w	8009a06 <_printf_i+0x136>
 8009900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009904:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009908:	e032      	b.n	8009970 <_printf_i+0xa0>
 800990a:	2964      	cmp	r1, #100	; 0x64
 800990c:	d001      	beq.n	8009912 <_printf_i+0x42>
 800990e:	2969      	cmp	r1, #105	; 0x69
 8009910:	d1f6      	bne.n	8009900 <_printf_i+0x30>
 8009912:	6820      	ldr	r0, [r4, #0]
 8009914:	6813      	ldr	r3, [r2, #0]
 8009916:	0605      	lsls	r5, r0, #24
 8009918:	f103 0104 	add.w	r1, r3, #4
 800991c:	d52a      	bpl.n	8009974 <_printf_i+0xa4>
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6011      	str	r1, [r2, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	da03      	bge.n	800992e <_printf_i+0x5e>
 8009926:	222d      	movs	r2, #45	; 0x2d
 8009928:	425b      	negs	r3, r3
 800992a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800992e:	486f      	ldr	r0, [pc, #444]	; (8009aec <_printf_i+0x21c>)
 8009930:	220a      	movs	r2, #10
 8009932:	e039      	b.n	80099a8 <_printf_i+0xd8>
 8009934:	2973      	cmp	r1, #115	; 0x73
 8009936:	f000 809d 	beq.w	8009a74 <_printf_i+0x1a4>
 800993a:	d808      	bhi.n	800994e <_printf_i+0x7e>
 800993c:	296f      	cmp	r1, #111	; 0x6f
 800993e:	d020      	beq.n	8009982 <_printf_i+0xb2>
 8009940:	2970      	cmp	r1, #112	; 0x70
 8009942:	d1dd      	bne.n	8009900 <_printf_i+0x30>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	f043 0320 	orr.w	r3, r3, #32
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	e003      	b.n	8009956 <_printf_i+0x86>
 800994e:	2975      	cmp	r1, #117	; 0x75
 8009950:	d017      	beq.n	8009982 <_printf_i+0xb2>
 8009952:	2978      	cmp	r1, #120	; 0x78
 8009954:	d1d4      	bne.n	8009900 <_printf_i+0x30>
 8009956:	2378      	movs	r3, #120	; 0x78
 8009958:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800995c:	4864      	ldr	r0, [pc, #400]	; (8009af0 <_printf_i+0x220>)
 800995e:	e055      	b.n	8009a0c <_printf_i+0x13c>
 8009960:	6813      	ldr	r3, [r2, #0]
 8009962:	1d19      	adds	r1, r3, #4
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6011      	str	r1, [r2, #0]
 8009968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800996c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009970:	2301      	movs	r3, #1
 8009972:	e08c      	b.n	8009a8e <_printf_i+0x1be>
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6011      	str	r1, [r2, #0]
 8009978:	f010 0f40 	tst.w	r0, #64	; 0x40
 800997c:	bf18      	it	ne
 800997e:	b21b      	sxthne	r3, r3
 8009980:	e7cf      	b.n	8009922 <_printf_i+0x52>
 8009982:	6813      	ldr	r3, [r2, #0]
 8009984:	6825      	ldr	r5, [r4, #0]
 8009986:	1d18      	adds	r0, r3, #4
 8009988:	6010      	str	r0, [r2, #0]
 800998a:	0628      	lsls	r0, r5, #24
 800998c:	d501      	bpl.n	8009992 <_printf_i+0xc2>
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	e002      	b.n	8009998 <_printf_i+0xc8>
 8009992:	0668      	lsls	r0, r5, #25
 8009994:	d5fb      	bpl.n	800998e <_printf_i+0xbe>
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	4854      	ldr	r0, [pc, #336]	; (8009aec <_printf_i+0x21c>)
 800999a:	296f      	cmp	r1, #111	; 0x6f
 800999c:	bf14      	ite	ne
 800999e:	220a      	movne	r2, #10
 80099a0:	2208      	moveq	r2, #8
 80099a2:	2100      	movs	r1, #0
 80099a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099a8:	6865      	ldr	r5, [r4, #4]
 80099aa:	60a5      	str	r5, [r4, #8]
 80099ac:	2d00      	cmp	r5, #0
 80099ae:	f2c0 8095 	blt.w	8009adc <_printf_i+0x20c>
 80099b2:	6821      	ldr	r1, [r4, #0]
 80099b4:	f021 0104 	bic.w	r1, r1, #4
 80099b8:	6021      	str	r1, [r4, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d13d      	bne.n	8009a3a <_printf_i+0x16a>
 80099be:	2d00      	cmp	r5, #0
 80099c0:	f040 808e 	bne.w	8009ae0 <_printf_i+0x210>
 80099c4:	4665      	mov	r5, ip
 80099c6:	2a08      	cmp	r2, #8
 80099c8:	d10b      	bne.n	80099e2 <_printf_i+0x112>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	07db      	lsls	r3, r3, #31
 80099ce:	d508      	bpl.n	80099e2 <_printf_i+0x112>
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	6862      	ldr	r2, [r4, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	bfde      	ittt	le
 80099d8:	2330      	movle	r3, #48	; 0x30
 80099da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099e2:	ebac 0305 	sub.w	r3, ip, r5
 80099e6:	6123      	str	r3, [r4, #16]
 80099e8:	f8cd 8000 	str.w	r8, [sp]
 80099ec:	463b      	mov	r3, r7
 80099ee:	aa03      	add	r2, sp, #12
 80099f0:	4621      	mov	r1, r4
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7ff fef6 	bl	80097e4 <_printf_common>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d14d      	bne.n	8009a98 <_printf_i+0x1c8>
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009a00:	b005      	add	sp, #20
 8009a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a06:	4839      	ldr	r0, [pc, #228]	; (8009aec <_printf_i+0x21c>)
 8009a08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009a0c:	6813      	ldr	r3, [r2, #0]
 8009a0e:	6821      	ldr	r1, [r4, #0]
 8009a10:	1d1d      	adds	r5, r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6015      	str	r5, [r2, #0]
 8009a16:	060a      	lsls	r2, r1, #24
 8009a18:	d50b      	bpl.n	8009a32 <_printf_i+0x162>
 8009a1a:	07ca      	lsls	r2, r1, #31
 8009a1c:	bf44      	itt	mi
 8009a1e:	f041 0120 	orrmi.w	r1, r1, #32
 8009a22:	6021      	strmi	r1, [r4, #0]
 8009a24:	b91b      	cbnz	r3, 8009a2e <_printf_i+0x15e>
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	f022 0220 	bic.w	r2, r2, #32
 8009a2c:	6022      	str	r2, [r4, #0]
 8009a2e:	2210      	movs	r2, #16
 8009a30:	e7b7      	b.n	80099a2 <_printf_i+0xd2>
 8009a32:	064d      	lsls	r5, r1, #25
 8009a34:	bf48      	it	mi
 8009a36:	b29b      	uxthmi	r3, r3
 8009a38:	e7ef      	b.n	8009a1a <_printf_i+0x14a>
 8009a3a:	4665      	mov	r5, ip
 8009a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a40:	fb02 3311 	mls	r3, r2, r1, r3
 8009a44:	5cc3      	ldrb	r3, [r0, r3]
 8009a46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	d1f5      	bne.n	8009a3c <_printf_i+0x16c>
 8009a50:	e7b9      	b.n	80099c6 <_printf_i+0xf6>
 8009a52:	6813      	ldr	r3, [r2, #0]
 8009a54:	6825      	ldr	r5, [r4, #0]
 8009a56:	6961      	ldr	r1, [r4, #20]
 8009a58:	1d18      	adds	r0, r3, #4
 8009a5a:	6010      	str	r0, [r2, #0]
 8009a5c:	0628      	lsls	r0, r5, #24
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	d501      	bpl.n	8009a66 <_printf_i+0x196>
 8009a62:	6019      	str	r1, [r3, #0]
 8009a64:	e002      	b.n	8009a6c <_printf_i+0x19c>
 8009a66:	066a      	lsls	r2, r5, #25
 8009a68:	d5fb      	bpl.n	8009a62 <_printf_i+0x192>
 8009a6a:	8019      	strh	r1, [r3, #0]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6123      	str	r3, [r4, #16]
 8009a70:	4665      	mov	r5, ip
 8009a72:	e7b9      	b.n	80099e8 <_printf_i+0x118>
 8009a74:	6813      	ldr	r3, [r2, #0]
 8009a76:	1d19      	adds	r1, r3, #4
 8009a78:	6011      	str	r1, [r2, #0]
 8009a7a:	681d      	ldr	r5, [r3, #0]
 8009a7c:	6862      	ldr	r2, [r4, #4]
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4628      	mov	r0, r5
 8009a82:	f7f6 fbad 	bl	80001e0 <memchr>
 8009a86:	b108      	cbz	r0, 8009a8c <_printf_i+0x1bc>
 8009a88:	1b40      	subs	r0, r0, r5
 8009a8a:	6060      	str	r0, [r4, #4]
 8009a8c:	6863      	ldr	r3, [r4, #4]
 8009a8e:	6123      	str	r3, [r4, #16]
 8009a90:	2300      	movs	r3, #0
 8009a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a96:	e7a7      	b.n	80099e8 <_printf_i+0x118>
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	462a      	mov	r2, r5
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	47c0      	blx	r8
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d0aa      	beq.n	80099fc <_printf_i+0x12c>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	079b      	lsls	r3, r3, #30
 8009aaa:	d413      	bmi.n	8009ad4 <_printf_i+0x204>
 8009aac:	68e0      	ldr	r0, [r4, #12]
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	4298      	cmp	r0, r3
 8009ab2:	bfb8      	it	lt
 8009ab4:	4618      	movlt	r0, r3
 8009ab6:	e7a3      	b.n	8009a00 <_printf_i+0x130>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	464a      	mov	r2, r9
 8009abc:	4639      	mov	r1, r7
 8009abe:	4630      	mov	r0, r6
 8009ac0:	47c0      	blx	r8
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	d09a      	beq.n	80099fc <_printf_i+0x12c>
 8009ac6:	3501      	adds	r5, #1
 8009ac8:	68e3      	ldr	r3, [r4, #12]
 8009aca:	9a03      	ldr	r2, [sp, #12]
 8009acc:	1a9b      	subs	r3, r3, r2
 8009ace:	42ab      	cmp	r3, r5
 8009ad0:	dcf2      	bgt.n	8009ab8 <_printf_i+0x1e8>
 8009ad2:	e7eb      	b.n	8009aac <_printf_i+0x1dc>
 8009ad4:	2500      	movs	r5, #0
 8009ad6:	f104 0919 	add.w	r9, r4, #25
 8009ada:	e7f5      	b.n	8009ac8 <_printf_i+0x1f8>
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1ac      	bne.n	8009a3a <_printf_i+0x16a>
 8009ae0:	7803      	ldrb	r3, [r0, #0]
 8009ae2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aea:	e76c      	b.n	80099c6 <_printf_i+0xf6>
 8009aec:	0800b1fa 	.word	0x0800b1fa
 8009af0:	0800b20b 	.word	0x0800b20b

08009af4 <_sbrk_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4c06      	ldr	r4, [pc, #24]	; (8009b10 <_sbrk_r+0x1c>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4605      	mov	r5, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	f7f8 fa2e 	bl	8001f60 <_sbrk>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_sbrk_r+0x1a>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_sbrk_r+0x1a>
 8009b0c:	602b      	str	r3, [r5, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20001d7c 	.word	0x20001d7c

08009b14 <siprintf>:
 8009b14:	b40e      	push	{r1, r2, r3}
 8009b16:	b500      	push	{lr}
 8009b18:	b09c      	sub	sp, #112	; 0x70
 8009b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b1c:	9002      	str	r0, [sp, #8]
 8009b1e:	9006      	str	r0, [sp, #24]
 8009b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b24:	4809      	ldr	r0, [pc, #36]	; (8009b4c <siprintf+0x38>)
 8009b26:	9107      	str	r1, [sp, #28]
 8009b28:	9104      	str	r1, [sp, #16]
 8009b2a:	4909      	ldr	r1, [pc, #36]	; (8009b50 <siprintf+0x3c>)
 8009b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b30:	9105      	str	r1, [sp, #20]
 8009b32:	6800      	ldr	r0, [r0, #0]
 8009b34:	9301      	str	r3, [sp, #4]
 8009b36:	a902      	add	r1, sp, #8
 8009b38:	f001 f9b0 	bl	800ae9c <_svfiprintf_r>
 8009b3c:	9b02      	ldr	r3, [sp, #8]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	701a      	strb	r2, [r3, #0]
 8009b42:	b01c      	add	sp, #112	; 0x70
 8009b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b48:	b003      	add	sp, #12
 8009b4a:	4770      	bx	lr
 8009b4c:	20000188 	.word	0x20000188
 8009b50:	ffff0208 	.word	0xffff0208

08009b54 <quorem>:
 8009b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	6903      	ldr	r3, [r0, #16]
 8009b5a:	690c      	ldr	r4, [r1, #16]
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	4680      	mov	r8, r0
 8009b60:	f2c0 8082 	blt.w	8009c68 <quorem+0x114>
 8009b64:	3c01      	subs	r4, #1
 8009b66:	f101 0714 	add.w	r7, r1, #20
 8009b6a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b6e:	f100 0614 	add.w	r6, r0, #20
 8009b72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009b76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009b7a:	eb06 030c 	add.w	r3, r6, ip
 8009b7e:	3501      	adds	r5, #1
 8009b80:	eb07 090c 	add.w	r9, r7, ip
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	fbb0 f5f5 	udiv	r5, r0, r5
 8009b8a:	b395      	cbz	r5, 8009bf2 <quorem+0x9e>
 8009b8c:	f04f 0a00 	mov.w	sl, #0
 8009b90:	4638      	mov	r0, r7
 8009b92:	46b6      	mov	lr, r6
 8009b94:	46d3      	mov	fp, sl
 8009b96:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b9a:	b293      	uxth	r3, r2
 8009b9c:	fb05 a303 	mla	r3, r5, r3, sl
 8009ba0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	ebab 0303 	sub.w	r3, fp, r3
 8009baa:	0c12      	lsrs	r2, r2, #16
 8009bac:	f8de b000 	ldr.w	fp, [lr]
 8009bb0:	fb05 a202 	mla	r2, r5, r2, sl
 8009bb4:	fa13 f38b 	uxtah	r3, r3, fp
 8009bb8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009bbc:	fa1f fb82 	uxth.w	fp, r2
 8009bc0:	f8de 2000 	ldr.w	r2, [lr]
 8009bc4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009bc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd2:	4581      	cmp	r9, r0
 8009bd4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009bd8:	f84e 3b04 	str.w	r3, [lr], #4
 8009bdc:	d2db      	bcs.n	8009b96 <quorem+0x42>
 8009bde:	f856 300c 	ldr.w	r3, [r6, ip]
 8009be2:	b933      	cbnz	r3, 8009bf2 <quorem+0x9e>
 8009be4:	9b01      	ldr	r3, [sp, #4]
 8009be6:	3b04      	subs	r3, #4
 8009be8:	429e      	cmp	r6, r3
 8009bea:	461a      	mov	r2, r3
 8009bec:	d330      	bcc.n	8009c50 <quorem+0xfc>
 8009bee:	f8c8 4010 	str.w	r4, [r8, #16]
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f001 f824 	bl	800ac40 <__mcmp>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	db25      	blt.n	8009c48 <quorem+0xf4>
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f04f 0c00 	mov.w	ip, #0
 8009c04:	f857 2b04 	ldr.w	r2, [r7], #4
 8009c08:	f8d0 e000 	ldr.w	lr, [r0]
 8009c0c:	b293      	uxth	r3, r2
 8009c0e:	ebac 0303 	sub.w	r3, ip, r3
 8009c12:	0c12      	lsrs	r2, r2, #16
 8009c14:	fa13 f38e 	uxtah	r3, r3, lr
 8009c18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c26:	45b9      	cmp	r9, r7
 8009c28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c2c:	f840 3b04 	str.w	r3, [r0], #4
 8009c30:	d2e8      	bcs.n	8009c04 <quorem+0xb0>
 8009c32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009c36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009c3a:	b92a      	cbnz	r2, 8009c48 <quorem+0xf4>
 8009c3c:	3b04      	subs	r3, #4
 8009c3e:	429e      	cmp	r6, r3
 8009c40:	461a      	mov	r2, r3
 8009c42:	d30b      	bcc.n	8009c5c <quorem+0x108>
 8009c44:	f8c8 4010 	str.w	r4, [r8, #16]
 8009c48:	4628      	mov	r0, r5
 8009c4a:	b003      	add	sp, #12
 8009c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c50:	6812      	ldr	r2, [r2, #0]
 8009c52:	3b04      	subs	r3, #4
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	d1ca      	bne.n	8009bee <quorem+0x9a>
 8009c58:	3c01      	subs	r4, #1
 8009c5a:	e7c5      	b.n	8009be8 <quorem+0x94>
 8009c5c:	6812      	ldr	r2, [r2, #0]
 8009c5e:	3b04      	subs	r3, #4
 8009c60:	2a00      	cmp	r2, #0
 8009c62:	d1ef      	bne.n	8009c44 <quorem+0xf0>
 8009c64:	3c01      	subs	r4, #1
 8009c66:	e7ea      	b.n	8009c3e <quorem+0xea>
 8009c68:	2000      	movs	r0, #0
 8009c6a:	e7ee      	b.n	8009c4a <quorem+0xf6>
 8009c6c:	0000      	movs	r0, r0
	...

08009c70 <_dtoa_r>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	ec57 6b10 	vmov	r6, r7, d0
 8009c78:	b097      	sub	sp, #92	; 0x5c
 8009c7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c7c:	9106      	str	r1, [sp, #24]
 8009c7e:	4604      	mov	r4, r0
 8009c80:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c82:	9312      	str	r3, [sp, #72]	; 0x48
 8009c84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c88:	e9cd 6700 	strd	r6, r7, [sp]
 8009c8c:	b93d      	cbnz	r5, 8009c9e <_dtoa_r+0x2e>
 8009c8e:	2010      	movs	r0, #16
 8009c90:	f7ff fa14 	bl	80090bc <malloc>
 8009c94:	6260      	str	r0, [r4, #36]	; 0x24
 8009c96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c9a:	6005      	str	r5, [r0, #0]
 8009c9c:	60c5      	str	r5, [r0, #12]
 8009c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ca0:	6819      	ldr	r1, [r3, #0]
 8009ca2:	b151      	cbz	r1, 8009cba <_dtoa_r+0x4a>
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	604a      	str	r2, [r1, #4]
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4093      	lsls	r3, r2
 8009cac:	608b      	str	r3, [r1, #8]
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 fde5 	bl	800a87e <_Bfree>
 8009cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	1e3b      	subs	r3, r7, #0
 8009cbc:	bfbb      	ittet	lt
 8009cbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cc2:	9301      	strlt	r3, [sp, #4]
 8009cc4:	2300      	movge	r3, #0
 8009cc6:	2201      	movlt	r2, #1
 8009cc8:	bfac      	ite	ge
 8009cca:	f8c8 3000 	strge.w	r3, [r8]
 8009cce:	f8c8 2000 	strlt.w	r2, [r8]
 8009cd2:	4baf      	ldr	r3, [pc, #700]	; (8009f90 <_dtoa_r+0x320>)
 8009cd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009cd8:	ea33 0308 	bics.w	r3, r3, r8
 8009cdc:	d114      	bne.n	8009d08 <_dtoa_r+0x98>
 8009cde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ce0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	9b00      	ldr	r3, [sp, #0]
 8009ce8:	b923      	cbnz	r3, 8009cf4 <_dtoa_r+0x84>
 8009cea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	f000 8542 	beq.w	800a778 <_dtoa_r+0xb08>
 8009cf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009fa4 <_dtoa_r+0x334>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8544 	beq.w	800a788 <_dtoa_r+0xb18>
 8009d00:	f10b 0303 	add.w	r3, fp, #3
 8009d04:	f000 bd3e 	b.w	800a784 <_dtoa_r+0xb14>
 8009d08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2300      	movs	r3, #0
 8009d10:	4630      	mov	r0, r6
 8009d12:	4639      	mov	r1, r7
 8009d14:	f7f6 fed8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d18:	4681      	mov	r9, r0
 8009d1a:	b168      	cbz	r0, 8009d38 <_dtoa_r+0xc8>
 8009d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d1e:	2301      	movs	r3, #1
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 8524 	beq.w	800a772 <_dtoa_r+0xb02>
 8009d2a:	4b9a      	ldr	r3, [pc, #616]	; (8009f94 <_dtoa_r+0x324>)
 8009d2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d32:	6013      	str	r3, [r2, #0]
 8009d34:	f000 bd28 	b.w	800a788 <_dtoa_r+0xb18>
 8009d38:	aa14      	add	r2, sp, #80	; 0x50
 8009d3a:	a915      	add	r1, sp, #84	; 0x54
 8009d3c:	ec47 6b10 	vmov	d0, r6, r7
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fff4 	bl	800ad2e <__d2b>
 8009d46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009d4a:	9004      	str	r0, [sp, #16]
 8009d4c:	2d00      	cmp	r5, #0
 8009d4e:	d07c      	beq.n	8009e4a <_dtoa_r+0x1da>
 8009d50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009d58:	46b2      	mov	sl, r6
 8009d5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009d5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009d66:	2200      	movs	r2, #0
 8009d68:	4b8b      	ldr	r3, [pc, #556]	; (8009f98 <_dtoa_r+0x328>)
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	4659      	mov	r1, fp
 8009d6e:	f7f6 fa8b 	bl	8000288 <__aeabi_dsub>
 8009d72:	a381      	add	r3, pc, #516	; (adr r3, 8009f78 <_dtoa_r+0x308>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f7f6 fc3e 	bl	80005f8 <__aeabi_dmul>
 8009d7c:	a380      	add	r3, pc, #512	; (adr r3, 8009f80 <_dtoa_r+0x310>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	f7f6 fa83 	bl	800028c <__adddf3>
 8009d86:	4606      	mov	r6, r0
 8009d88:	4628      	mov	r0, r5
 8009d8a:	460f      	mov	r7, r1
 8009d8c:	f7f6 fbca 	bl	8000524 <__aeabi_i2d>
 8009d90:	a37d      	add	r3, pc, #500	; (adr r3, 8009f88 <_dtoa_r+0x318>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f7f6 fc2f 	bl	80005f8 <__aeabi_dmul>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	f7f6 fa73 	bl	800028c <__adddf3>
 8009da6:	4606      	mov	r6, r0
 8009da8:	460f      	mov	r7, r1
 8009daa:	f7f6 fed5 	bl	8000b58 <__aeabi_d2iz>
 8009dae:	2200      	movs	r2, #0
 8009db0:	4682      	mov	sl, r0
 8009db2:	2300      	movs	r3, #0
 8009db4:	4630      	mov	r0, r6
 8009db6:	4639      	mov	r1, r7
 8009db8:	f7f6 fe90 	bl	8000adc <__aeabi_dcmplt>
 8009dbc:	b148      	cbz	r0, 8009dd2 <_dtoa_r+0x162>
 8009dbe:	4650      	mov	r0, sl
 8009dc0:	f7f6 fbb0 	bl	8000524 <__aeabi_i2d>
 8009dc4:	4632      	mov	r2, r6
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	f7f6 fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dcc:	b908      	cbnz	r0, 8009dd2 <_dtoa_r+0x162>
 8009dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dd2:	f1ba 0f16 	cmp.w	sl, #22
 8009dd6:	d859      	bhi.n	8009e8c <_dtoa_r+0x21c>
 8009dd8:	4970      	ldr	r1, [pc, #448]	; (8009f9c <_dtoa_r+0x32c>)
 8009dda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009dde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de6:	f7f6 fe97 	bl	8000b18 <__aeabi_dcmpgt>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d050      	beq.n	8009e90 <_dtoa_r+0x220>
 8009dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009df2:	2300      	movs	r3, #0
 8009df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009df8:	1b5d      	subs	r5, r3, r5
 8009dfa:	f1b5 0801 	subs.w	r8, r5, #1
 8009dfe:	bf49      	itett	mi
 8009e00:	f1c5 0301 	rsbmi	r3, r5, #1
 8009e04:	2300      	movpl	r3, #0
 8009e06:	9305      	strmi	r3, [sp, #20]
 8009e08:	f04f 0800 	movmi.w	r8, #0
 8009e0c:	bf58      	it	pl
 8009e0e:	9305      	strpl	r3, [sp, #20]
 8009e10:	f1ba 0f00 	cmp.w	sl, #0
 8009e14:	db3e      	blt.n	8009e94 <_dtoa_r+0x224>
 8009e16:	2300      	movs	r3, #0
 8009e18:	44d0      	add	r8, sl
 8009e1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009e1e:	9307      	str	r3, [sp, #28]
 8009e20:	9b06      	ldr	r3, [sp, #24]
 8009e22:	2b09      	cmp	r3, #9
 8009e24:	f200 8090 	bhi.w	8009f48 <_dtoa_r+0x2d8>
 8009e28:	2b05      	cmp	r3, #5
 8009e2a:	bfc4      	itt	gt
 8009e2c:	3b04      	subgt	r3, #4
 8009e2e:	9306      	strgt	r3, [sp, #24]
 8009e30:	9b06      	ldr	r3, [sp, #24]
 8009e32:	f1a3 0302 	sub.w	r3, r3, #2
 8009e36:	bfcc      	ite	gt
 8009e38:	2500      	movgt	r5, #0
 8009e3a:	2501      	movle	r5, #1
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	f200 808f 	bhi.w	8009f60 <_dtoa_r+0x2f0>
 8009e42:	e8df f003 	tbb	[pc, r3]
 8009e46:	7f7d      	.short	0x7f7d
 8009e48:	7131      	.short	0x7131
 8009e4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009e4e:	441d      	add	r5, r3
 8009e50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009e54:	2820      	cmp	r0, #32
 8009e56:	dd13      	ble.n	8009e80 <_dtoa_r+0x210>
 8009e58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009e5c:	9b00      	ldr	r3, [sp, #0]
 8009e5e:	fa08 f800 	lsl.w	r8, r8, r0
 8009e62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009e66:	fa23 f000 	lsr.w	r0, r3, r0
 8009e6a:	ea48 0000 	orr.w	r0, r8, r0
 8009e6e:	f7f6 fb49 	bl	8000504 <__aeabi_ui2d>
 8009e72:	2301      	movs	r3, #1
 8009e74:	4682      	mov	sl, r0
 8009e76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009e7a:	3d01      	subs	r5, #1
 8009e7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e7e:	e772      	b.n	8009d66 <_dtoa_r+0xf6>
 8009e80:	9b00      	ldr	r3, [sp, #0]
 8009e82:	f1c0 0020 	rsb	r0, r0, #32
 8009e86:	fa03 f000 	lsl.w	r0, r3, r0
 8009e8a:	e7f0      	b.n	8009e6e <_dtoa_r+0x1fe>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e7b1      	b.n	8009df4 <_dtoa_r+0x184>
 8009e90:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e92:	e7b0      	b.n	8009df6 <_dtoa_r+0x186>
 8009e94:	9b05      	ldr	r3, [sp, #20]
 8009e96:	eba3 030a 	sub.w	r3, r3, sl
 8009e9a:	9305      	str	r3, [sp, #20]
 8009e9c:	f1ca 0300 	rsb	r3, sl, #0
 8009ea0:	9307      	str	r3, [sp, #28]
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ea6:	e7bb      	b.n	8009e20 <_dtoa_r+0x1b0>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8009eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dd59      	ble.n	8009f66 <_dtoa_r+0x2f6>
 8009eb2:	9302      	str	r3, [sp, #8]
 8009eb4:	4699      	mov	r9, r3
 8009eb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009eb8:	2200      	movs	r2, #0
 8009eba:	6072      	str	r2, [r6, #4]
 8009ebc:	2204      	movs	r2, #4
 8009ebe:	f102 0014 	add.w	r0, r2, #20
 8009ec2:	4298      	cmp	r0, r3
 8009ec4:	6871      	ldr	r1, [r6, #4]
 8009ec6:	d953      	bls.n	8009f70 <_dtoa_r+0x300>
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 fca4 	bl	800a816 <_Balloc>
 8009ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ed0:	6030      	str	r0, [r6, #0]
 8009ed2:	f1b9 0f0e 	cmp.w	r9, #14
 8009ed6:	f8d3 b000 	ldr.w	fp, [r3]
 8009eda:	f200 80e6 	bhi.w	800a0aa <_dtoa_r+0x43a>
 8009ede:	2d00      	cmp	r5, #0
 8009ee0:	f000 80e3 	beq.w	800a0aa <_dtoa_r+0x43a>
 8009ee4:	ed9d 7b00 	vldr	d7, [sp]
 8009ee8:	f1ba 0f00 	cmp.w	sl, #0
 8009eec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009ef0:	dd74      	ble.n	8009fdc <_dtoa_r+0x36c>
 8009ef2:	4a2a      	ldr	r2, [pc, #168]	; (8009f9c <_dtoa_r+0x32c>)
 8009ef4:	f00a 030f 	and.w	r3, sl, #15
 8009ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009efc:	ed93 7b00 	vldr	d7, [r3]
 8009f00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009f04:	06f0      	lsls	r0, r6, #27
 8009f06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009f0a:	d565      	bpl.n	8009fd8 <_dtoa_r+0x368>
 8009f0c:	4b24      	ldr	r3, [pc, #144]	; (8009fa0 <_dtoa_r+0x330>)
 8009f0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f16:	f7f6 fc99 	bl	800084c <__aeabi_ddiv>
 8009f1a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f1e:	f006 060f 	and.w	r6, r6, #15
 8009f22:	2503      	movs	r5, #3
 8009f24:	4f1e      	ldr	r7, [pc, #120]	; (8009fa0 <_dtoa_r+0x330>)
 8009f26:	e04c      	b.n	8009fc2 <_dtoa_r+0x352>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f2e:	4453      	add	r3, sl
 8009f30:	f103 0901 	add.w	r9, r3, #1
 8009f34:	9302      	str	r3, [sp, #8]
 8009f36:	464b      	mov	r3, r9
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	bfb8      	it	lt
 8009f3c:	2301      	movlt	r3, #1
 8009f3e:	e7ba      	b.n	8009eb6 <_dtoa_r+0x246>
 8009f40:	2300      	movs	r3, #0
 8009f42:	e7b2      	b.n	8009eaa <_dtoa_r+0x23a>
 8009f44:	2300      	movs	r3, #0
 8009f46:	e7f0      	b.n	8009f2a <_dtoa_r+0x2ba>
 8009f48:	2501      	movs	r5, #1
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	9306      	str	r3, [sp, #24]
 8009f4e:	950a      	str	r5, [sp, #40]	; 0x28
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295
 8009f54:	9302      	str	r3, [sp, #8]
 8009f56:	4699      	mov	r9, r3
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2312      	movs	r3, #18
 8009f5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f5e:	e7aa      	b.n	8009eb6 <_dtoa_r+0x246>
 8009f60:	2301      	movs	r3, #1
 8009f62:	930a      	str	r3, [sp, #40]	; 0x28
 8009f64:	e7f4      	b.n	8009f50 <_dtoa_r+0x2e0>
 8009f66:	2301      	movs	r3, #1
 8009f68:	9302      	str	r3, [sp, #8]
 8009f6a:	4699      	mov	r9, r3
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	e7f5      	b.n	8009f5c <_dtoa_r+0x2ec>
 8009f70:	3101      	adds	r1, #1
 8009f72:	6071      	str	r1, [r6, #4]
 8009f74:	0052      	lsls	r2, r2, #1
 8009f76:	e7a2      	b.n	8009ebe <_dtoa_r+0x24e>
 8009f78:	636f4361 	.word	0x636f4361
 8009f7c:	3fd287a7 	.word	0x3fd287a7
 8009f80:	8b60c8b3 	.word	0x8b60c8b3
 8009f84:	3fc68a28 	.word	0x3fc68a28
 8009f88:	509f79fb 	.word	0x509f79fb
 8009f8c:	3fd34413 	.word	0x3fd34413
 8009f90:	7ff00000 	.word	0x7ff00000
 8009f94:	0800b1f9 	.word	0x0800b1f9
 8009f98:	3ff80000 	.word	0x3ff80000
 8009f9c:	0800b258 	.word	0x0800b258
 8009fa0:	0800b230 	.word	0x0800b230
 8009fa4:	0800b225 	.word	0x0800b225
 8009fa8:	07f1      	lsls	r1, r6, #31
 8009faa:	d508      	bpl.n	8009fbe <_dtoa_r+0x34e>
 8009fac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fb4:	f7f6 fb20 	bl	80005f8 <__aeabi_dmul>
 8009fb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fbc:	3501      	adds	r5, #1
 8009fbe:	1076      	asrs	r6, r6, #1
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	d1f0      	bne.n	8009fa8 <_dtoa_r+0x338>
 8009fc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fce:	f7f6 fc3d 	bl	800084c <__aeabi_ddiv>
 8009fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8009fd6:	e01a      	b.n	800a00e <_dtoa_r+0x39e>
 8009fd8:	2502      	movs	r5, #2
 8009fda:	e7a3      	b.n	8009f24 <_dtoa_r+0x2b4>
 8009fdc:	f000 80a0 	beq.w	800a120 <_dtoa_r+0x4b0>
 8009fe0:	f1ca 0600 	rsb	r6, sl, #0
 8009fe4:	4b9f      	ldr	r3, [pc, #636]	; (800a264 <_dtoa_r+0x5f4>)
 8009fe6:	4fa0      	ldr	r7, [pc, #640]	; (800a268 <_dtoa_r+0x5f8>)
 8009fe8:	f006 020f 	and.w	r2, r6, #15
 8009fec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ff8:	f7f6 fafe 	bl	80005f8 <__aeabi_dmul>
 8009ffc:	e9cd 0100 	strd	r0, r1, [sp]
 800a000:	1136      	asrs	r6, r6, #4
 800a002:	2300      	movs	r3, #0
 800a004:	2502      	movs	r5, #2
 800a006:	2e00      	cmp	r6, #0
 800a008:	d17f      	bne.n	800a10a <_dtoa_r+0x49a>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e1      	bne.n	8009fd2 <_dtoa_r+0x362>
 800a00e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 8087 	beq.w	800a124 <_dtoa_r+0x4b4>
 800a016:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a01a:	2200      	movs	r2, #0
 800a01c:	4b93      	ldr	r3, [pc, #588]	; (800a26c <_dtoa_r+0x5fc>)
 800a01e:	4630      	mov	r0, r6
 800a020:	4639      	mov	r1, r7
 800a022:	f7f6 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800a026:	2800      	cmp	r0, #0
 800a028:	d07c      	beq.n	800a124 <_dtoa_r+0x4b4>
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	d079      	beq.n	800a124 <_dtoa_r+0x4b4>
 800a030:	9b02      	ldr	r3, [sp, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	dd35      	ble.n	800a0a2 <_dtoa_r+0x432>
 800a036:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a03a:	9308      	str	r3, [sp, #32]
 800a03c:	4639      	mov	r1, r7
 800a03e:	2200      	movs	r2, #0
 800a040:	4b8b      	ldr	r3, [pc, #556]	; (800a270 <_dtoa_r+0x600>)
 800a042:	4630      	mov	r0, r6
 800a044:	f7f6 fad8 	bl	80005f8 <__aeabi_dmul>
 800a048:	e9cd 0100 	strd	r0, r1, [sp]
 800a04c:	9f02      	ldr	r7, [sp, #8]
 800a04e:	3501      	adds	r5, #1
 800a050:	4628      	mov	r0, r5
 800a052:	f7f6 fa67 	bl	8000524 <__aeabi_i2d>
 800a056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a05a:	f7f6 facd 	bl	80005f8 <__aeabi_dmul>
 800a05e:	2200      	movs	r2, #0
 800a060:	4b84      	ldr	r3, [pc, #528]	; (800a274 <_dtoa_r+0x604>)
 800a062:	f7f6 f913 	bl	800028c <__adddf3>
 800a066:	4605      	mov	r5, r0
 800a068:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a06c:	2f00      	cmp	r7, #0
 800a06e:	d15d      	bne.n	800a12c <_dtoa_r+0x4bc>
 800a070:	2200      	movs	r2, #0
 800a072:	4b81      	ldr	r3, [pc, #516]	; (800a278 <_dtoa_r+0x608>)
 800a074:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a078:	f7f6 f906 	bl	8000288 <__aeabi_dsub>
 800a07c:	462a      	mov	r2, r5
 800a07e:	4633      	mov	r3, r6
 800a080:	e9cd 0100 	strd	r0, r1, [sp]
 800a084:	f7f6 fd48 	bl	8000b18 <__aeabi_dcmpgt>
 800a088:	2800      	cmp	r0, #0
 800a08a:	f040 8288 	bne.w	800a59e <_dtoa_r+0x92e>
 800a08e:	462a      	mov	r2, r5
 800a090:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a094:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a098:	f7f6 fd20 	bl	8000adc <__aeabi_dcmplt>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f040 827c 	bne.w	800a59a <_dtoa_r+0x92a>
 800a0a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0a6:	e9cd 2300 	strd	r2, r3, [sp]
 800a0aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f2c0 8150 	blt.w	800a352 <_dtoa_r+0x6e2>
 800a0b2:	f1ba 0f0e 	cmp.w	sl, #14
 800a0b6:	f300 814c 	bgt.w	800a352 <_dtoa_r+0x6e2>
 800a0ba:	4b6a      	ldr	r3, [pc, #424]	; (800a264 <_dtoa_r+0x5f4>)
 800a0bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0c0:	ed93 7b00 	vldr	d7, [r3]
 800a0c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0cc:	f280 80d8 	bge.w	800a280 <_dtoa_r+0x610>
 800a0d0:	f1b9 0f00 	cmp.w	r9, #0
 800a0d4:	f300 80d4 	bgt.w	800a280 <_dtoa_r+0x610>
 800a0d8:	f040 825e 	bne.w	800a598 <_dtoa_r+0x928>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4b66      	ldr	r3, [pc, #408]	; (800a278 <_dtoa_r+0x608>)
 800a0e0:	ec51 0b17 	vmov	r0, r1, d7
 800a0e4:	f7f6 fa88 	bl	80005f8 <__aeabi_dmul>
 800a0e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0ec:	f7f6 fd0a 	bl	8000b04 <__aeabi_dcmpge>
 800a0f0:	464f      	mov	r7, r9
 800a0f2:	464e      	mov	r6, r9
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f040 8234 	bne.w	800a562 <_dtoa_r+0x8f2>
 800a0fa:	2331      	movs	r3, #49	; 0x31
 800a0fc:	f10b 0501 	add.w	r5, fp, #1
 800a100:	f88b 3000 	strb.w	r3, [fp]
 800a104:	f10a 0a01 	add.w	sl, sl, #1
 800a108:	e22f      	b.n	800a56a <_dtoa_r+0x8fa>
 800a10a:	07f2      	lsls	r2, r6, #31
 800a10c:	d505      	bpl.n	800a11a <_dtoa_r+0x4aa>
 800a10e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a112:	f7f6 fa71 	bl	80005f8 <__aeabi_dmul>
 800a116:	3501      	adds	r5, #1
 800a118:	2301      	movs	r3, #1
 800a11a:	1076      	asrs	r6, r6, #1
 800a11c:	3708      	adds	r7, #8
 800a11e:	e772      	b.n	800a006 <_dtoa_r+0x396>
 800a120:	2502      	movs	r5, #2
 800a122:	e774      	b.n	800a00e <_dtoa_r+0x39e>
 800a124:	f8cd a020 	str.w	sl, [sp, #32]
 800a128:	464f      	mov	r7, r9
 800a12a:	e791      	b.n	800a050 <_dtoa_r+0x3e0>
 800a12c:	4b4d      	ldr	r3, [pc, #308]	; (800a264 <_dtoa_r+0x5f4>)
 800a12e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a132:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d047      	beq.n	800a1cc <_dtoa_r+0x55c>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	2000      	movs	r0, #0
 800a142:	494e      	ldr	r1, [pc, #312]	; (800a27c <_dtoa_r+0x60c>)
 800a144:	f7f6 fb82 	bl	800084c <__aeabi_ddiv>
 800a148:	462a      	mov	r2, r5
 800a14a:	4633      	mov	r3, r6
 800a14c:	f7f6 f89c 	bl	8000288 <__aeabi_dsub>
 800a150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a154:	465d      	mov	r5, fp
 800a156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a15a:	f7f6 fcfd 	bl	8000b58 <__aeabi_d2iz>
 800a15e:	4606      	mov	r6, r0
 800a160:	f7f6 f9e0 	bl	8000524 <__aeabi_i2d>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a16c:	f7f6 f88c 	bl	8000288 <__aeabi_dsub>
 800a170:	3630      	adds	r6, #48	; 0x30
 800a172:	f805 6b01 	strb.w	r6, [r5], #1
 800a176:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a17a:	e9cd 0100 	strd	r0, r1, [sp]
 800a17e:	f7f6 fcad 	bl	8000adc <__aeabi_dcmplt>
 800a182:	2800      	cmp	r0, #0
 800a184:	d163      	bne.n	800a24e <_dtoa_r+0x5de>
 800a186:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a18a:	2000      	movs	r0, #0
 800a18c:	4937      	ldr	r1, [pc, #220]	; (800a26c <_dtoa_r+0x5fc>)
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a196:	f7f6 fca1 	bl	8000adc <__aeabi_dcmplt>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	f040 80b7 	bne.w	800a30e <_dtoa_r+0x69e>
 800a1a0:	eba5 030b 	sub.w	r3, r5, fp
 800a1a4:	429f      	cmp	r7, r3
 800a1a6:	f77f af7c 	ble.w	800a0a2 <_dtoa_r+0x432>
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4b30      	ldr	r3, [pc, #192]	; (800a270 <_dtoa_r+0x600>)
 800a1ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1b2:	f7f6 fa21 	bl	80005f8 <__aeabi_dmul>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a1bc:	4b2c      	ldr	r3, [pc, #176]	; (800a270 <_dtoa_r+0x600>)
 800a1be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1c2:	f7f6 fa19 	bl	80005f8 <__aeabi_dmul>
 800a1c6:	e9cd 0100 	strd	r0, r1, [sp]
 800a1ca:	e7c4      	b.n	800a156 <_dtoa_r+0x4e6>
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4633      	mov	r3, r6
 800a1d0:	f7f6 fa12 	bl	80005f8 <__aeabi_dmul>
 800a1d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a1d8:	eb0b 0507 	add.w	r5, fp, r7
 800a1dc:	465e      	mov	r6, fp
 800a1de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1e2:	f7f6 fcb9 	bl	8000b58 <__aeabi_d2iz>
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	f7f6 f99c 	bl	8000524 <__aeabi_i2d>
 800a1ec:	3730      	adds	r7, #48	; 0x30
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1f6:	f7f6 f847 	bl	8000288 <__aeabi_dsub>
 800a1fa:	f806 7b01 	strb.w	r7, [r6], #1
 800a1fe:	42ae      	cmp	r6, r5
 800a200:	e9cd 0100 	strd	r0, r1, [sp]
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	d126      	bne.n	800a258 <_dtoa_r+0x5e8>
 800a20a:	4b1c      	ldr	r3, [pc, #112]	; (800a27c <_dtoa_r+0x60c>)
 800a20c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a210:	f7f6 f83c 	bl	800028c <__adddf3>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a21c:	f7f6 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 800a220:	2800      	cmp	r0, #0
 800a222:	d174      	bne.n	800a30e <_dtoa_r+0x69e>
 800a224:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a228:	2000      	movs	r0, #0
 800a22a:	4914      	ldr	r1, [pc, #80]	; (800a27c <_dtoa_r+0x60c>)
 800a22c:	f7f6 f82c 	bl	8000288 <__aeabi_dsub>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a238:	f7f6 fc50 	bl	8000adc <__aeabi_dcmplt>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f43f af30 	beq.w	800a0a2 <_dtoa_r+0x432>
 800a242:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a246:	2b30      	cmp	r3, #48	; 0x30
 800a248:	f105 32ff 	add.w	r2, r5, #4294967295
 800a24c:	d002      	beq.n	800a254 <_dtoa_r+0x5e4>
 800a24e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a252:	e04a      	b.n	800a2ea <_dtoa_r+0x67a>
 800a254:	4615      	mov	r5, r2
 800a256:	e7f4      	b.n	800a242 <_dtoa_r+0x5d2>
 800a258:	4b05      	ldr	r3, [pc, #20]	; (800a270 <_dtoa_r+0x600>)
 800a25a:	f7f6 f9cd 	bl	80005f8 <__aeabi_dmul>
 800a25e:	e9cd 0100 	strd	r0, r1, [sp]
 800a262:	e7bc      	b.n	800a1de <_dtoa_r+0x56e>
 800a264:	0800b258 	.word	0x0800b258
 800a268:	0800b230 	.word	0x0800b230
 800a26c:	3ff00000 	.word	0x3ff00000
 800a270:	40240000 	.word	0x40240000
 800a274:	401c0000 	.word	0x401c0000
 800a278:	40140000 	.word	0x40140000
 800a27c:	3fe00000 	.word	0x3fe00000
 800a280:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a284:	465d      	mov	r5, fp
 800a286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a28a:	4630      	mov	r0, r6
 800a28c:	4639      	mov	r1, r7
 800a28e:	f7f6 fadd 	bl	800084c <__aeabi_ddiv>
 800a292:	f7f6 fc61 	bl	8000b58 <__aeabi_d2iz>
 800a296:	4680      	mov	r8, r0
 800a298:	f7f6 f944 	bl	8000524 <__aeabi_i2d>
 800a29c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2a0:	f7f6 f9aa 	bl	80005f8 <__aeabi_dmul>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a2b0:	f7f5 ffea 	bl	8000288 <__aeabi_dsub>
 800a2b4:	f805 6b01 	strb.w	r6, [r5], #1
 800a2b8:	eba5 060b 	sub.w	r6, r5, fp
 800a2bc:	45b1      	cmp	r9, r6
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	d139      	bne.n	800a338 <_dtoa_r+0x6c8>
 800a2c4:	f7f5 ffe2 	bl	800028c <__adddf3>
 800a2c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	f7f6 fc22 	bl	8000b18 <__aeabi_dcmpgt>
 800a2d4:	b9c8      	cbnz	r0, 800a30a <_dtoa_r+0x69a>
 800a2d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2da:	4630      	mov	r0, r6
 800a2dc:	4639      	mov	r1, r7
 800a2de:	f7f6 fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2e2:	b110      	cbz	r0, 800a2ea <_dtoa_r+0x67a>
 800a2e4:	f018 0f01 	tst.w	r8, #1
 800a2e8:	d10f      	bne.n	800a30a <_dtoa_r+0x69a>
 800a2ea:	9904      	ldr	r1, [sp, #16]
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 fac6 	bl	800a87e <_Bfree>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2f6:	702b      	strb	r3, [r5, #0]
 800a2f8:	f10a 0301 	add.w	r3, sl, #1
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 8241 	beq.w	800a788 <_dtoa_r+0xb18>
 800a306:	601d      	str	r5, [r3, #0]
 800a308:	e23e      	b.n	800a788 <_dtoa_r+0xb18>
 800a30a:	f8cd a020 	str.w	sl, [sp, #32]
 800a30e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a312:	2a39      	cmp	r2, #57	; 0x39
 800a314:	f105 33ff 	add.w	r3, r5, #4294967295
 800a318:	d108      	bne.n	800a32c <_dtoa_r+0x6bc>
 800a31a:	459b      	cmp	fp, r3
 800a31c:	d10a      	bne.n	800a334 <_dtoa_r+0x6c4>
 800a31e:	9b08      	ldr	r3, [sp, #32]
 800a320:	3301      	adds	r3, #1
 800a322:	9308      	str	r3, [sp, #32]
 800a324:	2330      	movs	r3, #48	; 0x30
 800a326:	f88b 3000 	strb.w	r3, [fp]
 800a32a:	465b      	mov	r3, fp
 800a32c:	781a      	ldrb	r2, [r3, #0]
 800a32e:	3201      	adds	r2, #1
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	e78c      	b.n	800a24e <_dtoa_r+0x5de>
 800a334:	461d      	mov	r5, r3
 800a336:	e7ea      	b.n	800a30e <_dtoa_r+0x69e>
 800a338:	2200      	movs	r2, #0
 800a33a:	4b9b      	ldr	r3, [pc, #620]	; (800a5a8 <_dtoa_r+0x938>)
 800a33c:	f7f6 f95c 	bl	80005f8 <__aeabi_dmul>
 800a340:	2200      	movs	r2, #0
 800a342:	2300      	movs	r3, #0
 800a344:	4606      	mov	r6, r0
 800a346:	460f      	mov	r7, r1
 800a348:	f7f6 fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d09a      	beq.n	800a286 <_dtoa_r+0x616>
 800a350:	e7cb      	b.n	800a2ea <_dtoa_r+0x67a>
 800a352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a354:	2a00      	cmp	r2, #0
 800a356:	f000 808b 	beq.w	800a470 <_dtoa_r+0x800>
 800a35a:	9a06      	ldr	r2, [sp, #24]
 800a35c:	2a01      	cmp	r2, #1
 800a35e:	dc6e      	bgt.n	800a43e <_dtoa_r+0x7ce>
 800a360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a362:	2a00      	cmp	r2, #0
 800a364:	d067      	beq.n	800a436 <_dtoa_r+0x7c6>
 800a366:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a36a:	9f07      	ldr	r7, [sp, #28]
 800a36c:	9d05      	ldr	r5, [sp, #20]
 800a36e:	9a05      	ldr	r2, [sp, #20]
 800a370:	2101      	movs	r1, #1
 800a372:	441a      	add	r2, r3
 800a374:	4620      	mov	r0, r4
 800a376:	9205      	str	r2, [sp, #20]
 800a378:	4498      	add	r8, r3
 800a37a:	f000 fb20 	bl	800a9be <__i2b>
 800a37e:	4606      	mov	r6, r0
 800a380:	2d00      	cmp	r5, #0
 800a382:	dd0c      	ble.n	800a39e <_dtoa_r+0x72e>
 800a384:	f1b8 0f00 	cmp.w	r8, #0
 800a388:	dd09      	ble.n	800a39e <_dtoa_r+0x72e>
 800a38a:	4545      	cmp	r5, r8
 800a38c:	9a05      	ldr	r2, [sp, #20]
 800a38e:	462b      	mov	r3, r5
 800a390:	bfa8      	it	ge
 800a392:	4643      	movge	r3, r8
 800a394:	1ad2      	subs	r2, r2, r3
 800a396:	9205      	str	r2, [sp, #20]
 800a398:	1aed      	subs	r5, r5, r3
 800a39a:	eba8 0803 	sub.w	r8, r8, r3
 800a39e:	9b07      	ldr	r3, [sp, #28]
 800a3a0:	b1eb      	cbz	r3, 800a3de <_dtoa_r+0x76e>
 800a3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d067      	beq.n	800a478 <_dtoa_r+0x808>
 800a3a8:	b18f      	cbz	r7, 800a3ce <_dtoa_r+0x75e>
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	463a      	mov	r2, r7
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fba4 	bl	800aafc <__pow5mult>
 800a3b4:	9a04      	ldr	r2, [sp, #16]
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fb08 	bl	800a9d0 <__multiply>
 800a3c0:	9904      	ldr	r1, [sp, #16]
 800a3c2:	9008      	str	r0, [sp, #32]
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f000 fa5a 	bl	800a87e <_Bfree>
 800a3ca:	9b08      	ldr	r3, [sp, #32]
 800a3cc:	9304      	str	r3, [sp, #16]
 800a3ce:	9b07      	ldr	r3, [sp, #28]
 800a3d0:	1bda      	subs	r2, r3, r7
 800a3d2:	d004      	beq.n	800a3de <_dtoa_r+0x76e>
 800a3d4:	9904      	ldr	r1, [sp, #16]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f000 fb90 	bl	800aafc <__pow5mult>
 800a3dc:	9004      	str	r0, [sp, #16]
 800a3de:	2101      	movs	r1, #1
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f000 faec 	bl	800a9be <__i2b>
 800a3e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3e8:	4607      	mov	r7, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 81d0 	beq.w	800a790 <_dtoa_r+0xb20>
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 fb81 	bl	800aafc <__pow5mult>
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	4607      	mov	r7, r0
 800a400:	dc40      	bgt.n	800a484 <_dtoa_r+0x814>
 800a402:	9b00      	ldr	r3, [sp, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d139      	bne.n	800a47c <_dtoa_r+0x80c>
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d136      	bne.n	800a480 <_dtoa_r+0x810>
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a418:	0d1b      	lsrs	r3, r3, #20
 800a41a:	051b      	lsls	r3, r3, #20
 800a41c:	b12b      	cbz	r3, 800a42a <_dtoa_r+0x7ba>
 800a41e:	9b05      	ldr	r3, [sp, #20]
 800a420:	3301      	adds	r3, #1
 800a422:	9305      	str	r3, [sp, #20]
 800a424:	f108 0801 	add.w	r8, r8, #1
 800a428:	2301      	movs	r3, #1
 800a42a:	9307      	str	r3, [sp, #28]
 800a42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d12a      	bne.n	800a488 <_dtoa_r+0x818>
 800a432:	2001      	movs	r0, #1
 800a434:	e030      	b.n	800a498 <_dtoa_r+0x828>
 800a436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a438:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a43c:	e795      	b.n	800a36a <_dtoa_r+0x6fa>
 800a43e:	9b07      	ldr	r3, [sp, #28]
 800a440:	f109 37ff 	add.w	r7, r9, #4294967295
 800a444:	42bb      	cmp	r3, r7
 800a446:	bfbf      	itttt	lt
 800a448:	9b07      	ldrlt	r3, [sp, #28]
 800a44a:	9707      	strlt	r7, [sp, #28]
 800a44c:	1afa      	sublt	r2, r7, r3
 800a44e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a450:	bfbb      	ittet	lt
 800a452:	189b      	addlt	r3, r3, r2
 800a454:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a456:	1bdf      	subge	r7, r3, r7
 800a458:	2700      	movlt	r7, #0
 800a45a:	f1b9 0f00 	cmp.w	r9, #0
 800a45e:	bfb5      	itete	lt
 800a460:	9b05      	ldrlt	r3, [sp, #20]
 800a462:	9d05      	ldrge	r5, [sp, #20]
 800a464:	eba3 0509 	sublt.w	r5, r3, r9
 800a468:	464b      	movge	r3, r9
 800a46a:	bfb8      	it	lt
 800a46c:	2300      	movlt	r3, #0
 800a46e:	e77e      	b.n	800a36e <_dtoa_r+0x6fe>
 800a470:	9f07      	ldr	r7, [sp, #28]
 800a472:	9d05      	ldr	r5, [sp, #20]
 800a474:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a476:	e783      	b.n	800a380 <_dtoa_r+0x710>
 800a478:	9a07      	ldr	r2, [sp, #28]
 800a47a:	e7ab      	b.n	800a3d4 <_dtoa_r+0x764>
 800a47c:	2300      	movs	r3, #0
 800a47e:	e7d4      	b.n	800a42a <_dtoa_r+0x7ba>
 800a480:	9b00      	ldr	r3, [sp, #0]
 800a482:	e7d2      	b.n	800a42a <_dtoa_r+0x7ba>
 800a484:	2300      	movs	r3, #0
 800a486:	9307      	str	r3, [sp, #28]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a48e:	6918      	ldr	r0, [r3, #16]
 800a490:	f000 fa47 	bl	800a922 <__hi0bits>
 800a494:	f1c0 0020 	rsb	r0, r0, #32
 800a498:	4440      	add	r0, r8
 800a49a:	f010 001f 	ands.w	r0, r0, #31
 800a49e:	d047      	beq.n	800a530 <_dtoa_r+0x8c0>
 800a4a0:	f1c0 0320 	rsb	r3, r0, #32
 800a4a4:	2b04      	cmp	r3, #4
 800a4a6:	dd3b      	ble.n	800a520 <_dtoa_r+0x8b0>
 800a4a8:	9b05      	ldr	r3, [sp, #20]
 800a4aa:	f1c0 001c 	rsb	r0, r0, #28
 800a4ae:	4403      	add	r3, r0
 800a4b0:	9305      	str	r3, [sp, #20]
 800a4b2:	4405      	add	r5, r0
 800a4b4:	4480      	add	r8, r0
 800a4b6:	9b05      	ldr	r3, [sp, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dd05      	ble.n	800a4c8 <_dtoa_r+0x858>
 800a4bc:	461a      	mov	r2, r3
 800a4be:	9904      	ldr	r1, [sp, #16]
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 fb69 	bl	800ab98 <__lshift>
 800a4c6:	9004      	str	r0, [sp, #16]
 800a4c8:	f1b8 0f00 	cmp.w	r8, #0
 800a4cc:	dd05      	ble.n	800a4da <_dtoa_r+0x86a>
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	4642      	mov	r2, r8
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 fb60 	bl	800ab98 <__lshift>
 800a4d8:	4607      	mov	r7, r0
 800a4da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4dc:	b353      	cbz	r3, 800a534 <_dtoa_r+0x8c4>
 800a4de:	4639      	mov	r1, r7
 800a4e0:	9804      	ldr	r0, [sp, #16]
 800a4e2:	f000 fbad 	bl	800ac40 <__mcmp>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	da24      	bge.n	800a534 <_dtoa_r+0x8c4>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	220a      	movs	r2, #10
 800a4ee:	9904      	ldr	r1, [sp, #16]
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f000 f9db 	bl	800a8ac <__multadd>
 800a4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f8:	9004      	str	r0, [sp, #16]
 800a4fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 814d 	beq.w	800a79e <_dtoa_r+0xb2e>
 800a504:	2300      	movs	r3, #0
 800a506:	4631      	mov	r1, r6
 800a508:	220a      	movs	r2, #10
 800a50a:	4620      	mov	r0, r4
 800a50c:	f000 f9ce 	bl	800a8ac <__multadd>
 800a510:	9b02      	ldr	r3, [sp, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	4606      	mov	r6, r0
 800a516:	dc4f      	bgt.n	800a5b8 <_dtoa_r+0x948>
 800a518:	9b06      	ldr	r3, [sp, #24]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	dd4c      	ble.n	800a5b8 <_dtoa_r+0x948>
 800a51e:	e011      	b.n	800a544 <_dtoa_r+0x8d4>
 800a520:	d0c9      	beq.n	800a4b6 <_dtoa_r+0x846>
 800a522:	9a05      	ldr	r2, [sp, #20]
 800a524:	331c      	adds	r3, #28
 800a526:	441a      	add	r2, r3
 800a528:	9205      	str	r2, [sp, #20]
 800a52a:	441d      	add	r5, r3
 800a52c:	4498      	add	r8, r3
 800a52e:	e7c2      	b.n	800a4b6 <_dtoa_r+0x846>
 800a530:	4603      	mov	r3, r0
 800a532:	e7f6      	b.n	800a522 <_dtoa_r+0x8b2>
 800a534:	f1b9 0f00 	cmp.w	r9, #0
 800a538:	dc38      	bgt.n	800a5ac <_dtoa_r+0x93c>
 800a53a:	9b06      	ldr	r3, [sp, #24]
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	dd35      	ble.n	800a5ac <_dtoa_r+0x93c>
 800a540:	f8cd 9008 	str.w	r9, [sp, #8]
 800a544:	9b02      	ldr	r3, [sp, #8]
 800a546:	b963      	cbnz	r3, 800a562 <_dtoa_r+0x8f2>
 800a548:	4639      	mov	r1, r7
 800a54a:	2205      	movs	r2, #5
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 f9ad 	bl	800a8ac <__multadd>
 800a552:	4601      	mov	r1, r0
 800a554:	4607      	mov	r7, r0
 800a556:	9804      	ldr	r0, [sp, #16]
 800a558:	f000 fb72 	bl	800ac40 <__mcmp>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	f73f adcc 	bgt.w	800a0fa <_dtoa_r+0x48a>
 800a562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a564:	465d      	mov	r5, fp
 800a566:	ea6f 0a03 	mvn.w	sl, r3
 800a56a:	f04f 0900 	mov.w	r9, #0
 800a56e:	4639      	mov	r1, r7
 800a570:	4620      	mov	r0, r4
 800a572:	f000 f984 	bl	800a87e <_Bfree>
 800a576:	2e00      	cmp	r6, #0
 800a578:	f43f aeb7 	beq.w	800a2ea <_dtoa_r+0x67a>
 800a57c:	f1b9 0f00 	cmp.w	r9, #0
 800a580:	d005      	beq.n	800a58e <_dtoa_r+0x91e>
 800a582:	45b1      	cmp	r9, r6
 800a584:	d003      	beq.n	800a58e <_dtoa_r+0x91e>
 800a586:	4649      	mov	r1, r9
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 f978 	bl	800a87e <_Bfree>
 800a58e:	4631      	mov	r1, r6
 800a590:	4620      	mov	r0, r4
 800a592:	f000 f974 	bl	800a87e <_Bfree>
 800a596:	e6a8      	b.n	800a2ea <_dtoa_r+0x67a>
 800a598:	2700      	movs	r7, #0
 800a59a:	463e      	mov	r6, r7
 800a59c:	e7e1      	b.n	800a562 <_dtoa_r+0x8f2>
 800a59e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a5a2:	463e      	mov	r6, r7
 800a5a4:	e5a9      	b.n	800a0fa <_dtoa_r+0x48a>
 800a5a6:	bf00      	nop
 800a5a8:	40240000 	.word	0x40240000
 800a5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 80fa 	beq.w	800a7ac <_dtoa_r+0xb3c>
 800a5b8:	2d00      	cmp	r5, #0
 800a5ba:	dd05      	ble.n	800a5c8 <_dtoa_r+0x958>
 800a5bc:	4631      	mov	r1, r6
 800a5be:	462a      	mov	r2, r5
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 fae9 	bl	800ab98 <__lshift>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	9b07      	ldr	r3, [sp, #28]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d04c      	beq.n	800a668 <_dtoa_r+0x9f8>
 800a5ce:	6871      	ldr	r1, [r6, #4]
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 f920 	bl	800a816 <_Balloc>
 800a5d6:	6932      	ldr	r2, [r6, #16]
 800a5d8:	3202      	adds	r2, #2
 800a5da:	4605      	mov	r5, r0
 800a5dc:	0092      	lsls	r2, r2, #2
 800a5de:	f106 010c 	add.w	r1, r6, #12
 800a5e2:	300c      	adds	r0, #12
 800a5e4:	f000 f90a 	bl	800a7fc <memcpy>
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 fad3 	bl	800ab98 <__lshift>
 800a5f2:	9b00      	ldr	r3, [sp, #0]
 800a5f4:	f8cd b014 	str.w	fp, [sp, #20]
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	46b1      	mov	r9, r6
 800a5fe:	9307      	str	r3, [sp, #28]
 800a600:	4606      	mov	r6, r0
 800a602:	4639      	mov	r1, r7
 800a604:	9804      	ldr	r0, [sp, #16]
 800a606:	f7ff faa5 	bl	8009b54 <quorem>
 800a60a:	4649      	mov	r1, r9
 800a60c:	4605      	mov	r5, r0
 800a60e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a612:	9804      	ldr	r0, [sp, #16]
 800a614:	f000 fb14 	bl	800ac40 <__mcmp>
 800a618:	4632      	mov	r2, r6
 800a61a:	9000      	str	r0, [sp, #0]
 800a61c:	4639      	mov	r1, r7
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 fb28 	bl	800ac74 <__mdiff>
 800a624:	68c3      	ldr	r3, [r0, #12]
 800a626:	4602      	mov	r2, r0
 800a628:	bb03      	cbnz	r3, 800a66c <_dtoa_r+0x9fc>
 800a62a:	4601      	mov	r1, r0
 800a62c:	9008      	str	r0, [sp, #32]
 800a62e:	9804      	ldr	r0, [sp, #16]
 800a630:	f000 fb06 	bl	800ac40 <__mcmp>
 800a634:	9a08      	ldr	r2, [sp, #32]
 800a636:	4603      	mov	r3, r0
 800a638:	4611      	mov	r1, r2
 800a63a:	4620      	mov	r0, r4
 800a63c:	9308      	str	r3, [sp, #32]
 800a63e:	f000 f91e 	bl	800a87e <_Bfree>
 800a642:	9b08      	ldr	r3, [sp, #32]
 800a644:	b9a3      	cbnz	r3, 800a670 <_dtoa_r+0xa00>
 800a646:	9a06      	ldr	r2, [sp, #24]
 800a648:	b992      	cbnz	r2, 800a670 <_dtoa_r+0xa00>
 800a64a:	9a07      	ldr	r2, [sp, #28]
 800a64c:	b982      	cbnz	r2, 800a670 <_dtoa_r+0xa00>
 800a64e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a652:	d029      	beq.n	800a6a8 <_dtoa_r+0xa38>
 800a654:	9b00      	ldr	r3, [sp, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	dd01      	ble.n	800a65e <_dtoa_r+0x9ee>
 800a65a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a65e:	9b05      	ldr	r3, [sp, #20]
 800a660:	1c5d      	adds	r5, r3, #1
 800a662:	f883 8000 	strb.w	r8, [r3]
 800a666:	e782      	b.n	800a56e <_dtoa_r+0x8fe>
 800a668:	4630      	mov	r0, r6
 800a66a:	e7c2      	b.n	800a5f2 <_dtoa_r+0x982>
 800a66c:	2301      	movs	r3, #1
 800a66e:	e7e3      	b.n	800a638 <_dtoa_r+0x9c8>
 800a670:	9a00      	ldr	r2, [sp, #0]
 800a672:	2a00      	cmp	r2, #0
 800a674:	db04      	blt.n	800a680 <_dtoa_r+0xa10>
 800a676:	d125      	bne.n	800a6c4 <_dtoa_r+0xa54>
 800a678:	9a06      	ldr	r2, [sp, #24]
 800a67a:	bb1a      	cbnz	r2, 800a6c4 <_dtoa_r+0xa54>
 800a67c:	9a07      	ldr	r2, [sp, #28]
 800a67e:	bb0a      	cbnz	r2, 800a6c4 <_dtoa_r+0xa54>
 800a680:	2b00      	cmp	r3, #0
 800a682:	ddec      	ble.n	800a65e <_dtoa_r+0x9ee>
 800a684:	2201      	movs	r2, #1
 800a686:	9904      	ldr	r1, [sp, #16]
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 fa85 	bl	800ab98 <__lshift>
 800a68e:	4639      	mov	r1, r7
 800a690:	9004      	str	r0, [sp, #16]
 800a692:	f000 fad5 	bl	800ac40 <__mcmp>
 800a696:	2800      	cmp	r0, #0
 800a698:	dc03      	bgt.n	800a6a2 <_dtoa_r+0xa32>
 800a69a:	d1e0      	bne.n	800a65e <_dtoa_r+0x9ee>
 800a69c:	f018 0f01 	tst.w	r8, #1
 800a6a0:	d0dd      	beq.n	800a65e <_dtoa_r+0x9ee>
 800a6a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a6a6:	d1d8      	bne.n	800a65a <_dtoa_r+0x9ea>
 800a6a8:	9b05      	ldr	r3, [sp, #20]
 800a6aa:	9a05      	ldr	r2, [sp, #20]
 800a6ac:	1c5d      	adds	r5, r3, #1
 800a6ae:	2339      	movs	r3, #57	; 0x39
 800a6b0:	7013      	strb	r3, [r2, #0]
 800a6b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6b6:	2b39      	cmp	r3, #57	; 0x39
 800a6b8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a6bc:	d04f      	beq.n	800a75e <_dtoa_r+0xaee>
 800a6be:	3301      	adds	r3, #1
 800a6c0:	7013      	strb	r3, [r2, #0]
 800a6c2:	e754      	b.n	800a56e <_dtoa_r+0x8fe>
 800a6c4:	9a05      	ldr	r2, [sp, #20]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f102 0501 	add.w	r5, r2, #1
 800a6cc:	dd06      	ble.n	800a6dc <_dtoa_r+0xa6c>
 800a6ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a6d2:	d0e9      	beq.n	800a6a8 <_dtoa_r+0xa38>
 800a6d4:	f108 0801 	add.w	r8, r8, #1
 800a6d8:	9b05      	ldr	r3, [sp, #20]
 800a6da:	e7c2      	b.n	800a662 <_dtoa_r+0x9f2>
 800a6dc:	9a02      	ldr	r2, [sp, #8]
 800a6de:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a6e2:	eba5 030b 	sub.w	r3, r5, fp
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d021      	beq.n	800a72e <_dtoa_r+0xabe>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	220a      	movs	r2, #10
 800a6ee:	9904      	ldr	r1, [sp, #16]
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f000 f8db 	bl	800a8ac <__multadd>
 800a6f6:	45b1      	cmp	r9, r6
 800a6f8:	9004      	str	r0, [sp, #16]
 800a6fa:	f04f 0300 	mov.w	r3, #0
 800a6fe:	f04f 020a 	mov.w	r2, #10
 800a702:	4649      	mov	r1, r9
 800a704:	4620      	mov	r0, r4
 800a706:	d105      	bne.n	800a714 <_dtoa_r+0xaa4>
 800a708:	f000 f8d0 	bl	800a8ac <__multadd>
 800a70c:	4681      	mov	r9, r0
 800a70e:	4606      	mov	r6, r0
 800a710:	9505      	str	r5, [sp, #20]
 800a712:	e776      	b.n	800a602 <_dtoa_r+0x992>
 800a714:	f000 f8ca 	bl	800a8ac <__multadd>
 800a718:	4631      	mov	r1, r6
 800a71a:	4681      	mov	r9, r0
 800a71c:	2300      	movs	r3, #0
 800a71e:	220a      	movs	r2, #10
 800a720:	4620      	mov	r0, r4
 800a722:	f000 f8c3 	bl	800a8ac <__multadd>
 800a726:	4606      	mov	r6, r0
 800a728:	e7f2      	b.n	800a710 <_dtoa_r+0xaa0>
 800a72a:	f04f 0900 	mov.w	r9, #0
 800a72e:	2201      	movs	r2, #1
 800a730:	9904      	ldr	r1, [sp, #16]
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fa30 	bl	800ab98 <__lshift>
 800a738:	4639      	mov	r1, r7
 800a73a:	9004      	str	r0, [sp, #16]
 800a73c:	f000 fa80 	bl	800ac40 <__mcmp>
 800a740:	2800      	cmp	r0, #0
 800a742:	dcb6      	bgt.n	800a6b2 <_dtoa_r+0xa42>
 800a744:	d102      	bne.n	800a74c <_dtoa_r+0xadc>
 800a746:	f018 0f01 	tst.w	r8, #1
 800a74a:	d1b2      	bne.n	800a6b2 <_dtoa_r+0xa42>
 800a74c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a750:	2b30      	cmp	r3, #48	; 0x30
 800a752:	f105 32ff 	add.w	r2, r5, #4294967295
 800a756:	f47f af0a 	bne.w	800a56e <_dtoa_r+0x8fe>
 800a75a:	4615      	mov	r5, r2
 800a75c:	e7f6      	b.n	800a74c <_dtoa_r+0xadc>
 800a75e:	4593      	cmp	fp, r2
 800a760:	d105      	bne.n	800a76e <_dtoa_r+0xafe>
 800a762:	2331      	movs	r3, #49	; 0x31
 800a764:	f10a 0a01 	add.w	sl, sl, #1
 800a768:	f88b 3000 	strb.w	r3, [fp]
 800a76c:	e6ff      	b.n	800a56e <_dtoa_r+0x8fe>
 800a76e:	4615      	mov	r5, r2
 800a770:	e79f      	b.n	800a6b2 <_dtoa_r+0xa42>
 800a772:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a7d8 <_dtoa_r+0xb68>
 800a776:	e007      	b.n	800a788 <_dtoa_r+0xb18>
 800a778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a77a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a7dc <_dtoa_r+0xb6c>
 800a77e:	b11b      	cbz	r3, 800a788 <_dtoa_r+0xb18>
 800a780:	f10b 0308 	add.w	r3, fp, #8
 800a784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	4658      	mov	r0, fp
 800a78a:	b017      	add	sp, #92	; 0x5c
 800a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a790:	9b06      	ldr	r3, [sp, #24]
 800a792:	2b01      	cmp	r3, #1
 800a794:	f77f ae35 	ble.w	800a402 <_dtoa_r+0x792>
 800a798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a79a:	9307      	str	r3, [sp, #28]
 800a79c:	e649      	b.n	800a432 <_dtoa_r+0x7c2>
 800a79e:	9b02      	ldr	r3, [sp, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dc03      	bgt.n	800a7ac <_dtoa_r+0xb3c>
 800a7a4:	9b06      	ldr	r3, [sp, #24]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	f73f aecc 	bgt.w	800a544 <_dtoa_r+0x8d4>
 800a7ac:	465d      	mov	r5, fp
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	9804      	ldr	r0, [sp, #16]
 800a7b2:	f7ff f9cf 	bl	8009b54 <quorem>
 800a7b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a7ba:	f805 8b01 	strb.w	r8, [r5], #1
 800a7be:	9a02      	ldr	r2, [sp, #8]
 800a7c0:	eba5 030b 	sub.w	r3, r5, fp
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	ddb0      	ble.n	800a72a <_dtoa_r+0xaba>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	220a      	movs	r2, #10
 800a7cc:	9904      	ldr	r1, [sp, #16]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 f86c 	bl	800a8ac <__multadd>
 800a7d4:	9004      	str	r0, [sp, #16]
 800a7d6:	e7ea      	b.n	800a7ae <_dtoa_r+0xb3e>
 800a7d8:	0800b1f8 	.word	0x0800b1f8
 800a7dc:	0800b21c 	.word	0x0800b21c

0800a7e0 <_localeconv_r>:
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <_localeconv_r+0x14>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6a18      	ldr	r0, [r3, #32]
 800a7e6:	4b04      	ldr	r3, [pc, #16]	; (800a7f8 <_localeconv_r+0x18>)
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	bf08      	it	eq
 800a7ec:	4618      	moveq	r0, r3
 800a7ee:	30f0      	adds	r0, #240	; 0xf0
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	20000188 	.word	0x20000188
 800a7f8:	200001ec 	.word	0x200001ec

0800a7fc <memcpy>:
 800a7fc:	b510      	push	{r4, lr}
 800a7fe:	1e43      	subs	r3, r0, #1
 800a800:	440a      	add	r2, r1
 800a802:	4291      	cmp	r1, r2
 800a804:	d100      	bne.n	800a808 <memcpy+0xc>
 800a806:	bd10      	pop	{r4, pc}
 800a808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a80c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a810:	e7f7      	b.n	800a802 <memcpy+0x6>

0800a812 <__malloc_lock>:
 800a812:	4770      	bx	lr

0800a814 <__malloc_unlock>:
 800a814:	4770      	bx	lr

0800a816 <_Balloc>:
 800a816:	b570      	push	{r4, r5, r6, lr}
 800a818:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a81a:	4604      	mov	r4, r0
 800a81c:	460e      	mov	r6, r1
 800a81e:	b93d      	cbnz	r5, 800a830 <_Balloc+0x1a>
 800a820:	2010      	movs	r0, #16
 800a822:	f7fe fc4b 	bl	80090bc <malloc>
 800a826:	6260      	str	r0, [r4, #36]	; 0x24
 800a828:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a82c:	6005      	str	r5, [r0, #0]
 800a82e:	60c5      	str	r5, [r0, #12]
 800a830:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a832:	68eb      	ldr	r3, [r5, #12]
 800a834:	b183      	cbz	r3, 800a858 <_Balloc+0x42>
 800a836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a83e:	b9b8      	cbnz	r0, 800a870 <_Balloc+0x5a>
 800a840:	2101      	movs	r1, #1
 800a842:	fa01 f506 	lsl.w	r5, r1, r6
 800a846:	1d6a      	adds	r2, r5, #5
 800a848:	0092      	lsls	r2, r2, #2
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fabe 	bl	800adcc <_calloc_r>
 800a850:	b160      	cbz	r0, 800a86c <_Balloc+0x56>
 800a852:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a856:	e00e      	b.n	800a876 <_Balloc+0x60>
 800a858:	2221      	movs	r2, #33	; 0x21
 800a85a:	2104      	movs	r1, #4
 800a85c:	4620      	mov	r0, r4
 800a85e:	f000 fab5 	bl	800adcc <_calloc_r>
 800a862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a864:	60e8      	str	r0, [r5, #12]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e4      	bne.n	800a836 <_Balloc+0x20>
 800a86c:	2000      	movs	r0, #0
 800a86e:	bd70      	pop	{r4, r5, r6, pc}
 800a870:	6802      	ldr	r2, [r0, #0]
 800a872:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a876:	2300      	movs	r3, #0
 800a878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a87c:	e7f7      	b.n	800a86e <_Balloc+0x58>

0800a87e <_Bfree>:
 800a87e:	b570      	push	{r4, r5, r6, lr}
 800a880:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a882:	4606      	mov	r6, r0
 800a884:	460d      	mov	r5, r1
 800a886:	b93c      	cbnz	r4, 800a898 <_Bfree+0x1a>
 800a888:	2010      	movs	r0, #16
 800a88a:	f7fe fc17 	bl	80090bc <malloc>
 800a88e:	6270      	str	r0, [r6, #36]	; 0x24
 800a890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a894:	6004      	str	r4, [r0, #0]
 800a896:	60c4      	str	r4, [r0, #12]
 800a898:	b13d      	cbz	r5, 800a8aa <_Bfree+0x2c>
 800a89a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a89c:	686a      	ldr	r2, [r5, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8a4:	6029      	str	r1, [r5, #0]
 800a8a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}

0800a8ac <__multadd>:
 800a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b0:	690d      	ldr	r5, [r1, #16]
 800a8b2:	461f      	mov	r7, r3
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	f101 0c14 	add.w	ip, r1, #20
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f8dc 0000 	ldr.w	r0, [ip]
 800a8c2:	b281      	uxth	r1, r0
 800a8c4:	fb02 7101 	mla	r1, r2, r1, r7
 800a8c8:	0c0f      	lsrs	r7, r1, #16
 800a8ca:	0c00      	lsrs	r0, r0, #16
 800a8cc:	fb02 7000 	mla	r0, r2, r0, r7
 800a8d0:	b289      	uxth	r1, r1
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a8d8:	429d      	cmp	r5, r3
 800a8da:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a8de:	f84c 1b04 	str.w	r1, [ip], #4
 800a8e2:	dcec      	bgt.n	800a8be <__multadd+0x12>
 800a8e4:	b1d7      	cbz	r7, 800a91c <__multadd+0x70>
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	dc12      	bgt.n	800a912 <__multadd+0x66>
 800a8ec:	6861      	ldr	r1, [r4, #4]
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	3101      	adds	r1, #1
 800a8f2:	f7ff ff90 	bl	800a816 <_Balloc>
 800a8f6:	6922      	ldr	r2, [r4, #16]
 800a8f8:	3202      	adds	r2, #2
 800a8fa:	f104 010c 	add.w	r1, r4, #12
 800a8fe:	4680      	mov	r8, r0
 800a900:	0092      	lsls	r2, r2, #2
 800a902:	300c      	adds	r0, #12
 800a904:	f7ff ff7a 	bl	800a7fc <memcpy>
 800a908:	4621      	mov	r1, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7ff ffb7 	bl	800a87e <_Bfree>
 800a910:	4644      	mov	r4, r8
 800a912:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a916:	3501      	adds	r5, #1
 800a918:	615f      	str	r7, [r3, #20]
 800a91a:	6125      	str	r5, [r4, #16]
 800a91c:	4620      	mov	r0, r4
 800a91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a922 <__hi0bits>:
 800a922:	0c02      	lsrs	r2, r0, #16
 800a924:	0412      	lsls	r2, r2, #16
 800a926:	4603      	mov	r3, r0
 800a928:	b9b2      	cbnz	r2, 800a958 <__hi0bits+0x36>
 800a92a:	0403      	lsls	r3, r0, #16
 800a92c:	2010      	movs	r0, #16
 800a92e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a932:	bf04      	itt	eq
 800a934:	021b      	lsleq	r3, r3, #8
 800a936:	3008      	addeq	r0, #8
 800a938:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a93c:	bf04      	itt	eq
 800a93e:	011b      	lsleq	r3, r3, #4
 800a940:	3004      	addeq	r0, #4
 800a942:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a946:	bf04      	itt	eq
 800a948:	009b      	lsleq	r3, r3, #2
 800a94a:	3002      	addeq	r0, #2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	db06      	blt.n	800a95e <__hi0bits+0x3c>
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	d503      	bpl.n	800a95c <__hi0bits+0x3a>
 800a954:	3001      	adds	r0, #1
 800a956:	4770      	bx	lr
 800a958:	2000      	movs	r0, #0
 800a95a:	e7e8      	b.n	800a92e <__hi0bits+0xc>
 800a95c:	2020      	movs	r0, #32
 800a95e:	4770      	bx	lr

0800a960 <__lo0bits>:
 800a960:	6803      	ldr	r3, [r0, #0]
 800a962:	f013 0207 	ands.w	r2, r3, #7
 800a966:	4601      	mov	r1, r0
 800a968:	d00b      	beq.n	800a982 <__lo0bits+0x22>
 800a96a:	07da      	lsls	r2, r3, #31
 800a96c:	d423      	bmi.n	800a9b6 <__lo0bits+0x56>
 800a96e:	0798      	lsls	r0, r3, #30
 800a970:	bf49      	itett	mi
 800a972:	085b      	lsrmi	r3, r3, #1
 800a974:	089b      	lsrpl	r3, r3, #2
 800a976:	2001      	movmi	r0, #1
 800a978:	600b      	strmi	r3, [r1, #0]
 800a97a:	bf5c      	itt	pl
 800a97c:	600b      	strpl	r3, [r1, #0]
 800a97e:	2002      	movpl	r0, #2
 800a980:	4770      	bx	lr
 800a982:	b298      	uxth	r0, r3
 800a984:	b9a8      	cbnz	r0, 800a9b2 <__lo0bits+0x52>
 800a986:	0c1b      	lsrs	r3, r3, #16
 800a988:	2010      	movs	r0, #16
 800a98a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a98e:	bf04      	itt	eq
 800a990:	0a1b      	lsreq	r3, r3, #8
 800a992:	3008      	addeq	r0, #8
 800a994:	071a      	lsls	r2, r3, #28
 800a996:	bf04      	itt	eq
 800a998:	091b      	lsreq	r3, r3, #4
 800a99a:	3004      	addeq	r0, #4
 800a99c:	079a      	lsls	r2, r3, #30
 800a99e:	bf04      	itt	eq
 800a9a0:	089b      	lsreq	r3, r3, #2
 800a9a2:	3002      	addeq	r0, #2
 800a9a4:	07da      	lsls	r2, r3, #31
 800a9a6:	d402      	bmi.n	800a9ae <__lo0bits+0x4e>
 800a9a8:	085b      	lsrs	r3, r3, #1
 800a9aa:	d006      	beq.n	800a9ba <__lo0bits+0x5a>
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	600b      	str	r3, [r1, #0]
 800a9b0:	4770      	bx	lr
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	e7e9      	b.n	800a98a <__lo0bits+0x2a>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	4770      	bx	lr
 800a9ba:	2020      	movs	r0, #32
 800a9bc:	4770      	bx	lr

0800a9be <__i2b>:
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	f7ff ff27 	bl	800a816 <_Balloc>
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	6144      	str	r4, [r0, #20]
 800a9cc:	6102      	str	r2, [r0, #16]
 800a9ce:	bd10      	pop	{r4, pc}

0800a9d0 <__multiply>:
 800a9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	690a      	ldr	r2, [r1, #16]
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	bfb8      	it	lt
 800a9de:	460b      	movlt	r3, r1
 800a9e0:	4688      	mov	r8, r1
 800a9e2:	bfbc      	itt	lt
 800a9e4:	46a0      	movlt	r8, r4
 800a9e6:	461c      	movlt	r4, r3
 800a9e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9f8:	eb07 0609 	add.w	r6, r7, r9
 800a9fc:	42b3      	cmp	r3, r6
 800a9fe:	bfb8      	it	lt
 800aa00:	3101      	addlt	r1, #1
 800aa02:	f7ff ff08 	bl	800a816 <_Balloc>
 800aa06:	f100 0514 	add.w	r5, r0, #20
 800aa0a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aa0e:	462b      	mov	r3, r5
 800aa10:	2200      	movs	r2, #0
 800aa12:	4573      	cmp	r3, lr
 800aa14:	d316      	bcc.n	800aa44 <__multiply+0x74>
 800aa16:	f104 0214 	add.w	r2, r4, #20
 800aa1a:	f108 0114 	add.w	r1, r8, #20
 800aa1e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aa22:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	9b00      	ldr	r3, [sp, #0]
 800aa2a:	9201      	str	r2, [sp, #4]
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d80c      	bhi.n	800aa4a <__multiply+0x7a>
 800aa30:	2e00      	cmp	r6, #0
 800aa32:	dd03      	ble.n	800aa3c <__multiply+0x6c>
 800aa34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d05d      	beq.n	800aaf8 <__multiply+0x128>
 800aa3c:	6106      	str	r6, [r0, #16]
 800aa3e:	b003      	add	sp, #12
 800aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa44:	f843 2b04 	str.w	r2, [r3], #4
 800aa48:	e7e3      	b.n	800aa12 <__multiply+0x42>
 800aa4a:	f8b2 b000 	ldrh.w	fp, [r2]
 800aa4e:	f1bb 0f00 	cmp.w	fp, #0
 800aa52:	d023      	beq.n	800aa9c <__multiply+0xcc>
 800aa54:	4689      	mov	r9, r1
 800aa56:	46ac      	mov	ip, r5
 800aa58:	f04f 0800 	mov.w	r8, #0
 800aa5c:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa60:	f8dc a000 	ldr.w	sl, [ip]
 800aa64:	b2a3      	uxth	r3, r4
 800aa66:	fa1f fa8a 	uxth.w	sl, sl
 800aa6a:	fb0b a303 	mla	r3, fp, r3, sl
 800aa6e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa72:	f8dc 4000 	ldr.w	r4, [ip]
 800aa76:	4443      	add	r3, r8
 800aa78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa7c:	fb0b 840a 	mla	r4, fp, sl, r8
 800aa80:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aa84:	46e2      	mov	sl, ip
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa8c:	454f      	cmp	r7, r9
 800aa8e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa92:	f84a 3b04 	str.w	r3, [sl], #4
 800aa96:	d82b      	bhi.n	800aaf0 <__multiply+0x120>
 800aa98:	f8cc 8004 	str.w	r8, [ip, #4]
 800aa9c:	9b01      	ldr	r3, [sp, #4]
 800aa9e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aaa2:	3204      	adds	r2, #4
 800aaa4:	f1ba 0f00 	cmp.w	sl, #0
 800aaa8:	d020      	beq.n	800aaec <__multiply+0x11c>
 800aaaa:	682b      	ldr	r3, [r5, #0]
 800aaac:	4689      	mov	r9, r1
 800aaae:	46a8      	mov	r8, r5
 800aab0:	f04f 0b00 	mov.w	fp, #0
 800aab4:	f8b9 c000 	ldrh.w	ip, [r9]
 800aab8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aabc:	fb0a 440c 	mla	r4, sl, ip, r4
 800aac0:	445c      	add	r4, fp
 800aac2:	46c4      	mov	ip, r8
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aaca:	f84c 3b04 	str.w	r3, [ip], #4
 800aace:	f859 3b04 	ldr.w	r3, [r9], #4
 800aad2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aad6:	0c1b      	lsrs	r3, r3, #16
 800aad8:	fb0a b303 	mla	r3, sl, r3, fp
 800aadc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aae0:	454f      	cmp	r7, r9
 800aae2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aae6:	d805      	bhi.n	800aaf4 <__multiply+0x124>
 800aae8:	f8c8 3004 	str.w	r3, [r8, #4]
 800aaec:	3504      	adds	r5, #4
 800aaee:	e79b      	b.n	800aa28 <__multiply+0x58>
 800aaf0:	46d4      	mov	ip, sl
 800aaf2:	e7b3      	b.n	800aa5c <__multiply+0x8c>
 800aaf4:	46e0      	mov	r8, ip
 800aaf6:	e7dd      	b.n	800aab4 <__multiply+0xe4>
 800aaf8:	3e01      	subs	r6, #1
 800aafa:	e799      	b.n	800aa30 <__multiply+0x60>

0800aafc <__pow5mult>:
 800aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	4615      	mov	r5, r2
 800ab02:	f012 0203 	ands.w	r2, r2, #3
 800ab06:	4606      	mov	r6, r0
 800ab08:	460f      	mov	r7, r1
 800ab0a:	d007      	beq.n	800ab1c <__pow5mult+0x20>
 800ab0c:	3a01      	subs	r2, #1
 800ab0e:	4c21      	ldr	r4, [pc, #132]	; (800ab94 <__pow5mult+0x98>)
 800ab10:	2300      	movs	r3, #0
 800ab12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab16:	f7ff fec9 	bl	800a8ac <__multadd>
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	10ad      	asrs	r5, r5, #2
 800ab1e:	d035      	beq.n	800ab8c <__pow5mult+0x90>
 800ab20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab22:	b93c      	cbnz	r4, 800ab34 <__pow5mult+0x38>
 800ab24:	2010      	movs	r0, #16
 800ab26:	f7fe fac9 	bl	80090bc <malloc>
 800ab2a:	6270      	str	r0, [r6, #36]	; 0x24
 800ab2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab30:	6004      	str	r4, [r0, #0]
 800ab32:	60c4      	str	r4, [r0, #12]
 800ab34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab3c:	b94c      	cbnz	r4, 800ab52 <__pow5mult+0x56>
 800ab3e:	f240 2171 	movw	r1, #625	; 0x271
 800ab42:	4630      	mov	r0, r6
 800ab44:	f7ff ff3b 	bl	800a9be <__i2b>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab4e:	4604      	mov	r4, r0
 800ab50:	6003      	str	r3, [r0, #0]
 800ab52:	f04f 0800 	mov.w	r8, #0
 800ab56:	07eb      	lsls	r3, r5, #31
 800ab58:	d50a      	bpl.n	800ab70 <__pow5mult+0x74>
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ff36 	bl	800a9d0 <__multiply>
 800ab64:	4639      	mov	r1, r7
 800ab66:	4681      	mov	r9, r0
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff fe88 	bl	800a87e <_Bfree>
 800ab6e:	464f      	mov	r7, r9
 800ab70:	106d      	asrs	r5, r5, #1
 800ab72:	d00b      	beq.n	800ab8c <__pow5mult+0x90>
 800ab74:	6820      	ldr	r0, [r4, #0]
 800ab76:	b938      	cbnz	r0, 800ab88 <__pow5mult+0x8c>
 800ab78:	4622      	mov	r2, r4
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff ff27 	bl	800a9d0 <__multiply>
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	f8c0 8000 	str.w	r8, [r0]
 800ab88:	4604      	mov	r4, r0
 800ab8a:	e7e4      	b.n	800ab56 <__pow5mult+0x5a>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab92:	bf00      	nop
 800ab94:	0800b320 	.word	0x0800b320

0800ab98 <__lshift>:
 800ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	6849      	ldr	r1, [r1, #4]
 800aba6:	eb0a 0903 	add.w	r9, sl, r3
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	4607      	mov	r7, r0
 800abae:	4616      	mov	r6, r2
 800abb0:	f109 0501 	add.w	r5, r9, #1
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	db32      	blt.n	800ac1e <__lshift+0x86>
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff fe2c 	bl	800a816 <_Balloc>
 800abbe:	2300      	movs	r3, #0
 800abc0:	4680      	mov	r8, r0
 800abc2:	f100 0114 	add.w	r1, r0, #20
 800abc6:	461a      	mov	r2, r3
 800abc8:	4553      	cmp	r3, sl
 800abca:	db2b      	blt.n	800ac24 <__lshift+0x8c>
 800abcc:	6920      	ldr	r0, [r4, #16]
 800abce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abd2:	f104 0314 	add.w	r3, r4, #20
 800abd6:	f016 021f 	ands.w	r2, r6, #31
 800abda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abde:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abe2:	d025      	beq.n	800ac30 <__lshift+0x98>
 800abe4:	f1c2 0e20 	rsb	lr, r2, #32
 800abe8:	2000      	movs	r0, #0
 800abea:	681e      	ldr	r6, [r3, #0]
 800abec:	468a      	mov	sl, r1
 800abee:	4096      	lsls	r6, r2
 800abf0:	4330      	orrs	r0, r6
 800abf2:	f84a 0b04 	str.w	r0, [sl], #4
 800abf6:	f853 0b04 	ldr.w	r0, [r3], #4
 800abfa:	459c      	cmp	ip, r3
 800abfc:	fa20 f00e 	lsr.w	r0, r0, lr
 800ac00:	d814      	bhi.n	800ac2c <__lshift+0x94>
 800ac02:	6048      	str	r0, [r1, #4]
 800ac04:	b108      	cbz	r0, 800ac0a <__lshift+0x72>
 800ac06:	f109 0502 	add.w	r5, r9, #2
 800ac0a:	3d01      	subs	r5, #1
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ac12:	4621      	mov	r1, r4
 800ac14:	f7ff fe33 	bl	800a87e <_Bfree>
 800ac18:	4640      	mov	r0, r8
 800ac1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1e:	3101      	adds	r1, #1
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	e7c7      	b.n	800abb4 <__lshift+0x1c>
 800ac24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	e7cd      	b.n	800abc8 <__lshift+0x30>
 800ac2c:	4651      	mov	r1, sl
 800ac2e:	e7dc      	b.n	800abea <__lshift+0x52>
 800ac30:	3904      	subs	r1, #4
 800ac32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac36:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac3a:	459c      	cmp	ip, r3
 800ac3c:	d8f9      	bhi.n	800ac32 <__lshift+0x9a>
 800ac3e:	e7e4      	b.n	800ac0a <__lshift+0x72>

0800ac40 <__mcmp>:
 800ac40:	6903      	ldr	r3, [r0, #16]
 800ac42:	690a      	ldr	r2, [r1, #16]
 800ac44:	1a9b      	subs	r3, r3, r2
 800ac46:	b530      	push	{r4, r5, lr}
 800ac48:	d10c      	bne.n	800ac64 <__mcmp+0x24>
 800ac4a:	0092      	lsls	r2, r2, #2
 800ac4c:	3014      	adds	r0, #20
 800ac4e:	3114      	adds	r1, #20
 800ac50:	1884      	adds	r4, r0, r2
 800ac52:	4411      	add	r1, r2
 800ac54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac5c:	4295      	cmp	r5, r2
 800ac5e:	d003      	beq.n	800ac68 <__mcmp+0x28>
 800ac60:	d305      	bcc.n	800ac6e <__mcmp+0x2e>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4618      	mov	r0, r3
 800ac66:	bd30      	pop	{r4, r5, pc}
 800ac68:	42a0      	cmp	r0, r4
 800ac6a:	d3f3      	bcc.n	800ac54 <__mcmp+0x14>
 800ac6c:	e7fa      	b.n	800ac64 <__mcmp+0x24>
 800ac6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac72:	e7f7      	b.n	800ac64 <__mcmp+0x24>

0800ac74 <__mdiff>:
 800ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	460d      	mov	r5, r1
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	4628      	mov	r0, r5
 800ac80:	4614      	mov	r4, r2
 800ac82:	f7ff ffdd 	bl	800ac40 <__mcmp>
 800ac86:	1e06      	subs	r6, r0, #0
 800ac88:	d108      	bne.n	800ac9c <__mdiff+0x28>
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	f7ff fdc2 	bl	800a816 <_Balloc>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9c:	bfa4      	itt	ge
 800ac9e:	4623      	movge	r3, r4
 800aca0:	462c      	movge	r4, r5
 800aca2:	4638      	mov	r0, r7
 800aca4:	6861      	ldr	r1, [r4, #4]
 800aca6:	bfa6      	itte	ge
 800aca8:	461d      	movge	r5, r3
 800acaa:	2600      	movge	r6, #0
 800acac:	2601      	movlt	r6, #1
 800acae:	f7ff fdb2 	bl	800a816 <_Balloc>
 800acb2:	692b      	ldr	r3, [r5, #16]
 800acb4:	60c6      	str	r6, [r0, #12]
 800acb6:	6926      	ldr	r6, [r4, #16]
 800acb8:	f105 0914 	add.w	r9, r5, #20
 800acbc:	f104 0214 	add.w	r2, r4, #20
 800acc0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800acc4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800acc8:	f100 0514 	add.w	r5, r0, #20
 800accc:	f04f 0e00 	mov.w	lr, #0
 800acd0:	f852 ab04 	ldr.w	sl, [r2], #4
 800acd4:	f859 4b04 	ldr.w	r4, [r9], #4
 800acd8:	fa1e f18a 	uxtah	r1, lr, sl
 800acdc:	b2a3      	uxth	r3, r4
 800acde:	1ac9      	subs	r1, r1, r3
 800ace0:	0c23      	lsrs	r3, r4, #16
 800ace2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ace6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800acea:	b289      	uxth	r1, r1
 800acec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800acf0:	45c8      	cmp	r8, r9
 800acf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800acf6:	4694      	mov	ip, r2
 800acf8:	f845 3b04 	str.w	r3, [r5], #4
 800acfc:	d8e8      	bhi.n	800acd0 <__mdiff+0x5c>
 800acfe:	45bc      	cmp	ip, r7
 800ad00:	d304      	bcc.n	800ad0c <__mdiff+0x98>
 800ad02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ad06:	b183      	cbz	r3, 800ad2a <__mdiff+0xb6>
 800ad08:	6106      	str	r6, [r0, #16]
 800ad0a:	e7c5      	b.n	800ac98 <__mdiff+0x24>
 800ad0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad10:	fa1e f381 	uxtah	r3, lr, r1
 800ad14:	141a      	asrs	r2, r3, #16
 800ad16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ad24:	f845 3b04 	str.w	r3, [r5], #4
 800ad28:	e7e9      	b.n	800acfe <__mdiff+0x8a>
 800ad2a:	3e01      	subs	r6, #1
 800ad2c:	e7e9      	b.n	800ad02 <__mdiff+0x8e>

0800ad2e <__d2b>:
 800ad2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad32:	460e      	mov	r6, r1
 800ad34:	2101      	movs	r1, #1
 800ad36:	ec59 8b10 	vmov	r8, r9, d0
 800ad3a:	4615      	mov	r5, r2
 800ad3c:	f7ff fd6b 	bl	800a816 <_Balloc>
 800ad40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ad44:	4607      	mov	r7, r0
 800ad46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad4a:	bb34      	cbnz	r4, 800ad9a <__d2b+0x6c>
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	f1b8 0300 	subs.w	r3, r8, #0
 800ad52:	d027      	beq.n	800ada4 <__d2b+0x76>
 800ad54:	a802      	add	r0, sp, #8
 800ad56:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ad5a:	f7ff fe01 	bl	800a960 <__lo0bits>
 800ad5e:	9900      	ldr	r1, [sp, #0]
 800ad60:	b1f0      	cbz	r0, 800ada0 <__d2b+0x72>
 800ad62:	9a01      	ldr	r2, [sp, #4]
 800ad64:	f1c0 0320 	rsb	r3, r0, #32
 800ad68:	fa02 f303 	lsl.w	r3, r2, r3
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	40c2      	lsrs	r2, r0
 800ad70:	617b      	str	r3, [r7, #20]
 800ad72:	9201      	str	r2, [sp, #4]
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	61bb      	str	r3, [r7, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bf14      	ite	ne
 800ad7c:	2102      	movne	r1, #2
 800ad7e:	2101      	moveq	r1, #1
 800ad80:	6139      	str	r1, [r7, #16]
 800ad82:	b1c4      	cbz	r4, 800adb6 <__d2b+0x88>
 800ad84:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ad88:	4404      	add	r4, r0
 800ad8a:	6034      	str	r4, [r6, #0]
 800ad8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad90:	6028      	str	r0, [r5, #0]
 800ad92:	4638      	mov	r0, r7
 800ad94:	b003      	add	sp, #12
 800ad96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad9e:	e7d5      	b.n	800ad4c <__d2b+0x1e>
 800ada0:	6179      	str	r1, [r7, #20]
 800ada2:	e7e7      	b.n	800ad74 <__d2b+0x46>
 800ada4:	a801      	add	r0, sp, #4
 800ada6:	f7ff fddb 	bl	800a960 <__lo0bits>
 800adaa:	9b01      	ldr	r3, [sp, #4]
 800adac:	617b      	str	r3, [r7, #20]
 800adae:	2101      	movs	r1, #1
 800adb0:	6139      	str	r1, [r7, #16]
 800adb2:	3020      	adds	r0, #32
 800adb4:	e7e5      	b.n	800ad82 <__d2b+0x54>
 800adb6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800adba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adbe:	6030      	str	r0, [r6, #0]
 800adc0:	6918      	ldr	r0, [r3, #16]
 800adc2:	f7ff fdae 	bl	800a922 <__hi0bits>
 800adc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800adca:	e7e1      	b.n	800ad90 <__d2b+0x62>

0800adcc <_calloc_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	fb02 f401 	mul.w	r4, r2, r1
 800add2:	4621      	mov	r1, r4
 800add4:	f7fe f9d8 	bl	8009188 <_malloc_r>
 800add8:	4605      	mov	r5, r0
 800adda:	b118      	cbz	r0, 800ade4 <_calloc_r+0x18>
 800addc:	4622      	mov	r2, r4
 800adde:	2100      	movs	r1, #0
 800ade0:	f7fe f97c 	bl	80090dc <memset>
 800ade4:	4628      	mov	r0, r5
 800ade6:	bd38      	pop	{r3, r4, r5, pc}

0800ade8 <__ssputs_r>:
 800ade8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adec:	688e      	ldr	r6, [r1, #8]
 800adee:	429e      	cmp	r6, r3
 800adf0:	4682      	mov	sl, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	4690      	mov	r8, r2
 800adf6:	4699      	mov	r9, r3
 800adf8:	d837      	bhi.n	800ae6a <__ssputs_r+0x82>
 800adfa:	898a      	ldrh	r2, [r1, #12]
 800adfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae00:	d031      	beq.n	800ae66 <__ssputs_r+0x7e>
 800ae02:	6825      	ldr	r5, [r4, #0]
 800ae04:	6909      	ldr	r1, [r1, #16]
 800ae06:	1a6f      	subs	r7, r5, r1
 800ae08:	6965      	ldr	r5, [r4, #20]
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae10:	fb95 f5f3 	sdiv	r5, r5, r3
 800ae14:	f109 0301 	add.w	r3, r9, #1
 800ae18:	443b      	add	r3, r7
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	bf38      	it	cc
 800ae1e:	461d      	movcc	r5, r3
 800ae20:	0553      	lsls	r3, r2, #21
 800ae22:	d530      	bpl.n	800ae86 <__ssputs_r+0x9e>
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7fe f9af 	bl	8009188 <_malloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	b950      	cbnz	r0, 800ae44 <__ssputs_r+0x5c>
 800ae2e:	230c      	movs	r3, #12
 800ae30:	f8ca 3000 	str.w	r3, [sl]
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae44:	463a      	mov	r2, r7
 800ae46:	6921      	ldr	r1, [r4, #16]
 800ae48:	f7ff fcd8 	bl	800a7fc <memcpy>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	6126      	str	r6, [r4, #16]
 800ae5a:	6165      	str	r5, [r4, #20]
 800ae5c:	443e      	add	r6, r7
 800ae5e:	1bed      	subs	r5, r5, r7
 800ae60:	6026      	str	r6, [r4, #0]
 800ae62:	60a5      	str	r5, [r4, #8]
 800ae64:	464e      	mov	r6, r9
 800ae66:	454e      	cmp	r6, r9
 800ae68:	d900      	bls.n	800ae6c <__ssputs_r+0x84>
 800ae6a:	464e      	mov	r6, r9
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	4641      	mov	r1, r8
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	f000 f91d 	bl	800b0b0 <memmove>
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	1b9b      	subs	r3, r3, r6
 800ae7a:	60a3      	str	r3, [r4, #8]
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	441e      	add	r6, r3
 800ae80:	6026      	str	r6, [r4, #0]
 800ae82:	2000      	movs	r0, #0
 800ae84:	e7dc      	b.n	800ae40 <__ssputs_r+0x58>
 800ae86:	462a      	mov	r2, r5
 800ae88:	f000 f92b 	bl	800b0e2 <_realloc_r>
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d1e2      	bne.n	800ae58 <__ssputs_r+0x70>
 800ae92:	6921      	ldr	r1, [r4, #16]
 800ae94:	4650      	mov	r0, sl
 800ae96:	f7fe f929 	bl	80090ec <_free_r>
 800ae9a:	e7c8      	b.n	800ae2e <__ssputs_r+0x46>

0800ae9c <_svfiprintf_r>:
 800ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	461d      	mov	r5, r3
 800aea2:	898b      	ldrh	r3, [r1, #12]
 800aea4:	061f      	lsls	r7, r3, #24
 800aea6:	b09d      	sub	sp, #116	; 0x74
 800aea8:	4680      	mov	r8, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	4616      	mov	r6, r2
 800aeae:	d50f      	bpl.n	800aed0 <_svfiprintf_r+0x34>
 800aeb0:	690b      	ldr	r3, [r1, #16]
 800aeb2:	b96b      	cbnz	r3, 800aed0 <_svfiprintf_r+0x34>
 800aeb4:	2140      	movs	r1, #64	; 0x40
 800aeb6:	f7fe f967 	bl	8009188 <_malloc_r>
 800aeba:	6020      	str	r0, [r4, #0]
 800aebc:	6120      	str	r0, [r4, #16]
 800aebe:	b928      	cbnz	r0, 800aecc <_svfiprintf_r+0x30>
 800aec0:	230c      	movs	r3, #12
 800aec2:	f8c8 3000 	str.w	r3, [r8]
 800aec6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeca:	e0c8      	b.n	800b05e <_svfiprintf_r+0x1c2>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	6163      	str	r3, [r4, #20]
 800aed0:	2300      	movs	r3, #0
 800aed2:	9309      	str	r3, [sp, #36]	; 0x24
 800aed4:	2320      	movs	r3, #32
 800aed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeda:	2330      	movs	r3, #48	; 0x30
 800aedc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aee0:	9503      	str	r5, [sp, #12]
 800aee2:	f04f 0b01 	mov.w	fp, #1
 800aee6:	4637      	mov	r7, r6
 800aee8:	463d      	mov	r5, r7
 800aeea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aeee:	b10b      	cbz	r3, 800aef4 <_svfiprintf_r+0x58>
 800aef0:	2b25      	cmp	r3, #37	; 0x25
 800aef2:	d13e      	bne.n	800af72 <_svfiprintf_r+0xd6>
 800aef4:	ebb7 0a06 	subs.w	sl, r7, r6
 800aef8:	d00b      	beq.n	800af12 <_svfiprintf_r+0x76>
 800aefa:	4653      	mov	r3, sl
 800aefc:	4632      	mov	r2, r6
 800aefe:	4621      	mov	r1, r4
 800af00:	4640      	mov	r0, r8
 800af02:	f7ff ff71 	bl	800ade8 <__ssputs_r>
 800af06:	3001      	adds	r0, #1
 800af08:	f000 80a4 	beq.w	800b054 <_svfiprintf_r+0x1b8>
 800af0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0e:	4453      	add	r3, sl
 800af10:	9309      	str	r3, [sp, #36]	; 0x24
 800af12:	783b      	ldrb	r3, [r7, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 809d 	beq.w	800b054 <_svfiprintf_r+0x1b8>
 800af1a:	2300      	movs	r3, #0
 800af1c:	f04f 32ff 	mov.w	r2, #4294967295
 800af20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af24:	9304      	str	r3, [sp, #16]
 800af26:	9307      	str	r3, [sp, #28]
 800af28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af2c:	931a      	str	r3, [sp, #104]	; 0x68
 800af2e:	462f      	mov	r7, r5
 800af30:	2205      	movs	r2, #5
 800af32:	f817 1b01 	ldrb.w	r1, [r7], #1
 800af36:	4850      	ldr	r0, [pc, #320]	; (800b078 <_svfiprintf_r+0x1dc>)
 800af38:	f7f5 f952 	bl	80001e0 <memchr>
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	b9d0      	cbnz	r0, 800af76 <_svfiprintf_r+0xda>
 800af40:	06d9      	lsls	r1, r3, #27
 800af42:	bf44      	itt	mi
 800af44:	2220      	movmi	r2, #32
 800af46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af4a:	071a      	lsls	r2, r3, #28
 800af4c:	bf44      	itt	mi
 800af4e:	222b      	movmi	r2, #43	; 0x2b
 800af50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af54:	782a      	ldrb	r2, [r5, #0]
 800af56:	2a2a      	cmp	r2, #42	; 0x2a
 800af58:	d015      	beq.n	800af86 <_svfiprintf_r+0xea>
 800af5a:	9a07      	ldr	r2, [sp, #28]
 800af5c:	462f      	mov	r7, r5
 800af5e:	2000      	movs	r0, #0
 800af60:	250a      	movs	r5, #10
 800af62:	4639      	mov	r1, r7
 800af64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af68:	3b30      	subs	r3, #48	; 0x30
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	d94d      	bls.n	800b00a <_svfiprintf_r+0x16e>
 800af6e:	b1b8      	cbz	r0, 800afa0 <_svfiprintf_r+0x104>
 800af70:	e00f      	b.n	800af92 <_svfiprintf_r+0xf6>
 800af72:	462f      	mov	r7, r5
 800af74:	e7b8      	b.n	800aee8 <_svfiprintf_r+0x4c>
 800af76:	4a40      	ldr	r2, [pc, #256]	; (800b078 <_svfiprintf_r+0x1dc>)
 800af78:	1a80      	subs	r0, r0, r2
 800af7a:	fa0b f000 	lsl.w	r0, fp, r0
 800af7e:	4318      	orrs	r0, r3
 800af80:	9004      	str	r0, [sp, #16]
 800af82:	463d      	mov	r5, r7
 800af84:	e7d3      	b.n	800af2e <_svfiprintf_r+0x92>
 800af86:	9a03      	ldr	r2, [sp, #12]
 800af88:	1d11      	adds	r1, r2, #4
 800af8a:	6812      	ldr	r2, [r2, #0]
 800af8c:	9103      	str	r1, [sp, #12]
 800af8e:	2a00      	cmp	r2, #0
 800af90:	db01      	blt.n	800af96 <_svfiprintf_r+0xfa>
 800af92:	9207      	str	r2, [sp, #28]
 800af94:	e004      	b.n	800afa0 <_svfiprintf_r+0x104>
 800af96:	4252      	negs	r2, r2
 800af98:	f043 0302 	orr.w	r3, r3, #2
 800af9c:	9207      	str	r2, [sp, #28]
 800af9e:	9304      	str	r3, [sp, #16]
 800afa0:	783b      	ldrb	r3, [r7, #0]
 800afa2:	2b2e      	cmp	r3, #46	; 0x2e
 800afa4:	d10c      	bne.n	800afc0 <_svfiprintf_r+0x124>
 800afa6:	787b      	ldrb	r3, [r7, #1]
 800afa8:	2b2a      	cmp	r3, #42	; 0x2a
 800afaa:	d133      	bne.n	800b014 <_svfiprintf_r+0x178>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	9203      	str	r2, [sp, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	bfb8      	it	lt
 800afb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800afbc:	3702      	adds	r7, #2
 800afbe:	9305      	str	r3, [sp, #20]
 800afc0:	4d2e      	ldr	r5, [pc, #184]	; (800b07c <_svfiprintf_r+0x1e0>)
 800afc2:	7839      	ldrb	r1, [r7, #0]
 800afc4:	2203      	movs	r2, #3
 800afc6:	4628      	mov	r0, r5
 800afc8:	f7f5 f90a 	bl	80001e0 <memchr>
 800afcc:	b138      	cbz	r0, 800afde <_svfiprintf_r+0x142>
 800afce:	2340      	movs	r3, #64	; 0x40
 800afd0:	1b40      	subs	r0, r0, r5
 800afd2:	fa03 f000 	lsl.w	r0, r3, r0
 800afd6:	9b04      	ldr	r3, [sp, #16]
 800afd8:	4303      	orrs	r3, r0
 800afda:	3701      	adds	r7, #1
 800afdc:	9304      	str	r3, [sp, #16]
 800afde:	7839      	ldrb	r1, [r7, #0]
 800afe0:	4827      	ldr	r0, [pc, #156]	; (800b080 <_svfiprintf_r+0x1e4>)
 800afe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afe6:	2206      	movs	r2, #6
 800afe8:	1c7e      	adds	r6, r7, #1
 800afea:	f7f5 f8f9 	bl	80001e0 <memchr>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d038      	beq.n	800b064 <_svfiprintf_r+0x1c8>
 800aff2:	4b24      	ldr	r3, [pc, #144]	; (800b084 <_svfiprintf_r+0x1e8>)
 800aff4:	bb13      	cbnz	r3, 800b03c <_svfiprintf_r+0x1a0>
 800aff6:	9b03      	ldr	r3, [sp, #12]
 800aff8:	3307      	adds	r3, #7
 800affa:	f023 0307 	bic.w	r3, r3, #7
 800affe:	3308      	adds	r3, #8
 800b000:	9303      	str	r3, [sp, #12]
 800b002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b004:	444b      	add	r3, r9
 800b006:	9309      	str	r3, [sp, #36]	; 0x24
 800b008:	e76d      	b.n	800aee6 <_svfiprintf_r+0x4a>
 800b00a:	fb05 3202 	mla	r2, r5, r2, r3
 800b00e:	2001      	movs	r0, #1
 800b010:	460f      	mov	r7, r1
 800b012:	e7a6      	b.n	800af62 <_svfiprintf_r+0xc6>
 800b014:	2300      	movs	r3, #0
 800b016:	3701      	adds	r7, #1
 800b018:	9305      	str	r3, [sp, #20]
 800b01a:	4619      	mov	r1, r3
 800b01c:	250a      	movs	r5, #10
 800b01e:	4638      	mov	r0, r7
 800b020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b024:	3a30      	subs	r2, #48	; 0x30
 800b026:	2a09      	cmp	r2, #9
 800b028:	d903      	bls.n	800b032 <_svfiprintf_r+0x196>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0c8      	beq.n	800afc0 <_svfiprintf_r+0x124>
 800b02e:	9105      	str	r1, [sp, #20]
 800b030:	e7c6      	b.n	800afc0 <_svfiprintf_r+0x124>
 800b032:	fb05 2101 	mla	r1, r5, r1, r2
 800b036:	2301      	movs	r3, #1
 800b038:	4607      	mov	r7, r0
 800b03a:	e7f0      	b.n	800b01e <_svfiprintf_r+0x182>
 800b03c:	ab03      	add	r3, sp, #12
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	4622      	mov	r2, r4
 800b042:	4b11      	ldr	r3, [pc, #68]	; (800b088 <_svfiprintf_r+0x1ec>)
 800b044:	a904      	add	r1, sp, #16
 800b046:	4640      	mov	r0, r8
 800b048:	f7fe f98c 	bl	8009364 <_printf_float>
 800b04c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b050:	4681      	mov	r9, r0
 800b052:	d1d6      	bne.n	800b002 <_svfiprintf_r+0x166>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	065b      	lsls	r3, r3, #25
 800b058:	f53f af35 	bmi.w	800aec6 <_svfiprintf_r+0x2a>
 800b05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b05e:	b01d      	add	sp, #116	; 0x74
 800b060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b064:	ab03      	add	r3, sp, #12
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	4622      	mov	r2, r4
 800b06a:	4b07      	ldr	r3, [pc, #28]	; (800b088 <_svfiprintf_r+0x1ec>)
 800b06c:	a904      	add	r1, sp, #16
 800b06e:	4640      	mov	r0, r8
 800b070:	f7fe fc2e 	bl	80098d0 <_printf_i>
 800b074:	e7ea      	b.n	800b04c <_svfiprintf_r+0x1b0>
 800b076:	bf00      	nop
 800b078:	0800b32c 	.word	0x0800b32c
 800b07c:	0800b332 	.word	0x0800b332
 800b080:	0800b336 	.word	0x0800b336
 800b084:	08009365 	.word	0x08009365
 800b088:	0800ade9 	.word	0x0800ade9

0800b08c <__ascii_mbtowc>:
 800b08c:	b082      	sub	sp, #8
 800b08e:	b901      	cbnz	r1, 800b092 <__ascii_mbtowc+0x6>
 800b090:	a901      	add	r1, sp, #4
 800b092:	b142      	cbz	r2, 800b0a6 <__ascii_mbtowc+0x1a>
 800b094:	b14b      	cbz	r3, 800b0aa <__ascii_mbtowc+0x1e>
 800b096:	7813      	ldrb	r3, [r2, #0]
 800b098:	600b      	str	r3, [r1, #0]
 800b09a:	7812      	ldrb	r2, [r2, #0]
 800b09c:	1c10      	adds	r0, r2, #0
 800b09e:	bf18      	it	ne
 800b0a0:	2001      	movne	r0, #1
 800b0a2:	b002      	add	sp, #8
 800b0a4:	4770      	bx	lr
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	e7fb      	b.n	800b0a2 <__ascii_mbtowc+0x16>
 800b0aa:	f06f 0001 	mvn.w	r0, #1
 800b0ae:	e7f8      	b.n	800b0a2 <__ascii_mbtowc+0x16>

0800b0b0 <memmove>:
 800b0b0:	4288      	cmp	r0, r1
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	eb01 0302 	add.w	r3, r1, r2
 800b0b8:	d807      	bhi.n	800b0ca <memmove+0x1a>
 800b0ba:	1e42      	subs	r2, r0, #1
 800b0bc:	4299      	cmp	r1, r3
 800b0be:	d00a      	beq.n	800b0d6 <memmove+0x26>
 800b0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b0c8:	e7f8      	b.n	800b0bc <memmove+0xc>
 800b0ca:	4283      	cmp	r3, r0
 800b0cc:	d9f5      	bls.n	800b0ba <memmove+0xa>
 800b0ce:	1881      	adds	r1, r0, r2
 800b0d0:	1ad2      	subs	r2, r2, r3
 800b0d2:	42d3      	cmn	r3, r2
 800b0d4:	d100      	bne.n	800b0d8 <memmove+0x28>
 800b0d6:	bd10      	pop	{r4, pc}
 800b0d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b0e0:	e7f7      	b.n	800b0d2 <memmove+0x22>

0800b0e2 <_realloc_r>:
 800b0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e4:	4607      	mov	r7, r0
 800b0e6:	4614      	mov	r4, r2
 800b0e8:	460e      	mov	r6, r1
 800b0ea:	b921      	cbnz	r1, 800b0f6 <_realloc_r+0x14>
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0f2:	f7fe b849 	b.w	8009188 <_malloc_r>
 800b0f6:	b922      	cbnz	r2, 800b102 <_realloc_r+0x20>
 800b0f8:	f7fd fff8 	bl	80090ec <_free_r>
 800b0fc:	4625      	mov	r5, r4
 800b0fe:	4628      	mov	r0, r5
 800b100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b102:	f000 f821 	bl	800b148 <_malloc_usable_size_r>
 800b106:	42a0      	cmp	r0, r4
 800b108:	d20f      	bcs.n	800b12a <_realloc_r+0x48>
 800b10a:	4621      	mov	r1, r4
 800b10c:	4638      	mov	r0, r7
 800b10e:	f7fe f83b 	bl	8009188 <_malloc_r>
 800b112:	4605      	mov	r5, r0
 800b114:	2800      	cmp	r0, #0
 800b116:	d0f2      	beq.n	800b0fe <_realloc_r+0x1c>
 800b118:	4631      	mov	r1, r6
 800b11a:	4622      	mov	r2, r4
 800b11c:	f7ff fb6e 	bl	800a7fc <memcpy>
 800b120:	4631      	mov	r1, r6
 800b122:	4638      	mov	r0, r7
 800b124:	f7fd ffe2 	bl	80090ec <_free_r>
 800b128:	e7e9      	b.n	800b0fe <_realloc_r+0x1c>
 800b12a:	4635      	mov	r5, r6
 800b12c:	e7e7      	b.n	800b0fe <_realloc_r+0x1c>

0800b12e <__ascii_wctomb>:
 800b12e:	b149      	cbz	r1, 800b144 <__ascii_wctomb+0x16>
 800b130:	2aff      	cmp	r2, #255	; 0xff
 800b132:	bf85      	ittet	hi
 800b134:	238a      	movhi	r3, #138	; 0x8a
 800b136:	6003      	strhi	r3, [r0, #0]
 800b138:	700a      	strbls	r2, [r1, #0]
 800b13a:	f04f 30ff 	movhi.w	r0, #4294967295
 800b13e:	bf98      	it	ls
 800b140:	2001      	movls	r0, #1
 800b142:	4770      	bx	lr
 800b144:	4608      	mov	r0, r1
 800b146:	4770      	bx	lr

0800b148 <_malloc_usable_size_r>:
 800b148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b14c:	1f18      	subs	r0, r3, #4
 800b14e:	2b00      	cmp	r3, #0
 800b150:	bfbc      	itt	lt
 800b152:	580b      	ldrlt	r3, [r1, r0]
 800b154:	18c0      	addlt	r0, r0, r3
 800b156:	4770      	bx	lr

0800b158 <_init>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	bf00      	nop
 800b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15e:	bc08      	pop	{r3}
 800b160:	469e      	mov	lr, r3
 800b162:	4770      	bx	lr

0800b164 <_fini>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	bf00      	nop
 800b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16a:	bc08      	pop	{r3}
 800b16c:	469e      	mov	lr, r3
 800b16e:	4770      	bx	lr

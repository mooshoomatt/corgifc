
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007234  08007234  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800723c  0800723c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800723c  0800723c  0001723c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001960  200001f0  08007434  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001b50  08007434  00021b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001615d  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c8  00000000  00000000  0003637d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00039448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  0003a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000223c9  00000000  00000000  0003b008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9fc  00000000  00000000  0005d3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc264  00000000  00000000  0006bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d8  00000000  00000000  001280ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f0 	.word	0x200001f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007134 	.word	0x08007134

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	08007134 	.word	0x08007134

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d013      	beq.n	8000518 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	e000      	b.n	8000504 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000502:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000504:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Overload the _write function so that printf goes to the debug console */
int _write(int file, char *ptr, int len)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b086      	sub	sp, #24
 800052a:	af00      	add	r7, sp, #0
 800052c:	60f8      	str	r0, [r7, #12]
 800052e:	60b9      	str	r1, [r7, #8]
 8000530:	607a      	str	r2, [r7, #4]
  int i=0;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e009      	b.n	8000550 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	60ba      	str	r2, [r7, #8]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ffc7 	bl	80004d8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	3301      	adds	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	429a      	cmp	r2, r3
 8000556:	dbf1      	blt.n	800053c <_write+0x16>
  return len;
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b598      	push	{r3, r4, r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fa92 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f828 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f8c0 	bl	80006f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000574:	f000 f890 	bl	8000698 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000578:	f005 fc20 	bl	8005dbc <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	480d      	ldr	r0, [pc, #52]	; (80005b4 <main+0x50>)
 8000580:	f000 fddf 	bl	8001142 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000584:	20fa      	movs	r0, #250	; 0xfa
 8000586:	f000 faf5 	bl	8000b74 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <main+0x50>)
 800058e:	f000 fdd8 	bl	8001142 <HAL_GPIO_TogglePin>

	  printf("Hello from the SWD Port!\n");
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <main+0x54>)
 8000594:	f006 fa6a 	bl	8006a6c <puts>
	  CDC_Transmit_FS(data, strlen((char*)data));
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <main+0x58>)
 800059a:	681c      	ldr	r4, [r3, #0]
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <main+0x58>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe11 	bl	80001c8 <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	4620      	mov	r0, r4
 80005ae:	f005 fcd7 	bl	8005f60 <CDC_Transmit_FS>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80005b2:	e7e3      	b.n	800057c <main+0x18>
 80005b4:	40020800 	.word	0x40020800
 80005b8:	08007154 	.word	0x08007154
 80005bc:	20000000 	.word	0x20000000

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 f940 	bl	8006854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b29      	ldr	r3, [pc, #164]	; (8000690 <SystemClock_Config+0xd0>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a28      	ldr	r2, [pc, #160]	; (8000690 <SystemClock_Config+0xd0>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <SystemClock_Config+0xd0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <SystemClock_Config+0xd4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <SystemClock_Config+0xd4>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <SystemClock_Config+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800061c:	2303      	movs	r3, #3
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000638:	2310      	movs	r3, #16
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800063c:	23c0      	movs	r3, #192	; 0xc0
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f002 f84f 	bl	80026f0 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000658:	f000 f8aa 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 faaa 	bl	8002bd0 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000682:	f000 f895 	bl	80007b0 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_I2C1_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006d6:	f000 fd4f 	bl	8001178 <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 f866 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000021c 	.word	0x2000021c
 80006ec:	40005400 	.word	0x40005400
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	21c0      	movs	r1, #192	; 0xc0
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0xb8>)
 8000780:	f000 fcc6 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000784:	23c0      	movs	r3, #192	; 0xc0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0xb8>)
 800079c:	f000 fb1e 	bl	8000ddc <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <Error_Handler+0x6>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <HAL_I2C_MspInit+0x84>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d12c      	bne.n	8000884 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_I2C_MspInit+0x88>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a17      	ldr	r2, [pc, #92]	; (8000890 <HAL_I2C_MspInit+0x88>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_I2C_MspInit+0x88>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000846:	f44f 7340 	mov.w	r3, #768	; 0x300
 800084a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084c:	2312      	movs	r3, #18
 800084e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000858:	2304      	movs	r3, #4
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <HAL_I2C_MspInit+0x8c>)
 8000864:	f000 faba 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_I2C_MspInit+0x88>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_I2C_MspInit+0x88>)
 8000872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_I2C_MspInit+0x88>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40005400 	.word	0x40005400
 8000890:	40023800 	.word	0x40023800
 8000894:	40020400 	.word	0x40020400

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f926 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <OTG_FS_IRQHandler+0x10>)
 80008f2:	f000 fec9 	bl	8001688 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20001744 	.word	0x20001744

08000900 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e00a      	b.n	8000928 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000912:	f3af 8000 	nop.w
 8000916:	4601      	mov	r1, r0
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	60ba      	str	r2, [r7, #8]
 800091e:	b2ca      	uxtb	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf0      	blt.n	8000912 <_read+0x12>
	}

return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_close>:
	}
	return len;
}

int _close(int file)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	return -1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000962:	605a      	str	r2, [r3, #4]
	return 0;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_isatty>:

int _isatty(int file)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
	return 1;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <_sbrk+0x5c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <_sbrk+0x60>)
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <_sbrk+0x64>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <_sbrk+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d207      	bcs.n	80009e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d4:	f005 ff04 	bl	80067e0 <__errno>
 80009d8:	4602      	mov	r2, r0
 80009da:	230c      	movs	r3, #12
 80009dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	e009      	b.n	80009f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <_sbrk+0x64>)
 80009f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20020000 	.word	0x20020000
 8000a04:	00000400 	.word	0x00000400
 8000a08:	2000020c 	.word	0x2000020c
 8000a0c:	20001b50 	.word	0x20001b50

08000a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <SystemInit+0x28>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <SystemInit+0x28>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SystemInit+0x28>)
 8000a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a42:	e003      	b.n	8000a4c <LoopCopyDataInit>

08000a44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a4a:	3104      	adds	r1, #4

08000a4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a54:	d3f6      	bcc.n	8000a44 <CopyDataInit>
  ldr  r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a58:	e002      	b.n	8000a60 <LoopFillZerobss>

08000a5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a5c:	f842 3b04 	str.w	r3, [r2], #4

08000a60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a64:	d3f9      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a66:	f7ff ffd3 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f005 febf 	bl	80067ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fd79 	bl	8000564 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a78:	08007244 	.word	0x08007244
  ldr  r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a80:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8000a84:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8000a88:	20001b50 	.word	0x20001b50

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_Init+0x40>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_Init+0x40>)
 8000aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x40>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f94d 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f808 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fe78 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023c00 	.word	0x40023c00

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f965 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f92d 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	2000000c 	.word	0x2000000c
 8000b30:	20000008 	.word	0x20000008

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000000c 	.word	0x2000000c
 8000b58:	20000270 	.word	0x20000270

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000270 	.word	0x20000270

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffee 	bl	8000b5c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_Delay+0x40>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffde 	bl	8000b5c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000000c 	.word	0x2000000c

08000bb8 <__NVIC_SetPriorityGrouping>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	e16b      	b.n	80010d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 815a 	bne.w	80010ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d00b      	beq.n	8000e36 <HAL_GPIO_Init+0x5a>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2a:	2b11      	cmp	r3, #17
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d130      	bne.n	8000e98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f003 0201 	and.w	r2, r3, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0xfc>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b12      	cmp	r3, #18
 8000ed6:	d123      	bne.n	8000f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80b4 	beq.w	80010ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b5f      	ldr	r3, [pc, #380]	; (80010e4 <HAL_GPIO_Init+0x308>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a5e      	ldr	r2, [pc, #376]	; (80010e4 <HAL_GPIO_Init+0x308>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <HAL_GPIO_Init+0x308>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a5a      	ldr	r2, [pc, #360]	; (80010e8 <HAL_GPIO_Init+0x30c>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a51      	ldr	r2, [pc, #324]	; (80010ec <HAL_GPIO_Init+0x310>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d02b      	beq.n	8001002 <HAL_GPIO_Init+0x226>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a50      	ldr	r2, [pc, #320]	; (80010f0 <HAL_GPIO_Init+0x314>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d025      	beq.n	8000ffe <HAL_GPIO_Init+0x222>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <HAL_GPIO_Init+0x318>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d01f      	beq.n	8000ffa <HAL_GPIO_Init+0x21e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <HAL_GPIO_Init+0x31c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	; (80010fc <HAL_GPIO_Init+0x320>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x216>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4c      	ldr	r2, [pc, #304]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x212>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4b      	ldr	r2, [pc, #300]	; (8001104 <HAL_GPIO_Init+0x328>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x20e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <HAL_GPIO_Init+0x32c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x20a>
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	e00e      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	e00c      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000fea:	2306      	movs	r3, #6
 8000fec:	e00a      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x228>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001014:	4934      	ldr	r1, [pc, #208]	; (80010e8 <HAL_GPIO_Init+0x30c>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001022:	4b3a      	ldr	r3, [pc, #232]	; (800110c <HAL_GPIO_Init+0x330>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <HAL_GPIO_Init+0x330>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_GPIO_Init+0x330>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001070:	4a26      	ldr	r2, [pc, #152]	; (800110c <HAL_GPIO_Init+0x330>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_GPIO_Init+0x330>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <HAL_GPIO_Init+0x330>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_GPIO_Init+0x330>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_GPIO_Init+0x330>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f ae90 	bls.w	8000df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	3724      	adds	r7, #36	; 0x24
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40013800 	.word	0x40013800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40021400 	.word	0x40021400
 8001104:	40021800 	.word	0x40021800
 8001108:	40021c00 	.word	0x40021c00
 800110c:	40013c00 	.word	0x40013c00

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	401a      	ands	r2, r3
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	429a      	cmp	r2, r3
 800115a:	d104      	bne.n	8001166 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	041a      	lsls	r2, r3, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001164:	e002      	b.n	800116c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e11f      	b.n	80013ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fb32 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2224      	movs	r2, #36	; 0x24
 80011a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011dc:	f001 fec0 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 80011e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4a7b      	ldr	r2, [pc, #492]	; (80013d4 <HAL_I2C_Init+0x25c>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d807      	bhi.n	80011fc <HAL_I2C_Init+0x84>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a7a      	ldr	r2, [pc, #488]	; (80013d8 <HAL_I2C_Init+0x260>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	bf94      	ite	ls
 80011f4:	2301      	movls	r3, #1
 80011f6:	2300      	movhi	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	e006      	b.n	800120a <HAL_I2C_Init+0x92>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4a77      	ldr	r2, [pc, #476]	; (80013dc <HAL_I2C_Init+0x264>)
 8001200:	4293      	cmp	r3, r2
 8001202:	bf94      	ite	ls
 8001204:	2301      	movls	r3, #1
 8001206:	2300      	movhi	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0db      	b.n	80013ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <HAL_I2C_Init+0x268>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0c9b      	lsrs	r3, r3, #18
 800121c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	430a      	orrs	r2, r1
 8001230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a64      	ldr	r2, [pc, #400]	; (80013d4 <HAL_I2C_Init+0x25c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d802      	bhi.n	800124c <HAL_I2C_Init+0xd4>
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3301      	adds	r3, #1
 800124a:	e009      	b.n	8001260 <HAL_I2C_Init+0xe8>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001252:	fb02 f303 	mul.w	r3, r2, r3
 8001256:	4a63      	ldr	r2, [pc, #396]	; (80013e4 <HAL_I2C_Init+0x26c>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	099b      	lsrs	r3, r3, #6
 800125e:	3301      	adds	r3, #1
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	430b      	orrs	r3, r1
 8001266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4956      	ldr	r1, [pc, #344]	; (80013d4 <HAL_I2C_Init+0x25c>)
 800127c:	428b      	cmp	r3, r1
 800127e:	d80d      	bhi.n	800129c <HAL_I2C_Init+0x124>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1e59      	subs	r1, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fbb1 f3f3 	udiv	r3, r1, r3
 800128e:	3301      	adds	r3, #1
 8001290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	bf38      	it	cc
 8001298:	2304      	movcc	r3, #4
 800129a:	e04f      	b.n	800133c <HAL_I2C_Init+0x1c4>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d111      	bne.n	80012c8 <HAL_I2C_Init+0x150>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1e58      	subs	r0, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	e012      	b.n	80012ee <HAL_I2C_Init+0x176>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	0099      	lsls	r1, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	fbb0 f3f3 	udiv	r3, r0, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf0c      	ite	eq
 80012e8:	2301      	moveq	r3, #1
 80012ea:	2300      	movne	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_I2C_Init+0x17e>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e022      	b.n	800133c <HAL_I2C_Init+0x1c4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10e      	bne.n	800131c <HAL_I2C_Init+0x1a4>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1e58      	subs	r0, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6859      	ldr	r1, [r3, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	440b      	add	r3, r1
 800130c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001310:	3301      	adds	r3, #1
 8001312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131a:	e00f      	b.n	800133c <HAL_I2C_Init+0x1c4>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1e58      	subs	r0, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	0099      	lsls	r1, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001332:	3301      	adds	r3, #1
 8001334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	6809      	ldr	r1, [r1, #0]
 8001340:	4313      	orrs	r3, r2
 8001342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800136a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6911      	ldr	r1, [r2, #16]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68d2      	ldr	r2, [r2, #12]
 8001376:	4311      	orrs	r1, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	430b      	orrs	r3, r1
 800137e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2220      	movs	r2, #32
 80013b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	000186a0 	.word	0x000186a0
 80013d8:	001e847f 	.word	0x001e847f
 80013dc:	003d08ff 	.word	0x003d08ff
 80013e0:	431bde83 	.word	0x431bde83
 80013e4:	10624dd3 	.word	0x10624dd3

080013e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ea:	b08f      	sub	sp, #60	; 0x3c
 80013ec:	af0a      	add	r7, sp, #40	; 0x28
 80013ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e10f      	b.n	800161a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d106      	bne.n	800141a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f004 fee7 	bl	80061e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f001 feba 	bl	80031b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	687e      	ldr	r6, [r7, #4]
 8001446:	466d      	mov	r5, sp
 8001448:	f106 0410 	add.w	r4, r6, #16
 800144c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001458:	e885 0003 	stmia.w	r5, {r0, r1}
 800145c:	1d33      	adds	r3, r6, #4
 800145e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001460:	6838      	ldr	r0, [r7, #0]
 8001462:	f001 fd91 	bl	8002f88 <USB_CoreInit>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0d0      	b.n	800161a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fea8 	bl	80031d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e04a      	b.n	8001520 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	333d      	adds	r3, #61	; 0x3d
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	333c      	adds	r3, #60	; 0x3c
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	b298      	uxth	r0, r3
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	3342      	adds	r3, #66	; 0x42
 80014c6:	4602      	mov	r2, r0
 80014c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	333f      	adds	r3, #63	; 0x3f
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3344      	adds	r3, #68	; 0x44
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3348      	adds	r3, #72	; 0x48
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3350      	adds	r3, #80	; 0x50
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	3301      	adds	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3af      	bcc.n	800148a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e044      	b.n	80015ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	1a9b      	subs	r3, r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3b5      	bcc.n	8001530 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	687e      	ldr	r6, [r7, #4]
 80015cc:	466d      	mov	r5, sp
 80015ce:	f106 0410 	add.w	r4, r6, #16
 80015d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015de:	e885 0003 	stmia.w	r5, {r0, r1}
 80015e2:	1d33      	adds	r3, r6, #4
 80015e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f001 fe1e 	bl	8003228 <USB_DevInit>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00d      	b.n	800161a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fe66 	bl	80042e4 <USB_DevDisconnect>

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001622 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_PCD_Start+0x1c>
 800163a:	2302      	movs	r3, #2
 800163c:	e020      	b.n	8001680 <HAL_PCD_Start+0x5e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	2b01      	cmp	r3, #1
 800164c:	d109      	bne.n	8001662 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001652:	2b01      	cmp	r3, #1
 8001654:	d005      	beq.n	8001662 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fd92 	bl	8003190 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fe16 	bl	80042a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b08d      	sub	sp, #52	; 0x34
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 fed4 	bl	800444c <USB_GetMode>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 839d 	bne.w	8001de6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fe38 	bl	8004326 <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 8393 	beq.w	8001de4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fe2f 	bl	8004326 <USB_ReadInterrupts>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d107      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f002 0202 	and.w	r2, r2, #2
 80016e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fe1d 	bl	8004326 <USB_ReadInterrupts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d161      	bne.n	80017ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0210 	bic.w	r2, r2, #16
 8001704:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f003 020f 	and.w	r2, r3, #15
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	3304      	adds	r3, #4
 8001724:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	0c5b      	lsrs	r3, r3, #17
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	2b02      	cmp	r3, #2
 8001730:	d124      	bne.n	800177c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d035      	beq.n	80017aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800174c:	b29b      	uxth	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	6a38      	ldr	r0, [r7, #32]
 8001752:	f002 fc83 	bl	800405c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001762:	441a      	add	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	699a      	ldr	r2, [r3, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001774:	441a      	add	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	619a      	str	r2, [r3, #24]
 800177a:	e016      	b.n	80017aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	0c5b      	lsrs	r3, r3, #17
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	2b06      	cmp	r3, #6
 8001786:	d110      	bne.n	80017aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800178e:	2208      	movs	r2, #8
 8001790:	4619      	mov	r1, r3
 8001792:	6a38      	ldr	r0, [r7, #32]
 8001794:	f002 fc62 	bl	800405c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a4:	441a      	add	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0210 	orr.w	r2, r2, #16
 80017b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 fdb1 	bl	8004326 <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017ce:	d16e      	bne.n	80018ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fdb7 	bl	800434c <USB_ReadDevAllOutEpInterrupt>
 80017de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017e0:	e062      	b.n	80018a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d057      	beq.n	800189c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fddc 	bl	80043b4 <USB_ReadDevOutEPInterrupt>
 80017fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001814:	461a      	mov	r2, r3
 8001816:	2301      	movs	r3, #1
 8001818:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800181a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fdb1 	bl	8002384 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00c      	beq.n	8001846 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001838:	461a      	mov	r2, r3
 800183a:	2308      	movs	r3, #8
 800183c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800183e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 feab 	bl	800259c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185c:	461a      	mov	r2, r3
 800185e:	2310      	movs	r3, #16
 8001860:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001878:	461a      	mov	r2, r3
 800187a:	2320      	movs	r3, #32
 800187c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	4413      	add	r3, r2
 8001890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001894:	461a      	mov	r2, r3
 8001896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3301      	adds	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d199      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 fd37 	bl	8004326 <USB_ReadInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018c2:	f040 80c0 	bne.w	8001a46 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fd58 	bl	8004380 <USB_ReadDevAllInEpInterrupt>
 80018d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018d6:	e0b2      	b.n	8001a3e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80a7 	beq.w	8001a32 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 fd7e 	bl	80043f0 <USB_ReadDevInEPInterrupt>
 80018f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d057      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	2201      	movs	r2, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	69f9      	ldr	r1, [r7, #28]
 800191c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001920:	4013      	ands	r3, r2
 8001922:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001930:	461a      	mov	r2, r3
 8001932:	2301      	movs	r3, #1
 8001934:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d132      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3348      	adds	r3, #72	; 0x48
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4403      	add	r3, r0
 800195e:	3344      	adds	r3, #68	; 0x44
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4419      	add	r1, r3
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4403      	add	r3, r0
 8001972:	3348      	adds	r3, #72	; 0x48
 8001974:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	2b00      	cmp	r3, #0
 800197a:	d113      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x31c>
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	3350      	adds	r3, #80	; 0x50
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d108      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800199c:	461a      	mov	r2, r3
 800199e:	2101      	movs	r1, #1
 80019a0:	f002 fd86 	bl	80044b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4619      	mov	r1, r3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f004 fc9d 	bl	80062ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c6:	461a      	mov	r2, r3
 80019c8:	2308      	movs	r3, #8
 80019ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e2:	461a      	mov	r2, r3
 80019e4:	2310      	movs	r3, #16
 80019e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019fe:	461a      	mov	r2, r3
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fc1b 	bl	8002268 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f47f af49 	bne.w	80018d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fc6b 	bl	8004326 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a5a:	d122      	bne.n	8001aa2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a82:	2100      	movs	r1, #0
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fe27 	bl	80026d8 <HAL_PCDEx_LPM_Callback>
 8001a8a:	e002      	b.n	8001a92 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f004 fca3 	bl	80063d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fc3d 	bl	8004326 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab6:	d112      	bne.n	8001ade <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f004 fc5f 	bl	800638c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001adc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fc1f 	bl	8004326 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af2:	f040 80c7 	bne.w	8001c84 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2110      	movs	r1, #16
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 fced 	bl	80034f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b1a:	e056      	b.n	8001bca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b40:	0151      	lsls	r1, r2, #5
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	440a      	add	r2, r1
 8001b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b4e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b60:	0151      	lsls	r1, r2, #5
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	440a      	add	r2, r1
 8001b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b94:	0151      	lsls	r1, r2, #5
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	440a      	add	r2, r1
 8001b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ba2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb4:	0151      	lsls	r1, r2, #5
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	440a      	add	r2, r1
 8001bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bc2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3a3      	bcc.n	8001b1c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001be6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d016      	beq.n	8001c1e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c00:	f043 030b 	orr.w	r3, r3, #11
 8001c04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c16:	f043 030b 	orr.w	r3, r3, #11
 8001c1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1c:	e015      	b.n	8001c4a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c30:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c34:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c44:	f043 030b 	orr.w	r3, r3, #11
 8001c48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f002 fc1e 	bl	80044b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fb4c 	bl	8004326 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c98:	d124      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 fbe2 	bl	8004468 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 fc82 	bl	80035b2 <USB_GetDevSpeed>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	f001 f945 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8001cbe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f001 f9bf 	bl	800304c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f004 fb33 	bl	800633a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fb1c 	bl	8004326 <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d10a      	bne.n	8001d0e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f004 fb10 	bl	800631e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f002 0208 	and.w	r2, r2, #8
 8001d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fb07 	bl	8004326 <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d22:	d10f      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f004 fb72 	bl	8006418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 faec 	bl	8004326 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d58:	d10f      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f004 fb45 	bl	80063f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fad1 	bl	8004326 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8e:	d10a      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f004 fb53 	bl	800643c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fabb 	bl	8004326 <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d115      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f004 fb43 	bl	8006458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	e000      	b.n	8001de6 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001de4:	bf00      	nop
    }
  }
}
 8001de6:	3734      	adds	r7, #52	; 0x34
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}

08001dec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_PCD_SetAddress+0x1a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e013      	b.n	8001e2e <HAL_PCD_SetAddress+0x42>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 fa19 	bl	8004256 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	4608      	mov	r0, r1
 8001e40:	4611      	mov	r1, r2
 8001e42:	461a      	mov	r2, r3
 8001e44:	4603      	mov	r3, r0
 8001e46:	70fb      	strb	r3, [r7, #3]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	803b      	strh	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da0f      	bge.n	8001e7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3338      	adds	r3, #56	; 0x38
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00f      	b.n	8001e9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ea8:	883a      	ldrh	r2, [r7, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	78ba      	ldrb	r2, [r7, #2]
 8001eb2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	785b      	ldrb	r3, [r3, #1]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ec6:	78bb      	ldrb	r3, [r7, #2]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d102      	bne.n	8001ed2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_PCD_EP_Open+0xaa>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e00e      	b.n	8001efe <HAL_PCD_EP_Open+0xc8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fb84 	bl	80035fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001efc:	7afb      	ldrb	r3, [r7, #11]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0f      	bge.n	8001f3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	3338      	adds	r3, #56	; 0x38
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	705a      	strb	r2, [r3, #1]
 8001f38:	e00f      	b.n	8001f5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 020f 	and.w	r2, r3, #15
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_PCD_EP_Close+0x6e>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e00e      	b.n	8001f92 <HAL_PCD_EP_Close+0x8c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fbc2 	bl	800370c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	f003 020f 	and.w	r2, r3, #15
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	6979      	ldr	r1, [r7, #20]
 800200e:	f001 fe9d 	bl	8003d4c <USB_EP0StartXfer>
 8002012:	e008      	b.n	8002026 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	6979      	ldr	r1, [r7, #20]
 8002022:	f001 fc4f 	bl	80038c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 020f 	and.w	r2, r3, #15
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	460b      	mov	r3, r1
 800206e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3338      	adds	r3, #56	; 0x38
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2201      	movs	r2, #1
 800209e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d102      	bne.n	80020ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	6979      	ldr	r1, [r7, #20]
 80020d2:	f001 fe3b 	bl	8003d4c <USB_EP0StartXfer>
 80020d6:	e008      	b.n	80020ea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	6979      	ldr	r1, [r7, #20]
 80020e6:	f001 fbed 	bl	80038c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 020f 	and.w	r2, r3, #15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d901      	bls.n	8002112 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e050      	b.n	80021b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002116:	2b00      	cmp	r3, #0
 8002118:	da0f      	bge.n	800213a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	3338      	adds	r3, #56	; 0x38
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	705a      	strb	r2, [r3, #1]
 8002138:	e00d      	b.n	8002156 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_PCD_EP_SetStall+0x82>
 8002172:	2302      	movs	r3, #2
 8002174:	e01e      	b.n	80021b4 <HAL_PCD_EP_SetStall+0xc0>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68f9      	ldr	r1, [r7, #12]
 8002184:	4618      	mov	r0, r3
 8002186:	f001 ff92 	bl	80040ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	b2d9      	uxtb	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021a4:	461a      	mov	r2, r3
 80021a6:	f002 f983 	bl	80044b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d901      	bls.n	80021da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e042      	b.n	8002260 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da0f      	bge.n	8002202 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 020f 	and.w	r2, r3, #15
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3338      	adds	r3, #56	; 0x38
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	705a      	strb	r2, [r3, #1]
 8002200:	e00f      	b.n	8002222 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 020f 	and.w	r2, r3, #15
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	b2da      	uxtb	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_PCD_EP_ClrStall+0x86>
 800223e:	2302      	movs	r3, #2
 8002240:	e00e      	b.n	8002260 <HAL_PCD_EP_ClrStall+0xa4>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68f9      	ldr	r1, [r7, #12]
 8002250:	4618      	mov	r0, r3
 8002252:	f001 ff9a 	bl	800418a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af02      	add	r7, sp, #8
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3338      	adds	r3, #56	; 0x38
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	429a      	cmp	r2, r3
 800229a:	d901      	bls.n	80022a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e06c      	b.n	800237a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d902      	bls.n	80022bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	3303      	adds	r3, #3
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022c4:	e02b      	b.n	800231e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d902      	bls.n	80022e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3303      	adds	r3, #3
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68d9      	ldr	r1, [r3, #12]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	4603      	mov	r3, r0
 8002300:	6978      	ldr	r0, [r7, #20]
 8002302:	f001 fe76 	bl	8003ff2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	441a      	add	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	441a      	add	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	b29b      	uxth	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	429a      	cmp	r2, r3
 8002332:	d809      	bhi.n	8002348 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800233c:	429a      	cmp	r2, r3
 800233e:	d203      	bcs.n	8002348 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1be      	bne.n	80022c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	d811      	bhi.n	8002378 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	2201      	movs	r2, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	43db      	mvns	r3, r3
 800236e:	6939      	ldr	r1, [r7, #16]
 8002370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002374:	4013      	ands	r3, r2
 8002376:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	333c      	adds	r3, #60	; 0x3c
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	f040 80a0 	bne.w	80024fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d015      	beq.n	80023f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a72      	ldr	r2, [pc, #456]	; (8002594 <PCD_EP_OutXfrComplete_int+0x210>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f240 80dd 	bls.w	800258a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80d7 	beq.w	800258a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e8:	461a      	mov	r2, r3
 80023ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ee:	6093      	str	r3, [r2, #8]
 80023f0:	e0cb      	b.n	800258a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d009      	beq.n	8002410 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002408:	461a      	mov	r2, r3
 800240a:	2320      	movs	r3, #32
 800240c:	6093      	str	r3, [r2, #8]
 800240e:	e0bc      	b.n	800258a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 80b7 	bne.w	800258a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a5d      	ldr	r2, [pc, #372]	; (8002594 <PCD_EP_OutXfrComplete_int+0x210>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d90f      	bls.n	8002444 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243a:	461a      	mov	r2, r3
 800243c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002440:	6093      	str	r3, [r2, #8]
 8002442:	e0a2      	b.n	800258a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002456:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	0159      	lsls	r1, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	440b      	add	r3, r1
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800246a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4403      	add	r3, r0
 800247a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800247e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4403      	add	r3, r0
 80024a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4419      	add	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4403      	add	r3, r0
 80024b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d114      	bne.n	80024ee <PCD_EP_OutXfrComplete_int+0x16a>
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d108      	bne.n	80024ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024e6:	461a      	mov	r2, r3
 80024e8:	2101      	movs	r1, #1
 80024ea:	f001 ffe1 	bl	80044b0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f003 fedd 	bl	80062b4 <HAL_PCD_DataOutStageCallback>
 80024fa:	e046      	b.n	800258a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <PCD_EP_OutXfrComplete_int+0x214>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d124      	bne.n	800254e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251a:	461a      	mov	r2, r3
 800251c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002520:	6093      	str	r3, [r2, #8]
 8002522:	e032      	b.n	800258a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	461a      	mov	r2, r3
 800253c:	2320      	movs	r3, #32
 800253e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	4619      	mov	r1, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f003 feb4 	bl	80062b4 <HAL_PCD_DataOutStageCallback>
 800254c:	e01d      	b.n	800258a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d114      	bne.n	800257e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d108      	bne.n	800257e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002576:	461a      	mov	r2, r3
 8002578:	2100      	movs	r1, #0
 800257a:	f001 ff99 	bl	80044b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f003 fe95 	bl	80062b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	4f54300a 	.word	0x4f54300a
 8002598:	4f54310a 	.word	0x4f54310a

0800259c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	333c      	adds	r3, #60	; 0x3c
 80025b4:	3304      	adds	r3, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4a15      	ldr	r2, [pc, #84]	; (8002624 <PCD_EP_OutSetupPacket_int+0x88>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d90e      	bls.n	80025f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e8:	461a      	mov	r2, r3
 80025ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f003 fe4d 	bl	8006290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <PCD_EP_OutSetupPacket_int+0x88>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d90c      	bls.n	8002618 <PCD_EP_OutSetupPacket_int+0x7c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002610:	461a      	mov	r2, r3
 8002612:	2101      	movs	r1, #1
 8002614:	f001 ff4c 	bl	80044b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	4f54300a 	.word	0x4f54300a

08002628 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
 8002634:	4613      	mov	r3, r2
 8002636:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002646:	883b      	ldrh	r3, [r7, #0]
 8002648:	0419      	lsls	r1, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	430a      	orrs	r2, r1
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
 8002654:	e028      	b.n	80026a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4413      	add	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e00d      	b.n	8002686 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	3340      	adds	r3, #64	; 0x40
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4413      	add	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	3301      	adds	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	3b01      	subs	r3, #1
 800268c:	429a      	cmp	r2, r3
 800268e:	d3ec      	bcc.n	800266a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002690:	883b      	ldrh	r3, [r7, #0]
 8002692:	0418      	lsls	r0, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	3b01      	subs	r3, #1
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	4302      	orrs	r2, r0
 80026a0:	3340      	adds	r3, #64	; 0x40
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e25b      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d075      	beq.n	80027fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270e:	4ba3      	ldr	r3, [pc, #652]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d00c      	beq.n	8002734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d112      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4b9d      	ldr	r3, [pc, #628]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002732:	d10b      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	4b99      	ldr	r3, [pc, #612]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d05b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x108>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d157      	bne.n	80027f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e236      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002754:	d106      	bne.n	8002764 <HAL_RCC_OscConfig+0x74>
 8002756:	4b91      	ldr	r3, [pc, #580]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a90      	ldr	r2, [pc, #576]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x98>
 800276e:	4b8b      	ldr	r3, [pc, #556]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a8a      	ldr	r2, [pc, #552]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a87      	ldr	r2, [pc, #540]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002788:	4b84      	ldr	r3, [pc, #528]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a83      	ldr	r2, [pc, #524]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a80      	ldr	r2, [pc, #512]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe f9d8 	bl	8000b5c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe f9d4 	bl	8000b5c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1fb      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xc0>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe f9c4 	bl	8000b5c <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe f9c0 	bl	8000b5c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1e7      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	4b6c      	ldr	r3, [pc, #432]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0xe8>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d063      	beq.n	80028ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b62      	ldr	r3, [pc, #392]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800281a:	2b08      	cmp	r3, #8
 800281c:	d11c      	bne.n	8002858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281e:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d116      	bne.n	8002858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x152>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e1bb      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b56      	ldr	r3, [pc, #344]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4952      	ldr	r1, [pc, #328]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	e03a      	b.n	80028ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCC_OscConfig+0x2b0>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe f979 	bl	8000b5c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286e:	f7fe f975 	bl	8000b5c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e19c      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	4b46      	ldr	r3, [pc, #280]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4940      	ldr	r1, [pc, #256]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_RCC_OscConfig+0x2b0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe f958 	bl	8000b5c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b0:	f7fe f954 	bl	8000b5c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e17b      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d030      	beq.n	800293c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e2:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <HAL_RCC_OscConfig+0x2b4>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe f938 	bl	8000b5c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fe f934 	bl	8000b5c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e15b      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x200>
 800290e:	e015      	b.n	800293c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCC_OscConfig+0x2b4>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe f921 	bl	8000b5c <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291e:	f7fe f91d 	bl	8000b5c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e144      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a0 	beq.w	8002a8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_RCC_OscConfig+0x2ac>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x2b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d121      	bne.n	80029ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_RCC_OscConfig+0x2b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_RCC_OscConfig+0x2b8>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7fe f8e3 	bl	8000b5c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	e011      	b.n	80029be <HAL_RCC_OscConfig+0x2ce>
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470000 	.word	0x42470000
 80029a4:	42470e80 	.word	0x42470e80
 80029a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ac:	f7fe f8d6 	bl	8000b5c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0fd      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029be:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <HAL_RCC_OscConfig+0x4d4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2f0>
 80029d2:	4b7d      	ldr	r3, [pc, #500]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a7c      	ldr	r2, [pc, #496]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
 80029de:	e01c      	b.n	8002a1a <HAL_RCC_OscConfig+0x32a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCC_OscConfig+0x312>
 80029e8:	4b77      	ldr	r3, [pc, #476]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a76      	ldr	r2, [pc, #472]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a73      	ldr	r2, [pc, #460]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	e00b      	b.n	8002a1a <HAL_RCC_OscConfig+0x32a>
 8002a02:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a70      	ldr	r2, [pc, #448]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a6d      	ldr	r2, [pc, #436]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d015      	beq.n	8002a4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe f89b 	bl	8000b5c <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe f897 	bl	8000b5c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0bc      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ee      	beq.n	8002a2a <HAL_RCC_OscConfig+0x33a>
 8002a4c:	e014      	b.n	8002a78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe f885 	bl	8000b5c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe f881 	bl	8000b5c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0a6      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6c:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ee      	bne.n	8002a56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b52      	ldr	r3, [pc, #328]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a51      	ldr	r2, [pc, #324]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8092 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d05c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d141      	bne.n	8002b2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b48      	ldr	r3, [pc, #288]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe f855 	bl	8000b5c <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe f851 	bl	8000b5c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e078      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	019b      	lsls	r3, r3, #6
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	3b01      	subs	r3, #1
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	061b      	lsls	r3, r3, #24
 8002af8:	4933      	ldr	r1, [pc, #204]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afe:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe f82a 	bl	8000b5c <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe f826 	bl	8000b5c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04d      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x41c>
 8002b2a:	e045      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7fe f813 	bl	8000b5c <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fe f80f 	bl	8000b5c <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e036      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x44a>
 8002b58:	e02e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e029      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_RCC_OscConfig+0x4d8>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d10d      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	42470060 	.word	0x42470060

08002bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0cc      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d90c      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d044      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d119      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e067      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 0203 	bic.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4934      	ldr	r1, [pc, #208]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc0:	f7fd ff4c 	bl	8000b5c <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7fd ff48 	bl	8000b5c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 020c 	and.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1eb      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d20c      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f821 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	5cd3      	ldrb	r3, [r2, r3]
 8002d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd feac 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	080071b8 	.word	0x080071b8
 8002d94:	20000004 	.word	0x20000004
 8002d98:	20000008 	.word	0x20000008

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	2300      	movs	r3, #0
 8002dac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d007      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x32>
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x38>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 80b4 	bne.w	8002f30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b5e      	ldr	r3, [pc, #376]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dca:	60bb      	str	r3, [r7, #8]
       break;
 8002dcc:	e0b3      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dce:	4b5d      	ldr	r3, [pc, #372]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dd0:	60bb      	str	r3, [r7, #8]
      break;
 8002dd2:	e0b0      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd4:	4b5a      	ldr	r3, [pc, #360]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ddc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dde:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d04a      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dea:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	f04f 0400 	mov.w	r4, #0
 8002df4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	ea03 0501 	and.w	r5, r3, r1
 8002e00:	ea04 0602 	and.w	r6, r4, r2
 8002e04:	4629      	mov	r1, r5
 8002e06:	4632      	mov	r2, r6
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	f04f 0400 	mov.w	r4, #0
 8002e10:	0154      	lsls	r4, r2, #5
 8002e12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e16:	014b      	lsls	r3, r1, #5
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	1b49      	subs	r1, r1, r5
 8002e1e:	eb62 0206 	sbc.w	r2, r2, r6
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	f04f 0400 	mov.w	r4, #0
 8002e2a:	0194      	lsls	r4, r2, #6
 8002e2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e30:	018b      	lsls	r3, r1, #6
 8002e32:	1a5b      	subs	r3, r3, r1
 8002e34:	eb64 0402 	sbc.w	r4, r4, r2
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	00e2      	lsls	r2, r4, #3
 8002e42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e46:	00d9      	lsls	r1, r3, #3
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4614      	mov	r4, r2
 8002e4c:	195b      	adds	r3, r3, r5
 8002e4e:	eb44 0406 	adc.w	r4, r4, r6
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	02a2      	lsls	r2, r4, #10
 8002e5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e60:	0299      	lsls	r1, r3, #10
 8002e62:	460b      	mov	r3, r1
 8002e64:	4614      	mov	r4, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	4621      	mov	r1, r4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f04f 0400 	mov.w	r4, #0
 8002e70:	461a      	mov	r2, r3
 8002e72:	4623      	mov	r3, r4
 8002e74:	f7fd f9b0 	bl	80001d8 <__aeabi_uldivmod>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e049      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e80:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	f04f 0400 	mov.w	r4, #0
 8002e8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	ea03 0501 	and.w	r5, r3, r1
 8002e96:	ea04 0602 	and.w	r6, r4, r2
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	4632      	mov	r2, r6
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	f04f 0400 	mov.w	r4, #0
 8002ea6:	0154      	lsls	r4, r2, #5
 8002ea8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002eac:	014b      	lsls	r3, r1, #5
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	1b49      	subs	r1, r1, r5
 8002eb4:	eb62 0206 	sbc.w	r2, r2, r6
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	0194      	lsls	r4, r2, #6
 8002ec2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ec6:	018b      	lsls	r3, r1, #6
 8002ec8:	1a5b      	subs	r3, r3, r1
 8002eca:	eb64 0402 	sbc.w	r4, r4, r2
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	00e2      	lsls	r2, r4, #3
 8002ed8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002edc:	00d9      	lsls	r1, r3, #3
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	195b      	adds	r3, r3, r5
 8002ee4:	eb44 0406 	adc.w	r4, r4, r6
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	02a2      	lsls	r2, r4, #10
 8002ef2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ef6:	0299      	lsls	r1, r3, #10
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4614      	mov	r4, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	4621      	mov	r1, r4
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f04f 0400 	mov.w	r4, #0
 8002f06:	461a      	mov	r2, r3
 8002f08:	4623      	mov	r3, r4
 8002f0a:	f7fd f965 	bl	80001d8 <__aeabi_uldivmod>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460c      	mov	r4, r1
 8002f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	60bb      	str	r3, [r7, #8]
      break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f32:	60bb      	str	r3, [r7, #8]
      break;
 8002f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f36:	68bb      	ldr	r3, [r7, #8]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	00f42400 	.word	0x00f42400

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000004 	.word	0x20000004

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff0 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4a03      	ldr	r2, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	080071c8 	.word	0x080071c8

08002f88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f88:	b084      	sub	sp, #16
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	f107 001c 	add.w	r0, r7, #28
 8002f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d122      	bne.n	8002fe6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f001 fac6 	bl	800456c <USB_CoreReset>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e01a      	b.n	800301c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f001 faba 	bl	800456c <USB_CoreReset>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
 800300e:	e005      	b.n	800301c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10b      	bne.n	800303a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f043 0206 	orr.w	r2, r3, #6
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003046:	b004      	add	sp, #16
 8003048:	4770      	bx	lr
	...

0800304c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d165      	bne.n	800312c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4a41      	ldr	r2, [pc, #260]	; (8003168 <USB_SetTurnaroundTime+0x11c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d906      	bls.n	8003076 <USB_SetTurnaroundTime+0x2a>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4a40      	ldr	r2, [pc, #256]	; (800316c <USB_SetTurnaroundTime+0x120>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d802      	bhi.n	8003076 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003070:	230f      	movs	r3, #15
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	e062      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4a3c      	ldr	r2, [pc, #240]	; (800316c <USB_SetTurnaroundTime+0x120>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d906      	bls.n	800308c <USB_SetTurnaroundTime+0x40>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4a3b      	ldr	r2, [pc, #236]	; (8003170 <USB_SetTurnaroundTime+0x124>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d802      	bhi.n	800308c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003086:	230e      	movs	r3, #14
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e057      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4a38      	ldr	r2, [pc, #224]	; (8003170 <USB_SetTurnaroundTime+0x124>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d906      	bls.n	80030a2 <USB_SetTurnaroundTime+0x56>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4a37      	ldr	r2, [pc, #220]	; (8003174 <USB_SetTurnaroundTime+0x128>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d802      	bhi.n	80030a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800309c:	230d      	movs	r3, #13
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e04c      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4a33      	ldr	r2, [pc, #204]	; (8003174 <USB_SetTurnaroundTime+0x128>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d906      	bls.n	80030b8 <USB_SetTurnaroundTime+0x6c>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4a32      	ldr	r2, [pc, #200]	; (8003178 <USB_SetTurnaroundTime+0x12c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d802      	bhi.n	80030b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80030b2:	230c      	movs	r3, #12
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e041      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4a2f      	ldr	r2, [pc, #188]	; (8003178 <USB_SetTurnaroundTime+0x12c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d906      	bls.n	80030ce <USB_SetTurnaroundTime+0x82>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4a2e      	ldr	r2, [pc, #184]	; (800317c <USB_SetTurnaroundTime+0x130>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d802      	bhi.n	80030ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80030c8:	230b      	movs	r3, #11
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e036      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4a2a      	ldr	r2, [pc, #168]	; (800317c <USB_SetTurnaroundTime+0x130>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d906      	bls.n	80030e4 <USB_SetTurnaroundTime+0x98>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <USB_SetTurnaroundTime+0x134>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d802      	bhi.n	80030e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80030de:	230a      	movs	r3, #10
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e02b      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4a26      	ldr	r2, [pc, #152]	; (8003180 <USB_SetTurnaroundTime+0x134>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d906      	bls.n	80030fa <USB_SetTurnaroundTime+0xae>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <USB_SetTurnaroundTime+0x138>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d802      	bhi.n	80030fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80030f4:	2309      	movs	r3, #9
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e020      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4a21      	ldr	r2, [pc, #132]	; (8003184 <USB_SetTurnaroundTime+0x138>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d906      	bls.n	8003110 <USB_SetTurnaroundTime+0xc4>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4a20      	ldr	r2, [pc, #128]	; (8003188 <USB_SetTurnaroundTime+0x13c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d802      	bhi.n	8003110 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800310a:	2308      	movs	r3, #8
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e015      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <USB_SetTurnaroundTime+0x13c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d906      	bls.n	8003126 <USB_SetTurnaroundTime+0xda>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <USB_SetTurnaroundTime+0x140>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d802      	bhi.n	8003126 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003120:	2307      	movs	r3, #7
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e00a      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003126:	2306      	movs	r3, #6
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	e007      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003132:	2309      	movs	r3, #9
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e001      	b.n	800313c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003138:	2309      	movs	r3, #9
 800313a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	029b      	lsls	r3, r3, #10
 8003150:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	00d8acbf 	.word	0x00d8acbf
 800316c:	00e4e1bf 	.word	0x00e4e1bf
 8003170:	00f423ff 	.word	0x00f423ff
 8003174:	0106737f 	.word	0x0106737f
 8003178:	011a499f 	.word	0x011a499f
 800317c:	01312cff 	.word	0x01312cff
 8003180:	014ca43f 	.word	0x014ca43f
 8003184:	016e35ff 	.word	0x016e35ff
 8003188:	01a6ab1f 	.word	0x01a6ab1f
 800318c:	01e847ff 	.word	0x01e847ff

08003190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 0201 	bic.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d106      	bne.n	8003200 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	e00b      	b.n	8003218 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e001      	b.n	8003218 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e003      	b.n	8003220 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003218:	2032      	movs	r0, #50	; 0x32
 800321a:	f7fd fcab 	bl	8000b74 <HAL_Delay>

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003228:	b084      	sub	sp, #16
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e009      	b.n	800325c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	3340      	adds	r3, #64	; 0x40
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3301      	adds	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b0e      	cmp	r3, #14
 8003260:	d9f2      	bls.n	8003248 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11c      	bne.n	80032a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
 80032a0:	e00b      	b.n	80032ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80032c0:	461a      	mov	r2, r3
 80032c2:	2300      	movs	r3, #0
 80032c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032cc:	4619      	mov	r1, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d4:	461a      	mov	r2, r3
 80032d6:	680b      	ldr	r3, [r1, #0]
 80032d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10c      	bne.n	80032fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032e6:	2100      	movs	r1, #0
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f949 	bl	8003580 <USB_SetDevSpeed>
 80032ee:	e008      	b.n	8003302 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032f0:	2101      	movs	r1, #1
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f944 	bl	8003580 <USB_SetDevSpeed>
 80032f8:	e003      	b.n	8003302 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032fa:	2103      	movs	r1, #3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f93f 	bl	8003580 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003302:	2110      	movs	r1, #16
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f8f3 	bl	80034f0 <USB_FlushTxFifo>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f911 	bl	800353c <USB_FlushRxFifo>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332a:	461a      	mov	r2, r3
 800332c:	2300      	movs	r3, #0
 800332e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003336:	461a      	mov	r2, r3
 8003338:	2300      	movs	r3, #0
 800333a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003342:	461a      	mov	r2, r3
 8003344:	2300      	movs	r3, #0
 8003346:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e043      	b.n	80033d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003364:	d118      	bne.n	8003398 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	461a      	mov	r2, r3
 800337a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e013      	b.n	80033aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338e:	461a      	mov	r2, r3
 8003390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e008      	b.n	80033aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a4:	461a      	mov	r2, r3
 80033a6:	2300      	movs	r3, #0
 80033a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b6:	461a      	mov	r2, r3
 80033b8:	2300      	movs	r3, #0
 80033ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c8:	461a      	mov	r2, r3
 80033ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	3301      	adds	r3, #1
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3b7      	bcc.n	800334e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	e043      	b.n	800346c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033fa:	d118      	bne.n	800342e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340e:	461a      	mov	r2, r3
 8003410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e013      	b.n	8003440 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003424:	461a      	mov	r2, r3
 8003426:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e008      	b.n	8003440 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	2300      	movs	r3, #0
 800343e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	2300      	movs	r3, #0
 8003450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345e:	461a      	mov	r2, r3
 8003460:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003464:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3301      	adds	r3, #1
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d3b7      	bcc.n	80033e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003486:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003494:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f043 0210 	orr.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699a      	ldr	r2, [r3, #24]
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <USB_DevInit+0x2c4>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f043 0208 	orr.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80034c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034e8:	b004      	add	sp, #16
 80034ea:	4770      	bx	lr
 80034ec:	803c3800 	.word	0x803c3800

080034f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3301      	adds	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <USB_FlushTxFifo+0x48>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e006      	b.n	800352a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b20      	cmp	r3, #32
 8003526:	d0f0      	beq.n	800350a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	00030d40 	.word	0x00030d40

0800353c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2210      	movs	r2, #16
 800354c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3301      	adds	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <USB_FlushRxFifo+0x40>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e006      	b.n	800356e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b10      	cmp	r3, #16
 800356a:	d0f0      	beq.n	800354e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	00030d40 	.word	0x00030d40

08003580 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	68f9      	ldr	r1, [r7, #12]
 800359c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b087      	sub	sp, #28
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]
 80035d6:	e00a      	b.n	80035ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d002      	beq.n	80035e4 <USB_GetDevSpeed+0x32>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	d102      	bne.n	80035ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80035e4:	2302      	movs	r3, #2
 80035e6:	75fb      	strb	r3, [r7, #23]
 80035e8:	e001      	b.n	80035ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80035ea:	230f      	movs	r3, #15
 80035ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	785b      	ldrb	r3, [r3, #1]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d13a      	bne.n	800368e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	b29b      	uxth	r3, r3
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003636:	4313      	orrs	r3, r2
 8003638:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d155      	bne.n	80036fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	78db      	ldrb	r3, [r3, #3]
 800366a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800366c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	059b      	lsls	r3, r3, #22
 8003672:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003674:	4313      	orrs	r3, r2
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e036      	b.n	80036fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11a      	bne.n	80036fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	78db      	ldrb	r3, [r3, #3]
 80036e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036e2:	430b      	orrs	r3, r1
 80036e4:	4313      	orrs	r3, r2
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	0151      	lsls	r1, r2, #5
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	440a      	add	r2, r1
 80036ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	785b      	ldrb	r3, [r3, #1]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d161      	bne.n	80037ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800373a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800373e:	d11f      	bne.n	8003780 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	0151      	lsls	r1, r2, #5
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	440a      	add	r2, r1
 8003756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800375a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800375e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	440a      	add	r2, r1
 8003776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800377a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800377e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	b29b      	uxth	r3, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a0:	4013      	ands	r3, r2
 80037a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c4:	4013      	ands	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	0159      	lsls	r1, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	440b      	add	r3, r1
 80037de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e2:	4619      	mov	r1, r3
 80037e4:	4b35      	ldr	r3, [pc, #212]	; (80038bc <USB_DeactivateEndpoint+0x1b0>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
 80037ea:	e060      	b.n	80038ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003802:	d11f      	bne.n	8003844 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	0151      	lsls	r1, r2, #5
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	440a      	add	r2, r1
 800381a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003822:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800383e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003842:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	43db      	mvns	r3, r3
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003864:	4013      	ands	r3, r2
 8003866:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	43db      	mvns	r3, r3
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003888:	4013      	ands	r3, r2
 800388a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	0159      	lsls	r1, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	440b      	add	r3, r1
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	4619      	mov	r1, r3
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <USB_DeactivateEndpoint+0x1b4>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	ec337800 	.word	0xec337800
 80038c0:	eff37800 	.word	0xeff37800

080038c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 815c 	bne.w	8003b9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d132      	bne.n	8003954 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	0151      	lsls	r1, r2, #5
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	440a      	add	r2, r1
 8003904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003908:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800390c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	0151      	lsls	r1, r2, #5
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	440a      	add	r2, r1
 8003928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	440a      	add	r2, r1
 8003948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394c:	0cdb      	lsrs	r3, r3, #19
 800394e:	04db      	lsls	r3, r3, #19
 8003950:	6113      	str	r3, [r2, #16]
 8003952:	e074      	b.n	8003a3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800396e:	0cdb      	lsrs	r3, r3, #19
 8003970:	04db      	lsls	r3, r3, #19
 8003972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800398e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003992:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6959      	ldr	r1, [r3, #20]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	440b      	add	r3, r1
 80039b0:	1e59      	subs	r1, r3, #1
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ba:	04d9      	lsls	r1, r3, #19
 80039bc:	4b9d      	ldr	r3, [pc, #628]	; (8003c34 <USB_EPStartXfer+0x370>)
 80039be:	400b      	ands	r3, r1
 80039c0:	69b9      	ldr	r1, [r7, #24]
 80039c2:	0148      	lsls	r0, r1, #5
 80039c4:	69f9      	ldr	r1, [r7, #28]
 80039c6:	4401      	add	r1, r0
 80039c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	69b9      	ldr	r1, [r7, #24]
 80039e8:	0148      	lsls	r0, r1, #5
 80039ea:	69f9      	ldr	r1, [r7, #28]
 80039ec:	4401      	add	r1, r0
 80039ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039f2:	4313      	orrs	r3, r2
 80039f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	78db      	ldrb	r3, [r3, #3]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d11f      	bne.n	8003a3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	0151      	lsls	r1, r2, #5
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	440a      	add	r2, r1
 8003a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d14b      	bne.n	8003adc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	78db      	ldrb	r3, [r3, #3]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d128      	bne.n	8003aba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d110      	bne.n	8003a9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	0151      	lsls	r1, r2, #5
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	440a      	add	r2, r1
 8003a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e00f      	b.n	8003aba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	0151      	lsls	r1, r2, #5
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	440a      	add	r2, r1
 8003ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	0151      	lsls	r1, r2, #5
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	440a      	add	r2, r1
 8003ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e12f      	b.n	8003d3c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003afa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	78db      	ldrb	r3, [r3, #3]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d015      	beq.n	8003b30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8117 	beq.w	8003d3c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	2101      	movs	r1, #1
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	634b      	str	r3, [r1, #52]	; 0x34
 8003b2e:	e105      	b.n	8003d3c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d110      	bne.n	8003b62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	0151      	lsls	r1, r2, #5
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	440a      	add	r2, r1
 8003b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e00f      	b.n	8003b82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	68d9      	ldr	r1, [r3, #12]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	781a      	ldrb	r2, [r3, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	b298      	uxth	r0, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	4603      	mov	r3, r0
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fa2b 	bl	8003ff2 <USB_WritePacket>
 8003b9c:	e0ce      	b.n	8003d3c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	0151      	lsls	r1, r2, #5
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	440a      	add	r2, r1
 8003bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb8:	0cdb      	lsrs	r3, r3, #19
 8003bba:	04db      	lsls	r3, r3, #19
 8003bbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003be0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d126      	bne.n	8003c38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c00:	69b9      	ldr	r1, [r7, #24]
 8003c02:	0148      	lsls	r0, r1, #5
 8003c04:	69f9      	ldr	r1, [r7, #28]
 8003c06:	4401      	add	r1, r0
 8003c08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c2e:	6113      	str	r3, [r2, #16]
 8003c30:	e036      	b.n	8003ca0 <USB_EPStartXfer+0x3dc>
 8003c32:	bf00      	nop
 8003c34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4413      	add	r3, r2
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	8afb      	ldrh	r3, [r7, #22]
 8003c5e:	04d9      	lsls	r1, r3, #19
 8003c60:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <USB_EPStartXfer+0x484>)
 8003c62:	400b      	ands	r3, r1
 8003c64:	69b9      	ldr	r1, [r7, #24]
 8003c66:	0148      	lsls	r0, r1, #5
 8003c68:	69f9      	ldr	r1, [r7, #28]
 8003c6a:	4401      	add	r1, r0
 8003c6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c70:	4313      	orrs	r3, r2
 8003c72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	8af9      	ldrh	r1, [r7, #22]
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c90:	69b9      	ldr	r1, [r7, #24]
 8003c92:	0148      	lsls	r0, r1, #5
 8003c94:	69f9      	ldr	r1, [r7, #28]
 8003c96:	4401      	add	r1, r0
 8003c98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10d      	bne.n	8003cc2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	68d9      	ldr	r1, [r3, #12]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	78db      	ldrb	r3, [r3, #3]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d128      	bne.n	8003d1c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d110      	bne.n	8003cfc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00f      	b.n	8003d1c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	1ff80000 	.word	0x1ff80000

08003d4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 80cd 	bne.w	8003f08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d132      	bne.n	8003ddc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	0151      	lsls	r1, r2, #5
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	440a      	add	r2, r1
 8003db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd4:	0cdb      	lsrs	r3, r3, #19
 8003dd6:	04db      	lsls	r3, r3, #19
 8003dd8:	6113      	str	r3, [r2, #16]
 8003dda:	e04e      	b.n	8003e7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df6:	0cdb      	lsrs	r3, r3, #19
 8003df8:	04db      	lsls	r3, r3, #19
 8003dfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d903      	bls.n	8003e34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	0151      	lsls	r1, r2, #5
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	440a      	add	r2, r1
 8003e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6a:	6939      	ldr	r1, [r7, #16]
 8003e6c:	0148      	lsls	r0, r1, #5
 8003e6e:	6979      	ldr	r1, [r7, #20]
 8003e70:	4401      	add	r1, r0
 8003e72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e76:	4313      	orrs	r3, r2
 8003e78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d11e      	bne.n	8003ebe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d009      	beq.n	8003e9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e94:	461a      	mov	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	e092      	b.n	8003fe4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	0151      	lsls	r1, r2, #5
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	440a      	add	r2, r1
 8003ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003edc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d07e      	beq.n	8003fe4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f02:	4313      	orrs	r3, r2
 8003f04:	634b      	str	r3, [r1, #52]	; 0x34
 8003f06:	e06d      	b.n	8003fe4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f22:	0cdb      	lsrs	r3, r3, #19
 8003f24:	04db      	lsls	r3, r3, #19
 8003f26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f4a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	0151      	lsls	r1, r2, #5
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	440a      	add	r2, r1
 8003f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f92:	6939      	ldr	r1, [r7, #16]
 8003f94:	0148      	lsls	r0, r1, #5
 8003f96:	6979      	ldr	r1, [r7, #20]
 8003f98:	4401      	add	r1, r0
 8003f9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10d      	bne.n	8003fc4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	68d9      	ldr	r1, [r3, #12]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc0:	460a      	mov	r2, r1
 8003fc2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	0151      	lsls	r1, r2, #5
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	440a      	add	r2, r1
 8003fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b089      	sub	sp, #36	; 0x24
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	461a      	mov	r2, r3
 8004000:	460b      	mov	r3, r1
 8004002:	71fb      	strb	r3, [r7, #7]
 8004004:	4613      	mov	r3, r2
 8004006:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004010:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11a      	bne.n	800404e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004018:	88bb      	ldrh	r3, [r7, #4]
 800401a:	3303      	adds	r3, #3
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	e00f      	b.n	8004046 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	031a      	lsls	r2, r3, #12
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	4413      	add	r3, r2
 800402e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004032:	461a      	mov	r2, r3
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6013      	str	r3, [r2, #0]
      pSrc++;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3304      	adds	r3, #4
 800403e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	3301      	adds	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	d3eb      	bcc.n	8004026 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3724      	adds	r7, #36	; 0x24
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	; 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	3303      	adds	r3, #3
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e00b      	b.n	8004098 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	601a      	str	r2, [r3, #0]
    pDest++;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3304      	adds	r3, #4
 8004090:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3301      	adds	r3, #1
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d3ef      	bcc.n	8004080 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80040a0:	69fb      	ldr	r3, [r7, #28]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3724      	adds	r7, #36	; 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	785b      	ldrb	r3, [r3, #1]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d12c      	bne.n	8004124 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	db12      	blt.n	8004102 <USB_EPSetStall+0x54>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00f      	beq.n	8004102 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004100:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	440a      	add	r2, r1
 8004118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e02b      	b.n	800417c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	db12      	blt.n	800415c <USB_EPSetStall+0xae>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00f      	beq.n	800415c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004156:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800415a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	440a      	add	r2, r1
 8004172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800417a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	785b      	ldrb	r3, [r3, #1]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d128      	bne.n	80041f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	78db      	ldrb	r3, [r3, #3]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d003      	beq.n	80041d6 <USB_EPClearStall+0x4c>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	78db      	ldrb	r3, [r3, #3]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d138      	bne.n	8004248 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e027      	b.n	8004248 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004212:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004216:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	78db      	ldrb	r3, [r3, #3]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d003      	beq.n	8004228 <USB_EPClearStall+0x9e>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	78db      	ldrb	r3, [r3, #3]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d10f      	bne.n	8004248 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	0151      	lsls	r1, r2, #5
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	440a      	add	r2, r1
 800423e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004246:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004274:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004278:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004290:	4313      	orrs	r3, r2
 8004292:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042bc:	f023 0303 	bic.w	r3, r3, #3
 80042c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d0:	f023 0302 	bic.w	r3, r3, #2
 80042d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004312:	f043 0302 	orr.w	r3, r3, #2
 8004316:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4013      	ands	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800433e:	68fb      	ldr	r3, [r7, #12]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	0c1b      	lsrs	r3, r3, #16
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4013      	ands	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	b29b      	uxth	r3, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043e2:	68bb      	ldr	r3, [r7, #8]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	01db      	lsls	r3, r3, #7
 8004422:	b2db      	uxtb	r3, r3
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800443e:	68bb      	ldr	r3, [r7, #8]
}
 8004440:	4618      	mov	r0, r3
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0301 	and.w	r3, r3, #1
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004482:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004486:	f023 0307 	bic.w	r3, r3, #7
 800448a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	460b      	mov	r3, r1
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	333c      	adds	r3, #60	; 0x3c
 80044c6:	3304      	adds	r3, #4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4a26      	ldr	r2, [pc, #152]	; (8004568 <USB_EP0_OutStart+0xb8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d90a      	bls.n	80044ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e4:	d101      	bne.n	80044ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e037      	b.n	800455a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	461a      	mov	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004518:	f043 0318 	orr.w	r3, r3, #24
 800451c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800452c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004530:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004532:	7afb      	ldrb	r3, [r7, #11]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d10f      	bne.n	8004558 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004552:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004556:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	4f54300a 	.word	0x4f54300a

0800456c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3301      	adds	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <USB_CoreReset+0x64>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e01b      	b.n	80045c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	daf2      	bge.n	8004578 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <USB_CoreReset+0x64>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e006      	b.n	80045c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d0f0      	beq.n	80045a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	00030d40 	.word	0x00030d40

080045d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80045e0:	205c      	movs	r0, #92	; 0x5c
 80045e2:	f002 f927 	bl	8006834 <malloc>
 80045e6:	4603      	mov	r3, r0
 80045e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80045f8:	2302      	movs	r3, #2
 80045fa:	e05f      	b.n	80046bc <USBD_CDC_Init+0xe8>
  }

  pdev->pClassData = (void *)hcdc;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7c1b      	ldrb	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d117      	bne.n	800463c <USBD_CDC_Init+0x68>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800460c:	2340      	movs	r3, #64	; 0x40
 800460e:	2202      	movs	r2, #2
 8004610:	2181      	movs	r1, #129	; 0x81
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f001 ff95 	bl	8006542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800461e:	2340      	movs	r3, #64	; 0x40
 8004620:	2202      	movs	r2, #2
 8004622:	2101      	movs	r1, #1
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 ff8c 	bl	8006542 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2210      	movs	r2, #16
 8004636:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800463a:	e016      	b.n	800466a <USBD_CDC_Init+0x96>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800463c:	2340      	movs	r3, #64	; 0x40
 800463e:	2202      	movs	r2, #2
 8004640:	2181      	movs	r1, #129	; 0x81
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f001 ff7d 	bl	8006542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800464e:	2340      	movs	r3, #64	; 0x40
 8004650:	2202      	movs	r2, #2
 8004652:	2101      	movs	r1, #1
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f001 ff74 	bl	8006542 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2210      	movs	r2, #16
 8004666:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800466a:	2308      	movs	r3, #8
 800466c:	2203      	movs	r2, #3
 800466e:	2182      	movs	r1, #130	; 0x82
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f001 ff66 	bl	8006542 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	659a      	str	r2, [r3, #88]	; 0x58

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7c1b      	ldrb	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d107      	bne.n	80046ac <USBD_CDC_Init+0xd8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a0:	2340      	movs	r3, #64	; 0x40
 80046a2:	2101      	movs	r1, #1
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f002 f83b 	bl	8006720 <USBD_LL_PrepareReceive>
 80046aa:	e006      	b.n	80046ba <USBD_CDC_Init+0xe6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b0:	2340      	movs	r3, #64	; 0x40
 80046b2:	2101      	movs	r1, #1
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f002 f833 	bl	8006720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80046d4:	2181      	movs	r1, #129	; 0x81
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f001 ff59 	bl	800658e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80046e2:	2101      	movs	r1, #1
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f001 ff52 	bl	800658e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80046f2:	2182      	movs	r1, #130	; 0x82
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f001 ff4a 	bl	800658e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004724:	4618      	mov	r0, r3
 8004726:	f002 f88d 	bl	8006844 <free>
    pdev->pClassData = NULL;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800474c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03a      	beq.n	80047dc <USBD_CDC_Setup+0xa0>
 8004766:	2b20      	cmp	r3, #32
 8004768:	f040 8097 	bne.w	800489a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	88db      	ldrh	r3, [r3, #6]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d029      	beq.n	80047c8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	b25b      	sxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	da11      	bge.n	80047a2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800478a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	88d2      	ldrh	r2, [r2, #6]
 8004790:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004792:	6939      	ldr	r1, [r7, #16]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	88db      	ldrh	r3, [r3, #6]
 8004798:	461a      	mov	r2, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 fa8d 	bl	8005cba <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80047a0:	e082      	b.n	80048a8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	785a      	ldrb	r2, [r3, #1]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hcdc->CmdLength = (uint8_t)req->wLength;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	88db      	ldrh	r3, [r3, #6]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80047b8:	6939      	ldr	r1, [r7, #16]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	88db      	ldrh	r3, [r3, #6]
 80047be:	461a      	mov	r2, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f001 faa6 	bl	8005d12 <USBD_CtlPrepareRx>
    break;
 80047c6:	e06f      	b.n	80048a8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	7850      	ldrb	r0, [r2, #1]
 80047d4:	2200      	movs	r2, #0
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	4798      	blx	r3
    break;
 80047da:	e065      	b.n	80048a8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	2b0b      	cmp	r3, #11
 80047e2:	d84f      	bhi.n	8004884 <USBD_CDC_Setup+0x148>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <USBD_CDC_Setup+0xb0>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	08004893 	.word	0x08004893
 80047f4:	08004885 	.word	0x08004885
 80047f8:	08004885 	.word	0x08004885
 80047fc:	08004885 	.word	0x08004885
 8004800:	08004885 	.word	0x08004885
 8004804:	08004885 	.word	0x08004885
 8004808:	08004885 	.word	0x08004885
 800480c:	08004885 	.word	0x08004885
 8004810:	08004885 	.word	0x08004885
 8004814:	08004845 	.word	0x08004845
 8004818:	0800486d 	.word	0x0800486d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004822:	2b03      	cmp	r3, #3
 8004824:	d107      	bne.n	8004836 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004826:	f107 030c 	add.w	r3, r7, #12
 800482a:	2202      	movs	r2, #2
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 fa43 	bl	8005cba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004834:	e030      	b.n	8004898 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004836:	6839      	ldr	r1, [r7, #0]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f001 f9cd 	bl	8005bd8 <USBD_CtlError>
        ret = USBD_FAIL;
 800483e:	2303      	movs	r3, #3
 8004840:	75fb      	strb	r3, [r7, #23]
      break;
 8004842:	e029      	b.n	8004898 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800484a:	2b03      	cmp	r3, #3
 800484c:	d107      	bne.n	800485e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800484e:	f107 030f 	add.w	r3, r7, #15
 8004852:	2201      	movs	r2, #1
 8004854:	4619      	mov	r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f001 fa2f 	bl	8005cba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800485c:	e01c      	b.n	8004898 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800485e:	6839      	ldr	r1, [r7, #0]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f001 f9b9 	bl	8005bd8 <USBD_CtlError>
        ret = USBD_FAIL;
 8004866:	2303      	movs	r3, #3
 8004868:	75fb      	strb	r3, [r7, #23]
      break;
 800486a:	e015      	b.n	8004898 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004872:	2b03      	cmp	r3, #3
 8004874:	d00f      	beq.n	8004896 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004876:	6839      	ldr	r1, [r7, #0]
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f001 f9ad 	bl	8005bd8 <USBD_CtlError>
        ret = USBD_FAIL;
 800487e:	2303      	movs	r3, #3
 8004880:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004882:	e008      	b.n	8004896 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f001 f9a6 	bl	8005bd8 <USBD_CtlError>
      ret = USBD_FAIL;
 800488c:	2303      	movs	r3, #3
 800488e:	75fb      	strb	r3, [r7, #23]
      break;
 8004890:	e002      	b.n	8004898 <USBD_CDC_Setup+0x15c>
      break;
 8004892:	bf00      	nop
 8004894:	e008      	b.n	80048a8 <USBD_CDC_Setup+0x16c>
      break;
 8004896:	bf00      	nop
    }
    break;
 8004898:	e006      	b.n	80048a8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800489a:	6839      	ldr	r1, [r7, #0]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 f99b 	bl	8005bd8 <USBD_CtlError>
    ret = USBD_FAIL;
 80048a2:	2303      	movs	r3, #3
 80048a4:	75fb      	strb	r3, [r7, #23]
    break;
 80048a6:	bf00      	nop
  }

  return (uint8_t)ret;
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop

080048b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80048c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e047      	b.n	8004966 <USBD_CDC_DataIn+0xb2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3318      	adds	r3, #24
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d029      	beq.n	8004948 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80048f4:	78fa      	ldrb	r2, [r7, #3]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	3318      	adds	r3, #24
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	78f9      	ldrb	r1, [r7, #3]
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	460b      	mov	r3, r1
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	1a5b      	subs	r3, r3, r1
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4403      	add	r3, r0
 8004914:	3344      	adds	r3, #68	; 0x44
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	fbb2 f1f3 	udiv	r1, r2, r3
 800491c:	fb03 f301 	mul.w	r3, r3, r1
 8004920:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004922:	2b00      	cmp	r3, #0
 8004924:	d110      	bne.n	8004948 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3318      	adds	r3, #24
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800493a:	78f9      	ldrb	r1, [r7, #3]
 800493c:	2300      	movs	r3, #0
 800493e:	2200      	movs	r2, #0
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 fecc 	bl	80066de <USBD_LL_Transmit>
 8004946:	e00d      	b.n	8004964 <USBD_CDC_DataIn+0xb0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2200      	movs	r2, #0
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	f102 0150 	add.w	r1, r2, #80	; 0x50
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004980:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800498c:	2303      	movs	r3, #3
 800498e:	e012      	b.n	80049b6 <USBD_CDC_DataOut+0x48>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fee4 	bl	8006762 <USBD_LL_GetRxDataSize>
 800499a:	4602      	mov	r2, r0
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	324c      	adds	r2, #76	; 0x4c
 80049b0:	4611      	mov	r1, r2
 80049b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049cc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <USBD_CDC_EP0_RxReady+0x46>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049de:	2bff      	cmp	r3, #255	; 0xff
 80049e0:	d010      	beq.n	8004a04 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)hcdc->data,
 80049f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049f8:	b292      	uxth	r2, r2
 80049fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  }

  return (uint8_t)USBD_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2243      	movs	r2, #67	; 0x43
 8004a1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004a1e:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000098 	.word	0x20000098

08004a30 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2243      	movs	r2, #67	; 0x43
 8004a3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004a3e:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000054 	.word	0x20000054

08004a50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2243      	movs	r2, #67	; 0x43
 8004a5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004a5e:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	200000dc 	.word	0x200000dc

08004a70 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	220a      	movs	r2, #10
 8004a7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004a7e:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	20000010 	.word	0x20000010

08004a90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e004      	b.n	8004aae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b087      	sub	sp, #28
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004acc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004af8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b1c:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e015      	b.n	8004b5c <USBD_CDC_TransmitPacket+0x4e>
  }

  if (hcdc->TxState == 0U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d110      	bne.n	8004b5a <USBD_CDC_TransmitPacket+0x4c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4e:	2181      	movs	r1, #129	; 0x81
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f001 fdc4 	bl	80066de <USBD_LL_Transmit>

    ret = USBD_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e013      	b.n	8004baa <USBD_CDC_ReceivePacket+0x46>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	7c1b      	ldrb	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <USBD_CDC_ReceivePacket+0x36>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8e:	2340      	movs	r3, #64	; 0x40
 8004b90:	2101      	movs	r1, #1
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 fdc4 	bl	8006720 <USBD_LL_PrepareReceive>
 8004b98:	e006      	b.n	8004ba8 <USBD_CDC_ReceivePacket+0x44>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9e:	2340      	movs	r3, #64	; 0x40
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f001 fdbc 	bl	8006720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b086      	sub	sp, #24
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e025      	b.n	8004c16 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	79fa      	ldrb	r2, [r7, #7]
 8004c08:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f001 fc32 	bl	8006474 <USBD_LL_Init>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e010      	b.n	8004c58 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f107 020e 	add.w	r2, r7, #14
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4798      	blx	r3
 8004c4e:	4602      	mov	r2, r0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f001 fc4f 	bl	800650c <USBD_LL_Start>
 8004c6e:	4603      	mov	r3, r0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
  }

  return USBD_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 ff2b 	bl	8005b64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d00e      	beq.n	8004d50 <USBD_LL_SetupStage+0x5a>
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d302      	bcc.n	8004d3c <USBD_LL_SetupStage+0x46>
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d014      	beq.n	8004d64 <USBD_LL_SetupStage+0x6e>
 8004d3a:	e01d      	b.n	8004d78 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fa17 	bl	8005178 <USBD_StdDevReq>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4e:	e020      	b.n	8004d92 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d56:	4619      	mov	r1, r3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fa7b 	bl	8005254 <USBD_StdItfReq>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	73fb      	strb	r3, [r7, #15]
      break;
 8004d62:	e016      	b.n	8004d92 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fab7 	bl	80052e0 <USBD_StdEPReq>
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]
      break;
 8004d76:	e00c      	b.n	8004d92 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004d7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f001 fc20 	bl	80065cc <USBD_LL_StallEP>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d90:	bf00      	nop
  }

  return ret;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	460b      	mov	r3, r1
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004daa:	7afb      	ldrb	r3, [r7, #11]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d137      	bne.n	8004e20 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004db6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d14a      	bne.n	8004e58 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d913      	bls.n	8004df6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	1ad2      	subs	r2, r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bf28      	it	cs
 8004de8:	4613      	movcs	r3, r2
 8004dea:	461a      	mov	r2, r3
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 ffac 	bl	8005d4c <USBD_CtlContinueRx>
 8004df4:	e030      	b.n	8004e58 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d105      	bne.n	8004e18 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 ffa8 	bl	8005d6e <USBD_CtlSendStatus>
 8004e1e:	e01b      	b.n	8004e58 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d10e      	bne.n	8004e54 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	7afa      	ldrb	r2, [r7, #11]
 8004e40:	4611      	mov	r1, r2
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	4798      	blx	r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	e002      	b.n	8004e5a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e000      	b.n	8004e5a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e70:	7afb      	ldrb	r3, [r7, #11]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d16a      	bne.n	8004f4c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d155      	bne.n	8004f32 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d914      	bls.n	8004ebc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	1ad2      	subs	r2, r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 ff21 	bl	8005cf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f001 fc33 	bl	8006720 <USBD_LL_PrepareReceive>
 8004eba:	e03a      	b.n	8004f32 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d11c      	bne.n	8004f02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d316      	bcc.n	8004f02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d20f      	bcs.n	8004f02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 ff02 	bl	8005cf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2100      	movs	r1, #0
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f001 fc10 	bl	8006720 <USBD_LL_PrepareReceive>
 8004f00:	e017      	b.n	8004f32 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d105      	bne.n	8004f24 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f24:	2180      	movs	r1, #128	; 0x80
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f001 fb50 	bl	80065cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 ff31 	bl	8005d94 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d123      	bne.n	8004f84 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff fe9b 	bl	8004c78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004f4a:	e01b      	b.n	8004f84 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d013      	beq.n	8004f80 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d10e      	bne.n	8004f80 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	7afa      	ldrb	r2, [r7, #11]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	4798      	blx	r3
 8004f72:	4603      	mov	r3, r0
 8004f74:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	e002      	b.n	8004f86 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e000      	b.n	8004f86 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6852      	ldr	r2, [r2, #4]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	4611      	mov	r1, r2
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fd2:	2340      	movs	r3, #64	; 0x40
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fab2 	bl	8006542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2240      	movs	r2, #64	; 0x40
 8004fea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f001 faa4 	bl	8006542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2240      	movs	r2, #64	; 0x40
 8005004:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2204      	movs	r2, #4
 8005048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005068:	2b04      	cmp	r3, #4
 800506a:	d105      	bne.n	8005078 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005094:	2b03      	cmp	r3, #3
 8005096:	d10b      	bne.n	80050b0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6852      	ldr	r2, [r2, #4]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	4611      	mov	r1, r2
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
  }

  return USBD_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3301      	adds	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800515a:	8a3b      	ldrh	r3, [r7, #16]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	b21a      	sxth	r2, r3
 8005160:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005164:	4313      	orrs	r3, r2
 8005166:	b21b      	sxth	r3, r3
 8005168:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800516a:	89fb      	ldrh	r3, [r7, #14]
}
 800516c:	4618      	mov	r0, r3
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800518e:	2b20      	cmp	r3, #32
 8005190:	d004      	beq.n	800519c <USBD_StdDevReq+0x24>
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d002      	beq.n	800519c <USBD_StdDevReq+0x24>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <USBD_StdDevReq+0x38>
 800519a:	e050      	b.n	800523e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	73fb      	strb	r3, [r7, #15]
    break;
 80051ae:	e04b      	b.n	8005248 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d83c      	bhi.n	8005232 <USBD_StdDevReq+0xba>
 80051b8:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <USBD_StdDevReq+0x48>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	08005215 	.word	0x08005215
 80051c4:	08005229 	.word	0x08005229
 80051c8:	08005233 	.word	0x08005233
 80051cc:	0800521f 	.word	0x0800521f
 80051d0:	08005233 	.word	0x08005233
 80051d4:	080051f3 	.word	0x080051f3
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	08005233 	.word	0x08005233
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	080051fd 	.word	0x080051fd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9ce 	bl	800558c <USBD_GetDescriptor>
      break;
 80051f0:	e024      	b.n	800523c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80051f2:	6839      	ldr	r1, [r7, #0]
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fb33 	bl	8005860 <USBD_SetAddress>
      break;
 80051fa:	e01f      	b.n	800523c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fb70 	bl	80058e4 <USBD_SetConfig>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
      break;
 8005208:	e018      	b.n	800523c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fc0d 	bl	8005a2c <USBD_GetConfig>
      break;
 8005212:	e013      	b.n	800523c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fc3c 	bl	8005a94 <USBD_GetStatus>
      break;
 800521c:	e00e      	b.n	800523c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fc6a 	bl	8005afa <USBD_SetFeature>
      break;
 8005226:	e009      	b.n	800523c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fc79 	bl	8005b22 <USBD_ClrFeature>
      break;
 8005230:	e004      	b.n	800523c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005232:	6839      	ldr	r1, [r7, #0]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fccf 	bl	8005bd8 <USBD_CtlError>
      break;
 800523a:	bf00      	nop
    }
    break;
 800523c:	e004      	b.n	8005248 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fcc9 	bl	8005bd8 <USBD_CtlError>
    break;
 8005246:	bf00      	nop
  }

  return ret;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop

08005254 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800526a:	2b20      	cmp	r3, #32
 800526c:	d003      	beq.n	8005276 <USBD_StdItfReq+0x22>
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	d001      	beq.n	8005276 <USBD_StdItfReq+0x22>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d12a      	bne.n	80052cc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800527c:	3b01      	subs	r3, #1
 800527e:	2b02      	cmp	r3, #2
 8005280:	d81d      	bhi.n	80052be <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	889b      	ldrh	r3, [r3, #4]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d813      	bhi.n	80052b4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
 800529a:	4603      	mov	r3, r0
 800529c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	88db      	ldrh	r3, [r3, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d110      	bne.n	80052c8 <USBD_StdItfReq+0x74>
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fd5e 	bl	8005d6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80052b2:	e009      	b.n	80052c8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fc8e 	bl	8005bd8 <USBD_CtlError>
      break;
 80052bc:	e004      	b.n	80052c8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fc89 	bl	8005bd8 <USBD_CtlError>
      break;
 80052c6:	e000      	b.n	80052ca <USBD_StdItfReq+0x76>
      break;
 80052c8:	bf00      	nop
    }
    break;
 80052ca:	e004      	b.n	80052d6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fc82 	bl	8005bd8 <USBD_CtlError>
    break;
 80052d4:	bf00      	nop
  }

  return ret;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	889b      	ldrh	r3, [r3, #4]
 80052f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d004      	beq.n	800530a <USBD_StdEPReq+0x2a>
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d002      	beq.n	800530a <USBD_StdEPReq+0x2a>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <USBD_StdEPReq+0x3e>
 8005308:	e135      	b.n	8005576 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	4798      	blx	r3
 8005318:	4603      	mov	r3, r0
 800531a:	73fb      	strb	r3, [r7, #15]
    break;
 800531c:	e130      	b.n	8005580 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d03e      	beq.n	80053a4 <USBD_StdEPReq+0xc4>
 8005326:	2b03      	cmp	r3, #3
 8005328:	d002      	beq.n	8005330 <USBD_StdEPReq+0x50>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d077      	beq.n	800541e <USBD_StdEPReq+0x13e>
 800532e:	e11c      	b.n	800556a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005336:	2b02      	cmp	r3, #2
 8005338:	d002      	beq.n	8005340 <USBD_StdEPReq+0x60>
 800533a:	2b03      	cmp	r3, #3
 800533c:	d015      	beq.n	800536a <USBD_StdEPReq+0x8a>
 800533e:	e02b      	b.n	8005398 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <USBD_StdEPReq+0x80>
 8005346:	7bbb      	ldrb	r3, [r7, #14]
 8005348:	2b80      	cmp	r3, #128	; 0x80
 800534a:	d009      	beq.n	8005360 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800534c:	7bbb      	ldrb	r3, [r7, #14]
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 f93b 	bl	80065cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005356:	2180      	movs	r1, #128	; 0x80
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f001 f937 	bl	80065cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800535e:	e020      	b.n	80053a2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fc38 	bl	8005bd8 <USBD_CtlError>
        break;
 8005368:	e01b      	b.n	80053a2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	885b      	ldrh	r3, [r3, #2]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10e      	bne.n	8005390 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <USBD_StdEPReq+0xb0>
 8005378:	7bbb      	ldrb	r3, [r7, #14]
 800537a:	2b80      	cmp	r3, #128	; 0x80
 800537c:	d008      	beq.n	8005390 <USBD_StdEPReq+0xb0>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	88db      	ldrh	r3, [r3, #6]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005386:	7bbb      	ldrb	r3, [r7, #14]
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 f91e 	bl	80065cc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fcec 	bl	8005d6e <USBD_CtlSendStatus>

        break;
 8005396:	e004      	b.n	80053a2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fc1c 	bl	8005bd8 <USBD_CtlError>
        break;
 80053a0:	bf00      	nop
      }
      break;
 80053a2:	e0e7      	b.n	8005574 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d002      	beq.n	80053b4 <USBD_StdEPReq+0xd4>
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d015      	beq.n	80053de <USBD_StdEPReq+0xfe>
 80053b2:	e02d      	b.n	8005410 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053b4:	7bbb      	ldrb	r3, [r7, #14]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <USBD_StdEPReq+0xf4>
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d009      	beq.n	80053d4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 f901 	bl	80065cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 f8fd 	bl	80065cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80053d2:	e023      	b.n	800541c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fbfe 	bl	8005bd8 <USBD_CtlError>
        break;
 80053dc:	e01e      	b.n	800541c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	885b      	ldrh	r3, [r3, #2]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d119      	bne.n	800541a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80053f0:	7bbb      	ldrb	r3, [r7, #14]
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 f908 	bl	800660a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fcb7 	bl	8005d6e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
        }
        break;
 800540e:	e004      	b.n	800541a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fbe0 	bl	8005bd8 <USBD_CtlError>
        break;
 8005418:	e000      	b.n	800541c <USBD_StdEPReq+0x13c>
        break;
 800541a:	bf00      	nop
      }
      break;
 800541c:	e0aa      	b.n	8005574 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005424:	2b02      	cmp	r3, #2
 8005426:	d002      	beq.n	800542e <USBD_StdEPReq+0x14e>
 8005428:	2b03      	cmp	r3, #3
 800542a:	d032      	beq.n	8005492 <USBD_StdEPReq+0x1b2>
 800542c:	e097      	b.n	800555e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <USBD_StdEPReq+0x164>
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d004      	beq.n	8005444 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fbcb 	bl	8005bd8 <USBD_CtlError>
          break;
 8005442:	e091      	b.n	8005568 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005448:	2b00      	cmp	r3, #0
 800544a:	da0b      	bge.n	8005464 <USBD_StdEPReq+0x184>
 800544c:	7bbb      	ldrb	r3, [r7, #14]
 800544e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	3310      	adds	r3, #16
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4413      	add	r3, r2
 8005460:	3304      	adds	r3, #4
 8005462:	e00b      	b.n	800547c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4413      	add	r3, r2
 800547a:	3304      	adds	r3, #4
 800547c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2202      	movs	r2, #2
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fc15 	bl	8005cba <USBD_CtlSendData>
        break;
 8005490:	e06a      	b.n	8005568 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005496:	2b00      	cmp	r3, #0
 8005498:	da11      	bge.n	80054be <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800549a:	7bbb      	ldrb	r3, [r7, #14]
 800549c:	f003 020f 	and.w	r2, r3, #15
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3324      	adds	r3, #36	; 0x24
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d117      	bne.n	80054e4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fb8e 	bl	8005bd8 <USBD_CtlError>
            break;
 80054bc:	e054      	b.n	8005568 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80054be:	7bbb      	ldrb	r3, [r7, #14]
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fb7b 	bl	8005bd8 <USBD_CtlError>
            break;
 80054e2:	e041      	b.n	8005568 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da0b      	bge.n	8005504 <USBD_StdEPReq+0x224>
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	3310      	adds	r3, #16
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	3304      	adds	r3, #4
 8005502:	e00b      	b.n	800551c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005504:	7bbb      	ldrb	r3, [r7, #14]
 8005506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	3304      	adds	r3, #4
 800551c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800551e:	7bbb      	ldrb	r3, [r7, #14]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <USBD_StdEPReq+0x24a>
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d103      	bne.n	8005532 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e00e      	b.n	8005550 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005532:	7bbb      	ldrb	r3, [r7, #14]
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f001 f886 	bl	8006648 <USBD_LL_IsStallEP>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e002      	b.n	8005550 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2202      	movs	r2, #2
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fbaf 	bl	8005cba <USBD_CtlSendData>
          break;
 800555c:	e004      	b.n	8005568 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fb39 	bl	8005bd8 <USBD_CtlError>
        break;
 8005566:	bf00      	nop
      }
      break;
 8005568:	e004      	b.n	8005574 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fb33 	bl	8005bd8 <USBD_CtlError>
      break;
 8005572:	bf00      	nop
    }
    break;
 8005574:	e004      	b.n	8005580 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fb2d 	bl	8005bd8 <USBD_CtlError>
    break;
 800557e:	bf00      	nop
  }

  return ret;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	885b      	ldrh	r3, [r3, #2]
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	2b06      	cmp	r3, #6
 80055ae:	f200 8128 	bhi.w	8005802 <USBD_GetDescriptor+0x276>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <USBD_GetDescriptor+0x2c>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055ed 	.word	0x080055ed
 80055c0:	0800562d 	.word	0x0800562d
 80055c4:	08005803 	.word	0x08005803
 80055c8:	08005803 	.word	0x08005803
 80055cc:	080057a3 	.word	0x080057a3
 80055d0:	080057cf 	.word	0x080057cf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	7c12      	ldrb	r2, [r2, #16]
 80055e0:	f107 0108 	add.w	r1, r7, #8
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
 80055e8:	60f8      	str	r0, [r7, #12]
    break;
 80055ea:	e112      	b.n	8005812 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	7c1b      	ldrb	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	f107 0208 	add.w	r2, r7, #8
 8005600:	4610      	mov	r0, r2
 8005602:	4798      	blx	r3
 8005604:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	2202      	movs	r2, #2
 800560c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800560e:	e100      	b.n	8005812 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	f107 0208 	add.w	r2, r7, #8
 800561c:	4610      	mov	r0, r2
 800561e:	4798      	blx	r3
 8005620:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3301      	adds	r3, #1
 8005626:	2202      	movs	r2, #2
 8005628:	701a      	strb	r2, [r3, #0]
    break;
 800562a:	e0f2      	b.n	8005812 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	885b      	ldrh	r3, [r3, #2]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b05      	cmp	r3, #5
 8005634:	f200 80ac 	bhi.w	8005790 <USBD_GetDescriptor+0x204>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <USBD_GetDescriptor+0xb4>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005659 	.word	0x08005659
 8005644:	0800568d 	.word	0x0800568d
 8005648:	080056c1 	.word	0x080056c1
 800564c:	080056f5 	.word	0x080056f5
 8005650:	08005729 	.word	0x08005729
 8005654:	0800575d 	.word	0x0800575d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	7c12      	ldrb	r2, [r2, #16]
 8005670:	f107 0108 	add.w	r1, r7, #8
 8005674:	4610      	mov	r0, r2
 8005676:	4798      	blx	r3
 8005678:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800567a:	e091      	b.n	80057a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 faaa 	bl	8005bd8 <USBD_CtlError>
        err++;
 8005684:	7afb      	ldrb	r3, [r7, #11]
 8005686:	3301      	adds	r3, #1
 8005688:	72fb      	strb	r3, [r7, #11]
      break;
 800568a:	e089      	b.n	80057a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	7c12      	ldrb	r2, [r2, #16]
 80056a4:	f107 0108 	add.w	r1, r7, #8
 80056a8:	4610      	mov	r0, r2
 80056aa:	4798      	blx	r3
 80056ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056ae:	e077      	b.n	80057a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa90 	bl	8005bd8 <USBD_CtlError>
        err++;
 80056b8:	7afb      	ldrb	r3, [r7, #11]
 80056ba:	3301      	adds	r3, #1
 80056bc:	72fb      	strb	r3, [r7, #11]
      break;
 80056be:	e06f      	b.n	80057a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	7c12      	ldrb	r2, [r2, #16]
 80056d8:	f107 0108 	add.w	r1, r7, #8
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
 80056e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056e2:	e05d      	b.n	80057a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa76 	bl	8005bd8 <USBD_CtlError>
        err++;
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	3301      	adds	r3, #1
 80056f0:	72fb      	strb	r3, [r7, #11]
      break;
 80056f2:	e055      	b.n	80057a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	7c12      	ldrb	r2, [r2, #16]
 800570c:	f107 0108 	add.w	r1, r7, #8
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005716:	e043      	b.n	80057a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa5c 	bl	8005bd8 <USBD_CtlError>
        err++;
 8005720:	7afb      	ldrb	r3, [r7, #11]
 8005722:	3301      	adds	r3, #1
 8005724:	72fb      	strb	r3, [r7, #11]
      break;
 8005726:	e03b      	b.n	80057a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	7c12      	ldrb	r2, [r2, #16]
 8005740:	f107 0108 	add.w	r1, r7, #8
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
 8005748:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800574a:	e029      	b.n	80057a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa42 	bl	8005bd8 <USBD_CtlError>
        err++;
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	3301      	adds	r3, #1
 8005758:	72fb      	strb	r3, [r7, #11]
      break;
 800575a:	e021      	b.n	80057a0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	7c12      	ldrb	r2, [r2, #16]
 8005774:	f107 0108 	add.w	r1, r7, #8
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
 800577c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800577e:	e00f      	b.n	80057a0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa28 	bl	8005bd8 <USBD_CtlError>
        err++;
 8005788:	7afb      	ldrb	r3, [r7, #11]
 800578a:	3301      	adds	r3, #1
 800578c:	72fb      	strb	r3, [r7, #11]
      break;
 800578e:	e007      	b.n	80057a0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa20 	bl	8005bd8 <USBD_CtlError>
      err++;
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	3301      	adds	r3, #1
 800579c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800579e:	bf00      	nop
    }
    break;
 80057a0:	e037      	b.n	8005812 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	7c1b      	ldrb	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	f107 0208 	add.w	r2, r7, #8
 80057b6:	4610      	mov	r0, r2
 80057b8:	4798      	blx	r3
 80057ba:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80057bc:	e029      	b.n	8005812 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fa09 	bl	8005bd8 <USBD_CtlError>
      err++;
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	3301      	adds	r3, #1
 80057ca:	72fb      	strb	r3, [r7, #11]
    break;
 80057cc:	e021      	b.n	8005812 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	7c1b      	ldrb	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f107 0208 	add.w	r2, r7, #8
 80057e2:	4610      	mov	r0, r2
 80057e4:	4798      	blx	r3
 80057e6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	2207      	movs	r2, #7
 80057ee:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80057f0:	e00f      	b.n	8005812 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f9ef 	bl	8005bd8 <USBD_CtlError>
      err++;
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	3301      	adds	r3, #1
 80057fe:	72fb      	strb	r3, [r7, #11]
    break;
 8005800:	e007      	b.n	8005812 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f9e7 	bl	8005bd8 <USBD_CtlError>
    err++;
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	3301      	adds	r3, #1
 800580e:	72fb      	strb	r3, [r7, #11]
    break;
 8005810:	bf00      	nop
  }

  if (err != 0U)
 8005812:	7afb      	ldrb	r3, [r7, #11]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d11e      	bne.n	8005856 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	88db      	ldrh	r3, [r3, #6]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d016      	beq.n	800584e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005820:	893b      	ldrh	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	88da      	ldrh	r2, [r3, #6]
 800582a:	893b      	ldrh	r3, [r7, #8]
 800582c:	4293      	cmp	r3, r2
 800582e:	bf28      	it	cs
 8005830:	4613      	movcs	r3, r2
 8005832:	b29b      	uxth	r3, r3
 8005834:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005836:	893b      	ldrh	r3, [r7, #8]
 8005838:	461a      	mov	r2, r3
 800583a:	68f9      	ldr	r1, [r7, #12]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa3c 	bl	8005cba <USBD_CtlSendData>
 8005842:	e009      	b.n	8005858 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f9c6 	bl	8005bd8 <USBD_CtlError>
 800584c:	e004      	b.n	8005858 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa8d 	bl	8005d6e <USBD_CtlSendStatus>
 8005854:	e000      	b.n	8005858 <USBD_GetDescriptor+0x2cc>
    return;
 8005856:	bf00      	nop
    }
  }
}
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop

08005860 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	889b      	ldrh	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d130      	bne.n	80058d4 <USBD_SetAddress+0x74>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	88db      	ldrh	r3, [r3, #6]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d12c      	bne.n	80058d4 <USBD_SetAddress+0x74>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	885b      	ldrh	r3, [r3, #2]
 800587e:	2b7f      	cmp	r3, #127	; 0x7f
 8005880:	d828      	bhi.n	80058d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	885b      	ldrh	r3, [r3, #2]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005894:	2b03      	cmp	r3, #3
 8005896:	d104      	bne.n	80058a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f99c 	bl	8005bd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a0:	e01c      	b.n	80058dc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7bfa      	ldrb	r2, [r7, #15]
 80058a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fef6 	bl	80066a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa5a 	bl	8005d6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c8:	e008      	b.n	80058dc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058d2:	e003      	b.n	80058dc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f97e 	bl	8005bd8 <USBD_CtlError>
  }
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	885b      	ldrh	r3, [r3, #2]
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	4b4b      	ldr	r3, [pc, #300]	; (8005a28 <USBD_SetConfig+0x144>)
 80058fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058fc:	4b4a      	ldr	r3, [pc, #296]	; (8005a28 <USBD_SetConfig+0x144>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d905      	bls.n	8005910 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f966 	bl	8005bd8 <USBD_CtlError>
    return USBD_FAIL;
 800590c:	2303      	movs	r3, #3
 800590e:	e087      	b.n	8005a20 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005916:	2b02      	cmp	r3, #2
 8005918:	d002      	beq.n	8005920 <USBD_SetConfig+0x3c>
 800591a:	2b03      	cmp	r3, #3
 800591c:	d025      	beq.n	800596a <USBD_SetConfig+0x86>
 800591e:	e071      	b.n	8005a04 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005920:	4b41      	ldr	r3, [pc, #260]	; (8005a28 <USBD_SetConfig+0x144>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01c      	beq.n	8005962 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005928:	4b3f      	ldr	r3, [pc, #252]	; (8005a28 <USBD_SetConfig+0x144>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005932:	4b3d      	ldr	r3, [pc, #244]	; (8005a28 <USBD_SetConfig+0x144>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff f9a8 	bl	8004c8e <USBD_SetClassConfig>
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f944 	bl	8005bd8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005950:	e065      	b.n	8005a1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa0b 	bl	8005d6e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2203      	movs	r2, #3
 800595c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005960:	e05d      	b.n	8005a1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa03 	bl	8005d6e <USBD_CtlSendStatus>
    break;
 8005968:	e059      	b.n	8005a1e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800596a:	4b2f      	ldr	r3, [pc, #188]	; (8005a28 <USBD_SetConfig+0x144>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d112      	bne.n	8005998 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800597a:	4b2b      	ldr	r3, [pc, #172]	; (8005a28 <USBD_SetConfig+0x144>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005984:	4b28      	ldr	r3, [pc, #160]	; (8005a28 <USBD_SetConfig+0x144>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff f99b 	bl	8004cc6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f9ec 	bl	8005d6e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005996:	e042      	b.n	8005a1e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005998:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <USBD_SetConfig+0x144>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d02a      	beq.n	80059fc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff f989 	bl	8004cc6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80059b4:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <USBD_SetConfig+0x144>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80059be:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <USBD_SetConfig+0x144>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff f962 	bl	8004c8e <USBD_SetClassConfig>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00f      	beq.n	80059f4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8fe 	bl	8005bd8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff f96e 	bl	8004cc6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80059f2:	e014      	b.n	8005a1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f9ba 	bl	8005d6e <USBD_CtlSendStatus>
    break;
 80059fa:	e010      	b.n	8005a1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f9b6 	bl	8005d6e <USBD_CtlSendStatus>
    break;
 8005a02:	e00c      	b.n	8005a1e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f8e6 	bl	8005bd8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <USBD_SetConfig+0x144>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff f957 	bl	8004cc6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8005a1c:	bf00      	nop
  }

  return ret;
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000210 	.word	0x20000210

08005a2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d004      	beq.n	8005a48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f8c9 	bl	8005bd8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005a46:	e021      	b.n	8005a8c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	db17      	blt.n	8005a82 <USBD_GetConfig+0x56>
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	dd02      	ble.n	8005a5c <USBD_GetConfig+0x30>
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d00b      	beq.n	8005a72 <USBD_GetConfig+0x46>
 8005a5a:	e012      	b.n	8005a82 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3308      	adds	r3, #8
 8005a66:	2201      	movs	r2, #1
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f925 	bl	8005cba <USBD_CtlSendData>
      break;
 8005a70:	e00c      	b.n	8005a8c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	2201      	movs	r2, #1
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f91d 	bl	8005cba <USBD_CtlSendData>
      break;
 8005a80:	e004      	b.n	8005a8c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f8a7 	bl	8005bd8 <USBD_CtlError>
      break;
 8005a8a:	bf00      	nop
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d81e      	bhi.n	8005ae8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	88db      	ldrh	r3, [r3, #6]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d004      	beq.n	8005abc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f88f 	bl	8005bd8 <USBD_CtlError>
      break;
 8005aba:	e01a      	b.n	8005af2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f043 0202 	orr.w	r2, r3, #2
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	330c      	adds	r3, #12
 8005adc:	2202      	movs	r2, #2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f8ea 	bl	8005cba <USBD_CtlSendData>
    break;
 8005ae6:	e004      	b.n	8005af2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f874 	bl	8005bd8 <USBD_CtlError>
    break;
 8005af0:	bf00      	nop
  }
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	885b      	ldrh	r3, [r3, #2]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d106      	bne.n	8005b1a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f92a 	bl	8005d6e <USBD_CtlSendStatus>
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b32:	3b01      	subs	r3, #1
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d80b      	bhi.n	8005b50 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	885b      	ldrh	r3, [r3, #2]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d10c      	bne.n	8005b5a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f910 	bl	8005d6e <USBD_CtlSendStatus>
      }
      break;
 8005b4e:	e004      	b.n	8005b5a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f840 	bl	8005bd8 <USBD_CtlError>
      break;
 8005b58:	e000      	b.n	8005b5c <USBD_ClrFeature+0x3a>
      break;
 8005b5a:	bf00      	nop
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fad4 	bl	800513c <SWAPBYTE>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff fac7 	bl	800513c <SWAPBYTE>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7ff faba 	bl	800513c <SWAPBYTE>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	80da      	strh	r2, [r3, #6]
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005be2:	2180      	movs	r1, #128	; 0x80
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fcf1 	bl	80065cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005bea:	2100      	movs	r1, #0
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fced 	bl	80065cc <USBD_LL_StallEP>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d036      	beq.n	8005c7e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005c14:	6938      	ldr	r0, [r7, #16]
 8005c16:	f000 f836 	bl	8005c86 <USBD_GetLen>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	3301      	adds	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	4413      	add	r3, r2
 8005c40:	2203      	movs	r2, #3
 8005c42:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	3301      	adds	r3, #1
 8005c48:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005c4a:	e013      	b.n	8005c74 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4413      	add	r3, r2
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	7812      	ldrb	r2, [r2, #0]
 8005c56:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	613b      	str	r3, [r7, #16]
    idx++;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	3301      	adds	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	4413      	add	r3, r2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	701a      	strb	r2, [r3, #0]
    idx++;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	3301      	adds	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e7      	bne.n	8005c4c <USBD_GetString+0x52>
 8005c7c:	e000      	b.n	8005c80 <USBD_GetString+0x86>
    return;
 8005c7e:	bf00      	nop
  }
}
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c96:	e005      	b.n	8005ca4 <USBD_GetLen+0x1e>
  {
    len++;
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f5      	bne.n	8005c98 <USBD_GetLen+0x12>
  }

  return len;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	2100      	movs	r1, #0
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fcfc 	bl	80066de <USBD_LL_Transmit>

  return USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	2100      	movs	r1, #0
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fceb 	bl	80066de <USBD_LL_Transmit>

  return USBD_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2203      	movs	r2, #3
 8005d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fcef 	bl	8006720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fcde 	bl	8006720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2200      	movs	r2, #0
 8005d82:	2100      	movs	r1, #0
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fcaa 	bl	80066de <USBD_LL_Transmit>

  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2205      	movs	r2, #5
 8005da0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005da4:	2300      	movs	r3, #0
 8005da6:	2200      	movs	r2, #0
 8005da8:	2100      	movs	r1, #0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fcb8 	bl	8006720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4912      	ldr	r1, [pc, #72]	; (8005e0c <MX_USB_DEVICE_Init+0x50>)
 8005dc4:	4812      	ldr	r0, [pc, #72]	; (8005e10 <MX_USB_DEVICE_Init+0x54>)
 8005dc6:	f7fe fef4 	bl	8004bb2 <USBD_Init>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005dd0:	f7fa fcee 	bl	80007b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005dd4:	490f      	ldr	r1, [pc, #60]	; (8005e14 <MX_USB_DEVICE_Init+0x58>)
 8005dd6:	480e      	ldr	r0, [pc, #56]	; (8005e10 <MX_USB_DEVICE_Init+0x54>)
 8005dd8:	f7fe ff21 	bl	8004c1e <USBD_RegisterClass>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005de2:	f7fa fce5 	bl	80007b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005de6:	490c      	ldr	r1, [pc, #48]	; (8005e18 <MX_USB_DEVICE_Init+0x5c>)
 8005de8:	4809      	ldr	r0, [pc, #36]	; (8005e10 <MX_USB_DEVICE_Init+0x54>)
 8005dea:	f7fe fe51 	bl	8004a90 <USBD_CDC_RegisterInterface>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005df4:	f7fa fcdc 	bl	80007b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005df8:	4805      	ldr	r0, [pc, #20]	; (8005e10 <MX_USB_DEVICE_Init+0x54>)
 8005dfa:	f7fe ff31 	bl	8004c60 <USBD_Start>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005e04:	f7fa fcd4 	bl	80007b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e08:	bf00      	nop
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	2000013c 	.word	0x2000013c
 8005e10:	20000274 	.word	0x20000274
 8005e14:	2000001c 	.word	0x2000001c
 8005e18:	20000128 	.word	0x20000128

08005e1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e20:	2200      	movs	r2, #0
 8005e22:	4905      	ldr	r1, [pc, #20]	; (8005e38 <CDC_Init_FS+0x1c>)
 8005e24:	4805      	ldr	r0, [pc, #20]	; (8005e3c <CDC_Init_FS+0x20>)
 8005e26:	f7fe fe48 	bl	8004aba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e2a:	4905      	ldr	r1, [pc, #20]	; (8005e40 <CDC_Init_FS+0x24>)
 8005e2c:	4803      	ldr	r0, [pc, #12]	; (8005e3c <CDC_Init_FS+0x20>)
 8005e2e:	f7fe fe5b 	bl	8004ae8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005e32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000d44 	.word	0x20000d44
 8005e3c:	20000274 	.word	0x20000274
 8005e40:	20000544 	.word	0x20000544

08005e44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005e48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	6039      	str	r1, [r7, #0]
 8005e5e:	71fb      	strb	r3, [r7, #7]
 8005e60:	4613      	mov	r3, r2
 8005e62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	2b23      	cmp	r3, #35	; 0x23
 8005e68:	d85c      	bhi.n	8005f24 <CDC_Control_FS+0xd0>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <CDC_Control_FS+0x1c>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005f25 	.word	0x08005f25
 8005e74:	08005f25 	.word	0x08005f25
 8005e78:	08005f25 	.word	0x08005f25
 8005e7c:	08005f25 	.word	0x08005f25
 8005e80:	08005f25 	.word	0x08005f25
 8005e84:	08005f25 	.word	0x08005f25
 8005e88:	08005f25 	.word	0x08005f25
 8005e8c:	08005f25 	.word	0x08005f25
 8005e90:	08005f25 	.word	0x08005f25
 8005e94:	08005f25 	.word	0x08005f25
 8005e98:	08005f25 	.word	0x08005f25
 8005e9c:	08005f25 	.word	0x08005f25
 8005ea0:	08005f25 	.word	0x08005f25
 8005ea4:	08005f25 	.word	0x08005f25
 8005ea8:	08005f25 	.word	0x08005f25
 8005eac:	08005f25 	.word	0x08005f25
 8005eb0:	08005f25 	.word	0x08005f25
 8005eb4:	08005f25 	.word	0x08005f25
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005f25 	.word	0x08005f25
 8005ec4:	08005f25 	.word	0x08005f25
 8005ec8:	08005f25 	.word	0x08005f25
 8005ecc:	08005f25 	.word	0x08005f25
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005f25 	.word	0x08005f25
 8005ed8:	08005f25 	.word	0x08005f25
 8005edc:	08005f25 	.word	0x08005f25
 8005ee0:	08005f25 	.word	0x08005f25
 8005ee4:	08005f25 	.word	0x08005f25
 8005ee8:	08005f25 	.word	0x08005f25
 8005eec:	08005f25 	.word	0x08005f25
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f13 	.word	0x08005f13
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	08005f25 	.word	0x08005f25
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <CDC_Control_FS+0xe0>)
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	6810      	ldr	r0, [r2, #0]
 8005f06:	6018      	str	r0, [r3, #0]
 8005f08:	8891      	ldrh	r1, [r2, #4]
 8005f0a:	7992      	ldrb	r2, [r2, #6]
 8005f0c:	8099      	strh	r1, [r3, #4]
 8005f0e:	719a      	strb	r2, [r3, #6]
    break;
 8005f10:	e009      	b.n	8005f26 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	4a07      	ldr	r2, [pc, #28]	; (8005f34 <CDC_Control_FS+0xe0>)
 8005f16:	6810      	ldr	r0, [r2, #0]
 8005f18:	6018      	str	r0, [r3, #0]
 8005f1a:	8891      	ldrh	r1, [r2, #4]
 8005f1c:	7992      	ldrb	r2, [r2, #6]
 8005f1e:	8099      	strh	r1, [r3, #4]
 8005f20:	719a      	strb	r2, [r3, #6]
    break;
 8005f22:	e000      	b.n	8005f26 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005f24:	bf00      	nop
  }

  return (USBD_OK);
 8005f26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20000120 	.word	0x20000120

08005f38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4805      	ldr	r0, [pc, #20]	; (8005f5c <CDC_Receive_FS+0x24>)
 8005f46:	f7fe fdcf 	bl	8004ae8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005f4a:	4804      	ldr	r0, [pc, #16]	; (8005f5c <CDC_Receive_FS+0x24>)
 8005f4c:	f7fe fe0a 	bl	8004b64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005f50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000274 	.word	0x20000274

08005f60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005f70:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <CDC_Transmit_FS+0x44>)
 8005f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <CDC_Transmit_FS+0x24>
    return USBD_BUSY;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e00b      	b.n	8005f9c <CDC_Transmit_FS+0x3c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005f84:	887b      	ldrh	r3, [r7, #2]
 8005f86:	461a      	mov	r2, r3
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4806      	ldr	r0, [pc, #24]	; (8005fa4 <CDC_Transmit_FS+0x44>)
 8005f8c:	f7fe fd95 	bl	8004aba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005f90:	4804      	ldr	r0, [pc, #16]	; (8005fa4 <CDC_Transmit_FS+0x44>)
 8005f92:	f7fe fdbc 	bl	8004b0e <USBD_CDC_TransmitPacket>
 8005f96:	4603      	mov	r3, r0
 8005f98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000274 	.word	0x20000274

08005fa8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6039      	str	r1, [r7, #0]
 8005fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2212      	movs	r2, #18
 8005fdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005fde:	4b03      	ldr	r3, [pc, #12]	; (8005fec <USBD_FS_DeviceDescriptor+0x20>)
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20000158 	.word	0x20000158

08005ff0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6039      	str	r1, [r7, #0]
 8005ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2204      	movs	r2, #4
 8006000:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006002:	4b03      	ldr	r3, [pc, #12]	; (8006010 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	2000016c 	.word	0x2000016c

08006014 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d105      	bne.n	8006032 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4907      	ldr	r1, [pc, #28]	; (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
 800602a:	4808      	ldr	r0, [pc, #32]	; (800604c <USBD_FS_ProductStrDescriptor+0x38>)
 800602c:	f7ff fde5 	bl	8005bfa <USBD_GetString>
 8006030:	e004      	b.n	800603c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4904      	ldr	r1, [pc, #16]	; (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
 8006036:	4805      	ldr	r0, [pc, #20]	; (800604c <USBD_FS_ProductStrDescriptor+0x38>)
 8006038:	f7ff fddf 	bl	8005bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20001544 	.word	0x20001544
 800604c:	08007170 	.word	0x08007170

08006050 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	6039      	str	r1, [r7, #0]
 800605a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	4904      	ldr	r1, [pc, #16]	; (8006070 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006060:	4804      	ldr	r0, [pc, #16]	; (8006074 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006062:	f7ff fdca 	bl	8005bfa <USBD_GetString>
  return USBD_StrDesc;
 8006066:	4b02      	ldr	r3, [pc, #8]	; (8006070 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20001544 	.word	0x20001544
 8006074:	08007188 	.word	0x08007188

08006078 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	221a      	movs	r2, #26
 8006088:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800608a:	f000 f843 	bl	8006114 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800608e:	4b02      	ldr	r3, [pc, #8]	; (8006098 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20000170 	.word	0x20000170

0800609c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	6039      	str	r1, [r7, #0]
 80060a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d105      	bne.n	80060ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	4907      	ldr	r1, [pc, #28]	; (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060b2:	4808      	ldr	r0, [pc, #32]	; (80060d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80060b4:	f7ff fda1 	bl	8005bfa <USBD_GetString>
 80060b8:	e004      	b.n	80060c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	4904      	ldr	r1, [pc, #16]	; (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060be:	4805      	ldr	r0, [pc, #20]	; (80060d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80060c0:	f7ff fd9b 	bl	8005bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20001544 	.word	0x20001544
 80060d4:	0800719c 	.word	0x0800719c

080060d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d105      	bne.n	80060f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	4907      	ldr	r1, [pc, #28]	; (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060ee:	4808      	ldr	r0, [pc, #32]	; (8006110 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060f0:	f7ff fd83 	bl	8005bfa <USBD_GetString>
 80060f4:	e004      	b.n	8006100 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	4904      	ldr	r1, [pc, #16]	; (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060fa:	4805      	ldr	r0, [pc, #20]	; (8006110 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060fc:	f7ff fd7d 	bl	8005bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006100:	4b02      	ldr	r3, [pc, #8]	; (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20001544 	.word	0x20001544
 8006110:	080071a8 	.word	0x080071a8

08006114 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800611a:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <Get_SerialNum+0x44>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006120:	4b0e      	ldr	r3, [pc, #56]	; (800615c <Get_SerialNum+0x48>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <Get_SerialNum+0x4c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800613a:	2208      	movs	r2, #8
 800613c:	4909      	ldr	r1, [pc, #36]	; (8006164 <Get_SerialNum+0x50>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f814 	bl	800616c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006144:	2204      	movs	r2, #4
 8006146:	4908      	ldr	r1, [pc, #32]	; (8006168 <Get_SerialNum+0x54>)
 8006148:	68b8      	ldr	r0, [r7, #8]
 800614a:	f000 f80f 	bl	800616c <IntToUnicode>
  }
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	1fff7a10 	.word	0x1fff7a10
 800615c:	1fff7a14 	.word	0x1fff7a14
 8006160:	1fff7a18 	.word	0x1fff7a18
 8006164:	20000172 	.word	0x20000172
 8006168:	20000182 	.word	0x20000182

0800616c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800617e:	2300      	movs	r3, #0
 8006180:	75fb      	strb	r3, [r7, #23]
 8006182:	e027      	b.n	80061d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	0f1b      	lsrs	r3, r3, #28
 8006188:	2b09      	cmp	r3, #9
 800618a:	d80b      	bhi.n	80061a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	0f1b      	lsrs	r3, r3, #28
 8006190:	b2da      	uxtb	r2, r3
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4619      	mov	r1, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	440b      	add	r3, r1
 800619c:	3230      	adds	r2, #48	; 0x30
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e00a      	b.n	80061ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	0f1b      	lsrs	r3, r3, #28
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4619      	mov	r1, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	440b      	add	r3, r1
 80061b4:	3237      	adds	r2, #55	; 0x37
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	3301      	adds	r3, #1
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4413      	add	r3, r2
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	3301      	adds	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
 80061d4:	7dfa      	ldrb	r2, [r7, #23]
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d3d3      	bcc.n	8006184 <IntToUnicode+0x18>
  }
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	605a      	str	r2, [r3, #4]
 80061fa:	609a      	str	r2, [r3, #8]
 80061fc:	60da      	str	r2, [r3, #12]
 80061fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006208:	d13a      	bne.n	8006280 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <HAL_PCD_MspInit+0xa0>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	4a1d      	ldr	r2, [pc, #116]	; (8006288 <HAL_PCD_MspInit+0xa0>)
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	6313      	str	r3, [r2, #48]	; 0x30
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <HAL_PCD_MspInit+0xa0>)
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006226:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800622a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622c:	2302      	movs	r3, #2
 800622e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006234:	2303      	movs	r3, #3
 8006236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006238:	230a      	movs	r3, #10
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800623c:	f107 0314 	add.w	r3, r7, #20
 8006240:	4619      	mov	r1, r3
 8006242:	4812      	ldr	r0, [pc, #72]	; (800628c <HAL_PCD_MspInit+0xa4>)
 8006244:	f7fa fdca 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <HAL_PCD_MspInit+0xa0>)
 800624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624c:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <HAL_PCD_MspInit+0xa0>)
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	6353      	str	r3, [r2, #52]	; 0x34
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <HAL_PCD_MspInit+0xa0>)
 800625a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625c:	4a0a      	ldr	r2, [pc, #40]	; (8006288 <HAL_PCD_MspInit+0xa0>)
 800625e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006262:	6453      	str	r3, [r2, #68]	; 0x44
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <HAL_PCD_MspInit+0xa0>)
 8006266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006270:	2200      	movs	r2, #0
 8006272:	2100      	movs	r1, #0
 8006274:	2043      	movs	r0, #67	; 0x43
 8006276:	f7fa fd7a 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800627a:	2043      	movs	r0, #67	; 0x43
 800627c:	f7fa fd93 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006280:	bf00      	nop
 8006282:	3728      	adds	r7, #40	; 0x28
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40023800 	.word	0x40023800
 800628c:	40020000 	.word	0x40020000

08006290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f7fe fd25 	bl	8004cf6 <USBD_LL_SetupStage>
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	4619      	mov	r1, r3
 80062de:	f7fe fd5d 	bl	8004d9c <USBD_LL_DataOutStage>
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	3348      	adds	r3, #72	; 0x48
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	4619      	mov	r1, r3
 8006312:	f7fe fda6 	bl	8004e62 <USBD_LL_DataInStage>
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe feaa 	bl	8005086 <USBD_LL_SOF>
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006342:	2301      	movs	r3, #1
 8006344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
 8006352:	e008      	b.n	8006366 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d102      	bne.n	8006362 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e001      	b.n	8006366 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006362:	f7fa fa25 	bl	80007b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800636c:	7bfa      	ldrb	r2, [r7, #15]
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f7fe fe4d 	bl	8005010 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fe06 	bl	8004f8e <USBD_LL_Reset>
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fe48 	bl	8005030 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063b2:	f043 0301 	orr.w	r3, r3, #1
 80063b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <HAL_PCD_SuspendCallback+0x48>)
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	4a03      	ldr	r2, [pc, #12]	; (80063d4 <HAL_PCD_SuspendCallback+0x48>)
 80063c6:	f043 0306 	orr.w	r3, r3, #6
 80063ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	e000ed00 	.word	0xe000ed00

080063d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fe37 	bl	800505a <USBD_LL_Resume>
}
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006406:	78fa      	ldrb	r2, [r7, #3]
 8006408:	4611      	mov	r1, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fe62 	bl	80050d4 <USBD_LL_IsoOUTIncomplete>
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	4611      	mov	r1, r2
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fe43 	bl	80050ba <USBD_LL_IsoINIncomplete>
}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fe4f 	bl	80050ee <USBD_LL_DevConnected>
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fe4c 	bl	8005104 <USBD_LL_DevDisconnected>
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d13c      	bne.n	80064fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006484:	4a20      	ldr	r2, [pc, #128]	; (8006508 <USBD_LL_Init+0x94>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1e      	ldr	r2, [pc, #120]	; (8006508 <USBD_LL_Init+0x94>)
 8006490:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006494:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <USBD_LL_Init+0x94>)
 8006496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800649a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800649c:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <USBD_LL_Init+0x94>)
 800649e:	2204      	movs	r2, #4
 80064a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80064a2:	4b19      	ldr	r3, [pc, #100]	; (8006508 <USBD_LL_Init+0x94>)
 80064a4:	2202      	movs	r2, #2
 80064a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80064a8:	4b17      	ldr	r3, [pc, #92]	; (8006508 <USBD_LL_Init+0x94>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80064ae:	4b16      	ldr	r3, [pc, #88]	; (8006508 <USBD_LL_Init+0x94>)
 80064b0:	2202      	movs	r2, #2
 80064b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80064b4:	4b14      	ldr	r3, [pc, #80]	; (8006508 <USBD_LL_Init+0x94>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <USBD_LL_Init+0x94>)
 80064bc:	2200      	movs	r2, #0
 80064be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <USBD_LL_Init+0x94>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80064c6:	4b10      	ldr	r3, [pc, #64]	; (8006508 <USBD_LL_Init+0x94>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80064cc:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <USBD_LL_Init+0x94>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80064d2:	480d      	ldr	r0, [pc, #52]	; (8006508 <USBD_LL_Init+0x94>)
 80064d4:	f7fa ff88 	bl	80013e8 <HAL_PCD_Init>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80064de:	f7fa f967 	bl	80007b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	4808      	ldr	r0, [pc, #32]	; (8006508 <USBD_LL_Init+0x94>)
 80064e6:	f7fc f8e6 	bl	80026b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80064ea:	2240      	movs	r2, #64	; 0x40
 80064ec:	2100      	movs	r1, #0
 80064ee:	4806      	ldr	r0, [pc, #24]	; (8006508 <USBD_LL_Init+0x94>)
 80064f0:	f7fc f89a 	bl	8002628 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80064f4:	2280      	movs	r2, #128	; 0x80
 80064f6:	2101      	movs	r1, #1
 80064f8:	4803      	ldr	r0, [pc, #12]	; (8006508 <USBD_LL_Init+0x94>)
 80064fa:	f7fc f895 	bl	8002628 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	20001744 	.word	0x20001744

0800650c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006522:	4618      	mov	r0, r3
 8006524:	f7fb f87d 	bl	8001622 <HAL_PCD_Start>
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f92a 	bl	8006788 <USBD_Get_USB_Status>
 8006534:	4603      	mov	r3, r0
 8006536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006538:	7bbb      	ldrb	r3, [r7, #14]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	4608      	mov	r0, r1
 800654c:	4611      	mov	r1, r2
 800654e:	461a      	mov	r2, r3
 8006550:	4603      	mov	r3, r0
 8006552:	70fb      	strb	r3, [r7, #3]
 8006554:	460b      	mov	r3, r1
 8006556:	70bb      	strb	r3, [r7, #2]
 8006558:	4613      	mov	r3, r2
 800655a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800656a:	78bb      	ldrb	r3, [r7, #2]
 800656c:	883a      	ldrh	r2, [r7, #0]
 800656e:	78f9      	ldrb	r1, [r7, #3]
 8006570:	f7fb fc61 	bl	8001e36 <HAL_PCD_EP_Open>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f904 	bl	8006788 <USBD_Get_USB_Status>
 8006580:	4603      	mov	r3, r0
 8006582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006584:	7bbb      	ldrb	r3, [r7, #14]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fb fcaa 	bl	8001f06 <HAL_PCD_EP_Close>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 f8e5 	bl	8006788 <USBD_Get_USB_Status>
 80065be:	4603      	mov	r3, r0
 80065c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065e6:	78fa      	ldrb	r2, [r7, #3]
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fb fd82 	bl	80020f4 <HAL_PCD_EP_SetStall>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 f8c6 	bl	8006788 <USBD_Get_USB_Status>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006600:	7bbb      	ldrb	r3, [r7, #14]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006624:	78fa      	ldrb	r2, [r7, #3]
 8006626:	4611      	mov	r1, r2
 8006628:	4618      	mov	r0, r3
 800662a:	f7fb fdc7 	bl	80021bc <HAL_PCD_EP_ClrStall>
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f8a7 	bl	8006788 <USBD_Get_USB_Status>
 800663a:	4603      	mov	r3, r0
 800663c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800663e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800665a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800665c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006660:	2b00      	cmp	r3, #0
 8006662:	da0b      	bge.n	800667c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	4613      	mov	r3, r2
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	333e      	adds	r3, #62	; 0x3e
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	e00b      	b.n	8006694 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	4613      	mov	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006692:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	4611      	mov	r1, r2
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fb fb94 	bl	8001dec <HAL_PCD_SetAddress>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f85c 	bl	8006788 <USBD_Get_USB_Status>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	460b      	mov	r3, r1
 80066ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066fc:	7af9      	ldrb	r1, [r7, #11]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	f7fb fcad 	bl	8002060 <HAL_PCD_EP_Transmit>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 f83b 	bl	8006788 <USBD_Get_USB_Status>
 8006712:	4603      	mov	r3, r0
 8006714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006716:	7dbb      	ldrb	r3, [r7, #22]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	607a      	str	r2, [r7, #4]
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	460b      	mov	r3, r1
 800672e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800673e:	7af9      	ldrb	r1, [r7, #11]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	f7fb fc29 	bl	8001f9a <HAL_PCD_EP_Receive>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f81a 	bl	8006788 <USBD_Get_USB_Status>
 8006754:	4603      	mov	r3, r0
 8006756:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006758:	7dbb      	ldrb	r3, [r7, #22]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	4611      	mov	r1, r2
 8006778:	4618      	mov	r0, r3
 800677a:	f7fb fc59 	bl	8002030 <HAL_PCD_EP_GetRxCount>
 800677e:	4603      	mov	r3, r0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	2b03      	cmp	r3, #3
 800679a:	d817      	bhi.n	80067cc <USBD_Get_USB_Status+0x44>
 800679c:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <USBD_Get_USB_Status+0x1c>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067bb 	.word	0x080067bb
 80067ac:	080067c1 	.word	0x080067c1
 80067b0:	080067c7 	.word	0x080067c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	73fb      	strb	r3, [r7, #15]
    break;
 80067b8:	e00b      	b.n	80067d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067ba:	2303      	movs	r3, #3
 80067bc:	73fb      	strb	r3, [r7, #15]
    break;
 80067be:	e008      	b.n	80067d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067c0:	2301      	movs	r3, #1
 80067c2:	73fb      	strb	r3, [r7, #15]
    break;
 80067c4:	e005      	b.n	80067d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067c6:	2303      	movs	r3, #3
 80067c8:	73fb      	strb	r3, [r7, #15]
    break;
 80067ca:	e002      	b.n	80067d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	73fb      	strb	r3, [r7, #15]
    break;
 80067d0:	bf00      	nop
  }
  return usb_status;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <__errno>:
 80067e0:	4b01      	ldr	r3, [pc, #4]	; (80067e8 <__errno+0x8>)
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	2000018c 	.word	0x2000018c

080067ec <__libc_init_array>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	4e0d      	ldr	r6, [pc, #52]	; (8006824 <__libc_init_array+0x38>)
 80067f0:	4c0d      	ldr	r4, [pc, #52]	; (8006828 <__libc_init_array+0x3c>)
 80067f2:	1ba4      	subs	r4, r4, r6
 80067f4:	10a4      	asrs	r4, r4, #2
 80067f6:	2500      	movs	r5, #0
 80067f8:	42a5      	cmp	r5, r4
 80067fa:	d109      	bne.n	8006810 <__libc_init_array+0x24>
 80067fc:	4e0b      	ldr	r6, [pc, #44]	; (800682c <__libc_init_array+0x40>)
 80067fe:	4c0c      	ldr	r4, [pc, #48]	; (8006830 <__libc_init_array+0x44>)
 8006800:	f000 fc98 	bl	8007134 <_init>
 8006804:	1ba4      	subs	r4, r4, r6
 8006806:	10a4      	asrs	r4, r4, #2
 8006808:	2500      	movs	r5, #0
 800680a:	42a5      	cmp	r5, r4
 800680c:	d105      	bne.n	800681a <__libc_init_array+0x2e>
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006814:	4798      	blx	r3
 8006816:	3501      	adds	r5, #1
 8006818:	e7ee      	b.n	80067f8 <__libc_init_array+0xc>
 800681a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800681e:	4798      	blx	r3
 8006820:	3501      	adds	r5, #1
 8006822:	e7f2      	b.n	800680a <__libc_init_array+0x1e>
 8006824:	0800723c 	.word	0x0800723c
 8006828:	0800723c 	.word	0x0800723c
 800682c:	0800723c 	.word	0x0800723c
 8006830:	08007240 	.word	0x08007240

08006834 <malloc>:
 8006834:	4b02      	ldr	r3, [pc, #8]	; (8006840 <malloc+0xc>)
 8006836:	4601      	mov	r1, r0
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f000 b861 	b.w	8006900 <_malloc_r>
 800683e:	bf00      	nop
 8006840:	2000018c 	.word	0x2000018c

08006844 <free>:
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <free+0xc>)
 8006846:	4601      	mov	r1, r0
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f000 b80b 	b.w	8006864 <_free_r>
 800684e:	bf00      	nop
 8006850:	2000018c 	.word	0x2000018c

08006854 <memset>:
 8006854:	4402      	add	r2, r0
 8006856:	4603      	mov	r3, r0
 8006858:	4293      	cmp	r3, r2
 800685a:	d100      	bne.n	800685e <memset+0xa>
 800685c:	4770      	bx	lr
 800685e:	f803 1b01 	strb.w	r1, [r3], #1
 8006862:	e7f9      	b.n	8006858 <memset+0x4>

08006864 <_free_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4605      	mov	r5, r0
 8006868:	2900      	cmp	r1, #0
 800686a:	d045      	beq.n	80068f8 <_free_r+0x94>
 800686c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006870:	1f0c      	subs	r4, r1, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	bfb8      	it	lt
 8006876:	18e4      	addlt	r4, r4, r3
 8006878:	f000 fbae 	bl	8006fd8 <__malloc_lock>
 800687c:	4a1f      	ldr	r2, [pc, #124]	; (80068fc <_free_r+0x98>)
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	4610      	mov	r0, r2
 8006882:	b933      	cbnz	r3, 8006892 <_free_r+0x2e>
 8006884:	6063      	str	r3, [r4, #4]
 8006886:	6014      	str	r4, [r2, #0]
 8006888:	4628      	mov	r0, r5
 800688a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800688e:	f000 bba4 	b.w	8006fda <__malloc_unlock>
 8006892:	42a3      	cmp	r3, r4
 8006894:	d90c      	bls.n	80068b0 <_free_r+0x4c>
 8006896:	6821      	ldr	r1, [r4, #0]
 8006898:	1862      	adds	r2, r4, r1
 800689a:	4293      	cmp	r3, r2
 800689c:	bf04      	itt	eq
 800689e:	681a      	ldreq	r2, [r3, #0]
 80068a0:	685b      	ldreq	r3, [r3, #4]
 80068a2:	6063      	str	r3, [r4, #4]
 80068a4:	bf04      	itt	eq
 80068a6:	1852      	addeq	r2, r2, r1
 80068a8:	6022      	streq	r2, [r4, #0]
 80068aa:	6004      	str	r4, [r0, #0]
 80068ac:	e7ec      	b.n	8006888 <_free_r+0x24>
 80068ae:	4613      	mov	r3, r2
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	b10a      	cbz	r2, 80068b8 <_free_r+0x54>
 80068b4:	42a2      	cmp	r2, r4
 80068b6:	d9fa      	bls.n	80068ae <_free_r+0x4a>
 80068b8:	6819      	ldr	r1, [r3, #0]
 80068ba:	1858      	adds	r0, r3, r1
 80068bc:	42a0      	cmp	r0, r4
 80068be:	d10b      	bne.n	80068d8 <_free_r+0x74>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	4401      	add	r1, r0
 80068c4:	1858      	adds	r0, r3, r1
 80068c6:	4282      	cmp	r2, r0
 80068c8:	6019      	str	r1, [r3, #0]
 80068ca:	d1dd      	bne.n	8006888 <_free_r+0x24>
 80068cc:	6810      	ldr	r0, [r2, #0]
 80068ce:	6852      	ldr	r2, [r2, #4]
 80068d0:	605a      	str	r2, [r3, #4]
 80068d2:	4401      	add	r1, r0
 80068d4:	6019      	str	r1, [r3, #0]
 80068d6:	e7d7      	b.n	8006888 <_free_r+0x24>
 80068d8:	d902      	bls.n	80068e0 <_free_r+0x7c>
 80068da:	230c      	movs	r3, #12
 80068dc:	602b      	str	r3, [r5, #0]
 80068de:	e7d3      	b.n	8006888 <_free_r+0x24>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	1821      	adds	r1, r4, r0
 80068e4:	428a      	cmp	r2, r1
 80068e6:	bf04      	itt	eq
 80068e8:	6811      	ldreq	r1, [r2, #0]
 80068ea:	6852      	ldreq	r2, [r2, #4]
 80068ec:	6062      	str	r2, [r4, #4]
 80068ee:	bf04      	itt	eq
 80068f0:	1809      	addeq	r1, r1, r0
 80068f2:	6021      	streq	r1, [r4, #0]
 80068f4:	605c      	str	r4, [r3, #4]
 80068f6:	e7c7      	b.n	8006888 <_free_r+0x24>
 80068f8:	bd38      	pop	{r3, r4, r5, pc}
 80068fa:	bf00      	nop
 80068fc:	20000214 	.word	0x20000214

08006900 <_malloc_r>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	1ccd      	adds	r5, r1, #3
 8006904:	f025 0503 	bic.w	r5, r5, #3
 8006908:	3508      	adds	r5, #8
 800690a:	2d0c      	cmp	r5, #12
 800690c:	bf38      	it	cc
 800690e:	250c      	movcc	r5, #12
 8006910:	2d00      	cmp	r5, #0
 8006912:	4606      	mov	r6, r0
 8006914:	db01      	blt.n	800691a <_malloc_r+0x1a>
 8006916:	42a9      	cmp	r1, r5
 8006918:	d903      	bls.n	8006922 <_malloc_r+0x22>
 800691a:	230c      	movs	r3, #12
 800691c:	6033      	str	r3, [r6, #0]
 800691e:	2000      	movs	r0, #0
 8006920:	bd70      	pop	{r4, r5, r6, pc}
 8006922:	f000 fb59 	bl	8006fd8 <__malloc_lock>
 8006926:	4a21      	ldr	r2, [pc, #132]	; (80069ac <_malloc_r+0xac>)
 8006928:	6814      	ldr	r4, [r2, #0]
 800692a:	4621      	mov	r1, r4
 800692c:	b991      	cbnz	r1, 8006954 <_malloc_r+0x54>
 800692e:	4c20      	ldr	r4, [pc, #128]	; (80069b0 <_malloc_r+0xb0>)
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	b91b      	cbnz	r3, 800693c <_malloc_r+0x3c>
 8006934:	4630      	mov	r0, r6
 8006936:	f000 f8a1 	bl	8006a7c <_sbrk_r>
 800693a:	6020      	str	r0, [r4, #0]
 800693c:	4629      	mov	r1, r5
 800693e:	4630      	mov	r0, r6
 8006940:	f000 f89c 	bl	8006a7c <_sbrk_r>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d124      	bne.n	8006992 <_malloc_r+0x92>
 8006948:	230c      	movs	r3, #12
 800694a:	6033      	str	r3, [r6, #0]
 800694c:	4630      	mov	r0, r6
 800694e:	f000 fb44 	bl	8006fda <__malloc_unlock>
 8006952:	e7e4      	b.n	800691e <_malloc_r+0x1e>
 8006954:	680b      	ldr	r3, [r1, #0]
 8006956:	1b5b      	subs	r3, r3, r5
 8006958:	d418      	bmi.n	800698c <_malloc_r+0x8c>
 800695a:	2b0b      	cmp	r3, #11
 800695c:	d90f      	bls.n	800697e <_malloc_r+0x7e>
 800695e:	600b      	str	r3, [r1, #0]
 8006960:	50cd      	str	r5, [r1, r3]
 8006962:	18cc      	adds	r4, r1, r3
 8006964:	4630      	mov	r0, r6
 8006966:	f000 fb38 	bl	8006fda <__malloc_unlock>
 800696a:	f104 000b 	add.w	r0, r4, #11
 800696e:	1d23      	adds	r3, r4, #4
 8006970:	f020 0007 	bic.w	r0, r0, #7
 8006974:	1ac3      	subs	r3, r0, r3
 8006976:	d0d3      	beq.n	8006920 <_malloc_r+0x20>
 8006978:	425a      	negs	r2, r3
 800697a:	50e2      	str	r2, [r4, r3]
 800697c:	e7d0      	b.n	8006920 <_malloc_r+0x20>
 800697e:	428c      	cmp	r4, r1
 8006980:	684b      	ldr	r3, [r1, #4]
 8006982:	bf16      	itet	ne
 8006984:	6063      	strne	r3, [r4, #4]
 8006986:	6013      	streq	r3, [r2, #0]
 8006988:	460c      	movne	r4, r1
 800698a:	e7eb      	b.n	8006964 <_malloc_r+0x64>
 800698c:	460c      	mov	r4, r1
 800698e:	6849      	ldr	r1, [r1, #4]
 8006990:	e7cc      	b.n	800692c <_malloc_r+0x2c>
 8006992:	1cc4      	adds	r4, r0, #3
 8006994:	f024 0403 	bic.w	r4, r4, #3
 8006998:	42a0      	cmp	r0, r4
 800699a:	d005      	beq.n	80069a8 <_malloc_r+0xa8>
 800699c:	1a21      	subs	r1, r4, r0
 800699e:	4630      	mov	r0, r6
 80069a0:	f000 f86c 	bl	8006a7c <_sbrk_r>
 80069a4:	3001      	adds	r0, #1
 80069a6:	d0cf      	beq.n	8006948 <_malloc_r+0x48>
 80069a8:	6025      	str	r5, [r4, #0]
 80069aa:	e7db      	b.n	8006964 <_malloc_r+0x64>
 80069ac:	20000214 	.word	0x20000214
 80069b0:	20000218 	.word	0x20000218

080069b4 <_puts_r>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	460e      	mov	r6, r1
 80069b8:	4605      	mov	r5, r0
 80069ba:	b118      	cbz	r0, 80069c4 <_puts_r+0x10>
 80069bc:	6983      	ldr	r3, [r0, #24]
 80069be:	b90b      	cbnz	r3, 80069c4 <_puts_r+0x10>
 80069c0:	f000 fa1c 	bl	8006dfc <__sinit>
 80069c4:	69ab      	ldr	r3, [r5, #24]
 80069c6:	68ac      	ldr	r4, [r5, #8]
 80069c8:	b913      	cbnz	r3, 80069d0 <_puts_r+0x1c>
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 fa16 	bl	8006dfc <__sinit>
 80069d0:	4b23      	ldr	r3, [pc, #140]	; (8006a60 <_puts_r+0xac>)
 80069d2:	429c      	cmp	r4, r3
 80069d4:	d117      	bne.n	8006a06 <_puts_r+0x52>
 80069d6:	686c      	ldr	r4, [r5, #4]
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	071b      	lsls	r3, r3, #28
 80069dc:	d51d      	bpl.n	8006a1a <_puts_r+0x66>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	b1db      	cbz	r3, 8006a1a <_puts_r+0x66>
 80069e2:	3e01      	subs	r6, #1
 80069e4:	68a3      	ldr	r3, [r4, #8]
 80069e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069ea:	3b01      	subs	r3, #1
 80069ec:	60a3      	str	r3, [r4, #8]
 80069ee:	b9e9      	cbnz	r1, 8006a2c <_puts_r+0x78>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	da2e      	bge.n	8006a52 <_puts_r+0x9e>
 80069f4:	4622      	mov	r2, r4
 80069f6:	210a      	movs	r1, #10
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 f84f 	bl	8006a9c <__swbuf_r>
 80069fe:	3001      	adds	r0, #1
 8006a00:	d011      	beq.n	8006a26 <_puts_r+0x72>
 8006a02:	200a      	movs	r0, #10
 8006a04:	e011      	b.n	8006a2a <_puts_r+0x76>
 8006a06:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <_puts_r+0xb0>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d101      	bne.n	8006a10 <_puts_r+0x5c>
 8006a0c:	68ac      	ldr	r4, [r5, #8]
 8006a0e:	e7e3      	b.n	80069d8 <_puts_r+0x24>
 8006a10:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <_puts_r+0xb4>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	bf08      	it	eq
 8006a16:	68ec      	ldreq	r4, [r5, #12]
 8006a18:	e7de      	b.n	80069d8 <_puts_r+0x24>
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f000 f88f 	bl	8006b40 <__swsetup_r>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d0dd      	beq.n	80069e2 <_puts_r+0x2e>
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	da04      	bge.n	8006a3a <_puts_r+0x86>
 8006a30:	69a2      	ldr	r2, [r4, #24]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	dc06      	bgt.n	8006a44 <_puts_r+0x90>
 8006a36:	290a      	cmp	r1, #10
 8006a38:	d004      	beq.n	8006a44 <_puts_r+0x90>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	6022      	str	r2, [r4, #0]
 8006a40:	7019      	strb	r1, [r3, #0]
 8006a42:	e7cf      	b.n	80069e4 <_puts_r+0x30>
 8006a44:	4622      	mov	r2, r4
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 f828 	bl	8006a9c <__swbuf_r>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d1c9      	bne.n	80069e4 <_puts_r+0x30>
 8006a50:	e7e9      	b.n	8006a26 <_puts_r+0x72>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	200a      	movs	r0, #10
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	6022      	str	r2, [r4, #0]
 8006a5a:	7018      	strb	r0, [r3, #0]
 8006a5c:	e7e5      	b.n	8006a2a <_puts_r+0x76>
 8006a5e:	bf00      	nop
 8006a60:	080071f4 	.word	0x080071f4
 8006a64:	08007214 	.word	0x08007214
 8006a68:	080071d4 	.word	0x080071d4

08006a6c <puts>:
 8006a6c:	4b02      	ldr	r3, [pc, #8]	; (8006a78 <puts+0xc>)
 8006a6e:	4601      	mov	r1, r0
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	f7ff bf9f 	b.w	80069b4 <_puts_r>
 8006a76:	bf00      	nop
 8006a78:	2000018c 	.word	0x2000018c

08006a7c <_sbrk_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4c06      	ldr	r4, [pc, #24]	; (8006a98 <_sbrk_r+0x1c>)
 8006a80:	2300      	movs	r3, #0
 8006a82:	4605      	mov	r5, r0
 8006a84:	4608      	mov	r0, r1
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	f7f9 ff8c 	bl	80009a4 <_sbrk>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_sbrk_r+0x1a>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_sbrk_r+0x1a>
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20001b4c 	.word	0x20001b4c

08006a9c <__swbuf_r>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	460e      	mov	r6, r1
 8006aa0:	4614      	mov	r4, r2
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	b118      	cbz	r0, 8006aae <__swbuf_r+0x12>
 8006aa6:	6983      	ldr	r3, [r0, #24]
 8006aa8:	b90b      	cbnz	r3, 8006aae <__swbuf_r+0x12>
 8006aaa:	f000 f9a7 	bl	8006dfc <__sinit>
 8006aae:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <__swbuf_r+0x98>)
 8006ab0:	429c      	cmp	r4, r3
 8006ab2:	d12a      	bne.n	8006b0a <__swbuf_r+0x6e>
 8006ab4:	686c      	ldr	r4, [r5, #4]
 8006ab6:	69a3      	ldr	r3, [r4, #24]
 8006ab8:	60a3      	str	r3, [r4, #8]
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	071a      	lsls	r2, r3, #28
 8006abe:	d52e      	bpl.n	8006b1e <__swbuf_r+0x82>
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	b363      	cbz	r3, 8006b1e <__swbuf_r+0x82>
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	6820      	ldr	r0, [r4, #0]
 8006ac8:	1ac0      	subs	r0, r0, r3
 8006aca:	6963      	ldr	r3, [r4, #20]
 8006acc:	b2f6      	uxtb	r6, r6
 8006ace:	4283      	cmp	r3, r0
 8006ad0:	4637      	mov	r7, r6
 8006ad2:	dc04      	bgt.n	8006ade <__swbuf_r+0x42>
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 f926 	bl	8006d28 <_fflush_r>
 8006adc:	bb28      	cbnz	r0, 8006b2a <__swbuf_r+0x8e>
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	60a3      	str	r3, [r4, #8]
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	6022      	str	r2, [r4, #0]
 8006aea:	701e      	strb	r6, [r3, #0]
 8006aec:	6963      	ldr	r3, [r4, #20]
 8006aee:	3001      	adds	r0, #1
 8006af0:	4283      	cmp	r3, r0
 8006af2:	d004      	beq.n	8006afe <__swbuf_r+0x62>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	07db      	lsls	r3, r3, #31
 8006af8:	d519      	bpl.n	8006b2e <__swbuf_r+0x92>
 8006afa:	2e0a      	cmp	r6, #10
 8006afc:	d117      	bne.n	8006b2e <__swbuf_r+0x92>
 8006afe:	4621      	mov	r1, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 f911 	bl	8006d28 <_fflush_r>
 8006b06:	b190      	cbz	r0, 8006b2e <__swbuf_r+0x92>
 8006b08:	e00f      	b.n	8006b2a <__swbuf_r+0x8e>
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <__swbuf_r+0x9c>)
 8006b0c:	429c      	cmp	r4, r3
 8006b0e:	d101      	bne.n	8006b14 <__swbuf_r+0x78>
 8006b10:	68ac      	ldr	r4, [r5, #8]
 8006b12:	e7d0      	b.n	8006ab6 <__swbuf_r+0x1a>
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <__swbuf_r+0xa0>)
 8006b16:	429c      	cmp	r4, r3
 8006b18:	bf08      	it	eq
 8006b1a:	68ec      	ldreq	r4, [r5, #12]
 8006b1c:	e7cb      	b.n	8006ab6 <__swbuf_r+0x1a>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 f80d 	bl	8006b40 <__swsetup_r>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d0cc      	beq.n	8006ac4 <__swbuf_r+0x28>
 8006b2a:	f04f 37ff 	mov.w	r7, #4294967295
 8006b2e:	4638      	mov	r0, r7
 8006b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b32:	bf00      	nop
 8006b34:	080071f4 	.word	0x080071f4
 8006b38:	08007214 	.word	0x08007214
 8006b3c:	080071d4 	.word	0x080071d4

08006b40 <__swsetup_r>:
 8006b40:	4b32      	ldr	r3, [pc, #200]	; (8006c0c <__swsetup_r+0xcc>)
 8006b42:	b570      	push	{r4, r5, r6, lr}
 8006b44:	681d      	ldr	r5, [r3, #0]
 8006b46:	4606      	mov	r6, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	b125      	cbz	r5, 8006b56 <__swsetup_r+0x16>
 8006b4c:	69ab      	ldr	r3, [r5, #24]
 8006b4e:	b913      	cbnz	r3, 8006b56 <__swsetup_r+0x16>
 8006b50:	4628      	mov	r0, r5
 8006b52:	f000 f953 	bl	8006dfc <__sinit>
 8006b56:	4b2e      	ldr	r3, [pc, #184]	; (8006c10 <__swsetup_r+0xd0>)
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	d10f      	bne.n	8006b7c <__swsetup_r+0x3c>
 8006b5c:	686c      	ldr	r4, [r5, #4]
 8006b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	0715      	lsls	r5, r2, #28
 8006b66:	d42c      	bmi.n	8006bc2 <__swsetup_r+0x82>
 8006b68:	06d0      	lsls	r0, r2, #27
 8006b6a:	d411      	bmi.n	8006b90 <__swsetup_r+0x50>
 8006b6c:	2209      	movs	r2, #9
 8006b6e:	6032      	str	r2, [r6, #0]
 8006b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7a:	e03e      	b.n	8006bfa <__swsetup_r+0xba>
 8006b7c:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <__swsetup_r+0xd4>)
 8006b7e:	429c      	cmp	r4, r3
 8006b80:	d101      	bne.n	8006b86 <__swsetup_r+0x46>
 8006b82:	68ac      	ldr	r4, [r5, #8]
 8006b84:	e7eb      	b.n	8006b5e <__swsetup_r+0x1e>
 8006b86:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <__swsetup_r+0xd8>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	bf08      	it	eq
 8006b8c:	68ec      	ldreq	r4, [r5, #12]
 8006b8e:	e7e6      	b.n	8006b5e <__swsetup_r+0x1e>
 8006b90:	0751      	lsls	r1, r2, #29
 8006b92:	d512      	bpl.n	8006bba <__swsetup_r+0x7a>
 8006b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b96:	b141      	cbz	r1, 8006baa <__swsetup_r+0x6a>
 8006b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b9c:	4299      	cmp	r1, r3
 8006b9e:	d002      	beq.n	8006ba6 <__swsetup_r+0x66>
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff fe5f 	bl	8006864 <_free_r>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6063      	str	r3, [r4, #4]
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f043 0308 	orr.w	r3, r3, #8
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	b94b      	cbnz	r3, 8006bda <__swsetup_r+0x9a>
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd0:	d003      	beq.n	8006bda <__swsetup_r+0x9a>
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f000 f9bf 	bl	8006f58 <__smakebuf_r>
 8006bda:	89a2      	ldrh	r2, [r4, #12]
 8006bdc:	f012 0301 	ands.w	r3, r2, #1
 8006be0:	d00c      	beq.n	8006bfc <__swsetup_r+0xbc>
 8006be2:	2300      	movs	r3, #0
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	6963      	ldr	r3, [r4, #20]
 8006be8:	425b      	negs	r3, r3
 8006bea:	61a3      	str	r3, [r4, #24]
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	b953      	cbnz	r3, 8006c06 <__swsetup_r+0xc6>
 8006bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006bf8:	d1ba      	bne.n	8006b70 <__swsetup_r+0x30>
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	0792      	lsls	r2, r2, #30
 8006bfe:	bf58      	it	pl
 8006c00:	6963      	ldrpl	r3, [r4, #20]
 8006c02:	60a3      	str	r3, [r4, #8]
 8006c04:	e7f2      	b.n	8006bec <__swsetup_r+0xac>
 8006c06:	2000      	movs	r0, #0
 8006c08:	e7f7      	b.n	8006bfa <__swsetup_r+0xba>
 8006c0a:	bf00      	nop
 8006c0c:	2000018c 	.word	0x2000018c
 8006c10:	080071f4 	.word	0x080071f4
 8006c14:	08007214 	.word	0x08007214
 8006c18:	080071d4 	.word	0x080071d4

08006c1c <__sflush_r>:
 8006c1c:	898a      	ldrh	r2, [r1, #12]
 8006c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c22:	4605      	mov	r5, r0
 8006c24:	0710      	lsls	r0, r2, #28
 8006c26:	460c      	mov	r4, r1
 8006c28:	d458      	bmi.n	8006cdc <__sflush_r+0xc0>
 8006c2a:	684b      	ldr	r3, [r1, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	dc05      	bgt.n	8006c3c <__sflush_r+0x20>
 8006c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	dc02      	bgt.n	8006c3c <__sflush_r+0x20>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	d0f9      	beq.n	8006c36 <__sflush_r+0x1a>
 8006c42:	2300      	movs	r3, #0
 8006c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c48:	682f      	ldr	r7, [r5, #0]
 8006c4a:	6a21      	ldr	r1, [r4, #32]
 8006c4c:	602b      	str	r3, [r5, #0]
 8006c4e:	d032      	beq.n	8006cb6 <__sflush_r+0x9a>
 8006c50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	075a      	lsls	r2, r3, #29
 8006c56:	d505      	bpl.n	8006c64 <__sflush_r+0x48>
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	1ac0      	subs	r0, r0, r3
 8006c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c5e:	b10b      	cbz	r3, 8006c64 <__sflush_r+0x48>
 8006c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c62:	1ac0      	subs	r0, r0, r3
 8006c64:	2300      	movs	r3, #0
 8006c66:	4602      	mov	r2, r0
 8006c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c6a:	6a21      	ldr	r1, [r4, #32]
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b0      	blx	r6
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	d106      	bne.n	8006c84 <__sflush_r+0x68>
 8006c76:	6829      	ldr	r1, [r5, #0]
 8006c78:	291d      	cmp	r1, #29
 8006c7a:	d848      	bhi.n	8006d0e <__sflush_r+0xf2>
 8006c7c:	4a29      	ldr	r2, [pc, #164]	; (8006d24 <__sflush_r+0x108>)
 8006c7e:	40ca      	lsrs	r2, r1
 8006c80:	07d6      	lsls	r6, r2, #31
 8006c82:	d544      	bpl.n	8006d0e <__sflush_r+0xf2>
 8006c84:	2200      	movs	r2, #0
 8006c86:	6062      	str	r2, [r4, #4]
 8006c88:	04d9      	lsls	r1, r3, #19
 8006c8a:	6922      	ldr	r2, [r4, #16]
 8006c8c:	6022      	str	r2, [r4, #0]
 8006c8e:	d504      	bpl.n	8006c9a <__sflush_r+0x7e>
 8006c90:	1c42      	adds	r2, r0, #1
 8006c92:	d101      	bne.n	8006c98 <__sflush_r+0x7c>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b903      	cbnz	r3, 8006c9a <__sflush_r+0x7e>
 8006c98:	6560      	str	r0, [r4, #84]	; 0x54
 8006c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c9c:	602f      	str	r7, [r5, #0]
 8006c9e:	2900      	cmp	r1, #0
 8006ca0:	d0c9      	beq.n	8006c36 <__sflush_r+0x1a>
 8006ca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	d002      	beq.n	8006cb0 <__sflush_r+0x94>
 8006caa:	4628      	mov	r0, r5
 8006cac:	f7ff fdda 	bl	8006864 <_free_r>
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	6360      	str	r0, [r4, #52]	; 0x34
 8006cb4:	e7c0      	b.n	8006c38 <__sflush_r+0x1c>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b0      	blx	r6
 8006cbc:	1c41      	adds	r1, r0, #1
 8006cbe:	d1c8      	bne.n	8006c52 <__sflush_r+0x36>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0c5      	beq.n	8006c52 <__sflush_r+0x36>
 8006cc6:	2b1d      	cmp	r3, #29
 8006cc8:	d001      	beq.n	8006cce <__sflush_r+0xb2>
 8006cca:	2b16      	cmp	r3, #22
 8006ccc:	d101      	bne.n	8006cd2 <__sflush_r+0xb6>
 8006cce:	602f      	str	r7, [r5, #0]
 8006cd0:	e7b1      	b.n	8006c36 <__sflush_r+0x1a>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	e7ad      	b.n	8006c38 <__sflush_r+0x1c>
 8006cdc:	690f      	ldr	r7, [r1, #16]
 8006cde:	2f00      	cmp	r7, #0
 8006ce0:	d0a9      	beq.n	8006c36 <__sflush_r+0x1a>
 8006ce2:	0793      	lsls	r3, r2, #30
 8006ce4:	680e      	ldr	r6, [r1, #0]
 8006ce6:	bf08      	it	eq
 8006ce8:	694b      	ldreq	r3, [r1, #20]
 8006cea:	600f      	str	r7, [r1, #0]
 8006cec:	bf18      	it	ne
 8006cee:	2300      	movne	r3, #0
 8006cf0:	eba6 0807 	sub.w	r8, r6, r7
 8006cf4:	608b      	str	r3, [r1, #8]
 8006cf6:	f1b8 0f00 	cmp.w	r8, #0
 8006cfa:	dd9c      	ble.n	8006c36 <__sflush_r+0x1a>
 8006cfc:	4643      	mov	r3, r8
 8006cfe:	463a      	mov	r2, r7
 8006d00:	6a21      	ldr	r1, [r4, #32]
 8006d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b0      	blx	r6
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	dc06      	bgt.n	8006d1a <__sflush_r+0xfe>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d12:	81a3      	strh	r3, [r4, #12]
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295
 8006d18:	e78e      	b.n	8006c38 <__sflush_r+0x1c>
 8006d1a:	4407      	add	r7, r0
 8006d1c:	eba8 0800 	sub.w	r8, r8, r0
 8006d20:	e7e9      	b.n	8006cf6 <__sflush_r+0xda>
 8006d22:	bf00      	nop
 8006d24:	20400001 	.word	0x20400001

08006d28 <_fflush_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	690b      	ldr	r3, [r1, #16]
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	b1db      	cbz	r3, 8006d6a <_fflush_r+0x42>
 8006d32:	b118      	cbz	r0, 8006d3c <_fflush_r+0x14>
 8006d34:	6983      	ldr	r3, [r0, #24]
 8006d36:	b90b      	cbnz	r3, 8006d3c <_fflush_r+0x14>
 8006d38:	f000 f860 	bl	8006dfc <__sinit>
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <_fflush_r+0x48>)
 8006d3e:	429c      	cmp	r4, r3
 8006d40:	d109      	bne.n	8006d56 <_fflush_r+0x2e>
 8006d42:	686c      	ldr	r4, [r5, #4]
 8006d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d48:	b17b      	cbz	r3, 8006d6a <_fflush_r+0x42>
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d52:	f7ff bf63 	b.w	8006c1c <__sflush_r>
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <_fflush_r+0x4c>)
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	d101      	bne.n	8006d60 <_fflush_r+0x38>
 8006d5c:	68ac      	ldr	r4, [r5, #8]
 8006d5e:	e7f1      	b.n	8006d44 <_fflush_r+0x1c>
 8006d60:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <_fflush_r+0x50>)
 8006d62:	429c      	cmp	r4, r3
 8006d64:	bf08      	it	eq
 8006d66:	68ec      	ldreq	r4, [r5, #12]
 8006d68:	e7ec      	b.n	8006d44 <_fflush_r+0x1c>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	bd38      	pop	{r3, r4, r5, pc}
 8006d6e:	bf00      	nop
 8006d70:	080071f4 	.word	0x080071f4
 8006d74:	08007214 	.word	0x08007214
 8006d78:	080071d4 	.word	0x080071d4

08006d7c <std>:
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	4604      	mov	r4, r0
 8006d82:	e9c0 3300 	strd	r3, r3, [r0]
 8006d86:	6083      	str	r3, [r0, #8]
 8006d88:	8181      	strh	r1, [r0, #12]
 8006d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d8c:	81c2      	strh	r2, [r0, #14]
 8006d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d92:	6183      	str	r3, [r0, #24]
 8006d94:	4619      	mov	r1, r3
 8006d96:	2208      	movs	r2, #8
 8006d98:	305c      	adds	r0, #92	; 0x5c
 8006d9a:	f7ff fd5b 	bl	8006854 <memset>
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <std+0x38>)
 8006da0:	6263      	str	r3, [r4, #36]	; 0x24
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <std+0x3c>)
 8006da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <std+0x40>)
 8006da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <std+0x44>)
 8006dac:	6224      	str	r4, [r4, #32]
 8006dae:	6323      	str	r3, [r4, #48]	; 0x30
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	bf00      	nop
 8006db4:	08006fdd 	.word	0x08006fdd
 8006db8:	08006fff 	.word	0x08006fff
 8006dbc:	08007037 	.word	0x08007037
 8006dc0:	0800705b 	.word	0x0800705b

08006dc4 <_cleanup_r>:
 8006dc4:	4901      	ldr	r1, [pc, #4]	; (8006dcc <_cleanup_r+0x8>)
 8006dc6:	f000 b885 	b.w	8006ed4 <_fwalk_reent>
 8006dca:	bf00      	nop
 8006dcc:	08006d29 	.word	0x08006d29

08006dd0 <__sfmoreglue>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	1e4a      	subs	r2, r1, #1
 8006dd4:	2568      	movs	r5, #104	; 0x68
 8006dd6:	4355      	muls	r5, r2
 8006dd8:	460e      	mov	r6, r1
 8006dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dde:	f7ff fd8f 	bl	8006900 <_malloc_r>
 8006de2:	4604      	mov	r4, r0
 8006de4:	b140      	cbz	r0, 8006df8 <__sfmoreglue+0x28>
 8006de6:	2100      	movs	r1, #0
 8006de8:	e9c0 1600 	strd	r1, r6, [r0]
 8006dec:	300c      	adds	r0, #12
 8006dee:	60a0      	str	r0, [r4, #8]
 8006df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006df4:	f7ff fd2e 	bl	8006854 <memset>
 8006df8:	4620      	mov	r0, r4
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}

08006dfc <__sinit>:
 8006dfc:	6983      	ldr	r3, [r0, #24]
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
 8006e02:	bb33      	cbnz	r3, 8006e52 <__sinit+0x56>
 8006e04:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006e08:	6503      	str	r3, [r0, #80]	; 0x50
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <__sinit+0x58>)
 8006e0c:	4a12      	ldr	r2, [pc, #72]	; (8006e58 <__sinit+0x5c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6282      	str	r2, [r0, #40]	; 0x28
 8006e12:	4298      	cmp	r0, r3
 8006e14:	bf04      	itt	eq
 8006e16:	2301      	moveq	r3, #1
 8006e18:	6183      	streq	r3, [r0, #24]
 8006e1a:	f000 f81f 	bl	8006e5c <__sfp>
 8006e1e:	6060      	str	r0, [r4, #4]
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 f81b 	bl	8006e5c <__sfp>
 8006e26:	60a0      	str	r0, [r4, #8]
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 f817 	bl	8006e5c <__sfp>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	60e0      	str	r0, [r4, #12]
 8006e32:	2104      	movs	r1, #4
 8006e34:	6860      	ldr	r0, [r4, #4]
 8006e36:	f7ff ffa1 	bl	8006d7c <std>
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	2109      	movs	r1, #9
 8006e3e:	68a0      	ldr	r0, [r4, #8]
 8006e40:	f7ff ff9c 	bl	8006d7c <std>
 8006e44:	2202      	movs	r2, #2
 8006e46:	2112      	movs	r1, #18
 8006e48:	68e0      	ldr	r0, [r4, #12]
 8006e4a:	f7ff ff97 	bl	8006d7c <std>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	61a3      	str	r3, [r4, #24]
 8006e52:	bd10      	pop	{r4, pc}
 8006e54:	080071d0 	.word	0x080071d0
 8006e58:	08006dc5 	.word	0x08006dc5

08006e5c <__sfp>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <__sfp+0x70>)
 8006e60:	681e      	ldr	r6, [r3, #0]
 8006e62:	69b3      	ldr	r3, [r6, #24]
 8006e64:	4607      	mov	r7, r0
 8006e66:	b913      	cbnz	r3, 8006e6e <__sfp+0x12>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff ffc7 	bl	8006dfc <__sinit>
 8006e6e:	3648      	adds	r6, #72	; 0x48
 8006e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	d503      	bpl.n	8006e80 <__sfp+0x24>
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	b133      	cbz	r3, 8006e8a <__sfp+0x2e>
 8006e7c:	6836      	ldr	r6, [r6, #0]
 8006e7e:	e7f7      	b.n	8006e70 <__sfp+0x14>
 8006e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e84:	b16d      	cbz	r5, 8006ea2 <__sfp+0x46>
 8006e86:	3468      	adds	r4, #104	; 0x68
 8006e88:	e7f4      	b.n	8006e74 <__sfp+0x18>
 8006e8a:	2104      	movs	r1, #4
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	f7ff ff9f 	bl	8006dd0 <__sfmoreglue>
 8006e92:	6030      	str	r0, [r6, #0]
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d1f1      	bne.n	8006e7c <__sfp+0x20>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea2:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <__sfp+0x74>)
 8006ea4:	6665      	str	r5, [r4, #100]	; 0x64
 8006ea6:	e9c4 5500 	strd	r5, r5, [r4]
 8006eaa:	60a5      	str	r5, [r4, #8]
 8006eac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006eb0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ebc:	f7ff fcca 	bl	8006854 <memset>
 8006ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ec8:	e7e9      	b.n	8006e9e <__sfp+0x42>
 8006eca:	bf00      	nop
 8006ecc:	080071d0 	.word	0x080071d0
 8006ed0:	ffff0001 	.word	0xffff0001

08006ed4 <_fwalk_reent>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	4680      	mov	r8, r0
 8006eda:	4689      	mov	r9, r1
 8006edc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	b914      	cbnz	r4, 8006eea <_fwalk_reent+0x16>
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006eee:	3f01      	subs	r7, #1
 8006ef0:	d501      	bpl.n	8006ef6 <_fwalk_reent+0x22>
 8006ef2:	6824      	ldr	r4, [r4, #0]
 8006ef4:	e7f5      	b.n	8006ee2 <_fwalk_reent+0xe>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d907      	bls.n	8006f0c <_fwalk_reent+0x38>
 8006efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f00:	3301      	adds	r3, #1
 8006f02:	d003      	beq.n	8006f0c <_fwalk_reent+0x38>
 8006f04:	4629      	mov	r1, r5
 8006f06:	4640      	mov	r0, r8
 8006f08:	47c8      	blx	r9
 8006f0a:	4306      	orrs	r6, r0
 8006f0c:	3568      	adds	r5, #104	; 0x68
 8006f0e:	e7ee      	b.n	8006eee <_fwalk_reent+0x1a>

08006f10 <__swhatbuf_r>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	460e      	mov	r6, r1
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	b096      	sub	sp, #88	; 0x58
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	461d      	mov	r5, r3
 8006f20:	da07      	bge.n	8006f32 <__swhatbuf_r+0x22>
 8006f22:	2300      	movs	r3, #0
 8006f24:	602b      	str	r3, [r5, #0]
 8006f26:	89b3      	ldrh	r3, [r6, #12]
 8006f28:	061a      	lsls	r2, r3, #24
 8006f2a:	d410      	bmi.n	8006f4e <__swhatbuf_r+0x3e>
 8006f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f30:	e00e      	b.n	8006f50 <__swhatbuf_r+0x40>
 8006f32:	466a      	mov	r2, sp
 8006f34:	f000 f8b8 	bl	80070a8 <_fstat_r>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	dbf2      	blt.n	8006f22 <__swhatbuf_r+0x12>
 8006f3c:	9a01      	ldr	r2, [sp, #4]
 8006f3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f46:	425a      	negs	r2, r3
 8006f48:	415a      	adcs	r2, r3
 8006f4a:	602a      	str	r2, [r5, #0]
 8006f4c:	e7ee      	b.n	8006f2c <__swhatbuf_r+0x1c>
 8006f4e:	2340      	movs	r3, #64	; 0x40
 8006f50:	2000      	movs	r0, #0
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	b016      	add	sp, #88	; 0x58
 8006f56:	bd70      	pop	{r4, r5, r6, pc}

08006f58 <__smakebuf_r>:
 8006f58:	898b      	ldrh	r3, [r1, #12]
 8006f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f5c:	079d      	lsls	r5, r3, #30
 8006f5e:	4606      	mov	r6, r0
 8006f60:	460c      	mov	r4, r1
 8006f62:	d507      	bpl.n	8006f74 <__smakebuf_r+0x1c>
 8006f64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	6163      	str	r3, [r4, #20]
 8006f70:	b002      	add	sp, #8
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	ab01      	add	r3, sp, #4
 8006f76:	466a      	mov	r2, sp
 8006f78:	f7ff ffca 	bl	8006f10 <__swhatbuf_r>
 8006f7c:	9900      	ldr	r1, [sp, #0]
 8006f7e:	4605      	mov	r5, r0
 8006f80:	4630      	mov	r0, r6
 8006f82:	f7ff fcbd 	bl	8006900 <_malloc_r>
 8006f86:	b948      	cbnz	r0, 8006f9c <__smakebuf_r+0x44>
 8006f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8c:	059a      	lsls	r2, r3, #22
 8006f8e:	d4ef      	bmi.n	8006f70 <__smakebuf_r+0x18>
 8006f90:	f023 0303 	bic.w	r3, r3, #3
 8006f94:	f043 0302 	orr.w	r3, r3, #2
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	e7e3      	b.n	8006f64 <__smakebuf_r+0xc>
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <__smakebuf_r+0x7c>)
 8006f9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	6020      	str	r0, [r4, #0]
 8006fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	9b00      	ldr	r3, [sp, #0]
 8006fac:	6163      	str	r3, [r4, #20]
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	6120      	str	r0, [r4, #16]
 8006fb2:	b15b      	cbz	r3, 8006fcc <__smakebuf_r+0x74>
 8006fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f000 f887 	bl	80070cc <_isatty_r>
 8006fbe:	b128      	cbz	r0, 8006fcc <__smakebuf_r+0x74>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	431d      	orrs	r5, r3
 8006fd0:	81a5      	strh	r5, [r4, #12]
 8006fd2:	e7cd      	b.n	8006f70 <__smakebuf_r+0x18>
 8006fd4:	08006dc5 	.word	0x08006dc5

08006fd8 <__malloc_lock>:
 8006fd8:	4770      	bx	lr

08006fda <__malloc_unlock>:
 8006fda:	4770      	bx	lr

08006fdc <__sread>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	f000 f894 	bl	8007110 <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	bfab      	itete	ge
 8006fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff0:	181b      	addge	r3, r3, r0
 8006ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ff6:	bfac      	ite	ge
 8006ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ffa:	81a3      	strhlt	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__swrite>:
 8006ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007002:	461f      	mov	r7, r3
 8007004:	898b      	ldrh	r3, [r1, #12]
 8007006:	05db      	lsls	r3, r3, #23
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	4616      	mov	r6, r2
 800700e:	d505      	bpl.n	800701c <__swrite+0x1e>
 8007010:	2302      	movs	r3, #2
 8007012:	2200      	movs	r2, #0
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	f000 f868 	bl	80070ec <_lseek_r>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	4632      	mov	r2, r6
 800702a:	463b      	mov	r3, r7
 800702c:	4628      	mov	r0, r5
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	f000 b817 	b.w	8007064 <_write_r>

08007036 <__sseek>:
 8007036:	b510      	push	{r4, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 f855 	bl	80070ec <_lseek_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	bf15      	itete	ne
 8007048:	6560      	strne	r0, [r4, #84]	; 0x54
 800704a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800704e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007052:	81a3      	strheq	r3, [r4, #12]
 8007054:	bf18      	it	ne
 8007056:	81a3      	strhne	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__sclose>:
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 b813 	b.w	8007088 <_close_r>
	...

08007064 <_write_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4c07      	ldr	r4, [pc, #28]	; (8007084 <_write_r+0x20>)
 8007068:	4605      	mov	r5, r0
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	2200      	movs	r2, #0
 8007070:	6022      	str	r2, [r4, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7f9 fa57 	bl	8000526 <_write>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_write_r+0x1e>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	b103      	cbz	r3, 8007082 <_write_r+0x1e>
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20001b4c 	.word	0x20001b4c

08007088 <_close_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4c06      	ldr	r4, [pc, #24]	; (80070a4 <_close_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4605      	mov	r5, r0
 8007090:	4608      	mov	r0, r1
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	f7f9 fc51 	bl	800093a <_close>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_close_r+0x1a>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_close_r+0x1a>
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20001b4c 	.word	0x20001b4c

080070a8 <_fstat_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4c07      	ldr	r4, [pc, #28]	; (80070c8 <_fstat_r+0x20>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4605      	mov	r5, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	4611      	mov	r1, r2
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	f7f9 fc4c 	bl	8000952 <_fstat>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d102      	bne.n	80070c4 <_fstat_r+0x1c>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	b103      	cbz	r3, 80070c4 <_fstat_r+0x1c>
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	bd38      	pop	{r3, r4, r5, pc}
 80070c6:	bf00      	nop
 80070c8:	20001b4c 	.word	0x20001b4c

080070cc <_isatty_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4c06      	ldr	r4, [pc, #24]	; (80070e8 <_isatty_r+0x1c>)
 80070d0:	2300      	movs	r3, #0
 80070d2:	4605      	mov	r5, r0
 80070d4:	4608      	mov	r0, r1
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	f7f9 fc4b 	bl	8000972 <_isatty>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_isatty_r+0x1a>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_isatty_r+0x1a>
 80070e4:	602b      	str	r3, [r5, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	20001b4c 	.word	0x20001b4c

080070ec <_lseek_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4c07      	ldr	r4, [pc, #28]	; (800710c <_lseek_r+0x20>)
 80070f0:	4605      	mov	r5, r0
 80070f2:	4608      	mov	r0, r1
 80070f4:	4611      	mov	r1, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	6022      	str	r2, [r4, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f7f9 fc44 	bl	8000988 <_lseek>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_lseek_r+0x1e>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	b103      	cbz	r3, 800710a <_lseek_r+0x1e>
 8007108:	602b      	str	r3, [r5, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20001b4c 	.word	0x20001b4c

08007110 <_read_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4c07      	ldr	r4, [pc, #28]	; (8007130 <_read_r+0x20>)
 8007114:	4605      	mov	r5, r0
 8007116:	4608      	mov	r0, r1
 8007118:	4611      	mov	r1, r2
 800711a:	2200      	movs	r2, #0
 800711c:	6022      	str	r2, [r4, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	f7f9 fbee 	bl	8000900 <_read>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_read_r+0x1e>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	b103      	cbz	r3, 800712e <_read_r+0x1e>
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	20001b4c 	.word	0x20001b4c

08007134 <_init>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr

08007140 <_fini>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr


fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800aa40  0800aa40  0001aa40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad18  0800ad18  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad20  0800ad20  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad24  0800ad24  0001ad24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800ad28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a68  20000358  0800b080  00020358  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20001dc0  0800b080  00021dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f69  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000341a  00000000  00000000  0003a2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003d710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001200  00000000  00000000  0003ea70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228e2  00000000  00000000  0003fc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115e8  00000000  00000000  00062552  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3377  00000000  00000000  00073b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136eb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b3c  00000000  00000000  00136f2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa28 	.word	0x0800aa28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800aa28 	.word	0x0800aa28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2130      	movs	r1, #48	; 0x30
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 facc 	bl	8002468 <HAL_I2C_Mem_Read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	2b1e      	cmp	r3, #30
 8000ede:	d001      	beq.n	8000ee4 <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	21d0      	movs	r1, #208	; 0xd0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f001 fab4 	bl	8002468 <HAL_I2C_Mem_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000f0a:	7a3b      	ldrb	r3, [r7, #8]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d001      	beq.n	8000f14 <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <BMI088_I2C_GYRO_INIT>:

/* CUSTOM GYROSCOPE SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_GYRO_INIT(I2C_HandleTypeDef *hi2c)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	 * WRITING BACK TO THE REGISTER
	 */

	HAL_StatusTypeDef ret;
	uint8_t buf[1]; // Tx/Rx Buffer
	ret = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
	// ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_RANGE, buf));

	// SET GYROSCOPE DATA RATE AND BANDWIDTH
	// DATA RATE: 2000 HZ    1000 HZ    [400 HZ]
	// BANDWIDTH: 532 HZ    230 HZ    116 Hz    [47 HZ]
	buf[0] = 0x83;
 8000f2a:	2383      	movs	r3, #131	; 0x83
 8000f2c:	733b      	strb	r3, [r7, #12]
	ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_BANDWIDTH, buf));
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2210      	movs	r2, #16
 8000f34:	2168      	movs	r1, #104	; 0x68
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f878 	bl	800102c <BMI088_I2C_Reg_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	73fb      	strb	r3, [r7, #15]

	// ENABLE GYROSCOPE DATA-READY INTERRUPT
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2215      	movs	r2, #21
 8000f4c:	2168      	movs	r1, #104	; 0x68
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f88b 	bl	800106a <BMI088_I2C_Reg_Read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x80;
 8000f5e:	7b3b      	ldrb	r3, [r7, #12]
 8000f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2215      	movs	r2, #21
 8000f6e:	2168      	movs	r1, #104	; 0x68
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f85b 	bl	800102c <BMI088_I2C_Reg_Write>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]

	// SET GYROSCOPE INT3 MODE TO PUSH-PULL
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2216      	movs	r2, #22
 8000f86:	2168      	movs	r1, #104	; 0x68
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f86e 	bl	800106a <BMI088_I2C_Reg_Read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	73fb      	strb	r3, [r7, #15]
	buf[0] &= 0xFD;
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	f023 0302 	bic.w	r3, r3, #2
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	2216      	movs	r2, #22
 8000fa8:	2168      	movs	r1, #104	; 0x68
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f83e 	bl	800102c <BMI088_I2C_Reg_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	73fb      	strb	r3, [r7, #15]

	// MAP GYROSCOPE DATA-READY INTERRUPT TO INT3
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2218      	movs	r2, #24
 8000fc0:	2168      	movs	r1, #104	; 0x68
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f851 	bl	800106a <BMI088_I2C_Reg_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x01;
 8000fd2:	7b3b      	ldrb	r3, [r7, #12]
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2218      	movs	r2, #24
 8000fe2:	2168      	movs	r1, #104	; 0x68
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f821 	bl	800102c <BMI088_I2C_Reg_Write>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <BMI088_I2C_Read_Gyro>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_ACC_ADDR << 1, ACC_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* READ ALL GYROSCOPE DATA IN POLLING MODE */
HAL_StatusTypeDef BMI088_I2C_Read_Gyro(I2C_HandleTypeDef *hi2c, uint8_t *pData)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af04      	add	r7, sp, #16
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6, HAL_MAX_DELAY);
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2306      	movs	r3, #6
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	2202      	movs	r2, #2
 800101a:	21d0      	movs	r1, #208	; 0xd0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f001 fa23 	bl	8002468 <HAL_I2C_Mem_Read>
 8001022:	4603      	mov	r3, r0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <BMI088_I2C_Reg_Write>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* WRITE REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af04      	add	r7, sp, #16
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	72fb      	strb	r3, [r7, #11]
 800103a:	4613      	mov	r3, r2
 800103c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	b29b      	uxth	r3, r3
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	b299      	uxth	r1, r3
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	b29a      	uxth	r2, r3
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f001 f90a 	bl	8002274 <HAL_I2C_Mem_Write>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <BMI088_I2C_Reg_Read>:

/* READ REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b088      	sub	sp, #32
 800106e:	af04      	add	r7, sp, #16
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	72fb      	strb	r3, [r7, #11]
 8001078:	4613      	mov	r3, r2
 800107a:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	b29b      	uxth	r3, r3
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	b299      	uxth	r1, r3
 8001084:	7abb      	ldrb	r3, [r7, #10]
 8001086:	b29a      	uxth	r2, r3
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f001 f9e5 	bl	8002468 <HAL_I2C_Mem_Read>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f000 fc38 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f836 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f000 f936 	bl	8001324 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010b8:	f000 f89a 	bl	80011f0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80010bc:	f006 ff2a 	bl	8007f14 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80010c0:	f000 f8fa 	bl	80012b8 <MX_TIM7_Init>
  MX_TIM6_Init();
 80010c4:	f000 f8c2 	bl	800124c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <main+0x64>)
 80010ca:	f7ff feed 	bl	8000ea8 <BMI088_I2C_Read_CHIP_IDS>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <main+0x30>
 80010d4:	f000 faa4 	bl	8001620 <Error_Handler>

  // RUN BMI088 GYROSCOPE INITIALIZATION
  if ( BMI088_I2C_GYRO_INIT(&hi2c1) != HAL_OK ) { Error_Handler(); };
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <main+0x64>)
 80010da:	f7ff ff20 	bl	8000f1e <BMI088_I2C_GYRO_INIT>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <main+0x40>
 80010e4:	f000 fa9c 	bl	8001620 <Error_Handler>

  // START TIMERS
  HAL_TIM_Base_Start_IT(&htim7);
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <main+0x68>)
 80010ea:	f003 fd5c 	bl	8004ba6 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <main+0x6c>)
 80010f0:	f003 fd35 	bl	8004b5e <HAL_TIM_Base_Start>

  // Get starting time
  tprev = __HAL_TIM_GET_COUNTER(&htim6);
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <main+0x6c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <main+0x70>)
 80010fe:	801a      	strh	r2, [r3, #0]
  tprev_50 = tprev;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <main+0x70>)
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <main+0x74>)
 8001106:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001108:	e7fe      	b.n	8001108 <main+0x60>
 800110a:	bf00      	nop
 800110c:	200003bc 	.word	0x200003bc
 8001110:	200004a0 	.word	0x200004a0
 8001114:	2000041c 	.word	0x2000041c
 8001118:	2000049c 	.word	0x2000049c
 800111c:	200003b8 	.word	0x200003b8

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	2230      	movs	r2, #48	; 0x30
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f007 fc3e 	bl	80089b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <SystemClock_Config+0xc8>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <SystemClock_Config+0xc8>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <SystemClock_Config+0xc8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <SystemClock_Config+0xcc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <SystemClock_Config+0xcc>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <SystemClock_Config+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001190:	2310      	movs	r3, #16
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001194:	23c0      	movs	r3, #192	; 0xc0
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001198:	2304      	movs	r3, #4
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 f863 	bl	8004270 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b0:	f000 fa36 	bl	8001620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2101      	movs	r1, #1
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fabd 	bl	8004750 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011dc:	f000 fa20 	bl	8001620 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	; 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x50>)
 80011f6:	4a13      	ldr	r2, [pc, #76]	; (8001244 <MX_I2C1_Init+0x54>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x50>)
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_I2C1_Init+0x58>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_I2C1_Init+0x50>)
 800120e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_I2C1_Init+0x50>)
 800122e:	f000 fee9 	bl	8002004 <HAL_I2C_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001238:	f000 f9f2 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200003bc 	.word	0x200003bc
 8001244:	40005400 	.word	0x40005400
 8001248:	00061a80 	.word	0x00061a80

0800124c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_TIM6_Init+0x64>)
 800125c:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_TIM6_Init+0x68>)
 800125e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48 - 1;
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001262:	222f      	movs	r2, #47	; 0x2f
 8001264:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_TIM6_Init+0x64>)
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_TIM6_Init+0x64>)
 800127c:	f003 fc44 	bl	8004b08 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001286:	f000 f9cb 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001298:	f003 fe7a 	bl	8004f90 <HAL_TIMEx_MasterConfigSynchronization>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012a2:	f000 f9bd 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000041c 	.word	0x2000041c
 80012b4:	40001000 	.word	0x40001000

080012b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_TIM7_Init+0x64>)
 80012c8:	4a15      	ldr	r2, [pc, #84]	; (8001320 <MX_TIM7_Init+0x68>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48 - 1;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_TIM7_Init+0x64>)
 80012ce:	222f      	movs	r2, #47	; 0x2f
 80012d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_TIM7_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_TIM7_Init+0x64>)
 80012da:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_TIM7_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_TIM7_Init+0x64>)
 80012e8:	f003 fc0e 	bl	8004b08 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80012f2:	f000 f995 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <MX_TIM7_Init+0x64>)
 8001304:	f003 fe44 	bl	8004f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800130e:	f000 f987 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200004a0 	.word	0x200004a0
 8001320:	40001400 	.word	0x40001400

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <MX_GPIO_Init+0xe0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a30      	ldr	r2, [pc, #192]	; (8001404 <MX_GPIO_Init+0xe0>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <MX_GPIO_Init+0xe0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_GPIO_Init+0xe0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <MX_GPIO_Init+0xe0>)
 8001360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b27      	ldr	r3, [pc, #156]	; (8001404 <MX_GPIO_Init+0xe0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <MX_GPIO_Init+0xe0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a22      	ldr	r2, [pc, #136]	; (8001404 <MX_GPIO_Init+0xe0>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <MX_GPIO_Init+0xe0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_GPIO_Init+0xe0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <MX_GPIO_Init+0xe0>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_GPIO_Init+0xe0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	21c0      	movs	r1, #192	; 0xc0
 80013ae:	4816      	ldr	r0, [pc, #88]	; (8001408 <MX_GPIO_Init+0xe4>)
 80013b0:	f000 fdf6 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 80013b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_GPIO_Init+0xe8>)
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <MX_GPIO_Init+0xe4>)
 80013ca:	f000 fc4f 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ce:	23c0      	movs	r3, #192	; 0xc0
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4808      	ldr	r0, [pc, #32]	; (8001408 <MX_GPIO_Init+0xe4>)
 80013e6:	f000 fc41 	bl	8001c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2028      	movs	r0, #40	; 0x28
 80013f0:	f000 fc05 	bl	8001bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f4:	2028      	movs	r0, #40	; 0x28
 80013f6:	f000 fc1e 	bl	8001c36 <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40020800 	.word	0x40020800
 800140c:	10110000 	.word	0x10110000

08001410 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/* GYROSCOPE DATA READY INTERRUPT CALLBACK */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_14)
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001420:	f040 808c 	bne.w	800153c <HAL_GPIO_EXTI_Callback+0x12c>
	{
		// READ GYROSCOPE
	    if ( BMI088_I2C_Read_Gyro(&hi2c1, gyro_buf) != HAL_OK ) { Error_Handler(); }
 8001424:	494e      	ldr	r1, [pc, #312]	; (8001560 <HAL_GPIO_EXTI_Callback+0x150>)
 8001426:	484f      	ldr	r0, [pc, #316]	; (8001564 <HAL_GPIO_EXTI_Callback+0x154>)
 8001428:	f7ff fde9 	bl	8000ffe <BMI088_I2C_Read_Gyro>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_GPIO_EXTI_Callback+0x26>
 8001432:	f000 f8f5 	bl	8001620 <Error_Handler>

	    // UPDATE TIMER
	    telapsed = __HAL_TIM_GET_COUNTER(&htim6) - tprev;
 8001436:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <HAL_GPIO_EXTI_Callback+0x158>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	b29a      	uxth	r2, r3
 800143e:	4b4b      	ldr	r3, [pc, #300]	; (800156c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_GPIO_EXTI_Callback+0x160>)
 8001448:	801a      	strh	r2, [r3, #0]
	    tprev    = tprev + telapsed;
 800144a:	4b48      	ldr	r3, [pc, #288]	; (800156c <HAL_GPIO_EXTI_Callback+0x15c>)
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	4b48      	ldr	r3, [pc, #288]	; (8001570 <HAL_GPIO_EXTI_Callback+0x160>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001458:	801a      	strh	r2, [r3, #0]

		// CONVERT TO SIGNED INTEGER, SCALE, AND INTEGRATE
	    for (int i = 0; i < 3; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e06a      	b.n	8001536 <HAL_GPIO_EXTI_Callback+0x126>
	    {
	    	temp = gyro_buf[2*i + 1] << 8 | gyro_buf[2*i];
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	3301      	adds	r3, #1
 8001466:	4a3e      	ldr	r2, [pc, #248]	; (8001560 <HAL_GPIO_EXTI_Callback+0x150>)
 8001468:	5cd3      	ldrb	r3, [r2, r3]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	493b      	ldr	r1, [pc, #236]	; (8001560 <HAL_GPIO_EXTI_Callback+0x150>)
 8001474:	5ccb      	ldrb	r3, [r1, r3]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21a      	sxth	r2, r3
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <HAL_GPIO_EXTI_Callback+0x164>)
 800147e:	801a      	strh	r2, [r3, #0]
	    	rate_buf[i] = ((double)temp*GYRO_RATE_SCALE*pi)/(32767.0*180.0);
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_GPIO_EXTI_Callback+0x164>)
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f84c 	bl	8000524 <__aeabi_i2d>
 800148c:	4604      	mov	r4, r0
 800148e:	460d      	mov	r5, r1
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_GPIO_EXTI_Callback+0x168>)
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f858 	bl	8000548 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7ff f8aa 	bl	80005f8 <__aeabi_dmul>
 80014a4:	4603      	mov	r3, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	4618      	mov	r0, r3
 80014aa:	4621      	mov	r1, r4
 80014ac:	a426      	add	r4, pc, #152	; (adr r4, 8001548 <HAL_GPIO_EXTI_Callback+0x138>)
 80014ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4623      	mov	r3, r4
 80014b6:	f7ff f89f 	bl	80005f8 <__aeabi_dmul>
 80014ba:	4603      	mov	r3, r0
 80014bc:	460c      	mov	r4, r1
 80014be:	4618      	mov	r0, r3
 80014c0:	4621      	mov	r1, r4
 80014c2:	a323      	add	r3, pc, #140	; (adr r3, 8001550 <HAL_GPIO_EXTI_Callback+0x140>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f9c0 	bl	800084c <__aeabi_ddiv>
 80014cc:	4603      	mov	r3, r0
 80014ce:	460c      	mov	r4, r1
 80014d0:	492a      	ldr	r1, [pc, #168]	; (800157c <HAL_GPIO_EXTI_Callback+0x16c>)
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	00d2      	lsls	r2, r2, #3
 80014d6:	440a      	add	r2, r1
 80014d8:	e9c2 3400 	strd	r3, r4, [r2]
	    	rot[i]      = rot[i] + 0.000001*(double)telapsed*rate_buf[i];
 80014dc:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_GPIO_EXTI_Callback+0x170>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_GPIO_EXTI_Callback+0x160>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f809 	bl	8000504 <__aeabi_ui2d>
 80014f2:	a319      	add	r3, pc, #100	; (adr r3, 8001558 <HAL_GPIO_EXTI_Callback+0x148>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f87e 	bl	80005f8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f872 	bl	80005f8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7fe feb6 	bl	800028c <__adddf3>
 8001520:	4603      	mov	r3, r0
 8001522:	460c      	mov	r4, r1
 8001524:	4916      	ldr	r1, [pc, #88]	; (8001580 <HAL_GPIO_EXTI_Callback+0x170>)
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	440a      	add	r2, r1
 800152c:	e9c2 3400 	strd	r3, r4, [r2]
	    for (int i = 0; i < 3; i++)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b02      	cmp	r3, #2
 800153a:	dd91      	ble.n	8001460 <HAL_GPIO_EXTI_Callback+0x50>
		}
	}
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}
 8001544:	f3af 8000 	nop.w
 8001548:	53c8d4f1 	.word	0x53c8d4f1
 800154c:	400921fb 	.word	0x400921fb
 8001550:	00000000 	.word	0x00000000
 8001554:	41567fd3 	.word	0x41567fd3
 8001558:	a0b5ed8d 	.word	0xa0b5ed8d
 800155c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001560:	20000410 	.word	0x20000410
 8001564:	200003bc 	.word	0x200003bc
 8001568:	2000041c 	.word	0x2000041c
 800156c:	2000049c 	.word	0x2000049c
 8001570:	200003ba 	.word	0x200003ba
 8001574:	20000416 	.word	0x20000416
 8001578:	44fa0000 	.word	0x44fa0000
 800157c:	200003a0 	.word	0x200003a0
 8001580:	20000378 	.word	0x20000378

08001584 <HAL_TIM_PeriodElapsedCallback>:

/* TIMER INTERRUPT FOR 50Hz UPDATE OVER SERIAL */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af06      	add	r7, sp, #24
 800158a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d130      	bne.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x74>
		telapsed_50 = __HAL_TIM_GET_COUNTER(&htim6) - tprev_50;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015a8:	801a      	strh	r2, [r3, #0]
	    tprev_50    = tprev_50 + telapsed_50;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80015ac:	881a      	ldrh	r2, [r3, #0]
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80015b8:	801a      	strh	r2, [r3, #0]

		// DATA FORMAT: [X ANGLE]    [Y ANGLE]    [Z ANGLE]    [COMPUTATION TIME (uSec)]
		sprintf(tx_buf, "%f\t%f\t%f\t%i\n", rot[0], rot[1], rot[2], telapsed);
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80015bc:	e9d3 5600 	ldrd	r5, r6, [r3]
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80015c2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80015c8:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015ce:	8800      	ldrh	r0, [r0, #0]
 80015d0:	9004      	str	r0, [sp, #16]
 80015d2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80015d6:	e9cd 3400 	strd	r3, r4, [sp]
 80015da:	462a      	mov	r2, r5
 80015dc:	4633      	mov	r3, r6
 80015de:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015e2:	f007 ff01 	bl	80093e8 <siprintf>
		CDC_Transmit_FS((uint8_t*)tx_buf, strlen(tx_buf));
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015e8:	f7fe fdf2 	bl	80001d0 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4619      	mov	r1, r3
 80015f2:	480a      	ldr	r0, [pc, #40]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015f4:	f006 fd60 	bl	80080b8 <CDC_Transmit_FS>
	}
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001600:	40001400 	.word	0x40001400
 8001604:	2000041c 	.word	0x2000041c
 8001608:	200003b8 	.word	0x200003b8
 800160c:	20000418 	.word	0x20000418
 8001610:	20000378 	.word	0x20000378
 8001614:	200003ba 	.word	0x200003ba
 8001618:	0800aa40 	.word	0x0800aa40
 800161c:	2000045c 	.word	0x2000045c

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2140      	movs	r1, #64	; 0x40
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <Error_Handler+0x24>)
 800162c:	f000 fcb8 	bl	8001fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <Error_Handler+0x24>)
 8001636:	f000 fcb3 	bl	8001fa0 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 800163a:	2106      	movs	r1, #6
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <Error_Handler+0x28>)
 800163e:	f006 fd3b 	bl	80080b8 <CDC_Transmit_FS>
  while (1)
 8001642:	e7fe      	b.n	8001642 <Error_Handler+0x22>
 8001644:	40020800 	.word	0x40020800
 8001648:	0800aa50 	.word	0x0800aa50

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_I2C_MspInit+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12c      	bne.n	8001718 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_I2C_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_I2C_MspInit+0x88>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_I2C_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ec:	2304      	movs	r3, #4
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	480c      	ldr	r0, [pc, #48]	; (8001728 <HAL_I2C_MspInit+0x8c>)
 80016f8:	f000 fab8 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_I2C_MspInit+0x88>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_I2C_MspInit+0x88>)
 8001706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800170a:	6413      	str	r3, [r2, #64]	; 0x40
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_I2C_MspInit+0x88>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	; 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40005400 	.word	0x40005400
 8001724:	40023800 	.word	0x40023800
 8001728:	40020400 	.word	0x40020400

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_TIM_Base_MspInit+0x70>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d10e      	bne.n	800175c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_TIM_Base_MspInit+0x74>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <HAL_TIM_Base_MspInit+0x74>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_TIM_Base_MspInit+0x74>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800175a:	e01a      	b.n	8001792 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_TIM_Base_MspInit+0x78>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d115      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_TIM_Base_MspInit+0x74>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <HAL_TIM_Base_MspInit+0x74>)
 8001770:	f043 0320 	orr.w	r3, r3, #32
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_TIM_Base_MspInit+0x74>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0320 	and.w	r3, r3, #32
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2102      	movs	r1, #2
 8001786:	2037      	movs	r0, #55	; 0x37
 8001788:	f000 fa39 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800178c:	2037      	movs	r0, #55	; 0x37
 800178e:	f000 fa52 	bl	8001c36 <HAL_NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40001000 	.word	0x40001000
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40001400 	.word	0x40001400

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f8e6 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001800:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001804:	f000 fbe6 	bl	8001fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM7_IRQHandler+0x10>)
 8001812:	f003 f9ec 	bl	8004bee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200004a0 	.word	0x200004a0

08001820 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <OTG_FS_IRQHandler+0x10>)
 8001826:	f001 fcf0 	bl	800320a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200019b4 	.word	0x200019b4

08001834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <_sbrk+0x5c>)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_sbrk+0x60>)
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <_sbrk+0x64>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <_sbrk+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d207      	bcs.n	8001874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001864:	f007 f86a 	bl	800893c <__errno>
 8001868:	4602      	mov	r2, r0
 800186a:	230c      	movs	r3, #12
 800186c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e009      	b.n	8001888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <_sbrk+0x64>)
 8001884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20020000 	.word	0x20020000
 8001894:	00000400 	.word	0x00000400
 8001898:	20000390 	.word	0x20000390
 800189c:	20001dc0 	.word	0x20001dc0

080018a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <SystemInit+0x28>)
 80018a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018aa:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <SystemInit+0x28>)
 80018ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SystemInit+0x28>)
 80018b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ba:	609a      	str	r2, [r3, #8]
#endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018d2:	e003      	b.n	80018dc <LoopCopyDataInit>

080018d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018da:	3104      	adds	r1, #4

080018dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e4:	d3f6      	bcc.n	80018d4 <CopyDataInit>
  ldr  r2, =_sbss
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018e8:	e002      	b.n	80018f0 <LoopFillZerobss>

080018ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018ec:	f842 3b04 	str.w	r3, [r2], #4

080018f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f4:	d3f9      	bcc.n	80018ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018f6:	f7ff ffd3 	bl	80018a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f007 f825 	bl	8008948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fbd3 	bl	80010a8 <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001904:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001908:	0800ad28 	.word	0x0800ad28
  ldr  r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001910:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8001914:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8001918:	20001dc0 	.word	0x20001dc0

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <HAL_Init+0x40>)
 800192a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_Init+0x40>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_Init+0x40>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f94d 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fe7a 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f965 	bl	8001c52 <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f92d 	bl	8001bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008
 80019e8:	200004e0 	.word	0x200004e0

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200004e0 	.word	0x200004e0

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_Delay+0x40>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000008 	.word	0x20000008

08001a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db0b      	blt.n	8001ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <__NVIC_EnableIRQ+0x38>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	2001      	movs	r0, #1
 8001ace:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff29 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff3e 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff8e 	bl	8001b3c <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff31 	bl	8001aac <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffa2 	bl	8001ba4 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e16b      	b.n	8001f60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 815a 	bne.w	8001f5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d00b      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cba:	2b11      	cmp	r3, #17
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0xfc>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80b4 	beq.w	8001f5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <HAL_GPIO_Init+0x308>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a5e      	ldr	r2, [pc, #376]	; (8001f74 <HAL_GPIO_Init+0x308>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <HAL_GPIO_Init+0x308>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a5a      	ldr	r2, [pc, #360]	; (8001f78 <HAL_GPIO_Init+0x30c>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <HAL_GPIO_Init+0x310>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02b      	beq.n	8001e92 <HAL_GPIO_Init+0x226>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a50      	ldr	r2, [pc, #320]	; (8001f80 <HAL_GPIO_Init+0x314>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_Init+0x222>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <HAL_GPIO_Init+0x318>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_Init+0x21e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_GPIO_Init+0x31c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x21a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <HAL_GPIO_Init+0x320>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x216>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x212>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_GPIO_Init+0x328>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x20e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x32c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x20a>
 8001e72:	2307      	movs	r3, #7
 8001e74:	e00e      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e76:	2308      	movs	r3, #8
 8001e78:	e00c      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	e00a      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x228>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4934      	ldr	r1, [pc, #208]	; (8001f78 <HAL_GPIO_Init+0x30c>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f ae90 	bls.w	8001c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3724      	adds	r7, #36	; 0x24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40021c00 	.word	0x40021c00
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fa0c 	bl	8001410 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e11f      	b.n	8002256 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fb36 	bl	800169c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2224      	movs	r2, #36	; 0x24
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002068:	f002 fd3a 	bl	8004ae0 <HAL_RCC_GetPCLK1Freq>
 800206c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a7b      	ldr	r2, [pc, #492]	; (8002260 <HAL_I2C_Init+0x25c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d807      	bhi.n	8002088 <HAL_I2C_Init+0x84>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a7a      	ldr	r2, [pc, #488]	; (8002264 <HAL_I2C_Init+0x260>)
 800207c:	4293      	cmp	r3, r2
 800207e:	bf94      	ite	ls
 8002080:	2301      	movls	r3, #1
 8002082:	2300      	movhi	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e006      	b.n	8002096 <HAL_I2C_Init+0x92>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a77      	ldr	r2, [pc, #476]	; (8002268 <HAL_I2C_Init+0x264>)
 800208c:	4293      	cmp	r3, r2
 800208e:	bf94      	ite	ls
 8002090:	2301      	movls	r3, #1
 8002092:	2300      	movhi	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0db      	b.n	8002256 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a72      	ldr	r2, [pc, #456]	; (800226c <HAL_I2C_Init+0x268>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a64      	ldr	r2, [pc, #400]	; (8002260 <HAL_I2C_Init+0x25c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d802      	bhi.n	80020d8 <HAL_I2C_Init+0xd4>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3301      	adds	r3, #1
 80020d6:	e009      	b.n	80020ec <HAL_I2C_Init+0xe8>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_I2C_Init+0x26c>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	3301      	adds	r3, #1
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4956      	ldr	r1, [pc, #344]	; (8002260 <HAL_I2C_Init+0x25c>)
 8002108:	428b      	cmp	r3, r1
 800210a:	d80d      	bhi.n	8002128 <HAL_I2C_Init+0x124>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e59      	subs	r1, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fbb1 f3f3 	udiv	r3, r1, r3
 800211a:	3301      	adds	r3, #1
 800211c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002120:	2b04      	cmp	r3, #4
 8002122:	bf38      	it	cc
 8002124:	2304      	movcc	r3, #4
 8002126:	e04f      	b.n	80021c8 <HAL_I2C_Init+0x1c4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d111      	bne.n	8002154 <HAL_I2C_Init+0x150>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e58      	subs	r0, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	440b      	add	r3, r1
 800213e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002142:	3301      	adds	r3, #1
 8002144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e012      	b.n	800217a <HAL_I2C_Init+0x176>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e58      	subs	r0, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	0099      	lsls	r1, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_I2C_Init+0x17e>
 800217e:	2301      	movs	r3, #1
 8002180:	e022      	b.n	80021c8 <HAL_I2C_Init+0x1c4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10e      	bne.n	80021a8 <HAL_I2C_Init+0x1a4>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1e58      	subs	r0, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	440b      	add	r3, r1
 8002198:	fbb0 f3f3 	udiv	r3, r0, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a6:	e00f      	b.n	80021c8 <HAL_I2C_Init+0x1c4>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e58      	subs	r0, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	0099      	lsls	r1, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	6809      	ldr	r1, [r1, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6911      	ldr	r1, [r2, #16]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68d2      	ldr	r2, [r2, #12]
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	430b      	orrs	r3, r1
 800220a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	000186a0 	.word	0x000186a0
 8002264:	001e847f 	.word	0x001e847f
 8002268:	003d08ff 	.word	0x003d08ff
 800226c:	431bde83 	.word	0x431bde83
 8002270:	10624dd3 	.word	0x10624dd3

08002274 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	817b      	strh	r3, [r7, #10]
 8002286:	460b      	mov	r3, r1
 8002288:	813b      	strh	r3, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800228e:	f7ff fbad 	bl	80019ec <HAL_GetTick>
 8002292:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	f040 80d9 	bne.w	8002454 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2319      	movs	r3, #25
 80022a8:	2201      	movs	r2, #1
 80022aa:	496d      	ldr	r1, [pc, #436]	; (8002460 <HAL_I2C_Mem_Write+0x1ec>)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fc7f 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
 80022ba:	e0cc      	b.n	8002456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_I2C_Mem_Write+0x56>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0c5      	b.n	8002456 <HAL_I2C_Mem_Write+0x1e2>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d007      	beq.n	80022f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2221      	movs	r2, #33	; 0x21
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a3a      	ldr	r2, [r7, #32]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a4d      	ldr	r2, [pc, #308]	; (8002464 <HAL_I2C_Mem_Write+0x1f0>)
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002332:	88f8      	ldrh	r0, [r7, #6]
 8002334:	893a      	ldrh	r2, [r7, #8]
 8002336:	8979      	ldrh	r1, [r7, #10]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	4603      	mov	r3, r0
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fab6 	bl	80028b4 <I2C_RequestMemoryWrite>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d052      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e081      	b.n	8002456 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fd00 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b04      	cmp	r3, #4
 8002368:	d107      	bne.n	800237a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06b      	b.n	8002456 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d11b      	bne.n	80023f4 <HAL_I2C_Mem_Write+0x180>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d017      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1aa      	bne.n	8002352 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fcec 	bl	8002dde <I2C_WaitOnBTFFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b04      	cmp	r3, #4
 8002412:	d107      	bne.n	8002424 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e016      	b.n	8002456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	00100002 	.word	0x00100002
 8002464:	ffff0000 	.word	0xffff0000

08002468 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]
 800247a:	460b      	mov	r3, r1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002482:	f7ff fab3 	bl	80019ec <HAL_GetTick>
 8002486:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b20      	cmp	r3, #32
 8002492:	f040 8208 	bne.w	80028a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2319      	movs	r3, #25
 800249c:	2201      	movs	r2, #1
 800249e:	497b      	ldr	r1, [pc, #492]	; (800268c <HAL_I2C_Mem_Read+0x224>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fb85 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	e1fb      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Mem_Read+0x56>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e1f4      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d007      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2222      	movs	r2, #34	; 0x22
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_I2C_Mem_Read+0x228>)
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fa52 	bl	80029e0 <I2C_RequestMemoryRead>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1b0      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d113      	bne.n	8002576 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	623b      	str	r3, [r7, #32]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e184      	b.n	8002880 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b01      	cmp	r3, #1
 800257c:	d11b      	bne.n	80025b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e164      	b.n	8002880 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d11b      	bne.n	80025f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	e144      	b.n	8002880 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800260c:	e138      	b.n	8002880 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	2b03      	cmp	r3, #3
 8002614:	f200 80f1 	bhi.w	80027fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	2b01      	cmp	r3, #1
 800261e:	d123      	bne.n	8002668 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fc1b 	bl	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e139      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002666:	e10b      	b.n	8002880 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	2b02      	cmp	r3, #2
 800266e:	d14e      	bne.n	800270e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002676:	2200      	movs	r2, #0
 8002678:	4906      	ldr	r1, [pc, #24]	; (8002694 <HAL_I2C_Mem_Read+0x22c>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fa98 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e10e      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
 800268a:	bf00      	nop
 800268c:	00100002 	.word	0x00100002
 8002690:	ffff0000 	.word	0xffff0000
 8002694:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800270c:	e0b8      	b.n	8002880 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	2200      	movs	r2, #0
 8002716:	4966      	ldr	r1, [pc, #408]	; (80028b0 <HAL_I2C_Mem_Read+0x448>)
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fa49 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0bf      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	2200      	movs	r2, #0
 8002772:	494f      	ldr	r1, [pc, #316]	; (80028b0 <HAL_I2C_Mem_Read+0x448>)
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fa1b 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e091      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027f8:	e042      	b.n	8002880 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fb2e 	bl	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e04c      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b04      	cmp	r3, #4
 800284c:	d118      	bne.n	8002880 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	f47f aec2 	bne.w	800260e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	00010004 	.word	0x00010004

080028b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	460b      	mov	r3, r1
 80028c8:	813b      	strh	r3, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f960 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002904:	d103      	bne.n	800290e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e05f      	b.n	80029d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002920:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	492d      	ldr	r1, [pc, #180]	; (80029dc <I2C_RequestMemoryWrite+0x128>)
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f998 	bl	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e04c      	b.n	80029d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002950:	6a39      	ldr	r1, [r7, #32]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fa02 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b04      	cmp	r3, #4
 8002964:	d107      	bne.n	8002976 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002974:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e02b      	b.n	80029d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002980:	893b      	ldrh	r3, [r7, #8]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]
 800298a:	e021      	b.n	80029d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800298c:	893b      	ldrh	r3, [r7, #8]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	b29b      	uxth	r3, r3
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	6a39      	ldr	r1, [r7, #32]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f9dc 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00d      	beq.n	80029c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d107      	bne.n	80029c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e005      	b.n	80029d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c6:	893b      	ldrh	r3, [r7, #8]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	00010002 	.word	0x00010002

080029e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	460b      	mov	r3, r1
 80029f4:	813b      	strh	r3, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f8c2 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a40:	d103      	bne.n	8002a4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0aa      	b.n	8002ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a4e:	897b      	ldrh	r3, [r7, #10]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	6a3a      	ldr	r2, [r7, #32]
 8002a62:	4952      	ldr	r1, [pc, #328]	; (8002bac <I2C_RequestMemoryRead+0x1cc>)
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f8fa 	bl	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e097      	b.n	8002ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8c:	6a39      	ldr	r1, [r7, #32]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f964 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d107      	bne.n	8002ab2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e076      	b.n	8002ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002abc:	893b      	ldrh	r3, [r7, #8]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	e021      	b.n	8002b0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac8:	893b      	ldrh	r3, [r7, #8]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad8:	6a39      	ldr	r1, [r7, #32]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f93e 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d107      	bne.n	8002afe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e050      	b.n	8002ba4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b02:	893b      	ldrh	r3, [r7, #8]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	6a39      	ldr	r1, [r7, #32]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f923 	bl	8002d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d107      	bne.n	8002b34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e035      	b.n	8002ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f82b 	bl	8002bb0 <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6e:	d103      	bne.n	8002b78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e013      	b.n	8002ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b7c:	897b      	ldrh	r3, [r7, #10]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	6a3a      	ldr	r2, [r7, #32]
 8002b90:	4906      	ldr	r1, [pc, #24]	; (8002bac <I2C_RequestMemoryRead+0x1cc>)
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f863 	bl	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	00010002 	.word	0x00010002

08002bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc0:	e025      	b.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d021      	beq.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7fe ff0f 	bl	80019ec <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d116      	bne.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e023      	b.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10d      	bne.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4013      	ands	r3, r2
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	e00c      	b.n	8002c4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d0b6      	beq.n	8002bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c6c:	e051      	b.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d123      	bne.n	8002cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f043 0204 	orr.w	r2, r3, #4
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e046      	b.n	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d021      	beq.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fe fe8d 	bl	80019ec <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d116      	bne.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e020      	b.n	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10c      	bne.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4013      	ands	r3, r2
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e00b      	b.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d18d      	bne.n	8002c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d68:	e02d      	b.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f8ce 	bl	8002f0c <I2C_IsAcknowledgeFailed>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e02d      	b.n	8002dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d021      	beq.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7fe fe33 	bl	80019ec <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e007      	b.n	8002dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d1ca      	bne.n	8002d6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dea:	e02d      	b.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f88d 	bl	8002f0c <I2C_IsAcknowledgeFailed>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e02d      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d021      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fe fdf2 	bl	80019ec <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d1ca      	bne.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e6c:	e042      	b.n	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d119      	bne.n	8002eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0210 	mvn.w	r2, #16
 8002e84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e029      	b.n	8002f04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7fe fd9c 	bl	80019ec <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d302      	bcc.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d116      	bne.n	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d1b5      	bne.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d11b      	bne.n	8002f5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6c:	b08f      	sub	sp, #60	; 0x3c
 8002f6e:	af0a      	add	r7, sp, #40	; 0x28
 8002f70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e10f      	b.n	800319c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f005 f9d4 	bl	8008344 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f002 f98d 	bl	80052da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	687e      	ldr	r6, [r7, #4]
 8002fc8:	466d      	mov	r5, sp
 8002fca:	f106 0410 	add.w	r4, r6, #16
 8002fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fda:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fde:	1d33      	adds	r3, r6, #4
 8002fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe2:	6838      	ldr	r0, [r7, #0]
 8002fe4:	f002 f864 	bl	80050b0 <USB_CoreInit>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0d0      	b.n	800319c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f002 f97b 	bl	80052fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	e04a      	b.n	80030a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	333d      	adds	r3, #61	; 0x3d
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	333c      	adds	r3, #60	; 0x3c
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	b298      	uxth	r0, r3
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3342      	adds	r3, #66	; 0x42
 8003048:	4602      	mov	r2, r0
 800304a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	333f      	adds	r3, #63	; 0x3f
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3344      	adds	r3, #68	; 0x44
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3348      	adds	r3, #72	; 0x48
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	3350      	adds	r3, #80	; 0x50
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	3301      	adds	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3af      	bcc.n	800300c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e044      	b.n	800313c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	3301      	adds	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d3b5      	bcc.n	80030b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	687e      	ldr	r6, [r7, #4]
 800314e:	466d      	mov	r5, sp
 8003150:	f106 0410 	add.w	r4, r6, #16
 8003154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003160:	e885 0003 	stmia.w	r5, {r0, r1}
 8003164:	1d33      	adds	r3, r6, #4
 8003166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003168:	6838      	ldr	r0, [r7, #0]
 800316a:	f002 f8f1 	bl	8005350 <USB_DevInit>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e00d      	b.n	800319c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f003 f939 	bl	800640c <USB_DevDisconnect>

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_PCD_Start+0x1c>
 80031bc:	2302      	movs	r3, #2
 80031be:	e020      	b.n	8003202 <HAL_PCD_Start+0x5e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d109      	bne.n	80031e4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d005      	beq.n	80031e4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f002 f865 	bl	80052b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 f8e9 	bl	80063ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800320a:	b590      	push	{r4, r7, lr}
 800320c:	b08d      	sub	sp, #52	; 0x34
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f003 f9a7 	bl	8006574 <USB_GetMode>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	f040 839d 	bne.w	8003968 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f003 f90b 	bl	800644e <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8393 	beq.w	8003966 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f003 f902 	bl	800644e <USB_ReadInterrupts>
 800324a:	4603      	mov	r3, r0
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b02      	cmp	r3, #2
 8003252:	d107      	bne.n	8003264 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f002 0202 	and.w	r2, r2, #2
 8003262:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f003 f8f0 	bl	800644e <USB_ReadInterrupts>
 800326e:	4603      	mov	r3, r0
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d161      	bne.n	800333c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0210 	bic.w	r2, r2, #16
 8003286:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	0c5b      	lsrs	r3, r3, #17
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d124      	bne.n	80032fe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d035      	beq.n	800332c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6a38      	ldr	r0, [r7, #32]
 80032d4:	f002 ff56 	bl	8006184 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e4:	441a      	add	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f6:	441a      	add	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	619a      	str	r2, [r3, #24]
 80032fc:	e016      	b.n	800332c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	0c5b      	lsrs	r3, r3, #17
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	2b06      	cmp	r3, #6
 8003308:	d110      	bne.n	800332c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003310:	2208      	movs	r2, #8
 8003312:	4619      	mov	r1, r3
 8003314:	6a38      	ldr	r0, [r7, #32]
 8003316:	f002 ff35 	bl	8006184 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003326:	441a      	add	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0210 	orr.w	r2, r2, #16
 800333a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 f884 	bl	800644e <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003350:	d16e      	bne.n	8003430 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f003 f88a 	bl	8006474 <USB_ReadDevAllOutEpInterrupt>
 8003360:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003362:	e062      	b.n	800342a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d057      	beq.n	800341e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f003 f8af 	bl	80064dc <USB_ReadDevOutEPInterrupt>
 800337e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003396:	461a      	mov	r2, r3
 8003398:	2301      	movs	r3, #1
 800339a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800339c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fdb0 	bl	8003f04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ba:	461a      	mov	r2, r3
 80033bc:	2308      	movs	r3, #8
 80033be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 feaa 	bl	800411c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033de:	461a      	mov	r2, r3
 80033e0:	2310      	movs	r3, #16
 80033e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	2320      	movs	r3, #32
 80033fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	3301      	adds	r3, #1
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	d199      	bne.n	8003364 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 f80a 	bl	800644e <USB_ReadInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003444:	f040 80c0 	bne.w	80035c8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f003 f82b 	bl	80064a8 <USB_ReadDevAllInEpInterrupt>
 8003452:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003458:	e0b2      	b.n	80035c0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80a7 	beq.w	80035b4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f003 f851 	bl	8006518 <USB_ReadDevInEPInterrupt>
 8003476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d057      	beq.n	8003532 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	2201      	movs	r2, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43db      	mvns	r3, r3
 800349c:	69f9      	ldr	r1, [r7, #28]
 800349e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a2:	4013      	ands	r3, r2
 80034a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b2:	461a      	mov	r2, r3
 80034b4:	2301      	movs	r3, #1
 80034b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d132      	bne.n	8003526 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3348      	adds	r3, #72	; 0x48
 80034d0:	6819      	ldr	r1, [r3, #0]
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4403      	add	r3, r0
 80034e0:	3344      	adds	r3, #68	; 0x44
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4419      	add	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4403      	add	r3, r0
 80034f4:	3348      	adds	r3, #72	; 0x48
 80034f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d113      	bne.n	8003526 <HAL_PCD_IRQHandler+0x31c>
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3350      	adds	r3, #80	; 0x50
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d108      	bne.n	8003526 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800351e:	461a      	mov	r2, r3
 8003520:	2101      	movs	r1, #1
 8003522:	f003 f859 	bl	80065d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f004 ff8a 	bl	8008446 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003548:	461a      	mov	r2, r3
 800354a:	2308      	movs	r3, #8
 800354c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003564:	461a      	mov	r2, r3
 8003566:	2310      	movs	r3, #16
 8003568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	461a      	mov	r2, r3
 8003582:	2340      	movs	r3, #64	; 0x40
 8003584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	461a      	mov	r2, r3
 800359e:	2302      	movs	r3, #2
 80035a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fc1b 	bl	8003dea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	3301      	adds	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f47f af49 	bne.w	800345a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 ff3e 	bl	800644e <USB_ReadInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035dc:	d122      	bne.n	8003624 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d108      	bne.n	800360e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003604:	2100      	movs	r1, #0
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fe26 	bl	8004258 <HAL_PCDEx_LPM_Callback>
 800360c:	e002      	b.n	8003614 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f004 ff90 	bl	8008534 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f002 ff10 	bl	800644e <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003638:	d112      	bne.n	8003660 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f004 ff4c 	bl	80084e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800365e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f002 fef2 	bl	800644e <USB_ReadInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003674:	f040 80c7 	bne.w	8003806 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2110      	movs	r1, #16
 8003692:	4618      	mov	r0, r3
 8003694:	f001 ffc0 	bl	8005618 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003698:	2300      	movs	r3, #0
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369c:	e056      	b.n	800374c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036aa:	461a      	mov	r2, r3
 80036ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c2:	0151      	lsls	r1, r2, #5
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	440a      	add	r2, r1
 80036c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036d0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e2:	0151      	lsls	r1, r2, #5
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	440a      	add	r2, r1
 80036e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	461a      	mov	r2, r3
 8003700:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003704:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003716:	0151      	lsls	r1, r2, #5
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	440a      	add	r2, r1
 800371c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003720:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003724:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003740:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003744:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	3301      	adds	r3, #1
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003752:	429a      	cmp	r2, r3
 8003754:	d3a3      	bcc.n	800369e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003764:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003768:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003782:	f043 030b 	orr.w	r3, r3, #11
 8003786:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003798:	f043 030b 	orr.w	r3, r3, #11
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	e015      	b.n	80037cc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c6:	f043 030b 	orr.w	r3, r3, #11
 80037ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037f0:	461a      	mov	r2, r3
 80037f2:	f002 fef1 	bl	80065d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f002 fe1f 	bl	800644e <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381a:	d124      	bne.n	8003866 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f002 feb5 	bl	8006590 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f001 ff55 	bl	80056da <USB_GetDevSpeed>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681c      	ldr	r4, [r3, #0]
 800383c:	f001 f944 	bl	8004ac8 <HAL_RCC_GetHCLKFreq>
 8003840:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	4620      	mov	r0, r4
 800384c:	f001 fc92 	bl	8005174 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f004 fe20 	bl	8008496 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003864:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f002 fdef 	bl	800644e <USB_ReadInterrupts>
 8003870:	4603      	mov	r3, r0
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b08      	cmp	r3, #8
 8003878:	d10a      	bne.n	8003890 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f004 fdfd 	bl	800847a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f002 0208 	and.w	r2, r2, #8
 800388e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f002 fdda 	bl	800644e <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a4:	d10f      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f004 fe5f 	bl	8008574 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f002 fdbf 	bl	800644e <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038da:	d10f      	bne.n	80038fc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f004 fe32 	bl	8008550 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fda4 	bl	800644e <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d10a      	bne.n	8003928 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f004 fe40 	bl	8008598 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f002 fd8e 	bl	800644e <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b04      	cmp	r3, #4
 800393a:	d115      	bne.n	8003968 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f004 fe30 	bl	80085b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	e000      	b.n	8003968 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003966:	bf00      	nop
    }
  }
}
 8003968:	3734      	adds	r7, #52	; 0x34
 800396a:	46bd      	mov	sp, r7
 800396c:	bd90      	pop	{r4, r7, pc}

0800396e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_PCD_SetAddress+0x1a>
 8003984:	2302      	movs	r3, #2
 8003986:	e013      	b.n	80039b0 <HAL_PCD_SetAddress+0x42>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f002 fcec 	bl	800637e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	70fb      	strb	r3, [r7, #3]
 80039ca:	460b      	mov	r3, r1
 80039cc:	803b      	strh	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da0f      	bge.n	80039fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	3338      	adds	r3, #56	; 0x38
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	3304      	adds	r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	705a      	strb	r2, [r3, #1]
 80039fc:	e00f      	b.n	8003a1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 020f 	and.w	r2, r3, #15
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a2a:	883a      	ldrh	r2, [r7, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	78ba      	ldrb	r2, [r7, #2]
 8003a34:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a48:	78bb      	ldrb	r3, [r7, #2]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d102      	bne.n	8003a54 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_PCD_EP_Open+0xaa>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e00e      	b.n	8003a80 <HAL_PCD_EP_Open+0xc8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68f9      	ldr	r1, [r7, #12]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 fe57 	bl	8005724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da0f      	bge.n	8003abc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 020f 	and.w	r2, r3, #15
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	3338      	adds	r3, #56	; 0x38
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	705a      	strb	r2, [r3, #1]
 8003aba:	e00f      	b.n	8003adc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 020f 	and.w	r2, r3, #15
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_PCD_EP_Close+0x6e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e00e      	b.n	8003b14 <HAL_PCD_EP_Close+0x8c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fe95 	bl	8005834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b78:	7afb      	ldrb	r3, [r7, #11]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	f002 f970 	bl	8005e74 <USB_EP0StartXfer>
 8003b94:	e008      	b.n	8003ba8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6979      	ldr	r1, [r7, #20]
 8003ba4:	f001 ff22 	bl	80059ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bd4:	681b      	ldr	r3, [r3, #0]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3338      	adds	r3, #56	; 0x38
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d102      	bne.n	8003c3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6979      	ldr	r1, [r7, #20]
 8003c54:	f002 f90e 	bl	8005e74 <USB_EP0StartXfer>
 8003c58:	e008      	b.n	8003c6c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	f001 fec0 	bl	80059ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d901      	bls.n	8003c94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e050      	b.n	8003d36 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da0f      	bge.n	8003cbc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	3338      	adds	r3, #56	; 0x38
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	705a      	strb	r2, [r3, #1]
 8003cba:	e00d      	b.n	8003cd8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	3304      	adds	r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_PCD_EP_SetStall+0x82>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e01e      	b.n	8003d36 <HAL_PCD_EP_SetStall+0xc0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f002 fa65 	bl	80061d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	b2d9      	uxtb	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d26:	461a      	mov	r2, r3
 8003d28:	f002 fc56 	bl	80065d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d901      	bls.n	8003d5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e042      	b.n	8003de2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da0f      	bge.n	8003d84 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	f003 020f 	and.w	r2, r3, #15
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	3338      	adds	r3, #56	; 0x38
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	3304      	adds	r3, #4
 8003d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	705a      	strb	r2, [r3, #1]
 8003d82:	e00f      	b.n	8003da4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 020f 	and.w	r2, r3, #15
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_PCD_EP_ClrStall+0x86>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e00e      	b.n	8003de2 <HAL_PCD_EP_ClrStall+0xa4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68f9      	ldr	r1, [r7, #12]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f002 fa6d 	bl	80062b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b08a      	sub	sp, #40	; 0x28
 8003dee:	af02      	add	r7, sp, #8
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	3338      	adds	r3, #56	; 0x38
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3304      	adds	r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d901      	bls.n	8003e22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06c      	b.n	8003efc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d902      	bls.n	8003e3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3303      	adds	r3, #3
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e46:	e02b      	b.n	8003ea0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d902      	bls.n	8003e64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	3303      	adds	r3, #3
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68d9      	ldr	r1, [r3, #12]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4603      	mov	r3, r0
 8003e82:	6978      	ldr	r0, [r7, #20]
 8003e84:	f002 f949 	bl	800611a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	441a      	add	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	441a      	add	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d809      	bhi.n	8003eca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d203      	bcs.n	8003eca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1be      	bne.n	8003e48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d811      	bhi.n	8003efa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	2201      	movs	r2, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	6939      	ldr	r1, [r7, #16]
 8003ef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	333c      	adds	r3, #60	; 0x3c
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 80a0 	bne.w	800407c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d015      	beq.n	8003f72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a72      	ldr	r2, [pc, #456]	; (8004114 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	f240 80dd 	bls.w	800410a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80d7 	beq.w	800410a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	e0cb      	b.n	800410a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	6093      	str	r3, [r2, #8]
 8003f8e:	e0bc      	b.n	800410a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80b7 	bne.w	800410a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a5d      	ldr	r2, [pc, #372]	; (8004114 <PCD_EP_OutXfrComplete_int+0x210>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d90f      	bls.n	8003fc4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc0:	6093      	str	r3, [r2, #8]
 8003fc2:	e0a2      	b.n	800410a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fd6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	0159      	lsls	r1, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	440b      	add	r3, r1
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003fea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4403      	add	r3, r0
 8003ffa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ffe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4403      	add	r3, r0
 8004022:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4419      	add	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4403      	add	r3, r0
 8004038:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800403c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d114      	bne.n	800406e <PCD_EP_OutXfrComplete_int+0x16a>
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d108      	bne.n	800406e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004066:	461a      	mov	r2, r3
 8004068:	2101      	movs	r1, #1
 800406a:	f002 fab5 	bl	80065d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f004 f9cb 	bl	8008410 <HAL_PCD_DataOutStageCallback>
 800407a:	e046      	b.n	800410a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a26      	ldr	r2, [pc, #152]	; (8004118 <PCD_EP_OutXfrComplete_int+0x214>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d124      	bne.n	80040ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a0:	6093      	str	r3, [r2, #8]
 80040a2:	e032      	b.n	800410a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	2320      	movs	r3, #32
 80040be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f004 f9a2 	bl	8008410 <HAL_PCD_DataOutStageCallback>
 80040cc:	e01d      	b.n	800410a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d114      	bne.n	80040fe <PCD_EP_OutXfrComplete_int+0x1fa>
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d108      	bne.n	80040fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040f6:	461a      	mov	r2, r3
 80040f8:	2100      	movs	r1, #0
 80040fa:	f002 fa6d 	bl	80065d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	4619      	mov	r1, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f004 f983 	bl	8008410 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	4f54300a 	.word	0x4f54300a
 8004118:	4f54310a 	.word	0x4f54310a

0800411c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	333c      	adds	r3, #60	; 0x3c
 8004134:	3304      	adds	r3, #4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d90e      	bls.n	8004170 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	461a      	mov	r2, r3
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f004 f93b 	bl	80083ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d90c      	bls.n	8004198 <PCD_EP_OutSetupPacket_int+0x7c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d108      	bne.n	8004198 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004190:	461a      	mov	r2, r3
 8004192:	2101      	movs	r1, #1
 8004194:	f002 fa20 	bl	80065d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	4f54300a 	.word	0x4f54300a

080041a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
 80041b4:	4613      	mov	r3, r2
 80041b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d107      	bne.n	80041d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041c6:	883b      	ldrh	r3, [r7, #0]
 80041c8:	0419      	lsls	r1, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
 80041d4:	e028      	b.n	8004228 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	4413      	add	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	e00d      	b.n	8004206 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	3340      	adds	r3, #64	; 0x40
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4413      	add	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3301      	adds	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	3b01      	subs	r3, #1
 800420c:	429a      	cmp	r2, r3
 800420e:	d3ec      	bcc.n	80041ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004210:	883b      	ldrh	r3, [r7, #0]
 8004212:	0418      	lsls	r0, r3, #16
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6819      	ldr	r1, [r3, #0]
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	3b01      	subs	r3, #1
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4302      	orrs	r2, r0
 8004220:	3340      	adds	r3, #64	; 0x40
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e25b      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d075      	beq.n	800437a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800428e:	4ba3      	ldr	r3, [pc, #652]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b04      	cmp	r3, #4
 8004298:	d00c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429a:	4ba0      	ldr	r3, [pc, #640]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d112      	bne.n	80042cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b9d      	ldr	r3, [pc, #628]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b2:	d10b      	bne.n	80042cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	4b99      	ldr	r3, [pc, #612]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05b      	beq.n	8004378 <HAL_RCC_OscConfig+0x108>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d157      	bne.n	8004378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e236      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d106      	bne.n	80042e4 <HAL_RCC_OscConfig+0x74>
 80042d6:	4b91      	ldr	r3, [pc, #580]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a90      	ldr	r2, [pc, #576]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e01d      	b.n	8004320 <HAL_RCC_OscConfig+0xb0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x98>
 80042ee:	4b8b      	ldr	r3, [pc, #556]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a8a      	ldr	r2, [pc, #552]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b88      	ldr	r3, [pc, #544]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a87      	ldr	r2, [pc, #540]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0xb0>
 8004308:	4b84      	ldr	r3, [pc, #528]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a83      	ldr	r2, [pc, #524]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800430e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a80      	ldr	r2, [pc, #512]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800431a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fd fb60 	bl	80019ec <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004330:	f7fd fb5c 	bl	80019ec <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1fb      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b76      	ldr	r3, [pc, #472]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xc0>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fd fb4c 	bl	80019ec <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd fb48 	bl	80019ec <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1e7      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0xe8>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004386:	4b65      	ldr	r3, [pc, #404]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004392:	4b62      	ldr	r3, [pc, #392]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439a:	2b08      	cmp	r3, #8
 800439c:	d11c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b5f      	ldr	r3, [pc, #380]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	4b5c      	ldr	r3, [pc, #368]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x152>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e1bb      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	4b56      	ldr	r3, [pc, #344]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4952      	ldr	r1, [pc, #328]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d6:	e03a      	b.n	800444e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e0:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <HAL_RCC_OscConfig+0x2b0>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fd fb01 	bl	80019ec <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ee:	f7fd fafd 	bl	80019ec <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e19c      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	4b46      	ldr	r3, [pc, #280]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440c:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4940      	ldr	r1, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]
 8004420:	e015      	b.n	800444e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004422:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <HAL_RCC_OscConfig+0x2b0>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd fae0 	bl	80019ec <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004430:	f7fd fadc 	bl	80019ec <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e17b      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d030      	beq.n	80044bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d016      	beq.n	8004490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004462:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_RCC_OscConfig+0x2b4>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fd fac0 	bl	80019ec <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004470:	f7fd fabc 	bl	80019ec <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e15b      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	4b26      	ldr	r3, [pc, #152]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x200>
 800448e:	e015      	b.n	80044bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_OscConfig+0x2b4>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004496:	f7fd faa9 	bl	80019ec <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800449e:	f7fd faa5 	bl	80019ec <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e144      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a0 	beq.w	800460a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	4a0e      	ldr	r2, [pc, #56]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_OscConfig+0x2b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d121      	bne.n	800454a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004506:	4b08      	ldr	r3, [pc, #32]	; (8004528 <HAL_RCC_OscConfig+0x2b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a07      	ldr	r2, [pc, #28]	; (8004528 <HAL_RCC_OscConfig+0x2b8>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fd fa6b 	bl	80019ec <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	e011      	b.n	800453e <HAL_RCC_OscConfig+0x2ce>
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	42470000 	.word	0x42470000
 8004524:	42470e80 	.word	0x42470e80
 8004528:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452c:	f7fd fa5e 	bl	80019ec <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0fd      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b81      	ldr	r3, [pc, #516]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d106      	bne.n	8004560 <HAL_RCC_OscConfig+0x2f0>
 8004552:	4b7d      	ldr	r3, [pc, #500]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a7c      	ldr	r2, [pc, #496]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
 800455e:	e01c      	b.n	800459a <HAL_RCC_OscConfig+0x32a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_OscConfig+0x312>
 8004568:	4b77      	ldr	r3, [pc, #476]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a76      	ldr	r2, [pc, #472]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800456e:	f043 0304 	orr.w	r3, r3, #4
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	4b74      	ldr	r3, [pc, #464]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	4a73      	ldr	r2, [pc, #460]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6713      	str	r3, [r2, #112]	; 0x70
 8004580:	e00b      	b.n	800459a <HAL_RCC_OscConfig+0x32a>
 8004582:	4b71      	ldr	r3, [pc, #452]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a70      	ldr	r2, [pc, #448]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
 800458e:	4b6e      	ldr	r3, [pc, #440]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a6d      	ldr	r2, [pc, #436]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a2:	f7fd fa23 	bl	80019ec <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fd fa1f 	bl	80019ec <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0bc      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	4b61      	ldr	r3, [pc, #388]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RCC_OscConfig+0x33a>
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fd fa0d 	bl	80019ec <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fd fa09 	bl	80019ec <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0a6      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	4b56      	ldr	r3, [pc, #344]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b52      	ldr	r3, [pc, #328]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	4a51      	ldr	r2, [pc, #324]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8092 	beq.w	8004738 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004614:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d05c      	beq.n	80046da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d141      	bne.n	80046ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b48      	ldr	r3, [pc, #288]	; (800474c <HAL_RCC_OscConfig+0x4dc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fd f9dd 	bl	80019ec <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004636:	f7fd f9d9 	bl	80019ec <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e078      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004648:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	019b      	lsls	r3, r3, #6
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	061b      	lsls	r3, r3, #24
 8004678:	4933      	ldr	r1, [pc, #204]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800467a:	4313      	orrs	r3, r2
 800467c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467e:	4b33      	ldr	r3, [pc, #204]	; (800474c <HAL_RCC_OscConfig+0x4dc>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd f9b2 	bl	80019ec <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468c:	f7fd f9ae 	bl	80019ec <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04d      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x41c>
 80046aa:	e045      	b.n	8004738 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_OscConfig+0x4dc>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fd f99b 	bl	80019ec <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fd f997 	bl	80019ec <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e036      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x44a>
 80046d8:	e02e      	b.n	8004738 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e029      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d11c      	bne.n	8004734 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d115      	bne.n	8004734 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800470e:	4013      	ands	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004714:	4293      	cmp	r3, r2
 8004716:	d10d      	bne.n	8004734 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d106      	bne.n	8004734 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40007000 	.word	0x40007000
 8004748:	40023800 	.word	0x40023800
 800474c:	42470060 	.word	0x42470060

08004750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0cc      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b68      	ldr	r3, [pc, #416]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d90c      	bls.n	800478c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b65      	ldr	r3, [pc, #404]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477a:	4b63      	ldr	r3, [pc, #396]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0b8      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d020      	beq.n	80047da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a4:	4b59      	ldr	r3, [pc, #356]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4a58      	ldr	r2, [pc, #352]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047bc:	4b53      	ldr	r3, [pc, #332]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a52      	ldr	r2, [pc, #328]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c8:	4b50      	ldr	r3, [pc, #320]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	494d      	ldr	r1, [pc, #308]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d044      	beq.n	8004870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b47      	ldr	r3, [pc, #284]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d119      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e07f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d003      	beq.n	800480e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480a:	2b03      	cmp	r3, #3
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	4b3f      	ldr	r3, [pc, #252]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e06f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481e:	4b3b      	ldr	r3, [pc, #236]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e067      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482e:	4b37      	ldr	r3, [pc, #220]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4934      	ldr	r1, [pc, #208]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004840:	f7fd f8d4 	bl	80019ec <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fd f8d0 	bl	80019ec <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e04f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	4b2b      	ldr	r3, [pc, #172]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 020c 	and.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	429a      	cmp	r2, r3
 800486e:	d1eb      	bne.n	8004848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004870:	4b25      	ldr	r3, [pc, #148]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d20c      	bcs.n	8004898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b22      	ldr	r3, [pc, #136]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b20      	ldr	r3, [pc, #128]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e032      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4916      	ldr	r1, [pc, #88]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c2:	4b12      	ldr	r3, [pc, #72]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	490e      	ldr	r1, [pc, #56]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048d6:	f000 f821 	bl	800491c <HAL_RCC_GetSysClockFreq>
 80048da:	4601      	mov	r1, r0
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 80048e8:	5cd3      	ldrb	r3, [r2, r3]
 80048ea:	fa21 f303 	lsr.w	r3, r1, r3
 80048ee:	4a09      	ldr	r2, [pc, #36]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_RCC_ClockConfig+0x1c8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fd f834 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023c00 	.word	0x40023c00
 800490c:	40023800 	.word	0x40023800
 8004910:	0800aaa0 	.word	0x0800aaa0
 8004914:	20000000 	.word	0x20000000
 8004918:	20000004 	.word	0x20000004

0800491c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800491c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	2300      	movs	r3, #0
 800492c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004932:	4b63      	ldr	r3, [pc, #396]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b04      	cmp	r3, #4
 800493c:	d007      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x32>
 800493e:	2b08      	cmp	r3, #8
 8004940:	d008      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x38>
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 80b4 	bne.w	8004ab0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b5e      	ldr	r3, [pc, #376]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800494a:	60bb      	str	r3, [r7, #8]
       break;
 800494c:	e0b3      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494e:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004950:	60bb      	str	r3, [r7, #8]
      break;
 8004952:	e0b0      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004954:	4b5a      	ldr	r3, [pc, #360]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800495c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800495e:	4b58      	ldr	r3, [pc, #352]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04a      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496a:	4b55      	ldr	r3, [pc, #340]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	099b      	lsrs	r3, r3, #6
 8004970:	f04f 0400 	mov.w	r4, #0
 8004974:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	ea03 0501 	and.w	r5, r3, r1
 8004980:	ea04 0602 	and.w	r6, r4, r2
 8004984:	4629      	mov	r1, r5
 8004986:	4632      	mov	r2, r6
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	f04f 0400 	mov.w	r4, #0
 8004990:	0154      	lsls	r4, r2, #5
 8004992:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004996:	014b      	lsls	r3, r1, #5
 8004998:	4619      	mov	r1, r3
 800499a:	4622      	mov	r2, r4
 800499c:	1b49      	subs	r1, r1, r5
 800499e:	eb62 0206 	sbc.w	r2, r2, r6
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	f04f 0400 	mov.w	r4, #0
 80049aa:	0194      	lsls	r4, r2, #6
 80049ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049b0:	018b      	lsls	r3, r1, #6
 80049b2:	1a5b      	subs	r3, r3, r1
 80049b4:	eb64 0402 	sbc.w	r4, r4, r2
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	00e2      	lsls	r2, r4, #3
 80049c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049c6:	00d9      	lsls	r1, r3, #3
 80049c8:	460b      	mov	r3, r1
 80049ca:	4614      	mov	r4, r2
 80049cc:	195b      	adds	r3, r3, r5
 80049ce:	eb44 0406 	adc.w	r4, r4, r6
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	02a2      	lsls	r2, r4, #10
 80049dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049e0:	0299      	lsls	r1, r3, #10
 80049e2:	460b      	mov	r3, r1
 80049e4:	4614      	mov	r4, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	4621      	mov	r1, r4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f04f 0400 	mov.w	r4, #0
 80049f0:	461a      	mov	r2, r3
 80049f2:	4623      	mov	r3, r4
 80049f4:	f7fc f8d8 	bl	8000ba8 <__aeabi_uldivmod>
 80049f8:	4603      	mov	r3, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e049      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a00:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	099b      	lsrs	r3, r3, #6
 8004a06:	f04f 0400 	mov.w	r4, #0
 8004a0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	ea03 0501 	and.w	r5, r3, r1
 8004a16:	ea04 0602 	and.w	r6, r4, r2
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	4632      	mov	r2, r6
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	f04f 0400 	mov.w	r4, #0
 8004a26:	0154      	lsls	r4, r2, #5
 8004a28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a2c:	014b      	lsls	r3, r1, #5
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4622      	mov	r2, r4
 8004a32:	1b49      	subs	r1, r1, r5
 8004a34:	eb62 0206 	sbc.w	r2, r2, r6
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	f04f 0400 	mov.w	r4, #0
 8004a40:	0194      	lsls	r4, r2, #6
 8004a42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a46:	018b      	lsls	r3, r1, #6
 8004a48:	1a5b      	subs	r3, r3, r1
 8004a4a:	eb64 0402 	sbc.w	r4, r4, r2
 8004a4e:	f04f 0100 	mov.w	r1, #0
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	00e2      	lsls	r2, r4, #3
 8004a58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a5c:	00d9      	lsls	r1, r3, #3
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4614      	mov	r4, r2
 8004a62:	195b      	adds	r3, r3, r5
 8004a64:	eb44 0406 	adc.w	r4, r4, r6
 8004a68:	f04f 0100 	mov.w	r1, #0
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	02a2      	lsls	r2, r4, #10
 8004a72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a76:	0299      	lsls	r1, r3, #10
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4614      	mov	r4, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	4621      	mov	r1, r4
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f04f 0400 	mov.w	r4, #0
 8004a86:	461a      	mov	r2, r3
 8004a88:	4623      	mov	r3, r4
 8004a8a:	f7fc f88d 	bl	8000ba8 <__aeabi_uldivmod>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	460c      	mov	r4, r1
 8004a92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	60bb      	str	r3, [r7, #8]
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ab2:	60bb      	str	r3, [r7, #8]
      break;
 8004ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	00f42400 	.word	0x00f42400

08004ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004acc:	4b03      	ldr	r3, [pc, #12]	; (8004adc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000000 	.word	0x20000000

08004ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae4:	f7ff fff0 	bl	8004ac8 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4601      	mov	r1, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	0a9b      	lsrs	r3, r3, #10
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4a03      	ldr	r2, [pc, #12]	; (8004b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af6:	5cd3      	ldrb	r3, [r2, r3]
 8004af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	0800aab0 	.word	0x0800aab0

08004b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e01d      	b.n	8004b56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fdfc 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f000 f982 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b06      	cmp	r3, #6
 8004b7e:	d007      	beq.n	8004b90 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b06      	cmp	r3, #6
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d122      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d11b      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f06f 0202 	mvn.w	r2, #2
 8004c1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8ee 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004c36:	e005      	b.n	8004c44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f8e0 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8f1 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d122      	bne.n	8004c9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d11b      	bne.n	8004c9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f06f 0204 	mvn.w	r2, #4
 8004c6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f8c4 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004c8a:	e005      	b.n	8004c98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f8b6 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8c7 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d122      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d11b      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f06f 0208 	mvn.w	r2, #8
 8004cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f89a 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004cde:	e005      	b.n	8004cec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f88c 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f89d 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d122      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d11b      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f06f 0210 	mvn.w	r2, #16
 8004d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f870 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004d32:	e005      	b.n	8004d40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f862 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f873 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10e      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0201 	mvn.w	r2, #1
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fc fc09 	bl	8001584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d10e      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d107      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f97f 	bl	800509c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d10e      	bne.n	8004dca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d107      	bne.n	8004dca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f838 	bl	8004e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d10e      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d107      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0220 	mvn.w	r2, #32
 8004dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f949 	bl	8005088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a40      	ldr	r2, [pc, #256]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d00f      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3d      	ldr	r2, [pc, #244]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a3a      	ldr	r2, [pc, #232]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d027      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d023      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d017      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <TIM_Base_SetConfig+0x128>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <TIM_Base_SetConfig+0x130>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <TIM_Base_SetConfig+0x134>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a24      	ldr	r2, [pc, #144]	; (8004f88 <TIM_Base_SetConfig+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a23      	ldr	r2, [pc, #140]	; (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40001800 	.word	0x40001800
 8004f88:	40001c00 	.word	0x40001c00
 8004f8c:	40002000 	.word	0x40002000

08004f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e05a      	b.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a21      	ldr	r2, [pc, #132]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d022      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d01d      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d018      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1b      	ldr	r2, [pc, #108]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1a      	ldr	r2, [pc, #104]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00e      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a18      	ldr	r2, [pc, #96]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d009      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a17      	ldr	r2, [pc, #92]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a15      	ldr	r2, [pc, #84]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d10c      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	4313      	orrs	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40014000 	.word	0x40014000
 8005084:	40001800 	.word	0x40001800

08005088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b0:	b084      	sub	sp, #16
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	f107 001c 	add.w	r0, r7, #28
 80050be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d122      	bne.n	800510e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 fac6 	bl	8006694 <USB_CoreReset>
 8005108:	4603      	mov	r3, r0
 800510a:	73fb      	strb	r3, [r7, #15]
 800510c:	e01a      	b.n	8005144 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f001 faba 	bl	8006694 <USB_CoreReset>
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
 8005136:	e005      	b.n	8005144 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10b      	bne.n	8005162 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f043 0206 	orr.w	r2, r3, #6
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800516e:	b004      	add	sp, #16
 8005170:	4770      	bx	lr
	...

08005174 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d165      	bne.n	8005254 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4a41      	ldr	r2, [pc, #260]	; (8005290 <USB_SetTurnaroundTime+0x11c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d906      	bls.n	800519e <USB_SetTurnaroundTime+0x2a>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a40      	ldr	r2, [pc, #256]	; (8005294 <USB_SetTurnaroundTime+0x120>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d802      	bhi.n	800519e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005198:	230f      	movs	r3, #15
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	e062      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4a3c      	ldr	r2, [pc, #240]	; (8005294 <USB_SetTurnaroundTime+0x120>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d906      	bls.n	80051b4 <USB_SetTurnaroundTime+0x40>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4a3b      	ldr	r2, [pc, #236]	; (8005298 <USB_SetTurnaroundTime+0x124>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d802      	bhi.n	80051b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ae:	230e      	movs	r3, #14
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e057      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4a38      	ldr	r2, [pc, #224]	; (8005298 <USB_SetTurnaroundTime+0x124>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d906      	bls.n	80051ca <USB_SetTurnaroundTime+0x56>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a37      	ldr	r2, [pc, #220]	; (800529c <USB_SetTurnaroundTime+0x128>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d802      	bhi.n	80051ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051c4:	230d      	movs	r3, #13
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e04c      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4a33      	ldr	r2, [pc, #204]	; (800529c <USB_SetTurnaroundTime+0x128>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d906      	bls.n	80051e0 <USB_SetTurnaroundTime+0x6c>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <USB_SetTurnaroundTime+0x12c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d802      	bhi.n	80051e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051da:	230c      	movs	r3, #12
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e041      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4a2f      	ldr	r2, [pc, #188]	; (80052a0 <USB_SetTurnaroundTime+0x12c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d906      	bls.n	80051f6 <USB_SetTurnaroundTime+0x82>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4a2e      	ldr	r2, [pc, #184]	; (80052a4 <USB_SetTurnaroundTime+0x130>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d802      	bhi.n	80051f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051f0:	230b      	movs	r3, #11
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e036      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <USB_SetTurnaroundTime+0x130>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d906      	bls.n	800520c <USB_SetTurnaroundTime+0x98>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a29      	ldr	r2, [pc, #164]	; (80052a8 <USB_SetTurnaroundTime+0x134>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d802      	bhi.n	800520c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005206:	230a      	movs	r3, #10
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e02b      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a26      	ldr	r2, [pc, #152]	; (80052a8 <USB_SetTurnaroundTime+0x134>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d906      	bls.n	8005222 <USB_SetTurnaroundTime+0xae>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a25      	ldr	r2, [pc, #148]	; (80052ac <USB_SetTurnaroundTime+0x138>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d802      	bhi.n	8005222 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800521c:	2309      	movs	r3, #9
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e020      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a21      	ldr	r2, [pc, #132]	; (80052ac <USB_SetTurnaroundTime+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d906      	bls.n	8005238 <USB_SetTurnaroundTime+0xc4>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <USB_SetTurnaroundTime+0x13c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d802      	bhi.n	8005238 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005232:	2308      	movs	r3, #8
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e015      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <USB_SetTurnaroundTime+0x13c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d906      	bls.n	800524e <USB_SetTurnaroundTime+0xda>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <USB_SetTurnaroundTime+0x140>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d802      	bhi.n	800524e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005248:	2307      	movs	r3, #7
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e00a      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800524e:	2306      	movs	r3, #6
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	e007      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800525a:	2309      	movs	r3, #9
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e001      	b.n	8005264 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005260:	2309      	movs	r3, #9
 8005262:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	029b      	lsls	r3, r3, #10
 8005278:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800527c:	431a      	orrs	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	00d8acbf 	.word	0x00d8acbf
 8005294:	00e4e1bf 	.word	0x00e4e1bf
 8005298:	00f423ff 	.word	0x00f423ff
 800529c:	0106737f 	.word	0x0106737f
 80052a0:	011a499f 	.word	0x011a499f
 80052a4:	01312cff 	.word	0x01312cff
 80052a8:	014ca43f 	.word	0x014ca43f
 80052ac:	016e35ff 	.word	0x016e35ff
 80052b0:	01a6ab1f 	.word	0x01a6ab1f
 80052b4:	01e847ff 	.word	0x01e847ff

080052b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f043 0201 	orr.w	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d106      	bne.n	8005328 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]
 8005326:	e00b      	b.n	8005340 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	e001      	b.n	8005340 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e003      	b.n	8005348 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005340:	2032      	movs	r0, #50	; 0x32
 8005342:	f7fc fb5f 	bl	8001a04 <HAL_Delay>

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005350:	b084      	sub	sp, #16
 8005352:	b580      	push	{r7, lr}
 8005354:	b086      	sub	sp, #24
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800535e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	e009      	b.n	8005384 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3340      	adds	r3, #64	; 0x40
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	2200      	movs	r2, #0
 800537c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	3301      	adds	r3, #1
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b0e      	cmp	r3, #14
 8005388:	d9f2      	bls.n	8005370 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800538a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d11c      	bne.n	80053ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539e:	f043 0302 	orr.w	r3, r3, #2
 80053a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
 80053c8:	e00b      	b.n	80053e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053e8:	461a      	mov	r2, r3
 80053ea:	2300      	movs	r3, #0
 80053ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f4:	4619      	mov	r1, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	461a      	mov	r2, r3
 80053fe:	680b      	ldr	r3, [r1, #0]
 8005400:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2b01      	cmp	r3, #1
 8005406:	d10c      	bne.n	8005422 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800540e:	2100      	movs	r1, #0
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f949 	bl	80056a8 <USB_SetDevSpeed>
 8005416:	e008      	b.n	800542a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005418:	2101      	movs	r1, #1
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f944 	bl	80056a8 <USB_SetDevSpeed>
 8005420:	e003      	b.n	800542a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005422:	2103      	movs	r1, #3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f93f 	bl	80056a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800542a:	2110      	movs	r1, #16
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8f3 	bl	8005618 <USB_FlushTxFifo>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f911 	bl	8005664 <USB_FlushRxFifo>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	461a      	mov	r2, r3
 8005454:	2300      	movs	r3, #0
 8005456:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	461a      	mov	r2, r3
 8005460:	2300      	movs	r3, #0
 8005462:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	461a      	mov	r2, r3
 800546c:	2300      	movs	r3, #0
 800546e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	e043      	b.n	80054fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548c:	d118      	bne.n	80054c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a0:	461a      	mov	r2, r3
 80054a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e013      	b.n	80054d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	461a      	mov	r2, r3
 80054b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e008      	b.n	80054d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	461a      	mov	r2, r3
 80054ce:	2300      	movs	r3, #0
 80054d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	461a      	mov	r2, r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	461a      	mov	r2, r3
 80054f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	3301      	adds	r3, #1
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d3b7      	bcc.n	8005476 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e043      	b.n	8005594 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005522:	d118      	bne.n	8005556 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	461a      	mov	r2, r3
 8005538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e013      	b.n	8005568 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	461a      	mov	r2, r3
 800554e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	e008      	b.n	8005568 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	461a      	mov	r2, r3
 8005564:	2300      	movs	r3, #0
 8005566:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	2300      	movs	r3, #0
 8005578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	461a      	mov	r2, r3
 8005588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800558c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	3301      	adds	r3, #1
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	429a      	cmp	r2, r3
 800559a:	d3b7      	bcc.n	800550c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f043 0210 	orr.w	r2, r3, #16
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <USB_DevInit+0x2c4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f043 0208 	orr.w	r2, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d107      	bne.n	8005604 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055fc:	f043 0304 	orr.w	r3, r3, #4
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005610:	b004      	add	sp, #16
 8005612:	4770      	bx	lr
 8005614:	803c3800 	.word	0x803c3800

08005618 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	019b      	lsls	r3, r3, #6
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3301      	adds	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a09      	ldr	r2, [pc, #36]	; (8005660 <USB_FlushTxFifo+0x48>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d901      	bls.n	8005644 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e006      	b.n	8005652 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b20      	cmp	r3, #32
 800564e:	d0f0      	beq.n	8005632 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	00030d40 	.word	0x00030d40

08005664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2210      	movs	r2, #16
 8005674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <USB_FlushRxFifo+0x40>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e006      	b.n	8005696 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d0f0      	beq.n	8005676 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	00030d40 	.word	0x00030d40

080056a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c8:	4313      	orrs	r3, r2
 80056ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0306 	and.w	r3, r3, #6
 80056f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]
 80056fe:	e00a      	b.n	8005716 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d002      	beq.n	800570c <USB_GetDevSpeed+0x32>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d102      	bne.n	8005712 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800570c:	2302      	movs	r3, #2
 800570e:	75fb      	strb	r3, [r7, #23]
 8005710:	e001      	b.n	8005716 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005712:	230f      	movs	r3, #15
 8005714:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005716:	7dfb      	ldrb	r3, [r7, #23]
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d13a      	bne.n	80057b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	2101      	movs	r1, #1
 8005752:	fa01 f303 	lsl.w	r3, r1, r3
 8005756:	b29b      	uxth	r3, r3
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800575e:	4313      	orrs	r3, r2
 8005760:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d155      	bne.n	8005824 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	78db      	ldrb	r3, [r3, #3]
 8005792:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005794:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	059b      	lsls	r3, r3, #22
 800579a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800579c:	4313      	orrs	r3, r2
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e036      	b.n	8005824 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	2101      	movs	r1, #1
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d11a      	bne.n	8005824 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800580a:	430b      	orrs	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005822:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d161      	bne.n	8005914 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005866:	d11f      	bne.n	80058a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005886:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c8:	4013      	ands	r3, r2
 80058ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2101      	movs	r1, #1
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ec:	4013      	ands	r3, r2
 80058ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	0159      	lsls	r1, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	440b      	add	r3, r1
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	4619      	mov	r1, r3
 800590c:	4b35      	ldr	r3, [pc, #212]	; (80059e4 <USB_DeactivateEndpoint+0x1b0>)
 800590e:	4013      	ands	r3, r2
 8005910:	600b      	str	r3, [r1, #0]
 8005912:	e060      	b.n	80059d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800592a:	d11f      	bne.n	800596c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800594a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	43db      	mvns	r3, r3
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800598c:	4013      	ands	r3, r2
 800598e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	43db      	mvns	r3, r3
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b0:	4013      	ands	r3, r2
 80059b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	0159      	lsls	r1, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	4619      	mov	r1, r3
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <USB_DeactivateEndpoint+0x1b4>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	ec337800 	.word	0xec337800
 80059e8:	eff37800 	.word	0xeff37800

080059ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	f040 815c 	bne.w	8005cc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d132      	bne.n	8005a7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a74:	0cdb      	lsrs	r3, r3, #19
 8005a76:	04db      	lsls	r3, r3, #19
 8005a78:	6113      	str	r3, [r2, #16]
 8005a7a:	e074      	b.n	8005b66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	0cdb      	lsrs	r3, r3, #19
 8005a98:	04db      	lsls	r3, r3, #19
 8005a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005abe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6959      	ldr	r1, [r3, #20]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	440b      	add	r3, r1
 8005ad8:	1e59      	subs	r1, r3, #1
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ae2:	04d9      	lsls	r1, r3, #19
 8005ae4:	4b9d      	ldr	r3, [pc, #628]	; (8005d5c <USB_EPStartXfer+0x370>)
 8005ae6:	400b      	ands	r3, r1
 8005ae8:	69b9      	ldr	r1, [r7, #24]
 8005aea:	0148      	lsls	r0, r1, #5
 8005aec:	69f9      	ldr	r1, [r7, #28]
 8005aee:	4401      	add	r1, r0
 8005af0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005af4:	4313      	orrs	r3, r2
 8005af6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b0e:	69b9      	ldr	r1, [r7, #24]
 8005b10:	0148      	lsls	r0, r1, #5
 8005b12:	69f9      	ldr	r1, [r7, #28]
 8005b14:	4401      	add	r1, r0
 8005b16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	78db      	ldrb	r3, [r3, #3]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d11f      	bne.n	8005b66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d14b      	bne.n	8005c04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d009      	beq.n	8005b88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	461a      	mov	r2, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	78db      	ldrb	r3, [r3, #3]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d128      	bne.n	8005be2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d110      	bne.n	8005bc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e00f      	b.n	8005be2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	e12f      	b.n	8005e64 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d015      	beq.n	8005c58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8117 	beq.w	8005e64 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	2101      	movs	r1, #1
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	69f9      	ldr	r1, [r7, #28]
 8005c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c52:	4313      	orrs	r3, r2
 8005c54:	634b      	str	r3, [r1, #52]	; 0x34
 8005c56:	e105      	b.n	8005e64 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d110      	bne.n	8005c8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e00f      	b.n	8005caa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	68d9      	ldr	r1, [r3, #12]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	b298      	uxth	r0, r3
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fa2b 	bl	800611a <USB_WritePacket>
 8005cc4:	e0ce      	b.n	8005e64 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce0:	0cdb      	lsrs	r3, r3, #19
 8005ce2:	04db      	lsls	r3, r3, #19
 8005ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d126      	bne.n	8005d60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d28:	69b9      	ldr	r1, [r7, #24]
 8005d2a:	0148      	lsls	r0, r1, #5
 8005d2c:	69f9      	ldr	r1, [r7, #28]
 8005d2e:	4401      	add	r1, r0
 8005d30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d34:	4313      	orrs	r3, r2
 8005d36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d56:	6113      	str	r3, [r2, #16]
 8005d58:	e036      	b.n	8005dc8 <USB_EPStartXfer+0x3dc>
 8005d5a:	bf00      	nop
 8005d5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4413      	add	r3, r2
 8005d6a:	1e5a      	subs	r2, r3, #1
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	8afb      	ldrh	r3, [r7, #22]
 8005d86:	04d9      	lsls	r1, r3, #19
 8005d88:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <USB_EPStartXfer+0x484>)
 8005d8a:	400b      	ands	r3, r1
 8005d8c:	69b9      	ldr	r1, [r7, #24]
 8005d8e:	0148      	lsls	r0, r1, #5
 8005d90:	69f9      	ldr	r1, [r7, #28]
 8005d92:	4401      	add	r1, r0
 8005d94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	8af9      	ldrh	r1, [r7, #22]
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db8:	69b9      	ldr	r1, [r7, #24]
 8005dba:	0148      	lsls	r0, r1, #5
 8005dbc:	69f9      	ldr	r1, [r7, #28]
 8005dbe:	4401      	add	r1, r0
 8005dc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10d      	bne.n	8005dea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	68d9      	ldr	r1, [r3, #12]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	460a      	mov	r2, r1
 8005de8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d128      	bne.n	8005e44 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d110      	bne.n	8005e24 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e00f      	b.n	8005e44 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	1ff80000 	.word	0x1ff80000

08005e74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	f040 80cd 	bne.w	8006030 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d132      	bne.n	8005f04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efc:	0cdb      	lsrs	r3, r3, #19
 8005efe:	04db      	lsls	r3, r3, #19
 8005f00:	6113      	str	r3, [r2, #16]
 8005f02:	e04e      	b.n	8005fa2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	0cdb      	lsrs	r3, r3, #19
 8005f20:	04db      	lsls	r3, r3, #19
 8005f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d903      	bls.n	8005f5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f92:	6939      	ldr	r1, [r7, #16]
 8005f94:	0148      	lsls	r0, r1, #5
 8005f96:	6979      	ldr	r1, [r7, #20]
 8005f98:	4401      	add	r1, r0
 8005f9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d11e      	bne.n	8005fe6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	e092      	b.n	800610c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006004:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d07e      	beq.n	800610c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	2101      	movs	r1, #1
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800602a:	4313      	orrs	r3, r2
 800602c:	634b      	str	r3, [r1, #52]	; 0x34
 800602e:	e06d      	b.n	800610c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604a:	0cdb      	lsrs	r3, r3, #19
 800604c:	04db      	lsls	r3, r3, #19
 800604e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800606e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006072:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	691a      	ldr	r2, [r3, #16]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ba:	6939      	ldr	r1, [r7, #16]
 80060bc:	0148      	lsls	r0, r1, #5
 80060be:	6979      	ldr	r1, [r7, #20]
 80060c0:	4401      	add	r1, r0
 80060c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060c6:	4313      	orrs	r3, r2
 80060c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d10d      	bne.n	80060ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	68d9      	ldr	r1, [r3, #12]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e8:	460a      	mov	r2, r1
 80060ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006106:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800610a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800611a:	b480      	push	{r7}
 800611c:	b089      	sub	sp, #36	; 0x24
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	4611      	mov	r1, r2
 8006126:	461a      	mov	r2, r3
 8006128:	460b      	mov	r3, r1
 800612a:	71fb      	strb	r3, [r7, #7]
 800612c:	4613      	mov	r3, r2
 800612e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006138:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	d11a      	bne.n	8006176 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006140:	88bb      	ldrh	r3, [r7, #4]
 8006142:	3303      	adds	r3, #3
 8006144:	089b      	lsrs	r3, r3, #2
 8006146:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	e00f      	b.n	800616e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	031a      	lsls	r2, r3, #12
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615a:	461a      	mov	r2, r3
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3304      	adds	r3, #4
 8006166:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	3301      	adds	r3, #1
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	429a      	cmp	r2, r3
 8006174:	d3eb      	bcc.n	800614e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3724      	adds	r7, #36	; 0x24
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006184:	b480      	push	{r7}
 8006186:	b089      	sub	sp, #36	; 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	3303      	adds	r3, #3
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80061a2:	2300      	movs	r3, #0
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e00b      	b.n	80061c0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	3304      	adds	r3, #4
 80061b8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	3301      	adds	r3, #1
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d3ef      	bcc.n	80061a8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80061c8:	69fb      	ldr	r3, [r7, #28]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3724      	adds	r7, #36	; 0x24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d12c      	bne.n	800624c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db12      	blt.n	800622a <USB_EPSetStall+0x54>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00f      	beq.n	800622a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006228:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e02b      	b.n	80062a4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	db12      	blt.n	8006284 <USB_EPSetStall+0xae>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00f      	beq.n	8006284 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006282:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	440a      	add	r2, r1
 800629a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d128      	bne.n	8006320 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	78db      	ldrb	r3, [r3, #3]
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d003      	beq.n	80062fe <USB_EPClearStall+0x4c>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	78db      	ldrb	r3, [r3, #3]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d138      	bne.n	8006370 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e027      	b.n	8006370 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800633e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	78db      	ldrb	r3, [r3, #3]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d003      	beq.n	8006350 <USB_EPClearStall+0x9e>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	78db      	ldrb	r3, [r3, #3]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d10f      	bne.n	8006370 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800639c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063b8:	4313      	orrs	r3, r2
 80063ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063e4:	f023 0303 	bic.w	r3, r3, #3
 80063e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f8:	f023 0302 	bic.w	r3, r3, #2
 80063fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006426:	f023 0303 	bic.w	r3, r3, #3
 800642a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800643a:	f043 0302 	orr.w	r3, r3, #2
 800643e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800644e:	b480      	push	{r7}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4013      	ands	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006466:	68fb      	ldr	r3, [r7, #12]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	0c1b      	lsrs	r3, r3, #16
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4013      	ands	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	b29b      	uxth	r3, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	4013      	ands	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800650a:	68bb      	ldr	r3, [r7, #8]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
 8006548:	01db      	lsls	r3, r3, #7
 800654a:	b2db      	uxtb	r3, r3
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4013      	ands	r3, r2
 8006564:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006566:	68bb      	ldr	r3, [r7, #8]
}
 8006568:	4618      	mov	r0, r3
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f003 0301 	and.w	r3, r3, #1
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	460b      	mov	r3, r1
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	333c      	adds	r3, #60	; 0x3c
 80065ee:	3304      	adds	r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4a26      	ldr	r2, [pc, #152]	; (8006690 <USB_EP0_OutStart+0xb8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d90a      	bls.n	8006612 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800660c:	d101      	bne.n	8006612 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e037      	b.n	8006682 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006618:	461a      	mov	r2, r3
 800661a:	2300      	movs	r3, #0
 800661c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800662c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006640:	f043 0318 	orr.w	r3, r3, #24
 8006644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006654:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006658:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10f      	bne.n	8006680 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800667a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800667e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	4f54300a 	.word	0x4f54300a

08006694 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <USB_CoreReset+0x64>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e01b      	b.n	80066ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	daf2      	bge.n	80066a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f043 0201 	orr.w	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a09      	ldr	r2, [pc, #36]	; (80066f8 <USB_CoreReset+0x64>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d901      	bls.n	80066dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e006      	b.n	80066ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d0f0      	beq.n	80066ca <USB_CoreReset+0x36>

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	00030d40 	.word	0x00030d40

080066fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006708:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800670c:	f002 f940 	bl	8008990 <malloc>
 8006710:	4603      	mov	r3, r0
 8006712:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d105      	bne.n	8006726 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006722:	2302      	movs	r3, #2
 8006724:	e066      	b.n	80067f4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7c1b      	ldrb	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d119      	bne.n	800676a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800673a:	2202      	movs	r2, #2
 800673c:	2181      	movs	r1, #129	; 0x81
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 ffad 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800674a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800674e:	2202      	movs	r2, #2
 8006750:	2101      	movs	r1, #1
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 ffa3 	bl	800869e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2210      	movs	r2, #16
 8006764:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006768:	e016      	b.n	8006798 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800676a:	2340      	movs	r3, #64	; 0x40
 800676c:	2202      	movs	r2, #2
 800676e:	2181      	movs	r1, #129	; 0x81
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 ff94 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800677c:	2340      	movs	r3, #64	; 0x40
 800677e:	2202      	movs	r2, #2
 8006780:	2101      	movs	r1, #1
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 ff8b 	bl	800869e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2210      	movs	r2, #16
 8006794:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006798:	2308      	movs	r3, #8
 800679a:	2203      	movs	r2, #3
 800679c:	2182      	movs	r1, #130	; 0x82
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 ff7d 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7c1b      	ldrb	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d8:	2101      	movs	r1, #1
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f002 f84e 	bl	800887c <USBD_LL_PrepareReceive>
 80067e0:	e007      	b.n	80067f2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067e8:	2340      	movs	r3, #64	; 0x40
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f002 f845 	bl	800887c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800680c:	2181      	movs	r1, #129	; 0x81
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 ff6b 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800681a:	2101      	movs	r1, #1
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 ff64 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800682a:	2182      	movs	r1, #130	; 0x82
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 ff5c 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00e      	beq.n	800686a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685c:	4618      	mov	r0, r3
 800685e:	f002 f89f 	bl	80089a0 <free>
    pdev->pClassData = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006884:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800689a:	2b00      	cmp	r3, #0
 800689c:	d03a      	beq.n	8006914 <USBD_CDC_Setup+0xa0>
 800689e:	2b20      	cmp	r3, #32
 80068a0:	f040 8097 	bne.w	80069d2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	88db      	ldrh	r3, [r3, #6]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d029      	beq.n	8006900 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	b25b      	sxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da11      	bge.n	80068da <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80068c2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	88d2      	ldrh	r2, [r2, #6]
 80068c8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80068ca:	6939      	ldr	r1, [r7, #16]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	88db      	ldrh	r3, [r3, #6]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 fa9d 	bl	8007e12 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80068d8:	e082      	b.n	80069e0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	785a      	ldrb	r2, [r3, #1]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	88db      	ldrh	r3, [r3, #6]
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80068f0:	6939      	ldr	r1, [r7, #16]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	88db      	ldrh	r3, [r3, #6]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fab6 	bl	8007e6a <USBD_CtlPrepareRx>
    break;
 80068fe:	e06f      	b.n	80069e0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	7850      	ldrb	r0, [r2, #1]
 800690c:	2200      	movs	r2, #0
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	4798      	blx	r3
    break;
 8006912:	e065      	b.n	80069e0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	2b0b      	cmp	r3, #11
 800691a:	d84f      	bhi.n	80069bc <USBD_CDC_Setup+0x148>
 800691c:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <USBD_CDC_Setup+0xb0>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	08006955 	.word	0x08006955
 8006928:	080069cb 	.word	0x080069cb
 800692c:	080069bd 	.word	0x080069bd
 8006930:	080069bd 	.word	0x080069bd
 8006934:	080069bd 	.word	0x080069bd
 8006938:	080069bd 	.word	0x080069bd
 800693c:	080069bd 	.word	0x080069bd
 8006940:	080069bd 	.word	0x080069bd
 8006944:	080069bd 	.word	0x080069bd
 8006948:	080069bd 	.word	0x080069bd
 800694c:	0800697d 	.word	0x0800697d
 8006950:	080069a5 	.word	0x080069a5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695a:	2b03      	cmp	r3, #3
 800695c:	d107      	bne.n	800696e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800695e:	f107 030c 	add.w	r3, r7, #12
 8006962:	2202      	movs	r2, #2
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fa53 	bl	8007e12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800696c:	e030      	b.n	80069d0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 f9dd 	bl	8007d30 <USBD_CtlError>
        ret = USBD_FAIL;
 8006976:	2303      	movs	r3, #3
 8006978:	75fb      	strb	r3, [r7, #23]
      break;
 800697a:	e029      	b.n	80069d0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006982:	2b03      	cmp	r3, #3
 8006984:	d107      	bne.n	8006996 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006986:	f107 030f 	add.w	r3, r7, #15
 800698a:	2201      	movs	r2, #1
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 fa3f 	bl	8007e12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006994:	e01c      	b.n	80069d0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 f9c9 	bl	8007d30 <USBD_CtlError>
        ret = USBD_FAIL;
 800699e:	2303      	movs	r3, #3
 80069a0:	75fb      	strb	r3, [r7, #23]
      break;
 80069a2:	e015      	b.n	80069d0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d00f      	beq.n	80069ce <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 f9bd 	bl	8007d30 <USBD_CtlError>
        ret = USBD_FAIL;
 80069b6:	2303      	movs	r3, #3
 80069b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80069ba:	e008      	b.n	80069ce <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f9b6 	bl	8007d30 <USBD_CtlError>
      ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	e002      	b.n	80069d0 <USBD_CDC_Setup+0x15c>
      break;
 80069ca:	bf00      	nop
 80069cc:	e008      	b.n	80069e0 <USBD_CDC_Setup+0x16c>
      break;
 80069ce:	bf00      	nop
    }
    break;
 80069d0:	e006      	b.n	80069e0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 f9ab 	bl	8007d30 <USBD_CtlError>
    ret = USBD_FAIL;
 80069da:	2303      	movs	r3, #3
 80069dc:	75fb      	strb	r3, [r7, #23]
    break;
 80069de:	bf00      	nop
  }

  return (uint8_t)ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop

080069ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e049      	b.n	8006aa2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a16:	78fa      	ldrb	r2, [r7, #3]
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	440b      	add	r3, r1
 8006a24:	3318      	adds	r3, #24
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d029      	beq.n	8006a80 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	78f9      	ldrb	r1, [r7, #3]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	460b      	mov	r3, r1
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	1a5b      	subs	r3, r3, r1
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4403      	add	r3, r0
 8006a4c:	3344      	adds	r3, #68	; 0x44
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a54:	fb03 f301 	mul.w	r3, r3, r1
 8006a58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d110      	bne.n	8006a80 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a5e:	78fa      	ldrb	r2, [r7, #3]
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	3318      	adds	r3, #24
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a72:	78f9      	ldrb	r1, [r7, #3]
 8006a74:	2300      	movs	r3, #0
 8006a76:	2200      	movs	r2, #0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fede 	bl	800883a <USBD_LL_Transmit>
 8006a7e:	e00f      	b.n	8006aa0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a9c:	78fa      	ldrb	r2, [r7, #3]
 8006a9e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006abc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e015      	b.n	8006af8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fef4 	bl	80088be <USBD_LL_GetRxDataSize>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006af2:	4611      	mov	r1, r2
 8006af4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b0e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d015      	beq.n	8006b46 <USBD_CDC_EP0_RxReady+0x46>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b20:	2bff      	cmp	r3, #255	; 0xff
 8006b22:	d010      	beq.n	8006b46 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006b32:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b3a:	b292      	uxth	r2, r2
 8006b3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	22ff      	movs	r2, #255	; 0xff
 8006b42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2243      	movs	r2, #67	; 0x43
 8006b5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006b5e:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	20000094 	.word	0x20000094

08006b70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2243      	movs	r2, #67	; 0x43
 8006b7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006b7e:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20000050 	.word	0x20000050

08006b90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2243      	movs	r2, #67	; 0x43
 8006b9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006b9e:	4b03      	ldr	r3, [pc, #12]	; (8006bac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	200000d8 	.word	0x200000d8

08006bb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	220a      	movs	r2, #10
 8006bbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	2000000c 	.word	0x2000000c

08006bd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e004      	b.n	8006bee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b087      	sub	sp, #28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e01a      	b.n	8006cac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d114      	bne.n	8006caa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c9e:	2181      	movs	r1, #129	; 0x81
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fdca 	bl	800883a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e016      	b.n	8006d00 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7c1b      	ldrb	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fdc8 	bl	800887c <USBD_LL_PrepareReceive>
 8006cec:	e007      	b.n	8006cfe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fdbf 	bl	800887c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e025      	b.n	8006d6c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	79fa      	ldrb	r2, [r7, #7]
 8006d5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f001 fc35 	bl	80085d0 <USBD_LL_Init>
 8006d66:	4603      	mov	r3, r0
 8006d68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e010      	b.n	8006dae <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	f107 020e 	add.w	r2, r7, #14
 8006da0:	4610      	mov	r0, r2
 8006da2:	4798      	blx	r3
 8006da4:	4602      	mov	r2, r0
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fc52 	bl	8008668 <USBD_LL_Start>
 8006dc4:	4603      	mov	r3, r0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	78fa      	ldrb	r2, [r7, #3]
 8006e08:	4611      	mov	r1, r2
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	4798      	blx	r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	78fa      	ldrb	r2, [r7, #3]
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
  }

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 ff2c 	bl	8007cbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e72:	461a      	mov	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d00e      	beq.n	8006ea6 <USBD_LL_SetupStage+0x5a>
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d302      	bcc.n	8006e92 <USBD_LL_SetupStage+0x46>
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d014      	beq.n	8006eba <USBD_LL_SetupStage+0x6e>
 8006e90:	e01d      	b.n	8006ece <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa18 	bl	80072d0 <USBD_StdDevReq>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea4:	e020      	b.n	8006ee8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa7c 	bl	80073ac <USBD_StdItfReq>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb8:	e016      	b.n	8006ee8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fab8 	bl	8007438 <USBD_StdEPReq>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
      break;
 8006ecc:	e00c      	b.n	8006ee8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ed4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fc23 	bl	8008728 <USBD_LL_StallEP>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee6:	bf00      	nop
  }

  return ret;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	460b      	mov	r3, r1
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d137      	bne.n	8006f76 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d14a      	bne.n	8006fae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d913      	bls.n	8006f4c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	1ad2      	subs	r2, r2, r3
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	bf28      	it	cs
 8006f3e:	4613      	movcs	r3, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 ffad 	bl	8007ea4 <USBD_CtlContinueRx>
 8006f4a:	e030      	b.n	8006fae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d105      	bne.n	8006f6e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 ffa9 	bl	8007ec6 <USBD_CtlSendStatus>
 8006f74:	e01b      	b.n	8006fae <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d013      	beq.n	8006faa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d10e      	bne.n	8006faa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	7afa      	ldrb	r2, [r7, #11]
 8006f96:	4611      	mov	r1, r2
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	4798      	blx	r3
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	e002      	b.n	8006fb0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e000      	b.n	8006fb0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d16a      	bne.n	80070a2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d155      	bne.n	8007088 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d914      	bls.n	8007012 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	1ad2      	subs	r2, r2, r3
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 ff22 	bl	8007e48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007004:	2300      	movs	r3, #0
 8007006:	2200      	movs	r2, #0
 8007008:	2100      	movs	r1, #0
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f001 fc36 	bl	800887c <USBD_LL_PrepareReceive>
 8007010:	e03a      	b.n	8007088 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	429a      	cmp	r2, r3
 800701c:	d11c      	bne.n	8007058 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007026:	429a      	cmp	r2, r3
 8007028:	d316      	bcc.n	8007058 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007034:	429a      	cmp	r2, r3
 8007036:	d20f      	bcs.n	8007058 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007038:	2200      	movs	r2, #0
 800703a:	2100      	movs	r1, #0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 ff03 	bl	8007e48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800704a:	2300      	movs	r3, #0
 800704c:	2200      	movs	r2, #0
 800704e:	2100      	movs	r1, #0
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f001 fc13 	bl	800887c <USBD_LL_PrepareReceive>
 8007056:	e017      	b.n	8007088 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800706a:	2b03      	cmp	r3, #3
 800706c:	d105      	bne.n	800707a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f001 fb53 	bl	8008728 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 ff32 	bl	8007eec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800708e:	2b01      	cmp	r3, #1
 8007090:	d123      	bne.n	80070da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fe9b 	bl	8006dce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070a0:	e01b      	b.n	80070da <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d013      	beq.n	80070d6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d10e      	bne.n	80070d6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	7afa      	ldrb	r2, [r7, #11]
 80070c2:	4611      	mov	r1, r2
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	4798      	blx	r3
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	e002      	b.n	80070dc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e000      	b.n	80070dc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6852      	ldr	r2, [r2, #4]
 8007120:	b2d2      	uxtb	r2, r2
 8007122:	4611      	mov	r1, r2
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007128:	2340      	movs	r3, #64	; 0x40
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 fab5 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2240      	movs	r2, #64	; 0x40
 8007140:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007144:	2340      	movs	r3, #64	; 0x40
 8007146:	2200      	movs	r2, #0
 8007148:	2180      	movs	r1, #128	; 0x80
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 faa7 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2240      	movs	r2, #64	; 0x40
 800715a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	78fa      	ldrb	r2, [r7, #3]
 8007176:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2204      	movs	r2, #4
 800719e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d105      	bne.n	80071ce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d10b      	bne.n	8007206 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d009      	beq.n	8007288 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6852      	ldr	r2, [r2, #4]
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	4611      	mov	r1, r2
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
  }

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007292:	b480      	push	{r7}
 8007294:	b087      	sub	sp, #28
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	3301      	adds	r3, #1
 80072a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072b0:	8a3b      	ldrh	r3, [r7, #16]
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	b21a      	sxth	r2, r3
 80072b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	b21b      	sxth	r3, r3
 80072be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072c0:	89fb      	ldrh	r3, [r7, #14]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d004      	beq.n	80072f4 <USBD_StdDevReq+0x24>
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d002      	beq.n	80072f4 <USBD_StdDevReq+0x24>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <USBD_StdDevReq+0x38>
 80072f2:	e050      	b.n	8007396 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
 8007302:	4603      	mov	r3, r0
 8007304:	73fb      	strb	r3, [r7, #15]
    break;
 8007306:	e04b      	b.n	80073a0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b09      	cmp	r3, #9
 800730e:	d83c      	bhi.n	800738a <USBD_StdDevReq+0xba>
 8007310:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <USBD_StdDevReq+0x48>)
 8007312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007316:	bf00      	nop
 8007318:	0800736d 	.word	0x0800736d
 800731c:	08007381 	.word	0x08007381
 8007320:	0800738b 	.word	0x0800738b
 8007324:	08007377 	.word	0x08007377
 8007328:	0800738b 	.word	0x0800738b
 800732c:	0800734b 	.word	0x0800734b
 8007330:	08007341 	.word	0x08007341
 8007334:	0800738b 	.word	0x0800738b
 8007338:	08007363 	.word	0x08007363
 800733c:	08007355 	.word	0x08007355
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f9ce 	bl	80076e4 <USBD_GetDescriptor>
      break;
 8007348:	e024      	b.n	8007394 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fb33 	bl	80079b8 <USBD_SetAddress>
      break;
 8007352:	e01f      	b.n	8007394 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fb70 	bl	8007a3c <USBD_SetConfig>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]
      break;
 8007360:	e018      	b.n	8007394 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fc0d 	bl	8007b84 <USBD_GetConfig>
      break;
 800736a:	e013      	b.n	8007394 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fc3c 	bl	8007bec <USBD_GetStatus>
      break;
 8007374:	e00e      	b.n	8007394 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fc6a 	bl	8007c52 <USBD_SetFeature>
      break;
 800737e:	e009      	b.n	8007394 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fc79 	bl	8007c7a <USBD_ClrFeature>
      break;
 8007388:	e004      	b.n	8007394 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fccf 	bl	8007d30 <USBD_CtlError>
      break;
 8007392:	bf00      	nop
    }
    break;
 8007394:	e004      	b.n	80073a0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fcc9 	bl	8007d30 <USBD_CtlError>
    break;
 800739e:	bf00      	nop
  }

  return ret;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop

080073ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d003      	beq.n	80073ce <USBD_StdItfReq+0x22>
 80073c6:	2b40      	cmp	r3, #64	; 0x40
 80073c8:	d001      	beq.n	80073ce <USBD_StdItfReq+0x22>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12a      	bne.n	8007424 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d4:	3b01      	subs	r3, #1
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d81d      	bhi.n	8007416 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	889b      	ldrh	r3, [r3, #4]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d813      	bhi.n	800740c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	4798      	blx	r3
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	88db      	ldrh	r3, [r3, #6]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d110      	bne.n	8007420 <USBD_StdItfReq+0x74>
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10d      	bne.n	8007420 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fd5e 	bl	8007ec6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800740a:	e009      	b.n	8007420 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc8e 	bl	8007d30 <USBD_CtlError>
      break;
 8007414:	e004      	b.n	8007420 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fc89 	bl	8007d30 <USBD_CtlError>
      break;
 800741e:	e000      	b.n	8007422 <USBD_StdItfReq+0x76>
      break;
 8007420:	bf00      	nop
    }
    break;
 8007422:	e004      	b.n	800742e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fc82 	bl	8007d30 <USBD_CtlError>
    break;
 800742c:	bf00      	nop
  }

  return ret;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	889b      	ldrh	r3, [r3, #4]
 800744a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007454:	2b20      	cmp	r3, #32
 8007456:	d004      	beq.n	8007462 <USBD_StdEPReq+0x2a>
 8007458:	2b40      	cmp	r3, #64	; 0x40
 800745a:	d002      	beq.n	8007462 <USBD_StdEPReq+0x2a>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <USBD_StdEPReq+0x3e>
 8007460:	e135      	b.n	80076ce <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]
    break;
 8007474:	e130      	b.n	80076d8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d03e      	beq.n	80074fc <USBD_StdEPReq+0xc4>
 800747e:	2b03      	cmp	r3, #3
 8007480:	d002      	beq.n	8007488 <USBD_StdEPReq+0x50>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d077      	beq.n	8007576 <USBD_StdEPReq+0x13e>
 8007486:	e11c      	b.n	80076c2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748e:	2b02      	cmp	r3, #2
 8007490:	d002      	beq.n	8007498 <USBD_StdEPReq+0x60>
 8007492:	2b03      	cmp	r3, #3
 8007494:	d015      	beq.n	80074c2 <USBD_StdEPReq+0x8a>
 8007496:	e02b      	b.n	80074f0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00c      	beq.n	80074b8 <USBD_StdEPReq+0x80>
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	2b80      	cmp	r3, #128	; 0x80
 80074a2:	d009      	beq.n	80074b8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 f93d 	bl	8008728 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ae:	2180      	movs	r1, #128	; 0x80
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f939 	bl	8008728 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80074b6:	e020      	b.n	80074fa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fc38 	bl	8007d30 <USBD_CtlError>
        break;
 80074c0:	e01b      	b.n	80074fa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	885b      	ldrh	r3, [r3, #2]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10e      	bne.n	80074e8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <USBD_StdEPReq+0xb0>
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	d008      	beq.n	80074e8 <USBD_StdEPReq+0xb0>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	88db      	ldrh	r3, [r3, #6]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d104      	bne.n	80074e8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 f920 	bl	8008728 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fcec 	bl	8007ec6 <USBD_CtlSendStatus>

        break;
 80074ee:	e004      	b.n	80074fa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fc1c 	bl	8007d30 <USBD_CtlError>
        break;
 80074f8:	bf00      	nop
      }
      break;
 80074fa:	e0e7      	b.n	80076cc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007502:	2b02      	cmp	r3, #2
 8007504:	d002      	beq.n	800750c <USBD_StdEPReq+0xd4>
 8007506:	2b03      	cmp	r3, #3
 8007508:	d015      	beq.n	8007536 <USBD_StdEPReq+0xfe>
 800750a:	e02d      	b.n	8007568 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <USBD_StdEPReq+0xf4>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d009      	beq.n	800752c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f903 	bl	8008728 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007522:	2180      	movs	r1, #128	; 0x80
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f8ff 	bl	8008728 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800752a:	e023      	b.n	8007574 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fbfe 	bl	8007d30 <USBD_CtlError>
        break;
 8007534:	e01e      	b.n	8007574 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	885b      	ldrh	r3, [r3, #2]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d119      	bne.n	8007572 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 f90a 	bl	8008766 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fcb7 	bl	8007ec6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
        }
        break;
 8007566:	e004      	b.n	8007572 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fbe0 	bl	8007d30 <USBD_CtlError>
        break;
 8007570:	e000      	b.n	8007574 <USBD_StdEPReq+0x13c>
        break;
 8007572:	bf00      	nop
      }
      break;
 8007574:	e0aa      	b.n	80076cc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757c:	2b02      	cmp	r3, #2
 800757e:	d002      	beq.n	8007586 <USBD_StdEPReq+0x14e>
 8007580:	2b03      	cmp	r3, #3
 8007582:	d032      	beq.n	80075ea <USBD_StdEPReq+0x1b2>
 8007584:	e097      	b.n	80076b6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <USBD_StdEPReq+0x164>
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b80      	cmp	r3, #128	; 0x80
 8007590:	d004      	beq.n	800759c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fbcb 	bl	8007d30 <USBD_CtlError>
          break;
 800759a:	e091      	b.n	80076c0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800759c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da0b      	bge.n	80075bc <USBD_StdEPReq+0x184>
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	3310      	adds	r3, #16
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	4413      	add	r3, r2
 80075b8:	3304      	adds	r3, #4
 80075ba:	e00b      	b.n	80075d4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	3304      	adds	r3, #4
 80075d4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2202      	movs	r2, #2
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fc15 	bl	8007e12 <USBD_CtlSendData>
        break;
 80075e8:	e06a      	b.n	80076c0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80075ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	da11      	bge.n	8007616 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	f003 020f 	and.w	r2, r3, #15
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	3324      	adds	r3, #36	; 0x24
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d117      	bne.n	800763c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fb8e 	bl	8007d30 <USBD_CtlError>
            break;
 8007614:	e054      	b.n	80076c0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	f003 020f 	and.w	r2, r3, #15
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fb7b 	bl	8007d30 <USBD_CtlError>
            break;
 800763a:	e041      	b.n	80076c0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800763c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	da0b      	bge.n	800765c <USBD_StdEPReq+0x224>
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	3310      	adds	r3, #16
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	4413      	add	r3, r2
 8007658:	3304      	adds	r3, #4
 800765a:	e00b      	b.n	8007674 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	4413      	add	r3, r2
 8007672:	3304      	adds	r3, #4
 8007674:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <USBD_StdEPReq+0x24a>
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	2b80      	cmp	r3, #128	; 0x80
 8007680:	d103      	bne.n	800768a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	e00e      	b.n	80076a8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 f888 	bl	80087a4 <USBD_LL_IsStallEP>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2201      	movs	r2, #1
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e002      	b.n	80076a8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2202      	movs	r2, #2
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fbaf 	bl	8007e12 <USBD_CtlSendData>
          break;
 80076b4:	e004      	b.n	80076c0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fb39 	bl	8007d30 <USBD_CtlError>
        break;
 80076be:	bf00      	nop
      }
      break;
 80076c0:	e004      	b.n	80076cc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb33 	bl	8007d30 <USBD_CtlError>
      break;
 80076ca:	bf00      	nop
    }
    break;
 80076cc:	e004      	b.n	80076d8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fb2d 	bl	8007d30 <USBD_CtlError>
    break;
 80076d6:	bf00      	nop
  }

  return ret;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	885b      	ldrh	r3, [r3, #2]
 80076fe:	0a1b      	lsrs	r3, r3, #8
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	2b06      	cmp	r3, #6
 8007706:	f200 8128 	bhi.w	800795a <USBD_GetDescriptor+0x276>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <USBD_GetDescriptor+0x2c>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	0800772d 	.word	0x0800772d
 8007714:	08007745 	.word	0x08007745
 8007718:	08007785 	.word	0x08007785
 800771c:	0800795b 	.word	0x0800795b
 8007720:	0800795b 	.word	0x0800795b
 8007724:	080078fb 	.word	0x080078fb
 8007728:	08007927 	.word	0x08007927
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
    break;
 8007742:	e112      	b.n	800796a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	7c1b      	ldrb	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10d      	bne.n	8007768 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f107 0208 	add.w	r2, r7, #8
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
 800775c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	2202      	movs	r2, #2
 8007764:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007766:	e100      	b.n	800796a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	f107 0208 	add.w	r2, r7, #8
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
 8007778:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	2202      	movs	r2, #2
 8007780:	701a      	strb	r2, [r3, #0]
    break;
 8007782:	e0f2      	b.n	800796a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	885b      	ldrh	r3, [r3, #2]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b05      	cmp	r3, #5
 800778c:	f200 80ac 	bhi.w	80078e8 <USBD_GetDescriptor+0x204>
 8007790:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <USBD_GetDescriptor+0xb4>)
 8007792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007796:	bf00      	nop
 8007798:	080077b1 	.word	0x080077b1
 800779c:	080077e5 	.word	0x080077e5
 80077a0:	08007819 	.word	0x08007819
 80077a4:	0800784d 	.word	0x0800784d
 80077a8:	08007881 	.word	0x08007881
 80077ac:	080078b5 	.word	0x080078b5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077d2:	e091      	b.n	80078f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 faaa 	bl	8007d30 <USBD_CtlError>
        err++;
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	3301      	adds	r3, #1
 80077e0:	72fb      	strb	r3, [r7, #11]
      break;
 80077e2:	e089      	b.n	80078f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	7c12      	ldrb	r2, [r2, #16]
 80077fc:	f107 0108 	add.w	r1, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007806:	e077      	b.n	80078f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa90 	bl	8007d30 <USBD_CtlError>
        err++;
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	3301      	adds	r3, #1
 8007814:	72fb      	strb	r3, [r7, #11]
      break;
 8007816:	e06f      	b.n	80078f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	7c12      	ldrb	r2, [r2, #16]
 8007830:	f107 0108 	add.w	r1, r7, #8
 8007834:	4610      	mov	r0, r2
 8007836:	4798      	blx	r3
 8007838:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800783a:	e05d      	b.n	80078f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa76 	bl	8007d30 <USBD_CtlError>
        err++;
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	3301      	adds	r3, #1
 8007848:	72fb      	strb	r3, [r7, #11]
      break;
 800784a:	e055      	b.n	80078f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	7c12      	ldrb	r2, [r2, #16]
 8007864:	f107 0108 	add.w	r1, r7, #8
 8007868:	4610      	mov	r0, r2
 800786a:	4798      	blx	r3
 800786c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800786e:	e043      	b.n	80078f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa5c 	bl	8007d30 <USBD_CtlError>
        err++;
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	3301      	adds	r3, #1
 800787c:	72fb      	strb	r3, [r7, #11]
      break;
 800787e:	e03b      	b.n	80078f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7c12      	ldrb	r2, [r2, #16]
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078a2:	e029      	b.n	80078f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa42 	bl	8007d30 <USBD_CtlError>
        err++;
 80078ac:	7afb      	ldrb	r3, [r7, #11]
 80078ae:	3301      	adds	r3, #1
 80078b0:	72fb      	strb	r3, [r7, #11]
      break;
 80078b2:	e021      	b.n	80078f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	7c12      	ldrb	r2, [r2, #16]
 80078cc:	f107 0108 	add.w	r1, r7, #8
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
 80078d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078d6:	e00f      	b.n	80078f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa28 	bl	8007d30 <USBD_CtlError>
        err++;
 80078e0:	7afb      	ldrb	r3, [r7, #11]
 80078e2:	3301      	adds	r3, #1
 80078e4:	72fb      	strb	r3, [r7, #11]
      break;
 80078e6:	e007      	b.n	80078f8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa20 	bl	8007d30 <USBD_CtlError>
      err++;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	3301      	adds	r3, #1
 80078f4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80078f6:	bf00      	nop
    }
    break;
 80078f8:	e037      	b.n	800796a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	7c1b      	ldrb	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790a:	f107 0208 	add.w	r2, r7, #8
 800790e:	4610      	mov	r0, r2
 8007910:	4798      	blx	r3
 8007912:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007914:	e029      	b.n	800796a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fa09 	bl	8007d30 <USBD_CtlError>
      err++;
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	3301      	adds	r3, #1
 8007922:	72fb      	strb	r3, [r7, #11]
    break;
 8007924:	e021      	b.n	800796a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7c1b      	ldrb	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10d      	bne.n	800794a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	f107 0208 	add.w	r2, r7, #8
 800793a:	4610      	mov	r0, r2
 800793c:	4798      	blx	r3
 800793e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3301      	adds	r3, #1
 8007944:	2207      	movs	r2, #7
 8007946:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007948:	e00f      	b.n	800796a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f9ef 	bl	8007d30 <USBD_CtlError>
      err++;
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	3301      	adds	r3, #1
 8007956:	72fb      	strb	r3, [r7, #11]
    break;
 8007958:	e007      	b.n	800796a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f9e7 	bl	8007d30 <USBD_CtlError>
    err++;
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	3301      	adds	r3, #1
 8007966:	72fb      	strb	r3, [r7, #11]
    break;
 8007968:	bf00      	nop
  }

  if (err != 0U)
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d11e      	bne.n	80079ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	88db      	ldrh	r3, [r3, #6]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d016      	beq.n	80079a6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007978:	893b      	ldrh	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00e      	beq.n	800799c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88da      	ldrh	r2, [r3, #6]
 8007982:	893b      	ldrh	r3, [r7, #8]
 8007984:	4293      	cmp	r3, r2
 8007986:	bf28      	it	cs
 8007988:	4613      	movcs	r3, r2
 800798a:	b29b      	uxth	r3, r3
 800798c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800798e:	893b      	ldrh	r3, [r7, #8]
 8007990:	461a      	mov	r2, r3
 8007992:	68f9      	ldr	r1, [r7, #12]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fa3c 	bl	8007e12 <USBD_CtlSendData>
 800799a:	e009      	b.n	80079b0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f9c6 	bl	8007d30 <USBD_CtlError>
 80079a4:	e004      	b.n	80079b0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fa8d 	bl	8007ec6 <USBD_CtlSendStatus>
 80079ac:	e000      	b.n	80079b0 <USBD_GetDescriptor+0x2cc>
    return;
 80079ae:	bf00      	nop
    }
  }
}
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop

080079b8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d130      	bne.n	8007a2c <USBD_SetAddress+0x74>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d12c      	bne.n	8007a2c <USBD_SetAddress+0x74>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	2b7f      	cmp	r3, #127	; 0x7f
 80079d8:	d828      	bhi.n	8007a2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	885b      	ldrh	r3, [r3, #2]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d104      	bne.n	80079fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f99c 	bl	8007d30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f8:	e01c      	b.n	8007a34 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7bfa      	ldrb	r2, [r7, #15]
 80079fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fef8 	bl	80087fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fa5a 	bl	8007ec6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a20:	e008      	b.n	8007a34 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2a:	e003      	b.n	8007a34 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f97e 	bl	8007d30 <USBD_CtlError>
  }
}
 8007a34:	bf00      	nop
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	885b      	ldrh	r3, [r3, #2]
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	4b4b      	ldr	r3, [pc, #300]	; (8007b80 <USBD_SetConfig+0x144>)
 8007a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a54:	4b4a      	ldr	r3, [pc, #296]	; (8007b80 <USBD_SetConfig+0x144>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d905      	bls.n	8007a68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f966 	bl	8007d30 <USBD_CtlError>
    return USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e087      	b.n	8007b78 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d002      	beq.n	8007a78 <USBD_SetConfig+0x3c>
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d025      	beq.n	8007ac2 <USBD_SetConfig+0x86>
 8007a76:	e071      	b.n	8007b5c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007a78:	4b41      	ldr	r3, [pc, #260]	; (8007b80 <USBD_SetConfig+0x144>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01c      	beq.n	8007aba <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007a80:	4b3f      	ldr	r3, [pc, #252]	; (8007b80 <USBD_SetConfig+0x144>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a8a:	4b3d      	ldr	r3, [pc, #244]	; (8007b80 <USBD_SetConfig+0x144>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff f9a7 	bl	8006de4 <USBD_SetClassConfig>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f944 	bl	8007d30 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007aa8:	e065      	b.n	8007b76 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa0b 	bl	8007ec6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ab8:	e05d      	b.n	8007b76 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa03 	bl	8007ec6 <USBD_CtlSendStatus>
    break;
 8007ac0:	e059      	b.n	8007b76 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007ac2:	4b2f      	ldr	r3, [pc, #188]	; (8007b80 <USBD_SetConfig+0x144>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d112      	bne.n	8007af0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2202      	movs	r2, #2
 8007ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007ad2:	4b2b      	ldr	r3, [pc, #172]	; (8007b80 <USBD_SetConfig+0x144>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007adc:	4b28      	ldr	r3, [pc, #160]	; (8007b80 <USBD_SetConfig+0x144>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff f99a 	bl	8006e1c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f9ec 	bl	8007ec6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007aee:	e042      	b.n	8007b76 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007af0:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <USBD_SetConfig+0x144>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d02a      	beq.n	8007b54 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff f988 	bl	8006e1c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007b0c:	4b1c      	ldr	r3, [pc, #112]	; (8007b80 <USBD_SetConfig+0x144>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b16:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <USBD_SetConfig+0x144>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff f961 	bl	8006de4 <USBD_SetClassConfig>
 8007b22:	4603      	mov	r3, r0
 8007b24:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00f      	beq.n	8007b4c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8fe 	bl	8007d30 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff f96d 	bl	8006e1c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2202      	movs	r2, #2
 8007b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007b4a:	e014      	b.n	8007b76 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9ba 	bl	8007ec6 <USBD_CtlSendStatus>
    break;
 8007b52:	e010      	b.n	8007b76 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9b6 	bl	8007ec6 <USBD_CtlSendStatus>
    break;
 8007b5a:	e00c      	b.n	8007b76 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8e6 	bl	8007d30 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <USBD_SetConfig+0x144>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f956 	bl	8006e1c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007b70:	2303      	movs	r3, #3
 8007b72:	73fb      	strb	r3, [r7, #15]
    break;
 8007b74:	bf00      	nop
  }

  return ret;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000394 	.word	0x20000394

08007b84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	88db      	ldrh	r3, [r3, #6]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d004      	beq.n	8007ba0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8c9 	bl	8007d30 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007b9e:	e021      	b.n	8007be4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	db17      	blt.n	8007bda <USBD_GetConfig+0x56>
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	dd02      	ble.n	8007bb4 <USBD_GetConfig+0x30>
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d00b      	beq.n	8007bca <USBD_GetConfig+0x46>
 8007bb2:	e012      	b.n	8007bda <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f925 	bl	8007e12 <USBD_CtlSendData>
      break;
 8007bc8:	e00c      	b.n	8007be4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f91d 	bl	8007e12 <USBD_CtlSendData>
      break;
 8007bd8:	e004      	b.n	8007be4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f8a7 	bl	8007d30 <USBD_CtlError>
      break;
 8007be2:	bf00      	nop
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d81e      	bhi.n	8007c40 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	88db      	ldrh	r3, [r3, #6]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d004      	beq.n	8007c14 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f88f 	bl	8007d30 <USBD_CtlError>
      break;
 8007c12:	e01a      	b.n	8007c4a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f043 0202 	orr.w	r2, r3, #2
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	330c      	adds	r3, #12
 8007c34:	2202      	movs	r2, #2
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f8ea 	bl	8007e12 <USBD_CtlSendData>
    break;
 8007c3e:	e004      	b.n	8007c4a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f874 	bl	8007d30 <USBD_CtlError>
    break;
 8007c48:	bf00      	nop
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d106      	bne.n	8007c72 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f92a 	bl	8007ec6 <USBD_CtlSendStatus>
  }
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d80b      	bhi.n	8007ca8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	885b      	ldrh	r3, [r3, #2]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10c      	bne.n	8007cb2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f910 	bl	8007ec6 <USBD_CtlSendStatus>
      }
      break;
 8007ca6:	e004      	b.n	8007cb2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f840 	bl	8007d30 <USBD_CtlError>
      break;
 8007cb0:	e000      	b.n	8007cb4 <USBD_ClrFeature+0x3a>
      break;
 8007cb2:	bf00      	nop
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff fad3 	bl	8007292 <SWAPBYTE>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff fac6 	bl	8007292 <SWAPBYTE>
 8007d06:	4603      	mov	r3, r0
 8007d08:	461a      	mov	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3301      	adds	r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff fab9 	bl	8007292 <SWAPBYTE>
 8007d20:	4603      	mov	r3, r0
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	80da      	strh	r2, [r3, #6]
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fcf3 	bl	8008728 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fcef 	bl	8008728 <USBD_LL_StallEP>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d036      	beq.n	8007dd6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d6c:	6938      	ldr	r0, [r7, #16]
 8007d6e:	f000 f836 	bl	8007dde <USBD_GetLen>
 8007d72:	4603      	mov	r3, r0
 8007d74:	3301      	adds	r3, #1
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	4413      	add	r3, r2
 8007d98:	2203      	movs	r2, #3
 8007d9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007da2:	e013      	b.n	8007dcc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4413      	add	r3, r2
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	7812      	ldrb	r2, [r2, #0]
 8007dae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	3301      	adds	r3, #1
 8007db4:	613b      	str	r3, [r7, #16]
    idx++;
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	3301      	adds	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e7      	bne.n	8007da4 <USBD_GetString+0x52>
 8007dd4:	e000      	b.n	8007dd8 <USBD_GetString+0x86>
    return;
 8007dd6:	bf00      	nop
  }
}
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b085      	sub	sp, #20
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007dee:	e005      	b.n	8007dfc <USBD_GetLen+0x1e>
  {
    len++;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	3301      	adds	r3, #1
 8007df4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f5      	bne.n	8007df0 <USBD_GetLen+0x12>
  }

  return len;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	2100      	movs	r1, #0
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 fcfe 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	2100      	movs	r1, #0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fced 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2203      	movs	r2, #3
 8007e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	2100      	movs	r1, #0
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fcf1 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fce0 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2100      	movs	r1, #0
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fcac 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2205      	movs	r2, #5
 8007ef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007efc:	2300      	movs	r3, #0
 8007efe:	2200      	movs	r2, #0
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fcba 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4912      	ldr	r1, [pc, #72]	; (8007f64 <MX_USB_DEVICE_Init+0x50>)
 8007f1c:	4812      	ldr	r0, [pc, #72]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f1e:	f7fe fef3 	bl	8006d08 <USBD_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f28:	f7f9 fb7a 	bl	8001620 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f2c:	490f      	ldr	r1, [pc, #60]	; (8007f6c <MX_USB_DEVICE_Init+0x58>)
 8007f2e:	480e      	ldr	r0, [pc, #56]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f30:	f7fe ff20 	bl	8006d74 <USBD_RegisterClass>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f3a:	f7f9 fb71 	bl	8001620 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f3e:	490c      	ldr	r1, [pc, #48]	; (8007f70 <MX_USB_DEVICE_Init+0x5c>)
 8007f40:	4809      	ldr	r0, [pc, #36]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f42:	f7fe fe45 	bl	8006bd0 <USBD_CDC_RegisterInterface>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f4c:	f7f9 fb68 	bl	8001620 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f50:	4805      	ldr	r0, [pc, #20]	; (8007f68 <MX_USB_DEVICE_Init+0x54>)
 8007f52:	f7fe ff30 	bl	8006db6 <USBD_Start>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f5c:	f7f9 fb60 	bl	8001620 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f60:	bf00      	nop
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000138 	.word	0x20000138
 8007f68:	200004e4 	.word	0x200004e4
 8007f6c:	20000018 	.word	0x20000018
 8007f70:	20000124 	.word	0x20000124

08007f74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4905      	ldr	r1, [pc, #20]	; (8007f90 <CDC_Init_FS+0x1c>)
 8007f7c:	4805      	ldr	r0, [pc, #20]	; (8007f94 <CDC_Init_FS+0x20>)
 8007f7e:	f7fe fe3c 	bl	8006bfa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f82:	4905      	ldr	r1, [pc, #20]	; (8007f98 <CDC_Init_FS+0x24>)
 8007f84:	4803      	ldr	r0, [pc, #12]	; (8007f94 <CDC_Init_FS+0x20>)
 8007f86:	f7fe fe51 	bl	8006c2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000fb4 	.word	0x20000fb4
 8007f94:	200004e4 	.word	0x200004e4
 8007f98:	200007b4 	.word	0x200007b4

08007f9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	2b23      	cmp	r3, #35	; 0x23
 8007fc0:	d85c      	bhi.n	800807c <CDC_Control_FS+0xd0>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <CDC_Control_FS+0x1c>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	0800807d 	.word	0x0800807d
 8007fcc:	0800807d 	.word	0x0800807d
 8007fd0:	0800807d 	.word	0x0800807d
 8007fd4:	0800807d 	.word	0x0800807d
 8007fd8:	0800807d 	.word	0x0800807d
 8007fdc:	0800807d 	.word	0x0800807d
 8007fe0:	0800807d 	.word	0x0800807d
 8007fe4:	0800807d 	.word	0x0800807d
 8007fe8:	0800807d 	.word	0x0800807d
 8007fec:	0800807d 	.word	0x0800807d
 8007ff0:	0800807d 	.word	0x0800807d
 8007ff4:	0800807d 	.word	0x0800807d
 8007ff8:	0800807d 	.word	0x0800807d
 8007ffc:	0800807d 	.word	0x0800807d
 8008000:	0800807d 	.word	0x0800807d
 8008004:	0800807d 	.word	0x0800807d
 8008008:	0800807d 	.word	0x0800807d
 800800c:	0800807d 	.word	0x0800807d
 8008010:	0800807d 	.word	0x0800807d
 8008014:	0800807d 	.word	0x0800807d
 8008018:	0800807d 	.word	0x0800807d
 800801c:	0800807d 	.word	0x0800807d
 8008020:	0800807d 	.word	0x0800807d
 8008024:	0800807d 	.word	0x0800807d
 8008028:	0800807d 	.word	0x0800807d
 800802c:	0800807d 	.word	0x0800807d
 8008030:	0800807d 	.word	0x0800807d
 8008034:	0800807d 	.word	0x0800807d
 8008038:	0800807d 	.word	0x0800807d
 800803c:	0800807d 	.word	0x0800807d
 8008040:	0800807d 	.word	0x0800807d
 8008044:	0800807d 	.word	0x0800807d
 8008048:	08008059 	.word	0x08008059
 800804c:	0800806b 	.word	0x0800806b
 8008050:	0800807d 	.word	0x0800807d
 8008054:	0800807d 	.word	0x0800807d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008058:	4b0c      	ldr	r3, [pc, #48]	; (800808c <CDC_Control_FS+0xe0>)
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	6810      	ldr	r0, [r2, #0]
 800805e:	6018      	str	r0, [r3, #0]
 8008060:	8891      	ldrh	r1, [r2, #4]
 8008062:	7992      	ldrb	r2, [r2, #6]
 8008064:	8099      	strh	r1, [r3, #4]
 8008066:	719a      	strb	r2, [r3, #6]
    break;
 8008068:	e009      	b.n	800807e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	4a07      	ldr	r2, [pc, #28]	; (800808c <CDC_Control_FS+0xe0>)
 800806e:	6810      	ldr	r0, [r2, #0]
 8008070:	6018      	str	r0, [r3, #0]
 8008072:	8891      	ldrh	r1, [r2, #4]
 8008074:	7992      	ldrb	r2, [r2, #6]
 8008076:	8099      	strh	r1, [r3, #4]
 8008078:	719a      	strb	r2, [r3, #6]
    break;
 800807a:	e000      	b.n	800807e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800807c:	bf00      	nop
  }

  return (USBD_OK);
 800807e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	2000011c 	.word	0x2000011c

08008090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	4805      	ldr	r0, [pc, #20]	; (80080b4 <CDC_Receive_FS+0x24>)
 800809e:	f7fe fdc5 	bl	8006c2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080a2:	4804      	ldr	r0, [pc, #16]	; (80080b4 <CDC_Receive_FS+0x24>)
 80080a4:	f7fe fe06 	bl	8006cb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200004e4 	.word	0x200004e4

080080b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080c8:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <CDC_Transmit_FS+0x48>)
 80080ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080da:	2301      	movs	r3, #1
 80080dc:	e00b      	b.n	80080f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080de:	887b      	ldrh	r3, [r7, #2]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4806      	ldr	r0, [pc, #24]	; (8008100 <CDC_Transmit_FS+0x48>)
 80080e6:	f7fe fd88 	bl	8006bfa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080ea:	4805      	ldr	r0, [pc, #20]	; (8008100 <CDC_Transmit_FS+0x48>)
 80080ec:	f7fe fdb2 	bl	8006c54 <USBD_CDC_TransmitPacket>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	200004e4 	.word	0x200004e4

08008104 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800811a:	4618      	mov	r0, r3
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	6039      	str	r1, [r7, #0]
 8008132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2212      	movs	r2, #18
 8008138:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800813a:	4b03      	ldr	r3, [pc, #12]	; (8008148 <USBD_FS_DeviceDescriptor+0x20>)
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	20000154 	.word	0x20000154

0800814c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2204      	movs	r2, #4
 800815c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800815e:	4b03      	ldr	r3, [pc, #12]	; (800816c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	20000168 	.word	0x20000168

08008170 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	6039      	str	r1, [r7, #0]
 800817a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d105      	bne.n	800818e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4907      	ldr	r1, [pc, #28]	; (80081a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008186:	4808      	ldr	r0, [pc, #32]	; (80081a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008188:	f7ff fde3 	bl	8007d52 <USBD_GetString>
 800818c:	e004      	b.n	8008198 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	4904      	ldr	r1, [pc, #16]	; (80081a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008192:	4805      	ldr	r0, [pc, #20]	; (80081a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008194:	f7ff fddd 	bl	8007d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008198:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	200017b4 	.word	0x200017b4
 80081a8:	0800aa58 	.word	0x0800aa58

080081ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	6039      	str	r1, [r7, #0]
 80081b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	4904      	ldr	r1, [pc, #16]	; (80081cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081bc:	4804      	ldr	r0, [pc, #16]	; (80081d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081be:	f7ff fdc8 	bl	8007d52 <USBD_GetString>
  return USBD_StrDesc;
 80081c2:	4b02      	ldr	r3, [pc, #8]	; (80081cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	200017b4 	.word	0x200017b4
 80081d0:	0800aa70 	.word	0x0800aa70

080081d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	221a      	movs	r2, #26
 80081e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081e6:	f000 f843 	bl	8008270 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081ea:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	2000016c 	.word	0x2000016c

080081f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4907      	ldr	r1, [pc, #28]	; (800822c <USBD_FS_ConfigStrDescriptor+0x34>)
 800820e:	4808      	ldr	r0, [pc, #32]	; (8008230 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008210:	f7ff fd9f 	bl	8007d52 <USBD_GetString>
 8008214:	e004      	b.n	8008220 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4904      	ldr	r1, [pc, #16]	; (800822c <USBD_FS_ConfigStrDescriptor+0x34>)
 800821a:	4805      	ldr	r0, [pc, #20]	; (8008230 <USBD_FS_ConfigStrDescriptor+0x38>)
 800821c:	f7ff fd99 	bl	8007d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008220:	4b02      	ldr	r3, [pc, #8]	; (800822c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	200017b4 	.word	0x200017b4
 8008230:	0800aa84 	.word	0x0800aa84

08008234 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	6039      	str	r1, [r7, #0]
 800823e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d105      	bne.n	8008252 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	4907      	ldr	r1, [pc, #28]	; (8008268 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800824a:	4808      	ldr	r0, [pc, #32]	; (800826c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800824c:	f7ff fd81 	bl	8007d52 <USBD_GetString>
 8008250:	e004      	b.n	800825c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4904      	ldr	r1, [pc, #16]	; (8008268 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008256:	4805      	ldr	r0, [pc, #20]	; (800826c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008258:	f7ff fd7b 	bl	8007d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800825c:	4b02      	ldr	r3, [pc, #8]	; (8008268 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	200017b4 	.word	0x200017b4
 800826c:	0800aa90 	.word	0x0800aa90

08008270 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <Get_SerialNum+0x44>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800827c:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <Get_SerialNum+0x48>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008282:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <Get_SerialNum+0x4c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008296:	2208      	movs	r2, #8
 8008298:	4909      	ldr	r1, [pc, #36]	; (80082c0 <Get_SerialNum+0x50>)
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 f814 	bl	80082c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082a0:	2204      	movs	r2, #4
 80082a2:	4908      	ldr	r1, [pc, #32]	; (80082c4 <Get_SerialNum+0x54>)
 80082a4:	68b8      	ldr	r0, [r7, #8]
 80082a6:	f000 f80f 	bl	80082c8 <IntToUnicode>
  }
}
 80082aa:	bf00      	nop
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	1fff7a10 	.word	0x1fff7a10
 80082b8:	1fff7a14 	.word	0x1fff7a14
 80082bc:	1fff7a18 	.word	0x1fff7a18
 80082c0:	2000016e 	.word	0x2000016e
 80082c4:	2000017e 	.word	0x2000017e

080082c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082da:	2300      	movs	r3, #0
 80082dc:	75fb      	strb	r3, [r7, #23]
 80082de:	e027      	b.n	8008330 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	0f1b      	lsrs	r3, r3, #28
 80082e4:	2b09      	cmp	r3, #9
 80082e6:	d80b      	bhi.n	8008300 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	0f1b      	lsrs	r3, r3, #28
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	4619      	mov	r1, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	440b      	add	r3, r1
 80082f8:	3230      	adds	r2, #48	; 0x30
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	e00a      	b.n	8008316 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	0f1b      	lsrs	r3, r3, #28
 8008304:	b2da      	uxtb	r2, r3
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	4619      	mov	r1, r3
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	440b      	add	r3, r1
 8008310:	3237      	adds	r2, #55	; 0x37
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	3301      	adds	r3, #1
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	4413      	add	r3, r2
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	3301      	adds	r3, #1
 800832e:	75fb      	strb	r3, [r7, #23]
 8008330:	7dfa      	ldrb	r2, [r7, #23]
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	429a      	cmp	r2, r3
 8008336:	d3d3      	bcc.n	80082e0 <IntToUnicode+0x18>
  }
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	605a      	str	r2, [r3, #4]
 8008356:	609a      	str	r2, [r3, #8]
 8008358:	60da      	str	r2, [r3, #12]
 800835a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008364:	d13a      	bne.n	80083dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <HAL_PCD_MspInit+0xa0>)
 800836c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836e:	4a1d      	ldr	r2, [pc, #116]	; (80083e4 <HAL_PCD_MspInit+0xa0>)
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	6313      	str	r3, [r2, #48]	; 0x30
 8008376:	4b1b      	ldr	r3, [pc, #108]	; (80083e4 <HAL_PCD_MspInit+0xa0>)
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	613b      	str	r3, [r7, #16]
 8008380:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008382:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008388:	2302      	movs	r3, #2
 800838a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800838c:	2300      	movs	r3, #0
 800838e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008390:	2303      	movs	r3, #3
 8008392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008394:	230a      	movs	r3, #10
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008398:	f107 0314 	add.w	r3, r7, #20
 800839c:	4619      	mov	r1, r3
 800839e:	4812      	ldr	r0, [pc, #72]	; (80083e8 <HAL_PCD_MspInit+0xa4>)
 80083a0:	f7f9 fc64 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <HAL_PCD_MspInit+0xa0>)
 80083a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a8:	4a0e      	ldr	r2, [pc, #56]	; (80083e4 <HAL_PCD_MspInit+0xa0>)
 80083aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ae:	6353      	str	r3, [r2, #52]	; 0x34
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <HAL_PCD_MspInit+0xa0>)
 80083b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b8:	4a0a      	ldr	r2, [pc, #40]	; (80083e4 <HAL_PCD_MspInit+0xa0>)
 80083ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083be:	6453      	str	r3, [r2, #68]	; 0x44
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <HAL_PCD_MspInit+0xa0>)
 80083c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 80083cc:	2200      	movs	r2, #0
 80083ce:	2101      	movs	r1, #1
 80083d0:	2043      	movs	r0, #67	; 0x43
 80083d2:	f7f9 fc14 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083d6:	2043      	movs	r0, #67	; 0x43
 80083d8:	f7f9 fc2d 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083dc:	bf00      	nop
 80083de:	3728      	adds	r7, #40	; 0x28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40020000 	.word	0x40020000

080083ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008400:	4619      	mov	r1, r3
 8008402:	4610      	mov	r0, r2
 8008404:	f7fe fd22 	bl	8006e4c <USBD_LL_SetupStage>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008422:	78fa      	ldrb	r2, [r7, #3]
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	1a9b      	subs	r3, r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	4619      	mov	r1, r3
 800843a:	f7fe fd5a 	bl	8006ef2 <USBD_LL_DataOutStage>
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4613      	mov	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	3348      	adds	r3, #72	; 0x48
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	4619      	mov	r1, r3
 800846e:	f7fe fda3 	bl	8006fb8 <USBD_LL_DataInStage>
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fea7 	bl	80071dc <USBD_LL_SOF>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d102      	bne.n	80084b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
 80084ae:	e008      	b.n	80084c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d102      	bne.n	80084be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084b8:	2301      	movs	r3, #1
 80084ba:	73fb      	strb	r3, [r7, #15]
 80084bc:	e001      	b.n	80084c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084be:	f7f9 f8af 	bl	8001620 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fe fe4a 	bl	8007166 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fe03 	bl	80070e4 <USBD_LL_Reset>
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe fe45 	bl	8007186 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800850e:	f043 0301 	orr.w	r3, r3, #1
 8008512:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <HAL_PCD_SuspendCallback+0x48>)
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	4a03      	ldr	r2, [pc, #12]	; (8008530 <HAL_PCD_SuspendCallback+0x48>)
 8008522:	f043 0306 	orr.w	r3, r3, #6
 8008526:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fe34 	bl	80071b0 <USBD_LL_Resume>
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008562:	78fa      	ldrb	r2, [r7, #3]
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fe5f 	bl	800722a <USBD_LL_IsoOUTIncomplete>
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fe40 	bl	8007210 <USBD_LL_IsoINIncomplete>
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fe4c 	bl	8007244 <USBD_LL_DevConnected>
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fe49 	bl	800725a <USBD_LL_DevDisconnected>
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d13c      	bne.n	800865a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085e0:	4a20      	ldr	r2, [pc, #128]	; (8008664 <USBD_LL_Init+0x94>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <USBD_LL_Init+0x94>)
 80085ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085f0:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <USBD_LL_Init+0x94>)
 80085f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <USBD_LL_Init+0x94>)
 80085fa:	2204      	movs	r2, #4
 80085fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085fe:	4b19      	ldr	r3, [pc, #100]	; (8008664 <USBD_LL_Init+0x94>)
 8008600:	2202      	movs	r2, #2
 8008602:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008604:	4b17      	ldr	r3, [pc, #92]	; (8008664 <USBD_LL_Init+0x94>)
 8008606:	2200      	movs	r2, #0
 8008608:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800860a:	4b16      	ldr	r3, [pc, #88]	; (8008664 <USBD_LL_Init+0x94>)
 800860c:	2202      	movs	r2, #2
 800860e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008610:	4b14      	ldr	r3, [pc, #80]	; (8008664 <USBD_LL_Init+0x94>)
 8008612:	2200      	movs	r2, #0
 8008614:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <USBD_LL_Init+0x94>)
 8008618:	2200      	movs	r2, #0
 800861a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800861c:	4b11      	ldr	r3, [pc, #68]	; (8008664 <USBD_LL_Init+0x94>)
 800861e:	2200      	movs	r2, #0
 8008620:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <USBD_LL_Init+0x94>)
 8008624:	2200      	movs	r2, #0
 8008626:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008628:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <USBD_LL_Init+0x94>)
 800862a:	2200      	movs	r2, #0
 800862c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800862e:	480d      	ldr	r0, [pc, #52]	; (8008664 <USBD_LL_Init+0x94>)
 8008630:	f7fa fc9b 	bl	8002f6a <HAL_PCD_Init>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800863a:	f7f8 fff1 	bl	8001620 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800863e:	2180      	movs	r1, #128	; 0x80
 8008640:	4808      	ldr	r0, [pc, #32]	; (8008664 <USBD_LL_Init+0x94>)
 8008642:	f7fb fdf8 	bl	8004236 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	2100      	movs	r1, #0
 800864a:	4806      	ldr	r0, [pc, #24]	; (8008664 <USBD_LL_Init+0x94>)
 800864c:	f7fb fdac 	bl	80041a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008650:	2280      	movs	r2, #128	; 0x80
 8008652:	2101      	movs	r1, #1
 8008654:	4803      	ldr	r0, [pc, #12]	; (8008664 <USBD_LL_Init+0x94>)
 8008656:	f7fb fda7 	bl	80041a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	200019b4 	.word	0x200019b4

08008668 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800867e:	4618      	mov	r0, r3
 8008680:	f7fa fd90 	bl	80031a4 <HAL_PCD_Start>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f92a 	bl	80088e4 <USBD_Get_USB_Status>
 8008690:	4603      	mov	r3, r0
 8008692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008694:	7bbb      	ldrb	r3, [r7, #14]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	461a      	mov	r2, r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	70fb      	strb	r3, [r7, #3]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70bb      	strb	r3, [r7, #2]
 80086b4:	4613      	mov	r3, r2
 80086b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086c6:	78bb      	ldrb	r3, [r7, #2]
 80086c8:	883a      	ldrh	r2, [r7, #0]
 80086ca:	78f9      	ldrb	r1, [r7, #3]
 80086cc:	f7fb f974 	bl	80039b8 <HAL_PCD_EP_Open>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f904 	bl	80088e4 <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7fb f9bd 	bl	8003a88 <HAL_PCD_EP_Close>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f8e5 	bl	80088e4 <USBD_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7fb fa95 	bl	8003c76 <HAL_PCD_EP_SetStall>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f8c6 	bl	80088e4 <USBD_Get_USB_Status>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875c:	7bbb      	ldrb	r3, [r7, #14]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7fb fada 	bl	8003d3e <HAL_PCD_EP_ClrStall>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f8a7 	bl	80088e4 <USBD_Get_USB_Status>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879a:	7bbb      	ldrb	r3, [r7, #14]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da0b      	bge.n	80087d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	4613      	mov	r3, r2
 80087ca:	00db      	lsls	r3, r3, #3
 80087cc:	1a9b      	subs	r3, r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	333e      	adds	r3, #62	; 0x3e
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	e00b      	b.n	80087f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087de:	68f9      	ldr	r1, [r7, #12]
 80087e0:	4613      	mov	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fb f8a7 	bl	800396e <HAL_PCD_SetAddress>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f85c 	bl	80088e4 <USBD_Get_USB_Status>
 800882c:	4603      	mov	r3, r0
 800882e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008830:	7bbb      	ldrb	r3, [r7, #14]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
 8008846:	460b      	mov	r3, r1
 8008848:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008858:	7af9      	ldrb	r1, [r7, #11]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	f7fb f9c0 	bl	8003be2 <HAL_PCD_EP_Transmit>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f83b 	bl	80088e4 <USBD_Get_USB_Status>
 800886e:	4603      	mov	r3, r0
 8008870:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008872:	7dbb      	ldrb	r3, [r7, #22]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	460b      	mov	r3, r1
 800888a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800889a:	7af9      	ldrb	r1, [r7, #11]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	f7fb f93c 	bl	8003b1c <HAL_PCD_EP_Receive>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 f81a 	bl	80088e4 <USBD_Get_USB_Status>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fb f96c 	bl	8003bb2 <HAL_PCD_EP_GetRxCount>
 80088da:	4603      	mov	r3, r0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d817      	bhi.n	8008928 <USBD_Get_USB_Status+0x44>
 80088f8:	a201      	add	r2, pc, #4	; (adr r2, 8008900 <USBD_Get_USB_Status+0x1c>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008911 	.word	0x08008911
 8008904:	08008917 	.word	0x08008917
 8008908:	0800891d 	.word	0x0800891d
 800890c:	08008923 	.word	0x08008923
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
    break;
 8008914:	e00b      	b.n	800892e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	73fb      	strb	r3, [r7, #15]
    break;
 800891a:	e008      	b.n	800892e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800891c:	2301      	movs	r3, #1
 800891e:	73fb      	strb	r3, [r7, #15]
    break;
 8008920:	e005      	b.n	800892e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008922:	2303      	movs	r3, #3
 8008924:	73fb      	strb	r3, [r7, #15]
    break;
 8008926:	e002      	b.n	800892e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008928:	2303      	movs	r3, #3
 800892a:	73fb      	strb	r3, [r7, #15]
    break;
 800892c:	bf00      	nop
  }
  return usb_status;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <__errno>:
 800893c:	4b01      	ldr	r3, [pc, #4]	; (8008944 <__errno+0x8>)
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000188 	.word	0x20000188

08008948 <__libc_init_array>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	4e0d      	ldr	r6, [pc, #52]	; (8008980 <__libc_init_array+0x38>)
 800894c:	4c0d      	ldr	r4, [pc, #52]	; (8008984 <__libc_init_array+0x3c>)
 800894e:	1ba4      	subs	r4, r4, r6
 8008950:	10a4      	asrs	r4, r4, #2
 8008952:	2500      	movs	r5, #0
 8008954:	42a5      	cmp	r5, r4
 8008956:	d109      	bne.n	800896c <__libc_init_array+0x24>
 8008958:	4e0b      	ldr	r6, [pc, #44]	; (8008988 <__libc_init_array+0x40>)
 800895a:	4c0c      	ldr	r4, [pc, #48]	; (800898c <__libc_init_array+0x44>)
 800895c:	f002 f864 	bl	800aa28 <_init>
 8008960:	1ba4      	subs	r4, r4, r6
 8008962:	10a4      	asrs	r4, r4, #2
 8008964:	2500      	movs	r5, #0
 8008966:	42a5      	cmp	r5, r4
 8008968:	d105      	bne.n	8008976 <__libc_init_array+0x2e>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008970:	4798      	blx	r3
 8008972:	3501      	adds	r5, #1
 8008974:	e7ee      	b.n	8008954 <__libc_init_array+0xc>
 8008976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800897a:	4798      	blx	r3
 800897c:	3501      	adds	r5, #1
 800897e:	e7f2      	b.n	8008966 <__libc_init_array+0x1e>
 8008980:	0800ad20 	.word	0x0800ad20
 8008984:	0800ad20 	.word	0x0800ad20
 8008988:	0800ad20 	.word	0x0800ad20
 800898c:	0800ad24 	.word	0x0800ad24

08008990 <malloc>:
 8008990:	4b02      	ldr	r3, [pc, #8]	; (800899c <malloc+0xc>)
 8008992:	4601      	mov	r1, r0
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	f000 b861 	b.w	8008a5c <_malloc_r>
 800899a:	bf00      	nop
 800899c:	20000188 	.word	0x20000188

080089a0 <free>:
 80089a0:	4b02      	ldr	r3, [pc, #8]	; (80089ac <free+0xc>)
 80089a2:	4601      	mov	r1, r0
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	f000 b80b 	b.w	80089c0 <_free_r>
 80089aa:	bf00      	nop
 80089ac:	20000188 	.word	0x20000188

080089b0 <memset>:
 80089b0:	4402      	add	r2, r0
 80089b2:	4603      	mov	r3, r0
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d100      	bne.n	80089ba <memset+0xa>
 80089b8:	4770      	bx	lr
 80089ba:	f803 1b01 	strb.w	r1, [r3], #1
 80089be:	e7f9      	b.n	80089b4 <memset+0x4>

080089c0 <_free_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4605      	mov	r5, r0
 80089c4:	2900      	cmp	r1, #0
 80089c6:	d045      	beq.n	8008a54 <_free_r+0x94>
 80089c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089cc:	1f0c      	subs	r4, r1, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfb8      	it	lt
 80089d2:	18e4      	addlt	r4, r4, r3
 80089d4:	f001 fb85 	bl	800a0e2 <__malloc_lock>
 80089d8:	4a1f      	ldr	r2, [pc, #124]	; (8008a58 <_free_r+0x98>)
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	4610      	mov	r0, r2
 80089de:	b933      	cbnz	r3, 80089ee <_free_r+0x2e>
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	6014      	str	r4, [r2, #0]
 80089e4:	4628      	mov	r0, r5
 80089e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ea:	f001 bb7b 	b.w	800a0e4 <__malloc_unlock>
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	d90c      	bls.n	8008a0c <_free_r+0x4c>
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	1862      	adds	r2, r4, r1
 80089f6:	4293      	cmp	r3, r2
 80089f8:	bf04      	itt	eq
 80089fa:	681a      	ldreq	r2, [r3, #0]
 80089fc:	685b      	ldreq	r3, [r3, #4]
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	bf04      	itt	eq
 8008a02:	1852      	addeq	r2, r2, r1
 8008a04:	6022      	streq	r2, [r4, #0]
 8008a06:	6004      	str	r4, [r0, #0]
 8008a08:	e7ec      	b.n	80089e4 <_free_r+0x24>
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	b10a      	cbz	r2, 8008a14 <_free_r+0x54>
 8008a10:	42a2      	cmp	r2, r4
 8008a12:	d9fa      	bls.n	8008a0a <_free_r+0x4a>
 8008a14:	6819      	ldr	r1, [r3, #0]
 8008a16:	1858      	adds	r0, r3, r1
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d10b      	bne.n	8008a34 <_free_r+0x74>
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	4401      	add	r1, r0
 8008a20:	1858      	adds	r0, r3, r1
 8008a22:	4282      	cmp	r2, r0
 8008a24:	6019      	str	r1, [r3, #0]
 8008a26:	d1dd      	bne.n	80089e4 <_free_r+0x24>
 8008a28:	6810      	ldr	r0, [r2, #0]
 8008a2a:	6852      	ldr	r2, [r2, #4]
 8008a2c:	605a      	str	r2, [r3, #4]
 8008a2e:	4401      	add	r1, r0
 8008a30:	6019      	str	r1, [r3, #0]
 8008a32:	e7d7      	b.n	80089e4 <_free_r+0x24>
 8008a34:	d902      	bls.n	8008a3c <_free_r+0x7c>
 8008a36:	230c      	movs	r3, #12
 8008a38:	602b      	str	r3, [r5, #0]
 8008a3a:	e7d3      	b.n	80089e4 <_free_r+0x24>
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	1821      	adds	r1, r4, r0
 8008a40:	428a      	cmp	r2, r1
 8008a42:	bf04      	itt	eq
 8008a44:	6811      	ldreq	r1, [r2, #0]
 8008a46:	6852      	ldreq	r2, [r2, #4]
 8008a48:	6062      	str	r2, [r4, #4]
 8008a4a:	bf04      	itt	eq
 8008a4c:	1809      	addeq	r1, r1, r0
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	605c      	str	r4, [r3, #4]
 8008a52:	e7c7      	b.n	80089e4 <_free_r+0x24>
 8008a54:	bd38      	pop	{r3, r4, r5, pc}
 8008a56:	bf00      	nop
 8008a58:	20000398 	.word	0x20000398

08008a5c <_malloc_r>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	1ccd      	adds	r5, r1, #3
 8008a60:	f025 0503 	bic.w	r5, r5, #3
 8008a64:	3508      	adds	r5, #8
 8008a66:	2d0c      	cmp	r5, #12
 8008a68:	bf38      	it	cc
 8008a6a:	250c      	movcc	r5, #12
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	4606      	mov	r6, r0
 8008a70:	db01      	blt.n	8008a76 <_malloc_r+0x1a>
 8008a72:	42a9      	cmp	r1, r5
 8008a74:	d903      	bls.n	8008a7e <_malloc_r+0x22>
 8008a76:	230c      	movs	r3, #12
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	f001 fb30 	bl	800a0e2 <__malloc_lock>
 8008a82:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <_malloc_r+0xac>)
 8008a84:	6814      	ldr	r4, [r2, #0]
 8008a86:	4621      	mov	r1, r4
 8008a88:	b991      	cbnz	r1, 8008ab0 <_malloc_r+0x54>
 8008a8a:	4c20      	ldr	r4, [pc, #128]	; (8008b0c <_malloc_r+0xb0>)
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	b91b      	cbnz	r3, 8008a98 <_malloc_r+0x3c>
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 fc99 	bl	80093c8 <_sbrk_r>
 8008a96:	6020      	str	r0, [r4, #0]
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 fc94 	bl	80093c8 <_sbrk_r>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d124      	bne.n	8008aee <_malloc_r+0x92>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f001 fb1b 	bl	800a0e4 <__malloc_unlock>
 8008aae:	e7e4      	b.n	8008a7a <_malloc_r+0x1e>
 8008ab0:	680b      	ldr	r3, [r1, #0]
 8008ab2:	1b5b      	subs	r3, r3, r5
 8008ab4:	d418      	bmi.n	8008ae8 <_malloc_r+0x8c>
 8008ab6:	2b0b      	cmp	r3, #11
 8008ab8:	d90f      	bls.n	8008ada <_malloc_r+0x7e>
 8008aba:	600b      	str	r3, [r1, #0]
 8008abc:	50cd      	str	r5, [r1, r3]
 8008abe:	18cc      	adds	r4, r1, r3
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f001 fb0f 	bl	800a0e4 <__malloc_unlock>
 8008ac6:	f104 000b 	add.w	r0, r4, #11
 8008aca:	1d23      	adds	r3, r4, #4
 8008acc:	f020 0007 	bic.w	r0, r0, #7
 8008ad0:	1ac3      	subs	r3, r0, r3
 8008ad2:	d0d3      	beq.n	8008a7c <_malloc_r+0x20>
 8008ad4:	425a      	negs	r2, r3
 8008ad6:	50e2      	str	r2, [r4, r3]
 8008ad8:	e7d0      	b.n	8008a7c <_malloc_r+0x20>
 8008ada:	428c      	cmp	r4, r1
 8008adc:	684b      	ldr	r3, [r1, #4]
 8008ade:	bf16      	itet	ne
 8008ae0:	6063      	strne	r3, [r4, #4]
 8008ae2:	6013      	streq	r3, [r2, #0]
 8008ae4:	460c      	movne	r4, r1
 8008ae6:	e7eb      	b.n	8008ac0 <_malloc_r+0x64>
 8008ae8:	460c      	mov	r4, r1
 8008aea:	6849      	ldr	r1, [r1, #4]
 8008aec:	e7cc      	b.n	8008a88 <_malloc_r+0x2c>
 8008aee:	1cc4      	adds	r4, r0, #3
 8008af0:	f024 0403 	bic.w	r4, r4, #3
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	d005      	beq.n	8008b04 <_malloc_r+0xa8>
 8008af8:	1a21      	subs	r1, r4, r0
 8008afa:	4630      	mov	r0, r6
 8008afc:	f000 fc64 	bl	80093c8 <_sbrk_r>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d0cf      	beq.n	8008aa4 <_malloc_r+0x48>
 8008b04:	6025      	str	r5, [r4, #0]
 8008b06:	e7db      	b.n	8008ac0 <_malloc_r+0x64>
 8008b08:	20000398 	.word	0x20000398
 8008b0c:	2000039c 	.word	0x2000039c

08008b10 <__cvt>:
 8008b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	ec55 4b10 	vmov	r4, r5, d0
 8008b18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008b1a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	460e      	mov	r6, r1
 8008b22:	4691      	mov	r9, r2
 8008b24:	4619      	mov	r1, r3
 8008b26:	bfb8      	it	lt
 8008b28:	4622      	movlt	r2, r4
 8008b2a:	462b      	mov	r3, r5
 8008b2c:	f027 0720 	bic.w	r7, r7, #32
 8008b30:	bfbb      	ittet	lt
 8008b32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b36:	461d      	movlt	r5, r3
 8008b38:	2300      	movge	r3, #0
 8008b3a:	232d      	movlt	r3, #45	; 0x2d
 8008b3c:	bfb8      	it	lt
 8008b3e:	4614      	movlt	r4, r2
 8008b40:	2f46      	cmp	r7, #70	; 0x46
 8008b42:	700b      	strb	r3, [r1, #0]
 8008b44:	d004      	beq.n	8008b50 <__cvt+0x40>
 8008b46:	2f45      	cmp	r7, #69	; 0x45
 8008b48:	d100      	bne.n	8008b4c <__cvt+0x3c>
 8008b4a:	3601      	adds	r6, #1
 8008b4c:	2102      	movs	r1, #2
 8008b4e:	e000      	b.n	8008b52 <__cvt+0x42>
 8008b50:	2103      	movs	r1, #3
 8008b52:	ab03      	add	r3, sp, #12
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	ab02      	add	r3, sp, #8
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	4653      	mov	r3, sl
 8008b5e:	ec45 4b10 	vmov	d0, r4, r5
 8008b62:	f000 fced 	bl	8009540 <_dtoa_r>
 8008b66:	2f47      	cmp	r7, #71	; 0x47
 8008b68:	4680      	mov	r8, r0
 8008b6a:	d102      	bne.n	8008b72 <__cvt+0x62>
 8008b6c:	f019 0f01 	tst.w	r9, #1
 8008b70:	d026      	beq.n	8008bc0 <__cvt+0xb0>
 8008b72:	2f46      	cmp	r7, #70	; 0x46
 8008b74:	eb08 0906 	add.w	r9, r8, r6
 8008b78:	d111      	bne.n	8008b9e <__cvt+0x8e>
 8008b7a:	f898 3000 	ldrb.w	r3, [r8]
 8008b7e:	2b30      	cmp	r3, #48	; 0x30
 8008b80:	d10a      	bne.n	8008b98 <__cvt+0x88>
 8008b82:	2200      	movs	r2, #0
 8008b84:	2300      	movs	r3, #0
 8008b86:	4620      	mov	r0, r4
 8008b88:	4629      	mov	r1, r5
 8008b8a:	f7f7 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b8e:	b918      	cbnz	r0, 8008b98 <__cvt+0x88>
 8008b90:	f1c6 0601 	rsb	r6, r6, #1
 8008b94:	f8ca 6000 	str.w	r6, [sl]
 8008b98:	f8da 3000 	ldr.w	r3, [sl]
 8008b9c:	4499      	add	r9, r3
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	f7f7 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008baa:	b938      	cbnz	r0, 8008bbc <__cvt+0xac>
 8008bac:	2230      	movs	r2, #48	; 0x30
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	454b      	cmp	r3, r9
 8008bb2:	d205      	bcs.n	8008bc0 <__cvt+0xb0>
 8008bb4:	1c59      	adds	r1, r3, #1
 8008bb6:	9103      	str	r1, [sp, #12]
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	e7f8      	b.n	8008bae <__cvt+0x9e>
 8008bbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bc4:	eba3 0308 	sub.w	r3, r3, r8
 8008bc8:	4640      	mov	r0, r8
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	b004      	add	sp, #16
 8008bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008bd2 <__exponent>:
 8008bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	bfba      	itte	lt
 8008bda:	4249      	neglt	r1, r1
 8008bdc:	232d      	movlt	r3, #45	; 0x2d
 8008bde:	232b      	movge	r3, #43	; 0x2b
 8008be0:	2909      	cmp	r1, #9
 8008be2:	f804 2b02 	strb.w	r2, [r4], #2
 8008be6:	7043      	strb	r3, [r0, #1]
 8008be8:	dd20      	ble.n	8008c2c <__exponent+0x5a>
 8008bea:	f10d 0307 	add.w	r3, sp, #7
 8008bee:	461f      	mov	r7, r3
 8008bf0:	260a      	movs	r6, #10
 8008bf2:	fb91 f5f6 	sdiv	r5, r1, r6
 8008bf6:	fb06 1115 	mls	r1, r6, r5, r1
 8008bfa:	3130      	adds	r1, #48	; 0x30
 8008bfc:	2d09      	cmp	r5, #9
 8008bfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c02:	f103 32ff 	add.w	r2, r3, #4294967295
 8008c06:	4629      	mov	r1, r5
 8008c08:	dc09      	bgt.n	8008c1e <__exponent+0x4c>
 8008c0a:	3130      	adds	r1, #48	; 0x30
 8008c0c:	3b02      	subs	r3, #2
 8008c0e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c12:	42bb      	cmp	r3, r7
 8008c14:	4622      	mov	r2, r4
 8008c16:	d304      	bcc.n	8008c22 <__exponent+0x50>
 8008c18:	1a10      	subs	r0, r2, r0
 8008c1a:	b003      	add	sp, #12
 8008c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1e:	4613      	mov	r3, r2
 8008c20:	e7e7      	b.n	8008bf2 <__exponent+0x20>
 8008c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c26:	f804 2b01 	strb.w	r2, [r4], #1
 8008c2a:	e7f2      	b.n	8008c12 <__exponent+0x40>
 8008c2c:	2330      	movs	r3, #48	; 0x30
 8008c2e:	4419      	add	r1, r3
 8008c30:	7083      	strb	r3, [r0, #2]
 8008c32:	1d02      	adds	r2, r0, #4
 8008c34:	70c1      	strb	r1, [r0, #3]
 8008c36:	e7ef      	b.n	8008c18 <__exponent+0x46>

08008c38 <_printf_float>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	b08d      	sub	sp, #52	; 0x34
 8008c3e:	460c      	mov	r4, r1
 8008c40:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008c44:	4616      	mov	r6, r2
 8008c46:	461f      	mov	r7, r3
 8008c48:	4605      	mov	r5, r0
 8008c4a:	f001 fa31 	bl	800a0b0 <_localeconv_r>
 8008c4e:	6803      	ldr	r3, [r0, #0]
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7f7 fabc 	bl	80001d0 <strlen>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c60:	9005      	str	r0, [sp, #20]
 8008c62:	3307      	adds	r3, #7
 8008c64:	f023 0307 	bic.w	r3, r3, #7
 8008c68:	f103 0208 	add.w	r2, r3, #8
 8008c6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c70:	f8d4 b000 	ldr.w	fp, [r4]
 8008c74:	f8c8 2000 	str.w	r2, [r8]
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c80:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c88:	9307      	str	r3, [sp, #28]
 8008c8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c92:	4ba7      	ldr	r3, [pc, #668]	; (8008f30 <_printf_float+0x2f8>)
 8008c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c98:	f7f7 ff48 	bl	8000b2c <__aeabi_dcmpun>
 8008c9c:	bb70      	cbnz	r0, 8008cfc <_printf_float+0xc4>
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca2:	4ba3      	ldr	r3, [pc, #652]	; (8008f30 <_printf_float+0x2f8>)
 8008ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ca8:	f7f7 ff22 	bl	8000af0 <__aeabi_dcmple>
 8008cac:	bb30      	cbnz	r0, 8008cfc <_printf_float+0xc4>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	f7f7 ff11 	bl	8000adc <__aeabi_dcmplt>
 8008cba:	b110      	cbz	r0, 8008cc2 <_printf_float+0x8a>
 8008cbc:	232d      	movs	r3, #45	; 0x2d
 8008cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc2:	4a9c      	ldr	r2, [pc, #624]	; (8008f34 <_printf_float+0x2fc>)
 8008cc4:	4b9c      	ldr	r3, [pc, #624]	; (8008f38 <_printf_float+0x300>)
 8008cc6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008cca:	bf8c      	ite	hi
 8008ccc:	4690      	movhi	r8, r2
 8008cce:	4698      	movls	r8, r3
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	f02b 0204 	bic.w	r2, fp, #4
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	6022      	str	r2, [r4, #0]
 8008cda:	f04f 0900 	mov.w	r9, #0
 8008cde:	9700      	str	r7, [sp, #0]
 8008ce0:	4633      	mov	r3, r6
 8008ce2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f000 f9e6 	bl	80090b8 <_printf_common>
 8008cec:	3001      	adds	r0, #1
 8008cee:	f040 808d 	bne.w	8008e0c <_printf_float+0x1d4>
 8008cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf6:	b00d      	add	sp, #52	; 0x34
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	464b      	mov	r3, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	4649      	mov	r1, r9
 8008d04:	f7f7 ff12 	bl	8000b2c <__aeabi_dcmpun>
 8008d08:	b110      	cbz	r0, 8008d10 <_printf_float+0xd8>
 8008d0a:	4a8c      	ldr	r2, [pc, #560]	; (8008f3c <_printf_float+0x304>)
 8008d0c:	4b8c      	ldr	r3, [pc, #560]	; (8008f40 <_printf_float+0x308>)
 8008d0e:	e7da      	b.n	8008cc6 <_printf_float+0x8e>
 8008d10:	6861      	ldr	r1, [r4, #4]
 8008d12:	1c4b      	adds	r3, r1, #1
 8008d14:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008d18:	a80a      	add	r0, sp, #40	; 0x28
 8008d1a:	d13e      	bne.n	8008d9a <_printf_float+0x162>
 8008d1c:	2306      	movs	r3, #6
 8008d1e:	6063      	str	r3, [r4, #4]
 8008d20:	2300      	movs	r3, #0
 8008d22:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008d26:	ab09      	add	r3, sp, #36	; 0x24
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	ec49 8b10 	vmov	d0, r8, r9
 8008d2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d32:	6022      	str	r2, [r4, #0]
 8008d34:	f8cd a004 	str.w	sl, [sp, #4]
 8008d38:	6861      	ldr	r1, [r4, #4]
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f7ff fee8 	bl	8008b10 <__cvt>
 8008d40:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008d44:	2b47      	cmp	r3, #71	; 0x47
 8008d46:	4680      	mov	r8, r0
 8008d48:	d109      	bne.n	8008d5e <_printf_float+0x126>
 8008d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4c:	1cd8      	adds	r0, r3, #3
 8008d4e:	db02      	blt.n	8008d56 <_printf_float+0x11e>
 8008d50:	6862      	ldr	r2, [r4, #4]
 8008d52:	4293      	cmp	r3, r2
 8008d54:	dd47      	ble.n	8008de6 <_printf_float+0x1ae>
 8008d56:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d5a:	fa5f fa8a 	uxtb.w	sl, sl
 8008d5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008d62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d64:	d824      	bhi.n	8008db0 <_printf_float+0x178>
 8008d66:	3901      	subs	r1, #1
 8008d68:	4652      	mov	r2, sl
 8008d6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d6e:	9109      	str	r1, [sp, #36]	; 0x24
 8008d70:	f7ff ff2f 	bl	8008bd2 <__exponent>
 8008d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d76:	1813      	adds	r3, r2, r0
 8008d78:	2a01      	cmp	r2, #1
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	dc02      	bgt.n	8008d86 <_printf_float+0x14e>
 8008d80:	6822      	ldr	r2, [r4, #0]
 8008d82:	07d1      	lsls	r1, r2, #31
 8008d84:	d501      	bpl.n	8008d8a <_printf_float+0x152>
 8008d86:	3301      	adds	r3, #1
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0a5      	beq.n	8008cde <_printf_float+0xa6>
 8008d92:	232d      	movs	r3, #45	; 0x2d
 8008d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d98:	e7a1      	b.n	8008cde <_printf_float+0xa6>
 8008d9a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008d9e:	f000 8177 	beq.w	8009090 <_printf_float+0x458>
 8008da2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008da6:	d1bb      	bne.n	8008d20 <_printf_float+0xe8>
 8008da8:	2900      	cmp	r1, #0
 8008daa:	d1b9      	bne.n	8008d20 <_printf_float+0xe8>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e7b6      	b.n	8008d1e <_printf_float+0xe6>
 8008db0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008db4:	d119      	bne.n	8008dea <_printf_float+0x1b2>
 8008db6:	2900      	cmp	r1, #0
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	dd0c      	ble.n	8008dd6 <_printf_float+0x19e>
 8008dbc:	6121      	str	r1, [r4, #16]
 8008dbe:	b913      	cbnz	r3, 8008dc6 <_printf_float+0x18e>
 8008dc0:	6822      	ldr	r2, [r4, #0]
 8008dc2:	07d2      	lsls	r2, r2, #31
 8008dc4:	d502      	bpl.n	8008dcc <_printf_float+0x194>
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	440b      	add	r3, r1
 8008dca:	6123      	str	r3, [r4, #16]
 8008dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dce:	65a3      	str	r3, [r4, #88]	; 0x58
 8008dd0:	f04f 0900 	mov.w	r9, #0
 8008dd4:	e7d9      	b.n	8008d8a <_printf_float+0x152>
 8008dd6:	b913      	cbnz	r3, 8008dde <_printf_float+0x1a6>
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	07d0      	lsls	r0, r2, #31
 8008ddc:	d501      	bpl.n	8008de2 <_printf_float+0x1aa>
 8008dde:	3302      	adds	r3, #2
 8008de0:	e7f3      	b.n	8008dca <_printf_float+0x192>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e7f1      	b.n	8008dca <_printf_float+0x192>
 8008de6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008dea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008dee:	4293      	cmp	r3, r2
 8008df0:	db05      	blt.n	8008dfe <_printf_float+0x1c6>
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	07d1      	lsls	r1, r2, #31
 8008df8:	d5e8      	bpl.n	8008dcc <_printf_float+0x194>
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	e7e5      	b.n	8008dca <_printf_float+0x192>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfd4      	ite	le
 8008e02:	f1c3 0302 	rsble	r3, r3, #2
 8008e06:	2301      	movgt	r3, #1
 8008e08:	4413      	add	r3, r2
 8008e0a:	e7de      	b.n	8008dca <_printf_float+0x192>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	055a      	lsls	r2, r3, #21
 8008e10:	d407      	bmi.n	8008e22 <_printf_float+0x1ea>
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	4642      	mov	r2, r8
 8008e16:	4631      	mov	r1, r6
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b8      	blx	r7
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d12b      	bne.n	8008e78 <_printf_float+0x240>
 8008e20:	e767      	b.n	8008cf2 <_printf_float+0xba>
 8008e22:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008e26:	f240 80dc 	bls.w	8008fe2 <_printf_float+0x3aa>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e32:	f7f7 fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d033      	beq.n	8008ea2 <_printf_float+0x26a>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4a41      	ldr	r2, [pc, #260]	; (8008f44 <_printf_float+0x30c>)
 8008e3e:	4631      	mov	r1, r6
 8008e40:	4628      	mov	r0, r5
 8008e42:	47b8      	blx	r7
 8008e44:	3001      	adds	r0, #1
 8008e46:	f43f af54 	beq.w	8008cf2 <_printf_float+0xba>
 8008e4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	db02      	blt.n	8008e58 <_printf_float+0x220>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	07d8      	lsls	r0, r3, #31
 8008e56:	d50f      	bpl.n	8008e78 <_printf_float+0x240>
 8008e58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4628      	mov	r0, r5
 8008e60:	47b8      	blx	r7
 8008e62:	3001      	adds	r0, #1
 8008e64:	f43f af45 	beq.w	8008cf2 <_printf_float+0xba>
 8008e68:	f04f 0800 	mov.w	r8, #0
 8008e6c:	f104 091a 	add.w	r9, r4, #26
 8008e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e72:	3b01      	subs	r3, #1
 8008e74:	4543      	cmp	r3, r8
 8008e76:	dc09      	bgt.n	8008e8c <_printf_float+0x254>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	079b      	lsls	r3, r3, #30
 8008e7c:	f100 8103 	bmi.w	8009086 <_printf_float+0x44e>
 8008e80:	68e0      	ldr	r0, [r4, #12]
 8008e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e84:	4298      	cmp	r0, r3
 8008e86:	bfb8      	it	lt
 8008e88:	4618      	movlt	r0, r3
 8008e8a:	e734      	b.n	8008cf6 <_printf_float+0xbe>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	464a      	mov	r2, r9
 8008e90:	4631      	mov	r1, r6
 8008e92:	4628      	mov	r0, r5
 8008e94:	47b8      	blx	r7
 8008e96:	3001      	adds	r0, #1
 8008e98:	f43f af2b 	beq.w	8008cf2 <_printf_float+0xba>
 8008e9c:	f108 0801 	add.w	r8, r8, #1
 8008ea0:	e7e6      	b.n	8008e70 <_printf_float+0x238>
 8008ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	dc2b      	bgt.n	8008f00 <_printf_float+0x2c8>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	4a26      	ldr	r2, [pc, #152]	; (8008f44 <_printf_float+0x30c>)
 8008eac:	4631      	mov	r1, r6
 8008eae:	4628      	mov	r0, r5
 8008eb0:	47b8      	blx	r7
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	f43f af1d 	beq.w	8008cf2 <_printf_float+0xba>
 8008eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eba:	b923      	cbnz	r3, 8008ec6 <_printf_float+0x28e>
 8008ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ebe:	b913      	cbnz	r3, 8008ec6 <_printf_float+0x28e>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	07d9      	lsls	r1, r3, #31
 8008ec4:	d5d8      	bpl.n	8008e78 <_printf_float+0x240>
 8008ec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f af0e 	beq.w	8008cf2 <_printf_float+0xba>
 8008ed6:	f04f 0900 	mov.w	r9, #0
 8008eda:	f104 0a1a 	add.w	sl, r4, #26
 8008ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	454b      	cmp	r3, r9
 8008ee4:	dc01      	bgt.n	8008eea <_printf_float+0x2b2>
 8008ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee8:	e794      	b.n	8008e14 <_printf_float+0x1dc>
 8008eea:	2301      	movs	r3, #1
 8008eec:	4652      	mov	r2, sl
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f43f aefc 	beq.w	8008cf2 <_printf_float+0xba>
 8008efa:	f109 0901 	add.w	r9, r9, #1
 8008efe:	e7ee      	b.n	8008ede <_printf_float+0x2a6>
 8008f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f04:	429a      	cmp	r2, r3
 8008f06:	bfa8      	it	ge
 8008f08:	461a      	movge	r2, r3
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	4691      	mov	r9, r2
 8008f0e:	dd07      	ble.n	8008f20 <_printf_float+0x2e8>
 8008f10:	4613      	mov	r3, r2
 8008f12:	4631      	mov	r1, r6
 8008f14:	4642      	mov	r2, r8
 8008f16:	4628      	mov	r0, r5
 8008f18:	47b8      	blx	r7
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	f43f aee9 	beq.w	8008cf2 <_printf_float+0xba>
 8008f20:	f104 031a 	add.w	r3, r4, #26
 8008f24:	f04f 0b00 	mov.w	fp, #0
 8008f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f2c:	9306      	str	r3, [sp, #24]
 8008f2e:	e015      	b.n	8008f5c <_printf_float+0x324>
 8008f30:	7fefffff 	.word	0x7fefffff
 8008f34:	0800aabc 	.word	0x0800aabc
 8008f38:	0800aab8 	.word	0x0800aab8
 8008f3c:	0800aac4 	.word	0x0800aac4
 8008f40:	0800aac0 	.word	0x0800aac0
 8008f44:	0800aac8 	.word	0x0800aac8
 8008f48:	2301      	movs	r3, #1
 8008f4a:	9a06      	ldr	r2, [sp, #24]
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b8      	blx	r7
 8008f52:	3001      	adds	r0, #1
 8008f54:	f43f aecd 	beq.w	8008cf2 <_printf_float+0xba>
 8008f58:	f10b 0b01 	add.w	fp, fp, #1
 8008f5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008f60:	ebaa 0309 	sub.w	r3, sl, r9
 8008f64:	455b      	cmp	r3, fp
 8008f66:	dcef      	bgt.n	8008f48 <_printf_float+0x310>
 8008f68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	44d0      	add	r8, sl
 8008f70:	db15      	blt.n	8008f9e <_printf_float+0x366>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	07da      	lsls	r2, r3, #31
 8008f76:	d412      	bmi.n	8008f9e <_printf_float+0x366>
 8008f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f7c:	eba3 020a 	sub.w	r2, r3, sl
 8008f80:	eba3 0a01 	sub.w	sl, r3, r1
 8008f84:	4592      	cmp	sl, r2
 8008f86:	bfa8      	it	ge
 8008f88:	4692      	movge	sl, r2
 8008f8a:	f1ba 0f00 	cmp.w	sl, #0
 8008f8e:	dc0e      	bgt.n	8008fae <_printf_float+0x376>
 8008f90:	f04f 0800 	mov.w	r8, #0
 8008f94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f98:	f104 091a 	add.w	r9, r4, #26
 8008f9c:	e019      	b.n	8008fd2 <_printf_float+0x39a>
 8008f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d1e5      	bne.n	8008f78 <_printf_float+0x340>
 8008fac:	e6a1      	b.n	8008cf2 <_printf_float+0xba>
 8008fae:	4653      	mov	r3, sl
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d1e9      	bne.n	8008f90 <_printf_float+0x358>
 8008fbc:	e699      	b.n	8008cf2 <_printf_float+0xba>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	464a      	mov	r2, r9
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f ae92 	beq.w	8008cf2 <_printf_float+0xba>
 8008fce:	f108 0801 	add.w	r8, r8, #1
 8008fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fd6:	1a9b      	subs	r3, r3, r2
 8008fd8:	eba3 030a 	sub.w	r3, r3, sl
 8008fdc:	4543      	cmp	r3, r8
 8008fde:	dcee      	bgt.n	8008fbe <_printf_float+0x386>
 8008fe0:	e74a      	b.n	8008e78 <_printf_float+0x240>
 8008fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fe4:	2a01      	cmp	r2, #1
 8008fe6:	dc01      	bgt.n	8008fec <_printf_float+0x3b4>
 8008fe8:	07db      	lsls	r3, r3, #31
 8008fea:	d53a      	bpl.n	8009062 <_printf_float+0x42a>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4642      	mov	r2, r8
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b8      	blx	r7
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	f43f ae7b 	beq.w	8008cf2 <_printf_float+0xba>
 8008ffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009000:	4631      	mov	r1, r6
 8009002:	4628      	mov	r0, r5
 8009004:	47b8      	blx	r7
 8009006:	3001      	adds	r0, #1
 8009008:	f108 0801 	add.w	r8, r8, #1
 800900c:	f43f ae71 	beq.w	8008cf2 <_printf_float+0xba>
 8009010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009012:	2200      	movs	r2, #0
 8009014:	f103 3aff 	add.w	sl, r3, #4294967295
 8009018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800901c:	2300      	movs	r3, #0
 800901e:	f7f7 fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009022:	b9c8      	cbnz	r0, 8009058 <_printf_float+0x420>
 8009024:	4653      	mov	r3, sl
 8009026:	4642      	mov	r2, r8
 8009028:	4631      	mov	r1, r6
 800902a:	4628      	mov	r0, r5
 800902c:	47b8      	blx	r7
 800902e:	3001      	adds	r0, #1
 8009030:	d10e      	bne.n	8009050 <_printf_float+0x418>
 8009032:	e65e      	b.n	8008cf2 <_printf_float+0xba>
 8009034:	2301      	movs	r3, #1
 8009036:	4652      	mov	r2, sl
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f ae57 	beq.w	8008cf2 <_printf_float+0xba>
 8009044:	f108 0801 	add.w	r8, r8, #1
 8009048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800904a:	3b01      	subs	r3, #1
 800904c:	4543      	cmp	r3, r8
 800904e:	dcf1      	bgt.n	8009034 <_printf_float+0x3fc>
 8009050:	464b      	mov	r3, r9
 8009052:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009056:	e6de      	b.n	8008e16 <_printf_float+0x1de>
 8009058:	f04f 0800 	mov.w	r8, #0
 800905c:	f104 0a1a 	add.w	sl, r4, #26
 8009060:	e7f2      	b.n	8009048 <_printf_float+0x410>
 8009062:	2301      	movs	r3, #1
 8009064:	e7df      	b.n	8009026 <_printf_float+0x3ee>
 8009066:	2301      	movs	r3, #1
 8009068:	464a      	mov	r2, r9
 800906a:	4631      	mov	r1, r6
 800906c:	4628      	mov	r0, r5
 800906e:	47b8      	blx	r7
 8009070:	3001      	adds	r0, #1
 8009072:	f43f ae3e 	beq.w	8008cf2 <_printf_float+0xba>
 8009076:	f108 0801 	add.w	r8, r8, #1
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800907e:	1a9b      	subs	r3, r3, r2
 8009080:	4543      	cmp	r3, r8
 8009082:	dcf0      	bgt.n	8009066 <_printf_float+0x42e>
 8009084:	e6fc      	b.n	8008e80 <_printf_float+0x248>
 8009086:	f04f 0800 	mov.w	r8, #0
 800908a:	f104 0919 	add.w	r9, r4, #25
 800908e:	e7f4      	b.n	800907a <_printf_float+0x442>
 8009090:	2900      	cmp	r1, #0
 8009092:	f43f ae8b 	beq.w	8008dac <_printf_float+0x174>
 8009096:	2300      	movs	r3, #0
 8009098:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800909c:	ab09      	add	r3, sp, #36	; 0x24
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	ec49 8b10 	vmov	d0, r8, r9
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	f8cd a004 	str.w	sl, [sp, #4]
 80090aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090ae:	4628      	mov	r0, r5
 80090b0:	f7ff fd2e 	bl	8008b10 <__cvt>
 80090b4:	4680      	mov	r8, r0
 80090b6:	e648      	b.n	8008d4a <_printf_float+0x112>

080090b8 <_printf_common>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	4691      	mov	r9, r2
 80090be:	461f      	mov	r7, r3
 80090c0:	688a      	ldr	r2, [r1, #8]
 80090c2:	690b      	ldr	r3, [r1, #16]
 80090c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090c8:	4293      	cmp	r3, r2
 80090ca:	bfb8      	it	lt
 80090cc:	4613      	movlt	r3, r2
 80090ce:	f8c9 3000 	str.w	r3, [r9]
 80090d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090d6:	4606      	mov	r6, r0
 80090d8:	460c      	mov	r4, r1
 80090da:	b112      	cbz	r2, 80090e2 <_printf_common+0x2a>
 80090dc:	3301      	adds	r3, #1
 80090de:	f8c9 3000 	str.w	r3, [r9]
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	0699      	lsls	r1, r3, #26
 80090e6:	bf42      	ittt	mi
 80090e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090ec:	3302      	addmi	r3, #2
 80090ee:	f8c9 3000 	strmi.w	r3, [r9]
 80090f2:	6825      	ldr	r5, [r4, #0]
 80090f4:	f015 0506 	ands.w	r5, r5, #6
 80090f8:	d107      	bne.n	800910a <_printf_common+0x52>
 80090fa:	f104 0a19 	add.w	sl, r4, #25
 80090fe:	68e3      	ldr	r3, [r4, #12]
 8009100:	f8d9 2000 	ldr.w	r2, [r9]
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	42ab      	cmp	r3, r5
 8009108:	dc28      	bgt.n	800915c <_printf_common+0xa4>
 800910a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	3300      	adds	r3, #0
 8009112:	bf18      	it	ne
 8009114:	2301      	movne	r3, #1
 8009116:	0692      	lsls	r2, r2, #26
 8009118:	d42d      	bmi.n	8009176 <_printf_common+0xbe>
 800911a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800911e:	4639      	mov	r1, r7
 8009120:	4630      	mov	r0, r6
 8009122:	47c0      	blx	r8
 8009124:	3001      	adds	r0, #1
 8009126:	d020      	beq.n	800916a <_printf_common+0xb2>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	68e5      	ldr	r5, [r4, #12]
 800912c:	f8d9 2000 	ldr.w	r2, [r9]
 8009130:	f003 0306 	and.w	r3, r3, #6
 8009134:	2b04      	cmp	r3, #4
 8009136:	bf08      	it	eq
 8009138:	1aad      	subeq	r5, r5, r2
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	6922      	ldr	r2, [r4, #16]
 800913e:	bf0c      	ite	eq
 8009140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009144:	2500      	movne	r5, #0
 8009146:	4293      	cmp	r3, r2
 8009148:	bfc4      	itt	gt
 800914a:	1a9b      	subgt	r3, r3, r2
 800914c:	18ed      	addgt	r5, r5, r3
 800914e:	f04f 0900 	mov.w	r9, #0
 8009152:	341a      	adds	r4, #26
 8009154:	454d      	cmp	r5, r9
 8009156:	d11a      	bne.n	800918e <_printf_common+0xd6>
 8009158:	2000      	movs	r0, #0
 800915a:	e008      	b.n	800916e <_printf_common+0xb6>
 800915c:	2301      	movs	r3, #1
 800915e:	4652      	mov	r2, sl
 8009160:	4639      	mov	r1, r7
 8009162:	4630      	mov	r0, r6
 8009164:	47c0      	blx	r8
 8009166:	3001      	adds	r0, #1
 8009168:	d103      	bne.n	8009172 <_printf_common+0xba>
 800916a:	f04f 30ff 	mov.w	r0, #4294967295
 800916e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009172:	3501      	adds	r5, #1
 8009174:	e7c3      	b.n	80090fe <_printf_common+0x46>
 8009176:	18e1      	adds	r1, r4, r3
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	2030      	movs	r0, #48	; 0x30
 800917c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009180:	4422      	add	r2, r4
 8009182:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009186:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800918a:	3302      	adds	r3, #2
 800918c:	e7c5      	b.n	800911a <_printf_common+0x62>
 800918e:	2301      	movs	r3, #1
 8009190:	4622      	mov	r2, r4
 8009192:	4639      	mov	r1, r7
 8009194:	4630      	mov	r0, r6
 8009196:	47c0      	blx	r8
 8009198:	3001      	adds	r0, #1
 800919a:	d0e6      	beq.n	800916a <_printf_common+0xb2>
 800919c:	f109 0901 	add.w	r9, r9, #1
 80091a0:	e7d8      	b.n	8009154 <_printf_common+0x9c>
	...

080091a4 <_printf_i>:
 80091a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80091ac:	460c      	mov	r4, r1
 80091ae:	7e09      	ldrb	r1, [r1, #24]
 80091b0:	b085      	sub	sp, #20
 80091b2:	296e      	cmp	r1, #110	; 0x6e
 80091b4:	4617      	mov	r7, r2
 80091b6:	4606      	mov	r6, r0
 80091b8:	4698      	mov	r8, r3
 80091ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091bc:	f000 80b3 	beq.w	8009326 <_printf_i+0x182>
 80091c0:	d822      	bhi.n	8009208 <_printf_i+0x64>
 80091c2:	2963      	cmp	r1, #99	; 0x63
 80091c4:	d036      	beq.n	8009234 <_printf_i+0x90>
 80091c6:	d80a      	bhi.n	80091de <_printf_i+0x3a>
 80091c8:	2900      	cmp	r1, #0
 80091ca:	f000 80b9 	beq.w	8009340 <_printf_i+0x19c>
 80091ce:	2958      	cmp	r1, #88	; 0x58
 80091d0:	f000 8083 	beq.w	80092da <_printf_i+0x136>
 80091d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80091dc:	e032      	b.n	8009244 <_printf_i+0xa0>
 80091de:	2964      	cmp	r1, #100	; 0x64
 80091e0:	d001      	beq.n	80091e6 <_printf_i+0x42>
 80091e2:	2969      	cmp	r1, #105	; 0x69
 80091e4:	d1f6      	bne.n	80091d4 <_printf_i+0x30>
 80091e6:	6820      	ldr	r0, [r4, #0]
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	0605      	lsls	r5, r0, #24
 80091ec:	f103 0104 	add.w	r1, r3, #4
 80091f0:	d52a      	bpl.n	8009248 <_printf_i+0xa4>
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6011      	str	r1, [r2, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	da03      	bge.n	8009202 <_printf_i+0x5e>
 80091fa:	222d      	movs	r2, #45	; 0x2d
 80091fc:	425b      	negs	r3, r3
 80091fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009202:	486f      	ldr	r0, [pc, #444]	; (80093c0 <_printf_i+0x21c>)
 8009204:	220a      	movs	r2, #10
 8009206:	e039      	b.n	800927c <_printf_i+0xd8>
 8009208:	2973      	cmp	r1, #115	; 0x73
 800920a:	f000 809d 	beq.w	8009348 <_printf_i+0x1a4>
 800920e:	d808      	bhi.n	8009222 <_printf_i+0x7e>
 8009210:	296f      	cmp	r1, #111	; 0x6f
 8009212:	d020      	beq.n	8009256 <_printf_i+0xb2>
 8009214:	2970      	cmp	r1, #112	; 0x70
 8009216:	d1dd      	bne.n	80091d4 <_printf_i+0x30>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	f043 0320 	orr.w	r3, r3, #32
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	e003      	b.n	800922a <_printf_i+0x86>
 8009222:	2975      	cmp	r1, #117	; 0x75
 8009224:	d017      	beq.n	8009256 <_printf_i+0xb2>
 8009226:	2978      	cmp	r1, #120	; 0x78
 8009228:	d1d4      	bne.n	80091d4 <_printf_i+0x30>
 800922a:	2378      	movs	r3, #120	; 0x78
 800922c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009230:	4864      	ldr	r0, [pc, #400]	; (80093c4 <_printf_i+0x220>)
 8009232:	e055      	b.n	80092e0 <_printf_i+0x13c>
 8009234:	6813      	ldr	r3, [r2, #0]
 8009236:	1d19      	adds	r1, r3, #4
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6011      	str	r1, [r2, #0]
 800923c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009244:	2301      	movs	r3, #1
 8009246:	e08c      	b.n	8009362 <_printf_i+0x1be>
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6011      	str	r1, [r2, #0]
 800924c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009250:	bf18      	it	ne
 8009252:	b21b      	sxthne	r3, r3
 8009254:	e7cf      	b.n	80091f6 <_printf_i+0x52>
 8009256:	6813      	ldr	r3, [r2, #0]
 8009258:	6825      	ldr	r5, [r4, #0]
 800925a:	1d18      	adds	r0, r3, #4
 800925c:	6010      	str	r0, [r2, #0]
 800925e:	0628      	lsls	r0, r5, #24
 8009260:	d501      	bpl.n	8009266 <_printf_i+0xc2>
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	e002      	b.n	800926c <_printf_i+0xc8>
 8009266:	0668      	lsls	r0, r5, #25
 8009268:	d5fb      	bpl.n	8009262 <_printf_i+0xbe>
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	4854      	ldr	r0, [pc, #336]	; (80093c0 <_printf_i+0x21c>)
 800926e:	296f      	cmp	r1, #111	; 0x6f
 8009270:	bf14      	ite	ne
 8009272:	220a      	movne	r2, #10
 8009274:	2208      	moveq	r2, #8
 8009276:	2100      	movs	r1, #0
 8009278:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800927c:	6865      	ldr	r5, [r4, #4]
 800927e:	60a5      	str	r5, [r4, #8]
 8009280:	2d00      	cmp	r5, #0
 8009282:	f2c0 8095 	blt.w	80093b0 <_printf_i+0x20c>
 8009286:	6821      	ldr	r1, [r4, #0]
 8009288:	f021 0104 	bic.w	r1, r1, #4
 800928c:	6021      	str	r1, [r4, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d13d      	bne.n	800930e <_printf_i+0x16a>
 8009292:	2d00      	cmp	r5, #0
 8009294:	f040 808e 	bne.w	80093b4 <_printf_i+0x210>
 8009298:	4665      	mov	r5, ip
 800929a:	2a08      	cmp	r2, #8
 800929c:	d10b      	bne.n	80092b6 <_printf_i+0x112>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	07db      	lsls	r3, r3, #31
 80092a2:	d508      	bpl.n	80092b6 <_printf_i+0x112>
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	6862      	ldr	r2, [r4, #4]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	bfde      	ittt	le
 80092ac:	2330      	movle	r3, #48	; 0x30
 80092ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092b6:	ebac 0305 	sub.w	r3, ip, r5
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	f8cd 8000 	str.w	r8, [sp]
 80092c0:	463b      	mov	r3, r7
 80092c2:	aa03      	add	r2, sp, #12
 80092c4:	4621      	mov	r1, r4
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7ff fef6 	bl	80090b8 <_printf_common>
 80092cc:	3001      	adds	r0, #1
 80092ce:	d14d      	bne.n	800936c <_printf_i+0x1c8>
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	b005      	add	sp, #20
 80092d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092da:	4839      	ldr	r0, [pc, #228]	; (80093c0 <_printf_i+0x21c>)
 80092dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80092e0:	6813      	ldr	r3, [r2, #0]
 80092e2:	6821      	ldr	r1, [r4, #0]
 80092e4:	1d1d      	adds	r5, r3, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6015      	str	r5, [r2, #0]
 80092ea:	060a      	lsls	r2, r1, #24
 80092ec:	d50b      	bpl.n	8009306 <_printf_i+0x162>
 80092ee:	07ca      	lsls	r2, r1, #31
 80092f0:	bf44      	itt	mi
 80092f2:	f041 0120 	orrmi.w	r1, r1, #32
 80092f6:	6021      	strmi	r1, [r4, #0]
 80092f8:	b91b      	cbnz	r3, 8009302 <_printf_i+0x15e>
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	f022 0220 	bic.w	r2, r2, #32
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	2210      	movs	r2, #16
 8009304:	e7b7      	b.n	8009276 <_printf_i+0xd2>
 8009306:	064d      	lsls	r5, r1, #25
 8009308:	bf48      	it	mi
 800930a:	b29b      	uxthmi	r3, r3
 800930c:	e7ef      	b.n	80092ee <_printf_i+0x14a>
 800930e:	4665      	mov	r5, ip
 8009310:	fbb3 f1f2 	udiv	r1, r3, r2
 8009314:	fb02 3311 	mls	r3, r2, r1, r3
 8009318:	5cc3      	ldrb	r3, [r0, r3]
 800931a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800931e:	460b      	mov	r3, r1
 8009320:	2900      	cmp	r1, #0
 8009322:	d1f5      	bne.n	8009310 <_printf_i+0x16c>
 8009324:	e7b9      	b.n	800929a <_printf_i+0xf6>
 8009326:	6813      	ldr	r3, [r2, #0]
 8009328:	6825      	ldr	r5, [r4, #0]
 800932a:	6961      	ldr	r1, [r4, #20]
 800932c:	1d18      	adds	r0, r3, #4
 800932e:	6010      	str	r0, [r2, #0]
 8009330:	0628      	lsls	r0, r5, #24
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	d501      	bpl.n	800933a <_printf_i+0x196>
 8009336:	6019      	str	r1, [r3, #0]
 8009338:	e002      	b.n	8009340 <_printf_i+0x19c>
 800933a:	066a      	lsls	r2, r5, #25
 800933c:	d5fb      	bpl.n	8009336 <_printf_i+0x192>
 800933e:	8019      	strh	r1, [r3, #0]
 8009340:	2300      	movs	r3, #0
 8009342:	6123      	str	r3, [r4, #16]
 8009344:	4665      	mov	r5, ip
 8009346:	e7b9      	b.n	80092bc <_printf_i+0x118>
 8009348:	6813      	ldr	r3, [r2, #0]
 800934a:	1d19      	adds	r1, r3, #4
 800934c:	6011      	str	r1, [r2, #0]
 800934e:	681d      	ldr	r5, [r3, #0]
 8009350:	6862      	ldr	r2, [r4, #4]
 8009352:	2100      	movs	r1, #0
 8009354:	4628      	mov	r0, r5
 8009356:	f7f6 ff43 	bl	80001e0 <memchr>
 800935a:	b108      	cbz	r0, 8009360 <_printf_i+0x1bc>
 800935c:	1b40      	subs	r0, r0, r5
 800935e:	6060      	str	r0, [r4, #4]
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	6123      	str	r3, [r4, #16]
 8009364:	2300      	movs	r3, #0
 8009366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800936a:	e7a7      	b.n	80092bc <_printf_i+0x118>
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	462a      	mov	r2, r5
 8009370:	4639      	mov	r1, r7
 8009372:	4630      	mov	r0, r6
 8009374:	47c0      	blx	r8
 8009376:	3001      	adds	r0, #1
 8009378:	d0aa      	beq.n	80092d0 <_printf_i+0x12c>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	079b      	lsls	r3, r3, #30
 800937e:	d413      	bmi.n	80093a8 <_printf_i+0x204>
 8009380:	68e0      	ldr	r0, [r4, #12]
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	4298      	cmp	r0, r3
 8009386:	bfb8      	it	lt
 8009388:	4618      	movlt	r0, r3
 800938a:	e7a3      	b.n	80092d4 <_printf_i+0x130>
 800938c:	2301      	movs	r3, #1
 800938e:	464a      	mov	r2, r9
 8009390:	4639      	mov	r1, r7
 8009392:	4630      	mov	r0, r6
 8009394:	47c0      	blx	r8
 8009396:	3001      	adds	r0, #1
 8009398:	d09a      	beq.n	80092d0 <_printf_i+0x12c>
 800939a:	3501      	adds	r5, #1
 800939c:	68e3      	ldr	r3, [r4, #12]
 800939e:	9a03      	ldr	r2, [sp, #12]
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	42ab      	cmp	r3, r5
 80093a4:	dcf2      	bgt.n	800938c <_printf_i+0x1e8>
 80093a6:	e7eb      	b.n	8009380 <_printf_i+0x1dc>
 80093a8:	2500      	movs	r5, #0
 80093aa:	f104 0919 	add.w	r9, r4, #25
 80093ae:	e7f5      	b.n	800939c <_printf_i+0x1f8>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1ac      	bne.n	800930e <_printf_i+0x16a>
 80093b4:	7803      	ldrb	r3, [r0, #0]
 80093b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093be:	e76c      	b.n	800929a <_printf_i+0xf6>
 80093c0:	0800aaca 	.word	0x0800aaca
 80093c4:	0800aadb 	.word	0x0800aadb

080093c8 <_sbrk_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4c06      	ldr	r4, [pc, #24]	; (80093e4 <_sbrk_r+0x1c>)
 80093cc:	2300      	movs	r3, #0
 80093ce:	4605      	mov	r5, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	f7f8 fa2e 	bl	8001834 <_sbrk>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_sbrk_r+0x1a>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_sbrk_r+0x1a>
 80093e0:	602b      	str	r3, [r5, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	20001dbc 	.word	0x20001dbc

080093e8 <siprintf>:
 80093e8:	b40e      	push	{r1, r2, r3}
 80093ea:	b500      	push	{lr}
 80093ec:	b09c      	sub	sp, #112	; 0x70
 80093ee:	ab1d      	add	r3, sp, #116	; 0x74
 80093f0:	9002      	str	r0, [sp, #8]
 80093f2:	9006      	str	r0, [sp, #24]
 80093f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093f8:	4809      	ldr	r0, [pc, #36]	; (8009420 <siprintf+0x38>)
 80093fa:	9107      	str	r1, [sp, #28]
 80093fc:	9104      	str	r1, [sp, #16]
 80093fe:	4909      	ldr	r1, [pc, #36]	; (8009424 <siprintf+0x3c>)
 8009400:	f853 2b04 	ldr.w	r2, [r3], #4
 8009404:	9105      	str	r1, [sp, #20]
 8009406:	6800      	ldr	r0, [r0, #0]
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	a902      	add	r1, sp, #8
 800940c:	f001 f9ae 	bl	800a76c <_svfiprintf_r>
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	b01c      	add	sp, #112	; 0x70
 8009418:	f85d eb04 	ldr.w	lr, [sp], #4
 800941c:	b003      	add	sp, #12
 800941e:	4770      	bx	lr
 8009420:	20000188 	.word	0x20000188
 8009424:	ffff0208 	.word	0xffff0208

08009428 <quorem>:
 8009428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	6903      	ldr	r3, [r0, #16]
 800942e:	690c      	ldr	r4, [r1, #16]
 8009430:	42a3      	cmp	r3, r4
 8009432:	4680      	mov	r8, r0
 8009434:	f2c0 8082 	blt.w	800953c <quorem+0x114>
 8009438:	3c01      	subs	r4, #1
 800943a:	f101 0714 	add.w	r7, r1, #20
 800943e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009442:	f100 0614 	add.w	r6, r0, #20
 8009446:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800944a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800944e:	eb06 030c 	add.w	r3, r6, ip
 8009452:	3501      	adds	r5, #1
 8009454:	eb07 090c 	add.w	r9, r7, ip
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	fbb0 f5f5 	udiv	r5, r0, r5
 800945e:	b395      	cbz	r5, 80094c6 <quorem+0x9e>
 8009460:	f04f 0a00 	mov.w	sl, #0
 8009464:	4638      	mov	r0, r7
 8009466:	46b6      	mov	lr, r6
 8009468:	46d3      	mov	fp, sl
 800946a:	f850 2b04 	ldr.w	r2, [r0], #4
 800946e:	b293      	uxth	r3, r2
 8009470:	fb05 a303 	mla	r3, r5, r3, sl
 8009474:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009478:	b29b      	uxth	r3, r3
 800947a:	ebab 0303 	sub.w	r3, fp, r3
 800947e:	0c12      	lsrs	r2, r2, #16
 8009480:	f8de b000 	ldr.w	fp, [lr]
 8009484:	fb05 a202 	mla	r2, r5, r2, sl
 8009488:	fa13 f38b 	uxtah	r3, r3, fp
 800948c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009490:	fa1f fb82 	uxth.w	fp, r2
 8009494:	f8de 2000 	ldr.w	r2, [lr]
 8009498:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800949c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094a6:	4581      	cmp	r9, r0
 80094a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80094ac:	f84e 3b04 	str.w	r3, [lr], #4
 80094b0:	d2db      	bcs.n	800946a <quorem+0x42>
 80094b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80094b6:	b933      	cbnz	r3, 80094c6 <quorem+0x9e>
 80094b8:	9b01      	ldr	r3, [sp, #4]
 80094ba:	3b04      	subs	r3, #4
 80094bc:	429e      	cmp	r6, r3
 80094be:	461a      	mov	r2, r3
 80094c0:	d330      	bcc.n	8009524 <quorem+0xfc>
 80094c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80094c6:	4640      	mov	r0, r8
 80094c8:	f001 f822 	bl	800a510 <__mcmp>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	db25      	blt.n	800951c <quorem+0xf4>
 80094d0:	3501      	adds	r5, #1
 80094d2:	4630      	mov	r0, r6
 80094d4:	f04f 0c00 	mov.w	ip, #0
 80094d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80094dc:	f8d0 e000 	ldr.w	lr, [r0]
 80094e0:	b293      	uxth	r3, r2
 80094e2:	ebac 0303 	sub.w	r3, ip, r3
 80094e6:	0c12      	lsrs	r2, r2, #16
 80094e8:	fa13 f38e 	uxtah	r3, r3, lr
 80094ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094fa:	45b9      	cmp	r9, r7
 80094fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009500:	f840 3b04 	str.w	r3, [r0], #4
 8009504:	d2e8      	bcs.n	80094d8 <quorem+0xb0>
 8009506:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800950a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800950e:	b92a      	cbnz	r2, 800951c <quorem+0xf4>
 8009510:	3b04      	subs	r3, #4
 8009512:	429e      	cmp	r6, r3
 8009514:	461a      	mov	r2, r3
 8009516:	d30b      	bcc.n	8009530 <quorem+0x108>
 8009518:	f8c8 4010 	str.w	r4, [r8, #16]
 800951c:	4628      	mov	r0, r5
 800951e:	b003      	add	sp, #12
 8009520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	3b04      	subs	r3, #4
 8009528:	2a00      	cmp	r2, #0
 800952a:	d1ca      	bne.n	80094c2 <quorem+0x9a>
 800952c:	3c01      	subs	r4, #1
 800952e:	e7c5      	b.n	80094bc <quorem+0x94>
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	3b04      	subs	r3, #4
 8009534:	2a00      	cmp	r2, #0
 8009536:	d1ef      	bne.n	8009518 <quorem+0xf0>
 8009538:	3c01      	subs	r4, #1
 800953a:	e7ea      	b.n	8009512 <quorem+0xea>
 800953c:	2000      	movs	r0, #0
 800953e:	e7ee      	b.n	800951e <quorem+0xf6>

08009540 <_dtoa_r>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	ec57 6b10 	vmov	r6, r7, d0
 8009548:	b097      	sub	sp, #92	; 0x5c
 800954a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800954c:	9106      	str	r1, [sp, #24]
 800954e:	4604      	mov	r4, r0
 8009550:	920b      	str	r2, [sp, #44]	; 0x2c
 8009552:	9312      	str	r3, [sp, #72]	; 0x48
 8009554:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009558:	e9cd 6700 	strd	r6, r7, [sp]
 800955c:	b93d      	cbnz	r5, 800956e <_dtoa_r+0x2e>
 800955e:	2010      	movs	r0, #16
 8009560:	f7ff fa16 	bl	8008990 <malloc>
 8009564:	6260      	str	r0, [r4, #36]	; 0x24
 8009566:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800956a:	6005      	str	r5, [r0, #0]
 800956c:	60c5      	str	r5, [r0, #12]
 800956e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009570:	6819      	ldr	r1, [r3, #0]
 8009572:	b151      	cbz	r1, 800958a <_dtoa_r+0x4a>
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	604a      	str	r2, [r1, #4]
 8009578:	2301      	movs	r3, #1
 800957a:	4093      	lsls	r3, r2
 800957c:	608b      	str	r3, [r1, #8]
 800957e:	4620      	mov	r0, r4
 8009580:	f000 fde5 	bl	800a14e <_Bfree>
 8009584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	1e3b      	subs	r3, r7, #0
 800958c:	bfbb      	ittet	lt
 800958e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009592:	9301      	strlt	r3, [sp, #4]
 8009594:	2300      	movge	r3, #0
 8009596:	2201      	movlt	r2, #1
 8009598:	bfac      	ite	ge
 800959a:	f8c8 3000 	strge.w	r3, [r8]
 800959e:	f8c8 2000 	strlt.w	r2, [r8]
 80095a2:	4baf      	ldr	r3, [pc, #700]	; (8009860 <_dtoa_r+0x320>)
 80095a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80095a8:	ea33 0308 	bics.w	r3, r3, r8
 80095ac:	d114      	bne.n	80095d8 <_dtoa_r+0x98>
 80095ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	9b00      	ldr	r3, [sp, #0]
 80095b8:	b923      	cbnz	r3, 80095c4 <_dtoa_r+0x84>
 80095ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80095be:	2800      	cmp	r0, #0
 80095c0:	f000 8542 	beq.w	800a048 <_dtoa_r+0xb08>
 80095c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009874 <_dtoa_r+0x334>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8544 	beq.w	800a058 <_dtoa_r+0xb18>
 80095d0:	f10b 0303 	add.w	r3, fp, #3
 80095d4:	f000 bd3e 	b.w	800a054 <_dtoa_r+0xb14>
 80095d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80095dc:	2200      	movs	r2, #0
 80095de:	2300      	movs	r3, #0
 80095e0:	4630      	mov	r0, r6
 80095e2:	4639      	mov	r1, r7
 80095e4:	f7f7 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 80095e8:	4681      	mov	r9, r0
 80095ea:	b168      	cbz	r0, 8009608 <_dtoa_r+0xc8>
 80095ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095ee:	2301      	movs	r3, #1
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 8524 	beq.w	800a042 <_dtoa_r+0xb02>
 80095fa:	4b9a      	ldr	r3, [pc, #616]	; (8009864 <_dtoa_r+0x324>)
 80095fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	f000 bd28 	b.w	800a058 <_dtoa_r+0xb18>
 8009608:	aa14      	add	r2, sp, #80	; 0x50
 800960a:	a915      	add	r1, sp, #84	; 0x54
 800960c:	ec47 6b10 	vmov	d0, r6, r7
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fff4 	bl	800a5fe <__d2b>
 8009616:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800961a:	9004      	str	r0, [sp, #16]
 800961c:	2d00      	cmp	r5, #0
 800961e:	d07c      	beq.n	800971a <_dtoa_r+0x1da>
 8009620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009624:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009628:	46b2      	mov	sl, r6
 800962a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800962e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009632:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009636:	2200      	movs	r2, #0
 8009638:	4b8b      	ldr	r3, [pc, #556]	; (8009868 <_dtoa_r+0x328>)
 800963a:	4650      	mov	r0, sl
 800963c:	4659      	mov	r1, fp
 800963e:	f7f6 fe23 	bl	8000288 <__aeabi_dsub>
 8009642:	a381      	add	r3, pc, #516	; (adr r3, 8009848 <_dtoa_r+0x308>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7f6 ffd6 	bl	80005f8 <__aeabi_dmul>
 800964c:	a380      	add	r3, pc, #512	; (adr r3, 8009850 <_dtoa_r+0x310>)
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	f7f6 fe1b 	bl	800028c <__adddf3>
 8009656:	4606      	mov	r6, r0
 8009658:	4628      	mov	r0, r5
 800965a:	460f      	mov	r7, r1
 800965c:	f7f6 ff62 	bl	8000524 <__aeabi_i2d>
 8009660:	a37d      	add	r3, pc, #500	; (adr r3, 8009858 <_dtoa_r+0x318>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f7f6 ffc7 	bl	80005f8 <__aeabi_dmul>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	4630      	mov	r0, r6
 8009670:	4639      	mov	r1, r7
 8009672:	f7f6 fe0b 	bl	800028c <__adddf3>
 8009676:	4606      	mov	r6, r0
 8009678:	460f      	mov	r7, r1
 800967a:	f7f7 fa6d 	bl	8000b58 <__aeabi_d2iz>
 800967e:	2200      	movs	r2, #0
 8009680:	4682      	mov	sl, r0
 8009682:	2300      	movs	r3, #0
 8009684:	4630      	mov	r0, r6
 8009686:	4639      	mov	r1, r7
 8009688:	f7f7 fa28 	bl	8000adc <__aeabi_dcmplt>
 800968c:	b148      	cbz	r0, 80096a2 <_dtoa_r+0x162>
 800968e:	4650      	mov	r0, sl
 8009690:	f7f6 ff48 	bl	8000524 <__aeabi_i2d>
 8009694:	4632      	mov	r2, r6
 8009696:	463b      	mov	r3, r7
 8009698:	f7f7 fa16 	bl	8000ac8 <__aeabi_dcmpeq>
 800969c:	b908      	cbnz	r0, 80096a2 <_dtoa_r+0x162>
 800969e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096a2:	f1ba 0f16 	cmp.w	sl, #22
 80096a6:	d859      	bhi.n	800975c <_dtoa_r+0x21c>
 80096a8:	4970      	ldr	r1, [pc, #448]	; (800986c <_dtoa_r+0x32c>)
 80096aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80096ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b6:	f7f7 fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d050      	beq.n	8009760 <_dtoa_r+0x220>
 80096be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096c2:	2300      	movs	r3, #0
 80096c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80096c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096c8:	1b5d      	subs	r5, r3, r5
 80096ca:	f1b5 0801 	subs.w	r8, r5, #1
 80096ce:	bf49      	itett	mi
 80096d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80096d4:	2300      	movpl	r3, #0
 80096d6:	9305      	strmi	r3, [sp, #20]
 80096d8:	f04f 0800 	movmi.w	r8, #0
 80096dc:	bf58      	it	pl
 80096de:	9305      	strpl	r3, [sp, #20]
 80096e0:	f1ba 0f00 	cmp.w	sl, #0
 80096e4:	db3e      	blt.n	8009764 <_dtoa_r+0x224>
 80096e6:	2300      	movs	r3, #0
 80096e8:	44d0      	add	r8, sl
 80096ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80096ee:	9307      	str	r3, [sp, #28]
 80096f0:	9b06      	ldr	r3, [sp, #24]
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	f200 8090 	bhi.w	8009818 <_dtoa_r+0x2d8>
 80096f8:	2b05      	cmp	r3, #5
 80096fa:	bfc4      	itt	gt
 80096fc:	3b04      	subgt	r3, #4
 80096fe:	9306      	strgt	r3, [sp, #24]
 8009700:	9b06      	ldr	r3, [sp, #24]
 8009702:	f1a3 0302 	sub.w	r3, r3, #2
 8009706:	bfcc      	ite	gt
 8009708:	2500      	movgt	r5, #0
 800970a:	2501      	movle	r5, #1
 800970c:	2b03      	cmp	r3, #3
 800970e:	f200 808f 	bhi.w	8009830 <_dtoa_r+0x2f0>
 8009712:	e8df f003 	tbb	[pc, r3]
 8009716:	7f7d      	.short	0x7f7d
 8009718:	7131      	.short	0x7131
 800971a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800971e:	441d      	add	r5, r3
 8009720:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009724:	2820      	cmp	r0, #32
 8009726:	dd13      	ble.n	8009750 <_dtoa_r+0x210>
 8009728:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800972c:	9b00      	ldr	r3, [sp, #0]
 800972e:	fa08 f800 	lsl.w	r8, r8, r0
 8009732:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009736:	fa23 f000 	lsr.w	r0, r3, r0
 800973a:	ea48 0000 	orr.w	r0, r8, r0
 800973e:	f7f6 fee1 	bl	8000504 <__aeabi_ui2d>
 8009742:	2301      	movs	r3, #1
 8009744:	4682      	mov	sl, r0
 8009746:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800974a:	3d01      	subs	r5, #1
 800974c:	9313      	str	r3, [sp, #76]	; 0x4c
 800974e:	e772      	b.n	8009636 <_dtoa_r+0xf6>
 8009750:	9b00      	ldr	r3, [sp, #0]
 8009752:	f1c0 0020 	rsb	r0, r0, #32
 8009756:	fa03 f000 	lsl.w	r0, r3, r0
 800975a:	e7f0      	b.n	800973e <_dtoa_r+0x1fe>
 800975c:	2301      	movs	r3, #1
 800975e:	e7b1      	b.n	80096c4 <_dtoa_r+0x184>
 8009760:	900f      	str	r0, [sp, #60]	; 0x3c
 8009762:	e7b0      	b.n	80096c6 <_dtoa_r+0x186>
 8009764:	9b05      	ldr	r3, [sp, #20]
 8009766:	eba3 030a 	sub.w	r3, r3, sl
 800976a:	9305      	str	r3, [sp, #20]
 800976c:	f1ca 0300 	rsb	r3, sl, #0
 8009770:	9307      	str	r3, [sp, #28]
 8009772:	2300      	movs	r3, #0
 8009774:	930e      	str	r3, [sp, #56]	; 0x38
 8009776:	e7bb      	b.n	80096f0 <_dtoa_r+0x1b0>
 8009778:	2301      	movs	r3, #1
 800977a:	930a      	str	r3, [sp, #40]	; 0x28
 800977c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977e:	2b00      	cmp	r3, #0
 8009780:	dd59      	ble.n	8009836 <_dtoa_r+0x2f6>
 8009782:	9302      	str	r3, [sp, #8]
 8009784:	4699      	mov	r9, r3
 8009786:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009788:	2200      	movs	r2, #0
 800978a:	6072      	str	r2, [r6, #4]
 800978c:	2204      	movs	r2, #4
 800978e:	f102 0014 	add.w	r0, r2, #20
 8009792:	4298      	cmp	r0, r3
 8009794:	6871      	ldr	r1, [r6, #4]
 8009796:	d953      	bls.n	8009840 <_dtoa_r+0x300>
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fca4 	bl	800a0e6 <_Balloc>
 800979e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097a0:	6030      	str	r0, [r6, #0]
 80097a2:	f1b9 0f0e 	cmp.w	r9, #14
 80097a6:	f8d3 b000 	ldr.w	fp, [r3]
 80097aa:	f200 80e6 	bhi.w	800997a <_dtoa_r+0x43a>
 80097ae:	2d00      	cmp	r5, #0
 80097b0:	f000 80e3 	beq.w	800997a <_dtoa_r+0x43a>
 80097b4:	ed9d 7b00 	vldr	d7, [sp]
 80097b8:	f1ba 0f00 	cmp.w	sl, #0
 80097bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80097c0:	dd74      	ble.n	80098ac <_dtoa_r+0x36c>
 80097c2:	4a2a      	ldr	r2, [pc, #168]	; (800986c <_dtoa_r+0x32c>)
 80097c4:	f00a 030f 	and.w	r3, sl, #15
 80097c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80097cc:	ed93 7b00 	vldr	d7, [r3]
 80097d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80097d4:	06f0      	lsls	r0, r6, #27
 80097d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80097da:	d565      	bpl.n	80098a8 <_dtoa_r+0x368>
 80097dc:	4b24      	ldr	r3, [pc, #144]	; (8009870 <_dtoa_r+0x330>)
 80097de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097e6:	f7f7 f831 	bl	800084c <__aeabi_ddiv>
 80097ea:	e9cd 0100 	strd	r0, r1, [sp]
 80097ee:	f006 060f 	and.w	r6, r6, #15
 80097f2:	2503      	movs	r5, #3
 80097f4:	4f1e      	ldr	r7, [pc, #120]	; (8009870 <_dtoa_r+0x330>)
 80097f6:	e04c      	b.n	8009892 <_dtoa_r+0x352>
 80097f8:	2301      	movs	r3, #1
 80097fa:	930a      	str	r3, [sp, #40]	; 0x28
 80097fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097fe:	4453      	add	r3, sl
 8009800:	f103 0901 	add.w	r9, r3, #1
 8009804:	9302      	str	r3, [sp, #8]
 8009806:	464b      	mov	r3, r9
 8009808:	2b01      	cmp	r3, #1
 800980a:	bfb8      	it	lt
 800980c:	2301      	movlt	r3, #1
 800980e:	e7ba      	b.n	8009786 <_dtoa_r+0x246>
 8009810:	2300      	movs	r3, #0
 8009812:	e7b2      	b.n	800977a <_dtoa_r+0x23a>
 8009814:	2300      	movs	r3, #0
 8009816:	e7f0      	b.n	80097fa <_dtoa_r+0x2ba>
 8009818:	2501      	movs	r5, #1
 800981a:	2300      	movs	r3, #0
 800981c:	9306      	str	r3, [sp, #24]
 800981e:	950a      	str	r5, [sp, #40]	; 0x28
 8009820:	f04f 33ff 	mov.w	r3, #4294967295
 8009824:	9302      	str	r3, [sp, #8]
 8009826:	4699      	mov	r9, r3
 8009828:	2200      	movs	r2, #0
 800982a:	2312      	movs	r3, #18
 800982c:	920b      	str	r2, [sp, #44]	; 0x2c
 800982e:	e7aa      	b.n	8009786 <_dtoa_r+0x246>
 8009830:	2301      	movs	r3, #1
 8009832:	930a      	str	r3, [sp, #40]	; 0x28
 8009834:	e7f4      	b.n	8009820 <_dtoa_r+0x2e0>
 8009836:	2301      	movs	r3, #1
 8009838:	9302      	str	r3, [sp, #8]
 800983a:	4699      	mov	r9, r3
 800983c:	461a      	mov	r2, r3
 800983e:	e7f5      	b.n	800982c <_dtoa_r+0x2ec>
 8009840:	3101      	adds	r1, #1
 8009842:	6071      	str	r1, [r6, #4]
 8009844:	0052      	lsls	r2, r2, #1
 8009846:	e7a2      	b.n	800978e <_dtoa_r+0x24e>
 8009848:	636f4361 	.word	0x636f4361
 800984c:	3fd287a7 	.word	0x3fd287a7
 8009850:	8b60c8b3 	.word	0x8b60c8b3
 8009854:	3fc68a28 	.word	0x3fc68a28
 8009858:	509f79fb 	.word	0x509f79fb
 800985c:	3fd34413 	.word	0x3fd34413
 8009860:	7ff00000 	.word	0x7ff00000
 8009864:	0800aac9 	.word	0x0800aac9
 8009868:	3ff80000 	.word	0x3ff80000
 800986c:	0800ab28 	.word	0x0800ab28
 8009870:	0800ab00 	.word	0x0800ab00
 8009874:	0800aaf5 	.word	0x0800aaf5
 8009878:	07f1      	lsls	r1, r6, #31
 800987a:	d508      	bpl.n	800988e <_dtoa_r+0x34e>
 800987c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009884:	f7f6 feb8 	bl	80005f8 <__aeabi_dmul>
 8009888:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800988c:	3501      	adds	r5, #1
 800988e:	1076      	asrs	r6, r6, #1
 8009890:	3708      	adds	r7, #8
 8009892:	2e00      	cmp	r6, #0
 8009894:	d1f0      	bne.n	8009878 <_dtoa_r+0x338>
 8009896:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800989a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800989e:	f7f6 ffd5 	bl	800084c <__aeabi_ddiv>
 80098a2:	e9cd 0100 	strd	r0, r1, [sp]
 80098a6:	e01a      	b.n	80098de <_dtoa_r+0x39e>
 80098a8:	2502      	movs	r5, #2
 80098aa:	e7a3      	b.n	80097f4 <_dtoa_r+0x2b4>
 80098ac:	f000 80a0 	beq.w	80099f0 <_dtoa_r+0x4b0>
 80098b0:	f1ca 0600 	rsb	r6, sl, #0
 80098b4:	4b9f      	ldr	r3, [pc, #636]	; (8009b34 <_dtoa_r+0x5f4>)
 80098b6:	4fa0      	ldr	r7, [pc, #640]	; (8009b38 <_dtoa_r+0x5f8>)
 80098b8:	f006 020f 	and.w	r2, r6, #15
 80098bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098c8:	f7f6 fe96 	bl	80005f8 <__aeabi_dmul>
 80098cc:	e9cd 0100 	strd	r0, r1, [sp]
 80098d0:	1136      	asrs	r6, r6, #4
 80098d2:	2300      	movs	r3, #0
 80098d4:	2502      	movs	r5, #2
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d17f      	bne.n	80099da <_dtoa_r+0x49a>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e1      	bne.n	80098a2 <_dtoa_r+0x362>
 80098de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 8087 	beq.w	80099f4 <_dtoa_r+0x4b4>
 80098e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80098ea:	2200      	movs	r2, #0
 80098ec:	4b93      	ldr	r3, [pc, #588]	; (8009b3c <_dtoa_r+0x5fc>)
 80098ee:	4630      	mov	r0, r6
 80098f0:	4639      	mov	r1, r7
 80098f2:	f7f7 f8f3 	bl	8000adc <__aeabi_dcmplt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d07c      	beq.n	80099f4 <_dtoa_r+0x4b4>
 80098fa:	f1b9 0f00 	cmp.w	r9, #0
 80098fe:	d079      	beq.n	80099f4 <_dtoa_r+0x4b4>
 8009900:	9b02      	ldr	r3, [sp, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	dd35      	ble.n	8009972 <_dtoa_r+0x432>
 8009906:	f10a 33ff 	add.w	r3, sl, #4294967295
 800990a:	9308      	str	r3, [sp, #32]
 800990c:	4639      	mov	r1, r7
 800990e:	2200      	movs	r2, #0
 8009910:	4b8b      	ldr	r3, [pc, #556]	; (8009b40 <_dtoa_r+0x600>)
 8009912:	4630      	mov	r0, r6
 8009914:	f7f6 fe70 	bl	80005f8 <__aeabi_dmul>
 8009918:	e9cd 0100 	strd	r0, r1, [sp]
 800991c:	9f02      	ldr	r7, [sp, #8]
 800991e:	3501      	adds	r5, #1
 8009920:	4628      	mov	r0, r5
 8009922:	f7f6 fdff 	bl	8000524 <__aeabi_i2d>
 8009926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992a:	f7f6 fe65 	bl	80005f8 <__aeabi_dmul>
 800992e:	2200      	movs	r2, #0
 8009930:	4b84      	ldr	r3, [pc, #528]	; (8009b44 <_dtoa_r+0x604>)
 8009932:	f7f6 fcab 	bl	800028c <__adddf3>
 8009936:	4605      	mov	r5, r0
 8009938:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800993c:	2f00      	cmp	r7, #0
 800993e:	d15d      	bne.n	80099fc <_dtoa_r+0x4bc>
 8009940:	2200      	movs	r2, #0
 8009942:	4b81      	ldr	r3, [pc, #516]	; (8009b48 <_dtoa_r+0x608>)
 8009944:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009948:	f7f6 fc9e 	bl	8000288 <__aeabi_dsub>
 800994c:	462a      	mov	r2, r5
 800994e:	4633      	mov	r3, r6
 8009950:	e9cd 0100 	strd	r0, r1, [sp]
 8009954:	f7f7 f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8009958:	2800      	cmp	r0, #0
 800995a:	f040 8288 	bne.w	8009e6e <_dtoa_r+0x92e>
 800995e:	462a      	mov	r2, r5
 8009960:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009968:	f7f7 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	f040 827c 	bne.w	8009e6a <_dtoa_r+0x92a>
 8009972:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009976:	e9cd 2300 	strd	r2, r3, [sp]
 800997a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800997c:	2b00      	cmp	r3, #0
 800997e:	f2c0 8150 	blt.w	8009c22 <_dtoa_r+0x6e2>
 8009982:	f1ba 0f0e 	cmp.w	sl, #14
 8009986:	f300 814c 	bgt.w	8009c22 <_dtoa_r+0x6e2>
 800998a:	4b6a      	ldr	r3, [pc, #424]	; (8009b34 <_dtoa_r+0x5f4>)
 800998c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009990:	ed93 7b00 	vldr	d7, [r3]
 8009994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009996:	2b00      	cmp	r3, #0
 8009998:	ed8d 7b02 	vstr	d7, [sp, #8]
 800999c:	f280 80d8 	bge.w	8009b50 <_dtoa_r+0x610>
 80099a0:	f1b9 0f00 	cmp.w	r9, #0
 80099a4:	f300 80d4 	bgt.w	8009b50 <_dtoa_r+0x610>
 80099a8:	f040 825e 	bne.w	8009e68 <_dtoa_r+0x928>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4b66      	ldr	r3, [pc, #408]	; (8009b48 <_dtoa_r+0x608>)
 80099b0:	ec51 0b17 	vmov	r0, r1, d7
 80099b4:	f7f6 fe20 	bl	80005f8 <__aeabi_dmul>
 80099b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099bc:	f7f7 f8a2 	bl	8000b04 <__aeabi_dcmpge>
 80099c0:	464f      	mov	r7, r9
 80099c2:	464e      	mov	r6, r9
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f040 8234 	bne.w	8009e32 <_dtoa_r+0x8f2>
 80099ca:	2331      	movs	r3, #49	; 0x31
 80099cc:	f10b 0501 	add.w	r5, fp, #1
 80099d0:	f88b 3000 	strb.w	r3, [fp]
 80099d4:	f10a 0a01 	add.w	sl, sl, #1
 80099d8:	e22f      	b.n	8009e3a <_dtoa_r+0x8fa>
 80099da:	07f2      	lsls	r2, r6, #31
 80099dc:	d505      	bpl.n	80099ea <_dtoa_r+0x4aa>
 80099de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e2:	f7f6 fe09 	bl	80005f8 <__aeabi_dmul>
 80099e6:	3501      	adds	r5, #1
 80099e8:	2301      	movs	r3, #1
 80099ea:	1076      	asrs	r6, r6, #1
 80099ec:	3708      	adds	r7, #8
 80099ee:	e772      	b.n	80098d6 <_dtoa_r+0x396>
 80099f0:	2502      	movs	r5, #2
 80099f2:	e774      	b.n	80098de <_dtoa_r+0x39e>
 80099f4:	f8cd a020 	str.w	sl, [sp, #32]
 80099f8:	464f      	mov	r7, r9
 80099fa:	e791      	b.n	8009920 <_dtoa_r+0x3e0>
 80099fc:	4b4d      	ldr	r3, [pc, #308]	; (8009b34 <_dtoa_r+0x5f4>)
 80099fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d047      	beq.n	8009a9c <_dtoa_r+0x55c>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	2000      	movs	r0, #0
 8009a12:	494e      	ldr	r1, [pc, #312]	; (8009b4c <_dtoa_r+0x60c>)
 8009a14:	f7f6 ff1a 	bl	800084c <__aeabi_ddiv>
 8009a18:	462a      	mov	r2, r5
 8009a1a:	4633      	mov	r3, r6
 8009a1c:	f7f6 fc34 	bl	8000288 <__aeabi_dsub>
 8009a20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009a24:	465d      	mov	r5, fp
 8009a26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a2a:	f7f7 f895 	bl	8000b58 <__aeabi_d2iz>
 8009a2e:	4606      	mov	r6, r0
 8009a30:	f7f6 fd78 	bl	8000524 <__aeabi_i2d>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a3c:	f7f6 fc24 	bl	8000288 <__aeabi_dsub>
 8009a40:	3630      	adds	r6, #48	; 0x30
 8009a42:	f805 6b01 	strb.w	r6, [r5], #1
 8009a46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a4a:	e9cd 0100 	strd	r0, r1, [sp]
 8009a4e:	f7f7 f845 	bl	8000adc <__aeabi_dcmplt>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d163      	bne.n	8009b1e <_dtoa_r+0x5de>
 8009a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	4937      	ldr	r1, [pc, #220]	; (8009b3c <_dtoa_r+0x5fc>)
 8009a5e:	f7f6 fc13 	bl	8000288 <__aeabi_dsub>
 8009a62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a66:	f7f7 f839 	bl	8000adc <__aeabi_dcmplt>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	f040 80b7 	bne.w	8009bde <_dtoa_r+0x69e>
 8009a70:	eba5 030b 	sub.w	r3, r5, fp
 8009a74:	429f      	cmp	r7, r3
 8009a76:	f77f af7c 	ble.w	8009972 <_dtoa_r+0x432>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	4b30      	ldr	r3, [pc, #192]	; (8009b40 <_dtoa_r+0x600>)
 8009a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a82:	f7f6 fdb9 	bl	80005f8 <__aeabi_dmul>
 8009a86:	2200      	movs	r2, #0
 8009a88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009a8c:	4b2c      	ldr	r3, [pc, #176]	; (8009b40 <_dtoa_r+0x600>)
 8009a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a92:	f7f6 fdb1 	bl	80005f8 <__aeabi_dmul>
 8009a96:	e9cd 0100 	strd	r0, r1, [sp]
 8009a9a:	e7c4      	b.n	8009a26 <_dtoa_r+0x4e6>
 8009a9c:	462a      	mov	r2, r5
 8009a9e:	4633      	mov	r3, r6
 8009aa0:	f7f6 fdaa 	bl	80005f8 <__aeabi_dmul>
 8009aa4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009aa8:	eb0b 0507 	add.w	r5, fp, r7
 8009aac:	465e      	mov	r6, fp
 8009aae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ab2:	f7f7 f851 	bl	8000b58 <__aeabi_d2iz>
 8009ab6:	4607      	mov	r7, r0
 8009ab8:	f7f6 fd34 	bl	8000524 <__aeabi_i2d>
 8009abc:	3730      	adds	r7, #48	; 0x30
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ac6:	f7f6 fbdf 	bl	8000288 <__aeabi_dsub>
 8009aca:	f806 7b01 	strb.w	r7, [r6], #1
 8009ace:	42ae      	cmp	r6, r5
 8009ad0:	e9cd 0100 	strd	r0, r1, [sp]
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	d126      	bne.n	8009b28 <_dtoa_r+0x5e8>
 8009ada:	4b1c      	ldr	r3, [pc, #112]	; (8009b4c <_dtoa_r+0x60c>)
 8009adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ae0:	f7f6 fbd4 	bl	800028c <__adddf3>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aec:	f7f7 f814 	bl	8000b18 <__aeabi_dcmpgt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d174      	bne.n	8009bde <_dtoa_r+0x69e>
 8009af4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009af8:	2000      	movs	r0, #0
 8009afa:	4914      	ldr	r1, [pc, #80]	; (8009b4c <_dtoa_r+0x60c>)
 8009afc:	f7f6 fbc4 	bl	8000288 <__aeabi_dsub>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b08:	f7f6 ffe8 	bl	8000adc <__aeabi_dcmplt>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f43f af30 	beq.w	8009972 <_dtoa_r+0x432>
 8009b12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b16:	2b30      	cmp	r3, #48	; 0x30
 8009b18:	f105 32ff 	add.w	r2, r5, #4294967295
 8009b1c:	d002      	beq.n	8009b24 <_dtoa_r+0x5e4>
 8009b1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009b22:	e04a      	b.n	8009bba <_dtoa_r+0x67a>
 8009b24:	4615      	mov	r5, r2
 8009b26:	e7f4      	b.n	8009b12 <_dtoa_r+0x5d2>
 8009b28:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <_dtoa_r+0x600>)
 8009b2a:	f7f6 fd65 	bl	80005f8 <__aeabi_dmul>
 8009b2e:	e9cd 0100 	strd	r0, r1, [sp]
 8009b32:	e7bc      	b.n	8009aae <_dtoa_r+0x56e>
 8009b34:	0800ab28 	.word	0x0800ab28
 8009b38:	0800ab00 	.word	0x0800ab00
 8009b3c:	3ff00000 	.word	0x3ff00000
 8009b40:	40240000 	.word	0x40240000
 8009b44:	401c0000 	.word	0x401c0000
 8009b48:	40140000 	.word	0x40140000
 8009b4c:	3fe00000 	.word	0x3fe00000
 8009b50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b54:	465d      	mov	r5, fp
 8009b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	f7f6 fe75 	bl	800084c <__aeabi_ddiv>
 8009b62:	f7f6 fff9 	bl	8000b58 <__aeabi_d2iz>
 8009b66:	4680      	mov	r8, r0
 8009b68:	f7f6 fcdc 	bl	8000524 <__aeabi_i2d>
 8009b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b70:	f7f6 fd42 	bl	80005f8 <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009b80:	f7f6 fb82 	bl	8000288 <__aeabi_dsub>
 8009b84:	f805 6b01 	strb.w	r6, [r5], #1
 8009b88:	eba5 060b 	sub.w	r6, r5, fp
 8009b8c:	45b1      	cmp	r9, r6
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	d139      	bne.n	8009c08 <_dtoa_r+0x6c8>
 8009b94:	f7f6 fb7a 	bl	800028c <__adddf3>
 8009b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	460f      	mov	r7, r1
 8009ba0:	f7f6 ffba 	bl	8000b18 <__aeabi_dcmpgt>
 8009ba4:	b9c8      	cbnz	r0, 8009bda <_dtoa_r+0x69a>
 8009ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009baa:	4630      	mov	r0, r6
 8009bac:	4639      	mov	r1, r7
 8009bae:	f7f6 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb2:	b110      	cbz	r0, 8009bba <_dtoa_r+0x67a>
 8009bb4:	f018 0f01 	tst.w	r8, #1
 8009bb8:	d10f      	bne.n	8009bda <_dtoa_r+0x69a>
 8009bba:	9904      	ldr	r1, [sp, #16]
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 fac6 	bl	800a14e <_Bfree>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bc6:	702b      	strb	r3, [r5, #0]
 8009bc8:	f10a 0301 	add.w	r3, sl, #1
 8009bcc:	6013      	str	r3, [r2, #0]
 8009bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 8241 	beq.w	800a058 <_dtoa_r+0xb18>
 8009bd6:	601d      	str	r5, [r3, #0]
 8009bd8:	e23e      	b.n	800a058 <_dtoa_r+0xb18>
 8009bda:	f8cd a020 	str.w	sl, [sp, #32]
 8009bde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009be2:	2a39      	cmp	r2, #57	; 0x39
 8009be4:	f105 33ff 	add.w	r3, r5, #4294967295
 8009be8:	d108      	bne.n	8009bfc <_dtoa_r+0x6bc>
 8009bea:	459b      	cmp	fp, r3
 8009bec:	d10a      	bne.n	8009c04 <_dtoa_r+0x6c4>
 8009bee:	9b08      	ldr	r3, [sp, #32]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	9308      	str	r3, [sp, #32]
 8009bf4:	2330      	movs	r3, #48	; 0x30
 8009bf6:	f88b 3000 	strb.w	r3, [fp]
 8009bfa:	465b      	mov	r3, fp
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	3201      	adds	r2, #1
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e78c      	b.n	8009b1e <_dtoa_r+0x5de>
 8009c04:	461d      	mov	r5, r3
 8009c06:	e7ea      	b.n	8009bde <_dtoa_r+0x69e>
 8009c08:	2200      	movs	r2, #0
 8009c0a:	4b9b      	ldr	r3, [pc, #620]	; (8009e78 <_dtoa_r+0x938>)
 8009c0c:	f7f6 fcf4 	bl	80005f8 <__aeabi_dmul>
 8009c10:	2200      	movs	r2, #0
 8009c12:	2300      	movs	r3, #0
 8009c14:	4606      	mov	r6, r0
 8009c16:	460f      	mov	r7, r1
 8009c18:	f7f6 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d09a      	beq.n	8009b56 <_dtoa_r+0x616>
 8009c20:	e7cb      	b.n	8009bba <_dtoa_r+0x67a>
 8009c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c24:	2a00      	cmp	r2, #0
 8009c26:	f000 808b 	beq.w	8009d40 <_dtoa_r+0x800>
 8009c2a:	9a06      	ldr	r2, [sp, #24]
 8009c2c:	2a01      	cmp	r2, #1
 8009c2e:	dc6e      	bgt.n	8009d0e <_dtoa_r+0x7ce>
 8009c30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	d067      	beq.n	8009d06 <_dtoa_r+0x7c6>
 8009c36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c3a:	9f07      	ldr	r7, [sp, #28]
 8009c3c:	9d05      	ldr	r5, [sp, #20]
 8009c3e:	9a05      	ldr	r2, [sp, #20]
 8009c40:	2101      	movs	r1, #1
 8009c42:	441a      	add	r2, r3
 8009c44:	4620      	mov	r0, r4
 8009c46:	9205      	str	r2, [sp, #20]
 8009c48:	4498      	add	r8, r3
 8009c4a:	f000 fb20 	bl	800a28e <__i2b>
 8009c4e:	4606      	mov	r6, r0
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	dd0c      	ble.n	8009c6e <_dtoa_r+0x72e>
 8009c54:	f1b8 0f00 	cmp.w	r8, #0
 8009c58:	dd09      	ble.n	8009c6e <_dtoa_r+0x72e>
 8009c5a:	4545      	cmp	r5, r8
 8009c5c:	9a05      	ldr	r2, [sp, #20]
 8009c5e:	462b      	mov	r3, r5
 8009c60:	bfa8      	it	ge
 8009c62:	4643      	movge	r3, r8
 8009c64:	1ad2      	subs	r2, r2, r3
 8009c66:	9205      	str	r2, [sp, #20]
 8009c68:	1aed      	subs	r5, r5, r3
 8009c6a:	eba8 0803 	sub.w	r8, r8, r3
 8009c6e:	9b07      	ldr	r3, [sp, #28]
 8009c70:	b1eb      	cbz	r3, 8009cae <_dtoa_r+0x76e>
 8009c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d067      	beq.n	8009d48 <_dtoa_r+0x808>
 8009c78:	b18f      	cbz	r7, 8009c9e <_dtoa_r+0x75e>
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	463a      	mov	r2, r7
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 fba4 	bl	800a3cc <__pow5mult>
 8009c84:	9a04      	ldr	r2, [sp, #16]
 8009c86:	4601      	mov	r1, r0
 8009c88:	4606      	mov	r6, r0
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fb08 	bl	800a2a0 <__multiply>
 8009c90:	9904      	ldr	r1, [sp, #16]
 8009c92:	9008      	str	r0, [sp, #32]
 8009c94:	4620      	mov	r0, r4
 8009c96:	f000 fa5a 	bl	800a14e <_Bfree>
 8009c9a:	9b08      	ldr	r3, [sp, #32]
 8009c9c:	9304      	str	r3, [sp, #16]
 8009c9e:	9b07      	ldr	r3, [sp, #28]
 8009ca0:	1bda      	subs	r2, r3, r7
 8009ca2:	d004      	beq.n	8009cae <_dtoa_r+0x76e>
 8009ca4:	9904      	ldr	r1, [sp, #16]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 fb90 	bl	800a3cc <__pow5mult>
 8009cac:	9004      	str	r0, [sp, #16]
 8009cae:	2101      	movs	r1, #1
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 faec 	bl	800a28e <__i2b>
 8009cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cb8:	4607      	mov	r7, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 81d0 	beq.w	800a060 <_dtoa_r+0xb20>
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 fb81 	bl	800a3cc <__pow5mult>
 8009cca:	9b06      	ldr	r3, [sp, #24]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	4607      	mov	r7, r0
 8009cd0:	dc40      	bgt.n	8009d54 <_dtoa_r+0x814>
 8009cd2:	9b00      	ldr	r3, [sp, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d139      	bne.n	8009d4c <_dtoa_r+0x80c>
 8009cd8:	9b01      	ldr	r3, [sp, #4]
 8009cda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d136      	bne.n	8009d50 <_dtoa_r+0x810>
 8009ce2:	9b01      	ldr	r3, [sp, #4]
 8009ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ce8:	0d1b      	lsrs	r3, r3, #20
 8009cea:	051b      	lsls	r3, r3, #20
 8009cec:	b12b      	cbz	r3, 8009cfa <_dtoa_r+0x7ba>
 8009cee:	9b05      	ldr	r3, [sp, #20]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	f108 0801 	add.w	r8, r8, #1
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	9307      	str	r3, [sp, #28]
 8009cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d12a      	bne.n	8009d58 <_dtoa_r+0x818>
 8009d02:	2001      	movs	r0, #1
 8009d04:	e030      	b.n	8009d68 <_dtoa_r+0x828>
 8009d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d0c:	e795      	b.n	8009c3a <_dtoa_r+0x6fa>
 8009d0e:	9b07      	ldr	r3, [sp, #28]
 8009d10:	f109 37ff 	add.w	r7, r9, #4294967295
 8009d14:	42bb      	cmp	r3, r7
 8009d16:	bfbf      	itttt	lt
 8009d18:	9b07      	ldrlt	r3, [sp, #28]
 8009d1a:	9707      	strlt	r7, [sp, #28]
 8009d1c:	1afa      	sublt	r2, r7, r3
 8009d1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009d20:	bfbb      	ittet	lt
 8009d22:	189b      	addlt	r3, r3, r2
 8009d24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009d26:	1bdf      	subge	r7, r3, r7
 8009d28:	2700      	movlt	r7, #0
 8009d2a:	f1b9 0f00 	cmp.w	r9, #0
 8009d2e:	bfb5      	itete	lt
 8009d30:	9b05      	ldrlt	r3, [sp, #20]
 8009d32:	9d05      	ldrge	r5, [sp, #20]
 8009d34:	eba3 0509 	sublt.w	r5, r3, r9
 8009d38:	464b      	movge	r3, r9
 8009d3a:	bfb8      	it	lt
 8009d3c:	2300      	movlt	r3, #0
 8009d3e:	e77e      	b.n	8009c3e <_dtoa_r+0x6fe>
 8009d40:	9f07      	ldr	r7, [sp, #28]
 8009d42:	9d05      	ldr	r5, [sp, #20]
 8009d44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009d46:	e783      	b.n	8009c50 <_dtoa_r+0x710>
 8009d48:	9a07      	ldr	r2, [sp, #28]
 8009d4a:	e7ab      	b.n	8009ca4 <_dtoa_r+0x764>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e7d4      	b.n	8009cfa <_dtoa_r+0x7ba>
 8009d50:	9b00      	ldr	r3, [sp, #0]
 8009d52:	e7d2      	b.n	8009cfa <_dtoa_r+0x7ba>
 8009d54:	2300      	movs	r3, #0
 8009d56:	9307      	str	r3, [sp, #28]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009d5e:	6918      	ldr	r0, [r3, #16]
 8009d60:	f000 fa47 	bl	800a1f2 <__hi0bits>
 8009d64:	f1c0 0020 	rsb	r0, r0, #32
 8009d68:	4440      	add	r0, r8
 8009d6a:	f010 001f 	ands.w	r0, r0, #31
 8009d6e:	d047      	beq.n	8009e00 <_dtoa_r+0x8c0>
 8009d70:	f1c0 0320 	rsb	r3, r0, #32
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	dd3b      	ble.n	8009df0 <_dtoa_r+0x8b0>
 8009d78:	9b05      	ldr	r3, [sp, #20]
 8009d7a:	f1c0 001c 	rsb	r0, r0, #28
 8009d7e:	4403      	add	r3, r0
 8009d80:	9305      	str	r3, [sp, #20]
 8009d82:	4405      	add	r5, r0
 8009d84:	4480      	add	r8, r0
 8009d86:	9b05      	ldr	r3, [sp, #20]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	dd05      	ble.n	8009d98 <_dtoa_r+0x858>
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	9904      	ldr	r1, [sp, #16]
 8009d90:	4620      	mov	r0, r4
 8009d92:	f000 fb69 	bl	800a468 <__lshift>
 8009d96:	9004      	str	r0, [sp, #16]
 8009d98:	f1b8 0f00 	cmp.w	r8, #0
 8009d9c:	dd05      	ble.n	8009daa <_dtoa_r+0x86a>
 8009d9e:	4639      	mov	r1, r7
 8009da0:	4642      	mov	r2, r8
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 fb60 	bl	800a468 <__lshift>
 8009da8:	4607      	mov	r7, r0
 8009daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dac:	b353      	cbz	r3, 8009e04 <_dtoa_r+0x8c4>
 8009dae:	4639      	mov	r1, r7
 8009db0:	9804      	ldr	r0, [sp, #16]
 8009db2:	f000 fbad 	bl	800a510 <__mcmp>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	da24      	bge.n	8009e04 <_dtoa_r+0x8c4>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	220a      	movs	r2, #10
 8009dbe:	9904      	ldr	r1, [sp, #16]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 f9db 	bl	800a17c <__multadd>
 8009dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc8:	9004      	str	r0, [sp, #16]
 8009dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 814d 	beq.w	800a06e <_dtoa_r+0xb2e>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	220a      	movs	r2, #10
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 f9ce 	bl	800a17c <__multadd>
 8009de0:	9b02      	ldr	r3, [sp, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	4606      	mov	r6, r0
 8009de6:	dc4f      	bgt.n	8009e88 <_dtoa_r+0x948>
 8009de8:	9b06      	ldr	r3, [sp, #24]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	dd4c      	ble.n	8009e88 <_dtoa_r+0x948>
 8009dee:	e011      	b.n	8009e14 <_dtoa_r+0x8d4>
 8009df0:	d0c9      	beq.n	8009d86 <_dtoa_r+0x846>
 8009df2:	9a05      	ldr	r2, [sp, #20]
 8009df4:	331c      	adds	r3, #28
 8009df6:	441a      	add	r2, r3
 8009df8:	9205      	str	r2, [sp, #20]
 8009dfa:	441d      	add	r5, r3
 8009dfc:	4498      	add	r8, r3
 8009dfe:	e7c2      	b.n	8009d86 <_dtoa_r+0x846>
 8009e00:	4603      	mov	r3, r0
 8009e02:	e7f6      	b.n	8009df2 <_dtoa_r+0x8b2>
 8009e04:	f1b9 0f00 	cmp.w	r9, #0
 8009e08:	dc38      	bgt.n	8009e7c <_dtoa_r+0x93c>
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	dd35      	ble.n	8009e7c <_dtoa_r+0x93c>
 8009e10:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e14:	9b02      	ldr	r3, [sp, #8]
 8009e16:	b963      	cbnz	r3, 8009e32 <_dtoa_r+0x8f2>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	2205      	movs	r2, #5
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 f9ad 	bl	800a17c <__multadd>
 8009e22:	4601      	mov	r1, r0
 8009e24:	4607      	mov	r7, r0
 8009e26:	9804      	ldr	r0, [sp, #16]
 8009e28:	f000 fb72 	bl	800a510 <__mcmp>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	f73f adcc 	bgt.w	80099ca <_dtoa_r+0x48a>
 8009e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e34:	465d      	mov	r5, fp
 8009e36:	ea6f 0a03 	mvn.w	sl, r3
 8009e3a:	f04f 0900 	mov.w	r9, #0
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4620      	mov	r0, r4
 8009e42:	f000 f984 	bl	800a14e <_Bfree>
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	f43f aeb7 	beq.w	8009bba <_dtoa_r+0x67a>
 8009e4c:	f1b9 0f00 	cmp.w	r9, #0
 8009e50:	d005      	beq.n	8009e5e <_dtoa_r+0x91e>
 8009e52:	45b1      	cmp	r9, r6
 8009e54:	d003      	beq.n	8009e5e <_dtoa_r+0x91e>
 8009e56:	4649      	mov	r1, r9
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 f978 	bl	800a14e <_Bfree>
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 f974 	bl	800a14e <_Bfree>
 8009e66:	e6a8      	b.n	8009bba <_dtoa_r+0x67a>
 8009e68:	2700      	movs	r7, #0
 8009e6a:	463e      	mov	r6, r7
 8009e6c:	e7e1      	b.n	8009e32 <_dtoa_r+0x8f2>
 8009e6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009e72:	463e      	mov	r6, r7
 8009e74:	e5a9      	b.n	80099ca <_dtoa_r+0x48a>
 8009e76:	bf00      	nop
 8009e78:	40240000 	.word	0x40240000
 8009e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 80fa 	beq.w	800a07c <_dtoa_r+0xb3c>
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	dd05      	ble.n	8009e98 <_dtoa_r+0x958>
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	462a      	mov	r2, r5
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fae9 	bl	800a468 <__lshift>
 8009e96:	4606      	mov	r6, r0
 8009e98:	9b07      	ldr	r3, [sp, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d04c      	beq.n	8009f38 <_dtoa_r+0x9f8>
 8009e9e:	6871      	ldr	r1, [r6, #4]
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 f920 	bl	800a0e6 <_Balloc>
 8009ea6:	6932      	ldr	r2, [r6, #16]
 8009ea8:	3202      	adds	r2, #2
 8009eaa:	4605      	mov	r5, r0
 8009eac:	0092      	lsls	r2, r2, #2
 8009eae:	f106 010c 	add.w	r1, r6, #12
 8009eb2:	300c      	adds	r0, #12
 8009eb4:	f000 f90a 	bl	800a0cc <memcpy>
 8009eb8:	2201      	movs	r2, #1
 8009eba:	4629      	mov	r1, r5
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 fad3 	bl	800a468 <__lshift>
 8009ec2:	9b00      	ldr	r3, [sp, #0]
 8009ec4:	f8cd b014 	str.w	fp, [sp, #20]
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	46b1      	mov	r9, r6
 8009ece:	9307      	str	r3, [sp, #28]
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	9804      	ldr	r0, [sp, #16]
 8009ed6:	f7ff faa7 	bl	8009428 <quorem>
 8009eda:	4649      	mov	r1, r9
 8009edc:	4605      	mov	r5, r0
 8009ede:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009ee2:	9804      	ldr	r0, [sp, #16]
 8009ee4:	f000 fb14 	bl	800a510 <__mcmp>
 8009ee8:	4632      	mov	r2, r6
 8009eea:	9000      	str	r0, [sp, #0]
 8009eec:	4639      	mov	r1, r7
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 fb28 	bl	800a544 <__mdiff>
 8009ef4:	68c3      	ldr	r3, [r0, #12]
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	bb03      	cbnz	r3, 8009f3c <_dtoa_r+0x9fc>
 8009efa:	4601      	mov	r1, r0
 8009efc:	9008      	str	r0, [sp, #32]
 8009efe:	9804      	ldr	r0, [sp, #16]
 8009f00:	f000 fb06 	bl	800a510 <__mcmp>
 8009f04:	9a08      	ldr	r2, [sp, #32]
 8009f06:	4603      	mov	r3, r0
 8009f08:	4611      	mov	r1, r2
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	9308      	str	r3, [sp, #32]
 8009f0e:	f000 f91e 	bl	800a14e <_Bfree>
 8009f12:	9b08      	ldr	r3, [sp, #32]
 8009f14:	b9a3      	cbnz	r3, 8009f40 <_dtoa_r+0xa00>
 8009f16:	9a06      	ldr	r2, [sp, #24]
 8009f18:	b992      	cbnz	r2, 8009f40 <_dtoa_r+0xa00>
 8009f1a:	9a07      	ldr	r2, [sp, #28]
 8009f1c:	b982      	cbnz	r2, 8009f40 <_dtoa_r+0xa00>
 8009f1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009f22:	d029      	beq.n	8009f78 <_dtoa_r+0xa38>
 8009f24:	9b00      	ldr	r3, [sp, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dd01      	ble.n	8009f2e <_dtoa_r+0x9ee>
 8009f2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009f2e:	9b05      	ldr	r3, [sp, #20]
 8009f30:	1c5d      	adds	r5, r3, #1
 8009f32:	f883 8000 	strb.w	r8, [r3]
 8009f36:	e782      	b.n	8009e3e <_dtoa_r+0x8fe>
 8009f38:	4630      	mov	r0, r6
 8009f3a:	e7c2      	b.n	8009ec2 <_dtoa_r+0x982>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e7e3      	b.n	8009f08 <_dtoa_r+0x9c8>
 8009f40:	9a00      	ldr	r2, [sp, #0]
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	db04      	blt.n	8009f50 <_dtoa_r+0xa10>
 8009f46:	d125      	bne.n	8009f94 <_dtoa_r+0xa54>
 8009f48:	9a06      	ldr	r2, [sp, #24]
 8009f4a:	bb1a      	cbnz	r2, 8009f94 <_dtoa_r+0xa54>
 8009f4c:	9a07      	ldr	r2, [sp, #28]
 8009f4e:	bb0a      	cbnz	r2, 8009f94 <_dtoa_r+0xa54>
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	ddec      	ble.n	8009f2e <_dtoa_r+0x9ee>
 8009f54:	2201      	movs	r2, #1
 8009f56:	9904      	ldr	r1, [sp, #16]
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 fa85 	bl	800a468 <__lshift>
 8009f5e:	4639      	mov	r1, r7
 8009f60:	9004      	str	r0, [sp, #16]
 8009f62:	f000 fad5 	bl	800a510 <__mcmp>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	dc03      	bgt.n	8009f72 <_dtoa_r+0xa32>
 8009f6a:	d1e0      	bne.n	8009f2e <_dtoa_r+0x9ee>
 8009f6c:	f018 0f01 	tst.w	r8, #1
 8009f70:	d0dd      	beq.n	8009f2e <_dtoa_r+0x9ee>
 8009f72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009f76:	d1d8      	bne.n	8009f2a <_dtoa_r+0x9ea>
 8009f78:	9b05      	ldr	r3, [sp, #20]
 8009f7a:	9a05      	ldr	r2, [sp, #20]
 8009f7c:	1c5d      	adds	r5, r3, #1
 8009f7e:	2339      	movs	r3, #57	; 0x39
 8009f80:	7013      	strb	r3, [r2, #0]
 8009f82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f86:	2b39      	cmp	r3, #57	; 0x39
 8009f88:	f105 32ff 	add.w	r2, r5, #4294967295
 8009f8c:	d04f      	beq.n	800a02e <_dtoa_r+0xaee>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	7013      	strb	r3, [r2, #0]
 8009f92:	e754      	b.n	8009e3e <_dtoa_r+0x8fe>
 8009f94:	9a05      	ldr	r2, [sp, #20]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f102 0501 	add.w	r5, r2, #1
 8009f9c:	dd06      	ble.n	8009fac <_dtoa_r+0xa6c>
 8009f9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009fa2:	d0e9      	beq.n	8009f78 <_dtoa_r+0xa38>
 8009fa4:	f108 0801 	add.w	r8, r8, #1
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	e7c2      	b.n	8009f32 <_dtoa_r+0x9f2>
 8009fac:	9a02      	ldr	r2, [sp, #8]
 8009fae:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009fb2:	eba5 030b 	sub.w	r3, r5, fp
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d021      	beq.n	8009ffe <_dtoa_r+0xabe>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	220a      	movs	r2, #10
 8009fbe:	9904      	ldr	r1, [sp, #16]
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 f8db 	bl	800a17c <__multadd>
 8009fc6:	45b1      	cmp	r9, r6
 8009fc8:	9004      	str	r0, [sp, #16]
 8009fca:	f04f 0300 	mov.w	r3, #0
 8009fce:	f04f 020a 	mov.w	r2, #10
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	d105      	bne.n	8009fe4 <_dtoa_r+0xaa4>
 8009fd8:	f000 f8d0 	bl	800a17c <__multadd>
 8009fdc:	4681      	mov	r9, r0
 8009fde:	4606      	mov	r6, r0
 8009fe0:	9505      	str	r5, [sp, #20]
 8009fe2:	e776      	b.n	8009ed2 <_dtoa_r+0x992>
 8009fe4:	f000 f8ca 	bl	800a17c <__multadd>
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4681      	mov	r9, r0
 8009fec:	2300      	movs	r3, #0
 8009fee:	220a      	movs	r2, #10
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 f8c3 	bl	800a17c <__multadd>
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	e7f2      	b.n	8009fe0 <_dtoa_r+0xaa0>
 8009ffa:	f04f 0900 	mov.w	r9, #0
 8009ffe:	2201      	movs	r2, #1
 800a000:	9904      	ldr	r1, [sp, #16]
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fa30 	bl	800a468 <__lshift>
 800a008:	4639      	mov	r1, r7
 800a00a:	9004      	str	r0, [sp, #16]
 800a00c:	f000 fa80 	bl	800a510 <__mcmp>
 800a010:	2800      	cmp	r0, #0
 800a012:	dcb6      	bgt.n	8009f82 <_dtoa_r+0xa42>
 800a014:	d102      	bne.n	800a01c <_dtoa_r+0xadc>
 800a016:	f018 0f01 	tst.w	r8, #1
 800a01a:	d1b2      	bne.n	8009f82 <_dtoa_r+0xa42>
 800a01c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a020:	2b30      	cmp	r3, #48	; 0x30
 800a022:	f105 32ff 	add.w	r2, r5, #4294967295
 800a026:	f47f af0a 	bne.w	8009e3e <_dtoa_r+0x8fe>
 800a02a:	4615      	mov	r5, r2
 800a02c:	e7f6      	b.n	800a01c <_dtoa_r+0xadc>
 800a02e:	4593      	cmp	fp, r2
 800a030:	d105      	bne.n	800a03e <_dtoa_r+0xafe>
 800a032:	2331      	movs	r3, #49	; 0x31
 800a034:	f10a 0a01 	add.w	sl, sl, #1
 800a038:	f88b 3000 	strb.w	r3, [fp]
 800a03c:	e6ff      	b.n	8009e3e <_dtoa_r+0x8fe>
 800a03e:	4615      	mov	r5, r2
 800a040:	e79f      	b.n	8009f82 <_dtoa_r+0xa42>
 800a042:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a0a8 <_dtoa_r+0xb68>
 800a046:	e007      	b.n	800a058 <_dtoa_r+0xb18>
 800a048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a04a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a0ac <_dtoa_r+0xb6c>
 800a04e:	b11b      	cbz	r3, 800a058 <_dtoa_r+0xb18>
 800a050:	f10b 0308 	add.w	r3, fp, #8
 800a054:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	4658      	mov	r0, fp
 800a05a:	b017      	add	sp, #92	; 0x5c
 800a05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a060:	9b06      	ldr	r3, [sp, #24]
 800a062:	2b01      	cmp	r3, #1
 800a064:	f77f ae35 	ble.w	8009cd2 <_dtoa_r+0x792>
 800a068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a06a:	9307      	str	r3, [sp, #28]
 800a06c:	e649      	b.n	8009d02 <_dtoa_r+0x7c2>
 800a06e:	9b02      	ldr	r3, [sp, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	dc03      	bgt.n	800a07c <_dtoa_r+0xb3c>
 800a074:	9b06      	ldr	r3, [sp, #24]
 800a076:	2b02      	cmp	r3, #2
 800a078:	f73f aecc 	bgt.w	8009e14 <_dtoa_r+0x8d4>
 800a07c:	465d      	mov	r5, fp
 800a07e:	4639      	mov	r1, r7
 800a080:	9804      	ldr	r0, [sp, #16]
 800a082:	f7ff f9d1 	bl	8009428 <quorem>
 800a086:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a08a:	f805 8b01 	strb.w	r8, [r5], #1
 800a08e:	9a02      	ldr	r2, [sp, #8]
 800a090:	eba5 030b 	sub.w	r3, r5, fp
 800a094:	429a      	cmp	r2, r3
 800a096:	ddb0      	ble.n	8009ffa <_dtoa_r+0xaba>
 800a098:	2300      	movs	r3, #0
 800a09a:	220a      	movs	r2, #10
 800a09c:	9904      	ldr	r1, [sp, #16]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 f86c 	bl	800a17c <__multadd>
 800a0a4:	9004      	str	r0, [sp, #16]
 800a0a6:	e7ea      	b.n	800a07e <_dtoa_r+0xb3e>
 800a0a8:	0800aac8 	.word	0x0800aac8
 800a0ac:	0800aaec 	.word	0x0800aaec

0800a0b0 <_localeconv_r>:
 800a0b0:	4b04      	ldr	r3, [pc, #16]	; (800a0c4 <_localeconv_r+0x14>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6a18      	ldr	r0, [r3, #32]
 800a0b6:	4b04      	ldr	r3, [pc, #16]	; (800a0c8 <_localeconv_r+0x18>)
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	bf08      	it	eq
 800a0bc:	4618      	moveq	r0, r3
 800a0be:	30f0      	adds	r0, #240	; 0xf0
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20000188 	.word	0x20000188
 800a0c8:	200001ec 	.word	0x200001ec

0800a0cc <memcpy>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	1e43      	subs	r3, r0, #1
 800a0d0:	440a      	add	r2, r1
 800a0d2:	4291      	cmp	r1, r2
 800a0d4:	d100      	bne.n	800a0d8 <memcpy+0xc>
 800a0d6:	bd10      	pop	{r4, pc}
 800a0d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0e0:	e7f7      	b.n	800a0d2 <memcpy+0x6>

0800a0e2 <__malloc_lock>:
 800a0e2:	4770      	bx	lr

0800a0e4 <__malloc_unlock>:
 800a0e4:	4770      	bx	lr

0800a0e6 <_Balloc>:
 800a0e6:	b570      	push	{r4, r5, r6, lr}
 800a0e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460e      	mov	r6, r1
 800a0ee:	b93d      	cbnz	r5, 800a100 <_Balloc+0x1a>
 800a0f0:	2010      	movs	r0, #16
 800a0f2:	f7fe fc4d 	bl	8008990 <malloc>
 800a0f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a0f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0fc:	6005      	str	r5, [r0, #0]
 800a0fe:	60c5      	str	r5, [r0, #12]
 800a100:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a102:	68eb      	ldr	r3, [r5, #12]
 800a104:	b183      	cbz	r3, 800a128 <_Balloc+0x42>
 800a106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a10e:	b9b8      	cbnz	r0, 800a140 <_Balloc+0x5a>
 800a110:	2101      	movs	r1, #1
 800a112:	fa01 f506 	lsl.w	r5, r1, r6
 800a116:	1d6a      	adds	r2, r5, #5
 800a118:	0092      	lsls	r2, r2, #2
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 fabe 	bl	800a69c <_calloc_r>
 800a120:	b160      	cbz	r0, 800a13c <_Balloc+0x56>
 800a122:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a126:	e00e      	b.n	800a146 <_Balloc+0x60>
 800a128:	2221      	movs	r2, #33	; 0x21
 800a12a:	2104      	movs	r1, #4
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 fab5 	bl	800a69c <_calloc_r>
 800a132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a134:	60e8      	str	r0, [r5, #12]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e4      	bne.n	800a106 <_Balloc+0x20>
 800a13c:	2000      	movs	r0, #0
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	6802      	ldr	r2, [r0, #0]
 800a142:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a146:	2300      	movs	r3, #0
 800a148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a14c:	e7f7      	b.n	800a13e <_Balloc+0x58>

0800a14e <_Bfree>:
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a152:	4606      	mov	r6, r0
 800a154:	460d      	mov	r5, r1
 800a156:	b93c      	cbnz	r4, 800a168 <_Bfree+0x1a>
 800a158:	2010      	movs	r0, #16
 800a15a:	f7fe fc19 	bl	8008990 <malloc>
 800a15e:	6270      	str	r0, [r6, #36]	; 0x24
 800a160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a164:	6004      	str	r4, [r0, #0]
 800a166:	60c4      	str	r4, [r0, #12]
 800a168:	b13d      	cbz	r5, 800a17a <_Bfree+0x2c>
 800a16a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a16c:	686a      	ldr	r2, [r5, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a174:	6029      	str	r1, [r5, #0]
 800a176:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a17a:	bd70      	pop	{r4, r5, r6, pc}

0800a17c <__multadd>:
 800a17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a180:	690d      	ldr	r5, [r1, #16]
 800a182:	461f      	mov	r7, r3
 800a184:	4606      	mov	r6, r0
 800a186:	460c      	mov	r4, r1
 800a188:	f101 0c14 	add.w	ip, r1, #20
 800a18c:	2300      	movs	r3, #0
 800a18e:	f8dc 0000 	ldr.w	r0, [ip]
 800a192:	b281      	uxth	r1, r0
 800a194:	fb02 7101 	mla	r1, r2, r1, r7
 800a198:	0c0f      	lsrs	r7, r1, #16
 800a19a:	0c00      	lsrs	r0, r0, #16
 800a19c:	fb02 7000 	mla	r0, r2, r0, r7
 800a1a0:	b289      	uxth	r1, r1
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a1a8:	429d      	cmp	r5, r3
 800a1aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a1ae:	f84c 1b04 	str.w	r1, [ip], #4
 800a1b2:	dcec      	bgt.n	800a18e <__multadd+0x12>
 800a1b4:	b1d7      	cbz	r7, 800a1ec <__multadd+0x70>
 800a1b6:	68a3      	ldr	r3, [r4, #8]
 800a1b8:	42ab      	cmp	r3, r5
 800a1ba:	dc12      	bgt.n	800a1e2 <__multadd+0x66>
 800a1bc:	6861      	ldr	r1, [r4, #4]
 800a1be:	4630      	mov	r0, r6
 800a1c0:	3101      	adds	r1, #1
 800a1c2:	f7ff ff90 	bl	800a0e6 <_Balloc>
 800a1c6:	6922      	ldr	r2, [r4, #16]
 800a1c8:	3202      	adds	r2, #2
 800a1ca:	f104 010c 	add.w	r1, r4, #12
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	0092      	lsls	r2, r2, #2
 800a1d2:	300c      	adds	r0, #12
 800a1d4:	f7ff ff7a 	bl	800a0cc <memcpy>
 800a1d8:	4621      	mov	r1, r4
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff ffb7 	bl	800a14e <_Bfree>
 800a1e0:	4644      	mov	r4, r8
 800a1e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1e6:	3501      	adds	r5, #1
 800a1e8:	615f      	str	r7, [r3, #20]
 800a1ea:	6125      	str	r5, [r4, #16]
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a1f2 <__hi0bits>:
 800a1f2:	0c02      	lsrs	r2, r0, #16
 800a1f4:	0412      	lsls	r2, r2, #16
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	b9b2      	cbnz	r2, 800a228 <__hi0bits+0x36>
 800a1fa:	0403      	lsls	r3, r0, #16
 800a1fc:	2010      	movs	r0, #16
 800a1fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a202:	bf04      	itt	eq
 800a204:	021b      	lsleq	r3, r3, #8
 800a206:	3008      	addeq	r0, #8
 800a208:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a20c:	bf04      	itt	eq
 800a20e:	011b      	lsleq	r3, r3, #4
 800a210:	3004      	addeq	r0, #4
 800a212:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a216:	bf04      	itt	eq
 800a218:	009b      	lsleq	r3, r3, #2
 800a21a:	3002      	addeq	r0, #2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	db06      	blt.n	800a22e <__hi0bits+0x3c>
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	d503      	bpl.n	800a22c <__hi0bits+0x3a>
 800a224:	3001      	adds	r0, #1
 800a226:	4770      	bx	lr
 800a228:	2000      	movs	r0, #0
 800a22a:	e7e8      	b.n	800a1fe <__hi0bits+0xc>
 800a22c:	2020      	movs	r0, #32
 800a22e:	4770      	bx	lr

0800a230 <__lo0bits>:
 800a230:	6803      	ldr	r3, [r0, #0]
 800a232:	f013 0207 	ands.w	r2, r3, #7
 800a236:	4601      	mov	r1, r0
 800a238:	d00b      	beq.n	800a252 <__lo0bits+0x22>
 800a23a:	07da      	lsls	r2, r3, #31
 800a23c:	d423      	bmi.n	800a286 <__lo0bits+0x56>
 800a23e:	0798      	lsls	r0, r3, #30
 800a240:	bf49      	itett	mi
 800a242:	085b      	lsrmi	r3, r3, #1
 800a244:	089b      	lsrpl	r3, r3, #2
 800a246:	2001      	movmi	r0, #1
 800a248:	600b      	strmi	r3, [r1, #0]
 800a24a:	bf5c      	itt	pl
 800a24c:	600b      	strpl	r3, [r1, #0]
 800a24e:	2002      	movpl	r0, #2
 800a250:	4770      	bx	lr
 800a252:	b298      	uxth	r0, r3
 800a254:	b9a8      	cbnz	r0, 800a282 <__lo0bits+0x52>
 800a256:	0c1b      	lsrs	r3, r3, #16
 800a258:	2010      	movs	r0, #16
 800a25a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a25e:	bf04      	itt	eq
 800a260:	0a1b      	lsreq	r3, r3, #8
 800a262:	3008      	addeq	r0, #8
 800a264:	071a      	lsls	r2, r3, #28
 800a266:	bf04      	itt	eq
 800a268:	091b      	lsreq	r3, r3, #4
 800a26a:	3004      	addeq	r0, #4
 800a26c:	079a      	lsls	r2, r3, #30
 800a26e:	bf04      	itt	eq
 800a270:	089b      	lsreq	r3, r3, #2
 800a272:	3002      	addeq	r0, #2
 800a274:	07da      	lsls	r2, r3, #31
 800a276:	d402      	bmi.n	800a27e <__lo0bits+0x4e>
 800a278:	085b      	lsrs	r3, r3, #1
 800a27a:	d006      	beq.n	800a28a <__lo0bits+0x5a>
 800a27c:	3001      	adds	r0, #1
 800a27e:	600b      	str	r3, [r1, #0]
 800a280:	4770      	bx	lr
 800a282:	4610      	mov	r0, r2
 800a284:	e7e9      	b.n	800a25a <__lo0bits+0x2a>
 800a286:	2000      	movs	r0, #0
 800a288:	4770      	bx	lr
 800a28a:	2020      	movs	r0, #32
 800a28c:	4770      	bx	lr

0800a28e <__i2b>:
 800a28e:	b510      	push	{r4, lr}
 800a290:	460c      	mov	r4, r1
 800a292:	2101      	movs	r1, #1
 800a294:	f7ff ff27 	bl	800a0e6 <_Balloc>
 800a298:	2201      	movs	r2, #1
 800a29a:	6144      	str	r4, [r0, #20]
 800a29c:	6102      	str	r2, [r0, #16]
 800a29e:	bd10      	pop	{r4, pc}

0800a2a0 <__multiply>:
 800a2a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	690a      	ldr	r2, [r1, #16]
 800a2a8:	6923      	ldr	r3, [r4, #16]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	bfb8      	it	lt
 800a2ae:	460b      	movlt	r3, r1
 800a2b0:	4688      	mov	r8, r1
 800a2b2:	bfbc      	itt	lt
 800a2b4:	46a0      	movlt	r8, r4
 800a2b6:	461c      	movlt	r4, r3
 800a2b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a2c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2c8:	eb07 0609 	add.w	r6, r7, r9
 800a2cc:	42b3      	cmp	r3, r6
 800a2ce:	bfb8      	it	lt
 800a2d0:	3101      	addlt	r1, #1
 800a2d2:	f7ff ff08 	bl	800a0e6 <_Balloc>
 800a2d6:	f100 0514 	add.w	r5, r0, #20
 800a2da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a2de:	462b      	mov	r3, r5
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	4573      	cmp	r3, lr
 800a2e4:	d316      	bcc.n	800a314 <__multiply+0x74>
 800a2e6:	f104 0214 	add.w	r2, r4, #20
 800a2ea:	f108 0114 	add.w	r1, r8, #20
 800a2ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a2f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	9b00      	ldr	r3, [sp, #0]
 800a2fa:	9201      	str	r2, [sp, #4]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d80c      	bhi.n	800a31a <__multiply+0x7a>
 800a300:	2e00      	cmp	r6, #0
 800a302:	dd03      	ble.n	800a30c <__multiply+0x6c>
 800a304:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d05d      	beq.n	800a3c8 <__multiply+0x128>
 800a30c:	6106      	str	r6, [r0, #16]
 800a30e:	b003      	add	sp, #12
 800a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a314:	f843 2b04 	str.w	r2, [r3], #4
 800a318:	e7e3      	b.n	800a2e2 <__multiply+0x42>
 800a31a:	f8b2 b000 	ldrh.w	fp, [r2]
 800a31e:	f1bb 0f00 	cmp.w	fp, #0
 800a322:	d023      	beq.n	800a36c <__multiply+0xcc>
 800a324:	4689      	mov	r9, r1
 800a326:	46ac      	mov	ip, r5
 800a328:	f04f 0800 	mov.w	r8, #0
 800a32c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a330:	f8dc a000 	ldr.w	sl, [ip]
 800a334:	b2a3      	uxth	r3, r4
 800a336:	fa1f fa8a 	uxth.w	sl, sl
 800a33a:	fb0b a303 	mla	r3, fp, r3, sl
 800a33e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a342:	f8dc 4000 	ldr.w	r4, [ip]
 800a346:	4443      	add	r3, r8
 800a348:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a34c:	fb0b 840a 	mla	r4, fp, sl, r8
 800a350:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a354:	46e2      	mov	sl, ip
 800a356:	b29b      	uxth	r3, r3
 800a358:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a35c:	454f      	cmp	r7, r9
 800a35e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a362:	f84a 3b04 	str.w	r3, [sl], #4
 800a366:	d82b      	bhi.n	800a3c0 <__multiply+0x120>
 800a368:	f8cc 8004 	str.w	r8, [ip, #4]
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a372:	3204      	adds	r2, #4
 800a374:	f1ba 0f00 	cmp.w	sl, #0
 800a378:	d020      	beq.n	800a3bc <__multiply+0x11c>
 800a37a:	682b      	ldr	r3, [r5, #0]
 800a37c:	4689      	mov	r9, r1
 800a37e:	46a8      	mov	r8, r5
 800a380:	f04f 0b00 	mov.w	fp, #0
 800a384:	f8b9 c000 	ldrh.w	ip, [r9]
 800a388:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a38c:	fb0a 440c 	mla	r4, sl, ip, r4
 800a390:	445c      	add	r4, fp
 800a392:	46c4      	mov	ip, r8
 800a394:	b29b      	uxth	r3, r3
 800a396:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a39a:	f84c 3b04 	str.w	r3, [ip], #4
 800a39e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a3a6:	0c1b      	lsrs	r3, r3, #16
 800a3a8:	fb0a b303 	mla	r3, sl, r3, fp
 800a3ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a3b0:	454f      	cmp	r7, r9
 800a3b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a3b6:	d805      	bhi.n	800a3c4 <__multiply+0x124>
 800a3b8:	f8c8 3004 	str.w	r3, [r8, #4]
 800a3bc:	3504      	adds	r5, #4
 800a3be:	e79b      	b.n	800a2f8 <__multiply+0x58>
 800a3c0:	46d4      	mov	ip, sl
 800a3c2:	e7b3      	b.n	800a32c <__multiply+0x8c>
 800a3c4:	46e0      	mov	r8, ip
 800a3c6:	e7dd      	b.n	800a384 <__multiply+0xe4>
 800a3c8:	3e01      	subs	r6, #1
 800a3ca:	e799      	b.n	800a300 <__multiply+0x60>

0800a3cc <__pow5mult>:
 800a3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d0:	4615      	mov	r5, r2
 800a3d2:	f012 0203 	ands.w	r2, r2, #3
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460f      	mov	r7, r1
 800a3da:	d007      	beq.n	800a3ec <__pow5mult+0x20>
 800a3dc:	3a01      	subs	r2, #1
 800a3de:	4c21      	ldr	r4, [pc, #132]	; (800a464 <__pow5mult+0x98>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3e6:	f7ff fec9 	bl	800a17c <__multadd>
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	10ad      	asrs	r5, r5, #2
 800a3ee:	d035      	beq.n	800a45c <__pow5mult+0x90>
 800a3f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3f2:	b93c      	cbnz	r4, 800a404 <__pow5mult+0x38>
 800a3f4:	2010      	movs	r0, #16
 800a3f6:	f7fe facb 	bl	8008990 <malloc>
 800a3fa:	6270      	str	r0, [r6, #36]	; 0x24
 800a3fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a400:	6004      	str	r4, [r0, #0]
 800a402:	60c4      	str	r4, [r0, #12]
 800a404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a40c:	b94c      	cbnz	r4, 800a422 <__pow5mult+0x56>
 800a40e:	f240 2171 	movw	r1, #625	; 0x271
 800a412:	4630      	mov	r0, r6
 800a414:	f7ff ff3b 	bl	800a28e <__i2b>
 800a418:	2300      	movs	r3, #0
 800a41a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a41e:	4604      	mov	r4, r0
 800a420:	6003      	str	r3, [r0, #0]
 800a422:	f04f 0800 	mov.w	r8, #0
 800a426:	07eb      	lsls	r3, r5, #31
 800a428:	d50a      	bpl.n	800a440 <__pow5mult+0x74>
 800a42a:	4639      	mov	r1, r7
 800a42c:	4622      	mov	r2, r4
 800a42e:	4630      	mov	r0, r6
 800a430:	f7ff ff36 	bl	800a2a0 <__multiply>
 800a434:	4639      	mov	r1, r7
 800a436:	4681      	mov	r9, r0
 800a438:	4630      	mov	r0, r6
 800a43a:	f7ff fe88 	bl	800a14e <_Bfree>
 800a43e:	464f      	mov	r7, r9
 800a440:	106d      	asrs	r5, r5, #1
 800a442:	d00b      	beq.n	800a45c <__pow5mult+0x90>
 800a444:	6820      	ldr	r0, [r4, #0]
 800a446:	b938      	cbnz	r0, 800a458 <__pow5mult+0x8c>
 800a448:	4622      	mov	r2, r4
 800a44a:	4621      	mov	r1, r4
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff ff27 	bl	800a2a0 <__multiply>
 800a452:	6020      	str	r0, [r4, #0]
 800a454:	f8c0 8000 	str.w	r8, [r0]
 800a458:	4604      	mov	r4, r0
 800a45a:	e7e4      	b.n	800a426 <__pow5mult+0x5a>
 800a45c:	4638      	mov	r0, r7
 800a45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a462:	bf00      	nop
 800a464:	0800abf0 	.word	0x0800abf0

0800a468 <__lshift>:
 800a468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a46c:	460c      	mov	r4, r1
 800a46e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a472:	6923      	ldr	r3, [r4, #16]
 800a474:	6849      	ldr	r1, [r1, #4]
 800a476:	eb0a 0903 	add.w	r9, sl, r3
 800a47a:	68a3      	ldr	r3, [r4, #8]
 800a47c:	4607      	mov	r7, r0
 800a47e:	4616      	mov	r6, r2
 800a480:	f109 0501 	add.w	r5, r9, #1
 800a484:	42ab      	cmp	r3, r5
 800a486:	db32      	blt.n	800a4ee <__lshift+0x86>
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff fe2c 	bl	800a0e6 <_Balloc>
 800a48e:	2300      	movs	r3, #0
 800a490:	4680      	mov	r8, r0
 800a492:	f100 0114 	add.w	r1, r0, #20
 800a496:	461a      	mov	r2, r3
 800a498:	4553      	cmp	r3, sl
 800a49a:	db2b      	blt.n	800a4f4 <__lshift+0x8c>
 800a49c:	6920      	ldr	r0, [r4, #16]
 800a49e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4a2:	f104 0314 	add.w	r3, r4, #20
 800a4a6:	f016 021f 	ands.w	r2, r6, #31
 800a4aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4b2:	d025      	beq.n	800a500 <__lshift+0x98>
 800a4b4:	f1c2 0e20 	rsb	lr, r2, #32
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	681e      	ldr	r6, [r3, #0]
 800a4bc:	468a      	mov	sl, r1
 800a4be:	4096      	lsls	r6, r2
 800a4c0:	4330      	orrs	r0, r6
 800a4c2:	f84a 0b04 	str.w	r0, [sl], #4
 800a4c6:	f853 0b04 	ldr.w	r0, [r3], #4
 800a4ca:	459c      	cmp	ip, r3
 800a4cc:	fa20 f00e 	lsr.w	r0, r0, lr
 800a4d0:	d814      	bhi.n	800a4fc <__lshift+0x94>
 800a4d2:	6048      	str	r0, [r1, #4]
 800a4d4:	b108      	cbz	r0, 800a4da <__lshift+0x72>
 800a4d6:	f109 0502 	add.w	r5, r9, #2
 800a4da:	3d01      	subs	r5, #1
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f8c8 5010 	str.w	r5, [r8, #16]
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	f7ff fe33 	bl	800a14e <_Bfree>
 800a4e8:	4640      	mov	r0, r8
 800a4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ee:	3101      	adds	r1, #1
 800a4f0:	005b      	lsls	r3, r3, #1
 800a4f2:	e7c7      	b.n	800a484 <__lshift+0x1c>
 800a4f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	e7cd      	b.n	800a498 <__lshift+0x30>
 800a4fc:	4651      	mov	r1, sl
 800a4fe:	e7dc      	b.n	800a4ba <__lshift+0x52>
 800a500:	3904      	subs	r1, #4
 800a502:	f853 2b04 	ldr.w	r2, [r3], #4
 800a506:	f841 2f04 	str.w	r2, [r1, #4]!
 800a50a:	459c      	cmp	ip, r3
 800a50c:	d8f9      	bhi.n	800a502 <__lshift+0x9a>
 800a50e:	e7e4      	b.n	800a4da <__lshift+0x72>

0800a510 <__mcmp>:
 800a510:	6903      	ldr	r3, [r0, #16]
 800a512:	690a      	ldr	r2, [r1, #16]
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	b530      	push	{r4, r5, lr}
 800a518:	d10c      	bne.n	800a534 <__mcmp+0x24>
 800a51a:	0092      	lsls	r2, r2, #2
 800a51c:	3014      	adds	r0, #20
 800a51e:	3114      	adds	r1, #20
 800a520:	1884      	adds	r4, r0, r2
 800a522:	4411      	add	r1, r2
 800a524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a52c:	4295      	cmp	r5, r2
 800a52e:	d003      	beq.n	800a538 <__mcmp+0x28>
 800a530:	d305      	bcc.n	800a53e <__mcmp+0x2e>
 800a532:	2301      	movs	r3, #1
 800a534:	4618      	mov	r0, r3
 800a536:	bd30      	pop	{r4, r5, pc}
 800a538:	42a0      	cmp	r0, r4
 800a53a:	d3f3      	bcc.n	800a524 <__mcmp+0x14>
 800a53c:	e7fa      	b.n	800a534 <__mcmp+0x24>
 800a53e:	f04f 33ff 	mov.w	r3, #4294967295
 800a542:	e7f7      	b.n	800a534 <__mcmp+0x24>

0800a544 <__mdiff>:
 800a544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a548:	460d      	mov	r5, r1
 800a54a:	4607      	mov	r7, r0
 800a54c:	4611      	mov	r1, r2
 800a54e:	4628      	mov	r0, r5
 800a550:	4614      	mov	r4, r2
 800a552:	f7ff ffdd 	bl	800a510 <__mcmp>
 800a556:	1e06      	subs	r6, r0, #0
 800a558:	d108      	bne.n	800a56c <__mdiff+0x28>
 800a55a:	4631      	mov	r1, r6
 800a55c:	4638      	mov	r0, r7
 800a55e:	f7ff fdc2 	bl	800a0e6 <_Balloc>
 800a562:	2301      	movs	r3, #1
 800a564:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56c:	bfa4      	itt	ge
 800a56e:	4623      	movge	r3, r4
 800a570:	462c      	movge	r4, r5
 800a572:	4638      	mov	r0, r7
 800a574:	6861      	ldr	r1, [r4, #4]
 800a576:	bfa6      	itte	ge
 800a578:	461d      	movge	r5, r3
 800a57a:	2600      	movge	r6, #0
 800a57c:	2601      	movlt	r6, #1
 800a57e:	f7ff fdb2 	bl	800a0e6 <_Balloc>
 800a582:	692b      	ldr	r3, [r5, #16]
 800a584:	60c6      	str	r6, [r0, #12]
 800a586:	6926      	ldr	r6, [r4, #16]
 800a588:	f105 0914 	add.w	r9, r5, #20
 800a58c:	f104 0214 	add.w	r2, r4, #20
 800a590:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a594:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a598:	f100 0514 	add.w	r5, r0, #20
 800a59c:	f04f 0e00 	mov.w	lr, #0
 800a5a0:	f852 ab04 	ldr.w	sl, [r2], #4
 800a5a4:	f859 4b04 	ldr.w	r4, [r9], #4
 800a5a8:	fa1e f18a 	uxtah	r1, lr, sl
 800a5ac:	b2a3      	uxth	r3, r4
 800a5ae:	1ac9      	subs	r1, r1, r3
 800a5b0:	0c23      	lsrs	r3, r4, #16
 800a5b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a5b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a5ba:	b289      	uxth	r1, r1
 800a5bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a5c0:	45c8      	cmp	r8, r9
 800a5c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a5c6:	4694      	mov	ip, r2
 800a5c8:	f845 3b04 	str.w	r3, [r5], #4
 800a5cc:	d8e8      	bhi.n	800a5a0 <__mdiff+0x5c>
 800a5ce:	45bc      	cmp	ip, r7
 800a5d0:	d304      	bcc.n	800a5dc <__mdiff+0x98>
 800a5d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a5d6:	b183      	cbz	r3, 800a5fa <__mdiff+0xb6>
 800a5d8:	6106      	str	r6, [r0, #16]
 800a5da:	e7c5      	b.n	800a568 <__mdiff+0x24>
 800a5dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a5e0:	fa1e f381 	uxtah	r3, lr, r1
 800a5e4:	141a      	asrs	r2, r3, #16
 800a5e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a5f4:	f845 3b04 	str.w	r3, [r5], #4
 800a5f8:	e7e9      	b.n	800a5ce <__mdiff+0x8a>
 800a5fa:	3e01      	subs	r6, #1
 800a5fc:	e7e9      	b.n	800a5d2 <__mdiff+0x8e>

0800a5fe <__d2b>:
 800a5fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a602:	460e      	mov	r6, r1
 800a604:	2101      	movs	r1, #1
 800a606:	ec59 8b10 	vmov	r8, r9, d0
 800a60a:	4615      	mov	r5, r2
 800a60c:	f7ff fd6b 	bl	800a0e6 <_Balloc>
 800a610:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a614:	4607      	mov	r7, r0
 800a616:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a61a:	bb34      	cbnz	r4, 800a66a <__d2b+0x6c>
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	f1b8 0300 	subs.w	r3, r8, #0
 800a622:	d027      	beq.n	800a674 <__d2b+0x76>
 800a624:	a802      	add	r0, sp, #8
 800a626:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a62a:	f7ff fe01 	bl	800a230 <__lo0bits>
 800a62e:	9900      	ldr	r1, [sp, #0]
 800a630:	b1f0      	cbz	r0, 800a670 <__d2b+0x72>
 800a632:	9a01      	ldr	r2, [sp, #4]
 800a634:	f1c0 0320 	rsb	r3, r0, #32
 800a638:	fa02 f303 	lsl.w	r3, r2, r3
 800a63c:	430b      	orrs	r3, r1
 800a63e:	40c2      	lsrs	r2, r0
 800a640:	617b      	str	r3, [r7, #20]
 800a642:	9201      	str	r2, [sp, #4]
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bf14      	ite	ne
 800a64c:	2102      	movne	r1, #2
 800a64e:	2101      	moveq	r1, #1
 800a650:	6139      	str	r1, [r7, #16]
 800a652:	b1c4      	cbz	r4, 800a686 <__d2b+0x88>
 800a654:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a658:	4404      	add	r4, r0
 800a65a:	6034      	str	r4, [r6, #0]
 800a65c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a660:	6028      	str	r0, [r5, #0]
 800a662:	4638      	mov	r0, r7
 800a664:	b003      	add	sp, #12
 800a666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a66e:	e7d5      	b.n	800a61c <__d2b+0x1e>
 800a670:	6179      	str	r1, [r7, #20]
 800a672:	e7e7      	b.n	800a644 <__d2b+0x46>
 800a674:	a801      	add	r0, sp, #4
 800a676:	f7ff fddb 	bl	800a230 <__lo0bits>
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	617b      	str	r3, [r7, #20]
 800a67e:	2101      	movs	r1, #1
 800a680:	6139      	str	r1, [r7, #16]
 800a682:	3020      	adds	r0, #32
 800a684:	e7e5      	b.n	800a652 <__d2b+0x54>
 800a686:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a68a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a68e:	6030      	str	r0, [r6, #0]
 800a690:	6918      	ldr	r0, [r3, #16]
 800a692:	f7ff fdae 	bl	800a1f2 <__hi0bits>
 800a696:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a69a:	e7e1      	b.n	800a660 <__d2b+0x62>

0800a69c <_calloc_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	fb02 f401 	mul.w	r4, r2, r1
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	f7fe f9da 	bl	8008a5c <_malloc_r>
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	b118      	cbz	r0, 800a6b4 <_calloc_r+0x18>
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	f7fe f97e 	bl	80089b0 <memset>
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}

0800a6b8 <__ssputs_r>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	688e      	ldr	r6, [r1, #8]
 800a6be:	429e      	cmp	r6, r3
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4690      	mov	r8, r2
 800a6c6:	4699      	mov	r9, r3
 800a6c8:	d837      	bhi.n	800a73a <__ssputs_r+0x82>
 800a6ca:	898a      	ldrh	r2, [r1, #12]
 800a6cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6d0:	d031      	beq.n	800a736 <__ssputs_r+0x7e>
 800a6d2:	6825      	ldr	r5, [r4, #0]
 800a6d4:	6909      	ldr	r1, [r1, #16]
 800a6d6:	1a6f      	subs	r7, r5, r1
 800a6d8:	6965      	ldr	r5, [r4, #20]
 800a6da:	2302      	movs	r3, #2
 800a6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a6e4:	f109 0301 	add.w	r3, r9, #1
 800a6e8:	443b      	add	r3, r7
 800a6ea:	429d      	cmp	r5, r3
 800a6ec:	bf38      	it	cc
 800a6ee:	461d      	movcc	r5, r3
 800a6f0:	0553      	lsls	r3, r2, #21
 800a6f2:	d530      	bpl.n	800a756 <__ssputs_r+0x9e>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	f7fe f9b1 	bl	8008a5c <_malloc_r>
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	b950      	cbnz	r0, 800a714 <__ssputs_r+0x5c>
 800a6fe:	230c      	movs	r3, #12
 800a700:	f8ca 3000 	str.w	r3, [sl]
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a714:	463a      	mov	r2, r7
 800a716:	6921      	ldr	r1, [r4, #16]
 800a718:	f7ff fcd8 	bl	800a0cc <memcpy>
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	6126      	str	r6, [r4, #16]
 800a72a:	6165      	str	r5, [r4, #20]
 800a72c:	443e      	add	r6, r7
 800a72e:	1bed      	subs	r5, r5, r7
 800a730:	6026      	str	r6, [r4, #0]
 800a732:	60a5      	str	r5, [r4, #8]
 800a734:	464e      	mov	r6, r9
 800a736:	454e      	cmp	r6, r9
 800a738:	d900      	bls.n	800a73c <__ssputs_r+0x84>
 800a73a:	464e      	mov	r6, r9
 800a73c:	4632      	mov	r2, r6
 800a73e:	4641      	mov	r1, r8
 800a740:	6820      	ldr	r0, [r4, #0]
 800a742:	f000 f91d 	bl	800a980 <memmove>
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	1b9b      	subs	r3, r3, r6
 800a74a:	60a3      	str	r3, [r4, #8]
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	441e      	add	r6, r3
 800a750:	6026      	str	r6, [r4, #0]
 800a752:	2000      	movs	r0, #0
 800a754:	e7dc      	b.n	800a710 <__ssputs_r+0x58>
 800a756:	462a      	mov	r2, r5
 800a758:	f000 f92b 	bl	800a9b2 <_realloc_r>
 800a75c:	4606      	mov	r6, r0
 800a75e:	2800      	cmp	r0, #0
 800a760:	d1e2      	bne.n	800a728 <__ssputs_r+0x70>
 800a762:	6921      	ldr	r1, [r4, #16]
 800a764:	4650      	mov	r0, sl
 800a766:	f7fe f92b 	bl	80089c0 <_free_r>
 800a76a:	e7c8      	b.n	800a6fe <__ssputs_r+0x46>

0800a76c <_svfiprintf_r>:
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	461d      	mov	r5, r3
 800a772:	898b      	ldrh	r3, [r1, #12]
 800a774:	061f      	lsls	r7, r3, #24
 800a776:	b09d      	sub	sp, #116	; 0x74
 800a778:	4680      	mov	r8, r0
 800a77a:	460c      	mov	r4, r1
 800a77c:	4616      	mov	r6, r2
 800a77e:	d50f      	bpl.n	800a7a0 <_svfiprintf_r+0x34>
 800a780:	690b      	ldr	r3, [r1, #16]
 800a782:	b96b      	cbnz	r3, 800a7a0 <_svfiprintf_r+0x34>
 800a784:	2140      	movs	r1, #64	; 0x40
 800a786:	f7fe f969 	bl	8008a5c <_malloc_r>
 800a78a:	6020      	str	r0, [r4, #0]
 800a78c:	6120      	str	r0, [r4, #16]
 800a78e:	b928      	cbnz	r0, 800a79c <_svfiprintf_r+0x30>
 800a790:	230c      	movs	r3, #12
 800a792:	f8c8 3000 	str.w	r3, [r8]
 800a796:	f04f 30ff 	mov.w	r0, #4294967295
 800a79a:	e0c8      	b.n	800a92e <_svfiprintf_r+0x1c2>
 800a79c:	2340      	movs	r3, #64	; 0x40
 800a79e:	6163      	str	r3, [r4, #20]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7aa:	2330      	movs	r3, #48	; 0x30
 800a7ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7b0:	9503      	str	r5, [sp, #12]
 800a7b2:	f04f 0b01 	mov.w	fp, #1
 800a7b6:	4637      	mov	r7, r6
 800a7b8:	463d      	mov	r5, r7
 800a7ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a7be:	b10b      	cbz	r3, 800a7c4 <_svfiprintf_r+0x58>
 800a7c0:	2b25      	cmp	r3, #37	; 0x25
 800a7c2:	d13e      	bne.n	800a842 <_svfiprintf_r+0xd6>
 800a7c4:	ebb7 0a06 	subs.w	sl, r7, r6
 800a7c8:	d00b      	beq.n	800a7e2 <_svfiprintf_r+0x76>
 800a7ca:	4653      	mov	r3, sl
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	f7ff ff71 	bl	800a6b8 <__ssputs_r>
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	f000 80a4 	beq.w	800a924 <_svfiprintf_r+0x1b8>
 800a7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7de:	4453      	add	r3, sl
 800a7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e2:	783b      	ldrb	r3, [r7, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 809d 	beq.w	800a924 <_svfiprintf_r+0x1b8>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	9307      	str	r3, [sp, #28]
 800a7f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a7fe:	462f      	mov	r7, r5
 800a800:	2205      	movs	r2, #5
 800a802:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a806:	4850      	ldr	r0, [pc, #320]	; (800a948 <_svfiprintf_r+0x1dc>)
 800a808:	f7f5 fcea 	bl	80001e0 <memchr>
 800a80c:	9b04      	ldr	r3, [sp, #16]
 800a80e:	b9d0      	cbnz	r0, 800a846 <_svfiprintf_r+0xda>
 800a810:	06d9      	lsls	r1, r3, #27
 800a812:	bf44      	itt	mi
 800a814:	2220      	movmi	r2, #32
 800a816:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a81a:	071a      	lsls	r2, r3, #28
 800a81c:	bf44      	itt	mi
 800a81e:	222b      	movmi	r2, #43	; 0x2b
 800a820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a824:	782a      	ldrb	r2, [r5, #0]
 800a826:	2a2a      	cmp	r2, #42	; 0x2a
 800a828:	d015      	beq.n	800a856 <_svfiprintf_r+0xea>
 800a82a:	9a07      	ldr	r2, [sp, #28]
 800a82c:	462f      	mov	r7, r5
 800a82e:	2000      	movs	r0, #0
 800a830:	250a      	movs	r5, #10
 800a832:	4639      	mov	r1, r7
 800a834:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a838:	3b30      	subs	r3, #48	; 0x30
 800a83a:	2b09      	cmp	r3, #9
 800a83c:	d94d      	bls.n	800a8da <_svfiprintf_r+0x16e>
 800a83e:	b1b8      	cbz	r0, 800a870 <_svfiprintf_r+0x104>
 800a840:	e00f      	b.n	800a862 <_svfiprintf_r+0xf6>
 800a842:	462f      	mov	r7, r5
 800a844:	e7b8      	b.n	800a7b8 <_svfiprintf_r+0x4c>
 800a846:	4a40      	ldr	r2, [pc, #256]	; (800a948 <_svfiprintf_r+0x1dc>)
 800a848:	1a80      	subs	r0, r0, r2
 800a84a:	fa0b f000 	lsl.w	r0, fp, r0
 800a84e:	4318      	orrs	r0, r3
 800a850:	9004      	str	r0, [sp, #16]
 800a852:	463d      	mov	r5, r7
 800a854:	e7d3      	b.n	800a7fe <_svfiprintf_r+0x92>
 800a856:	9a03      	ldr	r2, [sp, #12]
 800a858:	1d11      	adds	r1, r2, #4
 800a85a:	6812      	ldr	r2, [r2, #0]
 800a85c:	9103      	str	r1, [sp, #12]
 800a85e:	2a00      	cmp	r2, #0
 800a860:	db01      	blt.n	800a866 <_svfiprintf_r+0xfa>
 800a862:	9207      	str	r2, [sp, #28]
 800a864:	e004      	b.n	800a870 <_svfiprintf_r+0x104>
 800a866:	4252      	negs	r2, r2
 800a868:	f043 0302 	orr.w	r3, r3, #2
 800a86c:	9207      	str	r2, [sp, #28]
 800a86e:	9304      	str	r3, [sp, #16]
 800a870:	783b      	ldrb	r3, [r7, #0]
 800a872:	2b2e      	cmp	r3, #46	; 0x2e
 800a874:	d10c      	bne.n	800a890 <_svfiprintf_r+0x124>
 800a876:	787b      	ldrb	r3, [r7, #1]
 800a878:	2b2a      	cmp	r3, #42	; 0x2a
 800a87a:	d133      	bne.n	800a8e4 <_svfiprintf_r+0x178>
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	1d1a      	adds	r2, r3, #4
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	9203      	str	r2, [sp, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	bfb8      	it	lt
 800a888:	f04f 33ff 	movlt.w	r3, #4294967295
 800a88c:	3702      	adds	r7, #2
 800a88e:	9305      	str	r3, [sp, #20]
 800a890:	4d2e      	ldr	r5, [pc, #184]	; (800a94c <_svfiprintf_r+0x1e0>)
 800a892:	7839      	ldrb	r1, [r7, #0]
 800a894:	2203      	movs	r2, #3
 800a896:	4628      	mov	r0, r5
 800a898:	f7f5 fca2 	bl	80001e0 <memchr>
 800a89c:	b138      	cbz	r0, 800a8ae <_svfiprintf_r+0x142>
 800a89e:	2340      	movs	r3, #64	; 0x40
 800a8a0:	1b40      	subs	r0, r0, r5
 800a8a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a8a6:	9b04      	ldr	r3, [sp, #16]
 800a8a8:	4303      	orrs	r3, r0
 800a8aa:	3701      	adds	r7, #1
 800a8ac:	9304      	str	r3, [sp, #16]
 800a8ae:	7839      	ldrb	r1, [r7, #0]
 800a8b0:	4827      	ldr	r0, [pc, #156]	; (800a950 <_svfiprintf_r+0x1e4>)
 800a8b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8b6:	2206      	movs	r2, #6
 800a8b8:	1c7e      	adds	r6, r7, #1
 800a8ba:	f7f5 fc91 	bl	80001e0 <memchr>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d038      	beq.n	800a934 <_svfiprintf_r+0x1c8>
 800a8c2:	4b24      	ldr	r3, [pc, #144]	; (800a954 <_svfiprintf_r+0x1e8>)
 800a8c4:	bb13      	cbnz	r3, 800a90c <_svfiprintf_r+0x1a0>
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	3307      	adds	r3, #7
 800a8ca:	f023 0307 	bic.w	r3, r3, #7
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d4:	444b      	add	r3, r9
 800a8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d8:	e76d      	b.n	800a7b6 <_svfiprintf_r+0x4a>
 800a8da:	fb05 3202 	mla	r2, r5, r2, r3
 800a8de:	2001      	movs	r0, #1
 800a8e0:	460f      	mov	r7, r1
 800a8e2:	e7a6      	b.n	800a832 <_svfiprintf_r+0xc6>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	3701      	adds	r7, #1
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	250a      	movs	r5, #10
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f4:	3a30      	subs	r2, #48	; 0x30
 800a8f6:	2a09      	cmp	r2, #9
 800a8f8:	d903      	bls.n	800a902 <_svfiprintf_r+0x196>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d0c8      	beq.n	800a890 <_svfiprintf_r+0x124>
 800a8fe:	9105      	str	r1, [sp, #20]
 800a900:	e7c6      	b.n	800a890 <_svfiprintf_r+0x124>
 800a902:	fb05 2101 	mla	r1, r5, r1, r2
 800a906:	2301      	movs	r3, #1
 800a908:	4607      	mov	r7, r0
 800a90a:	e7f0      	b.n	800a8ee <_svfiprintf_r+0x182>
 800a90c:	ab03      	add	r3, sp, #12
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	4622      	mov	r2, r4
 800a912:	4b11      	ldr	r3, [pc, #68]	; (800a958 <_svfiprintf_r+0x1ec>)
 800a914:	a904      	add	r1, sp, #16
 800a916:	4640      	mov	r0, r8
 800a918:	f7fe f98e 	bl	8008c38 <_printf_float>
 800a91c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a920:	4681      	mov	r9, r0
 800a922:	d1d6      	bne.n	800a8d2 <_svfiprintf_r+0x166>
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	065b      	lsls	r3, r3, #25
 800a928:	f53f af35 	bmi.w	800a796 <_svfiprintf_r+0x2a>
 800a92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a92e:	b01d      	add	sp, #116	; 0x74
 800a930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a934:	ab03      	add	r3, sp, #12
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	4622      	mov	r2, r4
 800a93a:	4b07      	ldr	r3, [pc, #28]	; (800a958 <_svfiprintf_r+0x1ec>)
 800a93c:	a904      	add	r1, sp, #16
 800a93e:	4640      	mov	r0, r8
 800a940:	f7fe fc30 	bl	80091a4 <_printf_i>
 800a944:	e7ea      	b.n	800a91c <_svfiprintf_r+0x1b0>
 800a946:	bf00      	nop
 800a948:	0800abfc 	.word	0x0800abfc
 800a94c:	0800ac02 	.word	0x0800ac02
 800a950:	0800ac06 	.word	0x0800ac06
 800a954:	08008c39 	.word	0x08008c39
 800a958:	0800a6b9 	.word	0x0800a6b9

0800a95c <__ascii_mbtowc>:
 800a95c:	b082      	sub	sp, #8
 800a95e:	b901      	cbnz	r1, 800a962 <__ascii_mbtowc+0x6>
 800a960:	a901      	add	r1, sp, #4
 800a962:	b142      	cbz	r2, 800a976 <__ascii_mbtowc+0x1a>
 800a964:	b14b      	cbz	r3, 800a97a <__ascii_mbtowc+0x1e>
 800a966:	7813      	ldrb	r3, [r2, #0]
 800a968:	600b      	str	r3, [r1, #0]
 800a96a:	7812      	ldrb	r2, [r2, #0]
 800a96c:	1c10      	adds	r0, r2, #0
 800a96e:	bf18      	it	ne
 800a970:	2001      	movne	r0, #1
 800a972:	b002      	add	sp, #8
 800a974:	4770      	bx	lr
 800a976:	4610      	mov	r0, r2
 800a978:	e7fb      	b.n	800a972 <__ascii_mbtowc+0x16>
 800a97a:	f06f 0001 	mvn.w	r0, #1
 800a97e:	e7f8      	b.n	800a972 <__ascii_mbtowc+0x16>

0800a980 <memmove>:
 800a980:	4288      	cmp	r0, r1
 800a982:	b510      	push	{r4, lr}
 800a984:	eb01 0302 	add.w	r3, r1, r2
 800a988:	d807      	bhi.n	800a99a <memmove+0x1a>
 800a98a:	1e42      	subs	r2, r0, #1
 800a98c:	4299      	cmp	r1, r3
 800a98e:	d00a      	beq.n	800a9a6 <memmove+0x26>
 800a990:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a994:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a998:	e7f8      	b.n	800a98c <memmove+0xc>
 800a99a:	4283      	cmp	r3, r0
 800a99c:	d9f5      	bls.n	800a98a <memmove+0xa>
 800a99e:	1881      	adds	r1, r0, r2
 800a9a0:	1ad2      	subs	r2, r2, r3
 800a9a2:	42d3      	cmn	r3, r2
 800a9a4:	d100      	bne.n	800a9a8 <memmove+0x28>
 800a9a6:	bd10      	pop	{r4, pc}
 800a9a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a9b0:	e7f7      	b.n	800a9a2 <memmove+0x22>

0800a9b2 <_realloc_r>:
 800a9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	4614      	mov	r4, r2
 800a9b8:	460e      	mov	r6, r1
 800a9ba:	b921      	cbnz	r1, 800a9c6 <_realloc_r+0x14>
 800a9bc:	4611      	mov	r1, r2
 800a9be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a9c2:	f7fe b84b 	b.w	8008a5c <_malloc_r>
 800a9c6:	b922      	cbnz	r2, 800a9d2 <_realloc_r+0x20>
 800a9c8:	f7fd fffa 	bl	80089c0 <_free_r>
 800a9cc:	4625      	mov	r5, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d2:	f000 f821 	bl	800aa18 <_malloc_usable_size_r>
 800a9d6:	42a0      	cmp	r0, r4
 800a9d8:	d20f      	bcs.n	800a9fa <_realloc_r+0x48>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4638      	mov	r0, r7
 800a9de:	f7fe f83d 	bl	8008a5c <_malloc_r>
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d0f2      	beq.n	800a9ce <_realloc_r+0x1c>
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	f7ff fb6e 	bl	800a0cc <memcpy>
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	f7fd ffe4 	bl	80089c0 <_free_r>
 800a9f8:	e7e9      	b.n	800a9ce <_realloc_r+0x1c>
 800a9fa:	4635      	mov	r5, r6
 800a9fc:	e7e7      	b.n	800a9ce <_realloc_r+0x1c>

0800a9fe <__ascii_wctomb>:
 800a9fe:	b149      	cbz	r1, 800aa14 <__ascii_wctomb+0x16>
 800aa00:	2aff      	cmp	r2, #255	; 0xff
 800aa02:	bf85      	ittet	hi
 800aa04:	238a      	movhi	r3, #138	; 0x8a
 800aa06:	6003      	strhi	r3, [r0, #0]
 800aa08:	700a      	strbls	r2, [r1, #0]
 800aa0a:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa0e:	bf98      	it	ls
 800aa10:	2001      	movls	r0, #1
 800aa12:	4770      	bx	lr
 800aa14:	4608      	mov	r0, r1
 800aa16:	4770      	bx	lr

0800aa18 <_malloc_usable_size_r>:
 800aa18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1c:	1f18      	subs	r0, r3, #4
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bfbc      	itt	lt
 800aa22:	580b      	ldrlt	r3, [r1, r0]
 800aa24:	18c0      	addlt	r0, r0, r3
 800aa26:	4770      	bx	lr

0800aa28 <_init>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	bf00      	nop
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr

0800aa34 <_fini>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	bf00      	nop
 800aa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3a:	bc08      	pop	{r3}
 800aa3c:	469e      	mov	lr, r3
 800aa3e:	4770      	bx	lr

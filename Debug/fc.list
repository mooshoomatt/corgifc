
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a838  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800a9c0  0800a9c0  0001a9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac50  0800ac50  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac58  0800ac58  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac58  0800ac58  0001ac58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac5c  0800ac5c  0001ac5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800ac60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a28  20000358  0800afb8  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001d80  0800afb8  00021d80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f61  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003446  00000000  00000000  0003a2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003d730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002292a  00000000  00000000  0003fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011604  00000000  00000000  000625da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c33ca  00000000  00000000  00073bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136fa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a00  00000000  00000000  00137024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000358 	.word	0x20000358
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a9a8 	.word	0x0800a9a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000035c 	.word	0x2000035c
 80001c4:	0800a9a8 	.word	0x0800a9a8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <BMI088_I2C_Read_CHIP_IDS>:

#include "BMI088.h"

/* READ ACCEL AND GYRO CHIP IDS */
HAL_StatusTypeDef BMI088_I2C_Read_CHIP_IDS(I2C_HandleTypeDef *hi2c)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af04      	add	r7, sp, #16
 8000e06:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret; // HAL Status Value
	uint8_t buf[4];        // Rx Buffer

	ret    = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]
    ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_ACC_ADDR << 1, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	2301      	movs	r3, #1
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2130      	movs	r1, #48	; 0x30
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f001 fa9c 	bl	8002360 <HAL_I2C_Mem_Read>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_ACC_ID ){ ret = HAL_ERROR; }
 8000e32:	7a3b      	ldrb	r3, [r7, #8]
 8000e34:	2b1e      	cmp	r3, #30
 8000e36:	d001      	beq.n	8000e3c <BMI088_I2C_Read_CHIP_IDS+0x3c>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
	ret = (ret | HAL_I2C_Mem_Read(hi2c, BMI088_GYRO_ADDR << 1, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY));
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2301      	movs	r3, #1
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	21d0      	movs	r1, #208	; 0xd0
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f001 fa84 	bl	8002360 <HAL_I2C_Mem_Read>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	73fb      	strb	r3, [r7, #15]
	if ( buf[0] != BMI088_GYRO_ID ){ ret = HAL_ERROR; }
 8000e62:	7a3b      	ldrb	r3, [r7, #8]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d001      	beq.n	8000e6c <BMI088_I2C_Read_CHIP_IDS+0x6c>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <BMI088_I2C_GYRO_INIT>:

/* CUSTOM GYROSCOPE SETTING INITIALIZATION */
HAL_StatusTypeDef BMI088_I2C_GYRO_INIT(I2C_HandleTypeDef *hi2c)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	 * WRITING BACK TO THE REGISTER
	 */

	HAL_StatusTypeDef ret;
	uint8_t buf[1]; // Tx/Rx Buffer
	ret = HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
	// ret = (ret | BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_RANGE, buf));

	// SET GYROSCOPE DATA RATE AND BANDWIDTH
	// DATA RATE: [1000 HZ]    400 HZ
	// BANDWIDTH: [116 Hz]     47 HZ
	buf[0] = 0x82;
 8000e82:	2382      	movs	r3, #130	; 0x82
 8000e84:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_BANDWIDTH, buf);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2210      	movs	r2, #16
 8000e8c:	2168      	movs	r1, #104	; 0x68
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f861 	bl	8000f56 <BMI088_I2C_Reg_Write>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	73fb      	strb	r3, [r7, #15]

	// SET GYROSCOPE INT3 MODE TO PUSH-PULL
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2216      	movs	r2, #22
 8000ea4:	2168      	movs	r1, #104	; 0x68
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f874 	bl	8000f94 <BMI088_I2C_Reg_Read>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	73fb      	strb	r3, [r7, #15]
	buf[0] &= 0xFD;
 8000eb6:	7b3b      	ldrb	r3, [r7, #12]
 8000eb8:	f023 0302 	bic.w	r3, r3, #2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_CONF, buf);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2216      	movs	r2, #22
 8000ec6:	2168      	movs	r1, #104	; 0x68
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f844 	bl	8000f56 <BMI088_I2C_Reg_Write>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	73fb      	strb	r3, [r7, #15]

	// MAP GYROSCOPE DATA-READY INTERRUPT TO INT3
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2218      	movs	r2, #24
 8000ede:	2168      	movs	r1, #104	; 0x68
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f857 	bl	8000f94 <BMI088_I2C_Reg_Read>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x01;
 8000ef0:	7b3b      	ldrb	r3, [r7, #12]
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, INT3_INT4_IO_MAP, buf);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	2218      	movs	r2, #24
 8000f00:	2168      	movs	r1, #104	; 0x68
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f827 	bl	8000f56 <BMI088_I2C_Reg_Write>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	73fb      	strb	r3, [r7, #15]

	// ENABLE GYROSCOPE DATA-READY INTERRUPT
	ret    |= BMI088_I2C_Reg_Read(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2215      	movs	r2, #21
 8000f18:	2168      	movs	r1, #104	; 0x68
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f83a 	bl	8000f94 <BMI088_I2C_Reg_Read>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	73fb      	strb	r3, [r7, #15]
	buf[0] |= 0x80;
 8000f2a:	7b3b      	ldrb	r3, [r7, #12]
 8000f2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	733b      	strb	r3, [r7, #12]
	ret    |= BMI088_I2C_Reg_Write(hi2c, BMI088_GYRO_ADDR, GYRO_INT_CTRL, buf);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2215      	movs	r2, #21
 8000f3a:	2168      	movs	r1, #104	; 0x68
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f80a 	bl	8000f56 <BMI088_I2C_Reg_Write>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <BMI088_I2C_Reg_Write>:
	return HAL_I2C_Mem_Read_IT(hi2c, BMI088_GYRO_ADDR << 1, GYRO_DATA, I2C_MEMADD_SIZE_8BIT, pData, 6);
}

/* WRITE REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b088      	sub	sp, #32
 8000f5a:	af04      	add	r7, sp, #16
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	72fb      	strb	r3, [r7, #11]
 8000f64:	4613      	mov	r3, r2
 8000f66:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	7abb      	ldrb	r3, [r7, #10]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	9302      	str	r3, [sp, #8]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f001 f8f1 	bl	800216c <HAL_I2C_Mem_Write>
 8000f8a:	4603      	mov	r3, r0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <BMI088_I2C_Reg_Read>:

/* READ REGISTER */
HAL_StatusTypeDef BMI088_I2C_Reg_Read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t mem_addr, uint8_t *pData)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	72fb      	strb	r3, [r7, #11]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, dev_addr << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, pData, 1, HAL_MAX_DELAY);
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	b299      	uxth	r1, r3
 8000fae:	7abb      	ldrb	r3, [r7, #10]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f001 f9cc 	bl	8002360 <HAL_I2C_Mem_Read>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f000 fc12 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f844 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 f9c0 	bl	8001364 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fe4:	f000 f8aa 	bl	800113c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000fe8:	f007 fa1e 	bl	8008428 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8000fec:	f000 f984 	bl	80012f8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000ff0:	f000 f94c 	bl	800128c <MX_TIM6_Init>
  MX_TIM2_Init();
 8000ff4:	f000 f8d0 	bl	8001198 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // CHECK DEVICE IDENTIFIERS
  if ( BMI088_I2C_Read_CHIP_IDS(&hi2c1) != HAL_OK ) { Error_Handler(); }
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <main+0x7c>)
 8000ffa:	f7ff ff01 	bl	8000e00 <BMI088_I2C_Read_CHIP_IDS>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <main+0x34>
 8001004:	f000 fa24 	bl	8001450 <Error_Handler>

  // RUN BMI088 GYROSCOPE INITIALIZATION
  if ( BMI088_I2C_GYRO_INIT(&hi2c1) != HAL_OK ) { Error_Handler(); };
 8001008:	4811      	ldr	r0, [pc, #68]	; (8001050 <main+0x7c>)
 800100a:	f7ff ff34 	bl	8000e76 <BMI088_I2C_GYRO_INIT>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <main+0x44>
 8001014:	f000 fa1c 	bl	8001450 <Error_Handler>

  // START TIMERS
  HAL_TIM_Base_Start_IT(&htim7);
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <main+0x80>)
 800101a:	f003 fd40 	bl	8004a9e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <main+0x84>)
 8001020:	f003 fd19 	bl	8004a56 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001024:	2100      	movs	r1, #0
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <main+0x88>)
 8001028:	f003 fd88 	bl	8004b3c <HAL_TIM_PWM_Start>

  // Get starting time
  tprev = __HAL_TIM_GET_COUNTER(&htim6);
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <main+0x84>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <main+0x8c>)
 8001036:	801a      	strh	r2, [r3, #0]

  // TURN ON STATUS LED
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <main+0x90>)
 800103e:	f000 ff1f 	bl	8001e80 <HAL_GPIO_WritePin>

  TIM2->CCR1 = 9000 - 1;
 8001042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001046:	f242 3227 	movw	r2, #8999	; 0x2327
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104c:	e7fe      	b.n	800104c <main+0x78>
 800104e:	bf00      	nop
 8001050:	20000388 	.word	0x20000388
 8001054:	20000460 	.word	0x20000460
 8001058:	200003dc 	.word	0x200003dc
 800105c:	2000041c 	.word	0x2000041c
 8001060:	2000045c 	.word	0x2000045c
 8001064:	40020800 	.word	0x40020800

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f007 ff24 	bl	8008ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <SystemClock_Config+0xcc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemClock_Config+0xd0>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010d8:	2310      	movs	r3, #16
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 80010dc:	f44f 7390 	mov.w	r3, #288	; 0x120
 80010e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80010e6:	2306      	movs	r3, #6
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 f83a 	bl	8004168 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010fa:	f000 f9a9 	bl	8001450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	2104      	movs	r1, #4
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fa93 	bl	8004648 <HAL_RCC_ClockConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001128:	f000 f992 	bl	8001450 <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	3750      	adds	r7, #80	; 0x50
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_I2C1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C1_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_I2C1_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_I2C1_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_I2C1_Init+0x50>)
 800117a:	f000 febf 	bl	8001efc <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 f964 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000388 	.word	0x20000388
 8001190:	40005400 	.word	0x40005400
 8001194:	00061a80 	.word	0x00061a80

08001198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <MX_TIM2_Init+0xf0>)
 80011bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1 - 1;
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <MX_TIM2_Init+0xf0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <MX_TIM2_Init+0xf0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000 - 1;
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <MX_TIM2_Init+0xf0>)
 80011d0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80011d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <MX_TIM2_Init+0xf0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_TIM2_Init+0xf0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e2:	4829      	ldr	r0, [pc, #164]	; (8001288 <MX_TIM2_Init+0xf0>)
 80011e4:	f003 fc7f 	bl	8004ae6 <HAL_TIM_PWM_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011ee:	f000 f92f 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	4619      	mov	r1, r3
 8001200:	4821      	ldr	r0, [pc, #132]	; (8001288 <MX_TIM2_Init+0xf0>)
 8001202:	f004 f94f 	bl	80054a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800120c:	f000 f920 	bl	8001450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001210:	2360      	movs	r3, #96	; 0x60
 8001212:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	4818      	ldr	r0, [pc, #96]	; (8001288 <MX_TIM2_Init+0xf0>)
 8001228:	f003 fdce 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001232:	f000 f90d 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2204      	movs	r2, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_TIM2_Init+0xf0>)
 800123e:	f003 fdc3 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001248:	f000 f902 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2208      	movs	r2, #8
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_TIM2_Init+0xf0>)
 8001254:	f003 fdb8 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800125e:	f000 f8f7 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	220c      	movs	r2, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM2_Init+0xf0>)
 800126a:	f003 fdad 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001274:	f000 f8ec 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM2_Init+0xf0>)
 800127a:	f000 f9cd 	bl	8001618 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000041c 	.word	0x2000041c

0800128c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_TIM6_Init+0x64>)
 800129c:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <MX_TIM6_Init+0x68>)
 800129e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012a2:	2247      	movs	r2, #71	; 0x47
 80012a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012bc:	f003 fba0 	bl	8004a00 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012c6:	f000 f8c3 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012d8:	f004 f8e4 	bl	80054a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012e2:	f000 f8b5 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200003dc 	.word	0x200003dc
 80012f4:	40001000 	.word	0x40001000

080012f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_TIM7_Init+0x64>)
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <MX_TIM7_Init+0x68>)
 800130a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72 - 1;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_TIM7_Init+0x64>)
 800130e:	2247      	movs	r2, #71	; 0x47
 8001310:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_TIM7_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000 - 1;
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_TIM7_Init+0x64>)
 800131a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800131e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_TIM7_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_TIM7_Init+0x64>)
 8001328:	f003 fb6a 	bl	8004a00 <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001332:	f000 f88d 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_TIM7_Init+0x64>)
 8001344:	f004 f8ae 	bl	80054a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800134e:	f000 f87f 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000460 	.word	0x20000460
 8001360:	40001400 	.word	0x40001400

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <MX_GPIO_Init+0xe0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <MX_GPIO_Init+0xe0>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <MX_GPIO_Init+0xe0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_GPIO_Init+0xe0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a29      	ldr	r2, [pc, #164]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	21c0      	movs	r1, #192	; 0xc0
 80013ee:	4816      	ldr	r0, [pc, #88]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013f0:	f000 fd46 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 80013f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_GPIO_Init+0xe8>)
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	; (8001448 <MX_GPIO_Init+0xe4>)
 800140a:	f000 fb9f 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800140e:	23c0      	movs	r3, #192	; 0xc0
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <MX_GPIO_Init+0xe4>)
 8001426:	f000 fb91 	bl	8001b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2028      	movs	r0, #40	; 0x28
 8001430:	f000 fb55 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001434:	2028      	movs	r0, #40	; 0x28
 8001436:	f000 fb6e 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40020800 	.word	0x40020800
 800144c:	10110000 	.word	0x10110000

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i

  __disable_irq();

  // {TODO} SET ALL MOTOR OUTPUTS TO ZERO!

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <Error_Handler+0x24>)
 800145c:	f000 fd10 	bl	8001e80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <Error_Handler+0x24>)
 8001466:	f000 fd0b 	bl	8001e80 <HAL_GPIO_WritePin>

  CDC_Transmit_FS((uint8_t*)"ERROR\n", 6);
 800146a:	2106      	movs	r1, #6
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <Error_Handler+0x28>)
 800146e:	f007 f8ad 	bl	80085cc <CDC_Transmit_FS>

  while (1)
 8001472:	e7fe      	b.n	8001472 <Error_Handler+0x22>
 8001474:	40020800 	.word	0x40020800
 8001478:	0800a9c0 	.word	0x0800a9c0

0800147c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_MspInit+0x4c>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_I2C_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12c      	bne.n	8001548 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800150a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151c:	2304      	movs	r3, #4
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_I2C_MspInit+0x8c>)
 8001528:	f000 fb10 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_I2C_MspInit+0x88>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005400 	.word	0x40005400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400

0800155c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156c:	d10d      	bne.n	800158a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_TIM_Base_MspInit+0x70>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10e      	bne.n	80015cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015b8:	f043 0310 	orr.w	r3, r3, #16
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80015ca:	e01a      	b.n	8001602 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_TIM_Base_MspInit+0x78>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d115      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_TIM_Base_MspInit+0x74>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2102      	movs	r1, #2
 80015f6:	2037      	movs	r0, #55	; 0x37
 80015f8:	f000 fa71 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015fc:	2037      	movs	r0, #55	; 0x37
 80015fe:	f000 fa8a 	bl	8001b16 <HAL_NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40001000 	.word	0x40001000
 8001610:	40023800 	.word	0x40023800
 8001614:	40001400 	.word	0x40001400

08001618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001638:	d11d      	bne.n	8001676 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_TIM_MspPostInit+0x68>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <HAL_TIM_MspPostInit+0x68>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_TIM_MspPostInit+0x68>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001656:	230f      	movs	r3, #15
 8001658:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001666:	2301      	movs	r3, #1
 8001668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <HAL_TIM_MspPostInit+0x6c>)
 8001672:	f000 fa6b 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f8e6 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80016e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016e4:	f000 fbe6 	bl	8001eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM7_IRQHandler+0x10>)
 80016f2:	f003 fa61 	bl	8004bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000460 	.word	0x20000460

08001700 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <OTG_FS_IRQHandler+0x10>)
 8001706:	f001 fcfc 	bl	8003102 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20001974 	.word	0x20001974

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f007 fb84 	bl	8008e50 <__errno>
 8001748:	4602      	mov	r2, r0
 800174a:	230c      	movs	r3, #12
 800174c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20020000 	.word	0x20020000
 8001774:	00000400 	.word	0x00000400
 8001778:	20000374 	.word	0x20000374
 800177c:	20001d80 	.word	0x20001d80

08001780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <SystemInit+0x28>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <SystemInit+0x28>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SystemInit+0x28>)
 8001796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179a:	609a      	str	r2, [r3, #8]
#endif
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017b2:	e003      	b.n	80017bc <LoopCopyDataInit>

080017b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ba:	3104      	adds	r1, #4

080017bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017bc:	480b      	ldr	r0, [pc, #44]	; (80017ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017c4:	d3f6      	bcc.n	80017b4 <CopyDataInit>
  ldr  r2, =_sbss
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017c8:	e002      	b.n	80017d0 <LoopFillZerobss>

080017ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017cc:	f842 3b04 	str.w	r3, [r2], #4

080017d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017d4:	d3f9      	bcc.n	80017ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017d6:	f7ff ffd3 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017da:	f007 fb3f 	bl	8008e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff fbf9 	bl	8000fd4 <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017e8:	0800ac60 	.word	0x0800ac60
  ldr  r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017f0:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 80017f4:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 80017f8:	20001d80 	.word	0x20001d80

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_Init+0x40>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_Init+0x40>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_Init+0x40>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 f94d 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f808 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff fe22 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x54>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f965 	bl	8001b32 <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f000 f92d 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_InitTick+0x5c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000000 	.word	0x20000000
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008
 80018c8:	200004a0 	.word	0x200004a0

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200004a0 	.word	0x200004a0

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_Delay+0x40>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000008 	.word	0x20000008

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff3e 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e16b      	b.n	8001e40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 815a 	bne.w	8001e3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_GPIO_Init+0x5a>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0xfc>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b12      	cmp	r3, #18
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80b4 	beq.w	8001e3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <HAL_GPIO_Init+0x308>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a5e      	ldr	r2, [pc, #376]	; (8001e54 <HAL_GPIO_Init+0x308>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b5c      	ldr	r3, [pc, #368]	; (8001e54 <HAL_GPIO_Init+0x308>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a5a      	ldr	r2, [pc, #360]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a51      	ldr	r2, [pc, #324]	; (8001e5c <HAL_GPIO_Init+0x310>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02b      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <HAL_GPIO_Init+0x314>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4f      	ldr	r2, [pc, #316]	; (8001e64 <HAL_GPIO_Init+0x318>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_GPIO_Init+0x31c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <HAL_GPIO_Init+0x320>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x324>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_GPIO_Init+0x328>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_GPIO_Init+0x32c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x20a>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00e      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e00c      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d84:	4934      	ldr	r1, [pc, #208]	; (8001e58 <HAL_GPIO_Init+0x30c>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d92:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db6:	4a31      	ldr	r2, [pc, #196]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de0:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_GPIO_Init+0x330>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f ae90 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3724      	adds	r7, #36	; 0x24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40021400 	.word	0x40021400
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40021c00 	.word	0x40021c00
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e9c:	e003      	b.n	8001ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f806 	bl	8001ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e11f      	b.n	800214e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fad2 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f60:	f002 fd3a 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a7b      	ldr	r2, [pc, #492]	; (8002158 <HAL_I2C_Init+0x25c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d807      	bhi.n	8001f80 <HAL_I2C_Init+0x84>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a7a      	ldr	r2, [pc, #488]	; (800215c <HAL_I2C_Init+0x260>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	bf94      	ite	ls
 8001f78:	2301      	movls	r3, #1
 8001f7a:	2300      	movhi	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e006      	b.n	8001f8e <HAL_I2C_Init+0x92>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a77      	ldr	r2, [pc, #476]	; (8002160 <HAL_I2C_Init+0x264>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0db      	b.n	800214e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a72      	ldr	r2, [pc, #456]	; (8002164 <HAL_I2C_Init+0x268>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0c9b      	lsrs	r3, r3, #18
 8001fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a64      	ldr	r2, [pc, #400]	; (8002158 <HAL_I2C_Init+0x25c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_I2C_Init+0xd4>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	e009      	b.n	8001fe4 <HAL_I2C_Init+0xe8>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_I2C_Init+0x26c>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4956      	ldr	r1, [pc, #344]	; (8002158 <HAL_I2C_Init+0x25c>)
 8002000:	428b      	cmp	r3, r1
 8002002:	d80d      	bhi.n	8002020 <HAL_I2C_Init+0x124>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e59      	subs	r1, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	2b04      	cmp	r3, #4
 800201a:	bf38      	it	cc
 800201c:	2304      	movcc	r3, #4
 800201e:	e04f      	b.n	80020c0 <HAL_I2C_Init+0x1c4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d111      	bne.n	800204c <HAL_I2C_Init+0x150>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1e58      	subs	r0, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e012      	b.n	8002072 <HAL_I2C_Init+0x176>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	0099      	lsls	r1, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Init+0x17e>
 8002076:	2301      	movs	r3, #1
 8002078:	e022      	b.n	80020c0 <HAL_I2C_Init+0x1c4>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10e      	bne.n	80020a0 <HAL_I2C_Init+0x1a4>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1e58      	subs	r0, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6859      	ldr	r1, [r3, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	440b      	add	r3, r1
 8002090:	fbb0 f3f3 	udiv	r3, r0, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209e:	e00f      	b.n	80020c0 <HAL_I2C_Init+0x1c4>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	0099      	lsls	r1, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	6809      	ldr	r1, [r1, #0]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6911      	ldr	r1, [r2, #16]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68d2      	ldr	r2, [r2, #12]
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	430b      	orrs	r3, r1
 8002102:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	000186a0 	.word	0x000186a0
 800215c:	001e847f 	.word	0x001e847f
 8002160:	003d08ff 	.word	0x003d08ff
 8002164:	431bde83 	.word	0x431bde83
 8002168:	10624dd3 	.word	0x10624dd3

0800216c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af02      	add	r7, sp, #8
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	817b      	strh	r3, [r7, #10]
 800217e:	460b      	mov	r3, r1
 8002180:	813b      	strh	r3, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002186:	f7ff fba1 	bl	80018cc <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	f040 80d9 	bne.w	800234c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2319      	movs	r3, #25
 80021a0:	2201      	movs	r2, #1
 80021a2:	496d      	ldr	r1, [pc, #436]	; (8002358 <HAL_I2C_Mem_Write+0x1ec>)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fc7f 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	e0cc      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Mem_Write+0x56>
 80021be:	2302      	movs	r3, #2
 80021c0:	e0c5      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d007      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2221      	movs	r2, #33	; 0x21
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_I2C_Mem_Write+0x1f0>)
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800222a:	88f8      	ldrh	r0, [r7, #6]
 800222c:	893a      	ldrh	r2, [r7, #8]
 800222e:	8979      	ldrh	r1, [r7, #10]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4603      	mov	r3, r0
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fab6 	bl	80027ac <I2C_RequestMemoryWrite>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d052      	beq.n	80022ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e081      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fd00 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b04      	cmp	r3, #4
 8002260:	d107      	bne.n	8002272 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002270:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06b      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d11b      	bne.n	80022ec <HAL_I2C_Mem_Write+0x180>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d017      	beq.n	80022ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1aa      	bne.n	800224a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fcec 	bl	8002cd6 <I2C_WaitOnBTFFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b04      	cmp	r3, #4
 800230a:	d107      	bne.n	800231c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e016      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	00100002 	.word	0x00100002
 800235c:	ffff0000 	.word	0xffff0000

08002360 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	817b      	strh	r3, [r7, #10]
 8002372:	460b      	mov	r3, r1
 8002374:	813b      	strh	r3, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800237a:	f7ff faa7 	bl	80018cc <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b20      	cmp	r3, #32
 800238a:	f040 8208 	bne.w	800279e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2319      	movs	r3, #25
 8002394:	2201      	movs	r2, #1
 8002396:	497b      	ldr	r1, [pc, #492]	; (8002584 <HAL_I2C_Mem_Read+0x224>)
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fb85 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
 80023a6:	e1fb      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_I2C_Mem_Read+0x56>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e1f4      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d007      	beq.n	80023dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2222      	movs	r2, #34	; 0x22
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2240      	movs	r2, #64	; 0x40
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800240c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a5b      	ldr	r2, [pc, #364]	; (8002588 <HAL_I2C_Mem_Read+0x228>)
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241e:	88f8      	ldrh	r0, [r7, #6]
 8002420:	893a      	ldrh	r2, [r7, #8]
 8002422:	8979      	ldrh	r1, [r7, #10]
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4603      	mov	r3, r0
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fa52 	bl	80028d8 <I2C_RequestMemoryRead>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1b0      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	d113      	bne.n	800246e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	623b      	str	r3, [r7, #32]
 800245a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e184      	b.n	8002778 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	2b01      	cmp	r3, #1
 8002474:	d11b      	bne.n	80024ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e164      	b.n	8002778 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d11b      	bne.n	80024ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	e144      	b.n	8002778 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002504:	e138      	b.n	8002778 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	2b03      	cmp	r3, #3
 800250c:	f200 80f1 	bhi.w	80026f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	2b01      	cmp	r3, #1
 8002516:	d123      	bne.n	8002560 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fc1b 	bl	8002d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e139      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800255e:	e10b      	b.n	8002778 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	2b02      	cmp	r3, #2
 8002566:	d14e      	bne.n	8002606 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	2200      	movs	r2, #0
 8002570:	4906      	ldr	r1, [pc, #24]	; (800258c <HAL_I2C_Mem_Read+0x22c>)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fa98 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e10e      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
 8002582:	bf00      	nop
 8002584:	00100002 	.word	0x00100002
 8002588:	ffff0000 	.word	0xffff0000
 800258c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002604:	e0b8      	b.n	8002778 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	2200      	movs	r2, #0
 800260e:	4966      	ldr	r1, [pc, #408]	; (80027a8 <HAL_I2C_Mem_Read+0x448>)
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fa49 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0bf      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	2200      	movs	r2, #0
 800266a:	494f      	ldr	r1, [pc, #316]	; (80027a8 <HAL_I2C_Mem_Read+0x448>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fa1b 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e091      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026f0:	e042      	b.n	8002778 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fb2e 	bl	8002d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e04c      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b04      	cmp	r3, #4
 8002744:	d118      	bne.n	8002778 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f aec2 	bne.w	8002506 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3728      	adds	r7, #40	; 0x28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	00010004 	.word	0x00010004

080027ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	460b      	mov	r3, r1
 80027c0:	813b      	strh	r3, [r7, #8]
 80027c2:	4613      	mov	r3, r2
 80027c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2200      	movs	r2, #0
 80027de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f960 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fc:	d103      	bne.n	8002806 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e05f      	b.n	80028ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002818:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	492d      	ldr	r1, [pc, #180]	; (80028d4 <I2C_RequestMemoryWrite+0x128>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f998 	bl	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e04c      	b.n	80028ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fa02 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b04      	cmp	r3, #4
 800285c:	d107      	bne.n	800286e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e02b      	b.n	80028ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d105      	bne.n	8002884 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002878:	893b      	ldrh	r3, [r7, #8]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	611a      	str	r2, [r3, #16]
 8002882:	e021      	b.n	80028c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	b29b      	uxth	r3, r3
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002894:	6a39      	ldr	r1, [r7, #32]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9dc 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d107      	bne.n	80028ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e005      	b.n	80028ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028be:	893b      	ldrh	r3, [r7, #8]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	00010002 	.word	0x00010002

080028d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	4608      	mov	r0, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	817b      	strh	r3, [r7, #10]
 80028ea:	460b      	mov	r3, r1
 80028ec:	813b      	strh	r3, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002900:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002910:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2200      	movs	r2, #0
 800291a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8c2 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002938:	d103      	bne.n	8002942 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0aa      	b.n	8002a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002954:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	4952      	ldr	r1, [pc, #328]	; (8002aa4 <I2C_RequestMemoryRead+0x1cc>)
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f8fa 	bl	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e097      	b.n	8002a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	6a39      	ldr	r1, [r7, #32]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f964 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b04      	cmp	r3, #4
 8002998:	d107      	bne.n	80029aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e076      	b.n	8002a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029b4:	893b      	ldrh	r3, [r7, #8]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	e021      	b.n	8002a04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029c0:	893b      	ldrh	r3, [r7, #8]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f93e 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d107      	bne.n	80029f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e050      	b.n	8002a9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029fa:	893b      	ldrh	r3, [r7, #8]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	6a39      	ldr	r1, [r7, #32]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f923 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d107      	bne.n	8002a2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e035      	b.n	8002a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f82b 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a66:	d103      	bne.n	8002a70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e013      	b.n	8002a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a74:	897b      	ldrh	r3, [r7, #10]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	6a3a      	ldr	r2, [r7, #32]
 8002a88:	4906      	ldr	r1, [pc, #24]	; (8002aa4 <I2C_RequestMemoryRead+0x1cc>)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f863 	bl	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	00010002 	.word	0x00010002

08002aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab8:	e025      	b.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d021      	beq.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac2:	f7fe ff03 	bl	80018cc <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d116      	bne.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e023      	b.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10d      	bne.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	e00c      	b.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf0c      	ite	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	2300      	movne	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d0b6      	beq.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b64:	e051      	b.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b74:	d123      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f043 0204 	orr.w	r2, r3, #4
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e046      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d021      	beq.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7fe fe81 	bl	80018cc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d116      	bne.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e020      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10c      	bne.n	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e00b      	b.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	43da      	mvns	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d18d      	bne.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	e02d      	b.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f8ce 	bl	8002e04 <I2C_IsAcknowledgeFailed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e02d      	b.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d021      	beq.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe fe27 	bl	80018cc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d116      	bne.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	2b80      	cmp	r3, #128	; 0x80
 8002cca:	d1ca      	bne.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce2:	e02d      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f88d 	bl	8002e04 <I2C_IsAcknowledgeFailed>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e02d      	b.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d021      	beq.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fe fde6 	bl	80018cc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e007      	b.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d1ca      	bne.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d64:	e042      	b.n	8002dec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d119      	bne.n	8002da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0210 	mvn.w	r2, #16
 8002d7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e029      	b.n	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da8:	f7fe fd90 	bl	80018cc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d1b5      	bne.n	8002d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d11b      	bne.n	8002e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e64:	b08f      	sub	sp, #60	; 0x3c
 8002e66:	af0a      	add	r7, sp, #40	; 0x28
 8002e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e10f      	b.n	8003094 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f005 fce2 	bl	8008858 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2203      	movs	r2, #3
 8002e98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fc9b 	bl	80057ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	687e      	ldr	r6, [r7, #4]
 8002ec0:	466d      	mov	r5, sp
 8002ec2:	f106 0410 	add.w	r4, r6, #16
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ece:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ed2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed6:	1d33      	adds	r3, r6, #4
 8002ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eda:	6838      	ldr	r0, [r7, #0]
 8002edc:	f002 fb72 	bl	80055c4 <USB_CoreInit>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0d0      	b.n	8003094 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 fc89 	bl	8005810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e04a      	b.n	8002f9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	333d      	adds	r3, #61	; 0x3d
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	333c      	adds	r3, #60	; 0x3c
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	b298      	uxth	r0, r3
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3342      	adds	r3, #66	; 0x42
 8002f40:	4602      	mov	r2, r0
 8002f42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	333f      	adds	r3, #63	; 0x3f
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3344      	adds	r3, #68	; 0x44
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3348      	adds	r3, #72	; 0x48
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3350      	adds	r3, #80	; 0x50
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	3301      	adds	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3af      	bcc.n	8002f04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e044      	b.n	8003034 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3301      	adds	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d3b5      	bcc.n	8002faa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	687e      	ldr	r6, [r7, #4]
 8003046:	466d      	mov	r5, sp
 8003048:	f106 0410 	add.w	r4, r6, #16
 800304c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003054:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003058:	e885 0003 	stmia.w	r5, {r0, r1}
 800305c:	1d33      	adds	r3, r6, #4
 800305e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f002 fbff 	bl	8005864 <USB_DevInit>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e00d      	b.n	8003094 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fc47 	bl	8006920 <USB_DevDisconnect>

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800309c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_PCD_Start+0x1c>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e020      	b.n	80030fa <HAL_PCD_Start+0x5e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d109      	bne.n	80030dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d005      	beq.n	80030dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fb73 	bl	80057cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 fbf7 	bl	80068de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003102:	b590      	push	{r4, r7, lr}
 8003104:	b08d      	sub	sp, #52	; 0x34
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fcb5 	bl	8006a88 <USB_GetMode>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 839d 	bne.w	8003860 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fc19 	bl	8006962 <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8393 	beq.w	800385e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fc10 	bl	8006962 <USB_ReadInterrupts>
 8003142:	4603      	mov	r3, r0
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d107      	bne.n	800315c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f002 0202 	and.w	r2, r2, #2
 800315a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f003 fbfe 	bl	8006962 <USB_ReadInterrupts>
 8003166:	4603      	mov	r3, r0
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b10      	cmp	r3, #16
 800316e:	d161      	bne.n	8003234 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0210 	bic.w	r2, r2, #16
 800317e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 020f 	and.w	r2, r3, #15
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	0c5b      	lsrs	r3, r3, #17
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d124      	bne.n	80031f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d035      	beq.n	8003224 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6a38      	ldr	r0, [r7, #32]
 80031cc:	f003 fa64 	bl	8006698 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031dc:	441a      	add	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ee:	441a      	add	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	619a      	str	r2, [r3, #24]
 80031f4:	e016      	b.n	8003224 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	0c5b      	lsrs	r3, r3, #17
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d110      	bne.n	8003224 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003208:	2208      	movs	r2, #8
 800320a:	4619      	mov	r1, r3
 800320c:	6a38      	ldr	r0, [r7, #32]
 800320e:	f003 fa43 	bl	8006698 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800321e:	441a      	add	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0210 	orr.w	r2, r2, #16
 8003232:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f003 fb92 	bl	8006962 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003244:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003248:	d16e      	bne.n	8003328 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f003 fb98 	bl	8006988 <USB_ReadDevAllOutEpInterrupt>
 8003258:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800325a:	e062      	b.n	8003322 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d057      	beq.n	8003316 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fbbd 	bl	80069f0 <USB_ReadDevOutEPInterrupt>
 8003276:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	2301      	movs	r3, #1
 8003292:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fdb0 	bl	8003dfc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	461a      	mov	r2, r3
 80032b4:	2308      	movs	r3, #8
 80032b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 feaa 	bl	8004014 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2310      	movs	r3, #16
 80032da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	461a      	mov	r2, r3
 80032f4:	2320      	movs	r3, #32
 80032f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330e:	461a      	mov	r2, r3
 8003310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003314:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	3301      	adds	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	d199      	bne.n	800325c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f003 fb18 	bl	8006962 <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800333c:	f040 80c0 	bne.w	80034c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f003 fb39 	bl	80069bc <USB_ReadDevAllInEpInterrupt>
 800334a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003350:	e0b2      	b.n	80034b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a7 	beq.w	80034ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f003 fb5f 	bl	8006a2c <USB_ReadDevInEPInterrupt>
 800336e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d057      	beq.n	800342a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	2201      	movs	r2, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	69f9      	ldr	r1, [r7, #28]
 8003396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800339a:	4013      	ands	r3, r2
 800339c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033aa:	461a      	mov	r2, r3
 80033ac:	2301      	movs	r3, #1
 80033ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d132      	bne.n	800341e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3348      	adds	r3, #72	; 0x48
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4403      	add	r3, r0
 80033d8:	3344      	adds	r3, #68	; 0x44
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4419      	add	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4403      	add	r3, r0
 80033ec:	3348      	adds	r3, #72	; 0x48
 80033ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d113      	bne.n	800341e <HAL_PCD_IRQHandler+0x31c>
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	3350      	adds	r3, #80	; 0x50
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d108      	bne.n	800341e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003416:	461a      	mov	r2, r3
 8003418:	2101      	movs	r1, #1
 800341a:	f003 fb67 	bl	8006aec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4619      	mov	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f005 fa98 	bl	800895a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003440:	461a      	mov	r2, r3
 8003442:	2308      	movs	r3, #8
 8003444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	461a      	mov	r2, r3
 800345e:	2310      	movs	r3, #16
 8003460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	461a      	mov	r2, r3
 800347a:	2340      	movs	r3, #64	; 0x40
 800347c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	461a      	mov	r2, r3
 8003496:	2302      	movs	r3, #2
 8003498:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fc1b 	bl	8003ce2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	3301      	adds	r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f47f af49 	bne.w	8003352 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f003 fa4c 	bl	8006962 <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d4:	d122      	bne.n	800351c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034fc:	2100      	movs	r1, #0
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fe26 	bl	8004150 <HAL_PCDEx_LPM_Callback>
 8003504:	e002      	b.n	800350c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f005 fa9e 	bl	8008a48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800351a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f003 fa1e 	bl	8006962 <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003530:	d112      	bne.n	8003558 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f005 fa5a 	bl	80089fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003556:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f003 fa00 	bl	8006962 <USB_ReadInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	f040 80c7 	bne.w	80036fe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2110      	movs	r1, #16
 800358a:	4618      	mov	r0, r3
 800358c:	f002 face 	bl	8005b2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003590:	2300      	movs	r3, #0
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003594:	e056      	b.n	8003644 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	461a      	mov	r2, r3
 80035a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035da:	0151      	lsls	r1, r2, #5
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	440a      	add	r2, r1
 80035e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003618:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800361c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362e:	0151      	lsls	r1, r2, #5
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	440a      	add	r2, r1
 8003634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003638:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800363c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	3301      	adds	r3, #1
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364a:	429a      	cmp	r2, r3
 800364c:	d3a3      	bcc.n	8003596 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003660:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367a:	f043 030b 	orr.w	r3, r3, #11
 800367e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003690:	f043 030b 	orr.w	r3, r3, #11
 8003694:	6453      	str	r3, [r2, #68]	; 0x44
 8003696:	e015      	b.n	80036c4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036be:	f043 030b 	orr.w	r3, r3, #11
 80036c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036e8:	461a      	mov	r2, r3
 80036ea:	f003 f9ff 	bl	8006aec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 f92d 	bl	8006962 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	d124      	bne.n	800375e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 f9c3 	bl	8006aa4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f002 fa63 	bl	8005bee <USB_GetDevSpeed>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681c      	ldr	r4, [r3, #0]
 8003734:	f001 f944 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 8003738:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	4620      	mov	r0, r4
 8003744:	f001 ffa0 	bl	8005688 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f005 f92e 	bl	80089aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800375c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 f8fd 	bl	8006962 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d10a      	bne.n	8003788 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f005 f90b 	bl	800898e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f002 0208 	and.w	r2, r2, #8
 8003786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f003 f8e8 	bl	8006962 <USB_ReadInterrupts>
 8003792:	4603      	mov	r3, r0
 8003794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800379c:	d10f      	bne.n	80037be <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f005 f96d 	bl	8008a88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f003 f8cd 	bl	8006962 <USB_ReadInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037d2:	d10f      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f005 f940 	bl	8008a64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 f8b2 	bl	8006962 <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003808:	d10a      	bne.n	8003820 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f005 f94e 	bl	8008aac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800381e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f003 f89c 	bl	8006962 <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d115      	bne.n	8003860 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f005 f93e 	bl	8008ac8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	430a      	orrs	r2, r1
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	e000      	b.n	8003860 <HAL_PCD_IRQHandler+0x75e>
      return;
 800385e:	bf00      	nop
    }
  }
}
 8003860:	3734      	adds	r7, #52	; 0x34
 8003862:	46bd      	mov	sp, r7
 8003864:	bd90      	pop	{r4, r7, pc}

08003866 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_PCD_SetAddress+0x1a>
 800387c:	2302      	movs	r3, #2
 800387e:	e013      	b.n	80038a8 <HAL_PCD_SetAddress+0x42>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f002 fffa 	bl	8006892 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	70fb      	strb	r3, [r7, #3]
 80038c2:	460b      	mov	r3, r1
 80038c4:	803b      	strh	r3, [r7, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	da0f      	bge.n	80038f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	f003 020f 	and.w	r2, r3, #15
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	3338      	adds	r3, #56	; 0x38
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	3304      	adds	r3, #4
 80038ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	705a      	strb	r2, [r3, #1]
 80038f4:	e00f      	b.n	8003916 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	3304      	adds	r3, #4
 800390e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	b2da      	uxtb	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003922:	883a      	ldrh	r2, [r7, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	78ba      	ldrb	r2, [r7, #2]
 800392c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	785b      	ldrb	r3, [r3, #1]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003940:	78bb      	ldrb	r3, [r7, #2]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d102      	bne.n	800394c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_PCD_EP_Open+0xaa>
 8003956:	2302      	movs	r3, #2
 8003958:	e00e      	b.n	8003978 <HAL_PCD_EP_Open+0xc8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68f9      	ldr	r1, [r7, #12]
 8003968:	4618      	mov	r0, r3
 800396a:	f002 f965 	bl	8005c38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003976:	7afb      	ldrb	r3, [r7, #11]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800398c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003990:	2b00      	cmp	r3, #0
 8003992:	da0f      	bge.n	80039b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	3338      	adds	r3, #56	; 0x38
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	3304      	adds	r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	705a      	strb	r2, [r3, #1]
 80039b2:	e00f      	b.n	80039d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 020f 	and.w	r2, r3, #15
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	3304      	adds	r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_PCD_EP_Close+0x6e>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e00e      	b.n	8003a0c <HAL_PCD_EP_Close+0x8c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f002 f9a3 	bl	8005d48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	460b      	mov	r3, r1
 8003a22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	7afb      	ldrb	r3, [r7, #11]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2200      	movs	r2, #0
 8003a54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	6979      	ldr	r1, [r7, #20]
 8003a88:	f002 fc7e 	bl	8006388 <USB_EP0StartXfer>
 8003a8c:	e008      	b.n	8003aa0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	f002 fa30 	bl	8005f00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 020f 	and.w	r2, r3, #15
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003acc:	681b      	ldr	r3, [r3, #0]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aea:	7afb      	ldrb	r3, [r7, #11]
 8003aec:	f003 020f 	and.w	r2, r3, #15
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	3338      	adds	r3, #56	; 0x38
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	3304      	adds	r3, #4
 8003b00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2201      	movs	r2, #1
 8003b18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d102      	bne.n	8003b34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b34:	7afb      	ldrb	r3, [r7, #11]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	f002 fc1c 	bl	8006388 <USB_EP0StartXfer>
 8003b50:	e008      	b.n	8003b64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6979      	ldr	r1, [r7, #20]
 8003b60:	f002 f9ce 	bl	8005f00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	460b      	mov	r3, r1
 8003b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d901      	bls.n	8003b8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e050      	b.n	8003c2e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da0f      	bge.n	8003bb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	f003 020f 	and.w	r2, r3, #15
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	3338      	adds	r3, #56	; 0x38
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3304      	adds	r3, #4
 8003baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	705a      	strb	r2, [r3, #1]
 8003bb2:	e00d      	b.n	8003bd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_PCD_EP_SetStall+0x82>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e01e      	b.n	8003c2e <HAL_PCD_EP_SetStall+0xc0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fd73 	bl	80066ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	b2d9      	uxtb	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f002 ff64 	bl	8006aec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d901      	bls.n	8003c54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e042      	b.n	8003cda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da0f      	bge.n	8003c7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	3338      	adds	r3, #56	; 0x38
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	705a      	strb	r2, [r3, #1]
 8003c7a:	e00f      	b.n	8003c9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_PCD_EP_ClrStall+0x86>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e00e      	b.n	8003cda <HAL_PCD_EP_ClrStall+0xa4>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 fd7b 	bl	80067c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b08a      	sub	sp, #40	; 0x28
 8003ce6:	af02      	add	r7, sp, #8
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	3338      	adds	r3, #56	; 0x38
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	3304      	adds	r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d901      	bls.n	8003d1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e06c      	b.n	8003df4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d902      	bls.n	8003d36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3303      	adds	r3, #3
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d3e:	e02b      	b.n	8003d98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d902      	bls.n	8003d5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3303      	adds	r3, #3
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68d9      	ldr	r1, [r3, #12]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4603      	mov	r3, r0
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f002 fc57 	bl	800662e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	441a      	add	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	441a      	add	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d809      	bhi.n	8003dc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d203      	bcs.n	8003dc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1be      	bne.n	8003d40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d811      	bhi.n	8003df2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	6939      	ldr	r1, [r7, #16]
 8003dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dee:	4013      	ands	r3, r2
 8003df0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	333c      	adds	r3, #60	; 0x3c
 8003e14:	3304      	adds	r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	f040 80a0 	bne.w	8003f74 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d015      	beq.n	8003e6a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a72      	ldr	r2, [pc, #456]	; (800400c <PCD_EP_OutXfrComplete_int+0x210>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f240 80dd 	bls.w	8004002 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80d7 	beq.w	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	6093      	str	r3, [r2, #8]
 8003e68:	e0cb      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	461a      	mov	r2, r3
 8003e82:	2320      	movs	r3, #32
 8003e84:	6093      	str	r3, [r2, #8]
 8003e86:	e0bc      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 80b7 	bne.w	8004002 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a5d      	ldr	r2, [pc, #372]	; (800400c <PCD_EP_OutXfrComplete_int+0x210>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d90f      	bls.n	8003ebc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	e0a2      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ece:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	0159      	lsls	r1, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003ee2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4403      	add	r3, r0
 8003ef2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ef6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4403      	add	r3, r0
 8003f1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4419      	add	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4403      	add	r3, r0
 8003f30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f34:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d114      	bne.n	8003f66 <PCD_EP_OutXfrComplete_int+0x16a>
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d108      	bne.n	8003f66 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2101      	movs	r1, #1
 8003f62:	f002 fdc3 	bl	8006aec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f004 fcd9 	bl	8008924 <HAL_PCD_DataOutStageCallback>
 8003f72:	e046      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a26      	ldr	r2, [pc, #152]	; (8004010 <PCD_EP_OutXfrComplete_int+0x214>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d124      	bne.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	461a      	mov	r2, r3
 8003f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f98:	6093      	str	r3, [r2, #8]
 8003f9a:	e032      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f004 fcb0 	bl	8008924 <HAL_PCD_DataOutStageCallback>
 8003fc4:	e01d      	b.n	8004002 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d114      	bne.n	8003ff6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f002 fd7b 	bl	8006aec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f004 fc91 	bl	8008924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	4f54300a 	.word	0x4f54300a
 8004010:	4f54310a 	.word	0x4f54310a

08004014 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	333c      	adds	r3, #60	; 0x3c
 800402c:	3304      	adds	r3, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <PCD_EP_OutSetupPacket_int+0x88>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d90e      	bls.n	8004068 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f004 fc49 	bl	8008900 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <PCD_EP_OutSetupPacket_int+0x88>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d90c      	bls.n	8004090 <PCD_EP_OutSetupPacket_int+0x7c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004088:	461a      	mov	r2, r3
 800408a:	2101      	movs	r1, #1
 800408c:	f002 fd2e 	bl	8006aec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	4f54300a 	.word	0x4f54300a

080040a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
 80040ac:	4613      	mov	r3, r2
 80040ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040be:	883b      	ldrh	r3, [r7, #0]
 80040c0:	0419      	lsls	r1, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
 80040cc:	e028      	b.n	8004120 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4413      	add	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	e00d      	b.n	80040fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	3340      	adds	r3, #64	; 0x40
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	4413      	add	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	3301      	adds	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	3b01      	subs	r3, #1
 8004104:	429a      	cmp	r2, r3
 8004106:	d3ec      	bcc.n	80040e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004108:	883b      	ldrh	r3, [r7, #0]
 800410a:	0418      	lsls	r0, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	3b01      	subs	r3, #1
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	4302      	orrs	r2, r0
 8004118:	3340      	adds	r3, #64	; 0x40
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e25b      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d075      	beq.n	8004272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004186:	4ba3      	ldr	r3, [pc, #652]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00c      	beq.n	80041ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4ba0      	ldr	r3, [pc, #640]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800419a:	2b08      	cmp	r3, #8
 800419c:	d112      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b9d      	ldr	r3, [pc, #628]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	4b99      	ldr	r3, [pc, #612]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05b      	beq.n	8004270 <HAL_RCC_OscConfig+0x108>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d157      	bne.n	8004270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e236      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d106      	bne.n	80041dc <HAL_RCC_OscConfig+0x74>
 80041ce:	4b91      	ldr	r3, [pc, #580]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a90      	ldr	r2, [pc, #576]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e01d      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x98>
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a8a      	ldr	r2, [pc, #552]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a87      	ldr	r2, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 8004200:	4b84      	ldr	r3, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a83      	ldr	r2, [pc, #524]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b81      	ldr	r3, [pc, #516]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a80      	ldr	r2, [pc, #512]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fd fb54 	bl	80018cc <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fd fb50 	bl	80018cc <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e1fb      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0xc0>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd fb40 	bl	80018cc <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7fd fb3c 	bl	80018cc <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1e7      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004262:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0xe8>
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800427e:	4b65      	ldr	r3, [pc, #404]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b62      	ldr	r3, [pc, #392]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004292:	2b08      	cmp	r3, #8
 8004294:	d11c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b5f      	ldr	r3, [pc, #380]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e1bb      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	4b56      	ldr	r3, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4952      	ldr	r1, [pc, #328]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	e03a      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d8:	4b4f      	ldr	r3, [pc, #316]	; (8004418 <HAL_RCC_OscConfig+0x2b0>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fd faf5 	bl	80018cc <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e6:	f7fd faf1 	bl	80018cc <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e19c      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f8:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4940      	ldr	r1, [pc, #256]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431a:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_RCC_OscConfig+0x2b0>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd fad4 	bl	80018cc <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004328:	f7fd fad0 	bl	80018cc <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e17b      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d030      	beq.n	80043b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435a:	4b30      	ldr	r3, [pc, #192]	; (800441c <HAL_RCC_OscConfig+0x2b4>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd fab4 	bl	80018cc <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004368:	f7fd fab0 	bl	80018cc <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e15b      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x200>
 8004386:	e015      	b.n	80043b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004388:	4b24      	ldr	r3, [pc, #144]	; (800441c <HAL_RCC_OscConfig+0x2b4>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fd fa9d 	bl	80018cc <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004396:	f7fd fa99 	bl	80018cc <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e144      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a0 	beq.w	8004502 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d121      	bne.n	8004442 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a07      	ldr	r2, [pc, #28]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fd fa5f 	bl	80018cc <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	e011      	b.n	8004436 <HAL_RCC_OscConfig+0x2ce>
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	42470000 	.word	0x42470000
 800441c:	42470e80 	.word	0x42470e80
 8004420:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7fd fa52 	bl	80018cc <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0fd      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b81      	ldr	r3, [pc, #516]	; (800463c <HAL_RCC_OscConfig+0x4d4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d106      	bne.n	8004458 <HAL_RCC_OscConfig+0x2f0>
 800444a:	4b7d      	ldr	r3, [pc, #500]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a7c      	ldr	r2, [pc, #496]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	e01c      	b.n	8004492 <HAL_RCC_OscConfig+0x32a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b05      	cmp	r3, #5
 800445e:	d10c      	bne.n	800447a <HAL_RCC_OscConfig+0x312>
 8004460:	4b77      	ldr	r3, [pc, #476]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a76      	ldr	r2, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	4b74      	ldr	r3, [pc, #464]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4a73      	ldr	r2, [pc, #460]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	; 0x70
 8004478:	e00b      	b.n	8004492 <HAL_RCC_OscConfig+0x32a>
 800447a:	4b71      	ldr	r3, [pc, #452]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a70      	ldr	r2, [pc, #448]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
 8004486:	4b6e      	ldr	r3, [pc, #440]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a6d      	ldr	r2, [pc, #436]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d015      	beq.n	80044c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd fa17 	bl	80018cc <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fd fa13 	bl	80018cc <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0bc      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b8:	4b61      	ldr	r3, [pc, #388]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ee      	beq.n	80044a2 <HAL_RCC_OscConfig+0x33a>
 80044c4:	e014      	b.n	80044f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c6:	f7fd fa01 	bl	80018cc <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ce:	f7fd f9fd 	bl	80018cc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e0a6      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e4:	4b56      	ldr	r3, [pc, #344]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ee      	bne.n	80044ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f6:	4b52      	ldr	r3, [pc, #328]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a51      	ldr	r2, [pc, #324]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8092 	beq.w	8004630 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450c:	4b4c      	ldr	r3, [pc, #304]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b08      	cmp	r3, #8
 8004516:	d05c      	beq.n	80045d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d141      	bne.n	80045a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b48      	ldr	r3, [pc, #288]	; (8004644 <HAL_RCC_OscConfig+0x4dc>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fd f9d1 	bl	80018cc <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452e:	f7fd f9cd 	bl	80018cc <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e078      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004540:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	019b      	lsls	r3, r3, #6
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	3b01      	subs	r3, #1
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	061b      	lsls	r3, r3, #24
 8004570:	4933      	ldr	r1, [pc, #204]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004576:	4b33      	ldr	r3, [pc, #204]	; (8004644 <HAL_RCC_OscConfig+0x4dc>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fd f9a6 	bl	80018cc <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd f9a2 	bl	80018cc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e04d      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004596:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x41c>
 80045a2:	e045      	b.n	8004630 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_RCC_OscConfig+0x4dc>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fd f98f 	bl	80018cc <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fd f98b 	bl	80018cc <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e036      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c4:	4b1e      	ldr	r3, [pc, #120]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x44a>
 80045d0:	e02e      	b.n	8004630 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e029      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045de:	4b18      	ldr	r3, [pc, #96]	; (8004640 <HAL_RCC_OscConfig+0x4d8>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d11c      	bne.n	800462c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d115      	bne.n	800462c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004606:	4013      	ands	r3, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800460c:	4293      	cmp	r3, r2
 800460e:	d10d      	bne.n	800462c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d106      	bne.n	800462c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40007000 	.word	0x40007000
 8004640:	40023800 	.word	0x40023800
 8004644:	42470060 	.word	0x42470060

08004648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0cc      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d90c      	bls.n	8004684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b63      	ldr	r3, [pc, #396]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0b8      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a58      	ldr	r2, [pc, #352]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b4:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	494d      	ldr	r1, [pc, #308]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d044      	beq.n	8004768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d119      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	2b03      	cmp	r3, #3
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e06f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e067      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4934      	ldr	r1, [pc, #208]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004738:	f7fd f8c8 	bl	80018cc <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fd f8c4 	bl	80018cc <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e04f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 020c 	and.w	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d1eb      	bne.n	8004740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d20c      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e032      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4916      	ldr	r1, [pc, #88]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	490e      	ldr	r1, [pc, #56]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ce:	f000 f821 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 80047d2:	4601      	mov	r1, r0
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	5cd3      	ldrb	r3, [r2, r3]
 80047e2:	fa21 f303 	lsr.w	r3, r1, r3
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fd f828 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023c00 	.word	0x40023c00
 8004804:	40023800 	.word	0x40023800
 8004808:	0800aa10 	.word	0x0800aa10
 800480c:	20000000 	.word	0x20000000
 8004810:	20000004 	.word	0x20000004

08004814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800482a:	4b63      	ldr	r3, [pc, #396]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b04      	cmp	r3, #4
 8004834:	d007      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x32>
 8004836:	2b08      	cmp	r3, #8
 8004838:	d008      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x38>
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 80b4 	bne.w	80049a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004840:	4b5e      	ldr	r3, [pc, #376]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004842:	60bb      	str	r3, [r7, #8]
       break;
 8004844:	e0b3      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004846:	4b5d      	ldr	r3, [pc, #372]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004848:	60bb      	str	r3, [r7, #8]
      break;
 800484a:	e0b0      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800484c:	4b5a      	ldr	r3, [pc, #360]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004854:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004856:	4b58      	ldr	r3, [pc, #352]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d04a      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004862:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	ea03 0501 	and.w	r5, r3, r1
 8004878:	ea04 0602 	and.w	r6, r4, r2
 800487c:	4629      	mov	r1, r5
 800487e:	4632      	mov	r2, r6
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	f04f 0400 	mov.w	r4, #0
 8004888:	0154      	lsls	r4, r2, #5
 800488a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800488e:	014b      	lsls	r3, r1, #5
 8004890:	4619      	mov	r1, r3
 8004892:	4622      	mov	r2, r4
 8004894:	1b49      	subs	r1, r1, r5
 8004896:	eb62 0206 	sbc.w	r2, r2, r6
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	f04f 0400 	mov.w	r4, #0
 80048a2:	0194      	lsls	r4, r2, #6
 80048a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048a8:	018b      	lsls	r3, r1, #6
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	eb64 0402 	sbc.w	r4, r4, r2
 80048b0:	f04f 0100 	mov.w	r1, #0
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	00e2      	lsls	r2, r4, #3
 80048ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048be:	00d9      	lsls	r1, r3, #3
 80048c0:	460b      	mov	r3, r1
 80048c2:	4614      	mov	r4, r2
 80048c4:	195b      	adds	r3, r3, r5
 80048c6:	eb44 0406 	adc.w	r4, r4, r6
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	02a2      	lsls	r2, r4, #10
 80048d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048d8:	0299      	lsls	r1, r3, #10
 80048da:	460b      	mov	r3, r1
 80048dc:	4614      	mov	r4, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	4621      	mov	r1, r4
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f04f 0400 	mov.w	r4, #0
 80048e8:	461a      	mov	r2, r3
 80048ea:	4623      	mov	r3, r4
 80048ec:	f7fc f908 	bl	8000b00 <__aeabi_uldivmod>
 80048f0:	4603      	mov	r3, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e049      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f8:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	f04f 0400 	mov.w	r4, #0
 8004902:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	ea03 0501 	and.w	r5, r3, r1
 800490e:	ea04 0602 	and.w	r6, r4, r2
 8004912:	4629      	mov	r1, r5
 8004914:	4632      	mov	r2, r6
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	f04f 0400 	mov.w	r4, #0
 800491e:	0154      	lsls	r4, r2, #5
 8004920:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004924:	014b      	lsls	r3, r1, #5
 8004926:	4619      	mov	r1, r3
 8004928:	4622      	mov	r2, r4
 800492a:	1b49      	subs	r1, r1, r5
 800492c:	eb62 0206 	sbc.w	r2, r2, r6
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	f04f 0400 	mov.w	r4, #0
 8004938:	0194      	lsls	r4, r2, #6
 800493a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800493e:	018b      	lsls	r3, r1, #6
 8004940:	1a5b      	subs	r3, r3, r1
 8004942:	eb64 0402 	sbc.w	r4, r4, r2
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	00e2      	lsls	r2, r4, #3
 8004950:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004954:	00d9      	lsls	r1, r3, #3
 8004956:	460b      	mov	r3, r1
 8004958:	4614      	mov	r4, r2
 800495a:	195b      	adds	r3, r3, r5
 800495c:	eb44 0406 	adc.w	r4, r4, r6
 8004960:	f04f 0100 	mov.w	r1, #0
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	02a2      	lsls	r2, r4, #10
 800496a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800496e:	0299      	lsls	r1, r3, #10
 8004970:	460b      	mov	r3, r1
 8004972:	4614      	mov	r4, r2
 8004974:	4618      	mov	r0, r3
 8004976:	4621      	mov	r1, r4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f04f 0400 	mov.w	r4, #0
 800497e:	461a      	mov	r2, r3
 8004980:	4623      	mov	r3, r4
 8004982:	f7fc f8bd 	bl	8000b00 <__aeabi_uldivmod>
 8004986:	4603      	mov	r3, r0
 8004988:	460c      	mov	r4, r1
 800498a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	3301      	adds	r3, #1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	60bb      	str	r3, [r7, #8]
      break;
 80049a6:	e002      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049aa:	60bb      	str	r3, [r7, #8]
      break;
 80049ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ae:	68bb      	ldr	r3, [r7, #8]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b8:	40023800 	.word	0x40023800
 80049bc:	00f42400 	.word	0x00f42400

080049c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000000 	.word	0x20000000

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049dc:	f7ff fff0 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 80049e0:	4601      	mov	r1, r0
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0a9b      	lsrs	r3, r3, #10
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4a03      	ldr	r2, [pc, #12]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ee:	5cd3      	ldrb	r3, [r2, r3]
 80049f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40023800 	.word	0x40023800
 80049fc:	0800aa20 	.word	0x0800aa20

08004a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e01d      	b.n	8004a4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc fdb8 	bl	800159c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f000 faba 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2202      	movs	r2, #2
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b06      	cmp	r3, #6
 8004a76:	d007      	beq.n	8004a88 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d007      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e01d      	b.n	8004b34 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fc fd25 	bl	800155c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f000 fa47 	bl	8004fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	6839      	ldr	r1, [r7, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fc82 	bl	8005458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <HAL_TIM_PWM_Start+0x74>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIM_PWM_Start+0x2c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <HAL_TIM_PWM_Start+0x78>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_PWM_Start+0x30>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_TIM_PWM_Start+0x32>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b06      	cmp	r3, #6
 8004b92:	d007      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0202 	mvn.w	r2, #2
 8004be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9be 	bl	8004f7c <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9b0 	bl	8004f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f9c1 	bl	8004f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d122      	bne.n	8004c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d11b      	bne.n	8004c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0204 	mvn.w	r2, #4
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f994 	bl	8004f7c <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f986 	bl	8004f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f997 	bl	8004f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d122      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d11b      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0208 	mvn.w	r2, #8
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2204      	movs	r2, #4
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f96a 	bl	8004f7c <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f95c 	bl	8004f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f96d 	bl	8004f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d122      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d11b      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0210 	mvn.w	r2, #16
 8004ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f940 	bl	8004f7c <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f932 	bl	8004f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f943 	bl	8004f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0201 	mvn.w	r2, #1
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f90c 	bl	8004f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d46:	2b80      	cmp	r3, #128	; 0x80
 8004d48:	d10e      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d54:	2b80      	cmp	r3, #128	; 0x80
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fc24 	bl	80055b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b40      	cmp	r3, #64	; 0x40
 8004d74:	d10e      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d107      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f908 	bl	8004fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d10e      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0220 	mvn.w	r2, #32
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fbee 	bl	800559c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e0b4      	b.n	8004f4c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	f200 809f 	bhi.w	8004f38 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004f39 	.word	0x08004f39
 8004e08:	08004f39 	.word	0x08004f39
 8004e0c:	08004f39 	.word	0x08004f39
 8004e10:	08004e75 	.word	0x08004e75
 8004e14:	08004f39 	.word	0x08004f39
 8004e18:	08004f39 	.word	0x08004f39
 8004e1c:	08004f39 	.word	0x08004f39
 8004e20:	08004eb7 	.word	0x08004eb7
 8004e24:	08004f39 	.word	0x08004f39
 8004e28:	08004f39 	.word	0x08004f39
 8004e2c:	08004f39 	.word	0x08004f39
 8004e30:	08004ef7 	.word	0x08004ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f95c 	bl	80050f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0208 	orr.w	r2, r2, #8
 8004e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	619a      	str	r2, [r3, #24]
      break;
 8004e72:	e062      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f9ac 	bl	80051d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6999      	ldr	r1, [r3, #24]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	619a      	str	r2, [r3, #24]
      break;
 8004eb4:	e041      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fa01 	bl	80052c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0208 	orr.w	r2, r2, #8
 8004ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0204 	bic.w	r2, r2, #4
 8004ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69d9      	ldr	r1, [r3, #28]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	61da      	str	r2, [r3, #28]
      break;
 8004ef4:	e021      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fa55 	bl	80053ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69d9      	ldr	r1, [r3, #28]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	021a      	lsls	r2, r3, #8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	61da      	str	r2, [r3, #28]
      break;
 8004f36:	e000      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004f38:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a40      	ldr	r2, [pc, #256]	; (80050cc <TIM_Base_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3d      	ldr	r2, [pc, #244]	; (80050d0 <TIM_Base_SetConfig+0x118>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <TIM_Base_SetConfig+0x11c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3b      	ldr	r2, [pc, #236]	; (80050d8 <TIM_Base_SetConfig+0x120>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3a      	ldr	r2, [pc, #232]	; (80050dc <TIM_Base_SetConfig+0x124>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <TIM_Base_SetConfig+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	d027      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <TIM_Base_SetConfig+0x118>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d023      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2b      	ldr	r2, [pc, #172]	; (80050d4 <TIM_Base_SetConfig+0x11c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01f      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <TIM_Base_SetConfig+0x120>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <TIM_Base_SetConfig+0x124>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d017      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <TIM_Base_SetConfig+0x128>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <TIM_Base_SetConfig+0x12c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00f      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <TIM_Base_SetConfig+0x130>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00b      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a25      	ldr	r2, [pc, #148]	; (80050ec <TIM_Base_SetConfig+0x134>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d007      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a24      	ldr	r2, [pc, #144]	; (80050f0 <TIM_Base_SetConfig+0x138>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d003      	beq.n	800506a <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <TIM_Base_SetConfig+0x13c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d108      	bne.n	800507c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <TIM_Base_SetConfig+0x114>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0xf8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <TIM_Base_SetConfig+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d103      	bne.n	80050b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	615a      	str	r2, [r3, #20]
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800
 80050ec:	40001800 	.word	0x40001800
 80050f0:	40001c00 	.word	0x40001c00
 80050f4:	40002000 	.word	0x40002000

080050f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f023 0201 	bic.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f023 0302 	bic.w	r3, r3, #2
 8005140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a20      	ldr	r2, [pc, #128]	; (80051d0 <TIM_OC1_SetConfig+0xd8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_OC1_SetConfig+0x64>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <TIM_OC1_SetConfig+0xdc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d10c      	bne.n	8005176 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f023 0308 	bic.w	r3, r3, #8
 8005162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 0304 	bic.w	r3, r3, #4
 8005174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <TIM_OC1_SetConfig+0xd8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC1_SetConfig+0x8e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <TIM_OC1_SetConfig+0xdc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d111      	bne.n	80051aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	621a      	str	r2, [r3, #32]
}
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40010400 	.word	0x40010400

080051d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0210 	bic.w	r2, r3, #16
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 0320 	bic.w	r3, r3, #32
 8005222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a22      	ldr	r2, [pc, #136]	; (80052bc <TIM_OC2_SetConfig+0xe4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC2_SetConfig+0x68>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <TIM_OC2_SetConfig+0xe8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10d      	bne.n	800525c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a17      	ldr	r2, [pc, #92]	; (80052bc <TIM_OC2_SetConfig+0xe4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_OC2_SetConfig+0x94>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a16      	ldr	r2, [pc, #88]	; (80052c0 <TIM_OC2_SetConfig+0xe8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d113      	bne.n	8005294 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40010400 	.word	0x40010400

080052c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800530c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <TIM_OC3_SetConfig+0xe0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <TIM_OC3_SetConfig+0x66>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a20      	ldr	r2, [pc, #128]	; (80053a8 <TIM_OC3_SetConfig+0xe4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d10d      	bne.n	8005346 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <TIM_OC3_SetConfig+0xe0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_OC3_SetConfig+0x92>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <TIM_OC3_SetConfig+0xe4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d113      	bne.n	800537e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800535c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	621a      	str	r2, [r3, #32]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40010400 	.word	0x40010400

080053ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	031b      	lsls	r3, r3, #12
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a12      	ldr	r2, [pc, #72]	; (8005450 <TIM_OC4_SetConfig+0xa4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_OC4_SetConfig+0x68>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a11      	ldr	r2, [pc, #68]	; (8005454 <TIM_OC4_SetConfig+0xa8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d109      	bne.n	8005428 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	019b      	lsls	r3, r3, #6
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000
 8005454:	40010400 	.word	0x40010400

08005458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	2201      	movs	r2, #1
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1a      	ldr	r2, [r3, #32]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	43db      	mvns	r3, r3
 800547a:	401a      	ands	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e05a      	b.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a21      	ldr	r2, [pc, #132]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d022      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005508:	d01d      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d018      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1a      	ldr	r2, [pc, #104]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00e      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a18      	ldr	r2, [pc, #96]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a17      	ldr	r2, [pc, #92]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a15      	ldr	r2, [pc, #84]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10c      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4313      	orrs	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400
 8005594:	40014000 	.word	0x40014000
 8005598:	40001800 	.word	0x40001800

0800559c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055c4:	b084      	sub	sp, #16
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	f107 001c 	add.w	r0, r7, #28
 80055d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d122      	bne.n	8005622 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d105      	bne.n	8005616 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 fac6 	bl	8006ba8 <USB_CoreReset>
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]
 8005620:	e01a      	b.n	8005658 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 faba 	bl	8006ba8 <USB_CoreReset>
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
 800564a:	e005      	b.n	8005658 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10b      	bne.n	8005676 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f043 0206 	orr.w	r2, r3, #6
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005676:	7bfb      	ldrb	r3, [r7, #15]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005682:	b004      	add	sp, #16
 8005684:	4770      	bx	lr
	...

08005688 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	4613      	mov	r3, r2
 8005694:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d165      	bne.n	8005768 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4a41      	ldr	r2, [pc, #260]	; (80057a4 <USB_SetTurnaroundTime+0x11c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d906      	bls.n	80056b2 <USB_SetTurnaroundTime+0x2a>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4a40      	ldr	r2, [pc, #256]	; (80057a8 <USB_SetTurnaroundTime+0x120>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d802      	bhi.n	80056b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056ac:	230f      	movs	r3, #15
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	e062      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4a3c      	ldr	r2, [pc, #240]	; (80057a8 <USB_SetTurnaroundTime+0x120>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d906      	bls.n	80056c8 <USB_SetTurnaroundTime+0x40>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4a3b      	ldr	r2, [pc, #236]	; (80057ac <USB_SetTurnaroundTime+0x124>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d802      	bhi.n	80056c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056c2:	230e      	movs	r3, #14
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e057      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4a38      	ldr	r2, [pc, #224]	; (80057ac <USB_SetTurnaroundTime+0x124>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d906      	bls.n	80056de <USB_SetTurnaroundTime+0x56>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4a37      	ldr	r2, [pc, #220]	; (80057b0 <USB_SetTurnaroundTime+0x128>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d802      	bhi.n	80056de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056d8:	230d      	movs	r3, #13
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e04c      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4a33      	ldr	r2, [pc, #204]	; (80057b0 <USB_SetTurnaroundTime+0x128>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d906      	bls.n	80056f4 <USB_SetTurnaroundTime+0x6c>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4a32      	ldr	r2, [pc, #200]	; (80057b4 <USB_SetTurnaroundTime+0x12c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d802      	bhi.n	80056f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056ee:	230c      	movs	r3, #12
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	e041      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4a2f      	ldr	r2, [pc, #188]	; (80057b4 <USB_SetTurnaroundTime+0x12c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d906      	bls.n	800570a <USB_SetTurnaroundTime+0x82>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4a2e      	ldr	r2, [pc, #184]	; (80057b8 <USB_SetTurnaroundTime+0x130>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d802      	bhi.n	800570a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005704:	230b      	movs	r3, #11
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	e036      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4a2a      	ldr	r2, [pc, #168]	; (80057b8 <USB_SetTurnaroundTime+0x130>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d906      	bls.n	8005720 <USB_SetTurnaroundTime+0x98>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4a29      	ldr	r2, [pc, #164]	; (80057bc <USB_SetTurnaroundTime+0x134>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d802      	bhi.n	8005720 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800571a:	230a      	movs	r3, #10
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	e02b      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4a26      	ldr	r2, [pc, #152]	; (80057bc <USB_SetTurnaroundTime+0x134>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d906      	bls.n	8005736 <USB_SetTurnaroundTime+0xae>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4a25      	ldr	r2, [pc, #148]	; (80057c0 <USB_SetTurnaroundTime+0x138>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d802      	bhi.n	8005736 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005730:	2309      	movs	r3, #9
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e020      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4a21      	ldr	r2, [pc, #132]	; (80057c0 <USB_SetTurnaroundTime+0x138>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d906      	bls.n	800574c <USB_SetTurnaroundTime+0xc4>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <USB_SetTurnaroundTime+0x13c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d802      	bhi.n	800574c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005746:	2308      	movs	r3, #8
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	e015      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <USB_SetTurnaroundTime+0x13c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d906      	bls.n	8005762 <USB_SetTurnaroundTime+0xda>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4a1c      	ldr	r2, [pc, #112]	; (80057c8 <USB_SetTurnaroundTime+0x140>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d802      	bhi.n	8005762 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800575c:	2307      	movs	r3, #7
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e00a      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005762:	2306      	movs	r3, #6
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e007      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800576e:	2309      	movs	r3, #9
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e001      	b.n	8005778 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005774:	2309      	movs	r3, #9
 8005776:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	029b      	lsls	r3, r3, #10
 800578c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	00d8acbf 	.word	0x00d8acbf
 80057a8:	00e4e1bf 	.word	0x00e4e1bf
 80057ac:	00f423ff 	.word	0x00f423ff
 80057b0:	0106737f 	.word	0x0106737f
 80057b4:	011a499f 	.word	0x011a499f
 80057b8:	01312cff 	.word	0x01312cff
 80057bc:	014ca43f 	.word	0x014ca43f
 80057c0:	016e35ff 	.word	0x016e35ff
 80057c4:	01a6ab1f 	.word	0x01a6ab1f
 80057c8:	01e847ff 	.word	0x01e847ff

080057cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f023 0201 	bic.w	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d106      	bne.n	800583c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	e00b      	b.n	8005854 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	e001      	b.n	8005854 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e003      	b.n	800585c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005854:	2032      	movs	r0, #50	; 0x32
 8005856:	f7fc f845 	bl	80018e4 <HAL_Delay>

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005864:	b084      	sub	sp, #16
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e009      	b.n	8005898 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3340      	adds	r3, #64	; 0x40
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	2200      	movs	r2, #0
 8005890:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3301      	adds	r3, #1
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b0e      	cmp	r3, #14
 800589c:	d9f2      	bls.n	8005884 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11c      	bne.n	80058de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b2:	f043 0302 	orr.w	r3, r3, #2
 80058b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	639a      	str	r2, [r3, #56]	; 0x38
 80058dc:	e00b      	b.n	80058f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058fc:	461a      	mov	r2, r3
 80058fe:	2300      	movs	r3, #0
 8005900:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005908:	4619      	mov	r1, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	461a      	mov	r2, r3
 8005912:	680b      	ldr	r3, [r1, #0]
 8005914:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10c      	bne.n	8005936 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005922:	2100      	movs	r1, #0
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f949 	bl	8005bbc <USB_SetDevSpeed>
 800592a:	e008      	b.n	800593e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800592c:	2101      	movs	r1, #1
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f944 	bl	8005bbc <USB_SetDevSpeed>
 8005934:	e003      	b.n	800593e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005936:	2103      	movs	r1, #3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f93f 	bl	8005bbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800593e:	2110      	movs	r1, #16
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f8f3 	bl	8005b2c <USB_FlushTxFifo>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f911 	bl	8005b78 <USB_FlushRxFifo>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	461a      	mov	r2, r3
 8005968:	2300      	movs	r3, #0
 800596a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	461a      	mov	r2, r3
 8005974:	2300      	movs	r3, #0
 8005976:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	461a      	mov	r2, r3
 8005980:	2300      	movs	r3, #0
 8005982:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e043      	b.n	8005a12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800599c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a0:	d118      	bne.n	80059d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	461a      	mov	r2, r3
 80059b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e013      	b.n	80059e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	461a      	mov	r2, r3
 80059cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	e008      	b.n	80059e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	461a      	mov	r2, r3
 80059e2:	2300      	movs	r3, #0
 80059e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	461a      	mov	r2, r3
 8005a06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d3b7      	bcc.n	800598a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	e043      	b.n	8005aa8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a36:	d118      	bne.n	8005a6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	e013      	b.n	8005a7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	461a      	mov	r2, r3
 8005a62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e008      	b.n	8005a7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	461a      	mov	r2, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d3b7      	bcc.n	8005a20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ac2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ad0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f043 0210 	orr.w	r2, r3, #16
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <USB_DevInit+0x2c4>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f043 0208 	orr.w	r2, r3, #8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d107      	bne.n	8005b18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b24:	b004      	add	sp, #16
 8005b26:	4770      	bx	lr
 8005b28:	803c3800 	.word	0x803c3800

08005b2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	019b      	lsls	r3, r3, #6
 8005b3e:	f043 0220 	orr.w	r2, r3, #32
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <USB_FlushTxFifo+0x48>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e006      	b.n	8005b66 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d0f0      	beq.n	8005b46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	00030d40 	.word	0x00030d40

08005b78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2210      	movs	r2, #16
 8005b88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <USB_FlushRxFifo+0x40>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e006      	b.n	8005baa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d0f0      	beq.n	8005b8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	00030d40 	.word	0x00030d40

08005bbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b087      	sub	sp, #28
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0306 	and.w	r3, r3, #6
 8005c06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]
 8005c12:	e00a      	b.n	8005c2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d002      	beq.n	8005c20 <USB_GetDevSpeed+0x32>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b06      	cmp	r3, #6
 8005c1e:	d102      	bne.n	8005c26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c20:	2302      	movs	r3, #2
 8005c22:	75fb      	strb	r3, [r7, #23]
 8005c24:	e001      	b.n	8005c2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c26:	230f      	movs	r3, #15
 8005c28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d13a      	bne.n	8005cca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	2101      	movs	r1, #1
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	68f9      	ldr	r1, [r7, #12]
 8005c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c72:	4313      	orrs	r3, r2
 8005c74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d155      	bne.n	8005d38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	78db      	ldrb	r3, [r3, #3]
 8005ca6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ca8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	059b      	lsls	r3, r3, #22
 8005cae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e036      	b.n	8005d38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd0:	69da      	ldr	r2, [r3, #28]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	2101      	movs	r1, #1
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d11a      	bne.n	8005d38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	78db      	ldrb	r3, [r3, #3]
 8005d1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	4313      	orrs	r3, r2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d161      	bne.n	8005e28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d7a:	d11f      	bne.n	8005dbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ddc:	4013      	ands	r3, r2
 8005dde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	2101      	movs	r1, #1
 8005df2:	fa01 f303 	lsl.w	r3, r1, r3
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e00:	4013      	ands	r3, r2
 8005e02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0159      	lsls	r1, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	440b      	add	r3, r1
 8005e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4b35      	ldr	r3, [pc, #212]	; (8005ef8 <USB_DeactivateEndpoint+0x1b0>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
 8005e26:	e060      	b.n	8005eea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e3e:	d11f      	bne.n	8005e80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	2101      	movs	r1, #1
 8005e92:	fa01 f303 	lsl.w	r3, r1, r3
 8005e96:	041b      	lsls	r3, r3, #16
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	0159      	lsls	r1, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	440b      	add	r3, r1
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <USB_DeactivateEndpoint+0x1b4>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	ec337800 	.word	0xec337800
 8005efc:	eff37800 	.word	0xeff37800

08005f00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	f040 815c 	bne.w	80061da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d132      	bne.n	8005f90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f88:	0cdb      	lsrs	r3, r3, #19
 8005f8a:	04db      	lsls	r3, r3, #19
 8005f8c:	6113      	str	r3, [r2, #16]
 8005f8e:	e074      	b.n	800607a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005faa:	0cdb      	lsrs	r3, r3, #19
 8005fac:	04db      	lsls	r3, r3, #19
 8005fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6959      	ldr	r1, [r3, #20]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	440b      	add	r3, r1
 8005fec:	1e59      	subs	r1, r3, #1
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ff6:	04d9      	lsls	r1, r3, #19
 8005ff8:	4b9d      	ldr	r3, [pc, #628]	; (8006270 <USB_EPStartXfer+0x370>)
 8005ffa:	400b      	ands	r3, r1
 8005ffc:	69b9      	ldr	r1, [r7, #24]
 8005ffe:	0148      	lsls	r0, r1, #5
 8006000:	69f9      	ldr	r1, [r7, #28]
 8006002:	4401      	add	r1, r0
 8006004:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006008:	4313      	orrs	r3, r2
 800600a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006022:	69b9      	ldr	r1, [r7, #24]
 8006024:	0148      	lsls	r0, r1, #5
 8006026:	69f9      	ldr	r1, [r7, #28]
 8006028:	4401      	add	r1, r0
 800602a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800602e:	4313      	orrs	r3, r2
 8006030:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	78db      	ldrb	r3, [r3, #3]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d11f      	bne.n	800607a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006058:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006078:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d14b      	bne.n	8006118 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d009      	beq.n	800609c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	461a      	mov	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d128      	bne.n	80060f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d110      	bne.n	80060d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	e00f      	b.n	80060f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006110:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e12f      	b.n	8006378 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006136:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d015      	beq.n	800616c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8117 	beq.w	8006378 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	2101      	movs	r1, #1
 800615c:	fa01 f303 	lsl.w	r3, r1, r3
 8006160:	69f9      	ldr	r1, [r7, #28]
 8006162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006166:	4313      	orrs	r3, r2
 8006168:	634b      	str	r3, [r1, #52]	; 0x34
 800616a:	e105      	b.n	8006378 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d110      	bne.n	800619e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006196:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	e00f      	b.n	80061be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	b298      	uxth	r0, r3
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4603      	mov	r3, r0
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fa2b 	bl	800662e <USB_WritePacket>
 80061d8:	e0ce      	b.n	8006378 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f4:	0cdb      	lsrs	r3, r3, #19
 80061f6:	04db      	lsls	r3, r3, #19
 80061f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006214:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006218:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800621c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d126      	bne.n	8006274 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800623c:	69b9      	ldr	r1, [r7, #24]
 800623e:	0148      	lsls	r0, r1, #5
 8006240:	69f9      	ldr	r1, [r7, #28]
 8006242:	4401      	add	r1, r0
 8006244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006248:	4313      	orrs	r3, r2
 800624a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800626a:	6113      	str	r3, [r2, #16]
 800626c:	e036      	b.n	80062dc <USB_EPStartXfer+0x3dc>
 800626e:	bf00      	nop
 8006270:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	695a      	ldr	r2, [r3, #20]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4413      	add	r3, r2
 800627e:	1e5a      	subs	r2, r3, #1
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	8afb      	ldrh	r3, [r7, #22]
 800629a:	04d9      	lsls	r1, r3, #19
 800629c:	4b39      	ldr	r3, [pc, #228]	; (8006384 <USB_EPStartXfer+0x484>)
 800629e:	400b      	ands	r3, r1
 80062a0:	69b9      	ldr	r1, [r7, #24]
 80062a2:	0148      	lsls	r0, r1, #5
 80062a4:	69f9      	ldr	r1, [r7, #28]
 80062a6:	4401      	add	r1, r0
 80062a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062ac:	4313      	orrs	r3, r2
 80062ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	8af9      	ldrh	r1, [r7, #22]
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062cc:	69b9      	ldr	r1, [r7, #24]
 80062ce:	0148      	lsls	r0, r1, #5
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	4401      	add	r1, r0
 80062d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062d8:	4313      	orrs	r3, r2
 80062da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d10d      	bne.n	80062fe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68d9      	ldr	r1, [r3, #12]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	460a      	mov	r2, r1
 80062fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	78db      	ldrb	r3, [r3, #3]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d128      	bne.n	8006358 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d110      	bne.n	8006338 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e00f      	b.n	8006358 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006356:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	1ff80000 	.word	0x1ff80000

08006388 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	f040 80cd 	bne.w	8006544 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d132      	bne.n	8006418 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006410:	0cdb      	lsrs	r3, r3, #19
 8006412:	04db      	lsls	r3, r3, #19
 8006414:	6113      	str	r3, [r2, #16]
 8006416:	e04e      	b.n	80064b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	440a      	add	r2, r1
 800642e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006432:	0cdb      	lsrs	r3, r3, #19
 8006434:	04db      	lsls	r3, r3, #19
 8006436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006452:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006456:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800645a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	d903      	bls.n	8006470 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a6:	6939      	ldr	r1, [r7, #16]
 80064a8:	0148      	lsls	r0, r1, #5
 80064aa:	6979      	ldr	r1, [r7, #20]
 80064ac:	4401      	add	r1, r0
 80064ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064b2:	4313      	orrs	r3, r2
 80064b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d11e      	bne.n	80064fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	461a      	mov	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e092      	b.n	8006620 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	440a      	add	r2, r1
 8006510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006518:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d07e      	beq.n	8006620 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	2101      	movs	r1, #1
 8006534:	fa01 f303 	lsl.w	r3, r1, r3
 8006538:	6979      	ldr	r1, [r7, #20]
 800653a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653e:	4313      	orrs	r3, r2
 8006540:	634b      	str	r3, [r1, #52]	; 0x34
 8006542:	e06d      	b.n	8006620 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	440a      	add	r2, r1
 800655a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655e:	0cdb      	lsrs	r3, r3, #19
 8006560:	04db      	lsls	r3, r3, #19
 8006562:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006582:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006586:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	691a      	ldr	r2, [r3, #16]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ce:	6939      	ldr	r1, [r7, #16]
 80065d0:	0148      	lsls	r0, r1, #5
 80065d2:	6979      	ldr	r1, [r7, #20]
 80065d4:	4401      	add	r1, r0
 80065d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065da:	4313      	orrs	r3, r2
 80065dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d10d      	bne.n	8006600 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	68d9      	ldr	r1, [r3, #12]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	460a      	mov	r2, r1
 80065fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800661e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800662e:	b480      	push	{r7}
 8006630:	b089      	sub	sp, #36	; 0x24
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	4611      	mov	r1, r2
 800663a:	461a      	mov	r2, r3
 800663c:	460b      	mov	r3, r1
 800663e:	71fb      	strb	r3, [r7, #7]
 8006640:	4613      	mov	r3, r2
 8006642:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800664c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006650:	2b00      	cmp	r3, #0
 8006652:	d11a      	bne.n	800668a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006654:	88bb      	ldrh	r3, [r7, #4]
 8006656:	3303      	adds	r3, #3
 8006658:	089b      	lsrs	r3, r3, #2
 800665a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	e00f      	b.n	8006682 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	031a      	lsls	r2, r3, #12
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666e:	461a      	mov	r2, r3
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	3304      	adds	r3, #4
 800667a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	3301      	adds	r3, #1
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	429a      	cmp	r2, r3
 8006688:	d3eb      	bcc.n	8006662 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3724      	adds	r7, #36	; 0x24
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006698:	b480      	push	{r7}
 800669a:	b089      	sub	sp, #36	; 0x24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	3303      	adds	r3, #3
 80066b2:	089b      	lsrs	r3, r3, #2
 80066b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	e00b      	b.n	80066d4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	3304      	adds	r3, #4
 80066cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3301      	adds	r3, #1
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d3ef      	bcc.n	80066bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80066dc:	69fb      	ldr	r3, [r7, #28]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3724      	adds	r7, #36	; 0x24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d12c      	bne.n	8006760 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	db12      	blt.n	800673e <USB_EPSetStall+0x54>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00f      	beq.n	800673e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800673c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e02b      	b.n	80067b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	db12      	blt.n	8006798 <USB_EPSetStall+0xae>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00f      	beq.n	8006798 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006792:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006796:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d128      	bne.n	8006834 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006800:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	78db      	ldrb	r3, [r3, #3]
 8006806:	2b03      	cmp	r3, #3
 8006808:	d003      	beq.n	8006812 <USB_EPClearStall+0x4c>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	78db      	ldrb	r3, [r3, #3]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d138      	bne.n	8006884 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e027      	b.n	8006884 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006852:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	78db      	ldrb	r3, [r3, #3]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d003      	beq.n	8006864 <USB_EPClearStall+0x9e>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	78db      	ldrb	r3, [r3, #3]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d10f      	bne.n	8006884 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006882:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068f8:	f023 0303 	bic.w	r3, r3, #3
 80068fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800690c:	f023 0302 	bic.w	r3, r3, #2
 8006910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800694e:	f043 0302 	orr.w	r3, r3, #2
 8006952:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4013      	ands	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800697a:	68fb      	ldr	r3, [r7, #12]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4013      	ands	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	0c1b      	lsrs	r3, r3, #16
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	4013      	ands	r3, r2
 80069de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	b29b      	uxth	r3, r3
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5c:	01db      	lsls	r3, r3, #7
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4013      	ands	r3, r2
 8006a78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	f003 0301 	and.w	r3, r3, #1
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006abe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ac2:	f023 0307 	bic.w	r3, r3, #7
 8006ac6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ada:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	460b      	mov	r3, r1
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	333c      	adds	r3, #60	; 0x3c
 8006b02:	3304      	adds	r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	4a26      	ldr	r2, [pc, #152]	; (8006ba4 <USB_EP0_OutStart+0xb8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d90a      	bls.n	8006b26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b20:	d101      	bne.n	8006b26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e037      	b.n	8006b96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b54:	f043 0318 	orr.w	r3, r3, #24
 8006b58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d10f      	bne.n	8006b94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	4f54300a 	.word	0x4f54300a

08006ba8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <USB_CoreReset+0x64>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e01b      	b.n	8006bfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	daf2      	bge.n	8006bb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f043 0201 	orr.w	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4a09      	ldr	r2, [pc, #36]	; (8006c0c <USB_CoreReset+0x64>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d901      	bls.n	8006bf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e006      	b.n	8006bfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d0f0      	beq.n	8006bde <USB_CoreReset+0x36>

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	00030d40 	.word	0x00030d40

08006c10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c20:	f002 f940 	bl	8008ea4 <malloc>
 8006c24:	4603      	mov	r3, r0
 8006c26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d105      	bne.n	8006c3a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c36:	2302      	movs	r3, #2
 8006c38:	e066      	b.n	8006d08 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7c1b      	ldrb	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d119      	bne.n	8006c7e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c4e:	2202      	movs	r2, #2
 8006c50:	2181      	movs	r1, #129	; 0x81
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 ffad 	bl	8008bb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c62:	2202      	movs	r2, #2
 8006c64:	2101      	movs	r1, #1
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 ffa3 	bl	8008bb2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2210      	movs	r2, #16
 8006c78:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c7c:	e016      	b.n	8006cac <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c7e:	2340      	movs	r3, #64	; 0x40
 8006c80:	2202      	movs	r2, #2
 8006c82:	2181      	movs	r1, #129	; 0x81
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 ff94 	bl	8008bb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c90:	2340      	movs	r3, #64	; 0x40
 8006c92:	2202      	movs	r2, #2
 8006c94:	2101      	movs	r1, #1
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 ff8b 	bl	8008bb2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cac:	2308      	movs	r3, #8
 8006cae:	2203      	movs	r2, #3
 8006cb0:	2182      	movs	r1, #130	; 0x82
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 ff7d 	bl	8008bb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	7c1b      	ldrb	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cec:	2101      	movs	r1, #1
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f002 f84e 	bl	8008d90 <USBD_LL_PrepareReceive>
 8006cf4:	e007      	b.n	8006d06 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cfc:	2340      	movs	r3, #64	; 0x40
 8006cfe:	2101      	movs	r1, #1
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 f845 	bl	8008d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d20:	2181      	movs	r1, #129	; 0x81
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 ff6b 	bl	8008bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 ff64 	bl	8008bfe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d3e:	2182      	movs	r1, #130	; 0x82
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 ff5c 	bl	8008bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d70:	4618      	mov	r0, r3
 8006d72:	f002 f89f 	bl	8008eb4 <free>
    pdev->pClassData = NULL;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d98:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d03a      	beq.n	8006e28 <USBD_CDC_Setup+0xa0>
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	f040 8097 	bne.w	8006ee6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	88db      	ldrh	r3, [r3, #6]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d029      	beq.n	8006e14 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da11      	bge.n	8006dee <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006dd6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	88d2      	ldrh	r2, [r2, #6]
 8006ddc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dde:	6939      	ldr	r1, [r7, #16]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	88db      	ldrh	r3, [r3, #6]
 8006de4:	461a      	mov	r2, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fa9d 	bl	8008326 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006dec:	e082      	b.n	8006ef4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	785a      	ldrb	r2, [r3, #1]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	88db      	ldrh	r3, [r3, #6]
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e04:	6939      	ldr	r1, [r7, #16]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	88db      	ldrh	r3, [r3, #6]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fab6 	bl	800837e <USBD_CtlPrepareRx>
    break;
 8006e12:	e06f      	b.n	8006ef4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	7850      	ldrb	r0, [r2, #1]
 8006e20:	2200      	movs	r2, #0
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	4798      	blx	r3
    break;
 8006e26:	e065      	b.n	8006ef4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b0b      	cmp	r3, #11
 8006e2e:	d84f      	bhi.n	8006ed0 <USBD_CDC_Setup+0x148>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <USBD_CDC_Setup+0xb0>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e69 	.word	0x08006e69
 8006e3c:	08006edf 	.word	0x08006edf
 8006e40:	08006ed1 	.word	0x08006ed1
 8006e44:	08006ed1 	.word	0x08006ed1
 8006e48:	08006ed1 	.word	0x08006ed1
 8006e4c:	08006ed1 	.word	0x08006ed1
 8006e50:	08006ed1 	.word	0x08006ed1
 8006e54:	08006ed1 	.word	0x08006ed1
 8006e58:	08006ed1 	.word	0x08006ed1
 8006e5c:	08006ed1 	.word	0x08006ed1
 8006e60:	08006e91 	.word	0x08006e91
 8006e64:	08006eb9 	.word	0x08006eb9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d107      	bne.n	8006e82 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e72:	f107 030c 	add.w	r3, r7, #12
 8006e76:	2202      	movs	r2, #2
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 fa53 	bl	8008326 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e80:	e030      	b.n	8006ee4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f9dd 	bl	8008244 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e8e:	e029      	b.n	8006ee4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d107      	bne.n	8006eaa <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e9a:	f107 030f 	add.w	r3, r7, #15
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 fa3f 	bl	8008326 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ea8:	e01c      	b.n	8006ee4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f9c9 	bl	8008244 <USBD_CtlError>
        ret = USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb6:	e015      	b.n	8006ee4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d00f      	beq.n	8006ee2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 f9bd 	bl	8008244 <USBD_CtlError>
        ret = USBD_FAIL;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ece:	e008      	b.n	8006ee2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f9b6 	bl	8008244 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	75fb      	strb	r3, [r7, #23]
      break;
 8006edc:	e002      	b.n	8006ee4 <USBD_CDC_Setup+0x15c>
      break;
 8006ede:	bf00      	nop
 8006ee0:	e008      	b.n	8006ef4 <USBD_CDC_Setup+0x16c>
      break;
 8006ee2:	bf00      	nop
    }
    break;
 8006ee4:	e006      	b.n	8006ef4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f9ab 	bl	8008244 <USBD_CtlError>
    ret = USBD_FAIL;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	75fb      	strb	r3, [r7, #23]
    break;
 8006ef2:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop

08006f00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e049      	b.n	8006fb6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	3318      	adds	r3, #24
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d029      	beq.n	8006f94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	3318      	adds	r3, #24
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	78f9      	ldrb	r1, [r7, #3]
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	460b      	mov	r3, r1
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	1a5b      	subs	r3, r3, r1
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4403      	add	r3, r0
 8006f60:	3344      	adds	r3, #68	; 0x44
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f68:	fb03 f301 	mul.w	r3, r3, r1
 8006f6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d110      	bne.n	8006f94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f72:	78fa      	ldrb	r2, [r7, #3]
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	3318      	adds	r3, #24
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f86:	78f9      	ldrb	r1, [r7, #3]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fede 	bl	8008d4e <USBD_LL_Transmit>
 8006f92:	e00f      	b.n	8006fb4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e015      	b.n	800700c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fef4 	bl	8008dd2 <USBD_LL_GetRxDataSize>
 8006fea:	4602      	mov	r2, r0
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007006:	4611      	mov	r1, r2
 8007008:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007022:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d015      	beq.n	800705a <USBD_CDC_EP0_RxReady+0x46>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007034:	2bff      	cmp	r3, #255	; 0xff
 8007036:	d010      	beq.n	800705a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007046:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800704e:	b292      	uxth	r2, r2
 8007050:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2243      	movs	r2, #67	; 0x43
 8007070:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007072:	4b03      	ldr	r3, [pc, #12]	; (8007080 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000094 	.word	0x20000094

08007084 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2243      	movs	r2, #67	; 0x43
 8007090:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	20000050 	.word	0x20000050

080070a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2243      	movs	r2, #67	; 0x43
 80070b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	200000d8 	.word	0x200000d8

080070c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	220a      	movs	r2, #10
 80070d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070d2:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	2000000c 	.word	0x2000000c

080070e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e004      	b.n	8007102 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800710e:	b480      	push	{r7}
 8007110:	b087      	sub	sp, #28
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007120:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007150:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007176:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007178:	2301      	movs	r3, #1
 800717a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007186:	2303      	movs	r3, #3
 8007188:	e01a      	b.n	80071c0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007190:	2b00      	cmp	r3, #0
 8007192:	d114      	bne.n	80071be <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2201      	movs	r2, #1
 8007198:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071b2:	2181      	movs	r1, #129	; 0x81
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fdca 	bl	8008d4e <USBD_LL_Transmit>

    ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071be:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e016      	b.n	8007214 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7c1b      	ldrb	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f8:	2101      	movs	r1, #1
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fdc8 	bl	8008d90 <USBD_LL_PrepareReceive>
 8007200:	e007      	b.n	8007212 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	2101      	movs	r1, #1
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 fdbf 	bl	8008d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	e025      	b.n	8007280 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	79fa      	ldrb	r2, [r7, #7]
 8007272:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f001 fc35 	bl	8008ae4 <USBD_LL_Init>
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	e010      	b.n	80072c2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	f107 020e 	add.w	r2, r7, #14
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
 80072b8:	4602      	mov	r2, r0
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fc52 	bl	8008b7c <USBD_LL_Start>
 80072d8:	4603      	mov	r3, r0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	4611      	mov	r1, r2
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	4611      	mov	r1, r2
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
  }

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 ff2c 	bl	80081d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	2b01      	cmp	r3, #1
 800739a:	d00e      	beq.n	80073ba <USBD_LL_SetupStage+0x5a>
 800739c:	2b01      	cmp	r3, #1
 800739e:	d302      	bcc.n	80073a6 <USBD_LL_SetupStage+0x46>
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d014      	beq.n	80073ce <USBD_LL_SetupStage+0x6e>
 80073a4:	e01d      	b.n	80073e2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa18 	bl	80077e4 <USBD_StdDevReq>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]
      break;
 80073b8:	e020      	b.n	80073fc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa7c 	bl	80078c0 <USBD_StdItfReq>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	e016      	b.n	80073fc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fab8 	bl	800794c <USBD_StdEPReq>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
      break;
 80073e0:	e00c      	b.n	80073fc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fc23 	bl	8008c3c <USBD_LL_StallEP>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
      break;
 80073fa:	bf00      	nop
  }

  return ret;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	460b      	mov	r3, r1
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d137      	bne.n	800748a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007420:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007428:	2b03      	cmp	r3, #3
 800742a:	d14a      	bne.n	80074c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	429a      	cmp	r2, r3
 8007436:	d913      	bls.n	8007460 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	1ad2      	subs	r2, r2, r3
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	4293      	cmp	r3, r2
 8007450:	bf28      	it	cs
 8007452:	4613      	movcs	r3, r2
 8007454:	461a      	mov	r2, r3
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 ffad 	bl	80083b8 <USBD_CtlContinueRx>
 800745e:	e030      	b.n	80074c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007472:	2b03      	cmp	r3, #3
 8007474:	d105      	bne.n	8007482 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 ffa9 	bl	80083da <USBD_CtlSendStatus>
 8007488:	e01b      	b.n	80074c2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d013      	beq.n	80074be <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800749c:	2b03      	cmp	r3, #3
 800749e:	d10e      	bne.n	80074be <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	7afa      	ldrb	r2, [r7, #11]
 80074aa:	4611      	mov	r1, r2
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	4798      	blx	r3
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	e002      	b.n	80074c4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074be:	2303      	movs	r3, #3
 80074c0:	e000      	b.n	80074c4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	460b      	mov	r3, r1
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d16a      	bne.n	80075b6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3314      	adds	r3, #20
 80074e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d155      	bne.n	800759c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d914      	bls.n	8007526 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	461a      	mov	r2, r3
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 ff22 	bl	800835c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007518:	2300      	movs	r3, #0
 800751a:	2200      	movs	r2, #0
 800751c:	2100      	movs	r1, #0
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f001 fc36 	bl	8008d90 <USBD_LL_PrepareReceive>
 8007524:	e03a      	b.n	800759c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	429a      	cmp	r2, r3
 8007530:	d11c      	bne.n	800756c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800753a:	429a      	cmp	r2, r3
 800753c:	d316      	bcc.n	800756c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007548:	429a      	cmp	r2, r3
 800754a:	d20f      	bcs.n	800756c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800754c:	2200      	movs	r2, #0
 800754e:	2100      	movs	r1, #0
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 ff03 	bl	800835c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800755e:	2300      	movs	r3, #0
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f001 fc13 	bl	8008d90 <USBD_LL_PrepareReceive>
 800756a:	e017      	b.n	800759c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800757e:	2b03      	cmp	r3, #3
 8007580:	d105      	bne.n	800758e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800758e:	2180      	movs	r1, #128	; 0x80
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f001 fb53 	bl	8008c3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 ff32 	bl	8008400 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d123      	bne.n	80075ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fe9b 	bl	80072e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075b4:	e01b      	b.n	80075ee <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d013      	beq.n	80075ea <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d10e      	bne.n	80075ea <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	7afa      	ldrb	r2, [r7, #11]
 80075d6:	4611      	mov	r1, r2
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	4798      	blx	r3
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	e002      	b.n	80075f0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e000      	b.n	80075f0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007624:	2b00      	cmp	r3, #0
 8007626:	d009      	beq.n	800763c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6852      	ldr	r2, [r2, #4]
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	4611      	mov	r1, r2
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800763c:	2340      	movs	r3, #64	; 0x40
 800763e:	2200      	movs	r2, #0
 8007640:	2100      	movs	r1, #0
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fab5 	bl	8008bb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2240      	movs	r2, #64	; 0x40
 8007654:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007658:	2340      	movs	r3, #64	; 0x40
 800765a:	2200      	movs	r2, #0
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 faa7 	bl	8008bb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2240      	movs	r2, #64	; 0x40
 800766e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	78fa      	ldrb	r2, [r7, #3]
 800768a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2204      	movs	r2, #4
 80076b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d105      	bne.n	80076e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d10b      	bne.n	800771a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6852      	ldr	r2, [r2, #4]
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	4611      	mov	r1, r2
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
  }

  return USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b087      	sub	sp, #28
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	3301      	adds	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077c4:	8a3b      	ldrh	r3, [r7, #16]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	b21a      	sxth	r2, r3
 80077ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	b21b      	sxth	r3, r3
 80077d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077d4:	89fb      	ldrh	r3, [r7, #14]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d004      	beq.n	8007808 <USBD_StdDevReq+0x24>
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d002      	beq.n	8007808 <USBD_StdDevReq+0x24>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <USBD_StdDevReq+0x38>
 8007806:	e050      	b.n	80078aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]
    break;
 800781a:	e04b      	b.n	80078b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	2b09      	cmp	r3, #9
 8007822:	d83c      	bhi.n	800789e <USBD_StdDevReq+0xba>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <USBD_StdDevReq+0x48>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	08007881 	.word	0x08007881
 8007830:	08007895 	.word	0x08007895
 8007834:	0800789f 	.word	0x0800789f
 8007838:	0800788b 	.word	0x0800788b
 800783c:	0800789f 	.word	0x0800789f
 8007840:	0800785f 	.word	0x0800785f
 8007844:	08007855 	.word	0x08007855
 8007848:	0800789f 	.word	0x0800789f
 800784c:	08007877 	.word	0x08007877
 8007850:	08007869 	.word	0x08007869
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9ce 	bl	8007bf8 <USBD_GetDescriptor>
      break;
 800785c:	e024      	b.n	80078a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fb33 	bl	8007ecc <USBD_SetAddress>
      break;
 8007866:	e01f      	b.n	80078a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fb70 	bl	8007f50 <USBD_SetConfig>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
      break;
 8007874:	e018      	b.n	80078a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fc0d 	bl	8008098 <USBD_GetConfig>
      break;
 800787e:	e013      	b.n	80078a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fc3c 	bl	8008100 <USBD_GetStatus>
      break;
 8007888:	e00e      	b.n	80078a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fc6a 	bl	8008166 <USBD_SetFeature>
      break;
 8007892:	e009      	b.n	80078a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fc79 	bl	800818e <USBD_ClrFeature>
      break;
 800789c:	e004      	b.n	80078a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fccf 	bl	8008244 <USBD_CtlError>
      break;
 80078a6:	bf00      	nop
    }
    break;
 80078a8:	e004      	b.n	80078b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fcc9 	bl	8008244 <USBD_CtlError>
    break;
 80078b2:	bf00      	nop
  }

  return ret;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop

080078c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d003      	beq.n	80078e2 <USBD_StdItfReq+0x22>
 80078da:	2b40      	cmp	r3, #64	; 0x40
 80078dc:	d001      	beq.n	80078e2 <USBD_StdItfReq+0x22>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d12a      	bne.n	8007938 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e8:	3b01      	subs	r3, #1
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d81d      	bhi.n	800792a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	889b      	ldrh	r3, [r3, #4]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d813      	bhi.n	8007920 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	88db      	ldrh	r3, [r3, #6]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d110      	bne.n	8007934 <USBD_StdItfReq+0x74>
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10d      	bne.n	8007934 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fd5e 	bl	80083da <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800791e:	e009      	b.n	8007934 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fc8e 	bl	8008244 <USBD_CtlError>
      break;
 8007928:	e004      	b.n	8007934 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc89 	bl	8008244 <USBD_CtlError>
      break;
 8007932:	e000      	b.n	8007936 <USBD_StdItfReq+0x76>
      break;
 8007934:	bf00      	nop
    }
    break;
 8007936:	e004      	b.n	8007942 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fc82 	bl	8008244 <USBD_CtlError>
    break;
 8007940:	bf00      	nop
  }

  return ret;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	889b      	ldrh	r3, [r3, #4]
 800795e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007968:	2b20      	cmp	r3, #32
 800796a:	d004      	beq.n	8007976 <USBD_StdEPReq+0x2a>
 800796c:	2b40      	cmp	r3, #64	; 0x40
 800796e:	d002      	beq.n	8007976 <USBD_StdEPReq+0x2a>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <USBD_StdEPReq+0x3e>
 8007974:	e135      	b.n	8007be2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
    break;
 8007988:	e130      	b.n	8007bec <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d03e      	beq.n	8007a10 <USBD_StdEPReq+0xc4>
 8007992:	2b03      	cmp	r3, #3
 8007994:	d002      	beq.n	800799c <USBD_StdEPReq+0x50>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d077      	beq.n	8007a8a <USBD_StdEPReq+0x13e>
 800799a:	e11c      	b.n	8007bd6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d002      	beq.n	80079ac <USBD_StdEPReq+0x60>
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d015      	beq.n	80079d6 <USBD_StdEPReq+0x8a>
 80079aa:	e02b      	b.n	8007a04 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00c      	beq.n	80079cc <USBD_StdEPReq+0x80>
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b80      	cmp	r3, #128	; 0x80
 80079b6:	d009      	beq.n	80079cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f93d 	bl	8008c3c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079c2:	2180      	movs	r1, #128	; 0x80
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f939 	bl	8008c3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079ca:	e020      	b.n	8007a0e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fc38 	bl	8008244 <USBD_CtlError>
        break;
 80079d4:	e01b      	b.n	8007a0e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10e      	bne.n	80079fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_StdEPReq+0xb0>
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d008      	beq.n	80079fc <USBD_StdEPReq+0xb0>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	88db      	ldrh	r3, [r3, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d104      	bne.n	80079fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f920 	bl	8008c3c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fcec 	bl	80083da <USBD_CtlSendStatus>

        break;
 8007a02:	e004      	b.n	8007a0e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fc1c 	bl	8008244 <USBD_CtlError>
        break;
 8007a0c:	bf00      	nop
      }
      break;
 8007a0e:	e0e7      	b.n	8007be0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d002      	beq.n	8007a20 <USBD_StdEPReq+0xd4>
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d015      	beq.n	8007a4a <USBD_StdEPReq+0xfe>
 8007a1e:	e02d      	b.n	8007a7c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00c      	beq.n	8007a40 <USBD_StdEPReq+0xf4>
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b80      	cmp	r3, #128	; 0x80
 8007a2a:	d009      	beq.n	8007a40 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f903 	bl	8008c3c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a36:	2180      	movs	r1, #128	; 0x80
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 f8ff 	bl	8008c3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a3e:	e023      	b.n	8007a88 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fbfe 	bl	8008244 <USBD_CtlError>
        break;
 8007a48:	e01e      	b.n	8007a88 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	885b      	ldrh	r3, [r3, #2]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d119      	bne.n	8007a86 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f90a 	bl	8008c7a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fcb7 	bl	80083da <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
        }
        break;
 8007a7a:	e004      	b.n	8007a86 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fbe0 	bl	8008244 <USBD_CtlError>
        break;
 8007a84:	e000      	b.n	8007a88 <USBD_StdEPReq+0x13c>
        break;
 8007a86:	bf00      	nop
      }
      break;
 8007a88:	e0aa      	b.n	8007be0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d002      	beq.n	8007a9a <USBD_StdEPReq+0x14e>
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d032      	beq.n	8007afe <USBD_StdEPReq+0x1b2>
 8007a98:	e097      	b.n	8007bca <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <USBD_StdEPReq+0x164>
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b80      	cmp	r3, #128	; 0x80
 8007aa4:	d004      	beq.n	8007ab0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fbcb 	bl	8008244 <USBD_CtlError>
          break;
 8007aae:	e091      	b.n	8007bd4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	da0b      	bge.n	8007ad0 <USBD_StdEPReq+0x184>
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	3310      	adds	r3, #16
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	4413      	add	r3, r2
 8007acc:	3304      	adds	r3, #4
 8007ace:	e00b      	b.n	8007ae8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2202      	movs	r2, #2
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fc15 	bl	8008326 <USBD_CtlSendData>
        break;
 8007afc:	e06a      	b.n	8007bd4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	da11      	bge.n	8007b2a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	f003 020f 	and.w	r2, r3, #15
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	3324      	adds	r3, #36	; 0x24
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d117      	bne.n	8007b50 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fb8e 	bl	8008244 <USBD_CtlError>
            break;
 8007b28:	e054      	b.n	8007bd4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d104      	bne.n	8007b50 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fb7b 	bl	8008244 <USBD_CtlError>
            break;
 8007b4e:	e041      	b.n	8007bd4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	da0b      	bge.n	8007b70 <USBD_StdEPReq+0x224>
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	3310      	adds	r3, #16
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	e00b      	b.n	8007b88 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	4413      	add	r3, r2
 8007b86:	3304      	adds	r3, #4
 8007b88:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <USBD_StdEPReq+0x24a>
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d103      	bne.n	8007b9e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e00e      	b.n	8007bbc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 f888 	bl	8008cb8 <USBD_LL_IsStallEP>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e002      	b.n	8007bbc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fbaf 	bl	8008326 <USBD_CtlSendData>
          break;
 8007bc8:	e004      	b.n	8007bd4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fb39 	bl	8008244 <USBD_CtlError>
        break;
 8007bd2:	bf00      	nop
      }
      break;
 8007bd4:	e004      	b.n	8007be0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fb33 	bl	8008244 <USBD_CtlError>
      break;
 8007bde:	bf00      	nop
    }
    break;
 8007be0:	e004      	b.n	8007bec <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fb2d 	bl	8008244 <USBD_CtlError>
    break;
 8007bea:	bf00      	nop
  }

  return ret;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	885b      	ldrh	r3, [r3, #2]
 8007c12:	0a1b      	lsrs	r3, r3, #8
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	2b06      	cmp	r3, #6
 8007c1a:	f200 8128 	bhi.w	8007e6e <USBD_GetDescriptor+0x276>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <USBD_GetDescriptor+0x2c>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	08007c59 	.word	0x08007c59
 8007c2c:	08007c99 	.word	0x08007c99
 8007c30:	08007e6f 	.word	0x08007e6f
 8007c34:	08007e6f 	.word	0x08007e6f
 8007c38:	08007e0f 	.word	0x08007e0f
 8007c3c:	08007e3b 	.word	0x08007e3b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	7c12      	ldrb	r2, [r2, #16]
 8007c4c:	f107 0108 	add.w	r1, r7, #8
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	60f8      	str	r0, [r7, #12]
    break;
 8007c56:	e112      	b.n	8007e7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	7c1b      	ldrb	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10d      	bne.n	8007c7c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f107 0208 	add.w	r2, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3301      	adds	r3, #1
 8007c76:	2202      	movs	r2, #2
 8007c78:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007c7a:	e100      	b.n	8007e7e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	f107 0208 	add.w	r2, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	2202      	movs	r2, #2
 8007c94:	701a      	strb	r2, [r3, #0]
    break;
 8007c96:	e0f2      	b.n	8007e7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	885b      	ldrh	r3, [r3, #2]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b05      	cmp	r3, #5
 8007ca0:	f200 80ac 	bhi.w	8007dfc <USBD_GetDescriptor+0x204>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <USBD_GetDescriptor+0xb4>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007cf9 	.word	0x08007cf9
 8007cb4:	08007d2d 	.word	0x08007d2d
 8007cb8:	08007d61 	.word	0x08007d61
 8007cbc:	08007d95 	.word	0x08007d95
 8007cc0:	08007dc9 	.word	0x08007dc9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	7c12      	ldrb	r2, [r2, #16]
 8007cdc:	f107 0108 	add.w	r1, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ce6:	e091      	b.n	8007e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 faaa 	bl	8008244 <USBD_CtlError>
        err++;
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	72fb      	strb	r3, [r7, #11]
      break;
 8007cf6:	e089      	b.n	8007e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7c12      	ldrb	r2, [r2, #16]
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
 8007d18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d1a:	e077      	b.n	8007e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa90 	bl	8008244 <USBD_CtlError>
        err++;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	3301      	adds	r3, #1
 8007d28:	72fb      	strb	r3, [r7, #11]
      break;
 8007d2a:	e06f      	b.n	8007e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d4e:	e05d      	b.n	8007e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa76 	bl	8008244 <USBD_CtlError>
        err++;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d5e:	e055      	b.n	8007e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7c12      	ldrb	r2, [r2, #16]
 8007d78:	f107 0108 	add.w	r1, r7, #8
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4798      	blx	r3
 8007d80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d82:	e043      	b.n	8007e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa5c 	bl	8008244 <USBD_CtlError>
        err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
      break;
 8007d92:	e03b      	b.n	8007e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	7c12      	ldrb	r2, [r2, #16]
 8007dac:	f107 0108 	add.w	r1, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007db6:	e029      	b.n	8007e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa42 	bl	8008244 <USBD_CtlError>
        err++;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	72fb      	strb	r3, [r7, #11]
      break;
 8007dc6:	e021      	b.n	8007e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dea:	e00f      	b.n	8007e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa28 	bl	8008244 <USBD_CtlError>
        err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
      break;
 8007dfa:	e007      	b.n	8007e0c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa20 	bl	8008244 <USBD_CtlError>
      err++;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	3301      	adds	r3, #1
 8007e08:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e0a:	bf00      	nop
    }
    break;
 8007e0c:	e037      	b.n	8007e7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	7c1b      	ldrb	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	f107 0208 	add.w	r2, r7, #8
 8007e22:	4610      	mov	r0, r2
 8007e24:	4798      	blx	r3
 8007e26:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e28:	e029      	b.n	8007e7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa09 	bl	8008244 <USBD_CtlError>
      err++;
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	3301      	adds	r3, #1
 8007e36:	72fb      	strb	r3, [r7, #11]
    break;
 8007e38:	e021      	b.n	8007e7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	7c1b      	ldrb	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10d      	bne.n	8007e5e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	f107 0208 	add.w	r2, r7, #8
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4798      	blx	r3
 8007e52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3301      	adds	r3, #1
 8007e58:	2207      	movs	r2, #7
 8007e5a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e5c:	e00f      	b.n	8007e7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f9ef 	bl	8008244 <USBD_CtlError>
      err++;
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	72fb      	strb	r3, [r7, #11]
    break;
 8007e6c:	e007      	b.n	8007e7e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f9e7 	bl	8008244 <USBD_CtlError>
    err++;
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	72fb      	strb	r3, [r7, #11]
    break;
 8007e7c:	bf00      	nop
  }

  if (err != 0U)
 8007e7e:	7afb      	ldrb	r3, [r7, #11]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11e      	bne.n	8007ec2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	88db      	ldrh	r3, [r3, #6]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d016      	beq.n	8007eba <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007e8c:	893b      	ldrh	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00e      	beq.n	8007eb0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	88da      	ldrh	r2, [r3, #6]
 8007e96:	893b      	ldrh	r3, [r7, #8]
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	bf28      	it	cs
 8007e9c:	4613      	movcs	r3, r2
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ea2:	893b      	ldrh	r3, [r7, #8]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fa3c 	bl	8008326 <USBD_CtlSendData>
 8007eae:	e009      	b.n	8007ec4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f9c6 	bl	8008244 <USBD_CtlError>
 8007eb8:	e004      	b.n	8007ec4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa8d 	bl	80083da <USBD_CtlSendStatus>
 8007ec0:	e000      	b.n	8007ec4 <USBD_GetDescriptor+0x2cc>
    return;
 8007ec2:	bf00      	nop
    }
  }
}
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop

08007ecc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	889b      	ldrh	r3, [r3, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d130      	bne.n	8007f40 <USBD_SetAddress+0x74>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	88db      	ldrh	r3, [r3, #6]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d12c      	bne.n	8007f40 <USBD_SetAddress+0x74>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	885b      	ldrh	r3, [r3, #2]
 8007eea:	2b7f      	cmp	r3, #127	; 0x7f
 8007eec:	d828      	bhi.n	8007f40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ef8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d104      	bne.n	8007f0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f99c 	bl	8008244 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0c:	e01c      	b.n	8007f48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7bfa      	ldrb	r2, [r7, #15]
 8007f12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fef8 	bl	8008d10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa5a 	bl	80083da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f34:	e008      	b.n	8007f48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3e:	e003      	b.n	8007f48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f97e 	bl	8008244 <USBD_CtlError>
  }
}
 8007f48:	bf00      	nop
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	4b4b      	ldr	r3, [pc, #300]	; (8008094 <USBD_SetConfig+0x144>)
 8007f66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f68:	4b4a      	ldr	r3, [pc, #296]	; (8008094 <USBD_SetConfig+0x144>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d905      	bls.n	8007f7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f966 	bl	8008244 <USBD_CtlError>
    return USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e087      	b.n	800808c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d002      	beq.n	8007f8c <USBD_SetConfig+0x3c>
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d025      	beq.n	8007fd6 <USBD_SetConfig+0x86>
 8007f8a:	e071      	b.n	8008070 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007f8c:	4b41      	ldr	r3, [pc, #260]	; (8008094 <USBD_SetConfig+0x144>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01c      	beq.n	8007fce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007f94:	4b3f      	ldr	r3, [pc, #252]	; (8008094 <USBD_SetConfig+0x144>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f9e:	4b3d      	ldr	r3, [pc, #244]	; (8008094 <USBD_SetConfig+0x144>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff f9a7 	bl	80072f8 <USBD_SetClassConfig>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f944 	bl	8008244 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007fbc:	e065      	b.n	800808a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa0b 	bl	80083da <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fcc:	e05d      	b.n	800808a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa03 	bl	80083da <USBD_CtlSendStatus>
    break;
 8007fd4:	e059      	b.n	800808a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007fd6:	4b2f      	ldr	r3, [pc, #188]	; (8008094 <USBD_SetConfig+0x144>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d112      	bne.n	8008004 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007fe6:	4b2b      	ldr	r3, [pc, #172]	; (8008094 <USBD_SetConfig+0x144>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ff0:	4b28      	ldr	r3, [pc, #160]	; (8008094 <USBD_SetConfig+0x144>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff f99a 	bl	8007330 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f9ec 	bl	80083da <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008002:	e042      	b.n	800808a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008004:	4b23      	ldr	r3, [pc, #140]	; (8008094 <USBD_SetConfig+0x144>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	429a      	cmp	r2, r3
 8008010:	d02a      	beq.n	8008068 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff f988 	bl	8007330 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008020:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <USBD_SetConfig+0x144>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800802a:	4b1a      	ldr	r3, [pc, #104]	; (8008094 <USBD_SetConfig+0x144>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff f961 	bl	80072f8 <USBD_SetClassConfig>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00f      	beq.n	8008060 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f8fe 	bl	8008244 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff f96d 	bl	8007330 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2202      	movs	r2, #2
 800805a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800805e:	e014      	b.n	800808a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f9ba 	bl	80083da <USBD_CtlSendStatus>
    break;
 8008066:	e010      	b.n	800808a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f9b6 	bl	80083da <USBD_CtlSendStatus>
    break;
 800806e:	e00c      	b.n	800808a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f8e6 	bl	8008244 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008078:	4b06      	ldr	r3, [pc, #24]	; (8008094 <USBD_SetConfig+0x144>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff f956 	bl	8007330 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	73fb      	strb	r3, [r7, #15]
    break;
 8008088:	bf00      	nop
  }

  return ret;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20000378 	.word	0x20000378

08008098 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	88db      	ldrh	r3, [r3, #6]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d004      	beq.n	80080b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f8c9 	bl	8008244 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80080b2:	e021      	b.n	80080f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	db17      	blt.n	80080ee <USBD_GetConfig+0x56>
 80080be:	2b02      	cmp	r3, #2
 80080c0:	dd02      	ble.n	80080c8 <USBD_GetConfig+0x30>
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d00b      	beq.n	80080de <USBD_GetConfig+0x46>
 80080c6:	e012      	b.n	80080ee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3308      	adds	r3, #8
 80080d2:	2201      	movs	r2, #1
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f925 	bl	8008326 <USBD_CtlSendData>
      break;
 80080dc:	e00c      	b.n	80080f8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	2201      	movs	r2, #1
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f91d 	bl	8008326 <USBD_CtlSendData>
      break;
 80080ec:	e004      	b.n	80080f8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f8a7 	bl	8008244 <USBD_CtlError>
      break;
 80080f6:	bf00      	nop
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008110:	3b01      	subs	r3, #1
 8008112:	2b02      	cmp	r3, #2
 8008114:	d81e      	bhi.n	8008154 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	88db      	ldrh	r3, [r3, #6]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d004      	beq.n	8008128 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f88f 	bl	8008244 <USBD_CtlError>
      break;
 8008126:	e01a      	b.n	800815e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d005      	beq.n	8008144 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f043 0202 	orr.w	r2, r3, #2
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	330c      	adds	r3, #12
 8008148:	2202      	movs	r2, #2
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f8ea 	bl	8008326 <USBD_CtlSendData>
    break;
 8008152:	e004      	b.n	800815e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f874 	bl	8008244 <USBD_CtlError>
    break;
 800815c:	bf00      	nop
  }
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	885b      	ldrh	r3, [r3, #2]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d106      	bne.n	8008186 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f92a 	bl	80083da <USBD_CtlSendStatus>
  }
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819e:	3b01      	subs	r3, #1
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d80b      	bhi.n	80081bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	885b      	ldrh	r3, [r3, #2]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d10c      	bne.n	80081c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f910 	bl	80083da <USBD_CtlSendStatus>
      }
      break;
 80081ba:	e004      	b.n	80081c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f840 	bl	8008244 <USBD_CtlError>
      break;
 80081c4:	e000      	b.n	80081c8 <USBD_ClrFeature+0x3a>
      break;
 80081c6:	bf00      	nop
  }
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3301      	adds	r3, #1
 80081f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fad3 	bl	80077a6 <SWAPBYTE>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3301      	adds	r3, #1
 800820c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3301      	adds	r3, #1
 8008212:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fac6 	bl	80077a6 <SWAPBYTE>
 800821a:	4603      	mov	r3, r0
 800821c:	461a      	mov	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3301      	adds	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff fab9 	bl	80077a6 <SWAPBYTE>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	80da      	strh	r2, [r3, #6]
}
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800824e:	2180      	movs	r1, #128	; 0x80
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fcf3 	bl	8008c3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008256:	2100      	movs	r1, #0
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fcef 	bl	8008c3c <USBD_LL_StallEP>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b086      	sub	sp, #24
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d036      	beq.n	80082ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008280:	6938      	ldr	r0, [r7, #16]
 8008282:	f000 f836 	bl	80082f2 <USBD_GetLen>
 8008286:	4603      	mov	r3, r0
 8008288:	3301      	adds	r3, #1
 800828a:	b29b      	uxth	r3, r3
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	b29a      	uxth	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	4413      	add	r3, r2
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	7812      	ldrb	r2, [r2, #0]
 800829e:	701a      	strb	r2, [r3, #0]
  idx++;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	3301      	adds	r3, #1
 80082a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	4413      	add	r3, r2
 80082ac:	2203      	movs	r2, #3
 80082ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	3301      	adds	r3, #1
 80082b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082b6:	e013      	b.n	80082e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	4413      	add	r3, r2
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	7812      	ldrb	r2, [r2, #0]
 80082c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	3301      	adds	r3, #1
 80082c8:	613b      	str	r3, [r7, #16]
    idx++;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	3301      	adds	r3, #1
 80082ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	4413      	add	r3, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	3301      	adds	r3, #1
 80082de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e7      	bne.n	80082b8 <USBD_GetString+0x52>
 80082e8:	e000      	b.n	80082ec <USBD_GetString+0x86>
    return;
 80082ea:	bf00      	nop
  }
}
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008302:	e005      	b.n	8008310 <USBD_GetLen+0x1e>
  {
    len++;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	3301      	adds	r3, #1
 8008308:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	3301      	adds	r3, #1
 800830e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1f5      	bne.n	8008304 <USBD_GetLen+0x12>
  }

  return len;
 8008318:	7bfb      	ldrb	r3, [r7, #15]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2202      	movs	r2, #2
 8008336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	2100      	movs	r1, #0
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fcfe 	bl	8008d4e <USBD_LL_Transmit>

  return USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	2100      	movs	r1, #0
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fced 	bl	8008d4e <USBD_LL_Transmit>

  return USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2203      	movs	r2, #3
 800838e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	2100      	movs	r1, #0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fcf1 	bl	8008d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	2100      	movs	r1, #0
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fce0 	bl	8008d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2204      	movs	r2, #4
 80083e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083ea:	2300      	movs	r3, #0
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fcac 	bl	8008d4e <USBD_LL_Transmit>

  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2205      	movs	r2, #5
 800840c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008410:	2300      	movs	r3, #0
 8008412:	2200      	movs	r2, #0
 8008414:	2100      	movs	r1, #0
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fcba 	bl	8008d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800842c:	2200      	movs	r2, #0
 800842e:	4912      	ldr	r1, [pc, #72]	; (8008478 <MX_USB_DEVICE_Init+0x50>)
 8008430:	4812      	ldr	r0, [pc, #72]	; (800847c <MX_USB_DEVICE_Init+0x54>)
 8008432:	f7fe fef3 	bl	800721c <USBD_Init>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800843c:	f7f9 f808 	bl	8001450 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008440:	490f      	ldr	r1, [pc, #60]	; (8008480 <MX_USB_DEVICE_Init+0x58>)
 8008442:	480e      	ldr	r0, [pc, #56]	; (800847c <MX_USB_DEVICE_Init+0x54>)
 8008444:	f7fe ff20 	bl	8007288 <USBD_RegisterClass>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800844e:	f7f8 ffff 	bl	8001450 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008452:	490c      	ldr	r1, [pc, #48]	; (8008484 <MX_USB_DEVICE_Init+0x5c>)
 8008454:	4809      	ldr	r0, [pc, #36]	; (800847c <MX_USB_DEVICE_Init+0x54>)
 8008456:	f7fe fe45 	bl	80070e4 <USBD_CDC_RegisterInterface>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008460:	f7f8 fff6 	bl	8001450 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008464:	4805      	ldr	r0, [pc, #20]	; (800847c <MX_USB_DEVICE_Init+0x54>)
 8008466:	f7fe ff30 	bl	80072ca <USBD_Start>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008470:	f7f8 ffee 	bl	8001450 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008474:	bf00      	nop
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000138 	.word	0x20000138
 800847c:	200004a4 	.word	0x200004a4
 8008480:	20000018 	.word	0x20000018
 8008484:	20000124 	.word	0x20000124

08008488 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800848c:	2200      	movs	r2, #0
 800848e:	4905      	ldr	r1, [pc, #20]	; (80084a4 <CDC_Init_FS+0x1c>)
 8008490:	4805      	ldr	r0, [pc, #20]	; (80084a8 <CDC_Init_FS+0x20>)
 8008492:	f7fe fe3c 	bl	800710e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008496:	4905      	ldr	r1, [pc, #20]	; (80084ac <CDC_Init_FS+0x24>)
 8008498:	4803      	ldr	r0, [pc, #12]	; (80084a8 <CDC_Init_FS+0x20>)
 800849a:	f7fe fe51 	bl	8007140 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800849e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000f74 	.word	0x20000f74
 80084a8:	200004a4 	.word	0x200004a4
 80084ac:	20000774 	.word	0x20000774

080084b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b23      	cmp	r3, #35	; 0x23
 80084d4:	d85c      	bhi.n	8008590 <CDC_Control_FS+0xd0>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <CDC_Control_FS+0x1c>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	08008591 	.word	0x08008591
 80084e0:	08008591 	.word	0x08008591
 80084e4:	08008591 	.word	0x08008591
 80084e8:	08008591 	.word	0x08008591
 80084ec:	08008591 	.word	0x08008591
 80084f0:	08008591 	.word	0x08008591
 80084f4:	08008591 	.word	0x08008591
 80084f8:	08008591 	.word	0x08008591
 80084fc:	08008591 	.word	0x08008591
 8008500:	08008591 	.word	0x08008591
 8008504:	08008591 	.word	0x08008591
 8008508:	08008591 	.word	0x08008591
 800850c:	08008591 	.word	0x08008591
 8008510:	08008591 	.word	0x08008591
 8008514:	08008591 	.word	0x08008591
 8008518:	08008591 	.word	0x08008591
 800851c:	08008591 	.word	0x08008591
 8008520:	08008591 	.word	0x08008591
 8008524:	08008591 	.word	0x08008591
 8008528:	08008591 	.word	0x08008591
 800852c:	08008591 	.word	0x08008591
 8008530:	08008591 	.word	0x08008591
 8008534:	08008591 	.word	0x08008591
 8008538:	08008591 	.word	0x08008591
 800853c:	08008591 	.word	0x08008591
 8008540:	08008591 	.word	0x08008591
 8008544:	08008591 	.word	0x08008591
 8008548:	08008591 	.word	0x08008591
 800854c:	08008591 	.word	0x08008591
 8008550:	08008591 	.word	0x08008591
 8008554:	08008591 	.word	0x08008591
 8008558:	08008591 	.word	0x08008591
 800855c:	0800856d 	.word	0x0800856d
 8008560:	0800857f 	.word	0x0800857f
 8008564:	08008591 	.word	0x08008591
 8008568:	08008591 	.word	0x08008591
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800856c:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <CDC_Control_FS+0xe0>)
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	6810      	ldr	r0, [r2, #0]
 8008572:	6018      	str	r0, [r3, #0]
 8008574:	8891      	ldrh	r1, [r2, #4]
 8008576:	7992      	ldrb	r2, [r2, #6]
 8008578:	8099      	strh	r1, [r3, #4]
 800857a:	719a      	strb	r2, [r3, #6]
    break;
 800857c:	e009      	b.n	8008592 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	4a07      	ldr	r2, [pc, #28]	; (80085a0 <CDC_Control_FS+0xe0>)
 8008582:	6810      	ldr	r0, [r2, #0]
 8008584:	6018      	str	r0, [r3, #0]
 8008586:	8891      	ldrh	r1, [r2, #4]
 8008588:	7992      	ldrb	r2, [r2, #6]
 800858a:	8099      	strh	r1, [r3, #4]
 800858c:	719a      	strb	r2, [r3, #6]
    break;
 800858e:	e000      	b.n	8008592 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008590:	bf00      	nop
  }

  return (USBD_OK);
 8008592:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	2000011c 	.word	0x2000011c

080085a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	4805      	ldr	r0, [pc, #20]	; (80085c8 <CDC_Receive_FS+0x24>)
 80085b2:	f7fe fdc5 	bl	8007140 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085b6:	4804      	ldr	r0, [pc, #16]	; (80085c8 <CDC_Receive_FS+0x24>)
 80085b8:	f7fe fe06 	bl	80071c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	200004a4 	.word	0x200004a4

080085cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085dc:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <CDC_Transmit_FS+0x48>)
 80085de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e00b      	b.n	800860a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085f2:	887b      	ldrh	r3, [r7, #2]
 80085f4:	461a      	mov	r2, r3
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4806      	ldr	r0, [pc, #24]	; (8008614 <CDC_Transmit_FS+0x48>)
 80085fa:	f7fe fd88 	bl	800710e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085fe:	4805      	ldr	r0, [pc, #20]	; (8008614 <CDC_Transmit_FS+0x48>)
 8008600:	f7fe fdb2 	bl	8007168 <USBD_CDC_TransmitPacket>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	200004a4 	.word	0x200004a4

08008618 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800862a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800862e:	4618      	mov	r0, r3
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
	...

0800863c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2212      	movs	r2, #18
 800864c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800864e:	4b03      	ldr	r3, [pc, #12]	; (800865c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20000154 	.word	0x20000154

08008660 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	6039      	str	r1, [r7, #0]
 800866a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2204      	movs	r2, #4
 8008670:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008672:	4b03      	ldr	r3, [pc, #12]	; (8008680 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	20000168 	.word	0x20000168

08008684 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	6039      	str	r1, [r7, #0]
 800868e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4907      	ldr	r1, [pc, #28]	; (80086b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800869a:	4808      	ldr	r0, [pc, #32]	; (80086bc <USBD_FS_ProductStrDescriptor+0x38>)
 800869c:	f7ff fde3 	bl	8008266 <USBD_GetString>
 80086a0:	e004      	b.n	80086ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4904      	ldr	r1, [pc, #16]	; (80086b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80086a6:	4805      	ldr	r0, [pc, #20]	; (80086bc <USBD_FS_ProductStrDescriptor+0x38>)
 80086a8:	f7ff fddd 	bl	8008266 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20001774 	.word	0x20001774
 80086bc:	0800a9c8 	.word	0x0800a9c8

080086c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	6039      	str	r1, [r7, #0]
 80086ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	4904      	ldr	r1, [pc, #16]	; (80086e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086d0:	4804      	ldr	r0, [pc, #16]	; (80086e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086d2:	f7ff fdc8 	bl	8008266 <USBD_GetString>
  return USBD_StrDesc;
 80086d6:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20001774 	.word	0x20001774
 80086e4:	0800a9e0 	.word	0x0800a9e0

080086e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	221a      	movs	r2, #26
 80086f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086fa:	f000 f843 	bl	8008784 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086fe:	4b02      	ldr	r3, [pc, #8]	; (8008708 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	2000016c 	.word	0x2000016c

0800870c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d105      	bne.n	800872a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	4907      	ldr	r1, [pc, #28]	; (8008740 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008722:	4808      	ldr	r0, [pc, #32]	; (8008744 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008724:	f7ff fd9f 	bl	8008266 <USBD_GetString>
 8008728:	e004      	b.n	8008734 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4904      	ldr	r1, [pc, #16]	; (8008740 <USBD_FS_ConfigStrDescriptor+0x34>)
 800872e:	4805      	ldr	r0, [pc, #20]	; (8008744 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008730:	f7ff fd99 	bl	8008266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008734:	4b02      	ldr	r3, [pc, #8]	; (8008740 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20001774 	.word	0x20001774
 8008744:	0800a9f4 	.word	0x0800a9f4

08008748 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4907      	ldr	r1, [pc, #28]	; (800877c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800875e:	4808      	ldr	r0, [pc, #32]	; (8008780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008760:	f7ff fd81 	bl	8008266 <USBD_GetString>
 8008764:	e004      	b.n	8008770 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	4904      	ldr	r1, [pc, #16]	; (800877c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800876a:	4805      	ldr	r0, [pc, #20]	; (8008780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800876c:	f7ff fd7b 	bl	8008266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20001774 	.word	0x20001774
 8008780:	0800aa00 	.word	0x0800aa00

08008784 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800878a:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <Get_SerialNum+0x44>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008790:	4b0e      	ldr	r3, [pc, #56]	; (80087cc <Get_SerialNum+0x48>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008796:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <Get_SerialNum+0x4c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d009      	beq.n	80087be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087aa:	2208      	movs	r2, #8
 80087ac:	4909      	ldr	r1, [pc, #36]	; (80087d4 <Get_SerialNum+0x50>)
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f814 	bl	80087dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087b4:	2204      	movs	r2, #4
 80087b6:	4908      	ldr	r1, [pc, #32]	; (80087d8 <Get_SerialNum+0x54>)
 80087b8:	68b8      	ldr	r0, [r7, #8]
 80087ba:	f000 f80f 	bl	80087dc <IntToUnicode>
  }
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	1fff7a10 	.word	0x1fff7a10
 80087cc:	1fff7a14 	.word	0x1fff7a14
 80087d0:	1fff7a18 	.word	0x1fff7a18
 80087d4:	2000016e 	.word	0x2000016e
 80087d8:	2000017e 	.word	0x2000017e

080087dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]
 80087f2:	e027      	b.n	8008844 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	0f1b      	lsrs	r3, r3, #28
 80087f8:	2b09      	cmp	r3, #9
 80087fa:	d80b      	bhi.n	8008814 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	0f1b      	lsrs	r3, r3, #28
 8008800:	b2da      	uxtb	r2, r3
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4619      	mov	r1, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	440b      	add	r3, r1
 800880c:	3230      	adds	r2, #48	; 0x30
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	e00a      	b.n	800882a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	0f1b      	lsrs	r3, r3, #28
 8008818:	b2da      	uxtb	r2, r3
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	4619      	mov	r1, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	440b      	add	r3, r1
 8008824:	3237      	adds	r2, #55	; 0x37
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	3301      	adds	r3, #1
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	4413      	add	r3, r2
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	3301      	adds	r3, #1
 8008842:	75fb      	strb	r3, [r7, #23]
 8008844:	7dfa      	ldrb	r2, [r7, #23]
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	429a      	cmp	r2, r3
 800884a:	d3d3      	bcc.n	80087f4 <IntToUnicode+0x18>
  }
}
 800884c:	bf00      	nop
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	; 0x28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008860:	f107 0314 	add.w	r3, r7, #20
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	605a      	str	r2, [r3, #4]
 800886a:	609a      	str	r2, [r3, #8]
 800886c:	60da      	str	r2, [r3, #12]
 800886e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008878:	d13a      	bne.n	80088f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800887a:	2300      	movs	r3, #0
 800887c:	613b      	str	r3, [r7, #16]
 800887e:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <HAL_PCD_MspInit+0xa0>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	4a1d      	ldr	r2, [pc, #116]	; (80088f8 <HAL_PCD_MspInit+0xa0>)
 8008884:	f043 0301 	orr.w	r3, r3, #1
 8008888:	6313      	str	r3, [r2, #48]	; 0x30
 800888a:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <HAL_PCD_MspInit+0xa0>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008896:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800889a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800889c:	2302      	movs	r3, #2
 800889e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088a4:	2303      	movs	r3, #3
 80088a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088a8:	230a      	movs	r3, #10
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ac:	f107 0314 	add.w	r3, r7, #20
 80088b0:	4619      	mov	r1, r3
 80088b2:	4812      	ldr	r0, [pc, #72]	; (80088fc <HAL_PCD_MspInit+0xa4>)
 80088b4:	f7f9 f94a 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088b8:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <HAL_PCD_MspInit+0xa0>)
 80088ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088bc:	4a0e      	ldr	r2, [pc, #56]	; (80088f8 <HAL_PCD_MspInit+0xa0>)
 80088be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c2:	6353      	str	r3, [r2, #52]	; 0x34
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <HAL_PCD_MspInit+0xa0>)
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	4a0a      	ldr	r2, [pc, #40]	; (80088f8 <HAL_PCD_MspInit+0xa0>)
 80088ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088d2:	6453      	str	r3, [r2, #68]	; 0x44
 80088d4:	4b08      	ldr	r3, [pc, #32]	; (80088f8 <HAL_PCD_MspInit+0xa0>)
 80088d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 80088e0:	2200      	movs	r2, #0
 80088e2:	2101      	movs	r1, #1
 80088e4:	2043      	movs	r0, #67	; 0x43
 80088e6:	f7f9 f8fa 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088ea:	2043      	movs	r0, #67	; 0x43
 80088ec:	f7f9 f913 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088f0:	bf00      	nop
 80088f2:	3728      	adds	r7, #40	; 0x28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	40023800 	.word	0x40023800
 80088fc:	40020000 	.word	0x40020000

08008900 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f7fe fd22 	bl	8007360 <USBD_LL_SetupStage>
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008936:	78fa      	ldrb	r2, [r7, #3]
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	4613      	mov	r3, r2
 800893c:	00db      	lsls	r3, r3, #3
 800893e:	1a9b      	subs	r3, r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	440b      	add	r3, r1
 8008944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	4619      	mov	r1, r3
 800894e:	f7fe fd5a 	bl	8007406 <USBD_LL_DataOutStage>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	460b      	mov	r3, r1
 8008964:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	3348      	adds	r3, #72	; 0x48
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	4619      	mov	r1, r3
 8008982:	f7fe fda3 	bl	80074cc <USBD_LL_DataInStage>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fea7 	bl	80076f0 <USBD_LL_SOF>
}
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089b2:	2301      	movs	r3, #1
 80089b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d102      	bne.n	80089c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
 80089c2:	e008      	b.n	80089d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d102      	bne.n	80089d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80089cc:	2301      	movs	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	e001      	b.n	80089d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80089d2:	f7f8 fd3d 	bl	8001450 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089dc:	7bfa      	ldrb	r2, [r7, #15]
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe fe4a 	bl	800767a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fe fe03 	bl	80075f8 <USBD_LL_Reset>
}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fe45 	bl	800769a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	6812      	ldr	r2, [r2, #0]
 8008a1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a30:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <HAL_PCD_SuspendCallback+0x48>)
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	4a03      	ldr	r2, [pc, #12]	; (8008a44 <HAL_PCD_SuspendCallback+0x48>)
 8008a36:	f043 0306 	orr.w	r3, r3, #6
 8008a3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	e000ed00 	.word	0xe000ed00

08008a48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fe34 	bl	80076c4 <USBD_LL_Resume>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe fe5f 	bl	800773e <USBD_LL_IsoOUTIncomplete>
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fe40 	bl	8007724 <USBD_LL_IsoINIncomplete>
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fe4c 	bl	8007758 <USBD_LL_DevConnected>
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fe49 	bl	800776e <USBD_LL_DevDisconnected>
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d13c      	bne.n	8008b6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008af4:	4a20      	ldr	r2, [pc, #128]	; (8008b78 <USBD_LL_Init+0x94>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a1e      	ldr	r2, [pc, #120]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b04:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b0e:	2204      	movs	r2, #4
 8008b10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b12:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b14:	2202      	movs	r2, #2
 8008b16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b18:	4b17      	ldr	r3, [pc, #92]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b1e:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b20:	2202      	movs	r2, #2
 8008b22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b24:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b36:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b42:	480d      	ldr	r0, [pc, #52]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b44:	f7fa f98d 	bl	8002e62 <HAL_PCD_Init>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b4e:	f7f8 fc7f 	bl	8001450 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b52:	2180      	movs	r1, #128	; 0x80
 8008b54:	4808      	ldr	r0, [pc, #32]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b56:	f7fb faea 	bl	800412e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b5a:	2240      	movs	r2, #64	; 0x40
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4806      	ldr	r0, [pc, #24]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b60:	f7fb fa9e 	bl	80040a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b64:	2280      	movs	r2, #128	; 0x80
 8008b66:	2101      	movs	r1, #1
 8008b68:	4803      	ldr	r0, [pc, #12]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b6a:	f7fb fa99 	bl	80040a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20001974 	.word	0x20001974

08008b7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fa fa82 	bl	800309c <HAL_PCD_Start>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 f92a 	bl	8008df8 <USBD_Get_USB_Status>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	70fb      	strb	r3, [r7, #3]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70bb      	strb	r3, [r7, #2]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bda:	78bb      	ldrb	r3, [r7, #2]
 8008bdc:	883a      	ldrh	r2, [r7, #0]
 8008bde:	78f9      	ldrb	r1, [r7, #3]
 8008be0:	f7fa fe66 	bl	80038b0 <HAL_PCD_EP_Open>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f904 	bl	8008df8 <USBD_Get_USB_Status>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fa feaf 	bl	8003980 <HAL_PCD_EP_Close>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 f8e5 	bl	8008df8 <USBD_Get_USB_Status>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fa ff87 	bl	8003b6e <HAL_PCD_EP_SetStall>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f8c6 	bl	8008df8 <USBD_Get_USB_Status>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c94:	78fa      	ldrb	r2, [r7, #3]
 8008c96:	4611      	mov	r1, r2
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fa ffcc 	bl	8003c36 <HAL_PCD_EP_ClrStall>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 f8a7 	bl	8008df8 <USBD_Get_USB_Status>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	da0b      	bge.n	8008cec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cda:	68f9      	ldr	r1, [r7, #12]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	1a9b      	subs	r3, r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	333e      	adds	r3, #62	; 0x3e
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	e00b      	b.n	8008d04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cf2:	68f9      	ldr	r1, [r7, #12]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	1a9b      	subs	r3, r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d2a:	78fa      	ldrb	r2, [r7, #3]
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fa fd99 	bl	8003866 <HAL_PCD_SetAddress>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f85c 	bl	8008df8 <USBD_Get_USB_Status>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b086      	sub	sp, #24
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d6c:	7af9      	ldrb	r1, [r7, #11]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	f7fa feb2 	bl	8003ada <HAL_PCD_EP_Transmit>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f83b 	bl	8008df8 <USBD_Get_USB_Status>
 8008d82:	4603      	mov	r3, r0
 8008d84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d86:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008dae:	7af9      	ldrb	r1, [r7, #11]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	f7fa fe2e 	bl	8003a14 <HAL_PCD_EP_Receive>
 8008db8:	4603      	mov	r3, r0
 8008dba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f81a 	bl	8008df8 <USBD_Get_USB_Status>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008de4:	78fa      	ldrb	r2, [r7, #3]
 8008de6:	4611      	mov	r1, r2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fa fe5e 	bl	8003aaa <HAL_PCD_EP_GetRxCount>
 8008dee:	4603      	mov	r3, r0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d817      	bhi.n	8008e3c <USBD_Get_USB_Status+0x44>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <USBD_Get_USB_Status+0x1c>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e25 	.word	0x08008e25
 8008e18:	08008e2b 	.word	0x08008e2b
 8008e1c:	08008e31 	.word	0x08008e31
 8008e20:	08008e37 	.word	0x08008e37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
    break;
 8008e28:	e00b      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2e:	e008      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e005      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3a:	e002      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	bf00      	nop
  }
  return usb_status;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <__errno>:
 8008e50:	4b01      	ldr	r3, [pc, #4]	; (8008e58 <__errno+0x8>)
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	20000188 	.word	0x20000188

08008e5c <__libc_init_array>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4e0d      	ldr	r6, [pc, #52]	; (8008e94 <__libc_init_array+0x38>)
 8008e60:	4c0d      	ldr	r4, [pc, #52]	; (8008e98 <__libc_init_array+0x3c>)
 8008e62:	1ba4      	subs	r4, r4, r6
 8008e64:	10a4      	asrs	r4, r4, #2
 8008e66:	2500      	movs	r5, #0
 8008e68:	42a5      	cmp	r5, r4
 8008e6a:	d109      	bne.n	8008e80 <__libc_init_array+0x24>
 8008e6c:	4e0b      	ldr	r6, [pc, #44]	; (8008e9c <__libc_init_array+0x40>)
 8008e6e:	4c0c      	ldr	r4, [pc, #48]	; (8008ea0 <__libc_init_array+0x44>)
 8008e70:	f001 fd9a 	bl	800a9a8 <_init>
 8008e74:	1ba4      	subs	r4, r4, r6
 8008e76:	10a4      	asrs	r4, r4, #2
 8008e78:	2500      	movs	r5, #0
 8008e7a:	42a5      	cmp	r5, r4
 8008e7c:	d105      	bne.n	8008e8a <__libc_init_array+0x2e>
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e84:	4798      	blx	r3
 8008e86:	3501      	adds	r5, #1
 8008e88:	e7ee      	b.n	8008e68 <__libc_init_array+0xc>
 8008e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e8e:	4798      	blx	r3
 8008e90:	3501      	adds	r5, #1
 8008e92:	e7f2      	b.n	8008e7a <__libc_init_array+0x1e>
 8008e94:	0800ac58 	.word	0x0800ac58
 8008e98:	0800ac58 	.word	0x0800ac58
 8008e9c:	0800ac58 	.word	0x0800ac58
 8008ea0:	0800ac5c 	.word	0x0800ac5c

08008ea4 <malloc>:
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <malloc+0xc>)
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	f000 b861 	b.w	8008f70 <_malloc_r>
 8008eae:	bf00      	nop
 8008eb0:	20000188 	.word	0x20000188

08008eb4 <free>:
 8008eb4:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <free+0xc>)
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f000 b80b 	b.w	8008ed4 <_free_r>
 8008ebe:	bf00      	nop
 8008ec0:	20000188 	.word	0x20000188

08008ec4 <memset>:
 8008ec4:	4402      	add	r2, r0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d100      	bne.n	8008ece <memset+0xa>
 8008ecc:	4770      	bx	lr
 8008ece:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed2:	e7f9      	b.n	8008ec8 <memset+0x4>

08008ed4 <_free_r>:
 8008ed4:	b538      	push	{r3, r4, r5, lr}
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d045      	beq.n	8008f68 <_free_r+0x94>
 8008edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee0:	1f0c      	subs	r4, r1, #4
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	bfb8      	it	lt
 8008ee6:	18e4      	addlt	r4, r4, r3
 8008ee8:	f001 fa53 	bl	800a392 <__malloc_lock>
 8008eec:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <_free_r+0x98>)
 8008eee:	6813      	ldr	r3, [r2, #0]
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	b933      	cbnz	r3, 8008f02 <_free_r+0x2e>
 8008ef4:	6063      	str	r3, [r4, #4]
 8008ef6:	6014      	str	r4, [r2, #0]
 8008ef8:	4628      	mov	r0, r5
 8008efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008efe:	f001 ba49 	b.w	800a394 <__malloc_unlock>
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	d90c      	bls.n	8008f20 <_free_r+0x4c>
 8008f06:	6821      	ldr	r1, [r4, #0]
 8008f08:	1862      	adds	r2, r4, r1
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	bf04      	itt	eq
 8008f0e:	681a      	ldreq	r2, [r3, #0]
 8008f10:	685b      	ldreq	r3, [r3, #4]
 8008f12:	6063      	str	r3, [r4, #4]
 8008f14:	bf04      	itt	eq
 8008f16:	1852      	addeq	r2, r2, r1
 8008f18:	6022      	streq	r2, [r4, #0]
 8008f1a:	6004      	str	r4, [r0, #0]
 8008f1c:	e7ec      	b.n	8008ef8 <_free_r+0x24>
 8008f1e:	4613      	mov	r3, r2
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	b10a      	cbz	r2, 8008f28 <_free_r+0x54>
 8008f24:	42a2      	cmp	r2, r4
 8008f26:	d9fa      	bls.n	8008f1e <_free_r+0x4a>
 8008f28:	6819      	ldr	r1, [r3, #0]
 8008f2a:	1858      	adds	r0, r3, r1
 8008f2c:	42a0      	cmp	r0, r4
 8008f2e:	d10b      	bne.n	8008f48 <_free_r+0x74>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	4401      	add	r1, r0
 8008f34:	1858      	adds	r0, r3, r1
 8008f36:	4282      	cmp	r2, r0
 8008f38:	6019      	str	r1, [r3, #0]
 8008f3a:	d1dd      	bne.n	8008ef8 <_free_r+0x24>
 8008f3c:	6810      	ldr	r0, [r2, #0]
 8008f3e:	6852      	ldr	r2, [r2, #4]
 8008f40:	605a      	str	r2, [r3, #4]
 8008f42:	4401      	add	r1, r0
 8008f44:	6019      	str	r1, [r3, #0]
 8008f46:	e7d7      	b.n	8008ef8 <_free_r+0x24>
 8008f48:	d902      	bls.n	8008f50 <_free_r+0x7c>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	e7d3      	b.n	8008ef8 <_free_r+0x24>
 8008f50:	6820      	ldr	r0, [r4, #0]
 8008f52:	1821      	adds	r1, r4, r0
 8008f54:	428a      	cmp	r2, r1
 8008f56:	bf04      	itt	eq
 8008f58:	6811      	ldreq	r1, [r2, #0]
 8008f5a:	6852      	ldreq	r2, [r2, #4]
 8008f5c:	6062      	str	r2, [r4, #4]
 8008f5e:	bf04      	itt	eq
 8008f60:	1809      	addeq	r1, r1, r0
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	605c      	str	r4, [r3, #4]
 8008f66:	e7c7      	b.n	8008ef8 <_free_r+0x24>
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	bf00      	nop
 8008f6c:	2000037c 	.word	0x2000037c

08008f70 <_malloc_r>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	1ccd      	adds	r5, r1, #3
 8008f74:	f025 0503 	bic.w	r5, r5, #3
 8008f78:	3508      	adds	r5, #8
 8008f7a:	2d0c      	cmp	r5, #12
 8008f7c:	bf38      	it	cc
 8008f7e:	250c      	movcc	r5, #12
 8008f80:	2d00      	cmp	r5, #0
 8008f82:	4606      	mov	r6, r0
 8008f84:	db01      	blt.n	8008f8a <_malloc_r+0x1a>
 8008f86:	42a9      	cmp	r1, r5
 8008f88:	d903      	bls.n	8008f92 <_malloc_r+0x22>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	6033      	str	r3, [r6, #0]
 8008f8e:	2000      	movs	r0, #0
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
 8008f92:	f001 f9fe 	bl	800a392 <__malloc_lock>
 8008f96:	4a21      	ldr	r2, [pc, #132]	; (800901c <_malloc_r+0xac>)
 8008f98:	6814      	ldr	r4, [r2, #0]
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	b991      	cbnz	r1, 8008fc4 <_malloc_r+0x54>
 8008f9e:	4c20      	ldr	r4, [pc, #128]	; (8009020 <_malloc_r+0xb0>)
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	b91b      	cbnz	r3, 8008fac <_malloc_r+0x3c>
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f000 fb87 	bl	80096b8 <_sbrk_r>
 8008faa:	6020      	str	r0, [r4, #0]
 8008fac:	4629      	mov	r1, r5
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 fb82 	bl	80096b8 <_sbrk_r>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d124      	bne.n	8009002 <_malloc_r+0x92>
 8008fb8:	230c      	movs	r3, #12
 8008fba:	6033      	str	r3, [r6, #0]
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f001 f9e9 	bl	800a394 <__malloc_unlock>
 8008fc2:	e7e4      	b.n	8008f8e <_malloc_r+0x1e>
 8008fc4:	680b      	ldr	r3, [r1, #0]
 8008fc6:	1b5b      	subs	r3, r3, r5
 8008fc8:	d418      	bmi.n	8008ffc <_malloc_r+0x8c>
 8008fca:	2b0b      	cmp	r3, #11
 8008fcc:	d90f      	bls.n	8008fee <_malloc_r+0x7e>
 8008fce:	600b      	str	r3, [r1, #0]
 8008fd0:	50cd      	str	r5, [r1, r3]
 8008fd2:	18cc      	adds	r4, r1, r3
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f001 f9dd 	bl	800a394 <__malloc_unlock>
 8008fda:	f104 000b 	add.w	r0, r4, #11
 8008fde:	1d23      	adds	r3, r4, #4
 8008fe0:	f020 0007 	bic.w	r0, r0, #7
 8008fe4:	1ac3      	subs	r3, r0, r3
 8008fe6:	d0d3      	beq.n	8008f90 <_malloc_r+0x20>
 8008fe8:	425a      	negs	r2, r3
 8008fea:	50e2      	str	r2, [r4, r3]
 8008fec:	e7d0      	b.n	8008f90 <_malloc_r+0x20>
 8008fee:	428c      	cmp	r4, r1
 8008ff0:	684b      	ldr	r3, [r1, #4]
 8008ff2:	bf16      	itet	ne
 8008ff4:	6063      	strne	r3, [r4, #4]
 8008ff6:	6013      	streq	r3, [r2, #0]
 8008ff8:	460c      	movne	r4, r1
 8008ffa:	e7eb      	b.n	8008fd4 <_malloc_r+0x64>
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	6849      	ldr	r1, [r1, #4]
 8009000:	e7cc      	b.n	8008f9c <_malloc_r+0x2c>
 8009002:	1cc4      	adds	r4, r0, #3
 8009004:	f024 0403 	bic.w	r4, r4, #3
 8009008:	42a0      	cmp	r0, r4
 800900a:	d005      	beq.n	8009018 <_malloc_r+0xa8>
 800900c:	1a21      	subs	r1, r4, r0
 800900e:	4630      	mov	r0, r6
 8009010:	f000 fb52 	bl	80096b8 <_sbrk_r>
 8009014:	3001      	adds	r0, #1
 8009016:	d0cf      	beq.n	8008fb8 <_malloc_r+0x48>
 8009018:	6025      	str	r5, [r4, #0]
 800901a:	e7db      	b.n	8008fd4 <_malloc_r+0x64>
 800901c:	2000037c 	.word	0x2000037c
 8009020:	20000380 	.word	0x20000380

08009024 <__cvt>:
 8009024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	ec55 4b10 	vmov	r4, r5, d0
 800902c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800902e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009032:	2d00      	cmp	r5, #0
 8009034:	460e      	mov	r6, r1
 8009036:	4691      	mov	r9, r2
 8009038:	4619      	mov	r1, r3
 800903a:	bfb8      	it	lt
 800903c:	4622      	movlt	r2, r4
 800903e:	462b      	mov	r3, r5
 8009040:	f027 0720 	bic.w	r7, r7, #32
 8009044:	bfbb      	ittet	lt
 8009046:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800904a:	461d      	movlt	r5, r3
 800904c:	2300      	movge	r3, #0
 800904e:	232d      	movlt	r3, #45	; 0x2d
 8009050:	bfb8      	it	lt
 8009052:	4614      	movlt	r4, r2
 8009054:	2f46      	cmp	r7, #70	; 0x46
 8009056:	700b      	strb	r3, [r1, #0]
 8009058:	d004      	beq.n	8009064 <__cvt+0x40>
 800905a:	2f45      	cmp	r7, #69	; 0x45
 800905c:	d100      	bne.n	8009060 <__cvt+0x3c>
 800905e:	3601      	adds	r6, #1
 8009060:	2102      	movs	r1, #2
 8009062:	e000      	b.n	8009066 <__cvt+0x42>
 8009064:	2103      	movs	r1, #3
 8009066:	ab03      	add	r3, sp, #12
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	ab02      	add	r3, sp, #8
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	4632      	mov	r2, r6
 8009070:	4653      	mov	r3, sl
 8009072:	ec45 4b10 	vmov	d0, r4, r5
 8009076:	f000 fbbb 	bl	80097f0 <_dtoa_r>
 800907a:	2f47      	cmp	r7, #71	; 0x47
 800907c:	4680      	mov	r8, r0
 800907e:	d102      	bne.n	8009086 <__cvt+0x62>
 8009080:	f019 0f01 	tst.w	r9, #1
 8009084:	d026      	beq.n	80090d4 <__cvt+0xb0>
 8009086:	2f46      	cmp	r7, #70	; 0x46
 8009088:	eb08 0906 	add.w	r9, r8, r6
 800908c:	d111      	bne.n	80090b2 <__cvt+0x8e>
 800908e:	f898 3000 	ldrb.w	r3, [r8]
 8009092:	2b30      	cmp	r3, #48	; 0x30
 8009094:	d10a      	bne.n	80090ac <__cvt+0x88>
 8009096:	2200      	movs	r2, #0
 8009098:	2300      	movs	r3, #0
 800909a:	4620      	mov	r0, r4
 800909c:	4629      	mov	r1, r5
 800909e:	f7f7 fcbf 	bl	8000a20 <__aeabi_dcmpeq>
 80090a2:	b918      	cbnz	r0, 80090ac <__cvt+0x88>
 80090a4:	f1c6 0601 	rsb	r6, r6, #1
 80090a8:	f8ca 6000 	str.w	r6, [sl]
 80090ac:	f8da 3000 	ldr.w	r3, [sl]
 80090b0:	4499      	add	r9, r3
 80090b2:	2200      	movs	r2, #0
 80090b4:	2300      	movs	r3, #0
 80090b6:	4620      	mov	r0, r4
 80090b8:	4629      	mov	r1, r5
 80090ba:	f7f7 fcb1 	bl	8000a20 <__aeabi_dcmpeq>
 80090be:	b938      	cbnz	r0, 80090d0 <__cvt+0xac>
 80090c0:	2230      	movs	r2, #48	; 0x30
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	454b      	cmp	r3, r9
 80090c6:	d205      	bcs.n	80090d4 <__cvt+0xb0>
 80090c8:	1c59      	adds	r1, r3, #1
 80090ca:	9103      	str	r1, [sp, #12]
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e7f8      	b.n	80090c2 <__cvt+0x9e>
 80090d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d8:	eba3 0308 	sub.w	r3, r3, r8
 80090dc:	4640      	mov	r0, r8
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	b004      	add	sp, #16
 80090e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080090e6 <__exponent>:
 80090e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090e8:	2900      	cmp	r1, #0
 80090ea:	4604      	mov	r4, r0
 80090ec:	bfba      	itte	lt
 80090ee:	4249      	neglt	r1, r1
 80090f0:	232d      	movlt	r3, #45	; 0x2d
 80090f2:	232b      	movge	r3, #43	; 0x2b
 80090f4:	2909      	cmp	r1, #9
 80090f6:	f804 2b02 	strb.w	r2, [r4], #2
 80090fa:	7043      	strb	r3, [r0, #1]
 80090fc:	dd20      	ble.n	8009140 <__exponent+0x5a>
 80090fe:	f10d 0307 	add.w	r3, sp, #7
 8009102:	461f      	mov	r7, r3
 8009104:	260a      	movs	r6, #10
 8009106:	fb91 f5f6 	sdiv	r5, r1, r6
 800910a:	fb06 1115 	mls	r1, r6, r5, r1
 800910e:	3130      	adds	r1, #48	; 0x30
 8009110:	2d09      	cmp	r5, #9
 8009112:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009116:	f103 32ff 	add.w	r2, r3, #4294967295
 800911a:	4629      	mov	r1, r5
 800911c:	dc09      	bgt.n	8009132 <__exponent+0x4c>
 800911e:	3130      	adds	r1, #48	; 0x30
 8009120:	3b02      	subs	r3, #2
 8009122:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009126:	42bb      	cmp	r3, r7
 8009128:	4622      	mov	r2, r4
 800912a:	d304      	bcc.n	8009136 <__exponent+0x50>
 800912c:	1a10      	subs	r0, r2, r0
 800912e:	b003      	add	sp, #12
 8009130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009132:	4613      	mov	r3, r2
 8009134:	e7e7      	b.n	8009106 <__exponent+0x20>
 8009136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800913a:	f804 2b01 	strb.w	r2, [r4], #1
 800913e:	e7f2      	b.n	8009126 <__exponent+0x40>
 8009140:	2330      	movs	r3, #48	; 0x30
 8009142:	4419      	add	r1, r3
 8009144:	7083      	strb	r3, [r0, #2]
 8009146:	1d02      	adds	r2, r0, #4
 8009148:	70c1      	strb	r1, [r0, #3]
 800914a:	e7ef      	b.n	800912c <__exponent+0x46>

0800914c <_printf_float>:
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	b08d      	sub	sp, #52	; 0x34
 8009152:	460c      	mov	r4, r1
 8009154:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009158:	4616      	mov	r6, r2
 800915a:	461f      	mov	r7, r3
 800915c:	4605      	mov	r5, r0
 800915e:	f001 f8ff 	bl	800a360 <_localeconv_r>
 8009162:	6803      	ldr	r3, [r0, #0]
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	4618      	mov	r0, r3
 8009168:	f7f7 f82e 	bl	80001c8 <strlen>
 800916c:	2300      	movs	r3, #0
 800916e:	930a      	str	r3, [sp, #40]	; 0x28
 8009170:	f8d8 3000 	ldr.w	r3, [r8]
 8009174:	9005      	str	r0, [sp, #20]
 8009176:	3307      	adds	r3, #7
 8009178:	f023 0307 	bic.w	r3, r3, #7
 800917c:	f103 0208 	add.w	r2, r3, #8
 8009180:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009184:	f8d4 b000 	ldr.w	fp, [r4]
 8009188:	f8c8 2000 	str.w	r2, [r8]
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009194:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009198:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800919c:	9307      	str	r3, [sp, #28]
 800919e:	f8cd 8018 	str.w	r8, [sp, #24]
 80091a2:	f04f 32ff 	mov.w	r2, #4294967295
 80091a6:	4ba7      	ldr	r3, [pc, #668]	; (8009444 <_printf_float+0x2f8>)
 80091a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ac:	f7f7 fc6a 	bl	8000a84 <__aeabi_dcmpun>
 80091b0:	bb70      	cbnz	r0, 8009210 <_printf_float+0xc4>
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	4ba3      	ldr	r3, [pc, #652]	; (8009444 <_printf_float+0x2f8>)
 80091b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091bc:	f7f7 fc44 	bl	8000a48 <__aeabi_dcmple>
 80091c0:	bb30      	cbnz	r0, 8009210 <_printf_float+0xc4>
 80091c2:	2200      	movs	r2, #0
 80091c4:	2300      	movs	r3, #0
 80091c6:	4640      	mov	r0, r8
 80091c8:	4649      	mov	r1, r9
 80091ca:	f7f7 fc33 	bl	8000a34 <__aeabi_dcmplt>
 80091ce:	b110      	cbz	r0, 80091d6 <_printf_float+0x8a>
 80091d0:	232d      	movs	r3, #45	; 0x2d
 80091d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091d6:	4a9c      	ldr	r2, [pc, #624]	; (8009448 <_printf_float+0x2fc>)
 80091d8:	4b9c      	ldr	r3, [pc, #624]	; (800944c <_printf_float+0x300>)
 80091da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80091de:	bf8c      	ite	hi
 80091e0:	4690      	movhi	r8, r2
 80091e2:	4698      	movls	r8, r3
 80091e4:	2303      	movs	r3, #3
 80091e6:	f02b 0204 	bic.w	r2, fp, #4
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	6022      	str	r2, [r4, #0]
 80091ee:	f04f 0900 	mov.w	r9, #0
 80091f2:	9700      	str	r7, [sp, #0]
 80091f4:	4633      	mov	r3, r6
 80091f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80091f8:	4621      	mov	r1, r4
 80091fa:	4628      	mov	r0, r5
 80091fc:	f000 f9e6 	bl	80095cc <_printf_common>
 8009200:	3001      	adds	r0, #1
 8009202:	f040 808d 	bne.w	8009320 <_printf_float+0x1d4>
 8009206:	f04f 30ff 	mov.w	r0, #4294967295
 800920a:	b00d      	add	sp, #52	; 0x34
 800920c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009210:	4642      	mov	r2, r8
 8009212:	464b      	mov	r3, r9
 8009214:	4640      	mov	r0, r8
 8009216:	4649      	mov	r1, r9
 8009218:	f7f7 fc34 	bl	8000a84 <__aeabi_dcmpun>
 800921c:	b110      	cbz	r0, 8009224 <_printf_float+0xd8>
 800921e:	4a8c      	ldr	r2, [pc, #560]	; (8009450 <_printf_float+0x304>)
 8009220:	4b8c      	ldr	r3, [pc, #560]	; (8009454 <_printf_float+0x308>)
 8009222:	e7da      	b.n	80091da <_printf_float+0x8e>
 8009224:	6861      	ldr	r1, [r4, #4]
 8009226:	1c4b      	adds	r3, r1, #1
 8009228:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800922c:	a80a      	add	r0, sp, #40	; 0x28
 800922e:	d13e      	bne.n	80092ae <_printf_float+0x162>
 8009230:	2306      	movs	r3, #6
 8009232:	6063      	str	r3, [r4, #4]
 8009234:	2300      	movs	r3, #0
 8009236:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800923a:	ab09      	add	r3, sp, #36	; 0x24
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	ec49 8b10 	vmov	d0, r8, r9
 8009242:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009246:	6022      	str	r2, [r4, #0]
 8009248:	f8cd a004 	str.w	sl, [sp, #4]
 800924c:	6861      	ldr	r1, [r4, #4]
 800924e:	4628      	mov	r0, r5
 8009250:	f7ff fee8 	bl	8009024 <__cvt>
 8009254:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009258:	2b47      	cmp	r3, #71	; 0x47
 800925a:	4680      	mov	r8, r0
 800925c:	d109      	bne.n	8009272 <_printf_float+0x126>
 800925e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009260:	1cd8      	adds	r0, r3, #3
 8009262:	db02      	blt.n	800926a <_printf_float+0x11e>
 8009264:	6862      	ldr	r2, [r4, #4]
 8009266:	4293      	cmp	r3, r2
 8009268:	dd47      	ble.n	80092fa <_printf_float+0x1ae>
 800926a:	f1aa 0a02 	sub.w	sl, sl, #2
 800926e:	fa5f fa8a 	uxtb.w	sl, sl
 8009272:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009276:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009278:	d824      	bhi.n	80092c4 <_printf_float+0x178>
 800927a:	3901      	subs	r1, #1
 800927c:	4652      	mov	r2, sl
 800927e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009282:	9109      	str	r1, [sp, #36]	; 0x24
 8009284:	f7ff ff2f 	bl	80090e6 <__exponent>
 8009288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800928a:	1813      	adds	r3, r2, r0
 800928c:	2a01      	cmp	r2, #1
 800928e:	4681      	mov	r9, r0
 8009290:	6123      	str	r3, [r4, #16]
 8009292:	dc02      	bgt.n	800929a <_printf_float+0x14e>
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	07d1      	lsls	r1, r2, #31
 8009298:	d501      	bpl.n	800929e <_printf_float+0x152>
 800929a:	3301      	adds	r3, #1
 800929c:	6123      	str	r3, [r4, #16]
 800929e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0a5      	beq.n	80091f2 <_printf_float+0xa6>
 80092a6:	232d      	movs	r3, #45	; 0x2d
 80092a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ac:	e7a1      	b.n	80091f2 <_printf_float+0xa6>
 80092ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80092b2:	f000 8177 	beq.w	80095a4 <_printf_float+0x458>
 80092b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80092ba:	d1bb      	bne.n	8009234 <_printf_float+0xe8>
 80092bc:	2900      	cmp	r1, #0
 80092be:	d1b9      	bne.n	8009234 <_printf_float+0xe8>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e7b6      	b.n	8009232 <_printf_float+0xe6>
 80092c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80092c8:	d119      	bne.n	80092fe <_printf_float+0x1b2>
 80092ca:	2900      	cmp	r1, #0
 80092cc:	6863      	ldr	r3, [r4, #4]
 80092ce:	dd0c      	ble.n	80092ea <_printf_float+0x19e>
 80092d0:	6121      	str	r1, [r4, #16]
 80092d2:	b913      	cbnz	r3, 80092da <_printf_float+0x18e>
 80092d4:	6822      	ldr	r2, [r4, #0]
 80092d6:	07d2      	lsls	r2, r2, #31
 80092d8:	d502      	bpl.n	80092e0 <_printf_float+0x194>
 80092da:	3301      	adds	r3, #1
 80092dc:	440b      	add	r3, r1
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80092e4:	f04f 0900 	mov.w	r9, #0
 80092e8:	e7d9      	b.n	800929e <_printf_float+0x152>
 80092ea:	b913      	cbnz	r3, 80092f2 <_printf_float+0x1a6>
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	07d0      	lsls	r0, r2, #31
 80092f0:	d501      	bpl.n	80092f6 <_printf_float+0x1aa>
 80092f2:	3302      	adds	r3, #2
 80092f4:	e7f3      	b.n	80092de <_printf_float+0x192>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e7f1      	b.n	80092de <_printf_float+0x192>
 80092fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80092fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009302:	4293      	cmp	r3, r2
 8009304:	db05      	blt.n	8009312 <_printf_float+0x1c6>
 8009306:	6822      	ldr	r2, [r4, #0]
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	07d1      	lsls	r1, r2, #31
 800930c:	d5e8      	bpl.n	80092e0 <_printf_float+0x194>
 800930e:	3301      	adds	r3, #1
 8009310:	e7e5      	b.n	80092de <_printf_float+0x192>
 8009312:	2b00      	cmp	r3, #0
 8009314:	bfd4      	ite	le
 8009316:	f1c3 0302 	rsble	r3, r3, #2
 800931a:	2301      	movgt	r3, #1
 800931c:	4413      	add	r3, r2
 800931e:	e7de      	b.n	80092de <_printf_float+0x192>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	055a      	lsls	r2, r3, #21
 8009324:	d407      	bmi.n	8009336 <_printf_float+0x1ea>
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	4642      	mov	r2, r8
 800932a:	4631      	mov	r1, r6
 800932c:	4628      	mov	r0, r5
 800932e:	47b8      	blx	r7
 8009330:	3001      	adds	r0, #1
 8009332:	d12b      	bne.n	800938c <_printf_float+0x240>
 8009334:	e767      	b.n	8009206 <_printf_float+0xba>
 8009336:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800933a:	f240 80dc 	bls.w	80094f6 <_printf_float+0x3aa>
 800933e:	2200      	movs	r2, #0
 8009340:	2300      	movs	r3, #0
 8009342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009346:	f7f7 fb6b 	bl	8000a20 <__aeabi_dcmpeq>
 800934a:	2800      	cmp	r0, #0
 800934c:	d033      	beq.n	80093b6 <_printf_float+0x26a>
 800934e:	2301      	movs	r3, #1
 8009350:	4a41      	ldr	r2, [pc, #260]	; (8009458 <_printf_float+0x30c>)
 8009352:	4631      	mov	r1, r6
 8009354:	4628      	mov	r0, r5
 8009356:	47b8      	blx	r7
 8009358:	3001      	adds	r0, #1
 800935a:	f43f af54 	beq.w	8009206 <_printf_float+0xba>
 800935e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009362:	429a      	cmp	r2, r3
 8009364:	db02      	blt.n	800936c <_printf_float+0x220>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	07d8      	lsls	r0, r3, #31
 800936a:	d50f      	bpl.n	800938c <_printf_float+0x240>
 800936c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009370:	4631      	mov	r1, r6
 8009372:	4628      	mov	r0, r5
 8009374:	47b8      	blx	r7
 8009376:	3001      	adds	r0, #1
 8009378:	f43f af45 	beq.w	8009206 <_printf_float+0xba>
 800937c:	f04f 0800 	mov.w	r8, #0
 8009380:	f104 091a 	add.w	r9, r4, #26
 8009384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009386:	3b01      	subs	r3, #1
 8009388:	4543      	cmp	r3, r8
 800938a:	dc09      	bgt.n	80093a0 <_printf_float+0x254>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	079b      	lsls	r3, r3, #30
 8009390:	f100 8103 	bmi.w	800959a <_printf_float+0x44e>
 8009394:	68e0      	ldr	r0, [r4, #12]
 8009396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009398:	4298      	cmp	r0, r3
 800939a:	bfb8      	it	lt
 800939c:	4618      	movlt	r0, r3
 800939e:	e734      	b.n	800920a <_printf_float+0xbe>
 80093a0:	2301      	movs	r3, #1
 80093a2:	464a      	mov	r2, r9
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	f43f af2b 	beq.w	8009206 <_printf_float+0xba>
 80093b0:	f108 0801 	add.w	r8, r8, #1
 80093b4:	e7e6      	b.n	8009384 <_printf_float+0x238>
 80093b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	dc2b      	bgt.n	8009414 <_printf_float+0x2c8>
 80093bc:	2301      	movs	r3, #1
 80093be:	4a26      	ldr	r2, [pc, #152]	; (8009458 <_printf_float+0x30c>)
 80093c0:	4631      	mov	r1, r6
 80093c2:	4628      	mov	r0, r5
 80093c4:	47b8      	blx	r7
 80093c6:	3001      	adds	r0, #1
 80093c8:	f43f af1d 	beq.w	8009206 <_printf_float+0xba>
 80093cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ce:	b923      	cbnz	r3, 80093da <_printf_float+0x28e>
 80093d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d2:	b913      	cbnz	r3, 80093da <_printf_float+0x28e>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	07d9      	lsls	r1, r3, #31
 80093d8:	d5d8      	bpl.n	800938c <_printf_float+0x240>
 80093da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093de:	4631      	mov	r1, r6
 80093e0:	4628      	mov	r0, r5
 80093e2:	47b8      	blx	r7
 80093e4:	3001      	adds	r0, #1
 80093e6:	f43f af0e 	beq.w	8009206 <_printf_float+0xba>
 80093ea:	f04f 0900 	mov.w	r9, #0
 80093ee:	f104 0a1a 	add.w	sl, r4, #26
 80093f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f4:	425b      	negs	r3, r3
 80093f6:	454b      	cmp	r3, r9
 80093f8:	dc01      	bgt.n	80093fe <_printf_float+0x2b2>
 80093fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fc:	e794      	b.n	8009328 <_printf_float+0x1dc>
 80093fe:	2301      	movs	r3, #1
 8009400:	4652      	mov	r2, sl
 8009402:	4631      	mov	r1, r6
 8009404:	4628      	mov	r0, r5
 8009406:	47b8      	blx	r7
 8009408:	3001      	adds	r0, #1
 800940a:	f43f aefc 	beq.w	8009206 <_printf_float+0xba>
 800940e:	f109 0901 	add.w	r9, r9, #1
 8009412:	e7ee      	b.n	80093f2 <_printf_float+0x2a6>
 8009414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009418:	429a      	cmp	r2, r3
 800941a:	bfa8      	it	ge
 800941c:	461a      	movge	r2, r3
 800941e:	2a00      	cmp	r2, #0
 8009420:	4691      	mov	r9, r2
 8009422:	dd07      	ble.n	8009434 <_printf_float+0x2e8>
 8009424:	4613      	mov	r3, r2
 8009426:	4631      	mov	r1, r6
 8009428:	4642      	mov	r2, r8
 800942a:	4628      	mov	r0, r5
 800942c:	47b8      	blx	r7
 800942e:	3001      	adds	r0, #1
 8009430:	f43f aee9 	beq.w	8009206 <_printf_float+0xba>
 8009434:	f104 031a 	add.w	r3, r4, #26
 8009438:	f04f 0b00 	mov.w	fp, #0
 800943c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009440:	9306      	str	r3, [sp, #24]
 8009442:	e015      	b.n	8009470 <_printf_float+0x324>
 8009444:	7fefffff 	.word	0x7fefffff
 8009448:	0800aa2c 	.word	0x0800aa2c
 800944c:	0800aa28 	.word	0x0800aa28
 8009450:	0800aa34 	.word	0x0800aa34
 8009454:	0800aa30 	.word	0x0800aa30
 8009458:	0800aa38 	.word	0x0800aa38
 800945c:	2301      	movs	r3, #1
 800945e:	9a06      	ldr	r2, [sp, #24]
 8009460:	4631      	mov	r1, r6
 8009462:	4628      	mov	r0, r5
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f aecd 	beq.w	8009206 <_printf_float+0xba>
 800946c:	f10b 0b01 	add.w	fp, fp, #1
 8009470:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009474:	ebaa 0309 	sub.w	r3, sl, r9
 8009478:	455b      	cmp	r3, fp
 800947a:	dcef      	bgt.n	800945c <_printf_float+0x310>
 800947c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009480:	429a      	cmp	r2, r3
 8009482:	44d0      	add	r8, sl
 8009484:	db15      	blt.n	80094b2 <_printf_float+0x366>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	07da      	lsls	r2, r3, #31
 800948a:	d412      	bmi.n	80094b2 <_printf_float+0x366>
 800948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009490:	eba3 020a 	sub.w	r2, r3, sl
 8009494:	eba3 0a01 	sub.w	sl, r3, r1
 8009498:	4592      	cmp	sl, r2
 800949a:	bfa8      	it	ge
 800949c:	4692      	movge	sl, r2
 800949e:	f1ba 0f00 	cmp.w	sl, #0
 80094a2:	dc0e      	bgt.n	80094c2 <_printf_float+0x376>
 80094a4:	f04f 0800 	mov.w	r8, #0
 80094a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094ac:	f104 091a 	add.w	r9, r4, #26
 80094b0:	e019      	b.n	80094e6 <_printf_float+0x39a>
 80094b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094b6:	4631      	mov	r1, r6
 80094b8:	4628      	mov	r0, r5
 80094ba:	47b8      	blx	r7
 80094bc:	3001      	adds	r0, #1
 80094be:	d1e5      	bne.n	800948c <_printf_float+0x340>
 80094c0:	e6a1      	b.n	8009206 <_printf_float+0xba>
 80094c2:	4653      	mov	r3, sl
 80094c4:	4642      	mov	r2, r8
 80094c6:	4631      	mov	r1, r6
 80094c8:	4628      	mov	r0, r5
 80094ca:	47b8      	blx	r7
 80094cc:	3001      	adds	r0, #1
 80094ce:	d1e9      	bne.n	80094a4 <_printf_float+0x358>
 80094d0:	e699      	b.n	8009206 <_printf_float+0xba>
 80094d2:	2301      	movs	r3, #1
 80094d4:	464a      	mov	r2, r9
 80094d6:	4631      	mov	r1, r6
 80094d8:	4628      	mov	r0, r5
 80094da:	47b8      	blx	r7
 80094dc:	3001      	adds	r0, #1
 80094de:	f43f ae92 	beq.w	8009206 <_printf_float+0xba>
 80094e2:	f108 0801 	add.w	r8, r8, #1
 80094e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	eba3 030a 	sub.w	r3, r3, sl
 80094f0:	4543      	cmp	r3, r8
 80094f2:	dcee      	bgt.n	80094d2 <_printf_float+0x386>
 80094f4:	e74a      	b.n	800938c <_printf_float+0x240>
 80094f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f8:	2a01      	cmp	r2, #1
 80094fa:	dc01      	bgt.n	8009500 <_printf_float+0x3b4>
 80094fc:	07db      	lsls	r3, r3, #31
 80094fe:	d53a      	bpl.n	8009576 <_printf_float+0x42a>
 8009500:	2301      	movs	r3, #1
 8009502:	4642      	mov	r2, r8
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	f43f ae7b 	beq.w	8009206 <_printf_float+0xba>
 8009510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009514:	4631      	mov	r1, r6
 8009516:	4628      	mov	r0, r5
 8009518:	47b8      	blx	r7
 800951a:	3001      	adds	r0, #1
 800951c:	f108 0801 	add.w	r8, r8, #1
 8009520:	f43f ae71 	beq.w	8009206 <_printf_float+0xba>
 8009524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009526:	2200      	movs	r2, #0
 8009528:	f103 3aff 	add.w	sl, r3, #4294967295
 800952c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009530:	2300      	movs	r3, #0
 8009532:	f7f7 fa75 	bl	8000a20 <__aeabi_dcmpeq>
 8009536:	b9c8      	cbnz	r0, 800956c <_printf_float+0x420>
 8009538:	4653      	mov	r3, sl
 800953a:	4642      	mov	r2, r8
 800953c:	4631      	mov	r1, r6
 800953e:	4628      	mov	r0, r5
 8009540:	47b8      	blx	r7
 8009542:	3001      	adds	r0, #1
 8009544:	d10e      	bne.n	8009564 <_printf_float+0x418>
 8009546:	e65e      	b.n	8009206 <_printf_float+0xba>
 8009548:	2301      	movs	r3, #1
 800954a:	4652      	mov	r2, sl
 800954c:	4631      	mov	r1, r6
 800954e:	4628      	mov	r0, r5
 8009550:	47b8      	blx	r7
 8009552:	3001      	adds	r0, #1
 8009554:	f43f ae57 	beq.w	8009206 <_printf_float+0xba>
 8009558:	f108 0801 	add.w	r8, r8, #1
 800955c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955e:	3b01      	subs	r3, #1
 8009560:	4543      	cmp	r3, r8
 8009562:	dcf1      	bgt.n	8009548 <_printf_float+0x3fc>
 8009564:	464b      	mov	r3, r9
 8009566:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800956a:	e6de      	b.n	800932a <_printf_float+0x1de>
 800956c:	f04f 0800 	mov.w	r8, #0
 8009570:	f104 0a1a 	add.w	sl, r4, #26
 8009574:	e7f2      	b.n	800955c <_printf_float+0x410>
 8009576:	2301      	movs	r3, #1
 8009578:	e7df      	b.n	800953a <_printf_float+0x3ee>
 800957a:	2301      	movs	r3, #1
 800957c:	464a      	mov	r2, r9
 800957e:	4631      	mov	r1, r6
 8009580:	4628      	mov	r0, r5
 8009582:	47b8      	blx	r7
 8009584:	3001      	adds	r0, #1
 8009586:	f43f ae3e 	beq.w	8009206 <_printf_float+0xba>
 800958a:	f108 0801 	add.w	r8, r8, #1
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009592:	1a9b      	subs	r3, r3, r2
 8009594:	4543      	cmp	r3, r8
 8009596:	dcf0      	bgt.n	800957a <_printf_float+0x42e>
 8009598:	e6fc      	b.n	8009394 <_printf_float+0x248>
 800959a:	f04f 0800 	mov.w	r8, #0
 800959e:	f104 0919 	add.w	r9, r4, #25
 80095a2:	e7f4      	b.n	800958e <_printf_float+0x442>
 80095a4:	2900      	cmp	r1, #0
 80095a6:	f43f ae8b 	beq.w	80092c0 <_printf_float+0x174>
 80095aa:	2300      	movs	r3, #0
 80095ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80095b0:	ab09      	add	r3, sp, #36	; 0x24
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	ec49 8b10 	vmov	d0, r8, r9
 80095b8:	6022      	str	r2, [r4, #0]
 80095ba:	f8cd a004 	str.w	sl, [sp, #4]
 80095be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095c2:	4628      	mov	r0, r5
 80095c4:	f7ff fd2e 	bl	8009024 <__cvt>
 80095c8:	4680      	mov	r8, r0
 80095ca:	e648      	b.n	800925e <_printf_float+0x112>

080095cc <_printf_common>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	4691      	mov	r9, r2
 80095d2:	461f      	mov	r7, r3
 80095d4:	688a      	ldr	r2, [r1, #8]
 80095d6:	690b      	ldr	r3, [r1, #16]
 80095d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095dc:	4293      	cmp	r3, r2
 80095de:	bfb8      	it	lt
 80095e0:	4613      	movlt	r3, r2
 80095e2:	f8c9 3000 	str.w	r3, [r9]
 80095e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095ea:	4606      	mov	r6, r0
 80095ec:	460c      	mov	r4, r1
 80095ee:	b112      	cbz	r2, 80095f6 <_printf_common+0x2a>
 80095f0:	3301      	adds	r3, #1
 80095f2:	f8c9 3000 	str.w	r3, [r9]
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	0699      	lsls	r1, r3, #26
 80095fa:	bf42      	ittt	mi
 80095fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009600:	3302      	addmi	r3, #2
 8009602:	f8c9 3000 	strmi.w	r3, [r9]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	f015 0506 	ands.w	r5, r5, #6
 800960c:	d107      	bne.n	800961e <_printf_common+0x52>
 800960e:	f104 0a19 	add.w	sl, r4, #25
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	f8d9 2000 	ldr.w	r2, [r9]
 8009618:	1a9b      	subs	r3, r3, r2
 800961a:	42ab      	cmp	r3, r5
 800961c:	dc28      	bgt.n	8009670 <_printf_common+0xa4>
 800961e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	3300      	adds	r3, #0
 8009626:	bf18      	it	ne
 8009628:	2301      	movne	r3, #1
 800962a:	0692      	lsls	r2, r2, #26
 800962c:	d42d      	bmi.n	800968a <_printf_common+0xbe>
 800962e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009632:	4639      	mov	r1, r7
 8009634:	4630      	mov	r0, r6
 8009636:	47c0      	blx	r8
 8009638:	3001      	adds	r0, #1
 800963a:	d020      	beq.n	800967e <_printf_common+0xb2>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	68e5      	ldr	r5, [r4, #12]
 8009640:	f8d9 2000 	ldr.w	r2, [r9]
 8009644:	f003 0306 	and.w	r3, r3, #6
 8009648:	2b04      	cmp	r3, #4
 800964a:	bf08      	it	eq
 800964c:	1aad      	subeq	r5, r5, r2
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	6922      	ldr	r2, [r4, #16]
 8009652:	bf0c      	ite	eq
 8009654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009658:	2500      	movne	r5, #0
 800965a:	4293      	cmp	r3, r2
 800965c:	bfc4      	itt	gt
 800965e:	1a9b      	subgt	r3, r3, r2
 8009660:	18ed      	addgt	r5, r5, r3
 8009662:	f04f 0900 	mov.w	r9, #0
 8009666:	341a      	adds	r4, #26
 8009668:	454d      	cmp	r5, r9
 800966a:	d11a      	bne.n	80096a2 <_printf_common+0xd6>
 800966c:	2000      	movs	r0, #0
 800966e:	e008      	b.n	8009682 <_printf_common+0xb6>
 8009670:	2301      	movs	r3, #1
 8009672:	4652      	mov	r2, sl
 8009674:	4639      	mov	r1, r7
 8009676:	4630      	mov	r0, r6
 8009678:	47c0      	blx	r8
 800967a:	3001      	adds	r0, #1
 800967c:	d103      	bne.n	8009686 <_printf_common+0xba>
 800967e:	f04f 30ff 	mov.w	r0, #4294967295
 8009682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009686:	3501      	adds	r5, #1
 8009688:	e7c3      	b.n	8009612 <_printf_common+0x46>
 800968a:	18e1      	adds	r1, r4, r3
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	2030      	movs	r0, #48	; 0x30
 8009690:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009694:	4422      	add	r2, r4
 8009696:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800969a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800969e:	3302      	adds	r3, #2
 80096a0:	e7c5      	b.n	800962e <_printf_common+0x62>
 80096a2:	2301      	movs	r3, #1
 80096a4:	4622      	mov	r2, r4
 80096a6:	4639      	mov	r1, r7
 80096a8:	4630      	mov	r0, r6
 80096aa:	47c0      	blx	r8
 80096ac:	3001      	adds	r0, #1
 80096ae:	d0e6      	beq.n	800967e <_printf_common+0xb2>
 80096b0:	f109 0901 	add.w	r9, r9, #1
 80096b4:	e7d8      	b.n	8009668 <_printf_common+0x9c>
	...

080096b8 <_sbrk_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4c06      	ldr	r4, [pc, #24]	; (80096d4 <_sbrk_r+0x1c>)
 80096bc:	2300      	movs	r3, #0
 80096be:	4605      	mov	r5, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	6023      	str	r3, [r4, #0]
 80096c4:	f7f8 f826 	bl	8001714 <_sbrk>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_sbrk_r+0x1a>
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_sbrk_r+0x1a>
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20001d7c 	.word	0x20001d7c

080096d8 <quorem>:
 80096d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	6903      	ldr	r3, [r0, #16]
 80096de:	690c      	ldr	r4, [r1, #16]
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	4680      	mov	r8, r0
 80096e4:	f2c0 8082 	blt.w	80097ec <quorem+0x114>
 80096e8:	3c01      	subs	r4, #1
 80096ea:	f101 0714 	add.w	r7, r1, #20
 80096ee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80096f2:	f100 0614 	add.w	r6, r0, #20
 80096f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80096fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80096fe:	eb06 030c 	add.w	r3, r6, ip
 8009702:	3501      	adds	r5, #1
 8009704:	eb07 090c 	add.w	r9, r7, ip
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	fbb0 f5f5 	udiv	r5, r0, r5
 800970e:	b395      	cbz	r5, 8009776 <quorem+0x9e>
 8009710:	f04f 0a00 	mov.w	sl, #0
 8009714:	4638      	mov	r0, r7
 8009716:	46b6      	mov	lr, r6
 8009718:	46d3      	mov	fp, sl
 800971a:	f850 2b04 	ldr.w	r2, [r0], #4
 800971e:	b293      	uxth	r3, r2
 8009720:	fb05 a303 	mla	r3, r5, r3, sl
 8009724:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009728:	b29b      	uxth	r3, r3
 800972a:	ebab 0303 	sub.w	r3, fp, r3
 800972e:	0c12      	lsrs	r2, r2, #16
 8009730:	f8de b000 	ldr.w	fp, [lr]
 8009734:	fb05 a202 	mla	r2, r5, r2, sl
 8009738:	fa13 f38b 	uxtah	r3, r3, fp
 800973c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009740:	fa1f fb82 	uxth.w	fp, r2
 8009744:	f8de 2000 	ldr.w	r2, [lr]
 8009748:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800974c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009750:	b29b      	uxth	r3, r3
 8009752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009756:	4581      	cmp	r9, r0
 8009758:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800975c:	f84e 3b04 	str.w	r3, [lr], #4
 8009760:	d2db      	bcs.n	800971a <quorem+0x42>
 8009762:	f856 300c 	ldr.w	r3, [r6, ip]
 8009766:	b933      	cbnz	r3, 8009776 <quorem+0x9e>
 8009768:	9b01      	ldr	r3, [sp, #4]
 800976a:	3b04      	subs	r3, #4
 800976c:	429e      	cmp	r6, r3
 800976e:	461a      	mov	r2, r3
 8009770:	d330      	bcc.n	80097d4 <quorem+0xfc>
 8009772:	f8c8 4010 	str.w	r4, [r8, #16]
 8009776:	4640      	mov	r0, r8
 8009778:	f001 f822 	bl	800a7c0 <__mcmp>
 800977c:	2800      	cmp	r0, #0
 800977e:	db25      	blt.n	80097cc <quorem+0xf4>
 8009780:	3501      	adds	r5, #1
 8009782:	4630      	mov	r0, r6
 8009784:	f04f 0c00 	mov.w	ip, #0
 8009788:	f857 2b04 	ldr.w	r2, [r7], #4
 800978c:	f8d0 e000 	ldr.w	lr, [r0]
 8009790:	b293      	uxth	r3, r2
 8009792:	ebac 0303 	sub.w	r3, ip, r3
 8009796:	0c12      	lsrs	r2, r2, #16
 8009798:	fa13 f38e 	uxtah	r3, r3, lr
 800979c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097aa:	45b9      	cmp	r9, r7
 80097ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097b0:	f840 3b04 	str.w	r3, [r0], #4
 80097b4:	d2e8      	bcs.n	8009788 <quorem+0xb0>
 80097b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80097ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80097be:	b92a      	cbnz	r2, 80097cc <quorem+0xf4>
 80097c0:	3b04      	subs	r3, #4
 80097c2:	429e      	cmp	r6, r3
 80097c4:	461a      	mov	r2, r3
 80097c6:	d30b      	bcc.n	80097e0 <quorem+0x108>
 80097c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80097cc:	4628      	mov	r0, r5
 80097ce:	b003      	add	sp, #12
 80097d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d4:	6812      	ldr	r2, [r2, #0]
 80097d6:	3b04      	subs	r3, #4
 80097d8:	2a00      	cmp	r2, #0
 80097da:	d1ca      	bne.n	8009772 <quorem+0x9a>
 80097dc:	3c01      	subs	r4, #1
 80097de:	e7c5      	b.n	800976c <quorem+0x94>
 80097e0:	6812      	ldr	r2, [r2, #0]
 80097e2:	3b04      	subs	r3, #4
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	d1ef      	bne.n	80097c8 <quorem+0xf0>
 80097e8:	3c01      	subs	r4, #1
 80097ea:	e7ea      	b.n	80097c2 <quorem+0xea>
 80097ec:	2000      	movs	r0, #0
 80097ee:	e7ee      	b.n	80097ce <quorem+0xf6>

080097f0 <_dtoa_r>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	ec57 6b10 	vmov	r6, r7, d0
 80097f8:	b097      	sub	sp, #92	; 0x5c
 80097fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097fc:	9106      	str	r1, [sp, #24]
 80097fe:	4604      	mov	r4, r0
 8009800:	920b      	str	r2, [sp, #44]	; 0x2c
 8009802:	9312      	str	r3, [sp, #72]	; 0x48
 8009804:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009808:	e9cd 6700 	strd	r6, r7, [sp]
 800980c:	b93d      	cbnz	r5, 800981e <_dtoa_r+0x2e>
 800980e:	2010      	movs	r0, #16
 8009810:	f7ff fb48 	bl	8008ea4 <malloc>
 8009814:	6260      	str	r0, [r4, #36]	; 0x24
 8009816:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800981a:	6005      	str	r5, [r0, #0]
 800981c:	60c5      	str	r5, [r0, #12]
 800981e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009820:	6819      	ldr	r1, [r3, #0]
 8009822:	b151      	cbz	r1, 800983a <_dtoa_r+0x4a>
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	604a      	str	r2, [r1, #4]
 8009828:	2301      	movs	r3, #1
 800982a:	4093      	lsls	r3, r2
 800982c:	608b      	str	r3, [r1, #8]
 800982e:	4620      	mov	r0, r4
 8009830:	f000 fde5 	bl	800a3fe <_Bfree>
 8009834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	1e3b      	subs	r3, r7, #0
 800983c:	bfbb      	ittet	lt
 800983e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009842:	9301      	strlt	r3, [sp, #4]
 8009844:	2300      	movge	r3, #0
 8009846:	2201      	movlt	r2, #1
 8009848:	bfac      	ite	ge
 800984a:	f8c8 3000 	strge.w	r3, [r8]
 800984e:	f8c8 2000 	strlt.w	r2, [r8]
 8009852:	4baf      	ldr	r3, [pc, #700]	; (8009b10 <_dtoa_r+0x320>)
 8009854:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009858:	ea33 0308 	bics.w	r3, r3, r8
 800985c:	d114      	bne.n	8009888 <_dtoa_r+0x98>
 800985e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009860:	f242 730f 	movw	r3, #9999	; 0x270f
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	b923      	cbnz	r3, 8009874 <_dtoa_r+0x84>
 800986a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800986e:	2800      	cmp	r0, #0
 8009870:	f000 8542 	beq.w	800a2f8 <_dtoa_r+0xb08>
 8009874:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009876:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009b24 <_dtoa_r+0x334>
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8544 	beq.w	800a308 <_dtoa_r+0xb18>
 8009880:	f10b 0303 	add.w	r3, fp, #3
 8009884:	f000 bd3e 	b.w	800a304 <_dtoa_r+0xb14>
 8009888:	e9dd 6700 	ldrd	r6, r7, [sp]
 800988c:	2200      	movs	r2, #0
 800988e:	2300      	movs	r3, #0
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f7 f8c4 	bl	8000a20 <__aeabi_dcmpeq>
 8009898:	4681      	mov	r9, r0
 800989a:	b168      	cbz	r0, 80098b8 <_dtoa_r+0xc8>
 800989c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800989e:	2301      	movs	r3, #1
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8524 	beq.w	800a2f2 <_dtoa_r+0xb02>
 80098aa:	4b9a      	ldr	r3, [pc, #616]	; (8009b14 <_dtoa_r+0x324>)
 80098ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	f000 bd28 	b.w	800a308 <_dtoa_r+0xb18>
 80098b8:	aa14      	add	r2, sp, #80	; 0x50
 80098ba:	a915      	add	r1, sp, #84	; 0x54
 80098bc:	ec47 6b10 	vmov	d0, r6, r7
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fff4 	bl	800a8ae <__d2b>
 80098c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80098ca:	9004      	str	r0, [sp, #16]
 80098cc:	2d00      	cmp	r5, #0
 80098ce:	d07c      	beq.n	80099ca <_dtoa_r+0x1da>
 80098d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80098d8:	46b2      	mov	sl, r6
 80098da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80098de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80098e6:	2200      	movs	r2, #0
 80098e8:	4b8b      	ldr	r3, [pc, #556]	; (8009b18 <_dtoa_r+0x328>)
 80098ea:	4650      	mov	r0, sl
 80098ec:	4659      	mov	r1, fp
 80098ee:	f7f6 fc77 	bl	80001e0 <__aeabi_dsub>
 80098f2:	a381      	add	r3, pc, #516	; (adr r3, 8009af8 <_dtoa_r+0x308>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fe2a 	bl	8000550 <__aeabi_dmul>
 80098fc:	a380      	add	r3, pc, #512	; (adr r3, 8009b00 <_dtoa_r+0x310>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 fc6f 	bl	80001e4 <__adddf3>
 8009906:	4606      	mov	r6, r0
 8009908:	4628      	mov	r0, r5
 800990a:	460f      	mov	r7, r1
 800990c:	f7f6 fdb6 	bl	800047c <__aeabi_i2d>
 8009910:	a37d      	add	r3, pc, #500	; (adr r3, 8009b08 <_dtoa_r+0x318>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	f7f6 fe1b 	bl	8000550 <__aeabi_dmul>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4630      	mov	r0, r6
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fc5f 	bl	80001e4 <__adddf3>
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	f7f7 f8c1 	bl	8000ab0 <__aeabi_d2iz>
 800992e:	2200      	movs	r2, #0
 8009930:	4682      	mov	sl, r0
 8009932:	2300      	movs	r3, #0
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f7 f87c 	bl	8000a34 <__aeabi_dcmplt>
 800993c:	b148      	cbz	r0, 8009952 <_dtoa_r+0x162>
 800993e:	4650      	mov	r0, sl
 8009940:	f7f6 fd9c 	bl	800047c <__aeabi_i2d>
 8009944:	4632      	mov	r2, r6
 8009946:	463b      	mov	r3, r7
 8009948:	f7f7 f86a 	bl	8000a20 <__aeabi_dcmpeq>
 800994c:	b908      	cbnz	r0, 8009952 <_dtoa_r+0x162>
 800994e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009952:	f1ba 0f16 	cmp.w	sl, #22
 8009956:	d859      	bhi.n	8009a0c <_dtoa_r+0x21c>
 8009958:	4970      	ldr	r1, [pc, #448]	; (8009b1c <_dtoa_r+0x32c>)
 800995a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800995e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009966:	f7f7 f883 	bl	8000a70 <__aeabi_dcmpgt>
 800996a:	2800      	cmp	r0, #0
 800996c:	d050      	beq.n	8009a10 <_dtoa_r+0x220>
 800996e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009972:	2300      	movs	r3, #0
 8009974:	930f      	str	r3, [sp, #60]	; 0x3c
 8009976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009978:	1b5d      	subs	r5, r3, r5
 800997a:	f1b5 0801 	subs.w	r8, r5, #1
 800997e:	bf49      	itett	mi
 8009980:	f1c5 0301 	rsbmi	r3, r5, #1
 8009984:	2300      	movpl	r3, #0
 8009986:	9305      	strmi	r3, [sp, #20]
 8009988:	f04f 0800 	movmi.w	r8, #0
 800998c:	bf58      	it	pl
 800998e:	9305      	strpl	r3, [sp, #20]
 8009990:	f1ba 0f00 	cmp.w	sl, #0
 8009994:	db3e      	blt.n	8009a14 <_dtoa_r+0x224>
 8009996:	2300      	movs	r3, #0
 8009998:	44d0      	add	r8, sl
 800999a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800999e:	9307      	str	r3, [sp, #28]
 80099a0:	9b06      	ldr	r3, [sp, #24]
 80099a2:	2b09      	cmp	r3, #9
 80099a4:	f200 8090 	bhi.w	8009ac8 <_dtoa_r+0x2d8>
 80099a8:	2b05      	cmp	r3, #5
 80099aa:	bfc4      	itt	gt
 80099ac:	3b04      	subgt	r3, #4
 80099ae:	9306      	strgt	r3, [sp, #24]
 80099b0:	9b06      	ldr	r3, [sp, #24]
 80099b2:	f1a3 0302 	sub.w	r3, r3, #2
 80099b6:	bfcc      	ite	gt
 80099b8:	2500      	movgt	r5, #0
 80099ba:	2501      	movle	r5, #1
 80099bc:	2b03      	cmp	r3, #3
 80099be:	f200 808f 	bhi.w	8009ae0 <_dtoa_r+0x2f0>
 80099c2:	e8df f003 	tbb	[pc, r3]
 80099c6:	7f7d      	.short	0x7f7d
 80099c8:	7131      	.short	0x7131
 80099ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80099ce:	441d      	add	r5, r3
 80099d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80099d4:	2820      	cmp	r0, #32
 80099d6:	dd13      	ble.n	8009a00 <_dtoa_r+0x210>
 80099d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80099dc:	9b00      	ldr	r3, [sp, #0]
 80099de:	fa08 f800 	lsl.w	r8, r8, r0
 80099e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80099e6:	fa23 f000 	lsr.w	r0, r3, r0
 80099ea:	ea48 0000 	orr.w	r0, r8, r0
 80099ee:	f7f6 fd35 	bl	800045c <__aeabi_ui2d>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4682      	mov	sl, r0
 80099f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80099fa:	3d01      	subs	r5, #1
 80099fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80099fe:	e772      	b.n	80098e6 <_dtoa_r+0xf6>
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	f1c0 0020 	rsb	r0, r0, #32
 8009a06:	fa03 f000 	lsl.w	r0, r3, r0
 8009a0a:	e7f0      	b.n	80099ee <_dtoa_r+0x1fe>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e7b1      	b.n	8009974 <_dtoa_r+0x184>
 8009a10:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a12:	e7b0      	b.n	8009976 <_dtoa_r+0x186>
 8009a14:	9b05      	ldr	r3, [sp, #20]
 8009a16:	eba3 030a 	sub.w	r3, r3, sl
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	f1ca 0300 	rsb	r3, sl, #0
 8009a20:	9307      	str	r3, [sp, #28]
 8009a22:	2300      	movs	r3, #0
 8009a24:	930e      	str	r3, [sp, #56]	; 0x38
 8009a26:	e7bb      	b.n	80099a0 <_dtoa_r+0x1b0>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dd59      	ble.n	8009ae6 <_dtoa_r+0x2f6>
 8009a32:	9302      	str	r3, [sp, #8]
 8009a34:	4699      	mov	r9, r3
 8009a36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a38:	2200      	movs	r2, #0
 8009a3a:	6072      	str	r2, [r6, #4]
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	f102 0014 	add.w	r0, r2, #20
 8009a42:	4298      	cmp	r0, r3
 8009a44:	6871      	ldr	r1, [r6, #4]
 8009a46:	d953      	bls.n	8009af0 <_dtoa_r+0x300>
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fca4 	bl	800a396 <_Balloc>
 8009a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a50:	6030      	str	r0, [r6, #0]
 8009a52:	f1b9 0f0e 	cmp.w	r9, #14
 8009a56:	f8d3 b000 	ldr.w	fp, [r3]
 8009a5a:	f200 80e6 	bhi.w	8009c2a <_dtoa_r+0x43a>
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	f000 80e3 	beq.w	8009c2a <_dtoa_r+0x43a>
 8009a64:	ed9d 7b00 	vldr	d7, [sp]
 8009a68:	f1ba 0f00 	cmp.w	sl, #0
 8009a6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009a70:	dd74      	ble.n	8009b5c <_dtoa_r+0x36c>
 8009a72:	4a2a      	ldr	r2, [pc, #168]	; (8009b1c <_dtoa_r+0x32c>)
 8009a74:	f00a 030f 	and.w	r3, sl, #15
 8009a78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a7c:	ed93 7b00 	vldr	d7, [r3]
 8009a80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009a84:	06f0      	lsls	r0, r6, #27
 8009a86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009a8a:	d565      	bpl.n	8009b58 <_dtoa_r+0x368>
 8009a8c:	4b24      	ldr	r3, [pc, #144]	; (8009b20 <_dtoa_r+0x330>)
 8009a8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a96:	f7f6 fe85 	bl	80007a4 <__aeabi_ddiv>
 8009a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8009a9e:	f006 060f 	and.w	r6, r6, #15
 8009aa2:	2503      	movs	r5, #3
 8009aa4:	4f1e      	ldr	r7, [pc, #120]	; (8009b20 <_dtoa_r+0x330>)
 8009aa6:	e04c      	b.n	8009b42 <_dtoa_r+0x352>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8009aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aae:	4453      	add	r3, sl
 8009ab0:	f103 0901 	add.w	r9, r3, #1
 8009ab4:	9302      	str	r3, [sp, #8]
 8009ab6:	464b      	mov	r3, r9
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	bfb8      	it	lt
 8009abc:	2301      	movlt	r3, #1
 8009abe:	e7ba      	b.n	8009a36 <_dtoa_r+0x246>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	e7b2      	b.n	8009a2a <_dtoa_r+0x23a>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e7f0      	b.n	8009aaa <_dtoa_r+0x2ba>
 8009ac8:	2501      	movs	r5, #1
 8009aca:	2300      	movs	r3, #0
 8009acc:	9306      	str	r3, [sp, #24]
 8009ace:	950a      	str	r5, [sp, #40]	; 0x28
 8009ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad4:	9302      	str	r3, [sp, #8]
 8009ad6:	4699      	mov	r9, r3
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2312      	movs	r3, #18
 8009adc:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ade:	e7aa      	b.n	8009a36 <_dtoa_r+0x246>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae4:	e7f4      	b.n	8009ad0 <_dtoa_r+0x2e0>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9302      	str	r3, [sp, #8]
 8009aea:	4699      	mov	r9, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	e7f5      	b.n	8009adc <_dtoa_r+0x2ec>
 8009af0:	3101      	adds	r1, #1
 8009af2:	6071      	str	r1, [r6, #4]
 8009af4:	0052      	lsls	r2, r2, #1
 8009af6:	e7a2      	b.n	8009a3e <_dtoa_r+0x24e>
 8009af8:	636f4361 	.word	0x636f4361
 8009afc:	3fd287a7 	.word	0x3fd287a7
 8009b00:	8b60c8b3 	.word	0x8b60c8b3
 8009b04:	3fc68a28 	.word	0x3fc68a28
 8009b08:	509f79fb 	.word	0x509f79fb
 8009b0c:	3fd34413 	.word	0x3fd34413
 8009b10:	7ff00000 	.word	0x7ff00000
 8009b14:	0800aa39 	.word	0x0800aa39
 8009b18:	3ff80000 	.word	0x3ff80000
 8009b1c:	0800aa70 	.word	0x0800aa70
 8009b20:	0800aa48 	.word	0x0800aa48
 8009b24:	0800aa43 	.word	0x0800aa43
 8009b28:	07f1      	lsls	r1, r6, #31
 8009b2a:	d508      	bpl.n	8009b3e <_dtoa_r+0x34e>
 8009b2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b34:	f7f6 fd0c 	bl	8000550 <__aeabi_dmul>
 8009b38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b3c:	3501      	adds	r5, #1
 8009b3e:	1076      	asrs	r6, r6, #1
 8009b40:	3708      	adds	r7, #8
 8009b42:	2e00      	cmp	r6, #0
 8009b44:	d1f0      	bne.n	8009b28 <_dtoa_r+0x338>
 8009b46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b4e:	f7f6 fe29 	bl	80007a4 <__aeabi_ddiv>
 8009b52:	e9cd 0100 	strd	r0, r1, [sp]
 8009b56:	e01a      	b.n	8009b8e <_dtoa_r+0x39e>
 8009b58:	2502      	movs	r5, #2
 8009b5a:	e7a3      	b.n	8009aa4 <_dtoa_r+0x2b4>
 8009b5c:	f000 80a0 	beq.w	8009ca0 <_dtoa_r+0x4b0>
 8009b60:	f1ca 0600 	rsb	r6, sl, #0
 8009b64:	4b9f      	ldr	r3, [pc, #636]	; (8009de4 <_dtoa_r+0x5f4>)
 8009b66:	4fa0      	ldr	r7, [pc, #640]	; (8009de8 <_dtoa_r+0x5f8>)
 8009b68:	f006 020f 	and.w	r2, r6, #15
 8009b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b78:	f7f6 fcea 	bl	8000550 <__aeabi_dmul>
 8009b7c:	e9cd 0100 	strd	r0, r1, [sp]
 8009b80:	1136      	asrs	r6, r6, #4
 8009b82:	2300      	movs	r3, #0
 8009b84:	2502      	movs	r5, #2
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	d17f      	bne.n	8009c8a <_dtoa_r+0x49a>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e1      	bne.n	8009b52 <_dtoa_r+0x362>
 8009b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 8087 	beq.w	8009ca4 <_dtoa_r+0x4b4>
 8009b96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4b93      	ldr	r3, [pc, #588]	; (8009dec <_dtoa_r+0x5fc>)
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	4639      	mov	r1, r7
 8009ba2:	f7f6 ff47 	bl	8000a34 <__aeabi_dcmplt>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d07c      	beq.n	8009ca4 <_dtoa_r+0x4b4>
 8009baa:	f1b9 0f00 	cmp.w	r9, #0
 8009bae:	d079      	beq.n	8009ca4 <_dtoa_r+0x4b4>
 8009bb0:	9b02      	ldr	r3, [sp, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dd35      	ble.n	8009c22 <_dtoa_r+0x432>
 8009bb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bba:	9308      	str	r3, [sp, #32]
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4b8b      	ldr	r3, [pc, #556]	; (8009df0 <_dtoa_r+0x600>)
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7f6 fcc4 	bl	8000550 <__aeabi_dmul>
 8009bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8009bcc:	9f02      	ldr	r7, [sp, #8]
 8009bce:	3501      	adds	r5, #1
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f7f6 fc53 	bl	800047c <__aeabi_i2d>
 8009bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bda:	f7f6 fcb9 	bl	8000550 <__aeabi_dmul>
 8009bde:	2200      	movs	r2, #0
 8009be0:	4b84      	ldr	r3, [pc, #528]	; (8009df4 <_dtoa_r+0x604>)
 8009be2:	f7f6 faff 	bl	80001e4 <__adddf3>
 8009be6:	4605      	mov	r5, r0
 8009be8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bec:	2f00      	cmp	r7, #0
 8009bee:	d15d      	bne.n	8009cac <_dtoa_r+0x4bc>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4b81      	ldr	r3, [pc, #516]	; (8009df8 <_dtoa_r+0x608>)
 8009bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bf8:	f7f6 faf2 	bl	80001e0 <__aeabi_dsub>
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4633      	mov	r3, r6
 8009c00:	e9cd 0100 	strd	r0, r1, [sp]
 8009c04:	f7f6 ff34 	bl	8000a70 <__aeabi_dcmpgt>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	f040 8288 	bne.w	800a11e <_dtoa_r+0x92e>
 8009c0e:	462a      	mov	r2, r5
 8009c10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c18:	f7f6 ff0c 	bl	8000a34 <__aeabi_dcmplt>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f040 827c 	bne.w	800a11a <_dtoa_r+0x92a>
 8009c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c26:	e9cd 2300 	strd	r2, r3, [sp]
 8009c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f2c0 8150 	blt.w	8009ed2 <_dtoa_r+0x6e2>
 8009c32:	f1ba 0f0e 	cmp.w	sl, #14
 8009c36:	f300 814c 	bgt.w	8009ed2 <_dtoa_r+0x6e2>
 8009c3a:	4b6a      	ldr	r3, [pc, #424]	; (8009de4 <_dtoa_r+0x5f4>)
 8009c3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c40:	ed93 7b00 	vldr	d7, [r3]
 8009c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c4c:	f280 80d8 	bge.w	8009e00 <_dtoa_r+0x610>
 8009c50:	f1b9 0f00 	cmp.w	r9, #0
 8009c54:	f300 80d4 	bgt.w	8009e00 <_dtoa_r+0x610>
 8009c58:	f040 825e 	bne.w	800a118 <_dtoa_r+0x928>
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4b66      	ldr	r3, [pc, #408]	; (8009df8 <_dtoa_r+0x608>)
 8009c60:	ec51 0b17 	vmov	r0, r1, d7
 8009c64:	f7f6 fc74 	bl	8000550 <__aeabi_dmul>
 8009c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c6c:	f7f6 fef6 	bl	8000a5c <__aeabi_dcmpge>
 8009c70:	464f      	mov	r7, r9
 8009c72:	464e      	mov	r6, r9
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f040 8234 	bne.w	800a0e2 <_dtoa_r+0x8f2>
 8009c7a:	2331      	movs	r3, #49	; 0x31
 8009c7c:	f10b 0501 	add.w	r5, fp, #1
 8009c80:	f88b 3000 	strb.w	r3, [fp]
 8009c84:	f10a 0a01 	add.w	sl, sl, #1
 8009c88:	e22f      	b.n	800a0ea <_dtoa_r+0x8fa>
 8009c8a:	07f2      	lsls	r2, r6, #31
 8009c8c:	d505      	bpl.n	8009c9a <_dtoa_r+0x4aa>
 8009c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c92:	f7f6 fc5d 	bl	8000550 <__aeabi_dmul>
 8009c96:	3501      	adds	r5, #1
 8009c98:	2301      	movs	r3, #1
 8009c9a:	1076      	asrs	r6, r6, #1
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	e772      	b.n	8009b86 <_dtoa_r+0x396>
 8009ca0:	2502      	movs	r5, #2
 8009ca2:	e774      	b.n	8009b8e <_dtoa_r+0x39e>
 8009ca4:	f8cd a020 	str.w	sl, [sp, #32]
 8009ca8:	464f      	mov	r7, r9
 8009caa:	e791      	b.n	8009bd0 <_dtoa_r+0x3e0>
 8009cac:	4b4d      	ldr	r3, [pc, #308]	; (8009de4 <_dtoa_r+0x5f4>)
 8009cae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d047      	beq.n	8009d4c <_dtoa_r+0x55c>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	494e      	ldr	r1, [pc, #312]	; (8009dfc <_dtoa_r+0x60c>)
 8009cc4:	f7f6 fd6e 	bl	80007a4 <__aeabi_ddiv>
 8009cc8:	462a      	mov	r2, r5
 8009cca:	4633      	mov	r3, r6
 8009ccc:	f7f6 fa88 	bl	80001e0 <__aeabi_dsub>
 8009cd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009cd4:	465d      	mov	r5, fp
 8009cd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cda:	f7f6 fee9 	bl	8000ab0 <__aeabi_d2iz>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	f7f6 fbcc 	bl	800047c <__aeabi_i2d>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cec:	f7f6 fa78 	bl	80001e0 <__aeabi_dsub>
 8009cf0:	3630      	adds	r6, #48	; 0x30
 8009cf2:	f805 6b01 	strb.w	r6, [r5], #1
 8009cf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8009cfe:	f7f6 fe99 	bl	8000a34 <__aeabi_dcmplt>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d163      	bne.n	8009dce <_dtoa_r+0x5de>
 8009d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	4937      	ldr	r1, [pc, #220]	; (8009dec <_dtoa_r+0x5fc>)
 8009d0e:	f7f6 fa67 	bl	80001e0 <__aeabi_dsub>
 8009d12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d16:	f7f6 fe8d 	bl	8000a34 <__aeabi_dcmplt>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	f040 80b7 	bne.w	8009e8e <_dtoa_r+0x69e>
 8009d20:	eba5 030b 	sub.w	r3, r5, fp
 8009d24:	429f      	cmp	r7, r3
 8009d26:	f77f af7c 	ble.w	8009c22 <_dtoa_r+0x432>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	4b30      	ldr	r3, [pc, #192]	; (8009df0 <_dtoa_r+0x600>)
 8009d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d32:	f7f6 fc0d 	bl	8000550 <__aeabi_dmul>
 8009d36:	2200      	movs	r2, #0
 8009d38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d3c:	4b2c      	ldr	r3, [pc, #176]	; (8009df0 <_dtoa_r+0x600>)
 8009d3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d42:	f7f6 fc05 	bl	8000550 <__aeabi_dmul>
 8009d46:	e9cd 0100 	strd	r0, r1, [sp]
 8009d4a:	e7c4      	b.n	8009cd6 <_dtoa_r+0x4e6>
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4633      	mov	r3, r6
 8009d50:	f7f6 fbfe 	bl	8000550 <__aeabi_dmul>
 8009d54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d58:	eb0b 0507 	add.w	r5, fp, r7
 8009d5c:	465e      	mov	r6, fp
 8009d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d62:	f7f6 fea5 	bl	8000ab0 <__aeabi_d2iz>
 8009d66:	4607      	mov	r7, r0
 8009d68:	f7f6 fb88 	bl	800047c <__aeabi_i2d>
 8009d6c:	3730      	adds	r7, #48	; 0x30
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d76:	f7f6 fa33 	bl	80001e0 <__aeabi_dsub>
 8009d7a:	f806 7b01 	strb.w	r7, [r6], #1
 8009d7e:	42ae      	cmp	r6, r5
 8009d80:	e9cd 0100 	strd	r0, r1, [sp]
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	d126      	bne.n	8009dd8 <_dtoa_r+0x5e8>
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <_dtoa_r+0x60c>)
 8009d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d90:	f7f6 fa28 	bl	80001e4 <__adddf3>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d9c:	f7f6 fe68 	bl	8000a70 <__aeabi_dcmpgt>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d174      	bne.n	8009e8e <_dtoa_r+0x69e>
 8009da4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009da8:	2000      	movs	r0, #0
 8009daa:	4914      	ldr	r1, [pc, #80]	; (8009dfc <_dtoa_r+0x60c>)
 8009dac:	f7f6 fa18 	bl	80001e0 <__aeabi_dsub>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009db8:	f7f6 fe3c 	bl	8000a34 <__aeabi_dcmplt>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f43f af30 	beq.w	8009c22 <_dtoa_r+0x432>
 8009dc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dc6:	2b30      	cmp	r3, #48	; 0x30
 8009dc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8009dcc:	d002      	beq.n	8009dd4 <_dtoa_r+0x5e4>
 8009dce:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009dd2:	e04a      	b.n	8009e6a <_dtoa_r+0x67a>
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	e7f4      	b.n	8009dc2 <_dtoa_r+0x5d2>
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <_dtoa_r+0x600>)
 8009dda:	f7f6 fbb9 	bl	8000550 <__aeabi_dmul>
 8009dde:	e9cd 0100 	strd	r0, r1, [sp]
 8009de2:	e7bc      	b.n	8009d5e <_dtoa_r+0x56e>
 8009de4:	0800aa70 	.word	0x0800aa70
 8009de8:	0800aa48 	.word	0x0800aa48
 8009dec:	3ff00000 	.word	0x3ff00000
 8009df0:	40240000 	.word	0x40240000
 8009df4:	401c0000 	.word	0x401c0000
 8009df8:	40140000 	.word	0x40140000
 8009dfc:	3fe00000 	.word	0x3fe00000
 8009e00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e04:	465d      	mov	r5, fp
 8009e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	f7f6 fcc9 	bl	80007a4 <__aeabi_ddiv>
 8009e12:	f7f6 fe4d 	bl	8000ab0 <__aeabi_d2iz>
 8009e16:	4680      	mov	r8, r0
 8009e18:	f7f6 fb30 	bl	800047c <__aeabi_i2d>
 8009e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e20:	f7f6 fb96 	bl	8000550 <__aeabi_dmul>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4630      	mov	r0, r6
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009e30:	f7f6 f9d6 	bl	80001e0 <__aeabi_dsub>
 8009e34:	f805 6b01 	strb.w	r6, [r5], #1
 8009e38:	eba5 060b 	sub.w	r6, r5, fp
 8009e3c:	45b1      	cmp	r9, r6
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	d139      	bne.n	8009eb8 <_dtoa_r+0x6c8>
 8009e44:	f7f6 f9ce 	bl	80001e4 <__adddf3>
 8009e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	460f      	mov	r7, r1
 8009e50:	f7f6 fe0e 	bl	8000a70 <__aeabi_dcmpgt>
 8009e54:	b9c8      	cbnz	r0, 8009e8a <_dtoa_r+0x69a>
 8009e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	f7f6 fddf 	bl	8000a20 <__aeabi_dcmpeq>
 8009e62:	b110      	cbz	r0, 8009e6a <_dtoa_r+0x67a>
 8009e64:	f018 0f01 	tst.w	r8, #1
 8009e68:	d10f      	bne.n	8009e8a <_dtoa_r+0x69a>
 8009e6a:	9904      	ldr	r1, [sp, #16]
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 fac6 	bl	800a3fe <_Bfree>
 8009e72:	2300      	movs	r3, #0
 8009e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e76:	702b      	strb	r3, [r5, #0]
 8009e78:	f10a 0301 	add.w	r3, sl, #1
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 8241 	beq.w	800a308 <_dtoa_r+0xb18>
 8009e86:	601d      	str	r5, [r3, #0]
 8009e88:	e23e      	b.n	800a308 <_dtoa_r+0xb18>
 8009e8a:	f8cd a020 	str.w	sl, [sp, #32]
 8009e8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e92:	2a39      	cmp	r2, #57	; 0x39
 8009e94:	f105 33ff 	add.w	r3, r5, #4294967295
 8009e98:	d108      	bne.n	8009eac <_dtoa_r+0x6bc>
 8009e9a:	459b      	cmp	fp, r3
 8009e9c:	d10a      	bne.n	8009eb4 <_dtoa_r+0x6c4>
 8009e9e:	9b08      	ldr	r3, [sp, #32]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	9308      	str	r3, [sp, #32]
 8009ea4:	2330      	movs	r3, #48	; 0x30
 8009ea6:	f88b 3000 	strb.w	r3, [fp]
 8009eaa:	465b      	mov	r3, fp
 8009eac:	781a      	ldrb	r2, [r3, #0]
 8009eae:	3201      	adds	r2, #1
 8009eb0:	701a      	strb	r2, [r3, #0]
 8009eb2:	e78c      	b.n	8009dce <_dtoa_r+0x5de>
 8009eb4:	461d      	mov	r5, r3
 8009eb6:	e7ea      	b.n	8009e8e <_dtoa_r+0x69e>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4b9b      	ldr	r3, [pc, #620]	; (800a128 <_dtoa_r+0x938>)
 8009ebc:	f7f6 fb48 	bl	8000550 <__aeabi_dmul>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	460f      	mov	r7, r1
 8009ec8:	f7f6 fdaa 	bl	8000a20 <__aeabi_dcmpeq>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d09a      	beq.n	8009e06 <_dtoa_r+0x616>
 8009ed0:	e7cb      	b.n	8009e6a <_dtoa_r+0x67a>
 8009ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	f000 808b 	beq.w	8009ff0 <_dtoa_r+0x800>
 8009eda:	9a06      	ldr	r2, [sp, #24]
 8009edc:	2a01      	cmp	r2, #1
 8009ede:	dc6e      	bgt.n	8009fbe <_dtoa_r+0x7ce>
 8009ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	d067      	beq.n	8009fb6 <_dtoa_r+0x7c6>
 8009ee6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009eea:	9f07      	ldr	r7, [sp, #28]
 8009eec:	9d05      	ldr	r5, [sp, #20]
 8009eee:	9a05      	ldr	r2, [sp, #20]
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	441a      	add	r2, r3
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	9205      	str	r2, [sp, #20]
 8009ef8:	4498      	add	r8, r3
 8009efa:	f000 fb20 	bl	800a53e <__i2b>
 8009efe:	4606      	mov	r6, r0
 8009f00:	2d00      	cmp	r5, #0
 8009f02:	dd0c      	ble.n	8009f1e <_dtoa_r+0x72e>
 8009f04:	f1b8 0f00 	cmp.w	r8, #0
 8009f08:	dd09      	ble.n	8009f1e <_dtoa_r+0x72e>
 8009f0a:	4545      	cmp	r5, r8
 8009f0c:	9a05      	ldr	r2, [sp, #20]
 8009f0e:	462b      	mov	r3, r5
 8009f10:	bfa8      	it	ge
 8009f12:	4643      	movge	r3, r8
 8009f14:	1ad2      	subs	r2, r2, r3
 8009f16:	9205      	str	r2, [sp, #20]
 8009f18:	1aed      	subs	r5, r5, r3
 8009f1a:	eba8 0803 	sub.w	r8, r8, r3
 8009f1e:	9b07      	ldr	r3, [sp, #28]
 8009f20:	b1eb      	cbz	r3, 8009f5e <_dtoa_r+0x76e>
 8009f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d067      	beq.n	8009ff8 <_dtoa_r+0x808>
 8009f28:	b18f      	cbz	r7, 8009f4e <_dtoa_r+0x75e>
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	463a      	mov	r2, r7
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 fba4 	bl	800a67c <__pow5mult>
 8009f34:	9a04      	ldr	r2, [sp, #16]
 8009f36:	4601      	mov	r1, r0
 8009f38:	4606      	mov	r6, r0
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fb08 	bl	800a550 <__multiply>
 8009f40:	9904      	ldr	r1, [sp, #16]
 8009f42:	9008      	str	r0, [sp, #32]
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 fa5a 	bl	800a3fe <_Bfree>
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	9b07      	ldr	r3, [sp, #28]
 8009f50:	1bda      	subs	r2, r3, r7
 8009f52:	d004      	beq.n	8009f5e <_dtoa_r+0x76e>
 8009f54:	9904      	ldr	r1, [sp, #16]
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fb90 	bl	800a67c <__pow5mult>
 8009f5c:	9004      	str	r0, [sp, #16]
 8009f5e:	2101      	movs	r1, #1
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 faec 	bl	800a53e <__i2b>
 8009f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f68:	4607      	mov	r7, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 81d0 	beq.w	800a310 <_dtoa_r+0xb20>
 8009f70:	461a      	mov	r2, r3
 8009f72:	4601      	mov	r1, r0
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fb81 	bl	800a67c <__pow5mult>
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	4607      	mov	r7, r0
 8009f80:	dc40      	bgt.n	800a004 <_dtoa_r+0x814>
 8009f82:	9b00      	ldr	r3, [sp, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d139      	bne.n	8009ffc <_dtoa_r+0x80c>
 8009f88:	9b01      	ldr	r3, [sp, #4]
 8009f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d136      	bne.n	800a000 <_dtoa_r+0x810>
 8009f92:	9b01      	ldr	r3, [sp, #4]
 8009f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f98:	0d1b      	lsrs	r3, r3, #20
 8009f9a:	051b      	lsls	r3, r3, #20
 8009f9c:	b12b      	cbz	r3, 8009faa <_dtoa_r+0x7ba>
 8009f9e:	9b05      	ldr	r3, [sp, #20]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	f108 0801 	add.w	r8, r8, #1
 8009fa8:	2301      	movs	r3, #1
 8009faa:	9307      	str	r3, [sp, #28]
 8009fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d12a      	bne.n	800a008 <_dtoa_r+0x818>
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	e030      	b.n	800a018 <_dtoa_r+0x828>
 8009fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fbc:	e795      	b.n	8009eea <_dtoa_r+0x6fa>
 8009fbe:	9b07      	ldr	r3, [sp, #28]
 8009fc0:	f109 37ff 	add.w	r7, r9, #4294967295
 8009fc4:	42bb      	cmp	r3, r7
 8009fc6:	bfbf      	itttt	lt
 8009fc8:	9b07      	ldrlt	r3, [sp, #28]
 8009fca:	9707      	strlt	r7, [sp, #28]
 8009fcc:	1afa      	sublt	r2, r7, r3
 8009fce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009fd0:	bfbb      	ittet	lt
 8009fd2:	189b      	addlt	r3, r3, r2
 8009fd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009fd6:	1bdf      	subge	r7, r3, r7
 8009fd8:	2700      	movlt	r7, #0
 8009fda:	f1b9 0f00 	cmp.w	r9, #0
 8009fde:	bfb5      	itete	lt
 8009fe0:	9b05      	ldrlt	r3, [sp, #20]
 8009fe2:	9d05      	ldrge	r5, [sp, #20]
 8009fe4:	eba3 0509 	sublt.w	r5, r3, r9
 8009fe8:	464b      	movge	r3, r9
 8009fea:	bfb8      	it	lt
 8009fec:	2300      	movlt	r3, #0
 8009fee:	e77e      	b.n	8009eee <_dtoa_r+0x6fe>
 8009ff0:	9f07      	ldr	r7, [sp, #28]
 8009ff2:	9d05      	ldr	r5, [sp, #20]
 8009ff4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009ff6:	e783      	b.n	8009f00 <_dtoa_r+0x710>
 8009ff8:	9a07      	ldr	r2, [sp, #28]
 8009ffa:	e7ab      	b.n	8009f54 <_dtoa_r+0x764>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e7d4      	b.n	8009faa <_dtoa_r+0x7ba>
 800a000:	9b00      	ldr	r3, [sp, #0]
 800a002:	e7d2      	b.n	8009faa <_dtoa_r+0x7ba>
 800a004:	2300      	movs	r3, #0
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a00e:	6918      	ldr	r0, [r3, #16]
 800a010:	f000 fa47 	bl	800a4a2 <__hi0bits>
 800a014:	f1c0 0020 	rsb	r0, r0, #32
 800a018:	4440      	add	r0, r8
 800a01a:	f010 001f 	ands.w	r0, r0, #31
 800a01e:	d047      	beq.n	800a0b0 <_dtoa_r+0x8c0>
 800a020:	f1c0 0320 	rsb	r3, r0, #32
 800a024:	2b04      	cmp	r3, #4
 800a026:	dd3b      	ble.n	800a0a0 <_dtoa_r+0x8b0>
 800a028:	9b05      	ldr	r3, [sp, #20]
 800a02a:	f1c0 001c 	rsb	r0, r0, #28
 800a02e:	4403      	add	r3, r0
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	4405      	add	r5, r0
 800a034:	4480      	add	r8, r0
 800a036:	9b05      	ldr	r3, [sp, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dd05      	ble.n	800a048 <_dtoa_r+0x858>
 800a03c:	461a      	mov	r2, r3
 800a03e:	9904      	ldr	r1, [sp, #16]
 800a040:	4620      	mov	r0, r4
 800a042:	f000 fb69 	bl	800a718 <__lshift>
 800a046:	9004      	str	r0, [sp, #16]
 800a048:	f1b8 0f00 	cmp.w	r8, #0
 800a04c:	dd05      	ble.n	800a05a <_dtoa_r+0x86a>
 800a04e:	4639      	mov	r1, r7
 800a050:	4642      	mov	r2, r8
 800a052:	4620      	mov	r0, r4
 800a054:	f000 fb60 	bl	800a718 <__lshift>
 800a058:	4607      	mov	r7, r0
 800a05a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a05c:	b353      	cbz	r3, 800a0b4 <_dtoa_r+0x8c4>
 800a05e:	4639      	mov	r1, r7
 800a060:	9804      	ldr	r0, [sp, #16]
 800a062:	f000 fbad 	bl	800a7c0 <__mcmp>
 800a066:	2800      	cmp	r0, #0
 800a068:	da24      	bge.n	800a0b4 <_dtoa_r+0x8c4>
 800a06a:	2300      	movs	r3, #0
 800a06c:	220a      	movs	r2, #10
 800a06e:	9904      	ldr	r1, [sp, #16]
 800a070:	4620      	mov	r0, r4
 800a072:	f000 f9db 	bl	800a42c <__multadd>
 800a076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a078:	9004      	str	r0, [sp, #16]
 800a07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 814d 	beq.w	800a31e <_dtoa_r+0xb2e>
 800a084:	2300      	movs	r3, #0
 800a086:	4631      	mov	r1, r6
 800a088:	220a      	movs	r2, #10
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 f9ce 	bl	800a42c <__multadd>
 800a090:	9b02      	ldr	r3, [sp, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	4606      	mov	r6, r0
 800a096:	dc4f      	bgt.n	800a138 <_dtoa_r+0x948>
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	dd4c      	ble.n	800a138 <_dtoa_r+0x948>
 800a09e:	e011      	b.n	800a0c4 <_dtoa_r+0x8d4>
 800a0a0:	d0c9      	beq.n	800a036 <_dtoa_r+0x846>
 800a0a2:	9a05      	ldr	r2, [sp, #20]
 800a0a4:	331c      	adds	r3, #28
 800a0a6:	441a      	add	r2, r3
 800a0a8:	9205      	str	r2, [sp, #20]
 800a0aa:	441d      	add	r5, r3
 800a0ac:	4498      	add	r8, r3
 800a0ae:	e7c2      	b.n	800a036 <_dtoa_r+0x846>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	e7f6      	b.n	800a0a2 <_dtoa_r+0x8b2>
 800a0b4:	f1b9 0f00 	cmp.w	r9, #0
 800a0b8:	dc38      	bgt.n	800a12c <_dtoa_r+0x93c>
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	dd35      	ble.n	800a12c <_dtoa_r+0x93c>
 800a0c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0c4:	9b02      	ldr	r3, [sp, #8]
 800a0c6:	b963      	cbnz	r3, 800a0e2 <_dtoa_r+0x8f2>
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	2205      	movs	r2, #5
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 f9ad 	bl	800a42c <__multadd>
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	9804      	ldr	r0, [sp, #16]
 800a0d8:	f000 fb72 	bl	800a7c0 <__mcmp>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f73f adcc 	bgt.w	8009c7a <_dtoa_r+0x48a>
 800a0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e4:	465d      	mov	r5, fp
 800a0e6:	ea6f 0a03 	mvn.w	sl, r3
 800a0ea:	f04f 0900 	mov.w	r9, #0
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 f984 	bl	800a3fe <_Bfree>
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	f43f aeb7 	beq.w	8009e6a <_dtoa_r+0x67a>
 800a0fc:	f1b9 0f00 	cmp.w	r9, #0
 800a100:	d005      	beq.n	800a10e <_dtoa_r+0x91e>
 800a102:	45b1      	cmp	r9, r6
 800a104:	d003      	beq.n	800a10e <_dtoa_r+0x91e>
 800a106:	4649      	mov	r1, r9
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 f978 	bl	800a3fe <_Bfree>
 800a10e:	4631      	mov	r1, r6
 800a110:	4620      	mov	r0, r4
 800a112:	f000 f974 	bl	800a3fe <_Bfree>
 800a116:	e6a8      	b.n	8009e6a <_dtoa_r+0x67a>
 800a118:	2700      	movs	r7, #0
 800a11a:	463e      	mov	r6, r7
 800a11c:	e7e1      	b.n	800a0e2 <_dtoa_r+0x8f2>
 800a11e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a122:	463e      	mov	r6, r7
 800a124:	e5a9      	b.n	8009c7a <_dtoa_r+0x48a>
 800a126:	bf00      	nop
 800a128:	40240000 	.word	0x40240000
 800a12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a12e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 80fa 	beq.w	800a32c <_dtoa_r+0xb3c>
 800a138:	2d00      	cmp	r5, #0
 800a13a:	dd05      	ble.n	800a148 <_dtoa_r+0x958>
 800a13c:	4631      	mov	r1, r6
 800a13e:	462a      	mov	r2, r5
 800a140:	4620      	mov	r0, r4
 800a142:	f000 fae9 	bl	800a718 <__lshift>
 800a146:	4606      	mov	r6, r0
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d04c      	beq.n	800a1e8 <_dtoa_r+0x9f8>
 800a14e:	6871      	ldr	r1, [r6, #4]
 800a150:	4620      	mov	r0, r4
 800a152:	f000 f920 	bl	800a396 <_Balloc>
 800a156:	6932      	ldr	r2, [r6, #16]
 800a158:	3202      	adds	r2, #2
 800a15a:	4605      	mov	r5, r0
 800a15c:	0092      	lsls	r2, r2, #2
 800a15e:	f106 010c 	add.w	r1, r6, #12
 800a162:	300c      	adds	r0, #12
 800a164:	f000 f90a 	bl	800a37c <memcpy>
 800a168:	2201      	movs	r2, #1
 800a16a:	4629      	mov	r1, r5
 800a16c:	4620      	mov	r0, r4
 800a16e:	f000 fad3 	bl	800a718 <__lshift>
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	f8cd b014 	str.w	fp, [sp, #20]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	46b1      	mov	r9, r6
 800a17e:	9307      	str	r3, [sp, #28]
 800a180:	4606      	mov	r6, r0
 800a182:	4639      	mov	r1, r7
 800a184:	9804      	ldr	r0, [sp, #16]
 800a186:	f7ff faa7 	bl	80096d8 <quorem>
 800a18a:	4649      	mov	r1, r9
 800a18c:	4605      	mov	r5, r0
 800a18e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a192:	9804      	ldr	r0, [sp, #16]
 800a194:	f000 fb14 	bl	800a7c0 <__mcmp>
 800a198:	4632      	mov	r2, r6
 800a19a:	9000      	str	r0, [sp, #0]
 800a19c:	4639      	mov	r1, r7
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 fb28 	bl	800a7f4 <__mdiff>
 800a1a4:	68c3      	ldr	r3, [r0, #12]
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	bb03      	cbnz	r3, 800a1ec <_dtoa_r+0x9fc>
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	9008      	str	r0, [sp, #32]
 800a1ae:	9804      	ldr	r0, [sp, #16]
 800a1b0:	f000 fb06 	bl	800a7c0 <__mcmp>
 800a1b4:	9a08      	ldr	r2, [sp, #32]
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	9308      	str	r3, [sp, #32]
 800a1be:	f000 f91e 	bl	800a3fe <_Bfree>
 800a1c2:	9b08      	ldr	r3, [sp, #32]
 800a1c4:	b9a3      	cbnz	r3, 800a1f0 <_dtoa_r+0xa00>
 800a1c6:	9a06      	ldr	r2, [sp, #24]
 800a1c8:	b992      	cbnz	r2, 800a1f0 <_dtoa_r+0xa00>
 800a1ca:	9a07      	ldr	r2, [sp, #28]
 800a1cc:	b982      	cbnz	r2, 800a1f0 <_dtoa_r+0xa00>
 800a1ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a1d2:	d029      	beq.n	800a228 <_dtoa_r+0xa38>
 800a1d4:	9b00      	ldr	r3, [sp, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	dd01      	ble.n	800a1de <_dtoa_r+0x9ee>
 800a1da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a1de:	9b05      	ldr	r3, [sp, #20]
 800a1e0:	1c5d      	adds	r5, r3, #1
 800a1e2:	f883 8000 	strb.w	r8, [r3]
 800a1e6:	e782      	b.n	800a0ee <_dtoa_r+0x8fe>
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	e7c2      	b.n	800a172 <_dtoa_r+0x982>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e7e3      	b.n	800a1b8 <_dtoa_r+0x9c8>
 800a1f0:	9a00      	ldr	r2, [sp, #0]
 800a1f2:	2a00      	cmp	r2, #0
 800a1f4:	db04      	blt.n	800a200 <_dtoa_r+0xa10>
 800a1f6:	d125      	bne.n	800a244 <_dtoa_r+0xa54>
 800a1f8:	9a06      	ldr	r2, [sp, #24]
 800a1fa:	bb1a      	cbnz	r2, 800a244 <_dtoa_r+0xa54>
 800a1fc:	9a07      	ldr	r2, [sp, #28]
 800a1fe:	bb0a      	cbnz	r2, 800a244 <_dtoa_r+0xa54>
 800a200:	2b00      	cmp	r3, #0
 800a202:	ddec      	ble.n	800a1de <_dtoa_r+0x9ee>
 800a204:	2201      	movs	r2, #1
 800a206:	9904      	ldr	r1, [sp, #16]
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 fa85 	bl	800a718 <__lshift>
 800a20e:	4639      	mov	r1, r7
 800a210:	9004      	str	r0, [sp, #16]
 800a212:	f000 fad5 	bl	800a7c0 <__mcmp>
 800a216:	2800      	cmp	r0, #0
 800a218:	dc03      	bgt.n	800a222 <_dtoa_r+0xa32>
 800a21a:	d1e0      	bne.n	800a1de <_dtoa_r+0x9ee>
 800a21c:	f018 0f01 	tst.w	r8, #1
 800a220:	d0dd      	beq.n	800a1de <_dtoa_r+0x9ee>
 800a222:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a226:	d1d8      	bne.n	800a1da <_dtoa_r+0x9ea>
 800a228:	9b05      	ldr	r3, [sp, #20]
 800a22a:	9a05      	ldr	r2, [sp, #20]
 800a22c:	1c5d      	adds	r5, r3, #1
 800a22e:	2339      	movs	r3, #57	; 0x39
 800a230:	7013      	strb	r3, [r2, #0]
 800a232:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a236:	2b39      	cmp	r3, #57	; 0x39
 800a238:	f105 32ff 	add.w	r2, r5, #4294967295
 800a23c:	d04f      	beq.n	800a2de <_dtoa_r+0xaee>
 800a23e:	3301      	adds	r3, #1
 800a240:	7013      	strb	r3, [r2, #0]
 800a242:	e754      	b.n	800a0ee <_dtoa_r+0x8fe>
 800a244:	9a05      	ldr	r2, [sp, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f102 0501 	add.w	r5, r2, #1
 800a24c:	dd06      	ble.n	800a25c <_dtoa_r+0xa6c>
 800a24e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a252:	d0e9      	beq.n	800a228 <_dtoa_r+0xa38>
 800a254:	f108 0801 	add.w	r8, r8, #1
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	e7c2      	b.n	800a1e2 <_dtoa_r+0x9f2>
 800a25c:	9a02      	ldr	r2, [sp, #8]
 800a25e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a262:	eba5 030b 	sub.w	r3, r5, fp
 800a266:	4293      	cmp	r3, r2
 800a268:	d021      	beq.n	800a2ae <_dtoa_r+0xabe>
 800a26a:	2300      	movs	r3, #0
 800a26c:	220a      	movs	r2, #10
 800a26e:	9904      	ldr	r1, [sp, #16]
 800a270:	4620      	mov	r0, r4
 800a272:	f000 f8db 	bl	800a42c <__multadd>
 800a276:	45b1      	cmp	r9, r6
 800a278:	9004      	str	r0, [sp, #16]
 800a27a:	f04f 0300 	mov.w	r3, #0
 800a27e:	f04f 020a 	mov.w	r2, #10
 800a282:	4649      	mov	r1, r9
 800a284:	4620      	mov	r0, r4
 800a286:	d105      	bne.n	800a294 <_dtoa_r+0xaa4>
 800a288:	f000 f8d0 	bl	800a42c <__multadd>
 800a28c:	4681      	mov	r9, r0
 800a28e:	4606      	mov	r6, r0
 800a290:	9505      	str	r5, [sp, #20]
 800a292:	e776      	b.n	800a182 <_dtoa_r+0x992>
 800a294:	f000 f8ca 	bl	800a42c <__multadd>
 800a298:	4631      	mov	r1, r6
 800a29a:	4681      	mov	r9, r0
 800a29c:	2300      	movs	r3, #0
 800a29e:	220a      	movs	r2, #10
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 f8c3 	bl	800a42c <__multadd>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	e7f2      	b.n	800a290 <_dtoa_r+0xaa0>
 800a2aa:	f04f 0900 	mov.w	r9, #0
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	9904      	ldr	r1, [sp, #16]
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 fa30 	bl	800a718 <__lshift>
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	9004      	str	r0, [sp, #16]
 800a2bc:	f000 fa80 	bl	800a7c0 <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	dcb6      	bgt.n	800a232 <_dtoa_r+0xa42>
 800a2c4:	d102      	bne.n	800a2cc <_dtoa_r+0xadc>
 800a2c6:	f018 0f01 	tst.w	r8, #1
 800a2ca:	d1b2      	bne.n	800a232 <_dtoa_r+0xa42>
 800a2cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2d0:	2b30      	cmp	r3, #48	; 0x30
 800a2d2:	f105 32ff 	add.w	r2, r5, #4294967295
 800a2d6:	f47f af0a 	bne.w	800a0ee <_dtoa_r+0x8fe>
 800a2da:	4615      	mov	r5, r2
 800a2dc:	e7f6      	b.n	800a2cc <_dtoa_r+0xadc>
 800a2de:	4593      	cmp	fp, r2
 800a2e0:	d105      	bne.n	800a2ee <_dtoa_r+0xafe>
 800a2e2:	2331      	movs	r3, #49	; 0x31
 800a2e4:	f10a 0a01 	add.w	sl, sl, #1
 800a2e8:	f88b 3000 	strb.w	r3, [fp]
 800a2ec:	e6ff      	b.n	800a0ee <_dtoa_r+0x8fe>
 800a2ee:	4615      	mov	r5, r2
 800a2f0:	e79f      	b.n	800a232 <_dtoa_r+0xa42>
 800a2f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a358 <_dtoa_r+0xb68>
 800a2f6:	e007      	b.n	800a308 <_dtoa_r+0xb18>
 800a2f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a35c <_dtoa_r+0xb6c>
 800a2fe:	b11b      	cbz	r3, 800a308 <_dtoa_r+0xb18>
 800a300:	f10b 0308 	add.w	r3, fp, #8
 800a304:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	4658      	mov	r0, fp
 800a30a:	b017      	add	sp, #92	; 0x5c
 800a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	9b06      	ldr	r3, [sp, #24]
 800a312:	2b01      	cmp	r3, #1
 800a314:	f77f ae35 	ble.w	8009f82 <_dtoa_r+0x792>
 800a318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a31a:	9307      	str	r3, [sp, #28]
 800a31c:	e649      	b.n	8009fb2 <_dtoa_r+0x7c2>
 800a31e:	9b02      	ldr	r3, [sp, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	dc03      	bgt.n	800a32c <_dtoa_r+0xb3c>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	2b02      	cmp	r3, #2
 800a328:	f73f aecc 	bgt.w	800a0c4 <_dtoa_r+0x8d4>
 800a32c:	465d      	mov	r5, fp
 800a32e:	4639      	mov	r1, r7
 800a330:	9804      	ldr	r0, [sp, #16]
 800a332:	f7ff f9d1 	bl	80096d8 <quorem>
 800a336:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a33a:	f805 8b01 	strb.w	r8, [r5], #1
 800a33e:	9a02      	ldr	r2, [sp, #8]
 800a340:	eba5 030b 	sub.w	r3, r5, fp
 800a344:	429a      	cmp	r2, r3
 800a346:	ddb0      	ble.n	800a2aa <_dtoa_r+0xaba>
 800a348:	2300      	movs	r3, #0
 800a34a:	220a      	movs	r2, #10
 800a34c:	9904      	ldr	r1, [sp, #16]
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 f86c 	bl	800a42c <__multadd>
 800a354:	9004      	str	r0, [sp, #16]
 800a356:	e7ea      	b.n	800a32e <_dtoa_r+0xb3e>
 800a358:	0800aa38 	.word	0x0800aa38
 800a35c:	0800aa3a 	.word	0x0800aa3a

0800a360 <_localeconv_r>:
 800a360:	4b04      	ldr	r3, [pc, #16]	; (800a374 <_localeconv_r+0x14>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6a18      	ldr	r0, [r3, #32]
 800a366:	4b04      	ldr	r3, [pc, #16]	; (800a378 <_localeconv_r+0x18>)
 800a368:	2800      	cmp	r0, #0
 800a36a:	bf08      	it	eq
 800a36c:	4618      	moveq	r0, r3
 800a36e:	30f0      	adds	r0, #240	; 0xf0
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20000188 	.word	0x20000188
 800a378:	200001ec 	.word	0x200001ec

0800a37c <memcpy>:
 800a37c:	b510      	push	{r4, lr}
 800a37e:	1e43      	subs	r3, r0, #1
 800a380:	440a      	add	r2, r1
 800a382:	4291      	cmp	r1, r2
 800a384:	d100      	bne.n	800a388 <memcpy+0xc>
 800a386:	bd10      	pop	{r4, pc}
 800a388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a390:	e7f7      	b.n	800a382 <memcpy+0x6>

0800a392 <__malloc_lock>:
 800a392:	4770      	bx	lr

0800a394 <__malloc_unlock>:
 800a394:	4770      	bx	lr

0800a396 <_Balloc>:
 800a396:	b570      	push	{r4, r5, r6, lr}
 800a398:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a39a:	4604      	mov	r4, r0
 800a39c:	460e      	mov	r6, r1
 800a39e:	b93d      	cbnz	r5, 800a3b0 <_Balloc+0x1a>
 800a3a0:	2010      	movs	r0, #16
 800a3a2:	f7fe fd7f 	bl	8008ea4 <malloc>
 800a3a6:	6260      	str	r0, [r4, #36]	; 0x24
 800a3a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3ac:	6005      	str	r5, [r0, #0]
 800a3ae:	60c5      	str	r5, [r0, #12]
 800a3b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a3b2:	68eb      	ldr	r3, [r5, #12]
 800a3b4:	b183      	cbz	r3, 800a3d8 <_Balloc+0x42>
 800a3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a3be:	b9b8      	cbnz	r0, 800a3f0 <_Balloc+0x5a>
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	fa01 f506 	lsl.w	r5, r1, r6
 800a3c6:	1d6a      	adds	r2, r5, #5
 800a3c8:	0092      	lsls	r2, r2, #2
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fabe 	bl	800a94c <_calloc_r>
 800a3d0:	b160      	cbz	r0, 800a3ec <_Balloc+0x56>
 800a3d2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a3d6:	e00e      	b.n	800a3f6 <_Balloc+0x60>
 800a3d8:	2221      	movs	r2, #33	; 0x21
 800a3da:	2104      	movs	r1, #4
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 fab5 	bl	800a94c <_calloc_r>
 800a3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3e4:	60e8      	str	r0, [r5, #12]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e4      	bne.n	800a3b6 <_Balloc+0x20>
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	6802      	ldr	r2, [r0, #0]
 800a3f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3fc:	e7f7      	b.n	800a3ee <_Balloc+0x58>

0800a3fe <_Bfree>:
 800a3fe:	b570      	push	{r4, r5, r6, lr}
 800a400:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a402:	4606      	mov	r6, r0
 800a404:	460d      	mov	r5, r1
 800a406:	b93c      	cbnz	r4, 800a418 <_Bfree+0x1a>
 800a408:	2010      	movs	r0, #16
 800a40a:	f7fe fd4b 	bl	8008ea4 <malloc>
 800a40e:	6270      	str	r0, [r6, #36]	; 0x24
 800a410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a414:	6004      	str	r4, [r0, #0]
 800a416:	60c4      	str	r4, [r0, #12]
 800a418:	b13d      	cbz	r5, 800a42a <_Bfree+0x2c>
 800a41a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a41c:	686a      	ldr	r2, [r5, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a424:	6029      	str	r1, [r5, #0]
 800a426:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a42a:	bd70      	pop	{r4, r5, r6, pc}

0800a42c <__multadd>:
 800a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a430:	690d      	ldr	r5, [r1, #16]
 800a432:	461f      	mov	r7, r3
 800a434:	4606      	mov	r6, r0
 800a436:	460c      	mov	r4, r1
 800a438:	f101 0c14 	add.w	ip, r1, #20
 800a43c:	2300      	movs	r3, #0
 800a43e:	f8dc 0000 	ldr.w	r0, [ip]
 800a442:	b281      	uxth	r1, r0
 800a444:	fb02 7101 	mla	r1, r2, r1, r7
 800a448:	0c0f      	lsrs	r7, r1, #16
 800a44a:	0c00      	lsrs	r0, r0, #16
 800a44c:	fb02 7000 	mla	r0, r2, r0, r7
 800a450:	b289      	uxth	r1, r1
 800a452:	3301      	adds	r3, #1
 800a454:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a458:	429d      	cmp	r5, r3
 800a45a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a45e:	f84c 1b04 	str.w	r1, [ip], #4
 800a462:	dcec      	bgt.n	800a43e <__multadd+0x12>
 800a464:	b1d7      	cbz	r7, 800a49c <__multadd+0x70>
 800a466:	68a3      	ldr	r3, [r4, #8]
 800a468:	42ab      	cmp	r3, r5
 800a46a:	dc12      	bgt.n	800a492 <__multadd+0x66>
 800a46c:	6861      	ldr	r1, [r4, #4]
 800a46e:	4630      	mov	r0, r6
 800a470:	3101      	adds	r1, #1
 800a472:	f7ff ff90 	bl	800a396 <_Balloc>
 800a476:	6922      	ldr	r2, [r4, #16]
 800a478:	3202      	adds	r2, #2
 800a47a:	f104 010c 	add.w	r1, r4, #12
 800a47e:	4680      	mov	r8, r0
 800a480:	0092      	lsls	r2, r2, #2
 800a482:	300c      	adds	r0, #12
 800a484:	f7ff ff7a 	bl	800a37c <memcpy>
 800a488:	4621      	mov	r1, r4
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ffb7 	bl	800a3fe <_Bfree>
 800a490:	4644      	mov	r4, r8
 800a492:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a496:	3501      	adds	r5, #1
 800a498:	615f      	str	r7, [r3, #20]
 800a49a:	6125      	str	r5, [r4, #16]
 800a49c:	4620      	mov	r0, r4
 800a49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4a2 <__hi0bits>:
 800a4a2:	0c02      	lsrs	r2, r0, #16
 800a4a4:	0412      	lsls	r2, r2, #16
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	b9b2      	cbnz	r2, 800a4d8 <__hi0bits+0x36>
 800a4aa:	0403      	lsls	r3, r0, #16
 800a4ac:	2010      	movs	r0, #16
 800a4ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4b2:	bf04      	itt	eq
 800a4b4:	021b      	lsleq	r3, r3, #8
 800a4b6:	3008      	addeq	r0, #8
 800a4b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4bc:	bf04      	itt	eq
 800a4be:	011b      	lsleq	r3, r3, #4
 800a4c0:	3004      	addeq	r0, #4
 800a4c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4c6:	bf04      	itt	eq
 800a4c8:	009b      	lsleq	r3, r3, #2
 800a4ca:	3002      	addeq	r0, #2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	db06      	blt.n	800a4de <__hi0bits+0x3c>
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	d503      	bpl.n	800a4dc <__hi0bits+0x3a>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	4770      	bx	lr
 800a4d8:	2000      	movs	r0, #0
 800a4da:	e7e8      	b.n	800a4ae <__hi0bits+0xc>
 800a4dc:	2020      	movs	r0, #32
 800a4de:	4770      	bx	lr

0800a4e0 <__lo0bits>:
 800a4e0:	6803      	ldr	r3, [r0, #0]
 800a4e2:	f013 0207 	ands.w	r2, r3, #7
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	d00b      	beq.n	800a502 <__lo0bits+0x22>
 800a4ea:	07da      	lsls	r2, r3, #31
 800a4ec:	d423      	bmi.n	800a536 <__lo0bits+0x56>
 800a4ee:	0798      	lsls	r0, r3, #30
 800a4f0:	bf49      	itett	mi
 800a4f2:	085b      	lsrmi	r3, r3, #1
 800a4f4:	089b      	lsrpl	r3, r3, #2
 800a4f6:	2001      	movmi	r0, #1
 800a4f8:	600b      	strmi	r3, [r1, #0]
 800a4fa:	bf5c      	itt	pl
 800a4fc:	600b      	strpl	r3, [r1, #0]
 800a4fe:	2002      	movpl	r0, #2
 800a500:	4770      	bx	lr
 800a502:	b298      	uxth	r0, r3
 800a504:	b9a8      	cbnz	r0, 800a532 <__lo0bits+0x52>
 800a506:	0c1b      	lsrs	r3, r3, #16
 800a508:	2010      	movs	r0, #16
 800a50a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a50e:	bf04      	itt	eq
 800a510:	0a1b      	lsreq	r3, r3, #8
 800a512:	3008      	addeq	r0, #8
 800a514:	071a      	lsls	r2, r3, #28
 800a516:	bf04      	itt	eq
 800a518:	091b      	lsreq	r3, r3, #4
 800a51a:	3004      	addeq	r0, #4
 800a51c:	079a      	lsls	r2, r3, #30
 800a51e:	bf04      	itt	eq
 800a520:	089b      	lsreq	r3, r3, #2
 800a522:	3002      	addeq	r0, #2
 800a524:	07da      	lsls	r2, r3, #31
 800a526:	d402      	bmi.n	800a52e <__lo0bits+0x4e>
 800a528:	085b      	lsrs	r3, r3, #1
 800a52a:	d006      	beq.n	800a53a <__lo0bits+0x5a>
 800a52c:	3001      	adds	r0, #1
 800a52e:	600b      	str	r3, [r1, #0]
 800a530:	4770      	bx	lr
 800a532:	4610      	mov	r0, r2
 800a534:	e7e9      	b.n	800a50a <__lo0bits+0x2a>
 800a536:	2000      	movs	r0, #0
 800a538:	4770      	bx	lr
 800a53a:	2020      	movs	r0, #32
 800a53c:	4770      	bx	lr

0800a53e <__i2b>:
 800a53e:	b510      	push	{r4, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	2101      	movs	r1, #1
 800a544:	f7ff ff27 	bl	800a396 <_Balloc>
 800a548:	2201      	movs	r2, #1
 800a54a:	6144      	str	r4, [r0, #20]
 800a54c:	6102      	str	r2, [r0, #16]
 800a54e:	bd10      	pop	{r4, pc}

0800a550 <__multiply>:
 800a550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	4614      	mov	r4, r2
 800a556:	690a      	ldr	r2, [r1, #16]
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	bfb8      	it	lt
 800a55e:	460b      	movlt	r3, r1
 800a560:	4688      	mov	r8, r1
 800a562:	bfbc      	itt	lt
 800a564:	46a0      	movlt	r8, r4
 800a566:	461c      	movlt	r4, r3
 800a568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a56c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a570:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a574:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a578:	eb07 0609 	add.w	r6, r7, r9
 800a57c:	42b3      	cmp	r3, r6
 800a57e:	bfb8      	it	lt
 800a580:	3101      	addlt	r1, #1
 800a582:	f7ff ff08 	bl	800a396 <_Balloc>
 800a586:	f100 0514 	add.w	r5, r0, #20
 800a58a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a58e:	462b      	mov	r3, r5
 800a590:	2200      	movs	r2, #0
 800a592:	4573      	cmp	r3, lr
 800a594:	d316      	bcc.n	800a5c4 <__multiply+0x74>
 800a596:	f104 0214 	add.w	r2, r4, #20
 800a59a:	f108 0114 	add.w	r1, r8, #20
 800a59e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a5a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	9b00      	ldr	r3, [sp, #0]
 800a5aa:	9201      	str	r2, [sp, #4]
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d80c      	bhi.n	800a5ca <__multiply+0x7a>
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	dd03      	ble.n	800a5bc <__multiply+0x6c>
 800a5b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d05d      	beq.n	800a678 <__multiply+0x128>
 800a5bc:	6106      	str	r6, [r0, #16]
 800a5be:	b003      	add	sp, #12
 800a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c4:	f843 2b04 	str.w	r2, [r3], #4
 800a5c8:	e7e3      	b.n	800a592 <__multiply+0x42>
 800a5ca:	f8b2 b000 	ldrh.w	fp, [r2]
 800a5ce:	f1bb 0f00 	cmp.w	fp, #0
 800a5d2:	d023      	beq.n	800a61c <__multiply+0xcc>
 800a5d4:	4689      	mov	r9, r1
 800a5d6:	46ac      	mov	ip, r5
 800a5d8:	f04f 0800 	mov.w	r8, #0
 800a5dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a5e0:	f8dc a000 	ldr.w	sl, [ip]
 800a5e4:	b2a3      	uxth	r3, r4
 800a5e6:	fa1f fa8a 	uxth.w	sl, sl
 800a5ea:	fb0b a303 	mla	r3, fp, r3, sl
 800a5ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5f2:	f8dc 4000 	ldr.w	r4, [ip]
 800a5f6:	4443      	add	r3, r8
 800a5f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a5fc:	fb0b 840a 	mla	r4, fp, sl, r8
 800a600:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a604:	46e2      	mov	sl, ip
 800a606:	b29b      	uxth	r3, r3
 800a608:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a60c:	454f      	cmp	r7, r9
 800a60e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a612:	f84a 3b04 	str.w	r3, [sl], #4
 800a616:	d82b      	bhi.n	800a670 <__multiply+0x120>
 800a618:	f8cc 8004 	str.w	r8, [ip, #4]
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a622:	3204      	adds	r2, #4
 800a624:	f1ba 0f00 	cmp.w	sl, #0
 800a628:	d020      	beq.n	800a66c <__multiply+0x11c>
 800a62a:	682b      	ldr	r3, [r5, #0]
 800a62c:	4689      	mov	r9, r1
 800a62e:	46a8      	mov	r8, r5
 800a630:	f04f 0b00 	mov.w	fp, #0
 800a634:	f8b9 c000 	ldrh.w	ip, [r9]
 800a638:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a63c:	fb0a 440c 	mla	r4, sl, ip, r4
 800a640:	445c      	add	r4, fp
 800a642:	46c4      	mov	ip, r8
 800a644:	b29b      	uxth	r3, r3
 800a646:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a64a:	f84c 3b04 	str.w	r3, [ip], #4
 800a64e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a652:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a656:	0c1b      	lsrs	r3, r3, #16
 800a658:	fb0a b303 	mla	r3, sl, r3, fp
 800a65c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a660:	454f      	cmp	r7, r9
 800a662:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a666:	d805      	bhi.n	800a674 <__multiply+0x124>
 800a668:	f8c8 3004 	str.w	r3, [r8, #4]
 800a66c:	3504      	adds	r5, #4
 800a66e:	e79b      	b.n	800a5a8 <__multiply+0x58>
 800a670:	46d4      	mov	ip, sl
 800a672:	e7b3      	b.n	800a5dc <__multiply+0x8c>
 800a674:	46e0      	mov	r8, ip
 800a676:	e7dd      	b.n	800a634 <__multiply+0xe4>
 800a678:	3e01      	subs	r6, #1
 800a67a:	e799      	b.n	800a5b0 <__multiply+0x60>

0800a67c <__pow5mult>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4615      	mov	r5, r2
 800a682:	f012 0203 	ands.w	r2, r2, #3
 800a686:	4606      	mov	r6, r0
 800a688:	460f      	mov	r7, r1
 800a68a:	d007      	beq.n	800a69c <__pow5mult+0x20>
 800a68c:	3a01      	subs	r2, #1
 800a68e:	4c21      	ldr	r4, [pc, #132]	; (800a714 <__pow5mult+0x98>)
 800a690:	2300      	movs	r3, #0
 800a692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a696:	f7ff fec9 	bl	800a42c <__multadd>
 800a69a:	4607      	mov	r7, r0
 800a69c:	10ad      	asrs	r5, r5, #2
 800a69e:	d035      	beq.n	800a70c <__pow5mult+0x90>
 800a6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6a2:	b93c      	cbnz	r4, 800a6b4 <__pow5mult+0x38>
 800a6a4:	2010      	movs	r0, #16
 800a6a6:	f7fe fbfd 	bl	8008ea4 <malloc>
 800a6aa:	6270      	str	r0, [r6, #36]	; 0x24
 800a6ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6b0:	6004      	str	r4, [r0, #0]
 800a6b2:	60c4      	str	r4, [r0, #12]
 800a6b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6bc:	b94c      	cbnz	r4, 800a6d2 <__pow5mult+0x56>
 800a6be:	f240 2171 	movw	r1, #625	; 0x271
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7ff ff3b 	bl	800a53e <__i2b>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	6003      	str	r3, [r0, #0]
 800a6d2:	f04f 0800 	mov.w	r8, #0
 800a6d6:	07eb      	lsls	r3, r5, #31
 800a6d8:	d50a      	bpl.n	800a6f0 <__pow5mult+0x74>
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ff36 	bl	800a550 <__multiply>
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	4681      	mov	r9, r0
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7ff fe88 	bl	800a3fe <_Bfree>
 800a6ee:	464f      	mov	r7, r9
 800a6f0:	106d      	asrs	r5, r5, #1
 800a6f2:	d00b      	beq.n	800a70c <__pow5mult+0x90>
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	b938      	cbnz	r0, 800a708 <__pow5mult+0x8c>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff ff27 	bl	800a550 <__multiply>
 800a702:	6020      	str	r0, [r4, #0]
 800a704:	f8c0 8000 	str.w	r8, [r0]
 800a708:	4604      	mov	r4, r0
 800a70a:	e7e4      	b.n	800a6d6 <__pow5mult+0x5a>
 800a70c:	4638      	mov	r0, r7
 800a70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a712:	bf00      	nop
 800a714:	0800ab38 	.word	0x0800ab38

0800a718 <__lshift>:
 800a718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a71c:	460c      	mov	r4, r1
 800a71e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	6849      	ldr	r1, [r1, #4]
 800a726:	eb0a 0903 	add.w	r9, sl, r3
 800a72a:	68a3      	ldr	r3, [r4, #8]
 800a72c:	4607      	mov	r7, r0
 800a72e:	4616      	mov	r6, r2
 800a730:	f109 0501 	add.w	r5, r9, #1
 800a734:	42ab      	cmp	r3, r5
 800a736:	db32      	blt.n	800a79e <__lshift+0x86>
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff fe2c 	bl	800a396 <_Balloc>
 800a73e:	2300      	movs	r3, #0
 800a740:	4680      	mov	r8, r0
 800a742:	f100 0114 	add.w	r1, r0, #20
 800a746:	461a      	mov	r2, r3
 800a748:	4553      	cmp	r3, sl
 800a74a:	db2b      	blt.n	800a7a4 <__lshift+0x8c>
 800a74c:	6920      	ldr	r0, [r4, #16]
 800a74e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a752:	f104 0314 	add.w	r3, r4, #20
 800a756:	f016 021f 	ands.w	r2, r6, #31
 800a75a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a75e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a762:	d025      	beq.n	800a7b0 <__lshift+0x98>
 800a764:	f1c2 0e20 	rsb	lr, r2, #32
 800a768:	2000      	movs	r0, #0
 800a76a:	681e      	ldr	r6, [r3, #0]
 800a76c:	468a      	mov	sl, r1
 800a76e:	4096      	lsls	r6, r2
 800a770:	4330      	orrs	r0, r6
 800a772:	f84a 0b04 	str.w	r0, [sl], #4
 800a776:	f853 0b04 	ldr.w	r0, [r3], #4
 800a77a:	459c      	cmp	ip, r3
 800a77c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a780:	d814      	bhi.n	800a7ac <__lshift+0x94>
 800a782:	6048      	str	r0, [r1, #4]
 800a784:	b108      	cbz	r0, 800a78a <__lshift+0x72>
 800a786:	f109 0502 	add.w	r5, r9, #2
 800a78a:	3d01      	subs	r5, #1
 800a78c:	4638      	mov	r0, r7
 800a78e:	f8c8 5010 	str.w	r5, [r8, #16]
 800a792:	4621      	mov	r1, r4
 800a794:	f7ff fe33 	bl	800a3fe <_Bfree>
 800a798:	4640      	mov	r0, r8
 800a79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79e:	3101      	adds	r1, #1
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	e7c7      	b.n	800a734 <__lshift+0x1c>
 800a7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	e7cd      	b.n	800a748 <__lshift+0x30>
 800a7ac:	4651      	mov	r1, sl
 800a7ae:	e7dc      	b.n	800a76a <__lshift+0x52>
 800a7b0:	3904      	subs	r1, #4
 800a7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7ba:	459c      	cmp	ip, r3
 800a7bc:	d8f9      	bhi.n	800a7b2 <__lshift+0x9a>
 800a7be:	e7e4      	b.n	800a78a <__lshift+0x72>

0800a7c0 <__mcmp>:
 800a7c0:	6903      	ldr	r3, [r0, #16]
 800a7c2:	690a      	ldr	r2, [r1, #16]
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	b530      	push	{r4, r5, lr}
 800a7c8:	d10c      	bne.n	800a7e4 <__mcmp+0x24>
 800a7ca:	0092      	lsls	r2, r2, #2
 800a7cc:	3014      	adds	r0, #20
 800a7ce:	3114      	adds	r1, #20
 800a7d0:	1884      	adds	r4, r0, r2
 800a7d2:	4411      	add	r1, r2
 800a7d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7dc:	4295      	cmp	r5, r2
 800a7de:	d003      	beq.n	800a7e8 <__mcmp+0x28>
 800a7e0:	d305      	bcc.n	800a7ee <__mcmp+0x2e>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	bd30      	pop	{r4, r5, pc}
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d3f3      	bcc.n	800a7d4 <__mcmp+0x14>
 800a7ec:	e7fa      	b.n	800a7e4 <__mcmp+0x24>
 800a7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f2:	e7f7      	b.n	800a7e4 <__mcmp+0x24>

0800a7f4 <__mdiff>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4628      	mov	r0, r5
 800a800:	4614      	mov	r4, r2
 800a802:	f7ff ffdd 	bl	800a7c0 <__mcmp>
 800a806:	1e06      	subs	r6, r0, #0
 800a808:	d108      	bne.n	800a81c <__mdiff+0x28>
 800a80a:	4631      	mov	r1, r6
 800a80c:	4638      	mov	r0, r7
 800a80e:	f7ff fdc2 	bl	800a396 <_Balloc>
 800a812:	2301      	movs	r3, #1
 800a814:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81c:	bfa4      	itt	ge
 800a81e:	4623      	movge	r3, r4
 800a820:	462c      	movge	r4, r5
 800a822:	4638      	mov	r0, r7
 800a824:	6861      	ldr	r1, [r4, #4]
 800a826:	bfa6      	itte	ge
 800a828:	461d      	movge	r5, r3
 800a82a:	2600      	movge	r6, #0
 800a82c:	2601      	movlt	r6, #1
 800a82e:	f7ff fdb2 	bl	800a396 <_Balloc>
 800a832:	692b      	ldr	r3, [r5, #16]
 800a834:	60c6      	str	r6, [r0, #12]
 800a836:	6926      	ldr	r6, [r4, #16]
 800a838:	f105 0914 	add.w	r9, r5, #20
 800a83c:	f104 0214 	add.w	r2, r4, #20
 800a840:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a844:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a848:	f100 0514 	add.w	r5, r0, #20
 800a84c:	f04f 0e00 	mov.w	lr, #0
 800a850:	f852 ab04 	ldr.w	sl, [r2], #4
 800a854:	f859 4b04 	ldr.w	r4, [r9], #4
 800a858:	fa1e f18a 	uxtah	r1, lr, sl
 800a85c:	b2a3      	uxth	r3, r4
 800a85e:	1ac9      	subs	r1, r1, r3
 800a860:	0c23      	lsrs	r3, r4, #16
 800a862:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a866:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a86a:	b289      	uxth	r1, r1
 800a86c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a870:	45c8      	cmp	r8, r9
 800a872:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a876:	4694      	mov	ip, r2
 800a878:	f845 3b04 	str.w	r3, [r5], #4
 800a87c:	d8e8      	bhi.n	800a850 <__mdiff+0x5c>
 800a87e:	45bc      	cmp	ip, r7
 800a880:	d304      	bcc.n	800a88c <__mdiff+0x98>
 800a882:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a886:	b183      	cbz	r3, 800a8aa <__mdiff+0xb6>
 800a888:	6106      	str	r6, [r0, #16]
 800a88a:	e7c5      	b.n	800a818 <__mdiff+0x24>
 800a88c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a890:	fa1e f381 	uxtah	r3, lr, r1
 800a894:	141a      	asrs	r2, r3, #16
 800a896:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a8a4:	f845 3b04 	str.w	r3, [r5], #4
 800a8a8:	e7e9      	b.n	800a87e <__mdiff+0x8a>
 800a8aa:	3e01      	subs	r6, #1
 800a8ac:	e7e9      	b.n	800a882 <__mdiff+0x8e>

0800a8ae <__d2b>:
 800a8ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8b2:	460e      	mov	r6, r1
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	ec59 8b10 	vmov	r8, r9, d0
 800a8ba:	4615      	mov	r5, r2
 800a8bc:	f7ff fd6b 	bl	800a396 <_Balloc>
 800a8c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8ca:	bb34      	cbnz	r4, 800a91a <__d2b+0x6c>
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	f1b8 0300 	subs.w	r3, r8, #0
 800a8d2:	d027      	beq.n	800a924 <__d2b+0x76>
 800a8d4:	a802      	add	r0, sp, #8
 800a8d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a8da:	f7ff fe01 	bl	800a4e0 <__lo0bits>
 800a8de:	9900      	ldr	r1, [sp, #0]
 800a8e0:	b1f0      	cbz	r0, 800a920 <__d2b+0x72>
 800a8e2:	9a01      	ldr	r2, [sp, #4]
 800a8e4:	f1c0 0320 	rsb	r3, r0, #32
 800a8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ec:	430b      	orrs	r3, r1
 800a8ee:	40c2      	lsrs	r2, r0
 800a8f0:	617b      	str	r3, [r7, #20]
 800a8f2:	9201      	str	r2, [sp, #4]
 800a8f4:	9b01      	ldr	r3, [sp, #4]
 800a8f6:	61bb      	str	r3, [r7, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bf14      	ite	ne
 800a8fc:	2102      	movne	r1, #2
 800a8fe:	2101      	moveq	r1, #1
 800a900:	6139      	str	r1, [r7, #16]
 800a902:	b1c4      	cbz	r4, 800a936 <__d2b+0x88>
 800a904:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a908:	4404      	add	r4, r0
 800a90a:	6034      	str	r4, [r6, #0]
 800a90c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a910:	6028      	str	r0, [r5, #0]
 800a912:	4638      	mov	r0, r7
 800a914:	b003      	add	sp, #12
 800a916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a91e:	e7d5      	b.n	800a8cc <__d2b+0x1e>
 800a920:	6179      	str	r1, [r7, #20]
 800a922:	e7e7      	b.n	800a8f4 <__d2b+0x46>
 800a924:	a801      	add	r0, sp, #4
 800a926:	f7ff fddb 	bl	800a4e0 <__lo0bits>
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	2101      	movs	r1, #1
 800a930:	6139      	str	r1, [r7, #16]
 800a932:	3020      	adds	r0, #32
 800a934:	e7e5      	b.n	800a902 <__d2b+0x54>
 800a936:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a93a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a93e:	6030      	str	r0, [r6, #0]
 800a940:	6918      	ldr	r0, [r3, #16]
 800a942:	f7ff fdae 	bl	800a4a2 <__hi0bits>
 800a946:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a94a:	e7e1      	b.n	800a910 <__d2b+0x62>

0800a94c <_calloc_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	fb02 f401 	mul.w	r4, r2, r1
 800a952:	4621      	mov	r1, r4
 800a954:	f7fe fb0c 	bl	8008f70 <_malloc_r>
 800a958:	4605      	mov	r5, r0
 800a95a:	b118      	cbz	r0, 800a964 <_calloc_r+0x18>
 800a95c:	4622      	mov	r2, r4
 800a95e:	2100      	movs	r1, #0
 800a960:	f7fe fab0 	bl	8008ec4 <memset>
 800a964:	4628      	mov	r0, r5
 800a966:	bd38      	pop	{r3, r4, r5, pc}

0800a968 <__ascii_mbtowc>:
 800a968:	b082      	sub	sp, #8
 800a96a:	b901      	cbnz	r1, 800a96e <__ascii_mbtowc+0x6>
 800a96c:	a901      	add	r1, sp, #4
 800a96e:	b142      	cbz	r2, 800a982 <__ascii_mbtowc+0x1a>
 800a970:	b14b      	cbz	r3, 800a986 <__ascii_mbtowc+0x1e>
 800a972:	7813      	ldrb	r3, [r2, #0]
 800a974:	600b      	str	r3, [r1, #0]
 800a976:	7812      	ldrb	r2, [r2, #0]
 800a978:	1c10      	adds	r0, r2, #0
 800a97a:	bf18      	it	ne
 800a97c:	2001      	movne	r0, #1
 800a97e:	b002      	add	sp, #8
 800a980:	4770      	bx	lr
 800a982:	4610      	mov	r0, r2
 800a984:	e7fb      	b.n	800a97e <__ascii_mbtowc+0x16>
 800a986:	f06f 0001 	mvn.w	r0, #1
 800a98a:	e7f8      	b.n	800a97e <__ascii_mbtowc+0x16>

0800a98c <__ascii_wctomb>:
 800a98c:	b149      	cbz	r1, 800a9a2 <__ascii_wctomb+0x16>
 800a98e:	2aff      	cmp	r2, #255	; 0xff
 800a990:	bf85      	ittet	hi
 800a992:	238a      	movhi	r3, #138	; 0x8a
 800a994:	6003      	strhi	r3, [r0, #0]
 800a996:	700a      	strbls	r2, [r1, #0]
 800a998:	f04f 30ff 	movhi.w	r0, #4294967295
 800a99c:	bf98      	it	ls
 800a99e:	2001      	movls	r0, #1
 800a9a0:	4770      	bx	lr
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	4770      	bx	lr
	...

0800a9a8 <_init>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	bf00      	nop
 800a9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ae:	bc08      	pop	{r3}
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	4770      	bx	lr

0800a9b4 <_fini>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	bf00      	nop
 800a9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ba:	bc08      	pop	{r3}
 800a9bc:	469e      	mov	lr, r3
 800a9be:	4770      	bx	lr
